package com.catfiz.base;

import android.database.Cursor;
import com.catfiz.model.Address;
import com.catfiz.model.Attachment;
import com.catfiz.model.Category;
import com.catfiz.model.Comment;
import com.catfiz.model.Email;
import com.catfiz.model.Fizzlink;
import com.catfiz.model.Group;
import com.catfiz.model.Media;
import com.catfiz.model.Message;
import com.catfiz.model.PhoneNumber;
import com.catfiz.model.Update;
import com.catfiz.model.User;
import com.catfiz.pool.PoolDataStorage;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.CatfishService;
import com.catfiz.service.FizzlinkDataStorage;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.svcpersistent.TaskDataStorage;
import com.catfiz.util.Log;
import com.catfiz.util.MimeTypeParser;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class CursorParser {
    private static final String TAG = "CursorParser";

    /* synthetic */ class AnonymousClass1 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType = new int[MessageType.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SHARE_SLINK.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SHARE_SLINK_AT_COMMENT.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SHARE_SLINK_AT_POOL.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
        }
    }

    public static Address parseAddress(Cursor cursor) {
        return new Address();
    }

    public static List parseAddresses(Cursor cursor) {
        List arrayList = new ArrayList();
        while (true) {
            Address parseAddress = parseAddress(cursor);
            if (parseAddress == null) {
                return arrayList;
            }
            arrayList.add(parseAddress);
        }
    }

    public static List parseCategories(Cursor cursor) {
        List arrayList = new ArrayList();
        while (true) {
            Category parseCategory = parseCategory(cursor);
            if (parseCategory == null) {
                return arrayList;
            }
            arrayList.add(parseCategory);
        }
    }

    public static Category parseCategory(Cursor cursor) {
        if (!cursor.moveToNext()) {
            return null;
        }
        int columnIndex = cursor.getColumnIndex("_id");
        int columnIndex2 = cursor.getColumnIndex(FriendListDataStorage.GROUPCONTACTNAME);
        int columnIndex3 = cursor.getColumnIndex(FriendListDataStorage.GROUPFRIENDCOUNT);
        int columnIndex4 = cursor.getColumnIndex(FriendListDataStorage.GROUPCONTACTID);
        Category category = new Category();
        category.setID(cursor.getInt(columnIndex));
        if (columnIndex2 >= 0) {
            category.setName(cursor.getString(columnIndex2));
        }
        if (columnIndex3 >= 0) {
            category.setFriendCount(cursor.getInt(columnIndex3));
        }
        if (columnIndex4 < 0) {
            return category;
        }
        category.setID(cursor.getInt(columnIndex4));
        return category;
    }

    public static Email parseEmail(Cursor cursor) {
        return new Email();
    }

    public static List parseEmails(Cursor cursor) {
        List arrayList = new ArrayList();
        while (true) {
            Email parseEmail = parseEmail(cursor);
            if (parseEmail == null) {
                return arrayList;
            }
            arrayList.add(parseEmail);
        }
    }

    public static Fizzlink parseFizzlink(Cursor cursor) {
        if (!cursor.moveToNext()) {
            return null;
        }
        int columnIndex = cursor.getColumnIndex(ServerMessageDataStorage.DATAFILEPATH);
        int columnIndex2 = cursor.getColumnIndex(ServerMessageDataStorage.SLINK);
        int columnIndex3 = cursor.getColumnIndex(TaskDataStorage.TIMESTAMP);
        int columnIndex4 = cursor.getColumnIndex(ServerMessageDataStorage.MESSAGE);
        int columnIndex5 = cursor.getColumnIndex(ServerMessageDataStorage.OBJECTSEQUENCE);
        int columnIndex6 = cursor.getColumnIndex(TaskDataStorage.SENDERPIN);
        int columnIndex7 = cursor.getColumnIndex(TaskDataStorage.DATA_SIZE);
        Fizzlink fizzlink = new Fizzlink();
        fizzlink.setFilePath(cursor.getString(columnIndex));
        fizzlink.setLink(cursor.getString(columnIndex2));
        fizzlink.setMessage(cursor.getString(columnIndex4));
        fizzlink.setTimeStamp(Long.valueOf(cursor.getLong(columnIndex3)));
        fizzlink.setSequence(Long.valueOf(cursor.getLong(columnIndex5)));
        fizzlink.setDataSize(cursor.getInt(columnIndex7));
        if (columnIndex6 < 0) {
            return fizzlink;
        }
        fizzlink.setSenderPin(cursor.getString(columnIndex6));
        return fizzlink;
    }

    public static Fizzlink parseFizzlinkDetail(Cursor cursor) {
        if (!cursor.moveToNext()) {
            return null;
        }
        int columnIndex = cursor.getColumnIndex(ServerMessageDataStorage.IMAGETHUMB_URI);
        int columnIndex2 = cursor.getColumnIndex(FizzlinkDataStorage.DATATYPE);
        int columnIndex3 = cursor.getColumnIndex(FizzlinkDataStorage.DESCRIPTION);
        int columnIndex4 = cursor.getColumnIndex(ServerMessageDataStorage.SENDERNAME);
        int columnIndex5 = cursor.getColumnIndex(TaskDataStorage.SENDERPIN);
        int columnIndex6 = cursor.getColumnIndex(FriendListDataStorage.FILENAME);
        int columnIndex7 = cursor.getColumnIndex(TaskDataStorage.DATA_SIZE);
        int columnIndex8 = cursor.getColumnIndex(ServerMessageDataStorage.DATAFILEPATH);
        int columnIndex9 = cursor.getColumnIndex(TaskDataStorage.TIMESTAMP);
        Fizzlink fizzlink = new Fizzlink();
        if (cursor.getCount() > 0) {
            fizzlink.setFilePath(cursor.getString(columnIndex8));
            fizzlink.setTimeStamp(Long.valueOf(cursor.getLong(columnIndex9)));
            fizzlink.setImgThumbUri(cursor.getString(columnIndex));
            fizzlink.setDataType(cursor.getInt(columnIndex2));
            fizzlink.setDescription(cursor.getString(columnIndex3));
            fizzlink.setSenderName(cursor.getString(columnIndex4));
            fizzlink.setFileName(cursor.getString(columnIndex6));
            fizzlink.setDataSize(cursor.getInt(columnIndex7));
            fizzlink.setSenderPin(cursor.getString(columnIndex5));
            fizzlink.setNoData(false);
            return fizzlink;
        }
        fizzlink.setNoData(true);
        return fizzlink;
    }

    public static List parseFizzlinks(Cursor cursor) {
        List arrayList = new ArrayList();
        while (true) {
            Fizzlink parseFizzlink = parseFizzlink(cursor);
            if (parseFizzlink == null) {
                return arrayList;
            }
            arrayList.add(parseFizzlink);
        }
    }

    public static Group parseGroup(Cursor cursor) {
        if (!cursor.moveToNext()) {
            return null;
        }
        int columnIndex = cursor.getColumnIndex(PoolDataStorage.TOPIC_KEY);
        int columnIndex2 = cursor.getColumnIndex(PoolDataStorage.TITLE);
        int columnIndex3 = cursor.getColumnIndex(ServerMessageDataStorage.MESSAGE);
        int columnIndex4 = cursor.getColumnIndex(TaskDataStorage.SENDERPIN);
        int columnIndex5 = cursor.getColumnIndex(ServerMessageDataStorage.SENDERNAME);
        int columnIndex6 = cursor.getColumnIndex(PoolDataStorage.INVITORNAME);
        int columnIndex7 = cursor.getColumnIndex(FriendListDataStorage.LASTACTIVITY);
        int columnIndex8 = cursor.getColumnIndex(PoolDataStorage.MEMBERCOUNT);
        int columnIndex9 = cursor.getColumnIndex(PoolDataStorage.DISCUSSCOUNT);
        int columnIndex10 = cursor.getColumnIndex(PoolDataStorage.UNREADMESSAGECOUNT);
        int columnIndex11 = cursor.getColumnIndex(ServerMessageDataStorage.DELIVERYSTATUS);
        int columnIndex12 = cursor.getColumnIndex(PoolDataStorage.HAVEUNREADITEM);
        int columnIndex13 = cursor.getColumnIndex(FriendListDataStorage.LASTMESSAGE);
        int columnIndex14 = cursor.getColumnIndex(FriendListDataStorage.LASTMESSAGETYPE);
        int columnIndex15 = cursor.getColumnIndex(FriendListDataStorage.LASTDELIVERYSTATUS);
        int columnIndex16 = cursor.getColumnIndex(PoolDataStorage.LASTMESSAGESENDERPIN);
        int columnIndex17 = cursor.getColumnIndex(PoolDataStorage.LASTMESSAGESENDERNAME);
        int columnIndex18 = cursor.getColumnIndex(PoolDataStorage.DELETED_POOL);
        int columnIndex19 = cursor.getColumnIndex(PoolDataStorage.LASTREADPOSITION);
        int columnIndex20 = cursor.getColumnIndex(ServerMessageDataStorage.IMAGEPATH);
        int columnIndex21 = cursor.getColumnIndex(ServerMessageDataStorage.IMAGETHUMB_URI);
        long j = cursor.getLong(cursor.getColumnIndex(ServerMessageDataStorage.SEQUENCE));
        Date date = new Date();
        date.setTime(j);
        new SimpleDateFormat("HH:mm, dd MMMM yyyy").format(date);
        Group group = new Group();
        group.setGroupID(cursor.getString(columnIndex));
        group.setName(cursor.getString(columnIndex2));
        group.setNotes(cursor.getString(columnIndex3));
        group.setLastActivity(cursor.getString(columnIndex7));
        group.setInvitorName(cursor.getString(columnIndex6));
        group.setDeleted(cursor.getInt(columnIndex18) == 1);
        group.setLastReadMsgPosition(cursor.getInt(columnIndex19));
        User user = new User();
        user.setId(cursor.getString(columnIndex4));
        user.setName(cursor.getString(columnIndex5));
        group.setOwner(user);
        group.setMembersCount(cursor.getInt(columnIndex8));
        group.setMessagesCount(cursor.getInt(columnIndex9));
        group.setUnreadMessagescount(cursor.getInt(columnIndex10));
        group.setDeliveryStatus(cursor.getInt(columnIndex11));
        if (columnIndex15 >= 0) {
            group.setLastDeliveryStatus(cursor.getInt(columnIndex15));
        }
        group.setHaveUnreadItem(cursor.getInt(columnIndex12));
        group.setImagePath(cursor.getString(columnIndex20));
        group.setImageThumbURI(cursor.getString(columnIndex21));
        group.setCreateDate(j);
        if (columnIndex13 >= 0) {
            Message message = new Message();
            message.setText(cursor.getString(columnIndex13));
            if (columnIndex14 >= 0) {
                message.setType(cursor.getInt(columnIndex14));
            }
            if (columnIndex15 >= 0) {
                message.setDeliveryStatus(cursor.getInt(columnIndex15));
            }
            if (columnIndex16 >= 0 && columnIndex17 >= 0) {
                User user2 = new User();
                user2.setId(cursor.getString(columnIndex16));
                user2.setName(cursor.getString(columnIndex17));
                message.setSender(user2);
            }
            group.setLastMessage(message);
        }
        return group;
    }

    public static List parseGroups(Cursor cursor) {
        List arrayList = new ArrayList();
        while (true) {
            Group parseGroup = parseGroup(cursor);
            if (parseGroup == null) {
                return arrayList;
            }
            arrayList.add(parseGroup);
        }
    }

    public static Message parseMessage(Cursor cursor) {
        if (!cursor.moveToNext()) {
            return null;
        }
        Fizzlink parsingFizzlinkFromTextMessage;
        int columnIndex = cursor.getColumnIndex(TaskDataStorage.SENDERPIN);
        int columnIndex2 = cursor.getColumnIndex(ServerMessageDataStorage.SENDERNAME);
        int columnIndex3 = cursor.getColumnIndex(ServerMessageDataStorage.MESSAGE);
        int columnIndex4 = cursor.getColumnIndex(TaskDataStorage.MESSAGETYPE);
        int columnIndex5 = cursor.getColumnIndex(TaskDataStorage.TIMESTAMP);
        int columnIndex6 = cursor.getColumnIndex(PoolDataStorage.TOPIC_KEY);
        int columnIndex7 = cursor.getColumnIndex(ServerMessageDataStorage.DELIVERYSTATUS);
        int columnIndex8 = cursor.getColumnIndex(ServerMessageDataStorage.VOICEFILEPATH);
        int columnIndex9 = cursor.getColumnIndex(ServerMessageDataStorage.IMAGEPATH);
        int columnIndex10 = cursor.getColumnIndex(ServerMessageDataStorage.DATAFILEPATH);
        int columnIndex11 = cursor.getColumnIndex(ServerMessageDataStorage.IMAGETHUMB_URI);
        int columnIndex12 = cursor.getColumnIndex(ServerMessageDataStorage.SLINK);
        int columnIndex13 = cursor.getColumnIndex(ServerMessageDataStorage.SEQUENCE);
        cursor.getColumnIndex(CatfishDataStorage.CONVERSATION_KEY);
        int columnIndex14 = cursor.getColumnIndex(PoolDataStorage.LIKECOUNT);
        int columnIndex15 = cursor.getColumnIndex(PoolDataStorage.AREULIKE);
        int columnIndex16 = cursor.getColumnIndex(CatfishDataStorage.STREAMTHUMBNAILDOWNLOAD);
        int columnIndex17 = cursor.getColumnIndex(ServerMessageDataStorage.SEQUENCE);
        int columnIndex18 = cursor.getColumnIndex(ServerMessageDataStorage.DATAFILEPATH);
        int columnIndex19 = cursor.getColumnIndex(FizzlinkDataStorage.DATATYPE);
        int columnIndex20 = cursor.getColumnIndex(ServerMessageDataStorage.OBJECTOWNERPIN);
        int columnIndex21 = cursor.getColumnIndex(ServerMessageDataStorage.OBJECTSEQUENCE);
        int columnIndex22 = cursor.getColumnIndex(CatfishDataStorage.ATTACHMENT_FILE_SIZE);
        User user = new User();
        user.setId(cursor.getString(columnIndex));
        user.setName(cursor.getString(columnIndex2));
        Message message = new Message();
        message.setText(cursor.getString(columnIndex3));
        message.setSender(user);
        if (columnIndex16 >= 0) {
            message.setStreamThumbnailStatus(cursor.getInt(columnIndex16));
        }
        message.setTimeStamp(cursor.getString(columnIndex5));
        if (columnIndex4 >= 0) {
            message.setType(cursor.getInt(columnIndex4));
        }
        message.setDeliveryStatus(cursor.getInt(columnIndex7));
        if (columnIndex6 >= 0) {
            message.setTopicKey(cursor.getString(columnIndex6));
        }
        if (columnIndex19 >= 0) {
            message.setPoolDataType(cursor.getInt(columnIndex19));
        }
        message.setVoiceFilePath(cursor.getString(columnIndex8));
        message.setImageFilePath(cursor.getString(columnIndex9));
        message.setDataFilePath(cursor.getString(columnIndex10));
        message.setImageThumbURI(cursor.getString(columnIndex11));
        message.setSequence(cursor.getLong(columnIndex13));
        switch (AnonymousClass1.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[message.getType()].ordinal()]) {
            case e.b /*1*/:
            case e.c /*2*/:
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                message.setSlink(Fizzlink.getSlinkFromJson(message.getText()));
                parsingFizzlinkFromTextMessage = Fizzlink.parsingFizzlinkFromTextMessage(message.getText());
                message.setFizzlink(parsingFizzlinkFromTextMessage);
                break;
            default:
                if (columnIndex12 >= 0) {
                    message.setSlink(cursor.getString(columnIndex12));
                }
                parsingFizzlinkFromTextMessage = Fizzlink.parsingFizzlinkFromCursor(cursor);
                message.setFizzlink(parsingFizzlinkFromTextMessage);
                break;
        }
        if (columnIndex20 >= 0 && columnIndex21 >= 0) {
            parsingFizzlinkFromTextMessage.setObjectOwner(cursor.getString(columnIndex20));
            parsingFizzlinkFromTextMessage.setObjectSequence(cursor.getLong(columnIndex21));
        }
        Attachment attachment = new Attachment();
        if (columnIndex22 >= 0) {
            attachment.setSize(cursor.getInt(columnIndex22));
        }
        message.setAttachment(attachment);
        if (columnIndex14 >= 0) {
            message.setLikeCount(cursor.getInt(columnIndex14));
        }
        if (columnIndex15 >= 0) {
            message.setMeLikeThis(cursor.getInt(columnIndex15) > 0);
        }
        if (columnIndex17 >= 0) {
            message.setPoolSequence(cursor.getLong(columnIndex17));
        }
        if (columnIndex18 >= 0) {
            message.setPoolDataFileSeq(cursor.getLong(columnIndex18));
        }
        return message;
    }

    public static List parseMessages(Cursor cursor) {
        List arrayList = new ArrayList();
        while (true) {
            Message parseMessage = parseMessage(cursor);
            if (parseMessage == null) {
                return arrayList;
            }
            arrayList.add(parseMessage);
        }
    }

    public static User parseMessagesInUser(Cursor cursor) {
        User user = new User();
        List arrayList = new ArrayList();
        int i = 0;
        while (true) {
            Message parseMessage = parseMessage(cursor);
            if (parseMessage != null) {
                arrayList.add(parseMessage);
                Log.d(TAG, "delivery status is :" + parseMessage.getDeliveryStatus());
                if (parseMessage.getDeliveryStatus() != MessageDeliveryStatus.READ.ordinal()) {
                    i++;
                }
            } else {
                user.setUnreadCount(i);
                user.setMessages(arrayList);
                return user;
            }
        }
    }

    public static User parseNicLink(Cursor cursor) {
        User user = new User();
        if (cursor.moveToNext()) {
            int columnIndex = cursor.getColumnIndex(CatfishDataStorage.NIC_NAME);
            int columnIndex2 = cursor.getColumnIndex(FriendListDataStorage.STATUS);
            if (columnIndex >= 0) {
                user.setName(cursor.getString(columnIndex));
            }
            if (columnIndex2 >= 0) {
                user.setStatus(cursor.getString(columnIndex2));
            }
        }
        return user;
    }

    public static PhoneNumber parsePhone(Cursor cursor) {
        return new PhoneNumber();
    }

    public static List parsePhones(Cursor cursor) {
        List arrayList = new ArrayList();
        while (true) {
            PhoneNumber parsePhone = parsePhone(cursor);
            if (parsePhone == null) {
                return arrayList;
            }
            arrayList.add(parsePhone);
        }
    }

    public static Media parseSharedImg(Cursor cursor) {
        if (!cursor.moveToNext()) {
            return null;
        }
        int columnIndex = cursor.getColumnIndex(ServerMessageDataStorage.IMAGEPATH);
        int columnIndex2 = cursor.getColumnIndex(FriendListDataStorage.USERPIN);
        Media media = new Media();
        if (columnIndex >= 0) {
            media.setImagePath(cursor.getString(columnIndex));
        }
        if (columnIndex2 < 0) {
            return media;
        }
        media.setImagePath(cursor.getString(columnIndex2));
        return media;
    }

    public static List parseSharedImgs(Cursor cursor) {
        List arrayList = new ArrayList();
        while (true) {
            Media parseSharedImg = parseSharedImg(cursor);
            if (parseSharedImg == null) {
                return arrayList;
            }
            arrayList.add(parseSharedImg);
        }
    }

    public static Comment parseStatusComment(Cursor cursor) {
        if (!cursor.moveToNext()) {
            return null;
        }
        int columnIndex = cursor.getColumnIndex(TaskDataStorage.SENDERPIN);
        int columnIndex2 = cursor.getColumnIndex(ServerMessageDataStorage.SENDERNAME);
        int columnIndex3 = cursor.getColumnIndex(ServerMessageDataStorage.MESSAGE);
        int columnIndex4 = cursor.getColumnIndex(ServerMessageDataStorage.SEQUENCE);
        int columnIndex5 = cursor.getColumnIndex(ServerMessageDataStorage.OBJECTSEQUENCE);
        int columnIndex6 = cursor.getColumnIndex(TaskDataStorage.MESSAGETYPE);
        int columnIndex7 = cursor.getColumnIndex(ServerMessageDataStorage.DELIVERYSTATUS);
        cursor.getColumnIndex(TaskDataStorage.TIMESTAMP);
        int columnIndex8 = cursor.getColumnIndex(ServerMessageDataStorage.IMAGETHUMB_URI);
        int columnIndex9 = cursor.getColumnIndex(ServerMessageDataStorage.IMAGEPATH);
        int columnIndex10 = cursor.getColumnIndex(ServerMessageDataStorage.VOICEFILEPATH);
        int columnIndex11 = cursor.getColumnIndex(ServerMessageDataStorage.DATAFILEPATH);
        cursor.getColumnIndex(CatfishDataStorage.CONVERSATION_KEY);
        int columnIndex12 = cursor.getColumnIndex(ServerMessageDataStorage.SLINK);
        int columnIndex13 = cursor.getColumnIndex(ServerMessageDataStorage.OBJECTOWNERPIN);
        int columnIndex14 = cursor.getColumnIndex("_id");
        int columnIndex15 = cursor.getColumnIndex(ServerMessageDataStorage.COUNT);
        Comment comment = new Comment();
        comment.setStatusComment(cursor.getString(columnIndex3));
        comment.setSequence(cursor.getLong(columnIndex4));
        comment.setObjectSequence(cursor.getLong(columnIndex5));
        comment.setMessageType(cursor.getInt(columnIndex6));
        comment.setDeliveryStatus(cursor.getInt(columnIndex7));
        comment.setVoiceFilePath(cursor.getString(columnIndex10));
        comment.setImageFilePath(cursor.getString(columnIndex9));
        comment.setDataFilePath(cursor.getString(columnIndex11));
        comment.setImageThumbURI(cursor.getString(columnIndex8));
        comment.setSlink(cursor.getString(columnIndex12));
        comment.setId(cursor.getString(columnIndex14));
        comment.setCommentLike(cursor.getInt(columnIndex15));
        User user = new User();
        user.setId(cursor.getString(columnIndex));
        user.setName(cursor.getString(columnIndex2));
        comment.setSender(user);
        comment.setOwnerID(cursor.getString(columnIndex13));
        return comment;
    }

    public static List parseStatusComments(Cursor cursor) {
        List arrayList = new ArrayList();
        while (true) {
            Comment parseStatusComment = parseStatusComment(cursor);
            if (parseStatusComment == null) {
                return arrayList;
            }
            arrayList.add(parseStatusComment);
        }
    }

    public static User parseStatusLike(Cursor cursor) {
        if (!cursor.moveToNext()) {
            return null;
        }
        int columnIndex = cursor.getColumnIndex(ServerMessageDataStorage.SENDERNAME);
        int columnIndex2 = cursor.getColumnIndex(TaskDataStorage.SENDERPIN);
        User user = new User();
        user.setId(cursor.getString(columnIndex2));
        user.setName(cursor.getString(columnIndex));
        return user;
    }

    public static List parseStatusLikes(Cursor cursor) {
        List arrayList = new ArrayList();
        while (true) {
            User parseStatusLike = parseStatusLike(cursor);
            if (parseStatusLike == null) {
                return arrayList;
            }
            arrayList.add(parseStatusLike);
        }
    }

    public static Update parseUpdate(Cursor cursor) {
        if (!cursor.moveToNext()) {
            return null;
        }
        int columnIndex = cursor.getColumnIndex(CatfishDataStorage.RECENT_USERPIN);
        int columnIndex2 = cursor.getColumnIndex(CatfishDataStorage.RECENT_USER_NAME);
        int columnIndex3 = cursor.getColumnIndex(CatfishDataStorage.RECENT_RECIPIENT);
        int columnIndex4 = cursor.getColumnIndex(CatfishDataStorage.RECENT_RECIPIENT_NAME);
        int columnIndex5 = cursor.getColumnIndex(CatfishDataStorage.RECENT_ACTION);
        int columnIndex6 = cursor.getColumnIndex(CatfishDataStorage.RECENT_ACTION_CODE);
        int columnIndex7 = cursor.getColumnIndex(CatfishDataStorage.RECENT_STATUS);
        int columnIndex8 = cursor.getColumnIndex(CatfishDataStorage.RECENT_TIMESTAMP);
        int columnIndex9 = cursor.getColumnIndex(CatfishDataStorage.RECENT_LIKE_COUNT);
        int columnIndex10 = cursor.getColumnIndex(CatfishDataStorage.RECENT_STATUS_COUNT);
        int columnIndex11 = cursor.getColumnIndex(CatfishDataStorage.RECENT_MESSAGE);
        int columnIndex12 = cursor.getColumnIndex(CatfishDataStorage.RECENT_IS_USER_LIKE);
        int columnIndex13 = cursor.getColumnIndex(CatfishDataStorage.RECENT_IS_USER_COMMENT);
        int columnIndex14 = cursor.getColumnIndex(CatfishDataStorage.RECENT_NEW_COMMENT);
        int columnIndex15 = cursor.getColumnIndex(CatfishDataStorage.RECENT_NEW_LIKE);
        int columnIndex16 = cursor.getColumnIndex(CatfishDataStorage.RECENT_STATUSSEQ);
        Update update = new Update();
        update.setUserId(cursor.getString(columnIndex));
        update.setUserName(cursor.getString(columnIndex2));
        update.setRecipientName(cursor.getString(columnIndex4));
        update.setRecipientId(cursor.getString(columnIndex3));
        update.setUpdateAction(cursor.getInt(columnIndex6));
        update.setUpdateVal(cursor.getString(columnIndex5));
        update.setUpdateTime(cursor.getLong(columnIndex8));
        update.setStatusUpdate(cursor.getString(columnIndex7));
        update.setCountLike(cursor.getInt(columnIndex9));
        update.setCountStatus(cursor.getInt(columnIndex10));
        update.setMessage(cursor.getString(columnIndex11));
        if (columnIndex12 >= 0) {
            update.setUserLike(cursor.getInt(columnIndex12));
        }
        if (columnIndex13 >= 0) {
            update.setUserComment(cursor.getInt(columnIndex13) == 1);
        }
        update.setStatusSequence(cursor.getLong(columnIndex16));
        update.setHasNewComment(cursor.getInt(columnIndex14) == 1);
        update.setHasNewLike(cursor.getInt(columnIndex15) == 1);
        return update;
    }

    public static List parseUpdates(Cursor cursor) {
        List arrayList = new ArrayList();
        while (true) {
            Update parseUpdate = parseUpdate(cursor);
            if (parseUpdate == null) {
                return arrayList;
            }
            arrayList.add(parseUpdate);
        }
    }

    public static User parseUser(Cursor cursor) {
        if (!cursor.moveToNext()) {
            return null;
        }
        int columnIndex = cursor.getColumnIndex(FriendListDataStorage.FRIENDPIN);
        int columnIndex2 = cursor.getColumnIndex(FriendListDataStorage.FRIENDNAME);
        int columnIndex3 = cursor.getColumnIndex(FriendListDataStorage.STATUS);
        cursor.getColumnIndex(FriendListDataStorage.HAVEUNREAD);
        int columnIndex4 = cursor.getColumnIndex(FriendListDataStorage.FRIENDALIAS);
        int columnIndex5 = cursor.getColumnIndex(FriendListDataStorage.USEALIAS);
        int columnIndex6 = cursor.getColumnIndex(FriendListDataStorage.HAVEUNREADSTATCOMM);
        int columnIndex7 = cursor.getColumnIndex(FriendListDataStorage.STATUSSEQ);
        cursor.getColumnIndex(FriendListDataStorage.ACTIVITYCOUNT);
        cursor.getColumnIndex(ServerMessageDataStorage.USERACTIVITY);
        int columnIndex8 = cursor.getColumnIndex(FriendListDataStorage.LASTCHATACTIVITY);
        int columnIndex9 = cursor.getColumnIndex(FriendListDataStorage.LASTDELIVERYSTATUS);
        int columnIndex10 = cursor.getColumnIndex(FriendListDataStorage.HAVEUNREAD);
        int columnIndex11 = cursor.getColumnIndex(FriendListDataStorage.LASTMESSAGE);
        int columnIndex12 = cursor.getColumnIndex(FriendListDataStorage.LASTMESSAGESEQ);
        int columnIndex13 = cursor.getColumnIndex(FriendListDataStorage.UNREADCOUNT);
        int columnIndex14 = cursor.getColumnIndex(FriendListDataStorage.LASTMESSAGETYPE);
        int columnIndex15 = cursor.getColumnIndex(FriendListDataStorage.LASTFILEPATH);
        User user = new User();
        if (columnIndex >= 0) {
            user.setId(cursor.getString(columnIndex));
        }
        if (columnIndex7 >= 0) {
            user.setStatusSequence(cursor.getLong(columnIndex7));
        }
        user.setName(cursor.getString(columnIndex2));
        user.setStatus(cursor.getString(columnIndex3));
        if (columnIndex5 >= 0) {
            if ((cursor.getInt(columnIndex5) > 0 ? 1 : null) != null && columnIndex4 >= 0) {
                user.setAlias(cursor.getString(columnIndex4));
            }
        }
        user.setLastChatActivity(cursor.getString(columnIndex8));
        user.setLastChatStatus(cursor.getInt(columnIndex9));
        user.setHaveUnreadItem(cursor.getInt(columnIndex10));
        if (columnIndex11 >= 0) {
            Message message = new Message();
            message.setText(cursor.getString(columnIndex11));
            if (columnIndex14 >= 0) {
                message.setType(cursor.getInt(columnIndex14));
            }
            if (columnIndex15 >= 0) {
                Log.d(TAG, "path from parser :" + cursor.getString(columnIndex15));
                message.setDataFilePath(cursor.getString(columnIndex15));
            }
            if (columnIndex12 >= 0) {
                message.setSequence(cursor.getLong(columnIndex12));
            }
            user.setLastMessage(message);
        }
        if (columnIndex13 >= 0) {
            user.setUnreadCount(cursor.getInt(columnIndex13));
        }
        if (columnIndex6 >= 0) {
            user.setUnreadStatusComment(cursor.getInt(columnIndex6));
        }
        user.setMedia(parseSharedImgs(cursor));
        return user;
    }

    public static User parseUserBlack(Cursor cursor) {
        if (!cursor.moveToNext()) {
            return null;
        }
        int columnIndex = cursor.getColumnIndex(FriendListDataStorage.USERPIN);
        int columnIndex2 = cursor.getColumnIndex(CatfishService.USERNAME_PREF);
        User user = new User();
        user.setId(cursor.getString(columnIndex));
        user.setName(cursor.getString(columnIndex2));
        return user;
    }

    public static User parseUserCategory(Cursor cursor) {
        if (!cursor.moveToNext()) {
            return null;
        }
        int columnIndex = cursor.getColumnIndex(FriendListDataStorage.FRIENDPIN);
        int columnIndex2 = cursor.getColumnIndex(FriendListDataStorage.FRIENDNAME);
        int columnIndex3 = cursor.getColumnIndex(FriendListDataStorage.STATUS);
        cursor.getColumnIndex(FriendListDataStorage.HAVEUNREAD);
        int columnIndex4 = cursor.getColumnIndex(FriendListDataStorage.FRIENDALIAS);
        int columnIndex5 = cursor.getColumnIndex(FriendListDataStorage.USEALIAS);
        cursor.getColumnIndex(FriendListDataStorage.HAVEUNREADSTATCOMM);
        int columnIndex6 = cursor.getColumnIndex(FriendListDataStorage.STATUSSEQ);
        cursor.getColumnIndex(FriendListDataStorage.ACTIVITYCOUNT);
        cursor.getColumnIndex(ServerMessageDataStorage.USERACTIVITY);
        int columnIndex7 = cursor.getColumnIndex(FriendListDataStorage.LASTCHATACTIVITY);
        int columnIndex8 = cursor.getColumnIndex(FriendListDataStorage.HAVEUNREAD);
        int columnIndex9 = cursor.getColumnIndex(FriendListDataStorage.MELIKETHIS);
        int columnIndex10 = cursor.getColumnIndex(FriendListDataStorage.LIKESTATUS);
        int columnIndex11 = cursor.getColumnIndex(FriendListDataStorage.LASTMESSAGE);
        int columnIndex12 = cursor.getColumnIndex(FriendListDataStorage.UNREADCOUNT);
        int columnIndex13 = cursor.getColumnIndex(FriendListDataStorage.LASTMESSAGETYPE);
        int columnIndex14 = cursor.getColumnIndex(FriendListDataStorage.LASTFILEPATH);
        int columnIndex15 = cursor.getColumnIndex(ServerMessageDataStorage.DELIVERYSTATUS);
        int columnIndex16 = cursor.getColumnIndex(FriendListDataStorage.LASTDELIVERYSTATUS);
        int columnIndex17 = cursor.getColumnIndex(FriendListDataStorage.LASTMESSAGESEQ);
        User user = new User();
        user.setId(cursor.getString(columnIndex));
        user.setName(cursor.getString(columnIndex2));
        if (columnIndex3 >= 0) {
            user.setStatus(cursor.getString(columnIndex3));
        }
        if (columnIndex5 >= 0) {
            if ((cursor.getInt(columnIndex5) > 0 ? 1 : null) != null && columnIndex4 >= 0) {
                user.setAlias(cursor.getString(columnIndex4));
            }
        }
        if (columnIndex9 >= 0) {
            user.setMeLikeThisStatus(cursor.getInt(columnIndex9));
        }
        if (columnIndex7 >= 0) {
            user.setLastChatActivity(cursor.getString(columnIndex7));
        }
        if (columnIndex16 >= 0) {
            user.setLastChatStatus(cursor.getInt(columnIndex16));
        }
        if (columnIndex8 >= 0) {
            user.setHaveUnreadItem(cursor.getInt(columnIndex8));
        }
        if (columnIndex6 >= 0) {
            user.setStatusSequence(cursor.getLong(columnIndex6));
        }
        if (columnIndex10 >= 0) {
            user.setStatusLike(cursor.getInt(columnIndex10));
        }
        if (columnIndex11 >= 0) {
            Message message = new Message();
            message.setText(cursor.getString(columnIndex11));
            if (columnIndex13 >= 0) {
                message.setType(cursor.getInt(columnIndex13));
            }
            if (columnIndex14 >= 0) {
                Log.d(TAG, "path from parser :" + cursor.getString(columnIndex14));
                message.setDataFilePath(cursor.getString(columnIndex14));
            }
            if (columnIndex15 >= 0) {
                message.setDeliveryStatus(cursor.getInt(columnIndex15));
            }
            if (columnIndex17 >= 0) {
                message.setSequence(cursor.getLong(columnIndex17));
            }
            user.setLastMessage(message);
        }
        if (columnIndex12 < 0) {
            return user;
        }
        user.setUnreadCount(cursor.getInt(columnIndex12));
        return user;
    }

    public static User parseUserJson(Cursor cursor) {
        int i = 0;
        User user = new User();
        if (cursor != null && cursor.moveToNext()) {
            Log.d(TAG, "cursor tidak null");
            if (cursor.getCount() > 0) {
                Log.d(TAG, "cursor count lebih dari null");
                String string = cursor.getString(cursor.getColumnIndex(FriendListDataStorage.USERPROFILE));
                if (string == null || string.length() <= 0) {
                    user.setId(CatfishService.getUserPIN());
                    return user;
                }
                Log.d(TAG, "cursor=" + string);
                try {
                    JSONObject jSONObject = new JSONObject(string);
                    CatfishService.getCatfishPreferences().edit().putString(Constant.PREF_KEY_PROFILE, jSONObject.toString()).commit();
                    if (jSONObject.has(CatfishDataStorage.NIC_NAME)) {
                        user.setName(jSONObject.getString(CatfishDataStorage.NIC_NAME));
                    }
                    if (jSONObject.has(FriendListDataStorage.STATUS)) {
                        user.setStatus(jSONObject.getString(FriendListDataStorage.STATUS));
                    }
                    if (jSONObject.has(Constant.STATUS_DATE)) {
                        user.setStatusDate(jSONObject.getString(Constant.STATUS_DATE));
                    }
                    if (jSONObject.has(Constant.GENDER)) {
                        user.setGender(jSONObject.getString(Constant.GENDER));
                    }
                    if (jSONObject.has(Constant.BIRTHDAY)) {
                        user.setBirthday(jSONObject.getString(Constant.BIRTHDAY));
                    }
                    if (jSONObject.has(Constant.IS_LIKE_THIS_STATUS)) {
                        user.setMeLikeThisStatus(jSONObject.getInt(Constant.IS_LIKE_THIS_STATUS));
                    }
                    if (jSONObject.has(CatfishRESTAPI.CFCOMPACT_EMAIL)) {
                        JSONArray jSONArray = jSONObject.getJSONArray(CatfishRESTAPI.CFCOMPACT_EMAIL);
                        Log.d(TAG, "email=" + jSONArray);
                        List arrayList = new ArrayList();
                        for (int i2 = 0; i2 < jSONArray.length(); i2++) {
                            JSONObject jSONObject2 = jSONArray.getJSONObject(i2);
                            Email email = new Email();
                            email.setEmail(jSONObject2.getString(CatfishRESTAPI.CFCOMPACT_EMAIL));
                            email.setType(jSONObject2.getString(MimeTypeParser.TAG_TYPE));
                            arrayList.add(email);
                        }
                        user.setEmails(arrayList);
                    }
                    if (jSONObject.has(Constant.PHONE)) {
                        JSONArray jSONArray2 = jSONObject.getJSONArray(Constant.PHONE);
                        List arrayList2 = new ArrayList();
                        while (i < jSONArray2.length()) {
                            JSONObject jSONObject3 = jSONArray2.getJSONObject(i);
                            PhoneNumber phoneNumber = new PhoneNumber();
                            phoneNumber.setNumber(jSONObject3.getString(Constant.PHONE));
                            phoneNumber.setType(jSONObject3.getString(Constant.PHONE_TYPE));
                            arrayList2.add(phoneNumber);
                            i++;
                        }
                        user.setPhoneNumbers(arrayList2);
                    }
                    if (jSONObject.has(CatfishRESTAPI.CFCOMPACT_USERKEY)) {
                        user.setPassword(jSONObject.getString(CatfishRESTAPI.CFCOMPACT_USERKEY));
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
        user.setId(CatfishService.getUserPIN());
        return user;
    }

    public static User parseUserLikeConference(Cursor cursor) {
        if (!cursor.moveToNext()) {
            return null;
        }
        int columnIndex = cursor.getColumnIndex(TaskDataStorage.SENDERPIN);
        int columnIndex2 = cursor.getColumnIndex(ServerMessageDataStorage.SENDERNAME);
        User user = new User();
        if (columnIndex >= 0) {
            user.setId(cursor.getString(columnIndex));
        }
        if (columnIndex2 < 0) {
            return user;
        }
        user.setName(cursor.getString(columnIndex2));
        return user;
    }

    public static User parseUserNoMedia(Cursor cursor) {
        if (!cursor.moveToNext()) {
            return null;
        }
        int columnIndex = cursor.getColumnIndex(FriendListDataStorage.FRIENDPIN);
        int columnIndex2 = cursor.getColumnIndex(FriendListDataStorage.FRIENDNAME);
        int columnIndex3 = cursor.getColumnIndex(FriendListDataStorage.STATUS);
        cursor.getColumnIndex(FriendListDataStorage.HAVEUNREAD);
        int columnIndex4 = cursor.getColumnIndex(FriendListDataStorage.FRIENDALIAS);
        int columnIndex5 = cursor.getColumnIndex(FriendListDataStorage.USEALIAS);
        int columnIndex6 = cursor.getColumnIndex(FriendListDataStorage.HAVEUNREADSTATCOMM);
        int columnIndex7 = cursor.getColumnIndex(FriendListDataStorage.STATUSSEQ);
        cursor.getColumnIndex(FriendListDataStorage.ACTIVITYCOUNT);
        cursor.getColumnIndex(ServerMessageDataStorage.USERACTIVITY);
        int columnIndex8 = cursor.getColumnIndex(FriendListDataStorage.LASTCHATACTIVITY);
        int columnIndex9 = cursor.getColumnIndex(FriendListDataStorage.HAVEUNREAD);
        int columnIndex10 = cursor.getColumnIndex(FriendListDataStorage.MELIKETHIS);
        int columnIndex11 = cursor.getColumnIndex(FriendListDataStorage.LIKESTATUS);
        int columnIndex12 = cursor.getColumnIndex(FriendListDataStorage.LASTMESSAGE);
        int columnIndex13 = cursor.getColumnIndex(FriendListDataStorage.UNREADCOUNT);
        int columnIndex14 = cursor.getColumnIndex(FriendListDataStorage.LASTMESSAGETYPE);
        int columnIndex15 = cursor.getColumnIndex(FriendListDataStorage.LASTFILEPATH);
        int columnIndex16 = cursor.getColumnIndex(ServerMessageDataStorage.DELIVERYSTATUS);
        int columnIndex17 = cursor.getColumnIndex(FriendListDataStorage.LASTDELIVERYSTATUS);
        int columnIndex18 = cursor.getColumnIndex(FriendListDataStorage.LASTMESSAGESEQ);
        User user = new User();
        user.setId(cursor.getString(columnIndex));
        user.setName(cursor.getString(columnIndex2));
        if (columnIndex3 >= 0) {
            user.setStatus(cursor.getString(columnIndex3));
        }
        if (columnIndex5 >= 0) {
            if ((cursor.getInt(columnIndex5) > 0 ? 1 : null) != null && columnIndex4 >= 0) {
                user.setAlias(cursor.getString(columnIndex4));
            }
        }
        if (columnIndex10 >= 0) {
            user.setMeLikeThisStatus(cursor.getInt(columnIndex10));
        }
        if (columnIndex8 >= 0) {
            user.setLastChatActivity(cursor.getString(columnIndex8));
        }
        if (columnIndex17 >= 0) {
            user.setLastChatStatus(cursor.getInt(columnIndex17));
        }
        if (columnIndex9 >= 0) {
            user.setHaveUnreadItem(cursor.getInt(columnIndex9));
        }
        if (columnIndex6 >= 0) {
            user.setUnreadStatusComment(cursor.getInt(columnIndex6));
        }
        if (columnIndex7 >= 0) {
            user.setStatusSequence(cursor.getLong(columnIndex7));
        }
        if (columnIndex11 >= 0) {
            user.setStatusLike(cursor.getInt(columnIndex11));
        }
        if (columnIndex12 >= 0) {
            Message message = new Message();
            message.setText(cursor.getString(columnIndex12));
            if (columnIndex14 >= 0) {
                message.setType(cursor.getInt(columnIndex14));
            }
            if (columnIndex15 >= 0) {
                Log.d(TAG, "path from parser :" + cursor.getString(columnIndex15));
                message.setDataFilePath(cursor.getString(columnIndex15));
            }
            if (columnIndex16 >= 0) {
                message.setDeliveryStatus(cursor.getInt(columnIndex16));
            }
            if (columnIndex18 >= 0) {
                message.setSequence(cursor.getLong(columnIndex18));
            }
            user.setLastMessage(message);
        }
        if (columnIndex13 < 0) {
            return user;
        }
        user.setUnreadCount(cursor.getInt(columnIndex13));
        return user;
    }

    public static User parseUserReceiveReq(Cursor cursor) {
        if (!cursor.moveToNext()) {
            return null;
        }
        int columnIndex = cursor.getColumnIndex(TaskDataStorage.SENDERPIN);
        int columnIndex2 = cursor.getColumnIndex(ServerMessageDataStorage.SENDERNAME);
        int columnIndex3 = cursor.getColumnIndex(ServerMessageDataStorage.SEQUENCE);
        User user = new User();
        user.setId(cursor.getString(columnIndex));
        user.setName(cursor.getString(columnIndex2));
        user.setStatusSequence(cursor.getLong(columnIndex3));
        return user;
    }

    public static User parseUserReq(Cursor cursor) {
        if (!cursor.moveToNext()) {
            return null;
        }
        int columnIndex = cursor.getColumnIndex(TaskDataStorage.RECIPIENT);
        int columnIndex2 = cursor.getColumnIndex(FriendListDataStorage.RECIPIENTNAME);
        User user = new User();
        user.setId(cursor.getString(columnIndex));
        user.setName(cursor.getString(columnIndex2));
        return user;
    }

    public static List parseUsers(Cursor cursor) {
        List arrayList = new ArrayList();
        while (true) {
            User parseUser = parseUser(cursor);
            if (parseUser == null) {
                return arrayList;
            }
            arrayList.add(parseUser);
        }
    }

    public static List parseUsersBlack(Cursor cursor) {
        List arrayList = new ArrayList();
        while (true) {
            User parseUserBlack = parseUserBlack(cursor);
            if (parseUserBlack == null) {
                return arrayList;
            }
            arrayList.add(parseUserBlack);
        }
    }

    public static List parseUsersCategory(Cursor cursor) {
        List arrayList = new ArrayList();
        while (true) {
            User parseUserCategory = parseUserCategory(cursor);
            if (parseUserCategory == null) {
                return arrayList;
            }
            arrayList.add(parseUserCategory);
        }
    }

    public static List parseUsersLikeConference(Cursor cursor) {
        List arrayList = new ArrayList();
        while (true) {
            User parseUserLikeConference = parseUserLikeConference(cursor);
            if (parseUserLikeConference == null) {
                return arrayList;
            }
            arrayList.add(parseUserLikeConference);
        }
    }

    public static List parseUsersNoMedia(Cursor cursor) {
        List arrayList = new ArrayList();
        while (true) {
            User parseUserNoMedia = parseUserNoMedia(cursor);
            if (parseUserNoMedia == null) {
                return arrayList;
            }
            arrayList.add(parseUserNoMedia);
        }
    }

    public static List parseUsersOfficial(Cursor cursor) {
        List arrayList = new ArrayList();
        while (true) {
            User parseUserNoMedia = parseUserNoMedia(cursor);
            if (parseUserNoMedia == null) {
                return arrayList;
            }
            parseUserNoMedia.setOfficial(true);
            arrayList.add(parseUserNoMedia);
        }
    }

    public static List parseUsersReceiveReq(Cursor cursor) {
        List arrayList = new ArrayList();
        while (true) {
            User parseUserReceiveReq = parseUserReceiveReq(cursor);
            if (parseUserReceiveReq == null) {
                return arrayList;
            }
            arrayList.add(parseUserReceiveReq);
        }
    }

    public static List parseUsersReq(Cursor cursor) {
        List arrayList = new ArrayList();
        while (true) {
            User parseUserReq = parseUserReq(cursor);
            if (parseUserReq == null) {
                return arrayList;
            }
            arrayList.add(parseUserReq);
        }
    }
}
