package com.catfiz.base;

import android.app.Activity;
import android.content.ComponentName;
import android.content.Context;
import android.content.ServiceConnection;
import android.net.Uri;
import android.os.IBinder;
import android.telephony.TelephonyManager;
import com.albus.util.AlbusModelObject;
import com.catfiz.base.Callback.AcceptFriendCallback;
import com.catfiz.base.Callback.FetchCategoryCallback;
import com.catfiz.base.Callback.FetchGroupMessageLikesCallback;
import com.catfiz.base.Callback.FetchGroupMessagesCallback;
import com.catfiz.base.Callback.FetchGroupMessagesWithLimitCallback;
import com.catfiz.base.Callback.FetchNotificationCallback;
import com.catfiz.base.Callback.FetchStatusComment;
import com.catfiz.base.Callback.FetchUserCategoriesCallback;
import com.catfiz.base.Callback.FetchUserCategoryCallback;
import com.catfiz.base.Callback.FizzlinkDownloadDetails;
import com.catfiz.base.Callback.FizzlinkInfo;
import com.catfiz.base.Callback.FizzlinkUploadedList;
import com.catfiz.base.Callback.GetCountCallback;
import com.catfiz.base.Callback.GroupMessageCountCallback;
import com.catfiz.base.Callback.IsGroupMute;
import com.catfiz.base.Callback.NicProfileCallback;
import com.catfiz.base.Callback.OnGroupDeleted;
import com.catfiz.base.Callback.OnSendLikeCallback;
import com.catfiz.base.Callback.PrivateFetchActiveFriendsCallback;
import com.catfiz.base.Callback.PrivateFetchMessagesCallback;
import com.catfiz.base.Callback.PrivateFetchMessagesCountCallback;
import com.catfiz.base.Callback.ProgressUploadDownload;
import com.catfiz.base.Callback.StreamHasThumbnailCallback;
import com.catfiz.base.Callback.UpdatesFetchRecentNews;
import com.catfiz.base.Callback.UserDeletePendingRequestCallback;
import com.catfiz.base.Callback.UserFetchBlackListCallback;
import com.catfiz.base.Callback.UserFetchContactListCallback;
import com.catfiz.base.Callback.UserFetchFriendsCallback;
import com.catfiz.base.Callback.UserFetchFriendsRequestCallback;
import com.catfiz.base.Callback.UserFetchGroupMembersCallback;
import com.catfiz.base.Callback.UserFetchGroupsCallback;
import com.catfiz.base.Callback.UserFetchOfficalsCallback;
import com.catfiz.base.Callback.UserFetchPendingRequestCallback;
import com.catfiz.base.Callback.UserFetchProfileCallback;
import com.catfiz.base.Callback.UserFetchStatusLike;
import com.catfiz.base.Callback.UserFetchSyncContactCatfizRequestCallback;
import com.catfiz.base.Constant.ActivityAction;
import com.catfiz.base.Constant.RegistrationState;
import com.catfiz.base.ICatfiz.ICatfizActivityAction;
import com.catfiz.intents.CatfishIntents;
import com.catfiz.model.Account;
import com.catfiz.model.Comment;
import com.catfiz.model.Fizzlink;
import com.catfiz.model.Group;
import com.catfiz.model.Message;
import com.catfiz.model.User;
import com.catfiz.pool.PoolDataStorage;
import com.catfiz.pool.PoolDataUploadExecutor.PoolDataType;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.CatfishService;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.service.ICatfishClientInterface;
import com.catfiz.service.ICatfishUIBinder;
import com.catfiz.service.PinManagerV2;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.signal.SignalBinder;
import com.catfiz.sticker.StickerMessageObject;
import com.catfiz.util.Log;
import com.catfiz.util.MimeTypeParser;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.HttpStatus;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class Catfiz {
    private static final String TAG = Catfiz.class.getSimpleName();
    private static volatile List _mFriendsListHelper = new ArrayList();
    private static final CompareUserId mCompareUserId = new CompareUserId();
    private static final Object mFriendListHelperLOCK = new Object();
    private boolean inActivityAction = false;
    private boolean isFinish = false;
    private Context mAndroidContext = null;
    private boolean mBound = false;
    private boolean mCatfizStarted = false;
    private ClientInterface mClient = null;
    private ServiceConnection mConnection = new ServiceConnection() {
        public void onServiceConnected(ComponentName componentName, IBinder iBinder) {
            Catfiz.this.mService = (ICatfishUIBinder) iBinder;
            Catfiz.this.mBound = true;
            Catfiz.this.initUser();
            if (!(Catfiz.this.isFinish() || Catfiz.this.mInterface == null || Catfiz.this.inActivityAction)) {
                if (Catfiz.this.mUser.getId() != null) {
                    Catfiz.this.mCatfizStarted = true;
                    Catfiz.this.mInterface.onCatfizStarted();
                } else {
                    Catfiz.this.mRegisterProgress = true;
                    Catfiz.this.mInterface.onRegisterProgress();
                }
            }
            if (Catfiz.this.mSignalBinder != null) {
                Catfiz.this.mSignalBinder.bind(Catfiz.this.mService, Catfiz.this.mClient);
            }
        }

        public void onServiceDisconnected(ComponentName componentName) {
            Catfiz.this.mCatfizStarted = false;
            Catfiz.this.mBound = false;
            if (!Catfiz.this.isFinish() && Catfiz.this.mInterface != null) {
                Catfiz.this.mInterface.onCatfizStopped();
            }
        }
    };
    private ICatfiz mInterface = null;
    private boolean mRegisterProgress = false;
    private RegistrationState mRegistrationState = RegistrationState.UNDEFINED;
    private ICatfishUIBinder mService = null;
    private SignalBinder mSignalBinder = null;
    private StickerMessageObject[] mStickerPackages = null;
    private User mUser = null;

    public class CompareUserId implements Comparator {
        public int compare(User user, User user2) {
            return user2.getId().compareTo(user.getId());
        }

        public boolean equals(Object obj) {
            return this == obj;
        }
    }

    public Catfiz(Context context) {
        this.mAndroidContext = context;
        this.mClient = new ClientInterface(this);
        init();
    }

    public Catfiz(Context context, ICatfiz iCatfiz) {
        this.mAndroidContext = context;
        this.mInterface = iCatfiz;
        this.mClient = new ClientInterface(this);
        setInterface(this.mInterface);
        init();
    }

    public Catfiz(Context context, ICatfiz iCatfiz, SignalBinder signalBinder) {
        this.mSignalBinder = signalBinder;
        this.mAndroidContext = context;
        this.mInterface = iCatfiz;
        this.mClient = new ClientInterface(this);
        setInterface(this.mInterface);
        init();
    }

    public Catfiz(Context context, ICatfiz iCatfiz, SignalBinder signalBinder, String str) {
        this.mSignalBinder = signalBinder;
        this.mAndroidContext = context;
        this.mInterface = iCatfiz;
        this.mClient = new ClientInterface(this);
        setInterface(this.mInterface);
        init();
    }

    public static List getFriendListHelper() {
        List list;
        synchronized (mFriendListHelperLOCK) {
            if (_mFriendsListHelper == null) {
                list = Collections.EMPTY_LIST;
            } else {
                list = _mFriendsListHelper;
            }
        }
        return list;
    }

    private void init() {
        if (CatfishService.getServiceInstance() == null) {
            this.mAndroidContext.getApplicationContext().startService(CatfishIntents.newIntent(this.mAndroidContext, CatfishService.CATFISH_CLIENTSERVICE));
        }
        if (!isFinish() && this.mInterface != null && (this.mInterface instanceof ICatfizActivityAction) && (this.mAndroidContext instanceof Activity)) {
            String action = ((Activity) this.mAndroidContext).getIntent().getAction();
            if (action != null && action.length() > 0) {
                ActivityAction activityAction = Action.getActivityAction(action);
                if (activityAction != ActivityAction.UNDEFINED) {
                    this.inActivityAction = true;
                    ((ICatfizActivityAction) this.mInterface).onCatfizAction(activityAction);
                }
            }
        }
        this.mAndroidContext.bindService(CatfishIntents.newIntent(this.mAndroidContext, CatfishService.CATFISH_UISERVICE), this.mConnection, 1);
    }

    private void initUser() {
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        if (catfishPreferences == null) {
            System.exit(0);
        }
        this.mUser = new User();
        String userPIN = CatfishService.getUserPIN();
        String string = catfishPreferences.getString(CatfishService.USERNAME_PREF, null);
        String string2 = catfishPreferences.getString(CatfishService.USERSTATUS_PREF, null);
        Log.d(TAG, " --- Userpin = --- " + userPIN);
        this.mUser.setId(userPIN);
        this.mUser.setName(string);
        this.mUser.setStatus(string2);
    }

    public static User matchFriendData(String str) {
        User user = null;
        synchronized (mFriendListHelperLOCK) {
            if (_mFriendsListHelper == null) {
            } else {
                int binarySearch = Collections.binarySearch(_mFriendsListHelper, new User(str), mCompareUserId);
                if (binarySearch < 0) {
                } else {
                    user = (User) _mFriendsListHelper.get(binarySearch);
                    Log.d(TAG, "Matched @" + binarySearch + " with user > id:" + user.getName() + " " + user.getId());
                }
            }
        }
        return user;
    }

    private void resetState() {
        this.mCatfizStarted = false;
        this.mRegisterProgress = false;
    }

    public static void setFriendListHelper(List list) {
        synchronized (mFriendListHelperLOCK) {
            if (_mFriendsListHelper != null) {
                _mFriendsListHelper.clear();
            }
            if (list == null) {
                return;
            }
            _mFriendsListHelper.addAll(list);
            Collections.sort(_mFriendsListHelper, mCompareUserId);
        }
    }

    private void updateProfile(ClientInterface clientInterface, Callback callback, JSONObject jSONObject, User user) {
        String str;
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        if (jSONObject.has(CatfishRESTAPI.CFCOMPACT_EMAIL)) {
            Log.d(TAG, "HAS SECURITY FLAW EMAIL");
            jSONObject.remove(CatfishRESTAPI.CFCOMPACT_EMAIL);
        }
        if (jSONObject.has(CatfishRESTAPI.CFCOMPACT_USERKEY)) {
            Log.d(TAG, "HAS SECURITY FLAW USER KEYYYYYYYY");
            jSONObject.remove(CatfishRESTAPI.CFCOMPACT_USERKEY);
        }
        if (!jSONObject.has(Constant.COUNTRY)) {
            Object country;
            TelephonyManager telephonyManager = (TelephonyManager) this.mAndroidContext.getSystemService(Constant.PHONE);
            String str2 = "ID";
            if (telephonyManager.getSimState() != 1) {
                country = new Locale("", telephonyManager.getSimCountryIso()).getCountry();
            } else {
                str = str2;
            }
            try {
                jSONObject.put(Constant.COUNTRY, country);
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
        str = jSONObject.toString();
        Log.d(TAG, "PROFILE: " + str);
        catfishPreferences.edit().putString(Constant.PREF_KEY_PROFILE, str).commit();
        if (str == null) {
            str = jSONObject.toString();
        }
        this.mService.setProfile(clientInterface, CatfishService.getUserPIN(), str, true);
        this.mService.notifyFriendsProfileUpdate(clientInterface, CatfishService.getUserPIN(), user.getName(), jSONObject.toString());
        if (callback != null) {
            callback.onSuccess();
        }
    }

    public void FetchCategory(FetchCategoryCallback fetchCategoryCallback) {
        this.mService.requestGroupFriend(new ClientInterface(this, (Callback) fetchCategoryCallback));
    }

    public void FetchUserOnCategory(int i, FetchUserCategoryCallback fetchUserCategoryCallback) {
        this.mService.requestChildGroupFriend(new ClientInterface(this, (Callback) fetchUserCategoryCallback), (long) i, null, null);
    }

    public void accountLogin(Account account, Callback callback) {
        PinManagerV2.ui_loginAccount(this.mService.getServiceInstance(), new ClientInterface(this, callback), account.getEmail(), account.getPassword());
    }

    public void accountRegister(Account account, Callback callback) {
        PinManagerV2.ui_registerAccount(this.mService.getServiceInstance(), new ClientInterface(this, callback), account.getEmail(), account.getPassword());
    }

    public void accountRegisterExisting(Account account, Callback callback) {
        PinManagerV2.ui_upgradeAccount(this.mService.getServiceInstance(), new ClientInterface(this, callback), account.getEmail(), account.getPassword());
    }

    public void accountResendVerification(Account account, Callback callback) {
        this.mService.resendActivation(new ClientInterface(this, callback), account.getEmail(), account.getPassword());
    }

    public void accountResetPassword(Account account, Callback callback) {
        this.mService.resetPassword(new ClientInterface(this, callback), account.getEmail());
    }

    public void accountResetPasswordVerify(Account account, String str, Callback callback) {
        this.mService.resetPasswordActivation(new ClientInterface(this, callback), account.getEmail(), account.getPassword(), str);
    }

    public void accountSetProfile(final User user, final Callback callback) {
        final ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        ICatfishClientInterface clientInterface2 = new ClientInterface(this, new Callback() {
            public void onError() {
                callback.onError();
            }

            public void onSuccess() {
                if (user.getStatus() != null) {
                    Catfiz.this.mService.setUserStatus(clientInterface, Catfiz.this.mUser.getId(), user.getStatus());
                }
            }
        });
        Log.d(TAG, "setUserName userpin = " + this.mUser.getId() + " username = " + user.getName());
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        JSONObject jSONObject = new JSONObject();
        String name = user.getName();
        String status = user.getStatus();
        String statusdate = user.getStatusdate();
        String gender = user.getGender();
        String country = user.getCountry();
        try {
            jSONObject.put(CatfishDataStorage.NIC_NAME, name);
            jSONObject.put(FriendListDataStorage.STATUS, status);
            jSONObject.put(Constant.STATUS_DATE, statusdate);
            jSONObject.put(Constant.GENDER, gender);
            jSONObject.put(Constant.COUNTRY, country);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        this.mService.setProfile(clientInterface, CatfishService.getUserPIN(), jSONObject.toString(), true);
        this.mService.setUserName(clientInterface2, this.mUser.getId(), user.getName());
        catfishPreferences.edit().putString(CatfishDataStorage.NIC_NAME, name).commit();
        PinManagerV2.ui_setProfileIsComplete(this.mService.getServiceInstance());
    }

    public void accountVerify(Account account, String str, Callback callback) {
        PinManagerV2.ui_activateAccount(this.mService.getServiceInstance(), new ClientInterface(this, callback), account.getEmail(), str);
    }

    public void addCategoryMultiple(int i, int i2, String[] strArr, Callback callback) {
        this.mService.addMultipleToCategoryGroup(new ClientInterface(this, callback), i, strArr);
    }

    public void addCategoryOneByOne(int i, int i2, String str, Callback callback) {
        this.mService.addToCategoryGroup(new ClientInterface(this, callback), i, str, null);
    }

    public void addMultipleCategory(int[] iArr, String str, Callback callback) {
        this.mService.addToMultipleCategoryGroup(new ClientInterface(this, callback), iArr, str);
    }

    public void addNewCategory(String str, Callback callback) {
        this.mService.addNewCategoryGroup(new ClientInterface(this, callback), str, "add", null);
    }

    public Object[] broadcastGetFriends() {
        return this.mService.getSelectContactAsArray();
    }

    public void broadcastSelectFriends(String str, Boolean bool) {
        this.mService.selectContact(str, bool.booleanValue());
    }

    public void broadcastSendMessage(String[] strArr, String str, Callback callback) {
        this.mService.sendBroadcastMessage(new ClientInterface(this, callback), CatfishService.getUserPIN(), strArr, str);
    }

    public void broadcastSendVoiceMessage(String[] strArr, String str, String str2, Callback callback) {
        this.mService.sendBroadcastVoice(new ClientInterface(this, callback), CatfishService.getUserPIN(), strArr, str2, str);
    }

    public void chatDeleteConversation(String str, Callback callback) {
        this.mService.deleteChatConversation(new ClientInterface(this, callback), this.mUser.getId(), str);
    }

    public void chatFetchActiveFriends(PrivateFetchActiveFriendsCallback privateFetchActiveFriendsCallback) {
        this.mService.requestActiveChatFriendList(new ClientInterface(this, (Callback) privateFetchActiveFriendsCallback));
    }

    public void chatFetchFriend(String str, Callback callback) {
        this.mService.getFriend(new ClientInterface(this, callback), str);
    }

    public void chatFetchMessages(String str, PrivateFetchMessagesCallback privateFetchMessagesCallback) {
        String str2 = this.mUser.getId() + ":" + str;
        this.mService.requestChatConversation(new ClientInterface(this, (Callback) privateFetchMessagesCallback), str2, false, true);
    }

    public void chatFetchMessagesCount(String str, PrivateFetchMessagesCountCallback privateFetchMessagesCountCallback) {
        String str2 = this.mUser.getId() + ":" + str;
        this.mService.requestChatConversation(new ClientInterface(this, (Callback) privateFetchMessagesCountCallback), str2, true, true);
    }

    public void chatFetchMessagesWithLimit(String str, long j, int i, PrivateFetchMessagesCallback privateFetchMessagesCallback) {
        String str2 = this.mUser.getId() + ":" + str;
        this.mService.requestChatConvWithLimit(new ClientInterface(this, (Callback) privateFetchMessagesCallback), str2, j, i, true);
    }

    public void chatFetchOfficials(UserFetchOfficalsCallback userFetchOfficalsCallback) {
        this.mService.requestOfficalsList(new ClientInterface(this, (Callback) userFetchOfficalsCallback));
    }

    public void chatFetchProgressUploadDownload(String str, Callback callback) {
        this.mService.requestAllProgressUploadDownload(new ClientInterface(this, callback));
    }

    public void chatNotifyMessageRead(String str, Callback callback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        this.mService.notifyMessagesRead(clientInterface, this.mUser.getId(), str);
        if (str.equals(CatfishService.OFFICIAL_PIN)) {
            this.mService.resetOfficialMessageNotifList(clientInterface);
        } else {
            this.mService.resetChatNotifList(clientInterface);
        }
    }

    public void chatReSendAttachedMessage(User user, Message message, String str, String str2, Context context, Callback callback) {
        this.mService.reSendCommentedDataChat(new ClientInterface(this, callback), context, this.mUser.getId(), user.getId(), str, message.getText(), this.mService, str2, message.getSequence());
    }

    public void chatSaveConferenceFile(String str, String str2, Callback callback) {
        this.mService.saveChatFile(new ClientInterface(this, callback), str, str2);
    }

    public void chatSaveConferenceMessages(String str, String str2, String str3, Callback callback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        String str4 = this.mUser.getId() + ":" + str;
        this.mService.saveChatConversation(clientInterface, str4, str3, "chat_" + str, str2);
    }

    public void chatSendAttachedMessage(User user, Message message, String str, String str2, Context context, Callback callback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        Log.d(TAG, "send attach file=" + str);
        if (str2.equals(AlbusModelObject.DATA_TYPE_VIDEO)) {
            this.mService.sendVideoChat(clientInterface, this.mUser.getId(), user.getId(), message.getText(), new File(str));
            return;
        }
        this.mService.sendCommentedDataChat(clientInterface, context, this.mUser.getId(), user.getId(), str, message.getText(), this.mService, str2);
    }

    public void chatSendBlitz(User user, Callback callback) {
        this.mService.pingFriend(new ClientInterface(this, callback), this.mUser.getId(), user.getId());
    }

    public void chatSendContacts(User user, List list, Callback callback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        String[] strArr = new String[list.size()];
        int i = 0;
        for (User id : list) {
            strArr[i] = id.getId();
            i++;
        }
        this.mService.sendContactsTo(clientInterface, this.mUser.getId(), this.mUser.getName(), user.getId(), strArr);
    }

    public void chatSendMessage(User user, Message message, Callback callback) {
        this.mService.sendMessage(new ClientInterface(this, callback), this.mUser.getId(), user.getId(), this.mUser.getName(), message.getText());
    }

    public void chatSendQuote(User user, Message message, Callback callback) {
        this.mService.sendMessageWithMessageTipe(new ClientInterface(this, callback), this.mUser.getId(), user.getId(), this.mUser.getName(), message.getText(), MessageType.QUOTE);
    }

    public void checkAccount() {
        PinManagerV2.ui_accountChecking(this.mService.getServiceInstance());
    }

    public void clearAllStatusComment(String str, long j, FetchStatusComment fetchStatusComment) {
        this.mService.deleteStatCommConversation(new ClientInterface(this, (Callback) fetchStatusComment), str, j);
    }

    public void deleteEmptyGroup(String str, OnGroupDeleted onGroupDeleted) {
        this.mService.deleteConference(new ClientInterface(this, (Callback) onGroupDeleted), this.mUser.getId(), str);
    }

    public void deleteFromCategoryMultiple(int i, String[] strArr, Callback callback) {
        this.mService.removeMultipleFromCategoryGroup(new ClientInterface(this, callback), i, strArr);
    }

    public void deleteFromCategoryOneByOne(int i, String str, Callback callback) {
        this.mService.removeFromCategoryGroup(new ClientInterface(this, callback), i, str);
    }

    public void deleteMultipleFriendsFromCategory(int[] iArr, String str, Callback callback) {
        this.mService.removeFromMultipleCategoryGroup(new ClientInterface(this, callback), iArr, str);
    }

    public void deleteSingleChatMessage(String str, long j, PrivateFetchMessagesCallback privateFetchMessagesCallback) {
        this.mService.deleteSingleMessage(new ClientInterface(this, (Callback) privateFetchMessagesCallback), j, str);
    }

    public void deleteSingleFizzlink(long j, Callback callback) {
        this.mService.deleteSingleUploadFizzlink(new ClientInterface(this, callback), j);
    }

    public void deleteStatusComment(String str, String str2, long j, Callback callback) {
        this.mService.sendStatusComment(new ClientInterface(this, callback), CatfishService.getUserPIN(), this.mUser.getName(), str, str2, j, MessageType.DELETE_STATUSCOMENT_BYOWNER);
    }

    public void destroy() {
        this.isFinish = true;
        if (this.mBound) {
            Log.d(TAG, "destroy catfiz");
            this.mAndroidContext.unbindService(this.mConnection);
        }
    }

    public void downloadBroadcastAttachedComment(Comment comment, Context context, Callback callback) {
        this.mService.downloadBroadcastImageStatus(new ClientInterface(this, callback), context, this.mUser.getId(), comment.getSender().getId(), comment.getSender().getName(), comment.getStatusComment(), comment.getObjectSequence(), comment.getSequence(), comment.getOwnerID(), comment.getId(), this.mService);
    }

    public void downloadFizzlink(String str, int i, String str2, String str3, Callback callback) {
        this.mService.downloadSlinkData(new ClientInterface(this, callback), CatfishService.getUserPIN(), str, i, str2, str3);
    }

    public void dropCategory(int i, Callback callback) {
        this.mService.deleteCategoryGroup(new ClientInterface(this, callback), i);
    }

    public void dropGroup(String str, OnGroupDeleted onGroupDeleted) {
        this.mService.dropConverence(new ClientInterface(this, (Callback) onGroupDeleted), this.mUser.getId(), str);
    }

    public void fetchGroup(String str, Callback callback) {
        this.mService.getGroup(new ClientInterface(this, callback), str);
    }

    public void fetchUserCategories(FetchUserCategoriesCallback fetchUserCategoriesCallback, String str) {
        this.mService.requestUserCategories(new ClientInterface(this, (Callback) fetchUserCategoriesCallback), str);
    }

    public void finish() {
        if (this.mSignalBinder != null) {
            this.mSignalBinder.unBind(this.mService, this.mClient);
        }
        this.isFinish = true;
    }

    public void fizzlinkDownload(Message message, Callback callback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        Fizzlink fizzlink = message.getFizzlink();
        User sender = message.getSender();
        this.mService.downloadMessageSlinkData(clientInterface, message.getSequence(), CatfishService.getUserPIN(), message.getSlink(), fizzlink.getDataSize(), fizzlink.getFilePath(), fizzlink.getFileName(), sender.getId(), message.getTopicKey());
        Log.d(TAG, "download fizzlink with slink: " + message.getSlink() + ", file size: " + fizzlink.getDataSize() + ", file path: " + fizzlink.getFilePath() + ", file name: " + fizzlink.getFileName() + ", sequence: " + message.getSequence() + ", sender: " + sender.getId() + ", topickey: " + message.getTopicKey());
    }

    public Account getAccount() {
        Account account = new Account();
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        account.setEmail(catfishPreferences.getString(CatfishRESTAPI.CFCOMPACT_EMAIL, null));
        account.setPassword(catfishPreferences.getString(CatfishRESTAPI.CFCOMPACT_USERKEY, null));
        return account;
    }

    public Context getAndroidContext() {
        return this.mAndroidContext;
    }

    public void getFizzlinkInfo(FizzlinkInfo fizzlinkInfo, String str) {
        this.mService.getSlinkInfo(new ClientInterface(this, (Callback) fizzlinkInfo), CatfishService.getUserPIN(), str);
    }

    public void getMesageFizzlinkInfo(FizzlinkInfo fizzlinkInfo, long j, String str, boolean z) {
        this.mService.getMessageSlinkInfo(new ClientInterface(this, (Callback) fizzlinkInfo), j, CatfishService.getUserPIN(), str, z);
    }

    public RegistrationState getRegistrationState() {
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        if (catfishPreferences == null) {
            return RegistrationState.UNDEFINED;
        }
        int i = catfishPreferences.getInt(CatfishService.CATFISHID_LOGINSTATE, 0);
        boolean z = catfishPreferences.getBoolean(CatfishService.CATFISHID_REGPROFILE_COMPLETE, false);
        switch (i) {
            case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                if (!z) {
                    this.mRegistrationState = RegistrationState.WAITFORPROFILE;
                    break;
                }
                this.mRegistrationState = RegistrationState.REGISTERED;
                break;
            case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                this.mRegistrationState = RegistrationState.WAITFORPROFILE;
                break;
            case HttpStatus.SC_CONTINUE /*100*/:
                this.mRegistrationState = RegistrationState.COMPLETE;
                break;
            default:
                this.mRegistrationState = RegistrationState.UNDEFINED;
                break;
        }
        return this.mRegistrationState;
    }

    public void getStreamThumbnailDownload(String str, StreamHasThumbnailCallback streamHasThumbnailCallback) {
        this.mService.getStreamThumbnailDownload(new ClientInterface(this, (Callback) streamHasThumbnailCallback), str);
    }

    public void getUploadedFizzlink(FizzlinkUploadedList fizzlinkUploadedList) {
        this.mService.requestUploadFizzlinkList(new ClientInterface(this, (Callback) fizzlinkUploadedList));
    }

    public User getUser() {
        return this.mUser;
    }

    public void getgroupMessagesCount(Group group, GroupMessageCountCallback groupMessageCountCallback) {
        this.mService.requestPoolDiscussCount(new ClientInterface(this, (Callback) groupMessageCountCallback), group.getGroupID());
    }

    public void groupAcceptConference(Group group, Callback callback) {
        this.mService.acceptConverence(new ClientInterface(this, callback), this.mUser.getId(), group.getGroupID());
    }

    public void groupChangeNote(String str, Group group, Callback callback) {
        Log.d(TAG, "note=" + str);
        this.mService.changePoolMessage(new ClientInterface(this, callback), this.mUser.getId(), this.mUser.getName(), group.getGroupID(), str);
    }

    public void groupClearConferenceMessages(String str, Callback callback) {
        this.mService.clearConferenceMessage(new ClientInterface(this, callback), this.mUser.getId(), str);
    }

    public void groupCreateTopic(Group group, Callback callback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        String str = "";
        for (User id : group.getMembers()) {
            str = str + ":" + id.getId();
        }
        String name = group.getName();
        Log.d(TAG, "groupCreateTopic: NAME:" + name + ", RECIPIENT" + str);
        this.mService.createTopicConverence(clientInterface, this.mUser.getId(), this.mUser.getName(), str, name, group.getNotes(), group.getImagePath(), null, "");
    }

    public void groupDeleteConferenceMember(Group group, User user, Callback callback) {
        this.mService.deleteConverenceMember(new ClientInterface(this, callback), this.mUser.getId(), group.getGroupID(), user.getId());
    }

    public void groupDeleteSingleDiscuss(String str, long j, Callback callback) {
        this.mService.clearSingleConferenceMessage(new ClientInterface(this, callback), this.mUser.getId(), str, j);
    }

    public void groupDownloadConferenceFile(Group group, Message message, Callback callback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        try {
            String[] split = message.getDataFilePath().split(":");
            long parseLong = Long.parseLong(split[0], 10);
            int parseInt = Integer.parseInt(split[1]);
            int parseInt2 = Integer.parseInt(split[2]);
            int parseInt3 = Integer.parseInt(split[3]);
            String str = "";
            if (split.length > 4) {
                str = split[4];
            }
            if (parseLong == 0) {
                Log.d(TAG, "Error! groupDownloadConferenceFile, sequence is ZERO");
            } else {
                this.mService.downloadConferenceFile(clientInterface, this.mUser.getId(), group.getGroupID(), message.getSender().getId(), message.getText(), message.getSequence(), parseLong, parseInt, parseInt2, parseInt3, str);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void groupDropConference(Group group, Callback callback) {
        this.mService.dropConverence(new ClientInterface(this, callback), this.mUser.getId(), group.getGroupID());
    }

    public void groupFetchConferenceMember(String str, UserFetchGroupMembersCallback userFetchGroupMembersCallback) {
        this.mService.requestConferenceMember(new ClientInterface(this, (Callback) userFetchGroupMembersCallback), str);
    }

    public void groupFetchLikeConference(String str, long j, FetchGroupMessageLikesCallback fetchGroupMessageLikesCallback) {
        this.mService.requestPoolLikeList(new ClientInterface(this, (Callback) fetchGroupMessageLikesCallback), str, j);
    }

    public void groupFetchMessages(Group group, FetchGroupMessagesCallback fetchGroupMessagesCallback) {
        groupFetchMessages(group, fetchGroupMessagesCallback, false);
    }

    public void groupFetchMessages(Group group, FetchGroupMessagesCallback fetchGroupMessagesCallback, boolean z) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, (Callback) fetchGroupMessagesCallback);
        this.mService.requestPoolDiscuss(clientInterface, group.getGroupID(), true);
        if (z) {
            this.mService.resetPoolNotifList(clientInterface);
        }
    }

    public void groupFetchMessages(String str, FetchGroupMessagesCallback fetchGroupMessagesCallback, boolean z) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, (Callback) fetchGroupMessagesCallback);
        this.mService.requestPoolDiscuss(clientInterface, str, true);
        if (z) {
            this.mService.resetPoolNotifList(clientInterface);
        }
    }

    public void groupFetchMessagesWithLimit(Group group, FetchGroupMessagesWithLimitCallback fetchGroupMessagesWithLimitCallback, long j, int i) {
        groupFetchMessagesWithLimit(group, fetchGroupMessagesWithLimitCallback, j, i, false);
    }

    public void groupFetchMessagesWithLimit(Group group, FetchGroupMessagesWithLimitCallback fetchGroupMessagesWithLimitCallback, long j, int i, boolean z) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, (Callback) fetchGroupMessagesWithLimitCallback);
        this.mService.requestPoolDiscussWithLimit(clientInterface, group.getGroupID(), j, i, true);
        if (z) {
            this.mService.resetPoolNotifList(clientInterface);
        }
    }

    public void groupInviteConference(Group group, Callback callback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        String[] strArr = new String[group.getMembers().size()];
        int i = 0;
        for (User id : group.getMembers()) {
            strArr[i] = id.getId();
            i++;
        }
        this.mService.inviteConverence(clientInterface, this.mUser.getId(), group.getGroupID(), strArr);
    }

    public void groupLeaveConference(Group group, Callback callback) {
        this.mService.leaveConverence(new ClientInterface(this, callback), this.mUser.getId(), group.getGroupID());
    }

    public void groupLikeConference(String str, long j, boolean z, Callback callback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        String str2 = str.split(":")[0];
        if (z) {
            this.mService.sendPoolResponse(clientInterface, str, this.mUser.getId(), this.mUser.getName(), MessageType.LIKE, str2, j);
            return;
        }
        this.mService.sendPoolResponse(clientInterface, str, this.mUser.getId(), this.mUser.getName(), MessageType.UNLIKE, str2, j);
    }

    public void groupMuteNotif(String str, boolean z, Callback callback) {
        this.mService.setPoolMute(new ClientInterface(this, callback), str, z);
    }

    public void groupPromoteFriend(Group group, User user, Callback callback) {
        this.mService.promoteFriendInPool(new ClientInterface(this, callback), this.mUser.getId(), this.mUser.getName(), group.getGroupID(), user.getId());
    }

    public void groupReSendAttachedMessage(Group group, Message message, String str, int i, Callback callback) {
        this.mService.reSendPoolData(new ClientInterface(this, callback), this.mUser.getId(), this.mUser.getName(), group.getGroupID(), str, i, message.getText(), message.getSequence());
    }

    public void groupRefreshMemberList(String str, Callback callback) {
        this.mService.refreshMemberList(new ClientInterface(this, callback), this.mUser.getId(), str);
    }

    public void groupResendQuotedMessage(String str, long j, String str2, Callback callback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        this.mService.resendQuotedMessageConverence(clientInterface, this.mUser.getId(), str, j, str2, this.mUser.getName());
    }

    public void groupResendSingleDiscuss(String str, long j, String str2, Callback callback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        this.mService.resendSingleConferenceMessage(clientInterface, this.mUser.getId(), str, j, str2, this.mUser.getName());
    }

    public void groupSaveConferenceFile(String str, String str2, Callback callback) {
        this.mService.saveConferenceFile(new ClientInterface(this, callback), str, str2);
    }

    public void groupSaveConferenceMessages(Group group, String str, String str2, Callback callback) {
        this.mService.saveConferenceConversation(new ClientInterface(this, callback), this.mUser.getId(), group.getGroupID(), str, str2);
    }

    public void groupSendAttachedMessage(Group group, Message message, String str, int i, Callback callback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        if (i == PoolDataType.IMAGE.ordinal()) {
            this.mService.sendPoolPhoto(clientInterface, this.mUser.getId(), this.mUser.getName(), group.getGroupID(), str, message.getText());
            return;
        }
        this.mService.sendPoolData(clientInterface, this.mUser.getId(), this.mUser.getName(), group.getGroupID(), str, i, message.getText());
    }

    public void groupSendMessage(Group group, Message message, Callback callback) {
        this.mService.sendMessageConverence(new ClientInterface(this, callback), group.getGroupID(), this.mUser.getId(), this.mUser.getName(), message.getText());
    }

    public void groupSendQuotedMessage(Group group, Message message, Callback callback) {
        this.mService.sendQuotedMessageConverence(new ClientInterface(this, callback), group.getGroupID(), this.mUser.getId(), this.mUser.getName(), message.getText());
    }

    public void groupUploadPhoto(String str, String str2, String str3, Callback callback) {
        this.mService.changePoolImage(new ClientInterface(this, callback), this.mUser.getId(), str, str2, str3);
    }

    public boolean isAccountVerified() {
        return getRegistrationState() == RegistrationState.COMPLETE;
    }

    public boolean isCatfizStarted() {
        return this.mCatfizStarted;
    }

    public boolean isFinish() {
        return this.isFinish;
    }

    public boolean isFriendOnTyping(String str) {
        return this.mService.isFriendOnTyping(str);
    }

    public void isGroupNotifMute(String str, IsGroupMute isGroupMute) {
        this.mService.isPoolMute(new ClientInterface(this, (Callback) isGroupMute), str);
    }

    public boolean isRegisterProgress() {
        return this.mRegisterProgress;
    }

    public void leaveGroup(String str, OnGroupDeleted onGroupDeleted) {
        this.mService.leaveConverence(new ClientInterface(this, (Callback) onGroupDeleted), this.mUser.getId(), str);
    }

    public void reInit() {
        resetState();
        if (this.mBound) {
            this.mAndroidContext.unbindService(this.mConnection);
        }
        this.mBound = false;
        this.mAndroidContext.bindService(CatfishIntents.newIntent(this.mAndroidContext, CatfishService.CATFISH_UISERVICE), this.mConnection, 1);
    }

    public void renameCategory(String str, String str2, Callback callback) {
        this.mService.addNewCategoryGroup(new ClientInterface(this, callback), str, "rename", str2);
    }

    public void requestFizzlinkChace(FizzlinkDownloadDetails fizzlinkDownloadDetails, String str) {
        this.mService.requestSlinkChace(new ClientInterface(this, (Callback) fizzlinkDownloadDetails), str);
    }

    public void requestProgressUploadDownload(ProgressUploadDownload progressUploadDownload) {
        this.mService.requestAllProgressUploadDownload(new ClientInterface(this, (Callback) progressUploadDownload));
    }

    public void requestStatusComment(long j, String str, FetchStatusComment fetchStatusComment) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, (Callback) fetchStatusComment);
        Log.d(TAG, "seq request=" + j);
        this.mService.requestStatCommConversation(clientInterface, "sc:" + str + ":" + String.valueOf(j), true);
        if (str.compareTo(CatfishService.getUserPIN()) == 0) {
            CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
            int i = catfishPreferences.getInt(FriendListDataStorage.LIKESTATUS, 0);
            int i2 = catfishPreferences.getInt(Constant.IS_LIKE_MY_STATUS, 0);
            if (i2 != -1) {
                catfishPreferences.edit().putInt(Constant.PREV_NOTIF_LIKE, i + i2).commit();
            } else {
                catfishPreferences.edit().putInt(Constant.PREV_NOTIF_LIKE, i).commit();
            }
        }
    }

    public void requestUnreadStatusCommentCount(GetCountCallback getCountCallback) {
        this.mService.requestUnreadStatusCommentCount(new ClientInterface(this, (Callback) getCountCallback));
    }

    public void requestUnreadStatusLikeCount(GetCountCallback getCountCallback) {
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        int i = catfishPreferences.getInt(FriendListDataStorage.LIKESTATUS, 0);
        int i2 = catfishPreferences.getInt(Constant.PREV_NOTIF_LIKE, 0);
        int i3 = catfishPreferences.getInt(Constant.IS_LIKE_MY_STATUS, 0);
        Log.d(TAG, "is like my status " + i3);
        if (i3 != -1) {
            getCountCallback.onData(i - (i3 + i2));
        } else {
            getCountCallback.onData(i - i2);
        }
    }

    public void requestUserLikeList(String str, long j, String str2, UserFetchStatusLike userFetchStatusLike) {
        Log.d(TAG, "requestUserLikeList:" + str + " " + j + " " + str2);
        this.mService.requestUserLikeList(new ClientInterface(this, (Callback) userFetchStatusLike), str + str2 + ":" + j);
    }

    public void resendChatQuote(String str, long j, String str2, PrivateFetchMessagesCallback privateFetchMessagesCallback) {
        this.mService.resendChatQuote(new ClientInterface(this, (Callback) privateFetchMessagesCallback), j, str, str2, this.mUser.getName(), MessageType.QUOTE);
    }

    public void resendSingleChatMessage(String str, long j, String str2, PrivateFetchMessagesCallback privateFetchMessagesCallback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, (Callback) privateFetchMessagesCallback);
        this.mService.resendSingleMessage(clientInterface, j, str, str2, this.mUser.getName());
    }

    public void sendAttachedComment(String str, String str2, long j, String str3, String str4, Context context, Callback callback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        if (str3.equals(AlbusModelObject.DATA_TYPE_VOICE)) {
            this.mService.sendBroadcastVoiceStatus(clientInterface, context, this.mUser.getId(), str, str4, AlbusModelObject.DATA_TYPE_VOICE, j, this.mService);
            return;
        }
        if (str3.equals(AlbusModelObject.DATA_TYPE_PHOTO)) {
            Context context2 = context;
            String str5 = str;
            String str6 = str4;
            String str7 = str2;
            long j2 = j;
            this.mService.sendBroadcastImageStatus(clientInterface, context2, this.mUser.getId(), str5, str6, str7, j2, this.mService, AlbusModelObject.DATA_TYPE_IMAGE);
            return;
        }
        if (str3.equals(AlbusModelObject.DATA_TYPE_VIDEO)) {
            this.mService.sendBroadcastVideoStatus(clientInterface, context, this.mUser.getId(), str, str4, "Video Chat", j, this.mService);
            return;
        }
        if (str3.equals("contact")) {
            this.mService.sendStatusComment(clientInterface, this.mUser.getId(), this.mUser.getName(), str, str2, j, MessageType.PROMOTECONTACT);
        }
    }

    public void sendStatusComment(String str, String str2, long j, Callback callback) {
        sendStatusComment(str, str2, j, MessageType.STATUSCOMMENT, callback);
    }

    public void sendStatusComment(String str, String str2, long j, MessageType messageType, Callback callback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        Log.d(TAG, "seq send=" + j);
        this.mService.sendStatusComment(clientInterface, this.mUser.getId(), this.mUser.getName(), str, str2, j, messageType);
    }

    public void sendStatusLike(String str, long j, Callback callback) {
        this.mService.sendStatusLike(new ClientInterface(this, callback), str, j, 1);
    }

    public void setAccount(Account account) {
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        catfishPreferences.edit().putString(CatfishRESTAPI.CFCOMPACT_EMAIL, account.getEmail()).commit();
        catfishPreferences.edit().putString(CatfishRESTAPI.CFCOMPACT_USERKEY, account.getPassword()).commit();
    }

    public void setGroupNotifMute(Callback callback) {
        this.mService.setPoolMute(new ClientInterface(this, callback), PoolDataStorage.TOPIC_KEY, true);
    }

    public void setInterface(ICatfiz iCatfiz) {
        if (iCatfiz == null) {
            Log.d(TAG, "cannot set catfiz interface");
            return;
        }
        if (this.mInterface != null) {
            this.mInterface = null;
        }
        this.mInterface = iCatfiz;
        this.mClient.setCatfizInterface(this.mInterface);
        Log.d(TAG, "set catfiz interface");
    }

    public void setRecentUpdateOpen(String str, Callback callback) {
        this.mService.recentUpdateOpen(new ClientInterface(this, callback), str);
    }

    public void setRecentUpdateOpenComment(String str, Callback callback) {
        this.mService.recentUpdateOpenComment(new ClientInterface(this, callback), str);
    }

    public void setRecentUpdateOpenLike(String str, Callback callback) {
        this.mService.recentUpdateOpenLike(new ClientInterface(this, callback), str);
    }

    public void setSignalBinder(SignalBinder signalBinder) {
        if (signalBinder != null) {
            this.mSignalBinder = signalBinder;
            if (this.mBound) {
                Log.d(TAG, "bind service on set signal");
                this.mSignalBinder.bind(this.mService, this.mClient);
            }
        }
    }

    public void setUnreadStatusComment(String str, Callback callback) {
        this.mService.setUnreadStatusComment(new ClientInterface(this, callback), str);
    }

    public void setlikeStatusComment(boolean z, String str, long j, long j2, String str2, Callback callback) {
        this.mService.sendStatusResponse(new ClientInterface(this, callback), CatfishService.getUserPIN(), this.mUser.getName(), str, " ", "like", j, j2, str2, z);
    }

    public void shareAndSaveFizzlink(Context context, String str, String str2, Callback callback) {
        this.mService.saveMessageFizzlinkToDb(new ClientInterface(this, callback), this.mUser.getId(), str, this.mUser.getName(), str2, MessageType.SHARE_SLINK, context, 0, 0);
    }

    public void shareAndSaveFizzlinkToDBGroup(ArrayList arrayList, String str, Context context, Callback callback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        this.mService.saveMessageFizzlinkToDbForPool(clientInterface, this.mUser.getId(), this.mUser.getName(), arrayList, str, MessageType.SHARE_SLINK_AT_POOL.ordinal(), context, 2);
    }

    public void shareFizzlink(String str, String str2, Callback callback) {
        this.mService.sendMessageWithMessageTipe(new ClientInterface(this, callback), this.mUser.getId(), str, this.mUser.getName(), str2, MessageType.SHARE_SLINK);
    }

    public void shareFizzlinkToGroup(ArrayList arrayList, String str, Callback callback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        this.mService.shareMessageToConferences(clientInterface, arrayList, this.mUser.getId(), this.mUser.getName(), str, MessageType.SHARE_SLINK_AT_POOL.ordinal());
    }

    public void shareFizzlinkToMyStatus(Callback callback, String str, long j) {
        this.mService.sendStatusComment(new ClientInterface(this, callback), this.mUser.getId(), this.mUser.getName(), this.mUser.getId(), str, j, MessageType.SHARE_SLINK_AT_COMMENT);
    }

    public void shareQrCodeToFriendStatus(Context context, String str, String str2, String str3, long j, String str4, Callback callback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        String userPIN = CatfishService.getUserPIN();
        Log.d(TAG, "client=" + clientInterface + " context=" + context + " userpin=" + userPIN + " uri=" + str2 + " msg=" + str3 + " service=" + this.mService + " imagettype=" + str4);
        this.mService.sendBroadcastImageStatus(clientInterface, context, userPIN, str, str2, str3, j, this.mService, str4);
    }

    public void shareQrCodeToMyStatus(Context context, Uri uri, String str, long j, String str2, Callback callback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        String userPIN = CatfishService.getUserPIN();
        Log.d(TAG, "client=" + clientInterface + " context=" + context + " userpin=" + userPIN + " uri=" + uri.getPath() + " msg=" + str + " service=" + this.mService + " imagettype=" + str2);
        this.mService.sendBroadcastImageStatus(clientInterface, context, userPIN, userPIN, uri.getPath(), str, j, this.mService, str2);
    }

    public void start() {
        if (this.mSignalBinder != null && this.mBound) {
            Log.d(TAG, "bind service on start");
            this.mSignalBinder.bind(this.mService, this.mClient);
        }
        this.isFinish = false;
    }

    public void updateFriendAlias(String str, String str2, Callback callback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        Log.d(TAG, "pin=" + str + " alias=" + str2);
        this.mService.setFriendAlias(clientInterface, str, str2);
    }

    public void updatePoolTitle(String str, String str2, String str3, Callback callback) {
        this.mService.changePoolTitle(new ClientInterface(this, callback), this.mUser.getId(), str2, str3, str);
    }

    public void updateStreamThubnailDownload(String str, int i) {
        this.mService.updateStreamThumbnailDownload(null, str, i);
    }

    public void updatesFetchRecentNews(UpdatesFetchRecentNews updatesFetchRecentNews) {
        this.mService.requestAllRecentUpdates(new ClientInterface(this, (Callback) updatesFetchRecentNews));
    }

    public void uploadFizzlink(Callback callback, String str, String str2) {
        Log.d(TAG, "path=" + str + " caption=" + str2);
        this.mService.uploadFizzlinkToServer(new ClientInterface(this, callback), str, str2);
    }

    public void userAcceptFriend(String str, Long l, AcceptFriendCallback acceptFriendCallback) {
        this.mService.acceptFriend(new ClientInterface(this, (Callback) acceptFriendCallback), CatfishService.getUserPIN(), str, l.longValue());
    }

    public void userBlockByNIC(String str, Callback callback) {
        this.mService.blackListNic(new ClientInterface(this, callback), str, null, System.currentTimeMillis());
    }

    public void userBlockFriend(String str, String str2, Long l, Callback callback) {
        this.mService.blackListNic(new ClientInterface(this, callback), str2, str, l.longValue());
    }

    public void userCheckBlacklist(Callback callback) {
        this.mService.bindBlacklistNicNameReady(new ClientInterface(this, callback));
    }

    public void userCheckIsFriend(String str, Callback callback) {
        this.mService.checkIsFriend(new ClientInterface(this, callback), str);
    }

    public void userDeclineFriend(String str, Callback callback) {
        this.mService.ignoreFriend(new ClientInterface(this, callback), CatfishService.getUserPIN(), str);
    }

    public void userDeletePendingReq(String str, UserDeletePendingRequestCallback userDeletePendingRequestCallback) {
        this.mService.deletePendingRequest(new ClientInterface(this, (Callback) userDeletePendingRequestCallback), str);
    }

    public void userFetchAllSyncContactCatfiz(UserFetchSyncContactCatfizRequestCallback userFetchSyncContactCatfizRequestCallback) {
        this.mService.requestPendingReqList(new ClientInterface(this, (Callback) userFetchSyncContactCatfizRequestCallback));
    }

    public void userFetchBlackList(UserFetchBlackListCallback userFetchBlackListCallback) {
        this.mService.requestBlacklistPin(new ClientInterface(this, (Callback) userFetchBlackListCallback));
    }

    public void userFetchContactList(UserFetchContactListCallback userFetchContactListCallback) {
        this.mService.requestAllContacts(new ClientInterface(this, (Callback) userFetchContactListCallback));
    }

    public void userFetchFriendProfile(String str, UserFetchProfileCallback userFetchProfileCallback) {
        this.mService.requestMyProfile(new ClientInterface(this, (Callback) userFetchProfileCallback), str);
    }

    public void userFetchFriends(UserFetchFriendsCallback userFetchFriendsCallback) {
        ICatfishClientInterface clientInterface = new ClientInterface(this, (Callback) userFetchFriendsCallback);
        Log.d(TAG, "fetch friends");
        this.mService.requestFriendList(clientInterface);
    }

    public void userFetchFriendsLimit(String str, UserFetchContactListCallback userFetchContactListCallback) {
        this.mService.requestContactsLike(new ClientInterface(this, (Callback) userFetchContactListCallback), str);
    }

    public void userFetchFriendsRequest(UserFetchFriendsRequestCallback userFetchFriendsRequestCallback) {
        this.mService.requestFriendReqList(new ClientInterface(this, (Callback) userFetchFriendsRequestCallback));
    }

    public void userFetchGroups(UserFetchGroupsCallback userFetchGroupsCallback) {
        this.mService.requestAllTopic(new ClientInterface(this, (Callback) userFetchGroupsCallback));
    }

    public void userFetchNicProfile(String str, NicProfileCallback nicProfileCallback) {
        this.mService.requestNicProfile(new ClientInterface(this, (Callback) nicProfileCallback), str.toUpperCase(Locale.US));
    }

    public void userFetchNotificationRequest(FetchNotificationCallback fetchNotificationCallback) {
        this.mService.requestAllNotification(new ClientInterface(this, (Callback) fetchNotificationCallback));
    }

    public void userFetchPendingGroups(UserFetchGroupsCallback userFetchGroupsCallback) {
        this.mService.requestPendingTopic(new ClientInterface(this, (Callback) userFetchGroupsCallback));
    }

    public void userFetchPendingRequest(UserFetchPendingRequestCallback userFetchPendingRequestCallback) {
        this.mService.requestPendingReqList(new ClientInterface(this, (Callback) userFetchPendingRequestCallback));
    }

    public void userFetchProfile(UserFetchProfileCallback userFetchProfileCallback) {
        this.mService.requestMyProfile(new ClientInterface(this, (Callback) userFetchProfileCallback), CatfishService.getUserPIN());
    }

    public void userFriendLikeUpdate(String str, int i, long j, OnSendLikeCallback onSendLikeCallback) {
        this.mService.sendStatusLike(new ClientInterface(this, (Callback) onSendLikeCallback), str, j, i);
    }

    public void userProfileBirthdayUpdate(User user, String str, Callback callback) {
        JSONObject jSONObject;
        ClientInterface clientInterface = new ClientInterface(this, callback);
        try {
            jSONObject = new JSONObject(CatfishService.getCatfishPreferences().getString(Constant.PREF_KEY_PROFILE, ""));
            try {
                jSONObject.put(Constant.BIRTHDAY, str);
                Log.d(TAG, jSONObject.toString());
            } catch (JSONException e) {
            }
        } catch (JSONException e2) {
            jSONObject = null;
        }
        updateProfile(clientInterface, callback, jSONObject, user);
    }

    public void userProfileEmailUpdate(User user, String str, String str2, String str3, String str4, Callback callback) {
        JSONObject jSONObject;
        ClientInterface clientInterface = new ClientInterface(this, callback);
        try {
            jSONObject = new JSONObject(CatfishService.getCatfishPreferences().getString(Constant.PREF_KEY_PROFILE, ""));
            try {
                Log.d("catfiz-sdk", "email=" + str);
                JSONArray jSONArray = new JSONArray();
                JSONObject jSONObject2 = jSONObject.getJSONArray(CatfishRESTAPI.CFCOMPACT_EMAIL).getJSONObject(0);
                jSONObject2.put(CatfishRESTAPI.CFCOMPACT_EMAIL, str);
                jSONArray.put(jSONObject2);
                if (!str3.equals("")) {
                    jSONObject2 = new JSONObject();
                    jSONObject2.put(CatfishRESTAPI.CFCOMPACT_EMAIL, str3);
                    jSONObject2.put(MimeTypeParser.TAG_TYPE, str4);
                    jSONArray.put(jSONObject2);
                }
                jSONObject.put(CatfishRESTAPI.CFCOMPACT_EMAIL, jSONArray);
            } catch (JSONException e) {
            }
        } catch (JSONException e2) {
            jSONObject = null;
        }
        updateProfile(clientInterface, callback, jSONObject, user);
    }

    public void userProfileEmailUpdate(User user, List list, Callback callback) {
        ClientInterface clientInterface = new ClientInterface(this, callback);
        JSONObject jSONObject = null;
        try {
            JSONObject jSONObject2 = new JSONObject(CatfishService.getCatfishPreferences().getString(Constant.PREF_KEY_PROFILE, ""));
            try {
                Log.d("catfiz-sdk", "email=" + list);
                JSONArray jSONArray = new JSONArray();
                for (int i = 0; i < list.size(); i++) {
                    jSONArray.put(new JSONObject((String) list.get(i)));
                }
                jSONObject2.put(CatfishRESTAPI.CFCOMPACT_EMAIL, jSONArray);
                jSONObject = jSONObject2;
            } catch (JSONException e) {
                jSONObject = jSONObject2;
            }
        } catch (JSONException e2) {
        }
        updateProfile(clientInterface, callback, jSONObject, user);
    }

    public void userProfileGenderUpdate(User user, String str, Callback callback) {
        JSONObject jSONObject;
        ClientInterface clientInterface = new ClientInterface(this, callback);
        try {
            jSONObject = new JSONObject(CatfishService.getCatfishPreferences().getString(Constant.PREF_KEY_PROFILE, ""));
            try {
                jSONObject.put(Constant.GENDER, str);
            } catch (JSONException e) {
            }
        } catch (JSONException e2) {
            jSONObject = null;
        }
        updateProfile(clientInterface, callback, jSONObject, user);
    }

    public void userProfileLikeUpdate(User user, int i, OnSendLikeCallback onSendLikeCallback) {
        JSONObject jSONObject;
        Object clientInterface = new ClientInterface(this, (Callback) onSendLikeCallback);
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        try {
            jSONObject = new JSONObject(catfishPreferences.getString(Constant.PREF_KEY_PROFILE, ""));
            try {
                jSONObject.put(Constant.IS_LIKE_THIS_STATUS, i);
                Log.d(TAG, jSONObject.toString());
            } catch (JSONException e) {
            }
        } catch (JSONException e2) {
            jSONObject = null;
        }
        this.mService.sendStatusLike(clientInterface, CatfishService.getUserPIN(), catfishPreferences.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0), i);
        updateProfile(clientInterface, onSendLikeCallback, jSONObject, user);
    }

    public void userProfileNameUpdate(User user, String str, Callback callback) {
        JSONObject jSONObject;
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        try {
            jSONObject = new JSONObject(catfishPreferences.getString(Constant.PREF_KEY_PROFILE, ""));
            try {
                if (!str.equals("")) {
                    jSONObject.put(CatfishDataStorage.NIC_NAME, str);
                }
            } catch (JSONException e) {
            }
        } catch (JSONException e2) {
            jSONObject = null;
        }
        catfishPreferences.edit().putString(Constant.PREF_KEY_PROFILE, jSONObject.toString()).commit();
        updateProfile(clientInterface, callback, jSONObject, user);
        this.mService.setUserName(clientInterface, this.mUser.getId(), str);
        this.mService.notifyFriendsUsernameUpdate(clientInterface, this.mUser.getId(), str);
    }

    public void userProfilePhoneUpdate(User user, String str, String str2, Boolean bool, Callback callback) {
        JSONObject jSONObject;
        ClientInterface clientInterface = new ClientInterface(this, callback);
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        try {
            jSONObject = new JSONObject(catfishPreferences.getString(Constant.PREF_KEY_PROFILE, ""));
            try {
                Object jSONArray;
                JSONObject jSONObject2;
                if (!jSONObject.has(Constant.PHONE) || bool.booleanValue()) {
                    jSONArray = new JSONArray();
                    jSONObject2 = new JSONObject();
                    jSONObject2.put(Constant.PHONE, str);
                    jSONObject2.put(Constant.PHONE_TYPE, str2);
                    jSONArray.put(jSONObject2);
                } else {
                    jSONArray = jSONObject.getJSONArray(Constant.PHONE);
                    jSONObject2 = jSONArray.getJSONObject(0);
                    jSONObject2.put(Constant.PHONE, str);
                    jSONObject2.put(Constant.PHONE_TYPE, str2);
                    jSONArray.put(0, jSONObject2);
                }
                jSONObject.put(Constant.PHONE, jSONArray);
            } catch (JSONException e) {
            }
        } catch (JSONException e2) {
            jSONObject = null;
        }
        catfishPreferences.edit().putString(Constant.PREF_KEY_PROFILE, jSONObject.toString()).commit();
        updateProfile(clientInterface, callback, jSONObject, user);
    }

    public void userProfileUpdate(User user, String str, String str2, Callback callback) {
        JSONObject jSONObject;
        ICatfishClientInterface clientInterface = new ClientInterface(this, callback);
        try {
            jSONObject = new JSONObject(CatfishService.getCatfishPreferences().getString(Constant.PREF_KEY_PROFILE, ""));
            try {
                jSONObject.put(FriendListDataStorage.STATUS, str);
                jSONObject.put(Constant.STATUS_DATE, str2);
            } catch (JSONException e) {
            }
        } catch (JSONException e2) {
            jSONObject = null;
        }
        Log.d("catfiz-sdk", "update status=" + jSONObject.toString());
        updateProfile(clientInterface, callback, jSONObject, user);
        this.mService.setUserStatus(clientInterface, CatfishService.getUserPIN(), str);
        this.mService.notifyFriendsUserstatusUpdate(clientInterface, CatfishService.getUserPIN(), user.getName(), str);
    }

    public void userRequestAddFriend(String str, Callback callback) {
        this.mService.requestFriend(new ClientInterface(this, callback), CatfishService.getUserPIN(), str, "");
    }

    public void userResendingReq(String str, Callback callback) {
        this.mService.resendingRequestFriend(new ClientInterface(this, callback), CatfishService.getUserPIN(), str, "");
    }

    public void userUnblock(String str, Callback callback) {
        this.mService.removeBlacklistNic(new ClientInterface(this, callback), str);
    }

    public void userUnfriend(String str, Callback callback) {
        this.mService.deleteFriend(new ClientInterface(this, callback), CatfishService.getUserPIN(), str);
    }

    public void userUploadPhoto(String str, File file, Callback callback) {
        this.mService.uploadProfilePhoto(new ClientInterface(this, callback), str, file);
    }
}
