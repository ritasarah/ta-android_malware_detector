package com.catfiz.base;

import android.database.Cursor;
import android.graphics.drawable.Drawable;
import com.catfiz.R;
import com.catfiz.base.Callback.AcceptFriendCallback;
import com.catfiz.base.Callback.FetchCategoryCallback;
import com.catfiz.base.Callback.FetchFriendCallback;
import com.catfiz.base.Callback.FetchGroupCallback;
import com.catfiz.base.Callback.FetchGroupMessageLikesCallback;
import com.catfiz.base.Callback.FetchGroupMessagesCallback;
import com.catfiz.base.Callback.FetchGroupMessagesWithLimitCallback;
import com.catfiz.base.Callback.FetchNotificationCallback;
import com.catfiz.base.Callback.FetchStatusComment;
import com.catfiz.base.Callback.FetchUserCategoriesCallback;
import com.catfiz.base.Callback.FetchUserCategoryCallback;
import com.catfiz.base.Callback.FizzlinkDownloadDetails;
import com.catfiz.base.Callback.FizzlinkInfo;
import com.catfiz.base.Callback.FizzlinkUploadedList;
import com.catfiz.base.Callback.GetCountCallback;
import com.catfiz.base.Callback.GroupMessageCountCallback;
import com.catfiz.base.Callback.IsGroupMute;
import com.catfiz.base.Callback.NicProfileCallback;
import com.catfiz.base.Callback.OnGroupDeleted;
import com.catfiz.base.Callback.OnSendLikeCallback;
import com.catfiz.base.Callback.PrivateFetchActiveFriendsCallback;
import com.catfiz.base.Callback.PrivateFetchMessagesCallback;
import com.catfiz.base.Callback.PrivateFetchMessagesCountCallback;
import com.catfiz.base.Callback.ProgressUploadDownload;
import com.catfiz.base.Callback.RegistrationCallback;
import com.catfiz.base.Callback.StreamHasThumbnailCallback;
import com.catfiz.base.Callback.UpdatesFetchRecentNews;
import com.catfiz.base.Callback.UserDeletePendingRequestCallback;
import com.catfiz.base.Callback.UserFetchBlackListCallback;
import com.catfiz.base.Callback.UserFetchContactListCallback;
import com.catfiz.base.Callback.UserFetchFriendsCallback;
import com.catfiz.base.Callback.UserFetchFriendsRequestCallback;
import com.catfiz.base.Callback.UserFetchGroupMembersCallback;
import com.catfiz.base.Callback.UserFetchGroupsCallback;
import com.catfiz.base.Callback.UserFetchOfficalsCallback;
import com.catfiz.base.Callback.UserFetchPendingRequestCallback;
import com.catfiz.base.Callback.UserFetchProfileCallback;
import com.catfiz.base.Callback.UserFetchStatusLike;
import com.catfiz.base.Constant.FriendsType;
import com.catfiz.base.Constant.RegistrationResult;
import com.catfiz.base.ICatfiz.ICatfizBlacklist;
import com.catfiz.base.ICatfiz.ICatfizGroupDelete;
import com.catfiz.base.ICatfiz.ICatfizNewMessage;
import com.catfiz.base.ICatfiz.ICatfizNewMessageGroup;
import com.catfiz.base.ICatfiz.ICatfizRegistration;
import com.catfiz.base.ICatfiz.ICatfizUpdateProgress;
import com.catfiz.base.ICatfiz.ICatfizUpdates;
import com.catfiz.base.ICatfiz.ICatfizUploadDownloadProgress;
import com.catfiz.model.Fizzlink;
import com.catfiz.model.Group;
import com.catfiz.model.Notification;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishMessageObject;
import com.catfiz.service.CatfishService;
import com.catfiz.service.CatfishService.RegistrationState;
import com.catfiz.service.CatfishUIBinder.DatabaseRequestOP;
import com.catfiz.service.CatfishUIBinder.ServiceERRORCode;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.service.ICatfishClientInterface;
import com.catfiz.service.PinManagerV2;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.signal.Signal;
import com.catfiz.util.FizzlinkUtil;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.LangUtils;

public class ClientInterface implements ICatfishClientInterface {
    private static final String TAG = ClientInterface.class.getSimpleName();
    private Callback mCallback = null;
    private Catfiz mCatfiz = null;
    private ICatfiz mCatfizInterface = null;

    /* synthetic */ class AnonymousClass1 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$base$Constant$RegistrationResult = new int[RegistrationResult.values().length];
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP = new int[DatabaseRequestOP.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$base$Constant$RegistrationResult[RegistrationResult.REGISTRATION_SUCCESS.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$base$Constant$RegistrationResult[RegistrationResult.REGISTRATION_ALREADY_REGISTERED.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_ALL_RECENTUPDATES.ordinal()] = 1;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.DELETE_ALL_RECENTUPDATES.ordinal()] = 2;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_MY_PROFILE.ordinal()] = 3;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_CONVERSATION.ordinal()] = 4;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_ALL_FRIENDLIST.ordinal()] = 5;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_ALL_ACTIVE_FRIENDLIST.ordinal()] = 6;
            } catch (NoSuchFieldError e8) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_ALL_OFFICIALS.ordinal()] = 7;
            } catch (NoSuchFieldError e9) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_CONFERENCE_MEMBER.ordinal()] = 8;
            } catch (NoSuchFieldError e10) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_USER_LIKE_LIST.ordinal()] = 9;
            } catch (NoSuchFieldError e11) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_POOL_LIKE_LIST.ordinal()] = 10;
            } catch (NoSuchFieldError e12) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.NIC_PROFILE.ordinal()] = 11;
            } catch (NoSuchFieldError e13) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.SEND_CONV_MESSAGE.ordinal()] = 12;
            } catch (NoSuchFieldError e14) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_POOL_DISCUSS.ordinal()] = 13;
            } catch (NoSuchFieldError e15) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.UPDATEPOOLSTATUSTOSENT.ordinal()] = 14;
            } catch (NoSuchFieldError e16) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.CLEAR_CONFERENCE.ordinal()] = 15;
            } catch (NoSuchFieldError e17) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.AFTERSENDLONGMESSAGE.ordinal()] = 16;
            } catch (NoSuchFieldError e18) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.DOWNLOAD_CONFERENCE_DATA.ordinal()] = 17;
            } catch (NoSuchFieldError e19) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.PROMOTE_FRIEND_IN_CONFERENCE.ordinal()] = 18;
            } catch (NoSuchFieldError e20) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.SEND_POOL_RESPONSE.ordinal()] = 19;
            } catch (NoSuchFieldError e21) {
            }
        }
    }

    public ClientInterface(Catfiz catfiz) {
        this.mCatfiz = catfiz;
    }

    public ClientInterface(Catfiz catfiz, Callback callback) {
        this.mCatfiz = catfiz;
        this.mCallback = callback;
    }

    public ClientInterface(Catfiz catfiz, ICatfiz iCatfiz) {
        this.mCatfiz = catfiz;
        this.mCatfizInterface = iCatfiz;
    }

    public Object dispatchDBRequest(CatfishService catfishService, DatabaseRequestOP databaseRequestOP, int i) {
        Log.d(TAG, " ---ClientInterface: dispatchDBRequest:" + databaseRequestOP + "--- ");
        switch (AnonymousClass1.$SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[databaseRequestOP.ordinal()]) {
            case e.b /*1*/:
                CatfishDataStorage catfishDataStorage = new CatfishDataStorage(catfishService);
                catfishDataStorage.deleteInvalidRecentUpdates();
                Cursor allRecentUpdates = catfishDataStorage.getAllRecentUpdates();
                List parseUpdates = CursorParser.parseUpdates(allRecentUpdates);
                if (allRecentUpdates == null) {
                    return parseUpdates;
                }
                allRecentUpdates.close();
                return parseUpdates;
            case e.c /*2*/:
                return new CatfishDataStorage(catfishService).deleteAllRecentUpdates() ? new ArrayList() : null;
            default:
                return null;
        }
    }

    public void finish() {
        Log.d(TAG, " ---ClientInterface: finish --- ");
    }

    public String getTagAction() {
        return null;
    }

    public boolean isFinish() {
        Log.d(TAG, " ---ClientInterface: isFinish --- ");
        return this.mCatfiz.isFinish();
    }

    public void onBCASTResponse() {
        Log.d(TAG, " ---ClientInterface: onBCASTResponse --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onBlacklistNameReady() {
        Log.d(TAG, "on black list name ready");
        if (this.mCatfiz == null || this.mCatfiz.isFinish()) {
            Log.d(TAG, "mcatfiz null");
        } else if (this.mCatfizInterface == null) {
            Log.d(TAG, "mCatfizInterface null");
        } else {
            Log.d(TAG, "on black list name ready - not return");
            ((ICatfizBlacklist) this.mCatfizInterface).onSignalNameReady();
        }
    }

    public void onDataCount(int i) {
        Log.d(TAG, " ---ClientInterface: onDataCount:" + i + "--- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCallback != null && (this.mCallback instanceof GetCountCallback)) {
            ((GetCountCallback) this.mCallback).onData(i);
        }
    }

    public boolean onDataFileReceived(String str) {
        Log.d(TAG, " ---ClientInterface: onDataFileReceived --- ");
        if (this.mCatfiz == null || this.mCatfiz.isFinish()) {
            return false;
        }
        if (this.mCatfizInterface == null) {
            return false;
        }
        if (this.mCatfizInterface instanceof ICatfizNewMessage) {
            ((ICatfizNewMessage) this.mCatfizInterface).onSignalEventNewMessage(Signal.CHAT_MESSAGE, new User(str), 0, "");
        }
        return true;
    }

    public void onDatabaseRecordResponse(String str, Cursor cursor, String str2, int i) {
        Log.d(TAG, " ---ClientInterface: onDatabaseRecordResponse(Cursor):" + str + " " + str2 + "--- ");
        if (this.mCallback == null) {
            if (cursor != null) {
                cursor.close();
            }
        } else if (cursor == null) {
            this.mCallback.onError();
        } else {
            Object obj = -1;
            switch (str.hashCode()) {
                case -774896425:
                    if (str.equals(CatfishService.GET_FRIEND_KEY)) {
                        obj = null;
                        break;
                    }
                    break;
                case -618792570:
                    if (str.equals(CatfishService.GET_GROUP_KEY)) {
                        obj = 1;
                        break;
                    }
                    break;
            }
            switch (obj) {
                case e.a /*0*/:
                    if (this.mCallback instanceof FetchFriendCallback) {
                        Log.d(TAG, " ---ClientInterface: onDatabaseRecordResponse: Invoke callback --- ");
                        ((FetchFriendCallback) this.mCallback).onData(CursorParser.parseUserNoMedia(cursor), str2);
                    } else {
                        Log.e(TAG, "Invalid Callback: Callback.FetchFriendCallback expected");
                        this.mCallback.onError();
                    }
                    cursor.close();
                    return;
                case e.b /*1*/:
                    if (this.mCallback instanceof FetchGroupCallback) {
                        ((FetchGroupCallback) this.mCallback).onData(CursorParser.parseGroup(cursor), str2);
                    } else {
                        this.mCallback.onError();
                    }
                    cursor.close();
                    return;
                default:
                    cursor.close();
                    this.mCallback.onError();
                    return;
            }
        }
    }

    public void onDatabaseResponse(String str, Cursor cursor, int i) {
        Log.d(TAG, " ---ClientInterface: onDatabaseResponse(Cursor)[" + str + "] --- " + " " + this.mCatfiz.isFinish());
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
            boolean z = true;
            switch (str.hashCode()) {
                case -2124013244:
                    if (str.equals(CatfishService.GET_BLACKLISTNIC_KEY)) {
                        z = true;
                        break;
                    }
                    break;
                case -1899631108:
                    if (str.equals(CatfishService.GET_CONVERSATION_KEY)) {
                        z = true;
                        break;
                    }
                    break;
                case -1764687126:
                    if (str.equals(CatfishService.GET_SLINKCHACE_KEY)) {
                        z = true;
                        break;
                    }
                    break;
                case -1751444823:
                    if (str.equals(CatfishService.GET_STATCOMM_CONVERSATION_KEY)) {
                        z = true;
                        break;
                    }
                    break;
                case -1608398421:
                    if (str.equals(CatfishService.DELETE_PENDINGREQ_KEY)) {
                        z = true;
                        break;
                    }
                    break;
                case -1439623379:
                    if (str.equals(CatfishService.GET_DISCUSS_MESSAGE_CONVERSATION_COUNT)) {
                        z = true;
                        break;
                    }
                    break;
                case -566430610:
                    if (str.equals(CatfishService.GET_ALL_UPLOADED_FIZZLINK)) {
                        z = true;
                        break;
                    }
                    break;
                case -405032751:
                    if (str.equals(CatfishService.GET_ALL_TOPIC_CONVERSATION_KEY)) {
                        z = false;
                        break;
                    }
                    break;
                case -360358945:
                    if (str.equals(CatfishService.GET_CONVERSATION_MEMBER_KEY)) {
                        z = true;
                        break;
                    }
                    break;
                case -116287891:
                    if (str.equals(CatfishService.GET_GROUP_CONTACT_LIST)) {
                        z = true;
                        break;
                    }
                    break;
                case -28288850:
                    if (str.equals(CatfishService.GET_ALL_FRIENDREQ_KEY)) {
                        z = true;
                        break;
                    }
                    break;
                case 260254538:
                    if (str.equals(CatfishService.GET_ALL_CONTACTS_KEY)) {
                        z = true;
                        break;
                    }
                    break;
                case 618453504:
                    if (str.equals(CatfishService.GET_USER_CATEGORIES)) {
                        z = true;
                        break;
                    }
                    break;
                case 998204478:
                    if (str.equals(CatfishService.ADD_FRIEND)) {
                        z = true;
                        break;
                    }
                    break;
                case 1029671893:
                    if (str.equals(CatfishService.GET_ALL_PENDINGREQ_KEY)) {
                        z = true;
                        break;
                    }
                    break;
            }
            switch (z) {
                case e.a /*0*/:
                    if (this.mCallback != null) {
                        this.mCallback.onSuccess();
                        if (this.mCallback instanceof UserFetchGroupsCallback) {
                            ((UserFetchGroupsCallback) this.mCallback).onData(CursorParser.parseGroups(cursor));
                            break;
                        }
                    } else if (cursor != null) {
                        cursor.close();
                        return;
                    } else {
                        return;
                    }
                    break;
                case e.b /*1*/:
                    if (this.mCallback != null) {
                        this.mCallback.onSuccess();
                        if (!(this.mCallback instanceof UserFetchFriendsRequestCallback)) {
                            if (this.mCallback instanceof AcceptFriendCallback) {
                                ((AcceptFriendCallback) this.mCallback).onData(cursor.getCount());
                                break;
                            }
                        }
                        ((UserFetchFriendsRequestCallback) this.mCallback).onData(CursorParser.parseUsersReceiveReq(cursor));
                        break;
                    } else if (cursor != null) {
                        cursor.close();
                        return;
                    } else {
                        return;
                    }
                    break;
                case e.c /*2*/:
                    if (this.mCallback != null) {
                        this.mCallback.onSuccess();
                        if (this.mCallback instanceof UserFetchPendingRequestCallback) {
                            ((UserFetchPendingRequestCallback) this.mCallback).onData(CursorParser.parseUsersReq(cursor));
                            break;
                        }
                    } else if (cursor != null) {
                        cursor.close();
                        return;
                    } else {
                        return;
                    }
                    break;
                case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                    if (this.mCallback != null) {
                        this.mCallback.onSuccess();
                        if (this.mCallback instanceof UserDeletePendingRequestCallback) {
                            ((UserDeletePendingRequestCallback) this.mCallback).onData(CursorParser.parseUsersReq(cursor));
                            break;
                        }
                    } else if (cursor != null) {
                        cursor.close();
                        return;
                    } else {
                        return;
                    }
                    break;
                case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                    if (this.mCallback != null) {
                        this.mCallback.onSuccess();
                        if (this.mCallback instanceof UserFetchContactListCallback) {
                            Log.d(TAG, "parse contacts cursor : " + cursor.getCount());
                            ((UserFetchContactListCallback) this.mCallback).onData(CursorParser.parseUsers(cursor));
                            break;
                        }
                    } else if (cursor != null) {
                        cursor.close();
                        return;
                    } else {
                        return;
                    }
                    break;
                case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                    if (this.mCallback != null) {
                        this.mCallback.onSuccess();
                        break;
                    } else if (cursor != null) {
                        cursor.close();
                        return;
                    } else {
                        return;
                    }
                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                    if (this.mCallback != null) {
                        this.mCallback.onSuccess();
                        if (this.mCallback instanceof UserFetchBlackListCallback) {
                            ((UserFetchBlackListCallback) this.mCallback).onData(CursorParser.parseUsersBlack(cursor));
                            break;
                        }
                    } else if (cursor != null) {
                        cursor.close();
                        return;
                    } else {
                        return;
                    }
                    break;
                case SimpleLog.LOG_LEVEL_OFF /*7*/:
                    if (this.mCallback != null) {
                        this.mCallback.onSuccess();
                        Log.d(TAG, "request status comment" + cursor.getCount());
                        if (this.mCallback instanceof FetchStatusComment) {
                            ((FetchStatusComment) this.mCallback).onData(CursorParser.parseStatusComments(cursor));
                        }
                        this.mCallback = null;
                        break;
                    } else if (cursor != null) {
                        cursor.close();
                        return;
                    } else {
                        return;
                    }
                case Utils.FILE_TYPE_INSTALLER /*8*/:
                    if (this.mCallback != null) {
                        this.mCallback.onSuccess();
                        if (this.mCallback instanceof FizzlinkUploadedList) {
                            FizzlinkUploadedList fizzlinkUploadedList = (FizzlinkUploadedList) this.mCallback;
                            Log.d(TAG, "get fizzlink data");
                            fizzlinkUploadedList.onData(CursorParser.parseFizzlinks(cursor));
                            break;
                        }
                    } else if (cursor != null) {
                        cursor.close();
                        return;
                    } else {
                        return;
                    }
                    break;
                case HTTP.HT /*9*/:
                    if (this.mCallback != null) {
                        this.mCallback.onSuccess();
                        if (this.mCallback instanceof FizzlinkDownloadDetails) {
                            FizzlinkDownloadDetails fizzlinkDownloadDetails = (FizzlinkDownloadDetails) this.mCallback;
                            Log.d(TAG, "cursor:" + cursor.getCount());
                            if (cursor.getCount() > 0) {
                                fizzlinkDownloadDetails.onData(CursorParser.parseFizzlinkDetail(cursor));
                                break;
                            }
                            Fizzlink fizzlink = new Fizzlink();
                            fizzlink.setNoData(true);
                            fizzlinkDownloadDetails.onData(fizzlink);
                            break;
                        }
                    } else if (cursor != null) {
                        cursor.close();
                        return;
                    } else {
                        return;
                    }
                    break;
                case HTTP.LF /*10*/:
                    if (this.mCallback != null) {
                        this.mCallback.onSuccess();
                        if (this.mCallback instanceof FetchCategoryCallback) {
                            FetchCategoryCallback fetchCategoryCallback = (FetchCategoryCallback) this.mCallback;
                            Log.d(TAG, "get category data");
                            fetchCategoryCallback.onData(CursorParser.parseCategories(cursor));
                            break;
                        }
                    } else if (cursor != null) {
                        cursor.close();
                        return;
                    } else {
                        return;
                    }
                    break;
                case PinManagerV2.REGCODE_HASOLDACC /*11*/:
                    if (this.mCallback != null) {
                        this.mCallback.onSuccess();
                        break;
                    }
                    return;
                case PinManagerV2.REGCODE_MAX /*12*/:
                    if (this.mCallback != null) {
                        this.mCallback.onSuccess();
                        if (this.mCallback instanceof FetchUserCategoriesCallback) {
                            FetchUserCategoriesCallback fetchUserCategoriesCallback = (FetchUserCategoriesCallback) this.mCallback;
                            Log.d(TAG, "get category data");
                            fetchUserCategoriesCallback.onData(CursorParser.parseCategories(cursor));
                            break;
                        }
                    }
                    return;
                    break;
                case HTTP.CR /*13*/:
                    if (this.mCallback != null) {
                        Log.d(TAG, "GET_DISCUSS_MESSAGE_CONVERSATION_COUNT:" + i);
                        this.mCallback.onSuccess();
                        if (this.mCallback instanceof GroupMessageCountCallback) {
                            ((GroupMessageCountCallback) this.mCallback).onData(i);
                            break;
                        }
                    }
                    return;
                    break;
                case R.styleable.Toolbar_titleMarginEnd /*14*/:
                    if (this.mCallback != null) {
                        List<User> parseUsersNoMedia = CursorParser.parseUsersNoMedia(cursor);
                        for (User user : parseUsersNoMedia) {
                            if (Catfiz.matchFriendData(user.getId()) != null) {
                                user.setIsFriend(true);
                            }
                        }
                        this.mCallback.onSuccess();
                        if (this.mCallback instanceof UserFetchGroupMembersCallback) {
                            ((UserFetchGroupMembersCallback) this.mCallback).onData(parseUsersNoMedia);
                            break;
                        }
                    }
                    return;
                    break;
            }
            if (cursor != null) {
                cursor.close();
            }
        } else if (cursor != null) {
            cursor.close();
        }
    }

    public void onDatabaseResponse(String str, Object obj, int i) {
        Log.d(TAG, " ---ClientInterface: DatabaseResponse(Object):" + str + "---");
        if (this.mCallback != null) {
            Object obj2 = -1;
            switch (str.hashCode()) {
                case -2072757012:
                    if (str.equals(CatfishService.GET_CONVERSATION_COUNT_KEY)) {
                        obj2 = 3;
                        break;
                    }
                    break;
                case -1899631108:
                    if (str.equals(CatfishService.GET_CONVERSATION_KEY)) {
                        obj2 = 1;
                        break;
                    }
                    break;
                case -987452446:
                    if (str.equals(CatfishService.GET_USER_LIKE_LIST_CONVKEY)) {
                        obj2 = 7;
                        break;
                    }
                    break;
                case -678220942:
                    if (str.equals(CatfishService.GET_NIC_PROFILE_CACHE)) {
                        obj2 = 13;
                        break;
                    }
                    break;
                case -379569107:
                    if (str.equals(CatfishService.DELETE_ALL_RECENTUPDATES_KEY)) {
                        obj2 = 5;
                        break;
                    }
                    break;
                case -360358945:
                    if (str.equals(CatfishService.GET_CONVERSATION_MEMBER_KEY)) {
                        obj2 = 12;
                        break;
                    }
                    break;
                case 121230082:
                    if (str.equals(CatfishService.GET_DISCUSS_MESSAGE_CONVERSATION_KEY)) {
                        obj2 = 9;
                        break;
                    }
                    break;
                case 215074201:
                    if (str.equals(CatfishService.GET_NIC_PROFILE)) {
                        obj2 = 11;
                        break;
                    }
                    break;
                case 811472933:
                    if (str.equals(CatfishService.GET_USER_PROFILE)) {
                        obj2 = null;
                        break;
                    }
                    break;
                case 837039713:
                    if (str.equals(CatfishService.GET_POOL_LIKE_LIST_KEY)) {
                        obj2 = 8;
                        break;
                    }
                    break;
                case 1458021843:
                    if (str.equals(CatfishService.GET_DISCUSS_MESSAGE_CONVERSATION_KEY_WITH_LIMIT)) {
                        obj2 = 10;
                        break;
                    }
                    break;
                case 1631395660:
                    if (str.equals(CatfishService.GET_ALL_FRIENDLIST_KEY)) {
                        obj2 = 6;
                        break;
                    }
                    break;
                case 1804850194:
                    if (str.equals(CatfishService.GET_CONVERSATION_WITH_LIMIT_KEY)) {
                        obj2 = 2;
                        break;
                    }
                    break;
                case 2087583576:
                    if (str.equals(CatfishService.GET_ALL_RECENTUPDATES_KEY)) {
                        obj2 = 4;
                        break;
                    }
                    break;
            }
            User user;
            List list;
            switch (obj2) {
                case e.a /*0*/:
                    user = (User) obj;
                    this.mCallback.onSuccess();
                    if (this.mCallback instanceof UserFetchProfileCallback) {
                        Log.d(TAG, "Get User Profile-Callback UserFetchProfileCallback");
                        ((UserFetchProfileCallback) this.mCallback).onData(user);
                        return;
                    }
                    return;
                case e.b /*1*/:
                    list = (List) obj;
                    this.mCallback.onSuccess();
                    if (this.mCallback instanceof PrivateFetchMessagesCallback) {
                        ((PrivateFetchMessagesCallback) this.mCallback).onData(list);
                        return;
                    }
                    return;
                case e.c /*2*/:
                    list = (List) obj;
                    Collections.reverse(list);
                    this.mCallback.onSuccess();
                    if (this.mCallback instanceof PrivateFetchMessagesCallback) {
                        ((PrivateFetchMessagesCallback) this.mCallback).onData(list);
                        return;
                    }
                    return;
                case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                    int intValue = ((Integer) obj).intValue();
                    this.mCallback.onSuccess();
                    if (this.mCallback instanceof PrivateFetchMessagesCountCallback) {
                        ((PrivateFetchMessagesCountCallback) this.mCallback).onData(intValue);
                        return;
                    }
                    return;
                case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                    list = (List) obj;
                    if (list == null) {
                        this.mCallback.onError();
                        return;
                    }
                    this.mCallback.onSuccess();
                    if (this.mCallback instanceof UpdatesFetchRecentNews) {
                        ((UpdatesFetchRecentNews) this.mCallback).onData(list);
                        return;
                    }
                    return;
                case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                    if (((List) obj) == null) {
                        this.mCallback.onError();
                        return;
                    } else {
                        this.mCallback.onSuccess();
                        return;
                    }
                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                    list = (List) obj;
                    if (list == null) {
                        this.mCallback.onError();
                        return;
                    }
                    this.mCallback.onSuccess();
                    if (this.mCallback instanceof UserFetchFriendsCallback) {
                        ((UserFetchFriendsCallback) this.mCallback).onData(list);
                        return;
                    } else if (this.mCallback instanceof PrivateFetchActiveFriendsCallback) {
                        ((PrivateFetchActiveFriendsCallback) this.mCallback).onData(list);
                        return;
                    } else if (this.mCallback instanceof UserFetchOfficalsCallback) {
                        ((UserFetchOfficalsCallback) this.mCallback).onData(list);
                        return;
                    } else {
                        return;
                    }
                case SimpleLog.LOG_LEVEL_OFF /*7*/:
                    list = (List) obj;
                    this.mCallback.onSuccess();
                    if (this.mCallback instanceof UserFetchStatusLike) {
                        UserFetchStatusLike userFetchStatusLike = (UserFetchStatusLike) this.mCallback;
                        Log.d(TAG, "get who like data");
                        userFetchStatusLike.onData(list);
                        return;
                    }
                    return;
                case Utils.FILE_TYPE_INSTALLER /*8*/:
                    list = (List) obj;
                    this.mCallback.onSuccess();
                    if (this.mCallback instanceof FetchGroupMessageLikesCallback) {
                        ((FetchGroupMessageLikesCallback) this.mCallback).onData(list);
                        return;
                    }
                    return;
                case HTTP.HT /*9*/:
                    Log.d(TAG, "GET_DISCUSS_MESSAGE_CONVERSATION_KEY");
                    list = (List) obj;
                    this.mCallback.onSuccess();
                    if (this.mCallback instanceof FetchGroupMessagesCallback) {
                        ((FetchGroupMessagesCallback) this.mCallback).onData(list);
                    }
                    Log.d(TAG, "GET_DISCUSS_MESSAGE_CONVERSATION_KEY: on signal prepare");
                    if (this.mCatfizInterface != null) {
                        Log.d(TAG, "GET_DISCUSS_MESSAGE_CONVERSATION_KEY: on signal");
                        this.mCatfizInterface.onSignalEvent(Signal.GROUP_MESSAGE);
                        return;
                    }
                    return;
                case HTTP.LF /*10*/:
                    list = (List) obj;
                    Collections.reverse(list);
                    this.mCallback.onSuccess();
                    if (this.mCallback instanceof FetchGroupMessagesWithLimitCallback) {
                        ((FetchGroupMessagesWithLimitCallback) this.mCallback).onData(list);
                    }
                    Log.d(TAG, "on signal prepare");
                    if (this.mCatfizInterface != null) {
                        Log.d(TAG, "on signal");
                        this.mCatfizInterface.onSignalEvent(Signal.GROUP_MESSAGE_WITH_LIMIT);
                        return;
                    }
                    return;
                case PinManagerV2.REGCODE_HASOLDACC /*11*/:
                    user = (User) obj;
                    this.mCallback.onSuccess();
                    if (this.mCallback instanceof NicProfileCallback) {
                        ((NicProfileCallback) this.mCallback).onDataFriend(user);
                        return;
                    }
                    return;
                case PinManagerV2.REGCODE_MAX /*12*/:
                    list = (List) obj;
                    this.mCallback.onSuccess();
                    if (this.mCallback instanceof UserFetchGroupMembersCallback) {
                        ((UserFetchGroupMembersCallback) this.mCallback).onData(list);
                        return;
                    }
                    return;
                case HTTP.CR /*13*/:
                    user = (User) obj;
                    this.mCallback.onSuccess();
                    if (this.mCallback instanceof NicProfileCallback) {
                        ((NicProfileCallback) this.mCallback).onDataNotFriendCache(user);
                        return;
                    }
                    return;
                default:
                    return;
            }
        }
    }

    public void onDatabaseResponseDouble(String str, Cursor cursor, Cursor cursor2, int i, int i2) {
        Log.d(TAG, " ---ClientInterface: onDatabaseResponseDouble(Cursor):" + str + "--- ");
        if (this.mCatfiz == null || this.mCatfiz.isFinish()) {
            if (cursor != null) {
                cursor.close();
            }
            if (cursor2 != null) {
                cursor2.close();
                return;
            }
            return;
        }
        Object obj = -1;
        switch (str.hashCode()) {
            case -503310567:
                if (str.equals(CatfishService.GET_ALL_NOTIFICATION_KEY)) {
                    obj = 1;
                    break;
                }
                break;
            case 386521744:
                if (str.equals(CatfishService.GET_CHILD_GROUP_CONTACT_LIST)) {
                    obj = null;
                    break;
                }
                break;
        }
        List<User> parseUsersCategory;
        switch (obj) {
            case e.a /*0*/:
                if (this.mCallback == null) {
                    if (cursor != null) {
                        cursor.close();
                    }
                    if (cursor2 != null) {
                        cursor2.close();
                        return;
                    }
                    return;
                }
                this.mCallback.onSuccess();
                if (this.mCallback instanceof FetchUserCategoryCallback) {
                    FetchUserCategoryCallback fetchUserCategoryCallback = (FetchUserCategoryCallback) this.mCallback;
                    Log.d(TAG, "get category friends data count = " + cursor.getCount());
                    parseUsersCategory = CursorParser.parseUsersCategory(cursor2);
                    List<User> parseUsersNoMedia = CursorParser.parseUsersNoMedia(cursor);
                    List arrayList = new ArrayList();
                    for (User user : parseUsersCategory) {
                        for (User id : parseUsersNoMedia) {
                            if (id.getId().compareTo(user.getId()) == 0) {
                                arrayList.add(user);
                                Log.d(TAG, "name:" + user.getName());
                            }
                        }
                    }
                    fetchUserCategoryCallback.onData(arrayList);
                    return;
                }
                return;
            case e.b /*1*/:
                if (this.mCallback == null) {
                    if (cursor != null) {
                        cursor.close();
                    }
                    if (cursor2 != null) {
                        cursor2.close();
                        return;
                    }
                    return;
                }
                this.mCallback.onSuccess();
                if (this.mCallback instanceof FetchNotificationCallback) {
                    FetchNotificationCallback fetchNotificationCallback = (FetchNotificationCallback) this.mCallback;
                    parseUsersCategory = CursorParser.parseUsersReceiveReq(cursor2);
                    List<Group> parseGroups = CursorParser.parseGroups(cursor);
                    Log.d(TAG, "friendscount:" + parseUsersCategory.size() + " groupcount:" + parseGroups.size());
                    List arrayList2 = new ArrayList();
                    for (User user2 : parseUsersCategory) {
                        Notification notification = new Notification(user2.getId(), user2.getName(), FriendsType.FRIEND);
                        Map hashMap = new HashMap();
                        hashMap.put(FriendListDataStorage.STATUS, user2.getStatus());
                        notification.setParams(hashMap);
                        arrayList2.add(notification);
                    }
                    for (Group group : parseGroups) {
                        Notification notification2 = new Notification(group.getGroupID(), group.getName(), FriendsType.GROUP);
                        Map hashMap2 = new HashMap();
                        hashMap2.put(Constant.INVITOR, group.getInvitor());
                        notification2.setParams(hashMap2);
                        arrayList2.add(notification2);
                    }
                    fetchNotificationCallback.onData(arrayList2);
                    return;
                }
                return;
            default:
                return;
        }
    }

    public void onDeletedByFriend(String str) {
        Log.d(TAG, " ---ClientInterface: onDeletedByFriend --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onDeliveryStatusUpdate(int i) {
        Log.d(TAG, " ---ClientInterface: onDeliveryStatusUpdate --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCatfizInterface != null && (this.mCatfizInterface instanceof ICatfizNewMessage)) {
            ((ICatfizNewMessage) this.mCatfizInterface).onSignalEventNewMessage(Signal.CHAT_DELIVERY_UPDATE, new User(""), 0, "");
        }
    }

    public void onDeviceIdNPinRegistered(boolean z) {
        Log.d(TAG, " ---ClientInterface: onDeviceIdNPinRegistered --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCatfizInterface != null) {
            if (CatfishService.getRegistrationState() == RegistrationState.NEW_REGISTER) {
                this.mCatfizInterface.onSignalEvent(Signal.ACCOUNT_REGISTERED);
            }
            if (CatfishService.getRegistrationState() == RegistrationState.RESTORE_REGISTER && this.mCatfiz.getRegistrationState() == Constant.RegistrationState.COMPLETE) {
                this.mCatfizInterface.onSignalEvent(Signal.ACCOUNT_RESTORED);
            }
        }
    }

    public void onEmailRegCheck(int i, String str, int i2) {
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCallback != null) {
            switch (AnonymousClass1.$SwitchMap$com$catfiz$base$Constant$RegistrationResult[RegistrationResult.values()[i].ordinal()]) {
                case e.b /*1*/:
                    CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
                    catfishPreferences.edit().putBoolean("email_register", true).commit();
                    if (i2 == 1) {
                        catfishPreferences.edit().putBoolean("email_activation", true).commit();
                    }
                    this.mCallback.onSuccess();
                    return;
                default:
                    this.mCallback.onError();
                    return;
            }
        }
    }

    public void onEmailRegistered(int i, String str) {
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCallback != null) {
            if (this.mCallback instanceof RegistrationCallback) {
                RegistrationResult registrationResult = RegistrationResult.values()[i];
                switch (AnonymousClass1.$SwitchMap$com$catfiz$base$Constant$RegistrationResult[registrationResult.ordinal()]) {
                    case e.b /*1*/:
                        CatfishService.getCatfishPreferences().edit().putBoolean("email_register", true).commit();
                        this.mCallback.onSuccess();
                        return;
                    case e.c /*2*/:
                        CatfishService.getCatfishPreferences().edit().putBoolean("email_register", true).commit();
                        ((RegistrationCallback) this.mCallback).onAlreadyRegistered();
                        return;
                    default:
                        Log.e(TAG, "REGISTRATION ERROR: Server send code: " + registrationResult.toString());
                        this.mCallback.onError();
                        return;
                }
            }
            Log.e(TAG, "REGISTRATION ERROR: Expect RegistrationCallback class");
            this.mCallback.onError();
        }
    }

    public void onError() {
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCallback != null) {
            this.mCallback.onError();
        }
    }

    public void onFifUserVerified(String str, int i, int i2) {
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onFizzlinkThumbReady(String str, String str2) {
        Log.d(TAG, " ---ClientInterface: onFizzlinkThumbReady --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onFriendIsTyping(String str, boolean z) {
        Log.d(TAG, " ---ClientInterface: onFriendIsTyping --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCatfizInterface != null && (this.mCatfizInterface instanceof ICatfizNewMessage)) {
            User user = new User(str);
            user.setIsTyping(z);
            ((ICatfizNewMessage) this.mCatfizInterface).onSignalEventNewMessage(Signal.CHAT_TYPING, user, 0, "");
        }
    }

    public void onFriendProfileUpdate(String str, String str2, String str3, long j, boolean z) {
        Log.d(TAG, " ---ClientInterface: onFriendProfileUpdate:" + str + "," + str2 + "," + str3 + ", " + j + "--- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCatfizInterface != null && (this.mCatfizInterface instanceof ICatfizNewMessage)) {
            User user = new User(str);
            if (str2 != null) {
                user.setName(str2);
            }
            if (str3 != null) {
                user.setStatus(str3);
            }
            user.setStatusSequence(j);
            ((ICatfizNewMessage) this.mCatfizInterface).onSignalEventNewMessage(Signal.FRIEND_PROFILE_UPDATE, user, 0, "");
        }
    }

    public void onFriendUpdateStatus() {
        Log.d(TAG, " ---ClientInterface: onFriendUpdateStatus --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onGetFriendAlias(String str, String str2) {
        Log.d(TAG, " ---ClientInterface: onGetFriendAlias --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onGetSlinkInfoResult(String str, String str2, int i, String[] strArr) {
        Log.d(TAG, " ---ClientInterface: onGetSlinkInfoResult --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCallback != null) {
            if (str == null && str2 == null && i == 0 && strArr == null) {
                this.mCallback.onError();
                return;
            }
            this.mCallback.onSuccess();
            if (this.mCallback instanceof FizzlinkInfo) {
                ((FizzlinkInfo) this.mCallback).onData(str, str2, i, strArr);
            }
        }
    }

    public void onGetThemeList(String[][] strArr) {
        Log.d(TAG, " ---ClientInterface: onGetThemeList --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onGetUserProfileResult(boolean z, String str, String str2, String str3) {
        Log.d(TAG, " ---ClientInterface: onGetUserProfileResult --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public boolean onHasCommentOnStatus() {
        Log.d(TAG, " ---ClientInterface: onHasCommentOnStatus --- ");
        if (this.mCatfiz == null || this.mCatfiz.isFinish()) {
            Log.d(TAG, " ---ClientInterface: onHasCommentOnStatus mCatfiz null or mCatfiz finish --- ");
            return false;
        } else if (this.mCatfizInterface == null) {
            Log.d(TAG, " ---ClientInterface: onHasCommentOnStatus mCatfizInterface null --- ");
            return false;
        } else {
            this.mCatfizInterface.onSignalEvent(Signal.STATUS_COMMENT_MESSAGE);
            return true;
        }
    }

    public void onHasFriendUserActivityUpdate() {
        Log.d(TAG, " ---ClientInterface: onHasFriendUserActivityUpdate --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public boolean onHasGroupDelete(String str) {
        Log.d(TAG, " ---ClientInterface: onHasGroupDelete:" + str + "--- ");
        if (this.mCatfiz == null || this.mCatfiz.isFinish() || this.mCatfizInterface == null) {
            return false;
        }
        if (this.mCatfizInterface instanceof ICatfizGroupDelete) {
            Group group = new Group();
            group.setGroupID(str);
            ((ICatfizGroupDelete) this.mCatfizInterface).onSignalEventGroupDelete(Signal.GROUP_DELETED, group);
        }
        return true;
    }

    public void onHasLastTimeStamp(Cursor cursor) {
        Log.d(TAG, " ---ClientInterface: onHasLastTimeStamp --- ");
        if ((this.mCatfiz == null || this.mCatfiz.isFinish()) && cursor != null) {
            cursor.close();
        }
    }

    public void onHasNewFriend() {
        Log.d(TAG, " ---ClientInterface: onHasNewFriend --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public boolean onHasNewMessage(String str, int i, String str2) {
        Log.d(TAG, " ---ClientInterface: onHasNewMessage: " + str + " " + i + " " + str2 + "--- ");
        if (this.mCatfiz == null || this.mCatfiz.isFinish() || this.mCatfizInterface == null) {
            return false;
        }
        if (this.mCatfizInterface instanceof ICatfizNewMessage) {
            ((ICatfizNewMessage) this.mCatfizInterface).onSignalEventNewMessage(Signal.CHAT_MESSAGE, new User(str), i, str2);
        }
        return true;
    }

    public boolean onHasNewNicMessage(int i, String str) {
        Log.d(TAG, " ---ClientInterface: onHasNewMessage:" + i + " " + str + "--- ");
        if (this.mCatfiz == null || this.mCatfiz.isFinish() || this.mCatfizInterface == null) {
            return false;
        }
        if (this.mCatfizInterface instanceof ICatfizNewMessage) {
            ((ICatfizNewMessage) this.mCatfizInterface).onSignalEventNewMessage(Signal.CHAT_MESSAGE, new User(str), i, "");
        }
        return true;
    }

    public void onHasNewPoolDiscuss(String str) {
        Log.d(TAG, " ---ClientInterface: onHasNewPoolDiscuss: topic_key ---");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCatfizInterface != null && (this.mCatfizInterface instanceof ICatfizNewMessageGroup)) {
            ((ICatfizNewMessageGroup) this.mCatfizInterface).onSignalEventNewMessageGroup(Signal.GROUP_MESSAGE, str);
        }
    }

    public void onHasObjectMessage(String str) {
        Log.d(TAG, " ---ClientInterface: onHasObjectMessage --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onHasPoolDiscusUpdate() {
        Log.d(TAG, " ---ClientInterface: onHasPoolDiscusUpdate---");
        if (this.mCatfizInterface != null) {
            Log.d(TAG, "on signal");
            this.mCatfizInterface.onSignalEvent(Signal.GROUP_MESSAGE);
        }
    }

    public void onHasProgressUploadDownNUpload(Map map, Map map2) {
        Log.d(TAG, " ---ClientInterface: onHasProgressUploadDownNUpload --- ");
        if (this.mCatfizInterface != null) {
            if (this.mCatfizInterface instanceof ICatfizUpdateProgress) {
                ((ICatfizUpdateProgress) this.mCatfizInterface).onSignalUpdateProgress(Signal.CHAT_PROGRESS_UPDATE, map, map2);
            }
            if (this.mCatfizInterface instanceof ICatfizUploadDownloadProgress) {
                ((ICatfizUploadDownloadProgress) this.mCatfizInterface).onHasProgressUploadDownNUpload(map, map2);
            }
        }
        if (this.mCallback != null) {
            this.mCallback.onSuccess();
            if (this.mCallback instanceof ProgressUploadDownload) {
                ((ProgressUploadDownload) this.mCallback).onHasProgressUploadDownNUpload(map, map2);
            }
        }
    }

    public boolean onHasResponseNetralOnStatus() {
        Log.d(TAG, " ---ClientInterface: onHasResponseNetralOnStatus --- ");
        if (this.mCatfiz == null || this.mCatfiz.isFinish() || this.mCatfizInterface == null) {
            return false;
        }
        this.mCatfizInterface.onSignalEvent(Signal.STATUS_COMMENT_MESSAGE);
        return true;
    }

    public boolean onHasResponseOnStatus() {
        Log.d(TAG, " ---ClientInterface: onHasResponseOnStatus --- ");
        if (this.mCatfiz == null || this.mCatfiz.isFinish() || this.mCatfizInterface == null) {
            return false;
        }
        this.mCatfizInterface.onSignalEvent(Signal.STATUS_COMMENT_RESPONSE);
        return true;
    }

    public boolean onImageFileReceived() {
        Log.d(TAG, " ---ClientInterface: onImageFileReceived --- ");
        return (this.mCatfiz == null || this.mCatfiz.isFinish()) ? false : false;
    }

    public void onIsMute(boolean z) {
        Log.d(TAG, " ---ClientInterface: onIsMute --- ");
        if (this.mCatfiz == null || this.mCatfiz.isFinish()) {
            Log.d(TAG, " ---onIsMute mcatfiz finish or null--- ");
            return;
        }
        this.mCallback.onSuccess();
        if (this.mCallback instanceof IsGroupMute) {
            Log.d(TAG, " ---onIsMute set callback--- ");
            ((IsGroupMute) this.mCallback).onGroupMute(z);
        }
    }

    public void onMainViewFriendProfileUpdate(String str, String str2, String str3, long j, boolean z) {
        Log.d(TAG, " ---ClientInterface: onMainViewFriendProfileUpdate:" + str + "," + str2 + "," + str3 + ", " + j + "--- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCatfizInterface != null && (this.mCatfizInterface instanceof ICatfizNewMessage)) {
            User user = new User(str);
            if (str2 != null) {
                user.setName(str2);
            }
            if (str3 != null) {
                user.setStatus(str3);
            }
            user.setStatusSequence(j);
            ((ICatfizNewMessage) this.mCatfizInterface).onSignalEventNewMessage(Signal.FRIEND_PROFILE_UPDATE_MAINVIEW, user, 0, "");
        }
    }

    public void onMusicFileReceived() {
        Log.d(TAG, " ---ClientInterface: onMusicFileReceived --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onNewFriendAdded() {
        Log.d(TAG, " ---ClientInterface: onNewFriendAdded --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onNewFriendRequest() {
        Log.d(TAG, " ---ClientInterface: onNewFriendRequest --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCatfizInterface != null) {
            this.mCatfizInterface.onSignalEvent(Signal.USER_FRIEND_REQUEST);
        }
    }

    public void onNewGroupInvitation() {
        Log.d(TAG, " ---ClientInterface: onNewGroupInvitation --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCatfizInterface != null) {
            this.mCatfizInterface.onSignalEvent(Signal.GROUP_NEW_INVITATION);
        }
    }

    public void onNicPictureComplete() {
        if (this.mCallback != null) {
            this.mCallback.onSuccess();
            if (this.mCallback instanceof NicProfileCallback) {
                ((NicProfileCallback) this.mCallback).onPictureSuccess();
            }
        }
    }

    public void onNicProfile(CatfishMessageObject catfishMessageObject) {
        if (this.mCallback != null) {
            this.mCallback.onSuccess();
            if (this.mCallback instanceof NicProfileCallback) {
                User user = new User();
                user.setName(catfishMessageObject.username);
                user.setStatus(catfishMessageObject.userstatus);
                ((NicProfileCallback) this.mCallback).onDataNotFriend(user);
            }
        }
    }

    public void onNicProfileNotFound() {
        if (this.mCallback != null) {
            this.mCallback.onSuccess();
            if (this.mCallback instanceof NicProfileCallback) {
                ((NicProfileCallback) this.mCallback).onNicProfileNotfound();
            }
        }
    }

    public void onPhoneRegistered(String str, boolean z) {
        Log.d(TAG, " ---ClientInterface: onPhoneRegistered --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public boolean onPingReceived() {
        Log.d(TAG, " ---ClientInterface: onPingReceived --- ");
        if (this.mCatfiz == null || this.mCatfiz.isFinish()) {
            return false;
        }
        if (this.mCatfizInterface == null) {
            return false;
        }
        if (this.mCatfizInterface instanceof ICatfizNewMessage) {
            ((ICatfizNewMessage) this.mCatfizInterface).onSignalEventNewMessage(Signal.CHAT_BLITZ, new User(""), 0, "");
        }
        return true;
    }

    public void onPingServerResponse(boolean z) {
        Log.d(TAG, " ---ClientInterface: onPingServerResponse --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onPoolTopicDeleted(String str) {
        Log.d(TAG, " ---ClientInterface: onPoolTopicDeleted --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
            if (this.mCatfizInterface != null) {
                this.mCatfizInterface.onSignalEvent(Signal.GROUP_TOPIC_DELETED);
            }
            ((OnGroupDeleted) this.mCallback).onSuccess();
        }
    }

    public void onRegisterDeviceId() {
        Log.d(TAG, " ---ClientInterface: onRegisterDeviceId --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onRepoDownloadList(ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, ArrayList arrayList4) {
        Log.d(TAG, " ---ClientInterface: onRepoDownloadList --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onRepoDownloadPreview(Drawable drawable, int i) {
        Log.d(TAG, " ---ClientInterface: onRepoDownloadPreview --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onRequestFriendSent(boolean z) {
        Log.d(TAG, " ---ClientInterface: onRequestFriendSent --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onResendActivation(int i, String str) {
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCallback != null) {
            switch (AnonymousClass1.$SwitchMap$com$catfiz$base$Constant$RegistrationResult[RegistrationResult.values()[i].ordinal()]) {
                case e.b /*1*/:
                    this.mCallback.onSuccess();
                    return;
                default:
                    this.mCallback.onError();
                    return;
            }
        }
    }

    public void onResetPassword(int i, String str) {
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCallback != null) {
            switch (AnonymousClass1.$SwitchMap$com$catfiz$base$Constant$RegistrationResult[RegistrationResult.values()[i].ordinal()]) {
                case e.b /*1*/:
                    this.mCallback.onSuccess();
                    return;
                default:
                    this.mCallback.onError();
                    return;
            }
        }
    }

    public void onResetPasswordActivation(int i, String str) {
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCallback != null) {
            switch (AnonymousClass1.$SwitchMap$com$catfiz$base$Constant$RegistrationResult[RegistrationResult.values()[i].ordinal()]) {
                case e.b /*1*/:
                    this.mCallback.onSuccess();
                    return;
                default:
                    this.mCallback.onError();
                    return;
            }
        }
    }

    public void onResponseError(String str, ServiceERRORCode serviceERRORCode) {
        Log.d(TAG, " ---ClientInterface: onResponseError --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCallback != null) {
            this.mCallback.onError();
        }
    }

    public void onRestoreFromServer(String str) {
        Log.d(TAG, " ---ClientInterface: onRestoreFromServer --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onSetFriendAlias(String str, String str2, int i) {
        Log.d(TAG, " ---ClientInterface: onSetFriendAlias --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
            this.mCallback.onSuccess();
        }
    }

    public void onSignalRegistrationComplete() {
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCatfizInterface != null) {
            ((ICatfizRegistration) this.mCatfizInterface).onSignalRegistrationComplete();
        }
    }

    public void onSignalRegistrationError() {
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCatfizInterface != null) {
            ((ICatfizRegistration) this.mCatfizInterface).onSignalRegistrationError();
        }
    }

    public void onSignalUserNeedToLogin() {
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCatfizInterface != null) {
            ((ICatfizRegistration) this.mCatfizInterface).onSignalUserNeedToLogin();
        }
    }

    public void onSignalUserNeedToUpgrade(String str) {
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCatfizInterface != null) {
            ((ICatfizRegistration) this.mCatfizInterface).onSignalUserNeedToUpgrade(str);
        }
    }

    public void onStatusLikeResult(int i) {
        Log.d(TAG, " ---ClientInterface: onStatusLikeResult --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
            this.mCallback.onSuccess();
            ((OnSendLikeCallback) this.mCallback).onData(i);
        }
    }

    public void onStatusResponse(boolean z) {
        Log.d(TAG, " ---ClientInterface: onStatusResponse --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCallback != null) {
            if (z) {
                CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
                if (!catfishPreferences.getBoolean("profile_complete", false)) {
                    catfishPreferences.edit().putBoolean("profile_complete", true).commit();
                }
                this.mCallback.onSuccess();
                return;
            }
            this.mCallback.onError();
        }
    }

    public void onStreamHasThumbnail(String str, int i) {
        Log.d(TAG, " ---ClientInterface: onStreamHasThumbnail:" + str + " " + i + "--- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCallback != null && (this.mCallback instanceof StreamHasThumbnailCallback)) {
            ((StreamHasThumbnailCallback) this.mCallback).onStreamHasThumbnail(str, i);
        }
    }

    public void onSuccess() {
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCallback != null) {
            this.mCallback.onSuccess();
        }
    }

    public void onSvgDownloadfinish() {
        Log.d(TAG, " ---ClientInterface: onSvgDownloadfinish --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onTopicMemberUpdated(String str) {
        Log.d(TAG, " ---ClientInterface: onTopicMemberUpdated:" + str + "--- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onUpdateNicEmail(int i, String str) {
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onUpdateProgresbar(int i) {
        Log.d(TAG, " ---ClientInterface: onUpdateProgresbar --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onUpdateProgressDownloadNUpload(String str, int i, int i2) {
        Log.d(TAG, " ---ClientInterface: onUpdateProgressDownloadNUpload --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCatfizInterface != null) {
            if (this.mCatfizInterface instanceof ICatfizUpdateProgress) {
                ((ICatfizUpdateProgress) this.mCatfizInterface).onSignalUpdateProgress(Signal.CHAT_PROGRESS_UPDATE, str, i, i2);
            }
            if (this.mCatfizInterface instanceof ICatfizUploadDownloadProgress) {
                ((ICatfizUploadDownloadProgress) this.mCatfizInterface).onUpdateProgressDownloadNUpload(str, i, i2);
            }
        }
    }

    public void onUpdateVersion(String str, String str2) {
        Log.d(TAG, " ---ClientInterface: onUpdateVersion --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onUpdatesIncoming(int i, String str) {
        Log.d(TAG, " ---ClientInterface: onUpdatesIncoming:" + i + " " + str + "--- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCatfizInterface != null) {
            ((ICatfizUpdates) this.mCatfizInterface).onSignalEventNewUpdates(i, str);
        }
    }

    public void onUploadStartSending() {
        Log.d(TAG, " ---ClientInterface: onUploadStartSending --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public void onUserEmailActivated(int i, String str) {
        if (this.mCatfiz != null && !this.mCatfiz.isFinish() && this.mCallback != null) {
            switch (AnonymousClass1.$SwitchMap$com$catfiz$base$Constant$RegistrationResult[RegistrationResult.values()[i].ordinal()]) {
                case e.b /*1*/:
                    CatfishService.getCatfishPreferences().edit().putBoolean("email_activation", true).commit();
                    this.mCallback.onSuccess();
                    return;
                default:
                    this.mCallback.onError();
                    return;
            }
        }
    }

    public boolean onVoiceChatReceived(String str) {
        Log.d(TAG, " ---ClientInterface: onVoiceChatReceived:" + str + "--- ");
        return (this.mCatfiz == null || this.mCatfiz.isFinish()) ? false : false;
    }

    public void setCatfizCallback(Callback callback) {
        this.mCallback = callback;
    }

    public void setCatfizInterface(ICatfiz iCatfiz) {
        this.mCatfizInterface = iCatfiz;
    }

    public void setTagAction(String str) {
    }

    public void starting() {
        Log.d(TAG, " ---ClientInterface: starting --- ");
        if (this.mCatfiz != null && !this.mCatfiz.isFinish()) {
        }
    }

    public Object transfromDBCursor(DatabaseRequestOP databaseRequestOP, Cursor cursor, int i) {
        Log.d(TAG, " ---ClientInterface: transfromDBCursor(Cursor):" + databaseRequestOP + "--- ");
        if (this.mCallback == null) {
            return null;
        }
        List<User> parseUsersNoMedia;
        switch (AnonymousClass1.$SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[databaseRequestOP.ordinal()]) {
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                return CursorParser.parseUserJson(cursor);
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                return CursorParser.parseMessages(cursor);
            case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                List parseUsersNoMedia2 = CursorParser.parseUsersNoMedia(cursor);
                Catfiz.setFriendListHelper(parseUsersNoMedia2);
                return parseUsersNoMedia2;
            case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                return CursorParser.parseUsersNoMedia(cursor);
            case SimpleLog.LOG_LEVEL_OFF /*7*/:
                return CursorParser.parseUsersOfficial(cursor);
            case Utils.FILE_TYPE_INSTALLER /*8*/:
                parseUsersNoMedia = CursorParser.parseUsersNoMedia(cursor);
                for (User user : parseUsersNoMedia) {
                    if (Catfiz.matchFriendData(user.getId()) != null) {
                        user.setIsFriend(true);
                    }
                }
                return parseUsersNoMedia;
            case HTTP.HT /*9*/:
                parseUsersNoMedia = CursorParser.parseStatusLikes(cursor);
                for (User user2 : parseUsersNoMedia) {
                    if (user2.getId().equals(CatfishService.getUserPIN())) {
                        user2.setIsFriend(true);
                    } else if (Catfiz.matchFriendData(user2.getId()) != null) {
                        user2.setIsFriend(true);
                    }
                }
                return parseUsersNoMedia;
            case HTTP.LF /*10*/:
                parseUsersNoMedia = CursorParser.parseUsersLikeConference(cursor);
                for (User user22 : parseUsersNoMedia) {
                    if (user22.getId().equals(CatfishService.getUserPIN())) {
                        user22.setIsFriend(true);
                    } else if (Catfiz.matchFriendData(user22.getId()) != null) {
                        user22.setIsFriend(true);
                    }
                }
                return parseUsersNoMedia;
            case PinManagerV2.REGCODE_HASOLDACC /*11*/:
                return i == 0 ? CursorParser.parseUserNoMedia(cursor) : i == 1 ? CursorParser.parseNicLink(cursor) : null;
            case PinManagerV2.REGCODE_MAX /*12*/:
            case HTTP.CR /*13*/:
            case R.styleable.Toolbar_titleMarginEnd /*14*/:
            case R.styleable.Toolbar_titleMarginTop /*15*/:
            case FizzlinkUtil.S_MP3 /*16*/:
            case LangUtils.HASH_SEED /*17*/:
            case FizzlinkUtil.S_AAC /*18*/:
            case FizzlinkUtil.S_FLAC /*19*/:
                return CursorParser.parseMessages(cursor);
            default:
                return null;
        }
    }

    public Object transfromDBCursor(DatabaseRequestOP databaseRequestOP, Cursor cursor, Cursor cursor2, int i, int i2) {
        Log.d(TAG, " ---ClientInterface: transfromDBCursor(Cursor):" + databaseRequestOP + "---");
        return null;
    }
}
