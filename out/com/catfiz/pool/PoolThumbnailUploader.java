package com.catfiz.pool;

import android.net.Uri;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.CatfishService;
import com.catfiz.service.IDropableRunnable;
import com.catfiz.util.Log;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;

public class PoolThumbnailUploader implements IDropableRunnable, Runnable {
    private static final String TAG = "PoolThumbnailUploader";
    public static final int mChunkMaxSize = 262144;
    private static String mServer = null;
    private static String mUsername = null;
    private static String mUserpin = null;
    private static String topic_key = null;
    public boolean bNeedRead = true;
    private CatfishRESTAPI catfishRestAPI = null;
    private long mAge = System.currentTimeMillis();
    public int mBytestart = 0;
    public byte[] mChunkbuffer = null;
    public int mChunksent = 0;
    public int mChunksize = 0;
    public FileInputStream mChunkstream = null;
    private File mDataFile = null;
    public volatile int mDatasize = 0;
    private String mMessage = null;
    private volatile long mObjSequence = 0;
    private volatile long mSequence = 0;
    private CatfishService mService = null;
    public int scheduleNum = 0;

    class PoolDataUploadChunk implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        public int scheduleNum;

        private PoolDataUploadChunk() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.scheduleNum = 0;
        }

        public void dropRunnable() {
            Log.d(PoolThumbnailUploader.TAG, "UPLOAD DROPPED");
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            if (PoolThumbnailUploader.this.mChunkstream == null) {
                PoolThumbnailUploader.this.mChunkbuffer = null;
                return;
            }
            try {
                if (PoolThumbnailUploader.this.bNeedRead) {
                    PoolThumbnailUploader.this.bNeedRead = false;
                    PoolThumbnailUploader.this.mChunksize = PoolThumbnailUploader.this.mChunkstream.read(PoolThumbnailUploader.this.mChunkbuffer, 0, PoolThumbnailUploader.mChunkMaxSize);
                }
                if (PoolThumbnailUploader.this.mChunksize <= 0) {
                    Log.d(PoolThumbnailUploader.TAG, "----POOLBCAST: SENT COMPLETE");
                    try {
                        PoolThumbnailUploader.this.mChunkstream.close();
                    } catch (IOException e) {
                    }
                    PoolThumbnailUploader.this.mService.postToServiceHandler(new PoolUploadThumbnailNotifyMember(), 2);
                    PoolThumbnailUploader.this.mChunkbuffer = null;
                    return;
                }
                Log.d(PoolThumbnailUploader.TAG, "Get byte range: bs=" + String.valueOf(PoolThumbnailUploader.this.mBytestart) + ", " + "chsize=" + String.valueOf(PoolThumbnailUploader.this.mChunksize) + ", " + "size=" + String.valueOf(PoolThumbnailUploader.this.mDatasize) + ", ");
                CatfishResult uploadDataChunk = this.catfishRestAPI.uploadDataChunk(PoolThumbnailUploader.mServer, PoolThumbnailUploader.mUserpin, PoolThumbnailUploader.this.mObjSequence, PoolThumbnailUploader.this.mDatasize, PoolThumbnailUploader.this.mBytestart, PoolThumbnailUploader.this.mChunksize, PoolThumbnailUploader.this.mChunkbuffer);
                if (uploadDataChunk.hasSuccess()) {
                    if (uploadDataChunk.byteend == 0) {
                        Log.d(PoolThumbnailUploader.TAG, "----Byte End is 0: RESEND");
                        PoolThumbnailUploader.this.bNeedRead = false;
                        PoolThumbnailUploader.this.mService.postToServiceHandler(this, 2);
                        return;
                    } else if (PoolThumbnailUploader.this.mChunksize != (uploadDataChunk.byteend - PoolThumbnailUploader.this.mBytestart) + 1) {
                        Log.d(PoolThumbnailUploader.TAG, "----TODO: HANDLE THIS BUFFERING PROBLEM: SERVER ACCEPT LESS THAN WE WANT TO.: DROP");
                        PoolThumbnailUploader.this.mChunkbuffer = null;
                        try {
                            PoolThumbnailUploader.this.mChunkstream.close();
                        } catch (IOException e2) {
                        }
                        uploadDataChunk.cleaningup();
                        return;
                    } else {
                        PoolThumbnailUploader poolThumbnailUploader = PoolThumbnailUploader.this;
                        poolThumbnailUploader.mChunksent += (uploadDataChunk.byteend - PoolThumbnailUploader.this.mBytestart) + 1;
                        PoolThumbnailUploader.this.mBytestart = uploadDataChunk.byteend + 1;
                        PoolThumbnailUploader.this.bNeedRead = true;
                        PoolThumbnailUploader.this.mService.postToServiceHandler(this, 2);
                    }
                } else if (uploadDataChunk.hasFailure()) {
                    Log.d(PoolThumbnailUploader.TAG, "----POOLBCAST: FAILURE !!!: Re Schedule");
                    PoolThumbnailUploader.this.bNeedRead = false;
                    PoolThumbnailUploader.mServer = CatfishService.getServerHost();
                    PoolThumbnailUploader.this.mService.scheduleRunnableToService(this, 2);
                } else {
                    Log.e(PoolThumbnailUploader.TAG, "----POOLBCAST: ERROR: DROP");
                    PoolThumbnailUploader.this.mChunkbuffer = null;
                    try {
                        PoolThumbnailUploader.this.mChunkstream.close();
                    } catch (IOException e3) {
                    }
                }
                uploadDataChunk.cleaningup();
            } catch (IOException e4) {
                PoolThumbnailUploader.this.mChunkbuffer = null;
            }
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    class PoolUploadThumbnailNotifyMember implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        public int scheduleNum;

        private PoolUploadThumbnailNotifyMember() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.scheduleNum = 0;
        }

        public void dropRunnable() {
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            Log.d(PoolThumbnailUploader.TAG, "MOBJSEQUENCE = " + PoolThumbnailUploader.this.mObjSequence + ", MSEQUENCE = " + PoolThumbnailUploader.this.mSequence);
            CatfishResult conferenceSendData = this.catfishRestAPI.conferenceSendData(PoolThumbnailUploader.mServer, PoolThumbnailUploader.mUserpin, PoolThumbnailUploader.mUsername, PoolThumbnailUploader.topic_key.split(":")[0], Long.parseLong(PoolThumbnailUploader.topic_key.split(":")[1]), MessageType.POOL_THUMBNAIL_DATA.ordinal(), PoolThumbnailUploader.this.mMessage, PoolThumbnailUploader.this.mSequence, PoolThumbnailUploader.this.mObjSequence);
            if (!conferenceSendData.hasSuccess()) {
                if (conferenceSendData.hasFailure()) {
                    PoolThumbnailUploader.mServer = CatfishService.getServerHost();
                    PoolThumbnailUploader.this.mService.scheduleRunnableToService(this, 2);
                    return;
                }
                Log.e(PoolThumbnailUploader.TAG, "Error Sending Data: DROP");
            }
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    public PoolThumbnailUploader(CatfishService catfishService, String str, String str2, String str3, String str4, Uri uri, long j) {
        this.mService = catfishService;
        mServer = str;
        mUserpin = str2;
        mUsername = str3;
        topic_key = str4;
        this.mObjSequence = j - 1;
        this.mSequence = this.mObjSequence;
        this.mMessage = String.valueOf(j);
        try {
            this.mDataFile = new File(new URI(uri.toString()));
        } catch (URISyntaxException e) {
            e.printStackTrace();
        }
        this.mDatasize = Long.valueOf(this.mDataFile.length()).intValue();
        try {
            this.mChunkstream = new FileInputStream(this.mDataFile);
            this.mChunkbuffer = new byte[mChunkMaxSize];
        } catch (FileNotFoundException e2) {
            Log.e(TAG, "----POOLBCAST FAIL TO ACCESS DATA FILE: " + e2.toString());
            this.mChunkstream = null;
        }
    }

    public void dropRunnable() {
    }

    public long getAge() {
        return this.mAge;
    }

    public int getScheduleNum() {
        return this.scheduleNum;
    }

    public void incraseScheduleNum() {
        this.scheduleNum++;
    }

    public void run() {
        this.mService.postToServiceHandler(new PoolDataUploadChunk(), 2);
    }

    public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        this.catfishRestAPI = catfishRESTAPI;
    }
}
