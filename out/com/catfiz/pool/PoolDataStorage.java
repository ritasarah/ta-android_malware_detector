package com.catfiz.pool;

import android.content.ContentValues;
import android.content.Context;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.preference.PreferenceManager;
import com.catfiz.media.StorageDir;
import com.catfiz.service.CatfishMessageObject;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.CatfishService;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.io.File;
import java.util.ArrayList;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.json.JSONException;
import org.json.JSONObject;

public class PoolDataStorage {
    public static final String AREULIKE = "areulike";
    public static final String ATTACHMENT_FILE_SIZE = "attachmentfilesize";
    public static final String ATTACHMENT_HEIGHT = "attachmentheight";
    public static final String ATTACHMENT_WIDTH = "attachmentwidth";
    public static final String DATAFILEPATH = "datafilepath";
    public static final String DATATYPE = "datatype";
    public static final String DELETED_POOL = "deletedpool";
    public static final String DELIVERYSTATUS = "deliverystatus";
    public static final String DISCUSSCOUNT = "discusscount";
    public static final String DISCUSS_TABLE_NAME = "discuss_list";
    public static final String FIZZLINK_DATA_SIZE = "fizzlinkdatasize";
    public static final String FIZZLINK_DATA_TYPE = "fizzlinkdatatype";
    public static final String FIZZLINK_DESC = "fizzlinkdesc";
    public static final String FIZZLINK_DOWNLOADED = "fizzlinkdownloaded";
    public static final String FIZZLINK_FILE_NAME = "fizzlinkfilename";
    public static final String FIZZLINK_FILE_PATH = "fizzlinkfilepath";
    public static final String FIZZLINK_SENDER_NAME = "fizzlinksendername";
    public static final String FIZZLINK_SENDER_PIN = "fizzlinksenderpin";
    public static final String FRIENDALIAS = "friendalias";
    public static final String FRIENDLIST_TABLE_NAME = "friend_list";
    public static final String FRIENDNAME = "friendname";
    public static final String FRIENDPIN = "friendpin";
    public static final String HAVEUNREADITEM = "hvunreaditem";
    public static final String IMAGEPATH = "imagepath";
    public static final String IMAGETHUMB_URI = "imagethumburi";
    public static final String INVITORNAME = "invitorname";
    public static final String INVITORPIN = "invitorpin";
    public static final String LASTACTIVITY = "lastactivity";
    public static final String LASTDELIVERYSTATUS = "lastdeliverystatus";
    public static final String LASTMESSAGE = "lastmessage";
    public static final String LASTMESSAGESENDERNAME = "lastmessagesendername";
    public static final String LASTMESSAGESENDERPIN = "lastmessagesenderpin";
    public static final String LASTMESSAGETIMESTAMP = "lastmessagetimestamp";
    public static final String LASTMESSAGETYPE = "lastmessagetype";
    public static final String LASTREADPOSITION = "lastreadposition";
    public static final String LASTREADTIMESTAMP = "lastreadts";
    public static final String LIKECOUNT = "likecount";
    public static final String LIKE_TABLE_NAME = "like_list";
    public static final String MEMBERCOUNT = "memberscount";
    public static final String MESSAGE = "message";
    public static final String MESSAGETYPE = "messagetype";
    public static final String META_INFO_CAPTION = "caption";
    public static final String META_INFO_FILE_NAME = "file_name";
    public static final String META_INFO_FILE_SIZE = "file_size";
    public static final String META_INFO_FLAG_CHECK = "meta_flag_check";
    public static final String MUTE = "mute";
    public static final String OBJCOMMENTCOUNT = "objcommcount";
    public static final String OBJECTOWNERPIN = "objownerpin";
    public static final String OBJECTSEQUENCE = "objectsequence";
    public static final String PHOTOAVAILABLE = "photoavailable";
    public static final String PHOTOFILENAME = "photofilename";
    public static final String QUOTE_MESSAGE = "quotemessage";
    public static final String QUOTE_SENDER_NAME = "quotesendername";
    public static final String QUOTE_SENDER_NIC = "quotesendernic";
    public static final String RDCOUNTER = "rdcounter";
    public static final String SENDERNAME = "sendername";
    public static final String SENDERPIN = "senderpin";
    public static final String SEQUENCE = "sequence";
    public static final String SLINK = "slink";
    public static final String STATUS = "status";
    public static final String STATUSSEQ = "statusseq";
    public static final String STICKERPLAYED = "stickerplayed";
    public static final String STICKERSIZEHEIGHT = "stickersizeheight";
    public static final String STICKERSIZEWIDTH = "stickersizewidth";
    public static final String STREAMTHUMBNAILDOWNLOAD = "streamthumbnail";
    private static final String TAG = "PoolDataStorage";
    public static final String TIMESTAMP = "timestamp";
    public static final String TITLE = "title";
    public static final String TOPICTYPE = "sharetype";
    public static final String TOPIC_KEY = "topic_key";
    public static final String TOPIC_KEY_INDEX_FRIEND = "topic_key_idx_friend";
    public static final String TOPIC_KEY_INDEX_LIKE = "topic_key_idx_like";
    public static final String TOPIC_KEY_INDEX_MESSAGE = "topic_key_idx_message";
    public static final String TOPIC_KEY_SEQUENCE_IDX_LIKE = "topic_key_sq_idx_like";
    public static final String TOPIC_KEY_SEQUENCE_IDX_MESSAGE = "topic_key_sq_idx_message";
    public static final String TOPIC_TABLE_NAME = "topic_list";
    public static final String UNREADMESSAGECOUNT = "unreadmessagecount";
    public static final String USEALIAS = "usealias";
    public static final String VOICEFILEPATH = "voicefilepath";
    private static PoolDatabaseHelper mDBHelper = null;
    private static SQLiteDatabase mPoolDataStorageDB = null;
    private SQLiteDatabase cfpoolLocalDB;
    private Context mContext;

    class PoolDatabaseHelper extends SQLiteOpenHelper {
        private static final String DATABASE_NAME = "catfishpool.db";
        private static final int DATABASE_VERSION = 37;

        public PoolDatabaseHelper(Context context) {
            super(context, DATABASE_NAME, null, DATABASE_VERSION);
            Log.d(PoolDataStorage.TAG, "create database");
        }

        private void buildAndMigrateDiscussTable(SQLiteDatabase sQLiteDatabase) {
            Cursor query = sQLiteDatabase.query(PoolDataStorage.DISCUSS_TABLE_NAME, null, null, null, null, null, null);
            ArrayList arrayList = new ArrayList();
            int count = query.getCount();
            query.moveToFirst();
            int columnIndex = query.getColumnIndex(PoolDataStorage.SENDERPIN);
            int columnIndex2 = query.getColumnIndex(PoolDataStorage.SENDERNAME);
            int columnIndex3 = query.getColumnIndex(PoolDataStorage.TIMESTAMP);
            int columnIndex4 = query.getColumnIndex(PoolDataStorage.TOPIC_KEY);
            int columnIndex5 = query.getColumnIndex(PoolDataStorage.MESSAGE);
            int columnIndex6 = query.getColumnIndex(PoolDataStorage.DELIVERYSTATUS);
            int columnIndex7 = query.getColumnIndex(PoolDataStorage.SEQUENCE);
            int columnIndex8 = query.getColumnIndex(PoolDataStorage.IMAGETHUMB_URI);
            int columnIndex9 = query.getColumnIndex(PoolDataStorage.IMAGEPATH);
            int columnIndex10 = query.getColumnIndex(PoolDataStorage.VOICEFILEPATH);
            int columnIndex11 = query.getColumnIndex(PoolDataStorage.DATAFILEPATH);
            int columnIndex12 = query.getColumnIndex(PoolDataStorage.OBJECTSEQUENCE);
            int columnIndex13 = query.getColumnIndex(PoolDataStorage.OBJECTOWNERPIN);
            int columnIndex14 = query.getColumnIndex(PoolDataStorage.MESSAGETYPE);
            int columnIndex15 = query.getColumnIndex(PoolDataStorage.LIKECOUNT);
            int columnIndex16 = query.getColumnIndex(PoolDataStorage.AREULIKE);
            int columnIndex17 = query.getColumnIndex(PoolDataStorage.SLINK);
            int columnIndex18 = query.getColumnIndex(PoolDataStorage.OBJCOMMENTCOUNT);
            int columnIndex19 = query.getColumnIndex(PoolDataStorage.STICKERPLAYED);
            int columnIndex20 = query.getColumnIndex(PoolDataStorage.STICKERSIZEWIDTH);
            int columnIndex21 = query.getColumnIndex(PoolDataStorage.STICKERSIZEHEIGHT);
            for (int i = 0; i < count; i++) {
                query.moveToPosition(i);
                ContentValues contentValues = new ContentValues();
                if (columnIndex >= 0) {
                    contentValues.put(PoolDataStorage.SENDERPIN, query.getString(columnIndex));
                }
                if (columnIndex2 >= 0) {
                    contentValues.put(PoolDataStorage.SENDERNAME, query.getString(columnIndex2));
                }
                if (columnIndex3 >= 0) {
                    contentValues.put(PoolDataStorage.TIMESTAMP, Long.valueOf(query.getLong(columnIndex3)));
                }
                if (columnIndex4 >= 0) {
                    contentValues.put(PoolDataStorage.TOPIC_KEY, query.getString(columnIndex4));
                }
                if (columnIndex5 >= 0) {
                    contentValues.put(PoolDataStorage.MESSAGE, query.getString(columnIndex5));
                }
                if (columnIndex6 >= 0) {
                    contentValues.put(PoolDataStorage.DELIVERYSTATUS, Integer.valueOf(query.getInt(columnIndex6)));
                }
                if (columnIndex7 >= 0) {
                    contentValues.put(PoolDataStorage.SEQUENCE, Long.valueOf(query.getLong(columnIndex7)));
                }
                if (columnIndex8 >= 0) {
                    contentValues.put(PoolDataStorage.IMAGETHUMB_URI, query.getString(columnIndex8));
                }
                if (columnIndex9 >= 0) {
                    contentValues.put(PoolDataStorage.IMAGEPATH, query.getString(columnIndex9));
                }
                if (columnIndex10 >= 0) {
                    contentValues.put(PoolDataStorage.VOICEFILEPATH, query.getString(columnIndex10));
                }
                if (columnIndex11 >= 0) {
                    contentValues.put(PoolDataStorage.DATAFILEPATH, query.getString(columnIndex11));
                }
                if (columnIndex12 >= 0) {
                    contentValues.put(PoolDataStorage.OBJECTSEQUENCE, Long.valueOf(query.getLong(columnIndex12)));
                }
                if (columnIndex13 >= 0) {
                    contentValues.put(PoolDataStorage.OBJECTOWNERPIN, query.getString(columnIndex13));
                }
                if (columnIndex14 >= 0) {
                    contentValues.put(PoolDataStorage.MESSAGETYPE, Integer.valueOf(query.getInt(columnIndex14)));
                }
                if (columnIndex15 >= 0) {
                    contentValues.put(PoolDataStorage.LIKECOUNT, Integer.valueOf(query.getInt(columnIndex15)));
                }
                if (columnIndex16 >= 0) {
                    contentValues.put(PoolDataStorage.AREULIKE, Integer.valueOf(query.getInt(columnIndex16)));
                }
                if (columnIndex17 >= 0) {
                    contentValues.put(PoolDataStorage.SLINK, Integer.valueOf(query.getInt(columnIndex17)));
                }
                if (columnIndex18 >= 0) {
                    contentValues.put(PoolDataStorage.OBJCOMMENTCOUNT, Integer.valueOf(query.getInt(columnIndex18)));
                }
                if (columnIndex19 >= 0) {
                    contentValues.put(PoolDataStorage.STICKERPLAYED, Integer.valueOf(query.getInt(columnIndex19)));
                }
                if (columnIndex20 >= 0) {
                    contentValues.put(PoolDataStorage.STICKERSIZEWIDTH, Integer.valueOf(query.getInt(columnIndex20)));
                }
                if (columnIndex21 >= 0) {
                    contentValues.put(PoolDataStorage.STICKERSIZEHEIGHT, Integer.valueOf(query.getInt(columnIndex21)));
                }
                arrayList.add(contentValues);
            }
            query.close();
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS topic_key_idx_message");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS topic_key_sq_idx_message");
            sQLiteDatabase.execSQL("DROP TABLE IF EXISTS discuss_list");
            Log.d(PoolDataStorage.TAG, "CREATING NEW TOPIC DB");
            buildDiscussTable(sQLiteDatabase);
            count = arrayList.size();
            for (int i2 = 0; i2 < count; i2++) {
                SQLiteDatabase sQLiteDatabase2 = sQLiteDatabase;
                sQLiteDatabase2.insert(PoolDataStorage.DISCUSS_TABLE_NAME, null, (ContentValues) arrayList.get(i2));
            }
            Log.d(PoolDataStorage.TAG, "Updating Discuss List is Success");
        }

        private void buildAndMigrateTopicTable(SQLiteDatabase sQLiteDatabase) {
            Cursor query = sQLiteDatabase.query(PoolDataStorage.TOPIC_TABLE_NAME, null, null, null, null, null, null);
            ArrayList arrayList = new ArrayList();
            int count = query.getCount();
            query.moveToFirst();
            int columnIndex = query.getColumnIndex(PoolDataStorage.SENDERPIN);
            int columnIndex2 = query.getColumnIndex(PoolDataStorage.HAVEUNREADITEM);
            int columnIndex3 = query.getColumnIndex(PoolDataStorage.SENDERNAME);
            int columnIndex4 = query.getColumnIndex(PoolDataStorage.TIMESTAMP);
            int columnIndex5 = query.getColumnIndex(PoolDataStorage.TOPIC_KEY);
            int columnIndex6 = query.getColumnIndex(PoolDataStorage.TOPICTYPE);
            int columnIndex7 = query.getColumnIndex(PoolDataStorage.MESSAGE);
            int columnIndex8 = query.getColumnIndex(PoolDataStorage.DELIVERYSTATUS);
            int columnIndex9 = query.getColumnIndex(PoolDataStorage.SEQUENCE);
            int columnIndex10 = query.getColumnIndex(PoolDataStorage.IMAGETHUMB_URI);
            int columnIndex11 = query.getColumnIndex(PoolDataStorage.IMAGEPATH);
            int columnIndex12 = query.getColumnIndex(PoolDataStorage.RDCOUNTER);
            int columnIndex13 = query.getColumnIndex(PoolDataStorage.VOICEFILEPATH);
            int columnIndex14 = query.getColumnIndex(PoolDataStorage.DATAFILEPATH);
            int columnIndex15 = query.getColumnIndex(PoolDataStorage.TITLE);
            int columnIndex16 = query.getColumnIndex(PoolDataStorage.DISCUSSCOUNT);
            int columnIndex17 = query.getColumnIndex(PoolDataStorage.MEMBERCOUNT);
            int columnIndex18 = query.getColumnIndex(PoolDataStorage.LASTACTIVITY);
            int columnIndex19 = query.getColumnIndex(PoolDataStorage.INVITORPIN);
            int columnIndex20 = query.getColumnIndex(PoolDataStorage.INVITORNAME);
            int columnIndex21 = query.getColumnIndex(PoolDataStorage.LIKECOUNT);
            int columnIndex22 = query.getColumnIndex(PoolDataStorage.AREULIKE);
            int columnIndex23 = query.getColumnIndex(PoolDataStorage.MUTE);
            int columnIndex24 = query.getColumnIndex(PoolDataStorage.LASTREADTIMESTAMP);
            int columnIndex25 = query.getColumnIndex(PoolDataStorage.LASTREADPOSITION);
            int columnIndex26 = query.getColumnIndex(PoolDataStorage.UNREADMESSAGECOUNT);
            for (int i = 0; i < count; i++) {
                query.moveToPosition(i);
                ContentValues contentValues = new ContentValues();
                if (columnIndex >= 0) {
                    contentValues.put(PoolDataStorage.SENDERPIN, query.getString(columnIndex));
                }
                if (columnIndex2 >= 0) {
                    contentValues.put(PoolDataStorage.HAVEUNREADITEM, Integer.valueOf(query.getInt(columnIndex2)));
                }
                if (columnIndex3 >= 0) {
                    contentValues.put(PoolDataStorage.SENDERNAME, query.getString(columnIndex3));
                }
                if (columnIndex4 >= 0) {
                    contentValues.put(PoolDataStorage.TIMESTAMP, Long.valueOf(query.getLong(columnIndex4)));
                }
                if (columnIndex5 >= 0) {
                    contentValues.put(PoolDataStorage.TOPIC_KEY, query.getString(columnIndex5));
                }
                if (columnIndex6 >= 0) {
                    contentValues.put(PoolDataStorage.TOPICTYPE, Integer.valueOf(query.getInt(columnIndex6)));
                }
                if (columnIndex7 >= 0) {
                    contentValues.put(PoolDataStorage.MESSAGE, query.getString(columnIndex7));
                }
                if (columnIndex8 >= 0) {
                    contentValues.put(PoolDataStorage.DELIVERYSTATUS, Integer.valueOf(query.getInt(columnIndex8)));
                }
                if (columnIndex9 >= 0) {
                    contentValues.put(PoolDataStorage.SEQUENCE, Long.valueOf(query.getLong(columnIndex9)));
                }
                if (columnIndex10 >= 0) {
                    contentValues.put(PoolDataStorage.IMAGETHUMB_URI, query.getString(columnIndex10));
                }
                if (columnIndex11 >= 0) {
                    contentValues.put(PoolDataStorage.IMAGEPATH, query.getString(columnIndex11));
                }
                if (columnIndex12 >= 0) {
                    contentValues.put(PoolDataStorage.RDCOUNTER, Integer.valueOf(query.getInt(columnIndex12)));
                }
                if (columnIndex13 >= 0) {
                    contentValues.put(PoolDataStorage.VOICEFILEPATH, query.getString(columnIndex13));
                }
                if (columnIndex14 >= 0) {
                    contentValues.put(PoolDataStorage.DATAFILEPATH, query.getString(columnIndex14));
                }
                if (columnIndex15 >= 0) {
                    contentValues.put(PoolDataStorage.TITLE, query.getString(columnIndex15));
                }
                if (columnIndex16 >= 0) {
                    contentValues.put(PoolDataStorage.DISCUSSCOUNT, Integer.valueOf(query.getInt(columnIndex16)));
                }
                if (columnIndex17 >= 0) {
                    contentValues.put(PoolDataStorage.MEMBERCOUNT, Integer.valueOf(query.getInt(columnIndex17)));
                }
                if (columnIndex18 >= 0) {
                    contentValues.put(PoolDataStorage.LASTACTIVITY, Long.valueOf(query.getLong(columnIndex18)));
                }
                if (columnIndex19 >= 0) {
                    contentValues.put(PoolDataStorage.INVITORPIN, query.getString(columnIndex19));
                }
                if (columnIndex20 >= 0) {
                    contentValues.put(PoolDataStorage.INVITORNAME, query.getString(columnIndex20));
                }
                if (columnIndex21 >= 0) {
                    contentValues.put(PoolDataStorage.LIKECOUNT, Integer.valueOf(query.getInt(columnIndex21)));
                }
                if (columnIndex22 >= 0) {
                    contentValues.put(PoolDataStorage.AREULIKE, Integer.valueOf(query.getInt(columnIndex22)));
                }
                if (columnIndex23 >= 0) {
                    contentValues.put(PoolDataStorage.MUTE, Integer.valueOf(query.getInt(columnIndex23)));
                }
                if (columnIndex24 >= 0) {
                    contentValues.put(PoolDataStorage.LASTREADTIMESTAMP, Integer.valueOf(query.getInt(columnIndex24)));
                }
                if (columnIndex25 >= 0) {
                    contentValues.put(PoolDataStorage.LASTREADPOSITION, Integer.valueOf(query.getInt(columnIndex25)));
                }
                if (columnIndex26 >= 0) {
                    contentValues.put(PoolDataStorage.UNREADMESSAGECOUNT, Integer.valueOf(query.getInt(columnIndex26)));
                }
                arrayList.add(contentValues);
            }
            query.close();
            Log.d(PoolDataStorage.TAG, "DROPING OLD TOPIC DB");
            sQLiteDatabase.execSQL("DROP TABLE IF EXISTS topic_list");
            Log.d(PoolDataStorage.TAG, "DROPING OLD TOPIC INDEXES");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS topic_key_idx_friend");
            Log.d(PoolDataStorage.TAG, "CREATING NEW TOPIC DB");
            buildTopicTable(sQLiteDatabase);
            count = arrayList.size();
            for (int i2 = 0; i2 < count; i2++) {
                SQLiteDatabase sQLiteDatabase2 = sQLiteDatabase;
                sQLiteDatabase2.insert(PoolDataStorage.TOPIC_TABLE_NAME, null, (ContentValues) arrayList.get(i2));
            }
            Log.d(PoolDataStorage.TAG, "Updating Topic List is Success");
        }

        private void buildDiscussTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS discuss_list(_id INTEGER PRIMARY KEY, senderpin VARCHAR(10), sendername VARCHAR(255), timestamp INTEGER NOT NULL DEFAULT 0, topic_key VARCHAR(21), message TEXT, messagetype INTEGER NOT NULL DEFAULT 0,datatype INTEGER NOT NULL DEFAULT 0,deliverystatus INTEGER NOT NULL DEFAULT 0, sequence INTEGER NOT NULL DEFAULT 0, imagethumburi TEXT, imagepath TEXT, voicefilepath TEXT, datafilepath TEXT, objectsequence INTEGER NOT NULL DEFAULT 0, objownerpin VARCHAR(10),likecount INTEGER NOT NULL DEFAULT 0, areulike INTEGER NOT NULL DEFAULT 0, slink TEXT, stickerplayed INTEGER NOT NULL DEFAULT 0,stickersizewidth INTEGER NOT NULL DEFAULT 0,stickersizeheight INTEGER NOT NULL DEFAULT 0,objcommcount INTEGER NOT NULL DEFAULT 0,streamthumbnail INTEGER NOT NULL DEFAULT 0,fizzlinkdatasize INTEGER NOT NULL DEFAULT 0,fizzlinkfilename TEXT,fizzlinkfilepath TEXT,fizzlinksendername TEXT,fizzlinksenderpin TEXT,fizzlinkdesc TEXT,fizzlinkdownloaded INTEGER NOT NULL DEFAULT 0,fizzlinkdatatype INTEGER NOT NULL DEFAULT 0,quotesendernic VARCHAR(10),quotesendername VARCHAR(255),quotemessage TEXT,attachmentfilesize INTEGER NOT NULL DEFAULT 0,attachmentwidth INTEGER NOT NULL DEFAULT 0,attachmentheight INTEGER NOT NULL DEFAULT 0,UNIQUE (timestamp));");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS topic_key_idx_message ON discuss_list(topic_key);");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS topic_key_sq_idx_message ON discuss_list(topic_key,sequence);");
        }

        private void buildFriendListTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS friend_list(_id INTEGER PRIMARY KEY, friendpin VARCHAR(10), friendname VARCHAR(255), topic_key VARCHAR(21), friendalias VARCHAR(255), usealias INTEGER NOT NULL DEFAULT 0, status TEXT, statusseq INTEGER NOT NULL DEFAULT 0, photoavailable INTEGER NOT NULL DEFAULT 0, lastactivity INTEGER NOT NULL DEFAULT 0, photofilename TEXT);");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS topic_key_idx_friend ON friend_list(topic_key);");
        }

        private void buildLikeListTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS like_list(_id INTEGER PRIMARY KEY, deliverystatus INTEGER NOT NULL DEFAULT 0, objectsequence INTEGER NOT NULL DEFAULT 0, objownerpin VARCHAR(10), senderpin VARCHAR(10), sendername VARCHAR(255), topic_key VARCHAR(21), timestamp INTEGER NOT NULL DEFAULT 0, sequence INTEGER NOT NULL DEFAULT 0, UNIQUE (timestamp));");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS topic_key_idx_like ON like_list(topic_key);");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS topic_key_sq_idx_like ON like_list(topic_key,sequence);");
        }

        private void buildTopicTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS topic_list(_id INTEGER PRIMARY KEY, senderpin VARCHAR(10), hvunreaditem INTEGER NOT NULL DEFAULT 0, sendername VARCHAR(255), timestamp INTEGER NOT NULL DEFAULT 0, topic_key VARCHAR(21), sharetype INTEGER NOT NULL DEFAULT 0, message TEXT, deliverystatus INTEGER NOT NULL DEFAULT 0, sequence INTEGER NOT NULL DEFAULT 0, imagethumburi TEXT, imagepath TEXT, rdcounter INTEGER NOT NULL DEFAULT 0, voicefilepath TEXT, datafilepath TEXT, title TEXT, mute CHAR(1), discusscount INTEGER NOT NULL DEFAULT 0,lastactivity INTEGER NOT NULL DEFAULT 0,memberscount INTEGER NOT NULL DEFAULT 0,invitorpin VARCHAR(10), invitorname VARCHAR(255), likecount INTEGER NOT NULL DEFAULT 0, areulike INTEGER NOT NULL DEFAULT 0, lastreadts INTEGER NOT NULL DEFAULT 0, lastreadposition INTEGER NOT NULL DEFAULT 0, unreadmessagecount INTEGER NOT NULL DEFAULT -1, lastmessage VARCHAR(255),lastdeliverystatus INTEGER NOT NULL DEFAULT 0,lastmessagetype INTEGER NOT NULL DEFAULT 0,lastmessagesendername VARCHAR(255),lastmessagesenderpin VARCHAR(10), lastmessagetimestamp LONG NOT NULL DEFAULT 0,deletedpool INTEGER NOT NULL DEFAULT 0,UNIQUE (topic_key));");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS topic_key_idx_friend ON topic_list(topic_key);");
        }

        public void onCreate(SQLiteDatabase sQLiteDatabase) {
            buildTopicTable(sQLiteDatabase);
            buildLikeListTable(sQLiteDatabase);
            buildFriendListTable(sQLiteDatabase);
            buildDiscussTable(sQLiteDatabase);
            Log.e(PoolDataStorage.TAG, "create database");
        }

        public void onUpgrade(SQLiteDatabase sQLiteDatabase, int i, int i2) {
            Log.d(PoolDataStorage.TAG, "Upgrade Pool DB from version: " + String.valueOf(i) + " to version: " + String.valueOf(i2));
            if (i <= 36) {
                String str = "ALTER TABLE discuss_list ADD COLUMN datatype INTEGER NOT NULL DEFAULT 0;";
                sQLiteDatabase.execSQL("ALTER TABLE discuss_list ADD COLUMN datatype INTEGER NOT NULL DEFAULT 0;");
            }
            if (i <= 29) {
                sQLiteDatabase.execSQL("ALTER TABLE topic_list ADD COLUMN lastmessagesendername VARCHAR(255);");
                sQLiteDatabase.execSQL("ALTER TABLE topic_list ADD COLUMN lastmessagesenderpin VARCHAR(10);");
            }
            if (i <= 26) {
                sQLiteDatabase.execSQL("ALTER TABLE topic_list ADD COLUMN lastmessage VARCHAR(255);");
                sQLiteDatabase.execSQL("ALTER TABLE topic_list ADD COLUMN lastdeliverystatus INTEGER NOT NULL DEFAULT 0;");
                sQLiteDatabase.execSQL("ALTER TABLE topic_list ADD COLUMN lastmessagetype INTEGER NOT NULL DEFAULT 0;");
            }
            if (i <= 27) {
                sQLiteDatabase.execSQL("ALTER TABLE topic_list ADD COLUMN deletedpool INTEGER NOT NULL DEFAULT 0;");
            }
            if (i <= 28) {
                sQLiteDatabase.execSQL("ALTER TABLE topic_list ADD COLUMN lastmessagetimestamp LONG NOT NULL DEFAULT 0;");
            }
            if (i <= 30) {
                sQLiteDatabase.execSQL("ALTER TABLE discuss_list ADD COLUMN streamthumbnail INT NOT NULL DEFAULT 0;");
            }
            if (i <= 31) {
                sQLiteDatabase.execSQL("ALTER TABLE discuss_list ADD COLUMN fizzlinkfilename TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE discuss_list ADD COLUMN fizzlinkdatasize INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE discuss_list ADD COLUMN fizzlinkfilepath TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE discuss_list ADD COLUMN fizzlinksendername TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE discuss_list ADD COLUMN fizzlinkdesc TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE discuss_list ADD COLUMN fizzlinkdatatype INTEGER NOT NULL DEFAULT 0 ;");
            }
            if (i <= 32) {
                sQLiteDatabase.execSQL("ALTER TABLE discuss_list ADD COLUMN fizzlinkdownloaded INTEGER NOT NULL DEFAULT 0 ;");
            }
            if (i <= 33) {
                sQLiteDatabase.execSQL("ALTER TABLE discuss_list ADD COLUMN fizzlinksenderpin TEXT ;");
            }
            if (i <= 34) {
                sQLiteDatabase.execSQL("ALTER TABLE discuss_list ADD COLUMN quotesendernic VARCHAR(10);");
                sQLiteDatabase.execSQL("ALTER TABLE discuss_list ADD COLUMN quotesendername VARCHAR(255);");
                sQLiteDatabase.execSQL("ALTER TABLE discuss_list ADD COLUMN quotemessage TEXT;");
                sQLiteDatabase.execSQL("ALTER TABLE discuss_list ADD COLUMN attachmentfilesize INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE discuss_list ADD COLUMN attachmentwidth INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE discuss_list ADD COLUMN attachmentheight INTEGER NOT NULL DEFAULT 0;");
            }
        }
    }

    public PoolDataStorage(Context context) {
        this.mContext = context;
        if (mDBHelper == null) {
            Log.d(TAG, "Create new DB Helper");
            mDBHelper = new PoolDatabaseHelper(context);
        }
    }

    private long getLastTimeStamp() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return 0;
        }
        Cursor rawQuery = db.rawQuery("SELECT lastmessagetimestamp FROM topic_list", null);
        if (rawQuery.getCount() <= 0) {
            rawQuery.close();
            return 0;
        }
        rawQuery.moveToFirst();
        long j = rawQuery.getLong(rawQuery.getColumnIndex(LASTMESSAGETIMESTAMP));
        rawQuery.close();
        return j;
    }

    public static String messageWithMetaInfoBuilder(String str, File file) {
        try {
            JSONObject jSONObject = new JSONObject();
            jSONObject.put(META_INFO_CAPTION, str);
            jSONObject.put(META_INFO_FILE_NAME, file.getName());
            jSONObject.put(META_INFO_FILE_SIZE, Utils.getFileSize(file.length()));
            jSONObject.put(META_INFO_FLAG_CHECK, true);
            return jSONObject.toString();
        } catch (JSONException e) {
            return "";
        }
    }

    public static CatfishMessageObject poolLastMessageBuilder(Cursor cursor) {
        CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
        int columnIndex = cursor.getColumnIndex(SENDERPIN);
        int columnIndex2 = cursor.getColumnIndex(SENDERNAME);
        int columnIndex3 = cursor.getColumnIndex(TIMESTAMP);
        int columnIndex4 = cursor.getColumnIndex(MESSAGE);
        int columnIndex5 = cursor.getColumnIndex(MESSAGETYPE);
        int columnIndex6 = cursor.getColumnIndex(SEQUENCE);
        int columnIndex7 = cursor.getColumnIndex(DELIVERYSTATUS);
        int columnIndex8 = cursor.getColumnIndex(DATAFILEPATH);
        cursor.moveToFirst();
        catfishMessageObject.senderpin = cursor.getString(columnIndex);
        catfishMessageObject.sendername = cursor.getString(columnIndex2);
        catfishMessageObject.rcvtimestamp = cursor.getLong(columnIndex3);
        catfishMessageObject.sequence = cursor.getLong(columnIndex6);
        catfishMessageObject.message = cursor.getString(columnIndex4);
        catfishMessageObject.deliverystatus = MessageDeliveryStatus.values()[cursor.getInt(columnIndex7)];
        catfishMessageObject.type = cursor.getInt(columnIndex5);
        catfishMessageObject.datafile_path = cursor.getString(columnIndex8);
        return catfishMessageObject;
    }

    public boolean addLike(ArrayList arrayList) {
        SQLiteDatabase db = getDB();
        int size = arrayList.size();
        db.beginTransaction();
        int i = 0;
        while (i < size) {
            try {
                ContentValues contentValues = new ContentValues();
                CatfishMessageObject catfishMessageObject = (CatfishMessageObject) arrayList.get(i);
                contentValues.put(SENDERPIN, catfishMessageObject.senderpin);
                contentValues.put(SENDERNAME, catfishMessageObject.sendername);
                contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
                contentValues.put(TOPIC_KEY, catfishMessageObject.topic_key);
                contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
                contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.sequence));
                if (db.insert(LIKE_TABLE_NAME, null, contentValues) > 0) {
                    Log.d(TAG, "INSERT LIKE WITH LIKE_SEQUENCE=" + catfishMessageObject.sequence);
                } else {
                    Log.d(TAG, "INSERT LIKE WITH LIKE_SEQUENCE=" + catfishMessageObject.sequence + ": FAIL!!!");
                }
                contentValues.clear();
                i++;
            } catch (Throwable th) {
                db.endTransaction();
            }
        }
        db.setTransactionSuccessful();
        db.endTransaction();
        Log.d(TAG, "like STORED");
        return true;
    }

    public boolean addSingleLike(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        String str = catfishMessageObject.topic_key;
        if (isLikeExist(str, catfishMessageObject.sequence)) {
            return false;
        }
        contentValues.put(SENDERPIN, catfishMessageObject.senderpin);
        contentValues.put(SENDERNAME, catfishMessageObject.sendername);
        contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
        contentValues.put(OBJECTOWNERPIN, catfishMessageObject.object_owner);
        contentValues.put(OBJECTSEQUENCE, Long.valueOf(catfishMessageObject.object_sequence));
        contentValues.put(TOPIC_KEY, str);
        contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.sequence));
        long insert = db.insert(LIKE_TABLE_NAME, null, contentValues);
        setLikeCountToDiscuss(str, catfishMessageObject.object_sequence);
        if (insert > 0) {
            Log.d(TAG, "INSERT LIKE WITH LIKE_SEQUENCE=" + catfishMessageObject.sequence);
        } else {
            Log.d(TAG, "INSERT LIKE WITH LIKE_SEQUENCE=" + catfishMessageObject.sequence + ": FAIL!!!");
        }
        contentValues.clear();
        Log.d(TAG, "like STORED");
        return true;
    }

    public boolean clearAllConferenceLikeMessage() {
        return getDB().delete(LIKE_TABLE_NAME, null, null) > 0;
    }

    public boolean clearAllConferenceMessage() {
        int delete = getDB().delete(DISCUSS_TABLE_NAME, null, null);
        clearAllConferenceLikeMessage();
        resetAllUnreadTopic();
        return delete > 0;
    }

    public void deleteMember(CatfishMessageObject catfishMessageObject) {
        getDB().delete(FRIENDLIST_TABLE_NAME, "friendpin='" + catfishMessageObject.senderpin + "' AND " + TOPIC_KEY + "='" + catfishMessageObject.topic_key + "'", null);
        setMemberCountToTopic(catfishMessageObject.topic_key);
    }

    public boolean deleteSingleDiscussConverence(String str, long j) {
        int delete = getDB().delete(DISCUSS_TABLE_NAME, "topic_key='" + str + "' AND " + SEQUENCE + "=" + j, null);
        setDiscussCountToTopic(str);
        return delete > 0;
    }

    public boolean deleteSingleLike(String str, long j, String str2) {
        int delete = getDB().delete(LIKE_TABLE_NAME, "topic_key='" + str + "' AND " + OBJECTSEQUENCE + "=" + j + " AND " + SENDERPIN + "='" + str2 + "'", null);
        setLikeCountToDiscuss(str, j);
        return delete > 0;
    }

    public boolean dropAllDiscussConverence(String str) {
        int delete = getDB().delete(DISCUSS_TABLE_NAME, "topic_key='" + str + "'", null);
        if (isTopicExists(str)) {
            setDiscussCountToTopic(str);
        }
        setLastMessage(str);
        return delete > 0;
    }

    public boolean dropAllLikeDiscussConference(String str) {
        int delete = getDB().delete(LIKE_TABLE_NAME, "topic_key='" + str + "'", null);
        if (isTopicExists(str)) {
            setDiscussCountToTopic(str);
        }
        return delete > 0;
    }

    public boolean dropExpiredDiscussConference() {
        boolean z;
        int i = -1;
        SQLiteDatabase db = getDB();
        Log.d(TAG, "TO DELETE CHAT: out of date");
        SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this.mContext);
        long currentTimeMillis = System.currentTimeMillis();
        long j = 0;
        try {
            i = defaultSharedPreferences.getInt("poolDataOutOfDate", -1);
        } catch (ClassCastException e) {
            defaultSharedPreferences.edit().remove("poolDataOutOfDate").commit();
            Log.e(TAG, "Invalid Type: poolDataOutOfDate. integer expected.: remove");
        }
        switch (i) {
            case e.b /*1*/:
                j = currentTimeMillis - 259200000;
                Log.d(TAG, "TO DELETE CHAT: 3 days");
                z = true;
                break;
            case e.c /*2*/:
                j = currentTimeMillis - 604800000;
                Log.d(TAG, "TO DELETE CHAT: 7 days");
                z = true;
                break;
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                j = currentTimeMillis - 604800000;
                Log.d(TAG, "TO DELETE CHAT: 7 days");
                z = true;
                break;
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                j = currentTimeMillis - 2592000000L;
                Log.d(TAG, "TO DELETE CHAT: 30 days");
                z = true;
                break;
            default:
                z = false;
                Log.d(TAG, "TO DELETE CHAT: nothing");
                break;
        }
        if (z) {
            db.delete(DISCUSS_TABLE_NAME, "timestamp <= " + j, null);
            Log.d(TAG, "DELETE CHAT: timestamp <= " + j + " DELETED , Current timemilis: " + currentTimeMillis);
        }
        return true;
    }

    public boolean dropMemberList(String str) {
        return getDB().delete(FRIENDLIST_TABLE_NAME, new StringBuilder().append("topic_key='").append(str).append("'").toString(), null) > 0;
    }

    public boolean dropTopicConverence(String str) {
        SQLiteDatabase db = getDB();
        int delete = db.delete(TOPIC_TABLE_NAME, "topic_key='" + str + "'", null);
        if (delete > 0) {
            dropAllDiscussConverence(str);
            dropAllLikeDiscussConference(str);
            db.delete(FRIENDLIST_TABLE_NAME, "topic_key='" + str + "'", null);
        }
        return delete > 0;
    }

    public Cursor getAcceptedTopic() {
        return getDB().query(TOPIC_TABLE_NAME, null, "deliverystatus != " + MessageDeliveryStatus.CONFRCPENDING.ordinal(), null, null, null, "lastactivity DESC, timestamp DESC");
    }

    public Cursor getAllDiscuss() {
        return getDB().query(DISCUSS_TABLE_NAME, null, null, null, null, null, TIMESTAMP);
    }

    public Cursor getAllMultimediaDataInPool() {
        return getDB().rawQuery("SELECT * FROM discuss_list WHERE (((datafilepath != '' OR voicefilepath != '') AND deliverystatus != '" + MessageDeliveryStatus.CONFRCPENDINGDOWNLOAD.ordinal() + "') AND " + DELIVERYSTATUS + " != '" + MessageDeliveryStatus.CONFRCDOWNLOADING.ordinal() + "') AND " + DELIVERYSTATUS + " != '" + MessageDeliveryStatus.CONFRCFAILDOWNLOAD.ordinal() + "';", null);
    }

    public Cursor getAllTopic() {
        return getDB().query(TOPIC_TABLE_NAME, null, "deliverystatus != " + MessageDeliveryStatus.CONFRCPENDING.ordinal(), null, null, null, "lastactivity DESC, timestamp DESC");
    }

    public SQLiteDatabase getDB() {
        mPoolDataStorageDB = mDBHelper.getWritableDatabase();
        return mPoolDataStorageDB;
    }

    public Cursor getDataFileInTopic(String str) {
        return getDB().rawQuery("SELECT datafilepath FROM topic_list WHERE topic_key = '" + str + "' AND " + DATAFILEPATH + " != '';", null);
    }

    public Cursor getDiscuss(String str) {
        return getDB().query(DISCUSS_TABLE_NAME, null, "topic_key = '" + str + "' AND " + DELIVERYSTATUS + " != " + MessageDeliveryStatus.BCASTQUEUE.ordinal(), null, null, null, TIMESTAMP);
    }

    public Cursor getDiscuss(String str, String str2) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.query(DISCUSS_TABLE_NAME, null, "topic_key = '" + str + "'", null, null, null, str2);
    }

    public int getDiscussCount(String str) {
        Cursor discuss = getDiscuss(str);
        int count = discuss.getCount();
        discuss.close();
        return count;
    }

    public int getDiscussMsgCount(String str) {
        Cursor query = getDB().query(DISCUSS_TABLE_NAME, null, "topic_key = '" + str + "' AND " + DELIVERYSTATUS + " != " + MessageDeliveryStatus.BCASTQUEUE.ordinal(), null, null, null, TIMESTAMP);
        int count = query.getCount();
        query.close();
        return count;
    }

    public Cursor getDiscussWithLimit(String str, long j, int i) {
        SQLiteDatabase db = getDB();
        String str2 = j != 0 ? " AND timestamp<" + j : "";
        return db.query(DISCUSS_TABLE_NAME, null, "topic_key = '" + str + "' AND " + DELIVERYSTATUS + " != " + MessageDeliveryStatus.BCASTQUEUE.ordinal() + str2, null, null, null, "timestamp DESC", i + "");
    }

    public Cursor getExpiredDiscussConference() {
        int i = -1;
        SQLiteDatabase db = getDB();
        Log.d(TAG, "TO DELETE CHAT: out of date");
        SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this.mContext);
        long currentTimeMillis = System.currentTimeMillis();
        long j = 0;
        Object obj = 1;
        try {
            i = defaultSharedPreferences.getInt("poolDataOutOfDate", -1);
        } catch (ClassCastException e) {
            defaultSharedPreferences.edit().remove("poolDataOutOfDate").commit();
            Log.e(TAG, "Invalid Type: poolDataOutOfDate. integer expected.: remove");
        }
        switch (i) {
            case e.b /*1*/:
                j = currentTimeMillis - 259200000;
                Log.d(TAG, "TO DELETE CHAT: 3 days");
                break;
            case e.c /*2*/:
                j = currentTimeMillis - 604800000;
                Log.d(TAG, "TO DELETE CHAT: 7 days");
                break;
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                j = currentTimeMillis - 604800000;
                Log.d(TAG, "TO DELETE CHAT: 7 days");
                break;
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                j = currentTimeMillis - 2592000000L;
                Log.d(TAG, "TO DELETE CHAT: 30 days");
                break;
            default:
                obj = null;
                Log.d(TAG, "TO DELETE CHAT: nothing");
                break;
        }
        if (obj == null) {
            return null;
        }
        return db.query(DISCUSS_TABLE_NAME, null, "timestamp <= " + j, null, null, null, TIMESTAMP);
    }

    public Cursor getFriendList(String str) {
        return getDB().query(FRIENDLIST_TABLE_NAME, null, "topic_key = '" + str + "' AND " + FRIENDNAME + " != ''", null, null, null, "UPPER(friendname)");
    }

    public Cursor getImageFileInTopic(String str) {
        return getDB().rawQuery("SELECT imagepath FROM topic_list WHERE topic_key = '" + str + "' AND " + IMAGEPATH + " != '';", null);
    }

    public Cursor getImageThumbUriInTopic(String str) {
        return getDB().rawQuery("SELECT imagethumburi FROM topic_list WHERE topic_key = '" + str + "' AND " + IMAGETHUMB_URI + " != '';", null);
    }

    public Cursor getLike(String str, long j) {
        return getDB().query(LIKE_TABLE_NAME, null, "topic_key = '" + str + "' AND " + OBJECTSEQUENCE + " = " + j, null, null, null, "UPPER(sendername)");
    }

    public int getLikeCount(String str, long j) {
        Cursor like = getLike(str, j);
        int count = like.getCount();
        like.close();
        return count;
    }

    public int getMemberCount(String str) {
        Cursor friendList = getFriendList(str);
        int count = friendList.getCount();
        friendList.close();
        return count;
    }

    public Cursor getPendingTopic() {
        return getDB().query(TOPIC_TABLE_NAME, null, "deliverystatus = " + MessageDeliveryStatus.CONFRCPENDING.ordinal(), null, null, null, "lastactivity DESC, timestamp DESC");
    }

    public long getRDCount(String str) {
        Cursor rawQuery = getDB().rawQuery("SELECT rdcounter FROM topic_list WHERE topic_key = '" + str + "';", null);
        if (rawQuery.getCount() <= 0) {
            Log.d(TAG, "GETRDCOUNTER FORCE RETURN1");
            return 0;
        }
        rawQuery.moveToNext();
        int columnIndex = rawQuery.getColumnIndex(RDCOUNTER);
        if (columnIndex < 0) {
            Log.d(TAG, "GETRDCOUNTER FORCE RETURN2");
            return 0;
        }
        long j = rawQuery.getLong(columnIndex);
        rawQuery.close();
        return j;
    }

    public Cursor getRDCounter(String str) {
        return getDB().rawQuery("SELECT rdcounter FROM topic_list WHERE topic_key = '" + str + "';", null);
    }

    public Cursor getSinggleDiscussFromTopic(String str, long j) {
        return getDB().query(DISCUSS_TABLE_NAME, null, "topic_key = '" + str + "' AND " + SEQUENCE + " = " + j, null, null, null, TIMESTAMP);
    }

    public Cursor getSingleDiscuss(long j) {
        return getDB().query(DISCUSS_TABLE_NAME, null, "sequence = " + j, null, null, null, TIMESTAMP);
    }

    public Cursor getSingleDiscuss(String str, long j) {
        return getDB().query(DISCUSS_TABLE_NAME, null, "topic_key = '" + str + "' AND " + SEQUENCE + " = " + j, null, null, null, TIMESTAMP);
    }

    public String getSlink(String str, long j) {
        Cursor singgleDiscussFromTopic = getSinggleDiscussFromTopic(str, j);
        if (!singgleDiscussFromTopic.moveToFirst()) {
            return null;
        }
        String string = singgleDiscussFromTopic.getString(singgleDiscussFromTopic.getColumnIndex(SLINK));
        singgleDiscussFromTopic.close();
        return string;
    }

    public String getStringImageThumbUriInTopic(String str) {
        Cursor imageThumbUriInTopic = getImageThumbUriInTopic(str);
        if (!imageThumbUriInTopic.moveToFirst()) {
            return null;
        }
        String string = imageThumbUriInTopic.getString(imageThumbUriInTopic.getColumnIndex(IMAGETHUMB_URI));
        imageThumbUriInTopic.close();
        return string;
    }

    public String getTitle(String str) {
        Cursor topic = getTopic(str);
        if (!topic.moveToFirst()) {
            return null;
        }
        String string = topic.getString(topic.getColumnIndex(TITLE));
        topic.close();
        return string;
    }

    public Cursor getTopic(String str) {
        return getDB().query(TOPIC_TABLE_NAME, null, "topic_key = '" + str + "'", null, null, null, "lastactivity DESC, timestamp DESC");
    }

    public String getTopicTitle(String str) {
        Cursor query = getDB().query(TOPIC_TABLE_NAME, new String[]{TITLE}, "topic_key = '" + str + "'", null, null, null, null);
        if (query.getCount() <= 0) {
            return null;
        }
        query.moveToNext();
        return query.getString(query.getColumnIndex(TITLE));
    }

    public Cursor getVoiceFileInTopic(String str) {
        return getDB().rawQuery("SELECT voicefilepath FROM topic_list WHERE topic_key = '" + str + "' AND " + VOICEFILEPATH + " != '';", null);
    }

    public boolean increaseObjCommCount(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        Cursor query = db.query(DISCUSS_TABLE_NAME, null, "senderpin = '" + catfishMessageObject.object_owner + "' and " + SEQUENCE + " = '" + catfishMessageObject.object_sequence + "' ", null, null, null, null);
        query.moveToFirst();
        int i = query.getCount() > 0 ? query.getInt(query.getColumnIndex(OBJCOMMENTCOUNT)) + 1 : 0;
        Log.d(TAG, "count point:" + i);
        query.close();
        ContentValues contentValues = new ContentValues();
        contentValues.put(OBJCOMMENTCOUNT, Integer.valueOf(i));
        return db.update(DISCUSS_TABLE_NAME, contentValues, new StringBuilder().append("senderpin = '").append(catfishMessageObject.object_owner).append("' and ").append(SEQUENCE).append(" = '").append(catfishMessageObject.object_sequence).append("' ").toString(), null) > 0;
    }

    public void increaseUnreadMessageCount(String str, int i) {
        getDB().execSQL("UPDATE topic_list SET unreadmessagecount = unreadmessagecount + " + i + " where " + TOPIC_KEY + "='" + str + "';");
    }

    public boolean isLikeExist(String str, long j) {
        Cursor rawQuery = getDB().rawQuery("SELECT topic_key FROM like_list WHERE topic_key = '" + str + "' AND " + SEQUENCE + " = " + j + ";", null);
        boolean z = rawQuery.getCount() > 0;
        rawQuery.close();
        return z;
    }

    public boolean isLikeThis(String str, long j) {
        Cursor rawQuery = getDB().rawQuery("SELECT topic_key FROM discuss_list WHERE topic_key = '" + str + "' AND " + SEQUENCE + " = " + j + " AND " + AREULIKE + " = 1" + ";", null);
        boolean z = rawQuery.getCount() > 0;
        rawQuery.close();
        return z;
    }

    public boolean isMemberExist(String str, String str2) {
        Cursor rawQuery = getDB().rawQuery("SELECT topic_key FROM friend_list WHERE topic_key = '" + str + "' AND " + FRIENDPIN + " = '" + str2 + "';", null);
        boolean z = rawQuery.getCount() > 0;
        rawQuery.close();
        return z;
    }

    public boolean isMute(String str) {
        Cursor query = getDB().query(TOPIC_TABLE_NAME, null, "topic_key = '" + str + "'", null, null, null, TIMESTAMP);
        query.moveToFirst();
        if (query.getCount() <= 0) {
            Log.e(TAG, "isMute FAIL to get topickey=" + str + ": RETURN FALSE");
            return false;
        }
        int parseInt;
        String string = query.getString(query.getColumnIndex(MUTE));
        query.close();
        if (string != null) {
            try {
                parseInt = Integer.parseInt(string);
            } catch (Exception e) {
                Log.e(TAG, "isMute Exception: please see the log: RETURN FALSE");
                e.printStackTrace();
                return false;
            }
        }
        parseInt = 0;
        return parseInt > 0;
    }

    public boolean isPoolMessageExist(String str, long j) {
        Cursor rawQuery = getDB().rawQuery("SELECT topic_key FROM discuss_list WHERE topic_key = '" + str + "' AND " + SEQUENCE + " = " + String.valueOf(j) + ";", null);
        boolean z = rawQuery.getCount() > 0;
        rawQuery.close();
        return z;
    }

    public boolean isTopicAccepted(String str) {
        Cursor rawQuery = getDB().rawQuery("SELECT deliverystatus FROM topic_list WHERE topic_key = '" + str + "';", null);
        if (rawQuery.getCount() <= 0) {
            Log.d(TAG, "isTopicAccepted FORCE RETURN1");
            rawQuery.close();
            return false;
        }
        rawQuery.moveToNext();
        int columnIndex = rawQuery.getColumnIndex(DELIVERYSTATUS);
        if (columnIndex < 0) {
            Log.d(TAG, "isTopicAccepted FORCE RETURN2");
            rawQuery.close();
            return false;
        }
        columnIndex = rawQuery.getInt(columnIndex);
        rawQuery.close();
        return columnIndex != MessageDeliveryStatus.CONFRCPENDING.ordinal();
    }

    public boolean isTopicExists(String str) {
        Cursor rawQuery = getDB().rawQuery("SELECT topic_key FROM topic_list WHERE topic_key = '" + str + "';", null);
        int count = rawQuery.getCount();
        rawQuery.close();
        return count > 0;
    }

    public boolean isTopicHasItemUnread(String str) {
        Cursor rawQuery = getDB().rawQuery("SELECT topic_key FROM topic_list WHERE topic_key = '" + str + "' AND " + HAVEUNREADITEM + " != 0;", null);
        boolean z = rawQuery.getCount() > 0;
        rawQuery.close();
        return z;
    }

    public Cursor poolMessageToUpdateDataComment(String str, long j) {
        Cursor rawQuery = getDB().rawQuery("SELECT topic_key FROM discuss_list WHERE topic_key = '" + str + "' AND " + SEQUENCE + " = " + String.valueOf(j) + ";", null);
        return rawQuery.getCount() > 0 ? rawQuery : rawQuery;
    }

    public void resetAllUnreadTopic() {
        SQLiteDatabase db = getDB();
        Cursor allTopic = getAllTopic();
        db.beginTransaction();
        while (allTopic.moveToNext()) {
            try {
                int columnIndex = allTopic.getColumnIndex(TOPIC_KEY);
                setUnReadItemInTopic(allTopic.getString(columnIndex), 0);
                updateLastReadTopic(allTopic.getString(columnIndex));
            } finally {
                db.endTransaction();
            }
        }
        db.setTransactionSuccessful();
        allTopic.close();
    }

    public void saveAttachmentInfo(CatfishMessageObject catfishMessageObject) {
        if (isPoolMessageExist(catfishMessageObject.topic_key, catfishMessageObject.sequence)) {
            SQLiteDatabase db = getDB();
            ContentValues contentValues = new ContentValues();
            contentValues.put(ATTACHMENT_FILE_SIZE, Integer.valueOf(catfishMessageObject.attachmentFileSize));
            contentValues.put(ATTACHMENT_HEIGHT, Integer.valueOf(catfishMessageObject.attachmentHeight));
            contentValues.put(ATTACHMENT_WIDTH, Integer.valueOf(catfishMessageObject.attachmentWidth));
            if (((long) db.update(DISCUSS_TABLE_NAME, contentValues, "sequence='" + catfishMessageObject.sequence + "'", null)) > 0) {
                contentValues.clear();
            } else {
                contentValues.clear();
            }
        }
    }

    public void saveQuote(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db;
        ContentValues contentValues;
        if (isPoolMessageExist(catfishMessageObject.topic_key, catfishMessageObject.sequence)) {
            db = getDB();
            contentValues = new ContentValues();
            contentValues.put(QUOTE_SENDER_NIC, catfishMessageObject.senderpin);
            contentValues.put(QUOTE_SENDER_NAME, catfishMessageObject.sendername);
            contentValues.put(QUOTE_MESSAGE, catfishMessageObject.quote_message);
            contentValues.put(MESSAGE, catfishMessageObject.message);
            if (((long) db.update(DISCUSS_TABLE_NAME, contentValues, "sequence='" + catfishMessageObject.sequence + "'", null)) > 0) {
                contentValues.clear();
            } else {
                contentValues.clear();
            }
            return;
        }
        db = getDB();
        contentValues = new ContentValues();
        contentValues.put(QUOTE_SENDER_NIC, catfishMessageObject.senderpin);
        contentValues.put(QUOTE_SENDER_NAME, catfishMessageObject.sendername);
        contentValues.put(QUOTE_MESSAGE, catfishMessageObject.message);
        contentValues.put(MESSAGE, catfishMessageObject.message);
        contentValues.put(TOPIC_KEY, catfishMessageObject.topic_key);
        if (db.insert(DISCUSS_TABLE_NAME, null, contentValues) > 0) {
            contentValues.clear();
        } else {
            contentValues.clear();
        }
    }

    public Cursor searchFriendList(String str, String str2) {
        return getDB().query(FRIENDLIST_TABLE_NAME, null, "topic_key = '" + str + "' AND " + FRIENDNAME + " != '' AND " + FRIENDNAME + " LIKE '%" + str2.replace("'", "''") + "%'", null, null, null, "UPPER(friendname)");
    }

    public void setDeleteGroup(String str) {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(DELETED_POOL, Integer.valueOf(1));
            db.update(TOPIC_TABLE_NAME, contentValues, "topic_key='" + str + "'", null);
        }
    }

    public void setDiscussCountToTopic(String str) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        contentValues.put(DISCUSSCOUNT, Integer.valueOf(getDiscussCount(str)));
        db.update(TOPIC_TABLE_NAME, contentValues, "topic_key = '" + str + "';", null);
    }

    public void setILikeDiscuss(String str, long j) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        contentValues.put(AREULIKE, Integer.valueOf(1));
        db.update(DISCUSS_TABLE_NAME, contentValues, "topic_key = '" + str + "' AND " + SEQUENCE + " = " + j, null);
    }

    public void setIUnlikeDiscuss(String str, long j) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        contentValues.put(AREULIKE, Integer.valueOf(0));
        db.update(DISCUSS_TABLE_NAME, contentValues, "topic_key = '" + str + "' AND " + SEQUENCE + " = " + j, null);
    }

    public void setLastActivityToTopic(String str, long j) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        contentValues.put(LASTACTIVITY, Long.valueOf(j));
        db.update(TOPIC_TABLE_NAME, contentValues, "topic_key = '" + str + "';", null);
    }

    public void setLastMessage(String str) {
        setLastMessage(true, str, "", MessageDeliveryStatus.BCASTSENT.ordinal(), MessageType.CONFRC_MESSAGE.ordinal(), getLastTimeStamp(), CatfishService.getUserPIN(), "");
    }

    public void setLastMessage(boolean z, String str, String str2, int i, int i2, long j, String str3, String str4) {
        setLastMessage(z, str, str2, i, i2, j, str3, str4, getLastTimeStamp());
    }

    public void setLastMessage(boolean z, String str, String str2, int i, int i2, long j, String str3, String str4, long j2) {
        if (j2 < j) {
            SQLiteDatabase db = getDB();
            if (db != null) {
                ContentValues contentValues = new ContentValues();
                contentValues.put(LASTMESSAGE, str2);
                contentValues.put(LASTMESSAGESENDERNAME, str4);
                contentValues.put(LASTMESSAGESENDERPIN, str3);
                Log.d(TAG, "--message delivery status-- delivery status : " + i + " update status : " + z);
                if (i == 0 || i == MessageDeliveryStatus.UNDEFINED.ordinal()) {
                    contentValues.put(LASTDELIVERYSTATUS, Integer.valueOf(MessageDeliveryStatus.UNDEFINED.ordinal()));
                } else if (z) {
                    contentValues.put(LASTDELIVERYSTATUS, Integer.valueOf(i));
                } else {
                    contentValues.put(LASTDELIVERYSTATUS, Integer.valueOf(MessageDeliveryStatus.UNDEFINED.ordinal()));
                }
                contentValues.put(LASTMESSAGETYPE, Integer.valueOf(i2));
                contentValues.put(LASTMESSAGETIMESTAMP, Long.valueOf(j));
                db.update(TOPIC_TABLE_NAME, contentValues, "topic_key='" + str + "'", null);
            }
        }
    }

    public void setLastMessageNonCheckTImeStamp(boolean z, String str, String str2, int i, int i2, long j, String str3, String str4) {
        setLastMessage(z, str, str2, i, i2, j, str3, str4, 0);
    }

    public void setLikeCountToDiscuss(String str, long j) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        contentValues.put(LIKECOUNT, Integer.valueOf(getLikeCount(str, j)));
        db.update(DISCUSS_TABLE_NAME, contentValues, "topic_key = '" + str + "' AND " + SEQUENCE + " = " + j, null);
    }

    public void setMemberCountToTopic(String str) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        contentValues.put(MEMBERCOUNT, Integer.valueOf(getMemberCount(str)));
        db.update(TOPIC_TABLE_NAME, contentValues, "topic_key = '" + str + "';", null);
    }

    public void setMute(String str, boolean z) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        contentValues.put(MUTE, z ? "1" : "0");
        db.update(TOPIC_TABLE_NAME, contentValues, "topic_key = '" + str + "';", null);
    }

    public boolean setRDCounter(String str, long j) {
        int update;
        Exception e;
        SQLiteDatabase db = getDB();
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put(RDCOUNTER, Long.valueOf(j));
            update = db.update(TOPIC_TABLE_NAME, contentValues, "topic_key = '" + str + "';", null);
            if (update > 0) {
                try {
                    Log.d(TAG, "RDCOUNTER UPDATE TO=" + j + ",topickey=" + str);
                } catch (Exception e2) {
                    e = e2;
                    Log.d(TAG, "FAIL TO UPDATE RDCOUNTER: topickey=" + str);
                    e.printStackTrace();
                    return update > 0;
                }
            } else {
                Log.d(TAG, "FAIL TO UPDATE RDCOUNTER: topickey=" + str);
            }
        } catch (Exception e3) {
            e = e3;
            update = 0;
            Log.d(TAG, "FAIL TO UPDATE RDCOUNTER: topickey=" + str);
            e.printStackTrace();
            if (update > 0) {
            }
        }
        if (update > 0) {
        }
    }

    public boolean setUnReadItemInTopic(String str, int i) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        contentValues.put(HAVEUNREADITEM, Integer.valueOf(i));
        int update = db.update(TOPIC_TABLE_NAME, contentValues, "topic_key='" + str + "'", null);
        contentValues.clear();
        return update > 0;
    }

    public void storeDiscuss(ArrayList arrayList) {
        SQLiteDatabase db = getDB();
        int size = arrayList.size();
        db.beginTransaction();
        int i = 0;
        while (i < size) {
            try {
                CatfishMessageObject catfishMessageObject = (CatfishMessageObject) arrayList.get(i);
                String str = catfishMessageObject.topic_key != null ? catfishMessageObject.topic_key : catfishMessageObject.object_owner + ":" + catfishMessageObject.object_sequence;
                Log.d(TAG, "Set RDCONTER=" + catfishMessageObject.rdcounter + ", topickey=" + str);
                setRDCounter(str, catfishMessageObject.rdcounter);
                if (!isPoolMessageExist(str, catfishMessageObject.sequence)) {
                    ContentValues contentValues = new ContentValues();
                    contentValues.put(MESSAGE, catfishMessageObject.message);
                    contentValues.put(MESSAGETYPE, Integer.valueOf(catfishMessageObject.messagetype.ordinal()));
                    if (((CatfishMessageObject) arrayList.get(i)).messagetype == MessageType.BCASTCONFERENCE || ((CatfishMessageObject) arrayList.get(i)).messagetype == MessageType.CONFRC_TOPIC_DATA || ((CatfishMessageObject) arrayList.get(i)).messagetype == MessageType.PERSONCONTACT) {
                        if (catfishMessageObject.message.startsWith("file:")) {
                            contentValues.put(DATAFILEPATH, StorageDir.getGroupChatDir(3) + String.valueOf(catfishMessageObject.sequence) + catfishMessageObject.message.replace("file:", ""));
                        }
                        if (catfishMessageObject.message.startsWith("voice:")) {
                            contentValues.put(VOICEFILEPATH, StorageDir.getGroupChatDir(2) + String.valueOf(catfishMessageObject.sequence) + catfishMessageObject.message.replace("voice:", ""));
                        }
                    }
                    if (catfishMessageObject.stickerheight > 0) {
                        contentValues.put(STICKERSIZEHEIGHT, Integer.valueOf(catfishMessageObject.stickerheight));
                    }
                    if (catfishMessageObject.stickerwidth > 0) {
                        contentValues.put(STICKERSIZEWIDTH, Integer.valueOf(catfishMessageObject.stickerwidth));
                    }
                    contentValues.put(SENDERPIN, catfishMessageObject.senderpin);
                    String friendAlias = new FriendListDataStorage(this.mContext).getFriendAlias(catfishMessageObject.senderpin);
                    if (friendAlias == null || friendAlias.isEmpty()) {
                        friendAlias = catfishMessageObject.sendername;
                    }
                    contentValues.put(SENDERNAME, friendAlias);
                    contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
                    if (!(catfishMessageObject.deliverystatus == null || catfishMessageObject.deliverystatus == MessageDeliveryStatus.UNDEFINED)) {
                        contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
                    }
                    contentValues.put(TOPIC_KEY, str);
                    contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.sequence));
                    contentValues.put(OBJECTSEQUENCE, Long.valueOf(catfishMessageObject.object_sequence));
                    contentValues.put(OBJECTOWNERPIN, catfishMessageObject.object_owner);
                    if (db.insert(DISCUSS_TABLE_NAME, null, contentValues) > 0) {
                        Log.d(TAG, "INSERT WITH DISCUSS_SEQUENCE=" + catfishMessageObject.sequence + " , MESSAGETYPE=" + String.valueOf(catfishMessageObject.messagetype.ordinal()));
                        setUnReadItemInTopic(str, 1);
                        increaseUnreadMessageCount(str, 1);
                        setLastMessage(false, str, catfishMessageObject.message, catfishMessageObject.deliverystatus.ordinal(), catfishMessageObject.messagetype.ordinal(), catfishMessageObject.rcvtimestamp, catfishMessageObject.senderpin, friendAlias);
                    } else {
                        Log.d(TAG, "INSERT WITH  DISCUSS_SEQUENCE=" + catfishMessageObject.sequence + ": FAIL!!!");
                    }
                    setDiscussCountToTopic(str);
                    setLastActivityToTopic(str, catfishMessageObject.rcvtimestamp);
                    contentValues.clear();
                }
                i++;
            } catch (Exception e) {
                Log.d(TAG, "Discuss FAIL TO STORED");
                e.printStackTrace();
                return;
            } finally {
                db.endTransaction();
            }
        }
        db.setTransactionSuccessful();
        Log.d(TAG, "Discuss STORED");
        db.endTransaction();
    }

    public boolean storeFriendList(String str, ArrayList arrayList) {
        SQLiteDatabase db = getDB();
        int size = arrayList.size();
        db.beginTransaction();
        for (int i = 0; i < size; i++) {
            ContentValues contentValues = new ContentValues();
            CatfishMessageObject catfishMessageObject = (CatfishMessageObject) arrayList.get(i);
            if (!(isMemberExist(catfishMessageObject.topic_key, catfishMessageObject.senderpin) || !isTopicExists(catfishMessageObject.topic_key) || catfishMessageObject.sendername == null || catfishMessageObject.sendername.length() == 0)) {
                contentValues.put(FRIENDPIN, catfishMessageObject.senderpin);
                if (catfishMessageObject.sendername.length() > 0) {
                    contentValues.put(FRIENDNAME, catfishMessageObject.sendername);
                }
                contentValues.put(TOPIC_KEY, str);
                if (db.insert(FRIENDLIST_TABLE_NAME, null, contentValues) > 0) {
                    Log.d(TAG, "INSERT FRIEND WITH FRIENDPIN=" + catfishMessageObject.senderpin);
                } else {
                    try {
                        Log.d(TAG, "INSERT FRIEND WITH FRIENDPIN=" + catfishMessageObject.senderpin + ": FAIL!!!");
                    } catch (Throwable th) {
                        db.endTransaction();
                    }
                }
                contentValues.clear();
            }
        }
        db.setTransactionSuccessful();
        db.endTransaction();
        setMemberCountToTopic(str);
        Log.d(TAG, "Friend STORED");
        return true;
    }

    public boolean storeSingleDiscuss(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        contentValues.put(SENDERPIN, catfishMessageObject.userpin);
        contentValues.put(SENDERNAME, catfishMessageObject.username);
        contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
        String str = catfishMessageObject.topic_key != null ? catfishMessageObject.topic_key : catfishMessageObject.object_owner + ":" + catfishMessageObject.object_sequence;
        if (catfishMessageObject.stickerheight > 0) {
            contentValues.put(STICKERSIZEHEIGHT, Integer.valueOf(catfishMessageObject.stickerheight));
        }
        if (catfishMessageObject.stickerwidth > 0) {
            contentValues.put(STICKERSIZEWIDTH, Integer.valueOf(catfishMessageObject.stickerwidth));
        }
        contentValues.put(TOPIC_KEY, str);
        if (catfishMessageObject.datafile_path != null) {
            contentValues.put(DATAFILEPATH, catfishMessageObject.datafile_path);
        }
        if (catfishMessageObject.voicefilepath != null) {
            contentValues.put(VOICEFILEPATH, catfishMessageObject.voicefilepath);
        }
        if (catfishMessageObject.deliverystatus != null) {
            contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        }
        contentValues.put(MESSAGE, catfishMessageObject.message);
        contentValues.put(MESSAGETYPE, Integer.valueOf(catfishMessageObject.messagetype.ordinal()));
        contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.sequence));
        contentValues.put(OBJECTSEQUENCE, Long.valueOf(catfishMessageObject.object_sequence));
        contentValues.put(OBJECTOWNERPIN, catfishMessageObject.object_owner);
        long insert = db.insert(DISCUSS_TABLE_NAME, null, contentValues);
        setDiscussCountToTopic(str);
        setLastActivityToTopic(str, catfishMessageObject.rcvtimestamp);
        if (insert > 0) {
            Log.d(TAG, "INSERT WITH DISCUSS_SEQUENCE=" + catfishMessageObject.sequence + " , MESSAGETYPE=" + String.valueOf(catfishMessageObject.messagetype.ordinal()));
            setUnReadItemInTopic(str, 0);
            increaseUnreadMessageCount(str, 1);
            setLastMessage(true, str, catfishMessageObject.message, catfishMessageObject.deliverystatus.ordinal(), catfishMessageObject.messagetype.ordinal(), catfishMessageObject.rcvtimestamp, catfishMessageObject.userpin, catfishMessageObject.username);
        } else {
            Log.d(TAG, "INSERT WITH  DISCUSS_SEQUENCE=" + catfishMessageObject.sequence + ": FAIL!!!");
        }
        contentValues.clear();
        Log.d(TAG, "Discuss STORED");
        return true;
    }

    public boolean storeSingleFriendList(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        contentValues.put(FRIENDPIN, catfishMessageObject.senderpin);
        if (catfishMessageObject.sendername != null && catfishMessageObject.sendername.length() > 0) {
            contentValues.put(FRIENDNAME, catfishMessageObject.sendername);
        }
        String str = catfishMessageObject.topic_key;
        contentValues.put(TOPIC_KEY, str);
        long insert = db.insert(FRIENDLIST_TABLE_NAME, null, contentValues);
        setMemberCountToTopic(str);
        if (insert > 0) {
            Log.d(TAG, "INSERT FRIEND WITH FRIENDPIN=" + catfishMessageObject.senderpin);
        } else {
            Log.d(TAG, "INSERT FRIEND WITH FRIENDPIN=" + catfishMessageObject.senderpin + ": FAIL!!!");
        }
        contentValues.clear();
        Log.d(TAG, "Friend STORED");
        return true;
    }

    public boolean storeSingleTopic(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        FriendListDataStorage friendListDataStorage = new FriendListDataStorage(this.mContext);
        ContentValues contentValues = new ContentValues();
        if (catfishMessageObject.userpin != null) {
            contentValues.put(SENDERPIN, catfishMessageObject.userpin);
            contentValues.put(SENDERNAME, catfishMessageObject.username);
        } else {
            contentValues.put(SENDERPIN, catfishMessageObject.object_owner);
            contentValues.put(SENDERNAME, friendListDataStorage.getFriendname(catfishMessageObject.object_owner));
            Log.d(TAG, "OWNER DARI TOPIK INI SENDERPIN=" + catfishMessageObject.object_owner + " SNDERNAME=" + friendListDataStorage.getFriendname(catfishMessageObject.object_owner));
            if (catfishMessageObject.invitorpin != null) {
                contentValues.put(INVITORPIN, catfishMessageObject.invitorpin);
                contentValues.put(INVITORNAME, friendListDataStorage.getFriendname(catfishMessageObject.invitorpin));
            } else {
                contentValues.put(INVITORPIN, catfishMessageObject.object_owner);
                contentValues.put(INVITORNAME, friendListDataStorage.getFriendname(catfishMessageObject.object_owner));
            }
        }
        if (catfishMessageObject.image_path != null) {
            contentValues.put(IMAGEPATH, catfishMessageObject.image_path);
        }
        if (catfishMessageObject.datafile_path != null) {
            contentValues.put(DATAFILEPATH, catfishMessageObject.datafile_path);
        }
        if (catfishMessageObject.deliverystatus != null) {
            contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        }
        contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
        contentValues.put(LASTACTIVITY, Long.valueOf(catfishMessageObject.rcvtimestamp));
        String str = catfishMessageObject.topic_key != null ? catfishMessageObject.topic_key : catfishMessageObject.object_owner + ":" + String.valueOf(catfishMessageObject.object_sequence);
        contentValues.put(TOPIC_KEY, str);
        if (catfishMessageObject.title != null) {
            contentValues.put(TITLE, catfishMessageObject.title);
        } else {
            contentValues.put(TITLE, catfishMessageObject.message);
        }
        contentValues.put(MESSAGE, catfishMessageObject.message);
        contentValues.put(RDCOUNTER, Integer.valueOf(1));
        contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        if (catfishMessageObject.object_sequence == 0) {
            contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.sequence));
        } else {
            contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.object_sequence));
        }
        if (db.insert(TOPIC_TABLE_NAME, null, contentValues) > 0) {
            Log.d(TAG, "INSERT WITH TOPIC_KEY=" + str);
            setUnReadItemInTopic(str, 1);
        } else {
            Log.d(TAG, "INSERT WITH TOPIC_KEY=" + str + ": FAIL!!!");
        }
        contentValues.clear();
        Log.d(TAG, "Messages STORED");
        return true;
    }

    public boolean storeTopic(ArrayList arrayList) {
        SQLiteDatabase db = getDB();
        int size = arrayList.size();
        db.beginTransaction();
        int i = 0;
        while (i < size) {
            try {
                ContentValues contentValues = new ContentValues();
                CatfishMessageObject catfishMessageObject = (CatfishMessageObject) arrayList.get(i);
                contentValues.put(SENDERPIN, catfishMessageObject.senderpin);
                contentValues.put(SENDERNAME, catfishMessageObject.sendername);
                contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
                String str = catfishMessageObject.topic_key != null ? catfishMessageObject.topic_key : catfishMessageObject.senderpin + ":" + catfishMessageObject.sequence;
                contentValues.put(TOPIC_KEY, str);
                contentValues.put(TITLE, catfishMessageObject.title);
                contentValues.put(MESSAGE, catfishMessageObject.message);
                contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
                contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.sequence));
                contentValues.put(VOICEFILEPATH, catfishMessageObject.voicefilepath);
                contentValues.put(DATAFILEPATH, catfishMessageObject.datafile_path);
                if (db.insert(TOPIC_TABLE_NAME, null, contentValues) > 0) {
                    Log.d(TAG, "INSERT WITH TOPIC_KEY=" + str);
                    setUnReadItemInTopic(str, 1);
                } else {
                    Log.d(TAG, "INSERT WITH TOPIC_KEY=" + str + ": FAIL!!!");
                }
                contentValues.clear();
                i++;
            } catch (Throwable th) {
                db.endTransaction();
            }
        }
        db.setTransactionSuccessful();
        db.endTransaction();
        Log.d(TAG, "Messages STORED");
        return true;
    }

    public boolean updateDataCommentToDiscussContent(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        long j = catfishMessageObject.sequence;
        if (catfishMessageObject.message != null) {
            contentValues.put(MESSAGE, catfishMessageObject.message);
        }
        int update = db.update(DISCUSS_TABLE_NAME, contentValues, "sequence='" + j + "'", null);
        contentValues.clear();
        return update > 0;
    }

    public boolean updateDiscussContent(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        long j = catfishMessageObject.sequence;
        if (catfishMessageObject.message != null) {
            contentValues.put(MESSAGE, catfishMessageObject.message);
        }
        if (catfishMessageObject.deliverystatus != MessageDeliveryStatus.UNDEFINED) {
            contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        }
        if (catfishMessageObject.datafile_path != null && catfishMessageObject.datafile_path.length() > 0) {
            contentValues.put(DATAFILEPATH, catfishMessageObject.datafile_path);
        }
        if (catfishMessageObject.slink != null) {
            contentValues.put(SLINK, catfishMessageObject.slink);
        }
        if (catfishMessageObject.imagethumb_uri != null) {
            contentValues.put(IMAGETHUMB_URI, catfishMessageObject.imagethumb_uri);
        }
        if (catfishMessageObject.rcvtimestamp != 0) {
            contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
        }
        contentValues.put(DATATYPE, Integer.valueOf(catfishMessageObject.datatype));
        int update = db.update(DISCUSS_TABLE_NAME, contentValues, "sequence='" + j + "'", null);
        if (catfishMessageObject.updateLastMessageStatus) {
            updateLastMessageStatusDelivery(catfishMessageObject.topic_key, catfishMessageObject.deliverystatus.ordinal());
        }
        contentValues.clear();
        return update > 0;
    }

    public void updateDiscussMessage(CatfishMessageObject catfishMessageObject) {
        Log.d(TAG, "Try updated:" + catfishMessageObject.sequence + ", with:" + catfishMessageObject.message);
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        long j = catfishMessageObject.sequence;
        String str = catfishMessageObject.topic_key == null ? catfishMessageObject.object_owner + ":" + catfishMessageObject.object_sequence : catfishMessageObject.topic_key;
        if (catfishMessageObject.message != null) {
            contentValues.put(MESSAGE, catfishMessageObject.message);
        }
        if (db.update(DISCUSS_TABLE_NAME, contentValues, "sequence='" + j + "'", null) != 0) {
            Log.d(TAG, str + " " + j + " Updated");
        }
        contentValues.clear();
    }

    public boolean updateDiscussStatusToSent(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        long j = catfishMessageObject.sequence;
        updateLastMessageStatusDelivery(catfishMessageObject.topic_key, catfishMessageObject.deliverystatus.ordinal());
        contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        if (catfishMessageObject.slink != null) {
            contentValues.put(MESSAGE, catfishMessageObject.message);
        }
        int update = db.update(DISCUSS_TABLE_NAME, contentValues, "sequence='" + j + "'", null);
        contentValues.clear();
        return update > 0;
    }

    public boolean updateFizzlinkDownloaded(String str) {
        boolean z = true;
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(FIZZLINK_DOWNLOADED, Integer.valueOf(1));
        int update = db.update(DISCUSS_TABLE_NAME, contentValues, "slink='" + str + "'", null);
        Log.d(TAG, "save fizzlink info");
        if (update <= 0) {
            z = false;
        }
        return z;
    }

    public boolean updateFizzlinkMessageInfo(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(FIZZLINK_DATA_SIZE, Integer.valueOf(catfishMessageObject.datasize));
        contentValues.put(FIZZLINK_FILE_NAME, catfishMessageObject.filename);
        contentValues.put(FIZZLINK_FILE_PATH, catfishMessageObject.datafile_path);
        contentValues.put(FIZZLINK_SENDER_NAME, catfishMessageObject.sendername);
        contentValues.put(FIZZLINK_SENDER_PIN, catfishMessageObject.senderpin);
        contentValues.put(FIZZLINK_DESC, catfishMessageObject.desc);
        contentValues.put(FIZZLINK_DATA_TYPE, Integer.valueOf(catfishMessageObject.datatype));
        int update = db.update(DISCUSS_TABLE_NAME, contentValues, "sequence=" + catfishMessageObject.sequence, null);
        Log.d(TAG, "save fizzlink info");
        return update > 0;
    }

    public void updateFriendName(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        contentValues.put(SENDERNAME, catfishMessageObject.message);
        db.update(DISCUSS_TABLE_NAME, contentValues, "senderpin='" + catfishMessageObject.senderpin + "'", null);
        db.update(TOPIC_TABLE_NAME, contentValues, "senderpin='" + catfishMessageObject.senderpin + "'", null);
        contentValues = new ContentValues();
        contentValues.put(FRIENDNAME, catfishMessageObject.message);
        db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin='" + catfishMessageObject.senderpin + "'", null);
        contentValues.clear();
    }

    public void updateLastMessageStatusDelivery(String str, int i) {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(LASTDELIVERYSTATUS, Integer.valueOf(i));
            db.update(TOPIC_TABLE_NAME, contentValues, "topic_key='" + str + "'", null);
        }
    }

    public boolean updateLastReadPosition(String str, int i) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        contentValues.put(LASTREADPOSITION, Integer.valueOf(i));
        int update = db.update(TOPIC_TABLE_NAME, contentValues, "topic_key='" + str + "'", null);
        contentValues.clear();
        return update > 0;
    }

    public boolean updateLastReadTopic(String str) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        contentValues.put(LASTREADTIMESTAMP, Long.valueOf(System.currentTimeMillis()));
        contentValues.put(UNREADMESSAGECOUNT, Integer.valueOf(0));
        int update = db.update(TOPIC_TABLE_NAME, contentValues, "topic_key='" + str + "'", null);
        updateLastReadPosition(str, getDiscussCount(str));
        contentValues.clear();
        return update > 0;
    }

    public void updateMemberName(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        Log.d(TAG, "UPDATE MEMBER NAME SENDERPIN :" + catfishMessageObject.senderpin + "SENDERNAME : " + catfishMessageObject.sendername);
        contentValues.put(FRIENDNAME, catfishMessageObject.sendername);
        db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin='" + catfishMessageObject.senderpin + "'", null);
        contentValues.clear();
    }

    public boolean updateMessageFizzlinkDownloaded(String str, long j, String str2) {
        boolean z = true;
        SQLiteDatabase db = getDB();
        if (db == null || str == null || str.isEmpty() || j == 0 || str2 == null || str2.isEmpty()) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        int fileTypeFromPath = Utils.getFileTypeFromPath(str2);
        switch (fileTypeFromPath) {
            case e.b /*1*/:
                Log.d(TAG, "save fizzlink info(GROUP): IMAGE: " + str2);
                contentValues.put(VOICEFILEPATH, "");
                contentValues.put(IMAGEPATH, str2);
                contentValues.put(DATAFILEPATH, "");
                contentValues.put(DATATYPE, Integer.valueOf(fileTypeFromPath));
                break;
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                Log.d(TAG, "save fizzlink info(GROUP): VOICE: " + str2);
                contentValues.put(VOICEFILEPATH, str2);
                contentValues.put(IMAGEPATH, "");
                contentValues.put(DATAFILEPATH, "");
                contentValues.put(DATATYPE, Integer.valueOf(fileTypeFromPath));
                break;
            default:
                Log.d(TAG, "save fizzlink info(GROUP): DATA(" + fileTypeFromPath + "): " + str2);
                contentValues.put(VOICEFILEPATH, "");
                contentValues.put(IMAGEPATH, "");
                contentValues.put(DATAFILEPATH, str2);
                contentValues.put(DATATYPE, Integer.valueOf(fileTypeFromPath));
                break;
        }
        contentValues.put(FIZZLINK_DOWNLOADED, Integer.valueOf(1));
        int update = db.update(DISCUSS_TABLE_NAME, contentValues, "topic_key='" + str + "' AND " + SEQUENCE + "=" + j, null);
        Log.d(TAG, "save fizzlink info(GROUP): done with updated records = " + update);
        if (update <= 0) {
            z = false;
        }
        return z;
    }

    public boolean updateMessageInfo(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(ATTACHMENT_FILE_SIZE, Integer.valueOf(catfishMessageObject.datasize));
        int update = db.update(DISCUSS_TABLE_NAME, contentValues, "sequence=" + catfishMessageObject.sequence, null);
        Log.d(TAG, "save fizzlink info");
        return update > 0;
    }

    public void updateSingleTopicContent(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        String str = catfishMessageObject.topic_key == null ? catfishMessageObject.object_owner + ":" + catfishMessageObject.object_sequence : catfishMessageObject.topic_key;
        if (catfishMessageObject.image_path != null) {
            contentValues.put(IMAGEPATH, catfishMessageObject.image_path);
        }
        if (catfishMessageObject.imagethumb_uri != null) {
            contentValues.put(IMAGETHUMB_URI, catfishMessageObject.imagethumb_uri);
        }
        if (catfishMessageObject.datafile_path != null) {
            contentValues.put(DATAFILEPATH, catfishMessageObject.datafile_path);
        }
        if (catfishMessageObject.invitorpin != null) {
            contentValues.put(INVITORPIN, catfishMessageObject.invitorpin);
        }
        if (catfishMessageObject.invitorname != null) {
            contentValues.put(INVITORNAME, catfishMessageObject.invitorname);
        }
        Log.d(TAG, "MAU UPDATE TOPIC DELIVERY STATUSNYA = " + catfishMessageObject.deliverystatus);
        if (!(catfishMessageObject.deliverystatus == null || catfishMessageObject.deliverystatus == MessageDeliveryStatus.UNDEFINED)) {
            contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        }
        if (catfishMessageObject.sendername != null && catfishMessageObject.sendername.length() > 0) {
            contentValues.put(SENDERNAME, catfishMessageObject.sendername);
        }
        if (db.update(TOPIC_TABLE_NAME, contentValues, "topic_key='" + str + "'", null) != 0) {
            Log.d(TAG, str + " Updated");
        }
        contentValues.clear();
    }

    public boolean updateStickerAutoPlay(String str, int i) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(STICKERPLAYED, "1");
        int update = db.update(DISCUSS_TABLE_NAME, contentValues, "topic_key = '" + str + "' AND " + MESSAGETYPE + " = " + String.valueOf(i) + " AND " + STICKERPLAYED + " = 0", null);
        Log.d(TAG, "update msg for auto play sticker");
        return update > 0;
    }

    public boolean updateStreamThumbnail(String str, int i) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(STREAMTHUMBNAILDOWNLOAD, Integer.valueOf(i));
        int update = db.update(DISCUSS_TABLE_NAME, contentValues, "slink = '" + str + "'", null);
        Log.d(TAG, "thumbnail update :" + str + " status : " + i);
        return update > 0;
    }

    public void updateTopicContent(ArrayList arrayList) {
        SQLiteDatabase db = getDB();
        db.beginTransaction();
        try {
            int size = arrayList.size();
            Log.d(TAG, "UpdateTopicContent : Size" + String.valueOf(size));
            for (int i = 0; i < size; i++) {
                ContentValues contentValues = new ContentValues();
                CatfishMessageObject catfishMessageObject = (CatfishMessageObject) arrayList.get(i);
                String str = catfishMessageObject.object_owner + ":" + catfishMessageObject.object_sequence;
                contentValues.put(MESSAGE, catfishMessageObject.message);
                if (db.update(TOPIC_TABLE_NAME, contentValues, "topic_key='" + str + "'", null) != 0) {
                    Log.d(TAG, str + " Updated");
                }
                contentValues.clear();
            }
            db.setTransactionSuccessful();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            db.endTransaction();
        }
    }

    public void updateTopicTitleNMessage(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        String str = catfishMessageObject.topic_key == null ? catfishMessageObject.object_owner + ":" + catfishMessageObject.object_sequence : catfishMessageObject.topic_key;
        if (catfishMessageObject.title != null) {
            contentValues.put(TITLE, catfishMessageObject.title);
        }
        if (catfishMessageObject.message != null) {
            contentValues.put(MESSAGE, catfishMessageObject.message);
        }
        if (db.update(TOPIC_TABLE_NAME, contentValues, "topic_key='" + str + "'", null) != 0) {
            Log.d(TAG, str + " Updated");
        }
        contentValues.clear();
    }
}
