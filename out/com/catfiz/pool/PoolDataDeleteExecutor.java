package com.catfiz.pool;

import android.app.Activity;
import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.CatfishService;
import com.catfiz.service.LongMessageExecutor;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.svcpersistent.TaskDataStorage;
import com.catfiz.util.Log;
import com.catfiz.util.MediaFilePath;
import java.io.File;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;

public class PoolDataDeleteExecutor implements Runnable {
    private static final String TAG = "PoolDataDeleteExecutor";
    private static final String mCacheImagePath = (CatfishPhotoStorage.getCacheStorageDir(null) + "/");
    private static final String mParentPath = (CatfishPhotoStorage.mPoolParentPath + "/");
    private static final String mPoolThumbPath = CatfishPhotoStorage.mPoolThumbnailPath;
    private static final String mThumbPath = (CatfishPhotoStorage.getThumbnailStorageDir(null) + "/");
    private Context mContext = null;
    private Cursor mCursor = null;
    private File mFile = null;
    private int mIddatapath = -1;
    private int mIdimagepath = -1;
    private int mIdimagethumburi = -1;
    private int mIdmessage = -1;
    private int mIdmessageseq = -1;
    private int mIdmessagetype = -1;
    private int mIdsenderpin = -1;
    private int mIdslink = -1;
    private int mIdvoicepath = -1;

    /* synthetic */ class AnonymousClass1 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType = new int[MessageType.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.PERSONCONTACT.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTCONFERENCE_LONGMESSAGE.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.LONG_MESSAGE.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.DATASEND_WCOMMENT.ordinal()] = 4;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTCONFERENCE.ordinal()] = 5;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTCONFERENCE_VIDEO.ordinal()] = 6;
            } catch (NoSuchFieldError e6) {
            }
        }
    }

    public PoolDataDeleteExecutor(Context context, Cursor cursor) {
        this.mCursor = cursor;
        this.mContext = context;
    }

    public PoolDataDeleteExecutor(Cursor cursor) {
        this.mCursor = cursor;
    }

    private void delete(String str) {
        boolean z = true;
        String str2;
        switch (AnonymousClass1.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[this.mCursor.getInt(this.mIdmessagetype)].ordinal()]) {
            case e.b /*1*/:
                str2 = "pff" + this.mCursor.getString(this.mIdmessage).split(":")[0] + ".jpg";
                this.mFile = new File(mParentPath, str2);
                if (this.mFile.exists() && this.mFile.delete()) {
                    Log.d(TAG, "Success delete promote thumb @:" + str2);
                    return;
                }
                return;
            case e.c /*2*/:
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                long j = this.mCursor.getLong(this.mIdmessageseq);
                Log.d(TAG, "Delete Long Message:" + j);
                LongMessageExecutor.deleteLongMessage(j);
                return;
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
            case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
            case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                String string = this.mCursor.getString(this.mIdvoicepath);
                if (!(string == null || string.isEmpty())) {
                    this.mFile = new File(string);
                    if (this.mFile.exists() && this.mFile.delete()) {
                        Log.d(TAG, "Succcess delete voice @:" + string);
                    }
                }
                String string2 = this.mCursor.getString(this.mIddatapath);
                if (!(string2 == null || string2.isEmpty())) {
                    boolean z2 = (str == null || str.equals(CatfishService.getUserPIN())) ? false : true;
                    if (!z2) {
                        z2 = string2.contains(mCacheImagePath);
                    }
                    if (z2) {
                        this.mFile = new File(string2);
                        if (this.mFile.exists() && this.mFile.delete()) {
                            Log.d(TAG, "Success delete data @:" + string2);
                        }
                    }
                }
                string = this.mCursor.getString(this.mIdimagepath);
                if (!(string == null || string.isEmpty())) {
                    if (str == null || str.equals(CatfishService.getUserPIN())) {
                        z = false;
                    }
                    if (!z) {
                        z = string.contains(mCacheImagePath);
                    }
                    if (z) {
                        this.mFile = new File(string);
                        if (this.mFile.exists() && this.mFile.delete()) {
                            Log.d(TAG, "Success delete image @:" + string);
                        }
                    }
                }
                str2 = this.mCursor.getString(this.mIdimagethumburi);
                if (str2 == null || str2.isEmpty()) {
                    str2 = null;
                } else {
                    Uri parse = Uri.parse(str2);
                    if (this.mContext != null) {
                        str2 = MediaFilePath.getPath((Activity) this.mContext, parse);
                    } else if (str2.contains("file://")) {
                        str2 = str2.replace("file://", "");
                    }
                }
                if (!(str2 == null || str2.isEmpty())) {
                    this.mFile = new File(str2);
                    if (this.mFile.exists() && this.mFile.delete()) {
                        Log.d(TAG, "Succcess delete thumb @:" + str2);
                    }
                }
                str2 = this.mCursor.getString(this.mIdslink);
                if (!(str2 == null || str2.isEmpty())) {
                    str2 = str2 + ".png";
                    this.mFile = new File(mThumbPath, str2);
                    if (this.mFile.exists() && this.mFile.delete()) {
                        Log.d(TAG, "Success delete thumb slink @:" + str2);
                    }
                }
                str2 = this.mCursor.getString(this.mIdmessageseq);
                this.mFile = new File(mPoolThumbPath, str2);
                if (this.mFile.exists() && this.mFile.delete()) {
                    Log.d(TAG, "Success thumb pool @:" + str2);
                    return;
                }
                return;
            default:
                return;
        }
    }

    private void initIdColumnDB() {
        this.mIdvoicepath = this.mCursor.getColumnIndex(ServerMessageDataStorage.VOICEFILEPATH);
        this.mIddatapath = this.mCursor.getColumnIndex(ServerMessageDataStorage.DATAFILEPATH);
        this.mIdimagepath = this.mCursor.getColumnIndex(ServerMessageDataStorage.IMAGEPATH);
        this.mIdimagethumburi = this.mCursor.getColumnIndex(ServerMessageDataStorage.IMAGETHUMB_URI);
        this.mIdmessage = this.mCursor.getColumnIndex(ServerMessageDataStorage.MESSAGE);
        this.mIdmessagetype = this.mCursor.getColumnIndex(TaskDataStorage.MESSAGETYPE);
        this.mIdmessageseq = this.mCursor.getColumnIndex(ServerMessageDataStorage.SEQUENCE);
        this.mIdsenderpin = this.mCursor.getColumnIndex(TaskDataStorage.SENDERPIN);
        this.mIdslink = this.mCursor.getColumnIndex(ServerMessageDataStorage.SLINK);
    }

    public void run() {
        Log.d(TAG, "POOL DATA DELETE DIJALANKAN:" + this.mCursor.getCount());
        if (this.mCursor != null) {
            try {
                this.mCursor.moveToFirst();
                initIdColumnDB();
                delete(this.mCursor.getString(this.mIdsenderpin));
                while (this.mCursor.moveToNext()) {
                    delete(this.mCursor.getString(this.mIdsenderpin));
                }
                Log.d(TAG, "POOL DATA DELETE DONE.");
            } catch (Exception e) {
                e.printStackTrace();
                Log.e(TAG, "FAIL TO DELETE DATA. SEE PRINT STACK TRACE LOG.");
            } finally {
                try {
                    this.mCursor.close();
                } catch (Exception e2) {
                }
                this.mCursor = null;
            }
        }
    }
}
