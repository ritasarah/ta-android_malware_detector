package com.catfiz.pool;

import android.database.Cursor;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishService;
import com.catfiz.service.ICatfishClientInterface;
import com.catfiz.service.ICatfishUIBinder;
import com.catfiz.service.IDropableRunnable;
import com.catfiz.util.Log;

public class PoolTopicBackupExecutor implements IDropableRunnable, Runnable {
    public static final int ACTION_TYPE_BACKUP_EVERYTHING = 0;
    public static final int ACTION_TYPE_BACKUP_GROUP_DETAIL = 2;
    public static final int ACTION_TYPE_BACKUP_GROUP_LIST = 1;
    public static final int ACTION_TYPE_BACKUP_GROUP_LIST_WITH_DETAIL = 3;
    public static final int ACTION_TYPE_DELETE_GROUP_DATA = 5;
    public static final int ACTION_TYPE_RESTORE_ALL_GROUP = 6;
    public static final int ACTION_TYPE_UPDATE_GROUP_DATA = 4;
    public static final String DATANAME_ID_DETIL = "GRID.";
    public static final String DATANAME_ID_LIST = "GROUP_LIST";
    public static final String TAG = PoolTopicBackupExecutor.class.getSimpleName();
    private CatfishRESTAPI catfishRestAPI;
    private int mActionType = -1;
    private String mGroupData = "";
    private ICatfishUIBinder mIBinder = null;
    private ICatfishClientInterface mIfclient = null;
    private long mLiveAge = 0;
    public int mScheduleNum = ACTION_TYPE_BACKUP_EVERYTHING;
    private String mServer = null;
    public CatfishService mService = null;
    private Cursor mTopicCursor = null;
    private String mTopicKey = "";
    private String mTopicList = "";
    private final String mUserpin;

    class updateTopicData implements IDropableRunnable, Runnable {
        private long mAge = 0;
        private int mMaxTries;
        private String mTopicData;
        private String mTopicKey;
        private int mTries;
        public int scheduleNum = PoolTopicBackupExecutor.ACTION_TYPE_BACKUP_EVERYTHING;

        public updateTopicData(String str, String str2, int i) {
            this.mTopicData = str;
            this.mTopicKey = str2;
            this.mTries = PoolTopicBackupExecutor.ACTION_TYPE_BACKUP_EVERYTHING;
            this.mMaxTries = i;
            this.mAge = System.currentTimeMillis();
        }

        public void dropRunnable() {
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum += PoolTopicBackupExecutor.ACTION_TYPE_BACKUP_GROUP_LIST;
        }

        public void run() {
            CatfishResult storageInsertData = PoolTopicBackupExecutor.this.catfishRestAPI.storageInsertData(PoolTopicBackupExecutor.this.mServer, PoolTopicBackupExecutor.this.mUserpin, this.mTopicData, PoolTopicBackupExecutor.DATANAME_ID_DETIL + this.mTopicKey);
            if (storageInsertData.hasSuccess()) {
                Log.d(PoolTopicBackupExecutor.TAG, "----updateTopicData SUCCESS insert data with CODE---" + storageInsertData.code + " " + storageInsertData.toString());
            } else if (storageInsertData.hasFailure()) {
                Log.d(PoolTopicBackupExecutor.TAG, "----updateTopicData FAIL----");
                this.mTries += PoolTopicBackupExecutor.ACTION_TYPE_BACKUP_GROUP_LIST;
                if (this.mTries < this.mMaxTries) {
                    PoolTopicBackupExecutor.this.mService.scheduleRunnableToService(this, PoolTopicBackupExecutor.ACTION_TYPE_BACKUP_EVERYTHING);
                }
            } else {
                Log.e(PoolTopicBackupExecutor.TAG, "Please Check, Server tell that something wrong in our parameter");
            }
            storageInsertData.cleaningup();
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            PoolTopicBackupExecutor.this.catfishRestAPI = catfishRESTAPI;
        }
    }

    class updateTopicList implements IDropableRunnable, Runnable {
        private long mAge = 0;
        private int mMaxTries;
        private String mTopicList;
        private int mTries;
        public int scheduleNum = PoolTopicBackupExecutor.ACTION_TYPE_BACKUP_EVERYTHING;

        public updateTopicList(String str, int i) {
            this.mTopicList = str;
            this.mTries = PoolTopicBackupExecutor.ACTION_TYPE_BACKUP_EVERYTHING;
            this.mMaxTries = i;
            this.mAge = System.currentTimeMillis();
        }

        public void dropRunnable() {
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum += PoolTopicBackupExecutor.ACTION_TYPE_BACKUP_GROUP_LIST;
        }

        public void run() {
            CatfishResult storageInsertData = PoolTopicBackupExecutor.this.catfishRestAPI.storageInsertData(PoolTopicBackupExecutor.this.mServer, PoolTopicBackupExecutor.this.mUserpin, this.mTopicList, PoolTopicBackupExecutor.DATANAME_ID_LIST);
            if (storageInsertData.hasSuccess()) {
                Log.d(PoolTopicBackupExecutor.TAG, "----updateTopicList SUCCESS insert data with CODE---" + storageInsertData.code + " " + storageInsertData.toString());
            } else if (storageInsertData.hasFailure()) {
                Log.d(PoolTopicBackupExecutor.TAG, "----updateTopicList FAIL----");
                this.mTries += PoolTopicBackupExecutor.ACTION_TYPE_BACKUP_GROUP_LIST;
                if (this.mTries < this.mMaxTries) {
                    PoolTopicBackupExecutor.this.mService.scheduleRunnableToService(this, PoolTopicBackupExecutor.ACTION_TYPE_BACKUP_EVERYTHING);
                }
            } else {
                Log.e(PoolTopicBackupExecutor.TAG, "Please Check, Server tell that something wrong in our parameter");
            }
            storageInsertData.cleaningup();
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            PoolTopicBackupExecutor.this.catfishRestAPI = catfishRESTAPI;
        }
    }

    public PoolTopicBackupExecutor(ICatfishUIBinder iCatfishUIBinder, CatfishService catfishService, String str, ICatfishClientInterface iCatfishClientInterface, String str2, String str3, Cursor cursor, int i) {
        this.mService = catfishService;
        this.mServer = "103.11.253.2:8000";
        this.mUserpin = str2;
        this.mIfclient = iCatfishClientInterface;
        this.mIBinder = iCatfishUIBinder;
        this.mTopicKey = str3;
        this.mTopicCursor = cursor;
        this.mActionType = i;
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void messageJSONBuilder(android.database.Cursor r30, int r31) {
        /*
        r29 = this;
        r4 = r30.getCount();
        r2 = TAG;
        r3 = new java.lang.StringBuilder;
        r3.<init>();
        r5 = "messageJSONBuilder size:";
        r3 = r3.append(r5);
        r3 = r3.append(r4);
        r3 = r3.toString();
        com.catfiz.util.Log.d(r2, r3);
        r2 = 0;
        r3 = r2;
    L_0x001e:
        if (r3 >= r4) goto L_0x02a6;
    L_0x0020:
        r0 = r30;
        r0.moveToPosition(r3);
        r2 = new org.json.JSONObject;
        r2.<init>();
        r0 = r29;
        r5 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r6 = "senderpin";
        r5 = r5.getColumnIndex(r6);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r7 = "hvunreaditem";
        r6 = r6.getColumnIndex(r7);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r7 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r8 = "sendername";
        r7 = r7.getColumnIndex(r8);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r8 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r9 = "timestamp";
        r8 = r8.getColumnIndex(r9);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r9 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r10 = "topic_key";
        r9 = r9.getColumnIndex(r10);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r10 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r11 = "sharetype";
        r10 = r10.getColumnIndex(r11);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r11 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r12 = "message";
        r11 = r11.getColumnIndex(r12);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r12 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r13 = "deliverystatus";
        r12 = r12.getColumnIndex(r13);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r13 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r14 = "sequence";
        r13 = r13.getColumnIndex(r14);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r14 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r15 = "imagethumburi";
        r14 = r14.getColumnIndex(r15);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r15 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r16 = "imagepath";
        r15 = r15.getColumnIndex(r16);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r0 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r16 = r0;
        r17 = "rdcounter";
        r16 = r16.getColumnIndex(r17);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r0 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r17 = r0;
        r18 = "voicefilepath";
        r17 = r17.getColumnIndex(r18);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r0 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r18 = r0;
        r19 = "datafilepath";
        r18 = r18.getColumnIndex(r19);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r0 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r19 = r0;
        r20 = "title";
        r19 = r19.getColumnIndex(r20);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r0 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r20 = r0;
        r21 = "discusscount";
        r20 = r20.getColumnIndex(r21);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r0 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r21 = r0;
        r22 = "memberscount";
        r21 = r21.getColumnIndex(r22);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r0 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r22 = r0;
        r23 = "lastactivity";
        r22 = r22.getColumnIndex(r23);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r0 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r23 = r0;
        r24 = "invitorpin";
        r23 = r23.getColumnIndex(r24);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r0 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r24 = r0;
        r25 = "invitorname";
        r24 = r24.getColumnIndex(r25);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r0 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r25 = r0;
        r26 = "likecount";
        r25 = r25.getColumnIndex(r26);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r0 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r26 = r0;
        r27 = "areulike";
        r26 = r26.getColumnIndex(r27);	 Catch:{ JSONException -> 0x0298 }
        r27 = "senderpin";
        r0 = r29;
        r0 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r28 = r0;
        r0 = r28;
        r5 = r0.getString(r5);	 Catch:{ JSONException -> 0x0298 }
        r0 = r27;
        r2.put(r0, r5);	 Catch:{ JSONException -> 0x0298 }
        r5 = "hvunreaditem";
        r0 = r29;
        r0 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r27 = r0;
        r0 = r27;
        r6 = r0.getInt(r6);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
        r5 = "sendername";
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r6 = r6.getString(r7);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
        r5 = "timestamp";
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r6 = r6.getLong(r8);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
        r5 = "topic_key";
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r6 = r6.getString(r9);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
        r5 = "sharetype";
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r6 = r6.getInt(r10);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
        r5 = "message";
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r6 = r6.getString(r11);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
        r5 = "deliverystatus";
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r6 = r6.getInt(r12);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
        r5 = "sequence";
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r6 = r6.getLong(r13);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
        r5 = "imagethumburi";
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r6 = r6.getString(r14);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
        r5 = "imagepath";
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r6 = r6.getString(r15);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
        r5 = "rdcounter";
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r0 = r16;
        r6 = r6.getInt(r0);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
        r5 = "voicefilepath";
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r0 = r17;
        r6 = r6.getString(r0);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
        r5 = "datafilepath";
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r0 = r18;
        r6 = r6.getString(r0);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
        r5 = "title";
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r0 = r19;
        r6 = r6.getString(r0);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
        if (r20 < 0) goto L_0x0202;
    L_0x01f3:
        r5 = "discusscount";
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r0 = r20;
        r6 = r6.getInt(r0);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
    L_0x0202:
        if (r21 < 0) goto L_0x0213;
    L_0x0204:
        r5 = "memberscount";
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r0 = r20;
        r6 = r6.getInt(r0);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
    L_0x0213:
        if (r22 < 0) goto L_0x0224;
    L_0x0215:
        r5 = "lastactivity";
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r0 = r20;
        r6 = r6.getLong(r0);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
    L_0x0224:
        if (r23 < 0) goto L_0x0235;
    L_0x0226:
        r5 = "invitorpin";
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r0 = r23;
        r6 = r6.getString(r0);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
    L_0x0235:
        if (r24 < 0) goto L_0x0246;
    L_0x0237:
        r5 = "invitorname";
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r0 = r24;
        r6 = r6.getString(r0);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
    L_0x0246:
        if (r25 < 0) goto L_0x0257;
    L_0x0248:
        r5 = "likecount";
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r0 = r25;
        r6 = r6.getInt(r0);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
    L_0x0257:
        if (r26 < 0) goto L_0x0268;
    L_0x0259:
        r5 = "areulike";
        r0 = r29;
        r6 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r0 = r26;
        r6 = r6.getInt(r0);	 Catch:{ JSONException -> 0x0298 }
        r2.put(r5, r6);	 Catch:{ JSONException -> 0x0298 }
    L_0x0268:
        switch(r31) {
            case 1: goto L_0x0270;
            case 2: goto L_0x029d;
            default: goto L_0x026b;
        };	 Catch:{ JSONException -> 0x0298 }
    L_0x026b:
        r2 = r3 + 1;
        r3 = r2;
        goto L_0x001e;
    L_0x0270:
        r2 = new java.lang.StringBuilder;	 Catch:{ JSONException -> 0x0298 }
        r2.<init>();	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r5 = r0.mTopicList;	 Catch:{ JSONException -> 0x0298 }
        r2 = r2.append(r5);	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r5 = r0.mTopicCursor;	 Catch:{ JSONException -> 0x0298 }
        r5 = r5.getString(r9);	 Catch:{ JSONException -> 0x0298 }
        r2 = r2.append(r5);	 Catch:{ JSONException -> 0x0298 }
        r5 = ",";
        r2 = r2.append(r5);	 Catch:{ JSONException -> 0x0298 }
        r2 = r2.toString();	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r0.mTopicList = r2;	 Catch:{ JSONException -> 0x0298 }
        goto L_0x026b;
    L_0x0298:
        r2 = move-exception;
        r2.printStackTrace();
        goto L_0x026b;
    L_0x029d:
        r2 = r2.toString();	 Catch:{ JSONException -> 0x0298 }
        r0 = r29;
        r0.mGroupData = r2;	 Catch:{ JSONException -> 0x0298 }
        goto L_0x026b;
    L_0x02a6:
        return;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.catfiz.pool.PoolTopicBackupExecutor.messageJSONBuilder(android.database.Cursor, int):void");
    }

    public void dropRunnable() {
    }

    public long getAge() {
        return this.mLiveAge;
    }

    public int getScheduleNum() {
        return this.mScheduleNum;
    }

    public void incraseScheduleNum() {
        this.mScheduleNum += ACTION_TYPE_BACKUP_GROUP_LIST;
    }

    public void run() {
        CatfishResult catfishResult = null;
        switch (this.mActionType) {
            case ACTION_TYPE_BACKUP_EVERYTHING /*0*/:
                Log.d(TAG, "ACTION_TYPE_BACKUP_EVERYTHING");
                Cursor query = new PoolDataStorage(this.mService).getDB().query(PoolDataStorage.TOPIC_TABLE_NAME, null, null, null, null, null, null);
                messageJSONBuilder(query, ACTION_TYPE_BACKUP_GROUP_LIST);
                this.mService.postRunnableToService(new updateTopicList(this.mTopicList, ACTION_TYPE_DELETE_GROUP_DATA));
                this.mTopicList = this.mTopicList.substring(ACTION_TYPE_BACKUP_EVERYTHING, this.mTopicList.length() - 1);
                String[] split = this.mTopicList.split(":");
                int length = split.length;
                for (int i = ACTION_TYPE_BACKUP_EVERYTHING; i < length; i += ACTION_TYPE_BACKUP_GROUP_LIST) {
                    messageJSONBuilder(query, ACTION_TYPE_BACKUP_GROUP_DETAIL);
                    this.mService.postRunnableToService(new updateTopicData(this.mGroupData, split[i], ACTION_TYPE_DELETE_GROUP_DATA));
                }
                break;
            case ACTION_TYPE_BACKUP_GROUP_DETAIL /*2*/:
                Log.d(TAG, "ACTION_TYPE_BACKUP_GROUP_DETAIL");
                messageJSONBuilder(this.mTopicCursor, ACTION_TYPE_BACKUP_GROUP_DETAIL);
                catfishResult = this.catfishRestAPI.storageInsertData(this.mServer, this.mUserpin, this.mGroupData, DATANAME_ID_DETIL + this.mTopicKey);
                break;
            case ACTION_TYPE_BACKUP_GROUP_LIST_WITH_DETAIL /*3*/:
                Log.d(TAG, "ACTION_TYPE_BACKUP_GROUP_LIST_WITH_DETAIL");
                messageJSONBuilder(this.mTopicCursor, ACTION_TYPE_BACKUP_GROUP_LIST);
                this.mService.postRunnableToService(new updateTopicList(this.mTopicList, ACTION_TYPE_DELETE_GROUP_DATA));
                messageJSONBuilder(this.mTopicCursor, ACTION_TYPE_BACKUP_GROUP_DETAIL);
                this.mService.postRunnableToService(new updateTopicData(this.mGroupData, this.mTopicKey, ACTION_TYPE_DELETE_GROUP_DATA));
                break;
            case ACTION_TYPE_UPDATE_GROUP_DATA /*4*/:
                Log.d(TAG, "ACTION_TYPE_UPDATE_GROUP_DATA");
                messageJSONBuilder(this.mTopicCursor, ACTION_TYPE_BACKUP_GROUP_DETAIL);
                catfishResult = this.catfishRestAPI.storageUpdateData(this.mServer, this.mUserpin, "", this.mGroupData, DATANAME_ID_DETIL + this.mTopicKey);
                break;
            case ACTION_TYPE_DELETE_GROUP_DATA /*5*/:
                Log.d(TAG, "ACTION_TYPE_DELETE_GROUP_DATA");
                catfishResult = this.catfishRestAPI.storageDeleteData(this.mServer, this.mUserpin, "", DATANAME_ID_DETIL + this.mTopicKey);
                break;
            case ACTION_TYPE_RESTORE_ALL_GROUP /*6*/:
                break;
            default:
                Log.d(TAG, "!!!!!!!!!!!!!!!!!!! Action undefined");
                break;
        }
        if (catfishResult.hasSuccess()) {
            Log.d(TAG, "----SUCCESS insert data with CODE---" + catfishResult.code + " " + catfishResult.toString());
            switch (this.mActionType) {
                case ACTION_TYPE_RESTORE_ALL_GROUP /*6*/:
                    String str = catfishResult.data_json;
                    break;
                default:
                    Log.d(TAG, "!!!!!!!!!!!!!!!!!!! Action undefined");
                    break;
            }
        } else if (catfishResult.hasNotFound()) {
            Log.d(TAG, "----NOTFOUND insert data with CODE---");
        } else if (catfishResult.hasFailure()) {
            Log.d(TAG, "----FAIL---");
            this.mService.scheduleRunnableToService(this, ACTION_TYPE_BACKUP_EVERYTHING);
        } else {
            Log.e(TAG, "Please Check, Server tell that something wrong in our parameter");
        }
        catfishResult.cleaningup();
    }

    public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        this.catfishRestAPI = catfishRESTAPI;
    }
}
