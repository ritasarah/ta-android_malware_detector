package com.catfiz.pool;

import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishService;
import com.catfiz.service.IDropableRunnable;
import com.catfiz.util.Log;

public class LeaveOrDropTopicExecutor implements IDropableRunnable, Runnable {
    private static final String TAG = "LeaveOrDropTopicExecutor";
    private CatfishRESTAPI catfishRestAPI = null;
    private long mAge = 0;
    private String mObjectOwner = null;
    private long mObjectSequence = 0;
    private String mServer = null;
    private CatfishService mService = null;
    private String mUserpin = null;
    public int scheduleNum = 0;

    public class TryToLeave implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI = null;
        private long mAge = System.currentTimeMillis();
        public int scheduleNum = 0;

        public void dropRunnable() {
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            CatfishResult conferenceLeave = this.catfishRestAPI.conferenceLeave(LeaveOrDropTopicExecutor.this.mServer, LeaveOrDropTopicExecutor.this.mUserpin, LeaveOrDropTopicExecutor.this.mObjectOwner, LeaveOrDropTopicExecutor.this.mObjectSequence);
            if (conferenceLeave.hasSuccess()) {
                Log.d(LeaveOrDropTopicExecutor.TAG, "----LEAVE TOPIC: SUCCESS---");
            } else if (conferenceLeave.hasFailure()) {
                LeaveOrDropTopicExecutor leaveOrDropTopicExecutor = LeaveOrDropTopicExecutor.this;
                LeaveOrDropTopicExecutor.this.mService;
                leaveOrDropTopicExecutor.mServer = CatfishService.getServerHost();
                Log.d(LeaveOrDropTopicExecutor.TAG, "----LEAVE TOPIC FAIL: Reschedule!!!---");
                LeaveOrDropTopicExecutor.this.mService.scheduleRunnableToService(this, 0);
            }
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    public LeaveOrDropTopicExecutor(CatfishService catfishService, String str, String str2, String str3, long j) {
        this.mService = catfishService;
        this.mServer = str;
        this.mUserpin = str2;
        this.mObjectOwner = str3;
        this.mObjectSequence = j;
        this.mAge = System.currentTimeMillis();
    }

    public void dropRunnable() {
    }

    public long getAge() {
        return this.mAge;
    }

    public int getScheduleNum() {
        return this.scheduleNum;
    }

    public void incraseScheduleNum() {
        this.scheduleNum++;
    }

    public void run() {
        CatfishResult conferenceDrop = this.catfishRestAPI.conferenceDrop(this.mServer, this.mUserpin, this.mObjectOwner, this.mObjectSequence);
        if (conferenceDrop.hasSuccess()) {
            Log.d(TAG, "----DROP TOPIC: SUCCESS---");
        } else if (conferenceDrop.hasFailure()) {
            CatfishService catfishService = this.mService;
            this.mServer = CatfishService.getServerHost();
            Log.d(TAG, "----DROP TOPIC FAIL: Reschedule!!!---");
            this.mService.scheduleRunnableToService(this, 0);
        } else {
            this.mService.postRunnableToService(new TryToLeave());
        }
    }

    public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        this.catfishRestAPI = catfishRESTAPI;
    }
}
