package com.catfiz.pool;

import android.net.Uri;
import android.os.Environment;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import com.catfiz.R;
import com.catfiz.pool.PoolDataUploadExecutor.PoolDataType;
import com.catfiz.service.CatfishMessageObject;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishService;
import com.catfiz.service.IDropableRunnable;
import com.catfiz.util.Log;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

public class PoolThumbnailDownloader implements IDropableRunnable, Runnable {
    private static final String TAG = "PoolThumbnailDownloader";
    private static int mChunkMaxSize = AccessibilityNodeInfoCompat.ACTION_COPY;
    private static String mServer = null;
    private static String mUserpin = null;
    private CatfishRESTAPI catfishRestAPI = null;
    private int datatype = 0;
    private long mAge = 0;
    private int mByteend = 0;
    private int mBytestart = 0;
    private byte[] mChunkbuffer = null;
    private FileOutputStream mChunkstream = null;
    private File mDataFile = null;
    private String mDataPath = null;
    private int mDatasize = 0;
    private String mMessage = null;
    private String mMessageComment = null;
    private long mObjSequence = 0;
    private String mSenderpin = null;
    private long mSequence = 0;
    private CatfishService mService = null;
    public String mThumbnailPath = (Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + CatfishService.FILE_PACKAGE_NAME_CATFIZ + "/pool/thumbs/");
    private int mTryToDownload = 0;
    private int mWriten = 0;
    private long maxFileSize = 0;
    private Uri photo_uri = null;
    private boolean requestToDownload = false;
    public int scheduleNum = 0;
    private String topic_key = null;

    class GetDataStorageChunks implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        public int scheduleNum;

        private GetDataStorageChunks() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.scheduleNum = 0;
        }

        public void dropRunnable() {
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            CatfishResult downloadDataChunk = this.catfishRestAPI.downloadDataChunk(PoolThumbnailDownloader.mServer, PoolThumbnailDownloader.mUserpin, PoolThumbnailDownloader.this.mSenderpin, PoolThumbnailDownloader.this.mObjSequence, PoolThumbnailDownloader.this.mBytestart, PoolThumbnailDownloader.this.mByteend, PoolThumbnailDownloader.this.mChunkstream);
            if (downloadDataChunk.hasSuccess()) {
                if (downloadDataChunk.chunksize > 0) {
                    PoolThumbnailDownloader.this.mWriten = PoolThumbnailDownloader.this.mWriten + downloadDataChunk.chunksize;
                }
                if (PoolThumbnailDownloader.this.mWriten < PoolThumbnailDownloader.this.mDatasize) {
                    PoolThumbnailDownloader.mChunkMaxSize = CatfishRESTAPI.growChunkSize(PoolThumbnailDownloader.mChunkMaxSize);
                    PoolThumbnailDownloader.this.mBytestart = PoolThumbnailDownloader.this.mByteend + 1;
                    PoolThumbnailDownloader.this.mByteend = (PoolThumbnailDownloader.this.mBytestart + PoolThumbnailDownloader.mChunkMaxSize) - 1;
                    PoolThumbnailDownloader.this.mTryToDownload = 0;
                    this.mAge = System.currentTimeMillis();
                    PoolThumbnailDownloader.this.mService.postToServiceHandler(this, 2);
                    downloadDataChunk.cleaningup();
                    return;
                }
                downloadDataChunk.cleaningup();
            } else if (downloadDataChunk.hasFailure()) {
                if (downloadDataChunk.chunksize > 0) {
                    PoolThumbnailDownloader.this.mWriten = PoolThumbnailDownloader.this.mWriten + downloadDataChunk.chunksize;
                    if (PoolThumbnailDownloader.this.mWriten < PoolThumbnailDownloader.this.mDatasize) {
                        PoolThumbnailDownloader.this.mBytestart = PoolThumbnailDownloader.this.mWriten;
                        PoolThumbnailDownloader.this.mByteend = (PoolThumbnailDownloader.this.mWriten + PoolThumbnailDownloader.mChunkMaxSize) - 1;
                    } else {
                        downloadDataChunk.cleaningup();
                        return;
                    }
                }
                PoolThumbnailDownloader.mChunkMaxSize = CatfishRESTAPI.fallbackChunkSize(PoolThumbnailDownloader.mChunkMaxSize);
                PoolThumbnailDownloader.mServer = CatfishService.getServerHost();
                if (PoolThumbnailDownloader.this.mTryToDownload < 5) {
                    PoolThumbnailDownloader.this.mService.scheduleRunnableToService(this, 2);
                    PoolThumbnailDownloader.this.mTryToDownload = PoolThumbnailDownloader.this.mTryToDownload + 1;
                } else {
                    dropRunnable();
                }
                downloadDataChunk.cleaningup();
            } else if (downloadDataChunk.hasNotFound()) {
                if (PoolThumbnailDownloader.this.mTryToDownload < 5) {
                    PoolThumbnailDownloader.this.mService.scheduleRunnableToService(this, 2);
                    PoolThumbnailDownloader.this.mTryToDownload = PoolThumbnailDownloader.this.mTryToDownload + 1;
                }
                downloadDataChunk.cleaningup();
            } else {
                try {
                    PoolThumbnailDownloader.this.mChunkstream.flush();
                    PoolThumbnailDownloader.this.mChunkstream.close();
                } catch (Exception e) {
                }
                PoolThumbnailDownloader.this.mChunkbuffer = null;
                downloadDataChunk.cleaningup();
            }
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    class PoolNotifyDownloadCompleate implements Runnable {
        private PoolNotifyDownloadCompleate() {
        }

        public void run() {
            PoolDataStorage poolDataStorage = new PoolDataStorage(PoolThumbnailDownloader.this.mService);
            CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
            catfishMessageObject.topic_key = PoolThumbnailDownloader.this.topic_key;
            catfishMessageObject.sequence = PoolThumbnailDownloader.this.mSequence;
            if (PoolThumbnailDownloader.this.datatype == PoolDataType.VOICE.ordinal()) {
                catfishMessageObject.message = PoolThumbnailDownloader.this.mService.getString(R.string.voice_received);
            } else if (PoolThumbnailDownloader.this.datatype == PoolDataType.TOPIC_IMAGE.ordinal()) {
                poolDataStorage.deleteSingleDiscussConverence(PoolThumbnailDownloader.this.topic_key, PoolThumbnailDownloader.this.mSequence);
                catfishMessageObject.image_path = PoolThumbnailDownloader.this.mDataFile.getAbsolutePath();
                if (PoolThumbnailDownloader.this.photo_uri != null) {
                    catfishMessageObject.imagethumb_uri = PoolThumbnailDownloader.this.photo_uri.toString();
                }
                poolDataStorage.updateSingleTopicContent(catfishMessageObject);
            } else if (PoolThumbnailDownloader.this.datatype == PoolDataType.TOPIC_ATTACH.ordinal()) {
                poolDataStorage.deleteSingleDiscussConverence(PoolThumbnailDownloader.this.topic_key, PoolThumbnailDownloader.this.mSequence);
                catfishMessageObject.datafile_path = PoolThumbnailDownloader.this.mDataFile.getAbsolutePath();
                poolDataStorage.updateSingleTopicContent(catfishMessageObject);
            } else if (PoolThumbnailDownloader.this.datatype == PoolDataType.FRIEND_PP.ordinal()) {
                poolDataStorage.deleteSingleDiscussConverence(PoolThumbnailDownloader.this.topic_key, PoolThumbnailDownloader.this.mSequence);
            } else if (PoolThumbnailDownloader.this.datatype == PoolDataType.VIDEO.ordinal()) {
                catfishMessageObject.message = "Video Chat Received";
                catfishMessageObject.datafile_path = PoolThumbnailDownloader.this.mDataFile.getAbsolutePath();
                if (PoolThumbnailDownloader.this.photo_uri != null) {
                    catfishMessageObject.imagethumb_uri = PoolThumbnailDownloader.this.photo_uri.toString();
                }
            } else {
                catfishMessageObject.message = PoolThumbnailDownloader.this.mService.getString(R.string.file) + " : " + PoolThumbnailDownloader.this.mDataFile.getName().replace(String.valueOf(PoolThumbnailDownloader.this.mSequence), "") + " " + PoolThumbnailDownloader.this.mService.getString(R.string.file_received);
                if (PoolThumbnailDownloader.this.mMessageComment != null) {
                    catfishMessageObject.message += "\n" + PoolThumbnailDownloader.this.mService.getString(R.string.message) + " : " + PoolThumbnailDownloader.this.mMessageComment;
                }
                catfishMessageObject.datafile_path = PoolThumbnailDownloader.this.mDataFile.getAbsolutePath();
                if (PoolThumbnailDownloader.this.photo_uri != null) {
                    catfishMessageObject.imagethumb_uri = PoolThumbnailDownloader.this.photo_uri.toString();
                }
            }
            catfishMessageObject.deliverystatus = MessageDeliveryStatus.BCASTRECEIVED;
            catfishMessageObject.rcvtimestamp = CatfishRESTAPI.uniqueMonotonicSequence();
            poolDataStorage.setUnReadItemInTopic(PoolThumbnailDownloader.this.topic_key, 1);
            poolDataStorage.updateDiscussContent(catfishMessageObject);
            PoolThumbnailDownloader.this.mService.signalNewPoolMessageReceived(catfishMessageObject.topic_key);
        }
    }

    public PoolThumbnailDownloader(CatfishService catfishService, String str, String str2, String str3, String str4, String str5, long j, long j2) {
        this.mService = catfishService;
        mServer = str;
        mUserpin = str2;
        this.topic_key = str3;
        this.mSenderpin = str4;
        this.mSequence = j;
        this.mObjSequence = this.mSequence;
        this.mMessage = str5;
        this.mDataPath = this.mThumbnailPath + this.mMessage;
        this.mDataFile = new File(this.mDataPath);
        this.mAge = System.currentTimeMillis();
    }

    public void dropRunnable() {
    }

    public long getAge() {
        return this.mAge;
    }

    public int getScheduleNum() {
        return this.scheduleNum;
    }

    public void incraseScheduleNum() {
        this.scheduleNum++;
    }

    public void run() {
        String externalStorageState = Environment.getExternalStorageState();
        if (externalStorageState.equals("mounted")) {
            File parentFile = this.mDataFile.getParentFile();
            if (!parentFile.exists()) {
                if (parentFile.mkdirs()) {
                    File file = new File(parentFile, ".nomedia");
                    if (!file.exists()) {
                        try {
                            file.createNewFile();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                } else {
                    return;
                }
            }
            CatfishResult dataStorageInfo = this.catfishRestAPI.getDataStorageInfo(mServer, mUserpin, this.mSenderpin, this.mObjSequence);
            if (dataStorageInfo.hasFailure()) {
                mServer = CatfishService.getServerHost();
                if (this.mTryToDownload < 5) {
                    this.mService.scheduleRunnableToService(this, 2);
                    this.mTryToDownload++;
                } else {
                    dropRunnable();
                }
                dataStorageInfo.cleaningup();
                return;
            } else if (dataStorageInfo.hasNotFound()) {
                if (this.mTryToDownload < 5) {
                    this.mService.scheduleRunnableToService(this, 2);
                    this.mTryToDownload++;
                }
                dataStorageInfo.cleaningup();
                return;
            } else if (dataStorageInfo.hasSuccess()) {
                this.mDatasize = dataStorageInfo.datasize;
                if (this.mByteend == 0) {
                    this.mByteend = mChunkMaxSize - 1;
                }
                try {
                    this.mChunkstream = new FileOutputStream(this.mDataFile, true);
                } catch (FileNotFoundException e2) {
                    e2.printStackTrace();
                }
                this.mService.postToServiceHandler(new GetDataStorageChunks(), 2);
                return;
            } else {
                Log.e(TAG, "VBCAST RECEIVE: ERROR: DROP !!!");
                dataStorageInfo.cleaningup();
                return;
            }
        }
        Log.e(TAG, "VBCAST RECEIVE: media not mounted in is state: " + externalStorageState + ":DROP !!!");
    }

    public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        this.catfishRestAPI = catfishRESTAPI;
    }
}
