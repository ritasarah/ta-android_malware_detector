package com.catfiz.pool;

import android.content.SharedPreferences;
import android.database.Cursor;
import android.preference.PreferenceManager;
import com.catfiz.R;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishMessageObject;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.CatfishService;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.service.ICatfishClientInterface;
import com.catfiz.service.IDropableRunnable;
import com.catfiz.service.LongMessageExecutor;
import com.catfiz.service.PPFDownloadExecutor;
import com.catfiz.service.PinManagerV2;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.service.uisvcexec.GetDataStorageInfoExecutor;
import com.catfiz.util.FizzlinkUtil;
import com.catfiz.util.Log;
import com.catfiz.util.ObjectLockManager;
import com.catfiz.util.Utils;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.protocol.HTTP;
import org.json.JSONObject;

public class PoolServiceExecutor implements IDropableRunnable, Runnable {
    public static final int ACTIONDATABASE_GETMESSAGE = 0;
    public static final int ACTIONDATABASE_GETTOPICMESSAGE = 1;
    public static final int ACTIONDATABASE_REFRESHMEMBERLIST = 6;
    public static final int ACTIONDATABASE_SAVELONGMESSAGE = 5;
    public static final int ACTIONDATABASE_UPDATEMEMBERLIST = 3;
    public static final int ACTIONDATABASE_UPDATEMEMBERNAME = 2;
    public static final int ACTIONDATABASE_UPDATEOWNERNAME = 4;
    public static final int ACTIONSERVICE_GETMEMBER = 4;
    public static final int ACTIONSERVICE_GETMESSAGE = 0;
    public static final int ACTIONSERVICE_GETOWNERNAME = 5;
    public static final int ACTIONSERVICE_GETTOPICMESSAGE = 1;
    public static final int ACTIONSERVICE_INVITEFRIEND = 2;
    public static final int ACTIONSERVICE_REFRESHMEMBER = 6;
    private static final int NEED_TO_NOTIF_COUNT = 500;
    private static final int NEED_TO_NOTIF_COUNT_INCREMENT = 100;
    private static final String TAG = "PoolServiceExecutor";
    private int action_database;
    private int action_service;
    private int blocknum = ACTIONSERVICE_GETMESSAGE;
    private CatfishRESTAPI catfishRestAPI = null;
    private FriendListDataStorage fds = null;
    private int inc = ACTIONSERVICE_GETMESSAGE;
    private long mAge = 0;
    private String mGetMessageTopicKey;
    private CatfishResult mResult = null;
    private String mServer = null;
    private CatfishService mService = null;
    private String mUserpin = null;
    private CatfishMessageObject msg = null;
    private PoolDataStorage pds = null;
    private int scheduleNum = ACTIONSERVICE_GETMESSAGE;

    /* synthetic */ class AnonymousClass1 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType = new int[MessageType.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.STIKER_MESSAGE_POOL.ordinal()] = PoolServiceExecutor.ACTIONSERVICE_GETTOPICMESSAGE;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SHARE_SLINK_AT_POOL.ordinal()] = PoolServiceExecutor.ACTIONSERVICE_INVITEFRIEND;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.MESSAGE.ordinal()] = PoolServiceExecutor.ACTIONDATABASE_UPDATEMEMBERLIST;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.OBJECTCOMMENT_POOL.ordinal()] = PoolServiceExecutor.ACTIONSERVICE_GETMEMBER;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.NEW_POOL_TITLE.ordinal()] = PoolServiceExecutor.ACTIONSERVICE_GETOWNERNAME;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.NEW_POOL_TOPIC_MESSAGE.ordinal()] = PoolServiceExecutor.ACTIONSERVICE_REFRESHMEMBER;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.QUOTE.ordinal()] = 7;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.PERSONCONTACT.ordinal()] = 8;
            } catch (NoSuchFieldError e8) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.LIKE.ordinal()] = 9;
            } catch (NoSuchFieldError e9) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.UNLIKE.ordinal()] = 10;
            } catch (NoSuchFieldError e10) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTCONFERENCE.ordinal()] = 11;
            } catch (NoSuchFieldError e11) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTCONFERENCE_VIDEO.ordinal()] = 12;
            } catch (NoSuchFieldError e12) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTCONFERENCE_LONGMESSAGE.ordinal()] = 13;
            } catch (NoSuchFieldError e13) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.POOL_THUMBNAIL_DATA.ordinal()] = 14;
            } catch (NoSuchFieldError e14) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.CONFRC_TOPIC_DATA.ordinal()] = 15;
            } catch (NoSuchFieldError e15) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.LONG_MESSAGE.ordinal()] = 16;
            } catch (NoSuchFieldError e16) {
            }
        }
    }

    public class LongMessageRunnable implements Runnable {
        private ICatfishClientInterface mInterfaceClient = null;
        private CatfishMessageObject message = null;

        public LongMessageRunnable(CatfishMessageObject catfishMessageObject) {
            this.message = catfishMessageObject;
        }

        public void run() {
            String concateJSONMessage = new LongMessageExecutor().concateJSONMessage(this.message.message);
            if (concateJSONMessage != null) {
                this.message.message = concateJSONMessage;
                PoolServiceExecutor.this.mService.postRunnableToDbThread(new PoolDatabaseExecutor(PoolServiceExecutor.this.mService, PoolServiceExecutor.ACTIONSERVICE_GETOWNERNAME, this.message));
            }
        }
    }

    public class PoolDatabaseExecutor implements Runnable {
        public PoolDatabaseExecutor(CatfishService catfishService, int i, CatfishMessageObject catfishMessageObject) {
            PoolServiceExecutor.this.pds = new PoolDataStorage(PoolServiceExecutor.this.mService);
            PoolServiceExecutor.this.fds = new FriendListDataStorage(PoolServiceExecutor.this.mService);
            PoolServiceExecutor.this.msg = catfishMessageObject;
            PoolServiceExecutor.this.action_database = i;
        }

        public PoolDatabaseExecutor(CatfishService catfishService, int i, CatfishMessageObject catfishMessageObject, CatfishResult catfishResult) {
            PoolServiceExecutor.this.pds = new PoolDataStorage(PoolServiceExecutor.this.mService);
            PoolServiceExecutor.this.fds = new FriendListDataStorage(PoolServiceExecutor.this.mService);
            PoolServiceExecutor.this.msg = catfishMessageObject;
            PoolServiceExecutor.this.mResult = catfishResult;
            PoolServiceExecutor.this.action_database = i;
        }

        private boolean isMessageCountNeedToNotif(Cursor cursor) {
            return false;
        }

        public void run() {
            final String str;
            CatfishMessageObject catfishMessageObject;
            String str2;
            ArrayList arrayList;
            int size;
            int i;
            CatfishMessageObject catfishMessageObject2;
            switch (PoolServiceExecutor.this.action_database) {
                case PoolServiceExecutor.ACTIONSERVICE_GETMESSAGE /*0*/:
                    int i2;
                    CatfishMessageObject catfishMessageObject3;
                    String str3;
                    String string;
                    ArrayList arrayList2 = new ArrayList();
                    ArrayList arrayList3 = new ArrayList();
                    int size2 = PoolServiceExecutor.this.mResult.messages.size();
                    for (i2 = PoolServiceExecutor.ACTIONSERVICE_GETMESSAGE; i2 < size2; i2 += PoolServiceExecutor.ACTIONSERVICE_GETTOPICMESSAGE) {
                        switch (AnonymousClass1.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).messagetype.ordinal()]) {
                            case PoolServiceExecutor.ACTIONSERVICE_GETTOPICMESSAGE /*1*/:
                                ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).message = "Sent a sticker";
                                break;
                            case PoolServiceExecutor.ACTIONSERVICE_INVITEFRIEND /*2*/:
                            case PoolServiceExecutor.ACTIONDATABASE_UPDATEMEMBERLIST /*3*/:
                                break;
                            case PoolServiceExecutor.ACTIONSERVICE_GETMEMBER /*4*/:
                                catfishMessageObject3 = new CatfishMessageObject();
                                str3 = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).message;
                                catfishMessageObject3.senderpin = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).senderpin;
                                catfishMessageObject3.sendername = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).sendername;
                                catfishMessageObject3.sequence = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).sequence;
                                catfishMessageObject3.rcvtimestamp = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).rcvtimestamp;
                                catfishMessageObject3.message = PoolServiceExecutor.this.getFromJson(str3, ServerMessageDataStorage.MESSAGE);
                                catfishMessageObject3.deliverystatus = MessageDeliveryStatus.RECEIVED;
                                catfishMessageObject3.object_owner = PoolServiceExecutor.this.getFromJson(str3, "objectowner");
                                catfishMessageObject3.object_sequence = Long.parseLong(PoolServiceExecutor.this.getFromJson(str3, ServerMessageDataStorage.OBJECTSEQUENCE));
                                catfishMessageObject3.messagetype = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).messagetype;
                                catfishMessageObject3.conversation_key = "oc:" + catfishMessageObject3.object_owner + ":" + catfishMessageObject3.object_sequence;
                                new CatfishDataStorage(PoolServiceExecutor.this.mService).storeObjectComment(catfishMessageObject3);
                                PoolServiceExecutor.this.pds.increaseObjCommCount(catfishMessageObject3);
                                continue;
                            case PoolServiceExecutor.ACTIONSERVICE_GETOWNERNAME /*5*/:
                                catfishMessageObject3 = new CatfishMessageObject();
                                catfishMessageObject3.topic_key = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_owner + ":" + ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_sequence;
                                catfishMessageObject3.title = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).message;
                                PoolServiceExecutor.this.pds.updateTopicTitleNMessage(catfishMessageObject3);
                                continue;
                            case PoolServiceExecutor.ACTIONSERVICE_REFRESHMEMBER /*6*/:
                                catfishMessageObject3 = new CatfishMessageObject();
                                catfishMessageObject3.topic_key = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_owner + ":" + ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_sequence;
                                catfishMessageObject3.message = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).message;
                                PoolServiceExecutor.this.pds.updateTopicTitleNMessage(catfishMessageObject3);
                                continue;
                            case SimpleLog.LOG_LEVEL_OFF /*7*/:
                                if (!PoolServiceExecutor.this.pds.isPoolMessageExist(((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_owner + ":" + ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_sequence, ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).sequence)) {
                                    arrayList2.add(PoolServiceExecutor.this.mResult.messages.get(i2));
                                    break;
                                }
                                continue;
                            case Utils.FILE_TYPE_INSTALLER /*8*/:
                                if (!PoolServiceExecutor.this.pds.isPoolMessageExist(((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_owner + ":" + ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_sequence, ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).sequence)) {
                                    ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).deliverystatus = MessageDeliveryStatus.BCASTQUEUE;
                                    arrayList2.add(PoolServiceExecutor.this.mResult.messages.get(i2));
                                    final long j = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).sequence;
                                    str = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_owner;
                                    final long j2 = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_sequence;
                                    final String str4 = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).message.split(":")[PoolServiceExecutor.ACTIONSERVICE_GETMESSAGE];
                                    if (!PoolServiceExecutor.this.fds.isPinAFriend(str4)) {
                                        final long j3 = j;
                                        final String str5 = str;
                                        final long j4 = j2;
                                        PoolServiceExecutor.this.mService.postRunnableToService(new PPFDownloadExecutor(PoolServiceExecutor.this.mService, PoolServiceExecutor.this.mServer, PoolServiceExecutor.this.mUserpin, ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).message.split(":")[PoolServiceExecutor.ACTIONSERVICE_GETMESSAGE]) {
                                            public void onDownloadPhotoFail() {
                                                super.onDownloadPhotoFail();
                                                PoolServiceExecutor.this.mService.postRunnableToDbThread(new Runnable() {
                                                    public void run() {
                                                        PoolDataStorage poolDataStorage = new PoolDataStorage(PoolServiceExecutor.this.mService);
                                                        CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
                                                        catfishMessageObject.sequence = j3;
                                                        catfishMessageObject.deliverystatus = MessageDeliveryStatus.BCASTRECEIVED;
                                                        poolDataStorage.updateDiscussContent(catfishMessageObject);
                                                        String str = str5 + ":" + String.valueOf(j4);
                                                        poolDataStorage.setUnReadItemInTopic(str, PoolServiceExecutor.ACTIONSERVICE_GETTOPICMESSAGE);
                                                        PoolServiceExecutor.this.mService.signalNewPoolMessageReceived(str);
                                                    }
                                                });
                                            }

                                            public void onDownloadPhotoSuccess() {
                                                super.onDownloadPhotoSuccess();
                                                File file = new File(CatfishPhotoStorage.getPhotoStorageDir(PoolServiceExecutor.this.mService), "pff" + str4 + ".jpg");
                                                File file2 = new File(PoolLimitedDownloadExecutor.mParentFilePath, "pff" + str4 + ".jpg");
                                                if (!file2.getParentFile().exists()) {
                                                    file2.getParentFile().mkdir();
                                                    File file3 = new File(file2.getParentFile(), ".nomedia");
                                                    if (!file3.exists()) {
                                                        try {
                                                            file3.createNewFile();
                                                        } catch (IOException e) {
                                                            e.printStackTrace();
                                                        }
                                                    }
                                                }
                                                file.renameTo(file2);
                                                PoolServiceExecutor.this.mService.postRunnableToDbThread(new Runnable() {
                                                    public void run() {
                                                        PoolDataStorage poolDataStorage = new PoolDataStorage(PoolServiceExecutor.this.mService);
                                                        CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
                                                        catfishMessageObject.sequence = j3;
                                                        catfishMessageObject.deliverystatus = MessageDeliveryStatus.BCASTRECEIVED;
                                                        poolDataStorage.updateDiscussContent(catfishMessageObject);
                                                        String str = str5 + ":" + String.valueOf(j4);
                                                        poolDataStorage.setUnReadItemInTopic(str, PoolServiceExecutor.ACTIONSERVICE_GETTOPICMESSAGE);
                                                        PoolServiceExecutor.this.mService.signalNewPoolMessageReceived(str);
                                                    }
                                                });
                                            }
                                        }, PoolServiceExecutor.ACTIONSERVICE_INVITEFRIEND);
                                        break;
                                    }
                                    Log.d(PoolServiceExecutor.TAG, "SUDAH MENJADI FRIEND, UPDATE DB SAJA");
                                    PoolServiceExecutor.this.mService.postRunnableToDbThread(new Runnable() {
                                        public void run() {
                                            PoolDataStorage poolDataStorage = new PoolDataStorage(PoolServiceExecutor.this.mService);
                                            CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
                                            catfishMessageObject.sequence = j;
                                            catfishMessageObject.deliverystatus = MessageDeliveryStatus.BCASTRECEIVED;
                                            poolDataStorage.updateDiscussContent(catfishMessageObject);
                                            String str = str + ":" + String.valueOf(j2);
                                            poolDataStorage.setUnReadItemInTopic(str, PoolServiceExecutor.ACTIONSERVICE_GETTOPICMESSAGE);
                                            PoolServiceExecutor.this.mService.signalNewPoolMessageReceived(str);
                                        }
                                    });
                                    break;
                                }
                                continue;
                            case HTTP.HT /*9*/:
                                catfishMessageObject3 = CatfishMessageObject.obtain();
                                catfishMessageObject3.senderpin = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).senderpin;
                                catfishMessageObject3.sendername = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).sendername;
                                catfishMessageObject3.sequence = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).sequence;
                                catfishMessageObject3.rcvtimestamp = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).rcvtimestamp;
                                catfishMessageObject3.topic_key = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_owner + ":" + ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_sequence;
                                catfishMessageObject3.object_owner = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).message.split(":")[PoolServiceExecutor.ACTIONSERVICE_GETMESSAGE];
                                catfishMessageObject3.object_sequence = Long.parseLong(((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).message.split(":")[PoolServiceExecutor.ACTIONSERVICE_GETTOPICMESSAGE]);
                                PoolServiceExecutor.this.pds.addSingleLike(catfishMessageObject3);
                                PoolServiceExecutor.this.mService.signalResponsePoolMessageReceived(catfishMessageObject3.topic_key);
                                catfishMessageObject3.recycle();
                                continue;
                            case HTTP.LF /*10*/:
                                catfishMessageObject3 = CatfishMessageObject.obtain();
                                catfishMessageObject3.senderpin = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).senderpin;
                                catfishMessageObject3.sendername = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).sendername;
                                catfishMessageObject3.sequence = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).sequence;
                                catfishMessageObject3.rcvtimestamp = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).rcvtimestamp;
                                catfishMessageObject3.topic_key = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_owner + ":" + ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_sequence;
                                catfishMessageObject3.object_owner = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).message.split(":")[PoolServiceExecutor.ACTIONSERVICE_GETMESSAGE];
                                catfishMessageObject3.object_sequence = Long.parseLong(((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).message.split(":")[PoolServiceExecutor.ACTIONSERVICE_GETTOPICMESSAGE]);
                                PoolServiceExecutor.this.pds.deleteSingleLike(catfishMessageObject3.topic_key, catfishMessageObject3.object_sequence, catfishMessageObject3.senderpin);
                                PoolServiceExecutor.this.mService.signalResponsePoolMessageReceived(catfishMessageObject3.topic_key);
                                catfishMessageObject3.recycle();
                                continue;
                            case PinManagerV2.REGCODE_HASOLDACC /*11*/:
                                Log.d(PoolServiceExecutor.TAG, "BCASTCONFERENCE: sender: " + ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).senderpin);
                                if (!PoolServiceExecutor.this.pds.isPoolMessageExist(((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_owner + ":" + ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_sequence, ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).sequence)) {
                                    arrayList2.add(PoolServiceExecutor.this.mResult.messages.get(i2));
                                    arrayList3.add(PoolServiceExecutor.this.mResult.messages.get(i2));
                                    break;
                                }
                                continue;
                            case PinManagerV2.REGCODE_MAX /*12*/:
                                Log.d(PoolServiceExecutor.TAG, "BCASTCONFERENCE_VIDEO: sender: " + ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).senderpin);
                                if (!PoolServiceExecutor.this.pds.isPoolMessageExist(((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_owner + ":" + ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_sequence, ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).sequence)) {
                                    catfishMessageObject = (CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2);
                                    PoolServiceExecutor.this.mService.postRunnableToService(new GetDataStorageInfoExecutor(null, PoolServiceExecutor.this.mService, PoolServiceExecutor.this.mServer, null, PoolServiceExecutor.this.mUserpin, catfishMessageObject.senderpin, catfishMessageObject.sequence, PoolServiceExecutor.ACTIONSERVICE_GETTOPICMESSAGE));
                                    arrayList2.add(PoolServiceExecutor.this.mResult.messages.get(i2));
                                    arrayList3.add(PoolServiceExecutor.this.mResult.messages.get(i2));
                                    break;
                                }
                                continue;
                            case HTTP.CR /*13*/:
                                if (!PoolServiceExecutor.this.pds.isPoolMessageExist(((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_owner + ":" + ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_sequence, ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).sequence)) {
                                    arrayList2.add(PoolServiceExecutor.this.mResult.messages.get(i2));
                                    arrayList3.add(PoolServiceExecutor.this.mResult.messages.get(i2));
                                }
                                Log.d(PoolServiceExecutor.TAG, " ---LONG MESSAGE--- BCASTLONGMESSAGE ");
                                continue;
                            case R.styleable.Toolbar_titleMarginEnd /*14*/:
                                arrayList3.add(PoolServiceExecutor.this.mResult.messages.get(i2));
                                continue;
                            case R.styleable.Toolbar_titleMarginTop /*15*/:
                                if (!PoolServiceExecutor.this.pds.isPoolMessageExist(((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_owner + ":" + ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_sequence, ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).sequence)) {
                                    catfishMessageObject = (CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2);
                                    PoolServiceExecutor.this.mService.postRunnableToService(new GetDataStorageInfoExecutor(null, PoolServiceExecutor.this.mService, PoolServiceExecutor.this.mServer, null, PoolServiceExecutor.this.mUserpin, catfishMessageObject.senderpin, catfishMessageObject.sequence, PoolServiceExecutor.ACTIONSERVICE_GETTOPICMESSAGE));
                                    arrayList2.add(PoolServiceExecutor.this.mResult.messages.get(i2));
                                    arrayList3.add(PoolServiceExecutor.this.mResult.messages.get(i2));
                                    break;
                                }
                                continue;
                            case FizzlinkUtil.S_MP3 /*16*/:
                                PoolServiceExecutor.this.mService.postRunnableToLongMessageThread(new LongMessageRunnable((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)));
                                continue;
                            default:
                                break;
                        }
                        if (!PoolServiceExecutor.this.pds.isPoolMessageExist(((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_owner + ":" + ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).object_sequence, ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i2)).sequence)) {
                            arrayList2.add(PoolServiceExecutor.this.mResult.messages.get(i2));
                        }
                    }
                    size2 = arrayList2.size();
                    PoolServiceExecutor.this.pds.storeDiscuss(arrayList2);
                    PoolServiceExecutor.this.saveToNotificationDataList(arrayList2);
                    int size3 = arrayList3.size();
                    for (i2 = PoolServiceExecutor.ACTIONSERVICE_GETMESSAGE; i2 < size3; i2 += PoolServiceExecutor.ACTIONSERVICE_GETTOPICMESSAGE) {
                        switch (AnonymousClass1.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[((CatfishMessageObject) arrayList3.get(i2)).messagetype.ordinal()]) {
                            case PinManagerV2.REGCODE_HASOLDACC /*11*/:
                            case PinManagerV2.REGCODE_MAX /*12*/:
                                int i3;
                                SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(PoolServiceExecutor.this.mService);
                                int i4 = PoolServiceExecutor.ACTIONSERVICE_GETMESSAGE;
                                if (defaultSharedPreferences.getBoolean("auto_download", false)) {
                                    string = defaultSharedPreferences.getString("autoDownloadLimit", "500Kb");
                                    if (string.compareTo("500") == 0) {
                                        i4 = 500000;
                                    }
                                    if (string.compareTo("1") == 0) {
                                        i4 = 1000000;
                                    }
                                    if (string.compareTo("5") == 0) {
                                        i4 = 5000000;
                                    }
                                    if (string.compareTo("10") == 0) {
                                        i4 = 10000000;
                                    }
                                    if (string.compareTo("unlimit") == 0) {
                                        i3 = 50000000;
                                        catfishMessageObject3 = new CatfishMessageObject();
                                        catfishMessageObject3.sequence = ((CatfishMessageObject) arrayList3.get(i2)).sequence;
                                        if (((CatfishMessageObject) arrayList3.get(i2)).message.startsWith("file:")) {
                                            catfishMessageObject3.message = ((CatfishMessageObject) arrayList3.get(i2)).message;
                                        } else if (((CatfishMessageObject) arrayList3.get(i2)).message.startsWith("voice:")) {
                                            catfishMessageObject3.message = ((CatfishMessageObject) arrayList3.get(i2)).message;
                                        } else {
                                            catfishMessageObject3.message = ((CatfishMessageObject) arrayList3.get(i2)).message;
                                        }
                                        catfishMessageObject3.deliverystatus = MessageDeliveryStatus.BCASTQUEUE;
                                        catfishMessageObject3.slink = catfishMessageObject3.message.split(":")[PoolServiceExecutor.ACTIONDATABASE_UPDATEMEMBERLIST];
                                        Log.d(PoolServiceExecutor.TAG, "Slink for received data pool");
                                        PoolServiceExecutor.this.pds.updateDiscussContent(catfishMessageObject3);
                                        ((CatfishMessageObject) arrayList3.get(i2)).topic_key = ((CatfishMessageObject) arrayList3.get(i2)).object_owner + ":" + ((CatfishMessageObject) arrayList3.get(i2)).object_sequence;
                                        PoolServiceExecutor.this.mService.postRunnableToService(new PoolLimitedDownloadExecutor(PoolServiceExecutor.this.mService, PoolServiceExecutor.this.mServer, PoolServiceExecutor.this.mUserpin, ((CatfishMessageObject) arrayList3.get(i2)).topic_key, ((CatfishMessageObject) arrayList3.get(i2)).senderpin, ((CatfishMessageObject) arrayList3.get(i2)).message, ((CatfishMessageObject) arrayList3.get(i2)).sequence, ((CatfishMessageObject) arrayList3.get(i2)).data_sequence, (long) i3, false, PoolServiceExecutor.ACTIONSERVICE_GETMESSAGE, PoolServiceExecutor.ACTIONSERVICE_GETMESSAGE, PoolServiceExecutor.ACTIONSERVICE_GETMESSAGE, null, ((CatfishMessageObject) arrayList3.get(i2)).messagetype.ordinal()));
                                        break;
                                    }
                                }
                                i3 = i4;
                                catfishMessageObject3 = new CatfishMessageObject();
                                catfishMessageObject3.sequence = ((CatfishMessageObject) arrayList3.get(i2)).sequence;
                                if (((CatfishMessageObject) arrayList3.get(i2)).message.startsWith("file:")) {
                                    catfishMessageObject3.message = ((CatfishMessageObject) arrayList3.get(i2)).message;
                                } else if (((CatfishMessageObject) arrayList3.get(i2)).message.startsWith("voice:")) {
                                    catfishMessageObject3.message = ((CatfishMessageObject) arrayList3.get(i2)).message;
                                } else {
                                    catfishMessageObject3.message = ((CatfishMessageObject) arrayList3.get(i2)).message;
                                }
                                catfishMessageObject3.deliverystatus = MessageDeliveryStatus.BCASTQUEUE;
                                try {
                                    catfishMessageObject3.slink = catfishMessageObject3.message.split(":")[PoolServiceExecutor.ACTIONDATABASE_UPDATEMEMBERLIST];
                                    Log.d(PoolServiceExecutor.TAG, "Slink for received data pool");
                                } catch (Exception e) {
                                    Log.e(PoolServiceExecutor.TAG, "Error:" + e.toString());
                                }
                                PoolServiceExecutor.this.pds.updateDiscussContent(catfishMessageObject3);
                                ((CatfishMessageObject) arrayList3.get(i2)).topic_key = ((CatfishMessageObject) arrayList3.get(i2)).object_owner + ":" + ((CatfishMessageObject) arrayList3.get(i2)).object_sequence;
                                PoolServiceExecutor.this.mService.postRunnableToService(new PoolLimitedDownloadExecutor(PoolServiceExecutor.this.mService, PoolServiceExecutor.this.mServer, PoolServiceExecutor.this.mUserpin, ((CatfishMessageObject) arrayList3.get(i2)).topic_key, ((CatfishMessageObject) arrayList3.get(i2)).senderpin, ((CatfishMessageObject) arrayList3.get(i2)).message, ((CatfishMessageObject) arrayList3.get(i2)).sequence, ((CatfishMessageObject) arrayList3.get(i2)).data_sequence, (long) i3, false, PoolServiceExecutor.ACTIONSERVICE_GETMESSAGE, PoolServiceExecutor.ACTIONSERVICE_GETMESSAGE, PoolServiceExecutor.ACTIONSERVICE_GETMESSAGE, null, ((CatfishMessageObject) arrayList3.get(i2)).messagetype.ordinal()));
                            case HTTP.CR /*13*/:
                                ((CatfishMessageObject) arrayList3.get(i2)).topic_key = ((CatfishMessageObject) arrayList3.get(i2)).object_owner + ":" + ((CatfishMessageObject) arrayList3.get(i2)).object_sequence;
                                PoolServiceExecutor.this.mService.postRunnableToService(new LongMessageDownloadExecutor(PoolServiceExecutor.this.mService, PoolServiceExecutor.this.mServer, PoolServiceExecutor.this.mUserpin, ((CatfishMessageObject) arrayList3.get(i2)).topic_key, ((CatfishMessageObject) arrayList3.get(i2)).senderpin, ((CatfishMessageObject) arrayList3.get(i2)).sequence, ((CatfishMessageObject) arrayList3.get(i2)).data_sequence));
                                break;
                            case R.styleable.Toolbar_titleMarginEnd /*14*/:
                                PoolServiceExecutor.this.mService.postRunnableToService(new PoolThumbnailDownloader(PoolServiceExecutor.this.mService, PoolServiceExecutor.this.mServer, PoolServiceExecutor.this.mUserpin, ((CatfishMessageObject) arrayList3.get(i2)).topic_key, ((CatfishMessageObject) arrayList3.get(i2)).senderpin, ((CatfishMessageObject) arrayList3.get(i2)).message, ((CatfishMessageObject) arrayList3.get(i2)).sequence, ((CatfishMessageObject) arrayList3.get(i2)).data_sequence), PoolServiceExecutor.ACTIONSERVICE_INVITEFRIEND);
                                break;
                            case R.styleable.Toolbar_titleMarginTop /*15*/:
                                catfishMessageObject3 = new CatfishMessageObject();
                                catfishMessageObject3.sequence = ((CatfishMessageObject) arrayList3.get(i2)).sequence;
                                if (((CatfishMessageObject) arrayList3.get(i2)).message.startsWith("file:")) {
                                    catfishMessageObject3.message = PoolServiceExecutor.this.mService.getString(R.string.downloading) + " " + ((CatfishMessageObject) arrayList3.get(i2)).message;
                                } else if (((CatfishMessageObject) arrayList3.get(i2)).message.startsWith("voice:")) {
                                    catfishMessageObject3.message = PoolServiceExecutor.this.mService.getString(R.string.downloading_voice);
                                } else {
                                    catfishMessageObject3.message = PoolServiceExecutor.this.mService.getString(R.string.downloading_file) + " " + ((CatfishMessageObject) arrayList3.get(i2)).message;
                                }
                                catfishMessageObject3.deliverystatus = MessageDeliveryStatus.BCASTQUEUE;
                                PoolServiceExecutor.this.pds.updateDiscussContent(catfishMessageObject3);
                                ((CatfishMessageObject) arrayList3.get(i2)).topic_key = ((CatfishMessageObject) arrayList3.get(i2)).object_owner + ":" + ((CatfishMessageObject) arrayList3.get(i2)).object_sequence;
                                PoolServiceExecutor.this.mService.postRunnableToService(new PoolDataDownloadExecutor(PoolServiceExecutor.this.mService, PoolServiceExecutor.this.mServer, PoolServiceExecutor.this.mUserpin, ((CatfishMessageObject) arrayList3.get(i2)).topic_key, ((CatfishMessageObject) arrayList3.get(i2)).senderpin, ((CatfishMessageObject) arrayList3.get(i2)).message, ((CatfishMessageObject) arrayList3.get(i2)).sequence, ((CatfishMessageObject) arrayList3.get(i2)).data_sequence), PoolServiceExecutor.ACTIONSERVICE_INVITEFRIEND);
                                break;
                            default:
                                break;
                        }
                    }
                    if (size2 > size3) {
                        Cursor discuss = PoolServiceExecutor.this.pds.getDiscuss(PoolServiceExecutor.this.msg.object_owner + ":" + String.valueOf(PoolServiceExecutor.this.msg.object_sequence));
                        if (isMessageCountNeedToNotif(discuss)) {
                            discuss.moveToNext();
                            string = discuss.getString(discuss.getColumnIndex(PoolDataStorage.TOPIC_KEY));
                            str3 = PoolServiceExecutor.this.pds.getTopicTitle(string);
                            PoolServiceExecutor.this.mService.signalHasTopicNeedToNotif(discuss.getCount(), str3, string);
                        }
                        str2 = PoolServiceExecutor.this.msg.object_owner + ":" + String.valueOf(PoolServiceExecutor.this.msg.object_sequence);
                        PoolServiceExecutor.this.pds.setUnReadItemInTopic(str2, PoolServiceExecutor.ACTIONSERVICE_GETTOPICMESSAGE);
                        PoolServiceExecutor.this.mService.signalNewPoolMessageReceived(str2);
                    } else {
                        Log.d(PoolServiceExecutor.TAG, "NOT SIGNAL UI: savedcount=" + size2 + ",count=" + size3);
                    }
                    arrayList3.clear();
                    return;
                case PoolServiceExecutor.ACTIONSERVICE_GETTOPICMESSAGE /*1*/:
                    PoolServiceExecutor.this.pds.updateTopicContent(PoolServiceExecutor.this.mResult.messages);
                    PoolServiceExecutor.this.mService.signalNewTopicMessageUpdated(PoolServiceExecutor.this.pds.getAllTopic());
                    return;
                case PoolServiceExecutor.ACTIONSERVICE_INVITEFRIEND /*2*/:
                    catfishMessageObject = new CatfishMessageObject();
                    catfishMessageObject.sendername = PoolServiceExecutor.this.mResult.username;
                    catfishMessageObject.senderpin = PoolServiceExecutor.this.mResult.userpin;
                    PoolServiceExecutor.this.pds.updateMemberName(catfishMessageObject);
                    return;
                case PoolServiceExecutor.ACTIONDATABASE_UPDATEMEMBERLIST /*3*/:
                    arrayList = new ArrayList();
                    size = PoolServiceExecutor.this.mResult.messages.size();
                    str = PoolServiceExecutor.this.msg.object_owner + ":" + PoolServiceExecutor.this.msg.object_sequence;
                    for (i = PoolServiceExecutor.ACTIONSERVICE_GETMESSAGE; i < size; i += PoolServiceExecutor.ACTIONSERVICE_GETTOPICMESSAGE) {
                        catfishMessageObject2 = new CatfishMessageObject();
                        catfishMessageObject2.topic_key = str;
                        catfishMessageObject2.senderpin = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i)).userpin;
                        catfishMessageObject2.sendername = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i)).username;
                        arrayList.add(catfishMessageObject2);
                    }
                    PoolServiceExecutor.this.pds.storeFriendList(str, arrayList);
                    PoolServiceExecutor.this.mService.signalTopicMemberUpdated(PoolServiceExecutor.this.msg.object_owner + ":" + PoolServiceExecutor.this.msg.object_sequence);
                    return;
                case PoolServiceExecutor.ACTIONSERVICE_GETMEMBER /*4*/:
                    catfishMessageObject = new CatfishMessageObject();
                    catfishMessageObject.topic_key = PoolServiceExecutor.this.msg.object_owner + ":" + PoolServiceExecutor.this.msg.object_sequence;
                    catfishMessageObject.sendername = PoolServiceExecutor.this.mResult.username;
                    catfishMessageObject.senderpin = PoolServiceExecutor.this.mResult.userpin;
                    PoolServiceExecutor.this.pds.updateSingleTopicContent(catfishMessageObject);
                    PoolServiceExecutor.this.mService.signalNewTopicMessageUpdated(PoolServiceExecutor.this.pds.getAllTopic());
                    return;
                case PoolServiceExecutor.ACTIONSERVICE_GETOWNERNAME /*5*/:
                    ArrayList arrayList4 = new ArrayList();
                    if (!PoolServiceExecutor.this.pds.isPoolMessageExist(PoolServiceExecutor.this.msg.object_owner + ":" + PoolServiceExecutor.this.msg.object_sequence, PoolServiceExecutor.this.msg.sequence)) {
                        arrayList4.add(PoolServiceExecutor.this.msg);
                        PoolServiceExecutor.this.pds.storeDiscuss(arrayList4);
                        str2 = PoolServiceExecutor.this.msg.object_owner + ":" + String.valueOf(PoolServiceExecutor.this.msg.object_sequence);
                        PoolServiceExecutor.this.pds.setUnReadItemInTopic(str2, PoolServiceExecutor.ACTIONSERVICE_GETTOPICMESSAGE);
                        PoolServiceExecutor.this.mService.signalNewPoolMessageReceived(str2);
                        return;
                    }
                    return;
                case PoolServiceExecutor.ACTIONSERVICE_REFRESHMEMBER /*6*/:
                    PoolServiceExecutor.this.pds.dropMemberList(PoolServiceExecutor.this.msg.object_owner + ":" + PoolServiceExecutor.this.msg.object_sequence);
                    arrayList = new ArrayList();
                    size = PoolServiceExecutor.this.mResult.messages.size();
                    str = PoolServiceExecutor.this.msg.object_owner + ":" + PoolServiceExecutor.this.msg.object_sequence;
                    for (i = PoolServiceExecutor.ACTIONSERVICE_GETMESSAGE; i < size; i += PoolServiceExecutor.ACTIONSERVICE_GETTOPICMESSAGE) {
                        catfishMessageObject2 = new CatfishMessageObject();
                        catfishMessageObject2.topic_key = str;
                        catfishMessageObject2.senderpin = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i)).userpin;
                        catfishMessageObject2.sendername = ((CatfishMessageObject) PoolServiceExecutor.this.mResult.messages.get(i)).username;
                        arrayList.add(catfishMessageObject2);
                    }
                    PoolServiceExecutor.this.pds.storeFriendList(str, arrayList);
                    PoolServiceExecutor.this.mService.signalTopicMemberUpdated(PoolServiceExecutor.this.msg.object_owner + ":" + PoolServiceExecutor.this.msg.object_sequence);
                    return;
                default:
                    return;
            }
        }
    }

    public PoolServiceExecutor(String str, int i, CatfishService catfishService, String str2, CatfishMessageObject catfishMessageObject) {
        this.mServer = str;
        this.mUserpin = str2;
        this.msg = catfishMessageObject;
        this.mService = catfishService;
        this.action_service = i;
        this.inc = ACTIONSERVICE_GETMESSAGE;
        this.blocknum = ACTIONSERVICE_GETMESSAGE;
        this.mAge = System.currentTimeMillis();
        this.mGetMessageTopicKey = null;
    }

    public void dropRunnable() {
        if (this.mGetMessageTopicKey != null) {
            ObjectLockManager.releaseLockKey(this.mGetMessageTopicKey);
        }
    }

    public long getAge() {
        return this.mAge;
    }

    public String getFromJson(String str, String str2) {
        String str3 = null;
        try {
            JSONObject jSONObject = new JSONObject(str);
            if (jSONObject.has(str2)) {
                str3 = jSONObject.getString(str2);
            }
        } catch (Exception e) {
            Log.e(TAG, "Error: " + e.toString());
        }
        return str3;
    }

    public int getScheduleNum() {
        return this.scheduleNum;
    }

    public void incraseScheduleNum() {
        this.scheduleNum += ACTIONSERVICE_GETTOPICMESSAGE;
    }

    public void run() {
        CatfishResult conferenceGetMessagesWithZlib;
        IDropableRunnable poolServiceExecutor;
        switch (this.action_service) {
            case ACTIONSERVICE_GETMESSAGE /*0*/:
                this.mGetMessageTopicKey = this.msg.object_owner + ":" + String.valueOf(this.msg.object_sequence);
                conferenceGetMessagesWithZlib = this.catfishRestAPI.conferenceGetMessagesWithZlib(this.mServer, this.mUserpin, this.msg.object_owner, this.msg.object_sequence, this.msg.rdcounter);
                if (conferenceGetMessagesWithZlib.hasSuccess()) {
                    ObjectLockManager.releaseLockKey(this.mGetMessageTopicKey);
                    this.mGetMessageTopicKey = null;
                    Log.d(TAG, "Conference Get Message: SUCCESS: Post to DB");
                    this.mService.postRunnableToDbThread(new PoolDatabaseExecutor(this.mService, ACTIONSERVICE_GETMESSAGE, this.msg, conferenceGetMessagesWithZlib));
                    return;
                } else if (conferenceGetMessagesWithZlib.hasFailure()) {
                    Log.d(TAG, "Conference Get Message: FAIL: RESCHEDULE");
                    this.mServer = CatfishService.getServerHost();
                    this.mService.scheduleRunnableToService(this, ACTIONSERVICE_GETMESSAGE);
                    return;
                } else {
                    Log.d(TAG, "Conference Get Message: ERROR: DROP");
                    ObjectLockManager.releaseLockKey(this.mGetMessageTopicKey);
                    this.mGetMessageTopicKey = null;
                    return;
                }
            case ACTIONSERVICE_GETTOPICMESSAGE /*1*/:
                conferenceGetMessagesWithZlib = this.catfishRestAPI.conferenceGetTopicMessage(this.mServer, this.mUserpin, this.msg.object_owner, this.msg.object_sequence);
                if (conferenceGetMessagesWithZlib.hasSuccess()) {
                    this.mService.postRunnableToDbThread(new PoolDatabaseExecutor(this.mService, ACTIONSERVICE_GETTOPICMESSAGE, this.msg, conferenceGetMessagesWithZlib));
                    return;
                } else if (conferenceGetMessagesWithZlib.hasFailure()) {
                    this.mServer = CatfishService.getServerHost();
                    this.mService.scheduleRunnableToService(this, ACTIONSERVICE_GETMESSAGE);
                    return;
                } else {
                    return;
                }
            case ACTIONSERVICE_INVITEFRIEND /*2*/:
                String[] strArr = this.msg.recipients;
                if (this.inc < strArr.length) {
                    Log.d(TAG, "ACTIONSERVICE_INVITEFRIEND -- inc < frCount");
                    CatfishResult conferenceInvite = this.catfishRestAPI.conferenceInvite(this.mServer, this.msg.userpin, strArr[this.inc], this.msg.object_owner, this.msg.object_sequence);
                    if (conferenceInvite.hasSuccess()) {
                        Log.d(TAG, "ACTIONSERVICE_INVITEFRIEND -- result success");
                        this.inc += ACTIONSERVICE_GETTOPICMESSAGE;
                        this.mService.postToServiceHandler(this, ACTIONSERVICE_GETMESSAGE);
                        return;
                    } else if (conferenceInvite.hasFailure()) {
                        Log.d(TAG, "ACTIONSERVICE_INVITEFRIEND -- result fail");
                        this.mServer = CatfishService.getServerHost();
                        this.mService.scheduleRunnableToService(this, ACTIONSERVICE_GETMESSAGE);
                        return;
                    } else {
                        return;
                    }
                }
                Log.d(TAG, "ACTIONSERVICE_INVITEFRIEND -- else");
                CatfishMessageObject obtain = CatfishMessageObject.obtain();
                obtain.userpin = this.msg.userpin;
                obtain.topic_key = this.msg.topic_key;
                obtain.object_sequence = this.msg.object_sequence;
                obtain.object_owner = this.msg.object_owner;
                this.mService.postToServiceHandler(new PoolServiceExecutor(CatfishService.getCurrentServerHost(), ACTIONSERVICE_REFRESHMEMBER, this.mService, this.mUserpin, obtain));
                return;
            case ACTIONSERVICE_GETMEMBER /*4*/:
                conferenceGetMessagesWithZlib = this.catfishRestAPI.conferenceGetMemberList(this.mServer, this.mUserpin, this.msg.object_owner, this.msg.object_sequence, this.blocknum);
                if (conferenceGetMessagesWithZlib.hasSuccess()) {
                    this.mService.postRunnableToDbThread(new PoolDatabaseExecutor(this.mService, ACTIONDATABASE_UPDATEMEMBERLIST, this.msg, conferenceGetMessagesWithZlib));
                    if (this.blocknum < conferenceGetMessagesWithZlib.block_count) {
                        this.blocknum += ACTIONSERVICE_GETTOPICMESSAGE;
                        poolServiceExecutor = new PoolServiceExecutor(this.mServer, ACTIONSERVICE_GETMEMBER, this.mService, this.mUserpin, this.msg);
                        poolServiceExecutor.blocknum = this.blocknum;
                        this.mService.postRunnableToService(poolServiceExecutor);
                        return;
                    }
                    return;
                } else if (conferenceGetMessagesWithZlib.hasFailure()) {
                    this.mServer = CatfishService.getServerHost();
                    this.mService.scheduleRunnableToService(this, ACTIONSERVICE_GETMESSAGE);
                    return;
                } else {
                    return;
                }
            case ACTIONSERVICE_GETOWNERNAME /*5*/:
                Log.d(TAG, "ACTIONSERVICE_GETOWNERNAME userpin=" + this.mUserpin + " senderpin=" + this.msg.object_owner);
                conferenceGetMessagesWithZlib = this.catfishRestAPI.getUserProfileInfo(this.mServer, this.mUserpin, this.msg.object_owner);
                if (conferenceGetMessagesWithZlib.hasSuccess()) {
                    this.mService.postRunnableToDbThread(new PoolDatabaseExecutor(this.mService, ACTIONSERVICE_GETMEMBER, this.msg, conferenceGetMessagesWithZlib));
                    return;
                } else if (conferenceGetMessagesWithZlib.hasFailure()) {
                    this.mServer = CatfishService.getServerHost();
                    this.mService.scheduleRunnableToService(this, ACTIONSERVICE_GETMESSAGE);
                    return;
                } else {
                    return;
                }
            case ACTIONSERVICE_REFRESHMEMBER /*6*/:
                CatfishResult conferenceGetMemberList = this.catfishRestAPI.conferenceGetMemberList(this.mServer, this.mUserpin, this.msg.object_owner, this.msg.object_sequence, this.blocknum);
                if (conferenceGetMemberList.hasSuccess()) {
                    this.mService.postRunnableToDbThread(new PoolDatabaseExecutor(this.mService, ACTIONSERVICE_REFRESHMEMBER, this.msg, conferenceGetMemberList));
                    if (this.blocknum < conferenceGetMemberList.block_count) {
                        this.blocknum += ACTIONSERVICE_GETTOPICMESSAGE;
                        poolServiceExecutor = new PoolServiceExecutor(this.mServer, ACTIONSERVICE_GETMEMBER, this.mService, this.mUserpin, this.msg);
                        poolServiceExecutor.blocknum = this.blocknum;
                        this.mService.postRunnableToService(poolServiceExecutor);
                        return;
                    }
                    return;
                } else if (conferenceGetMemberList.hasFailure()) {
                    this.mServer = CatfishService.getServerHost();
                    this.mService.scheduleRunnableToService(this, ACTIONSERVICE_GETMESSAGE);
                    return;
                } else {
                    return;
                }
            default:
                return;
        }
    }

    public void saveToNotificationDataList(ArrayList arrayList) {
        ArrayList poolNotificationMsgList = this.mService.getPoolNotificationMsgList();
        ArrayList poolNotificationNameList = this.mService.getPoolNotificationNameList();
        int size = arrayList.size() > ACTIONSERVICE_REFRESHMEMBER ? arrayList.size() - 6 : ACTIONSERVICE_GETMESSAGE;
        String str = "";
        int i = ACTIONSERVICE_GETMESSAGE;
        str = "";
        int i2 = ACTIONSERVICE_GETMESSAGE;
        while (i < arrayList.size()) {
            String str2;
            CatfishMessageObject catfishMessageObject = (CatfishMessageObject) arrayList.get(i);
            Log.d(TAG, "mo.messagetype:" + catfishMessageObject.messagetype + " mo.messagetype.ordinal():" + catfishMessageObject.messagetype.ordinal() + " mo.topic_key:" + catfishMessageObject.topic_key + " mo.senderpin:" + catfishMessageObject.senderpin + " mo.sendername:" + catfishMessageObject.sendername + " mo.object_owner :" + catfishMessageObject.object_owner + " mo.object_sequence :" + catfishMessageObject.object_sequence);
            String str3 = catfishMessageObject.sendername;
            if (catfishMessageObject.senderpin != null && catfishMessageObject.senderpin.equals(CatfishService.OFFICIAL_PIN)) {
                str3 = this.mService.getResources().getString(R.string.official_name);
            }
            if (str3 == null || str3.isEmpty()) {
                Cursor friend = this.fds.getFriend(catfishMessageObject.senderpin);
                if (friend == null || friend.getCount() <= 0) {
                    str2 = catfishMessageObject.senderpin;
                } else {
                    friend.moveToFirst();
                    str3 = friend.getString(friend.getColumnIndex(FriendListDataStorage.FRIENDNAME));
                    friend.close();
                    str2 = str3;
                }
            } else {
                str2 = str3;
            }
            String str4 = catfishMessageObject.topic_key != null ? catfishMessageObject.topic_key : catfishMessageObject.object_owner + ":" + catfishMessageObject.object_sequence;
            str3 = this.pds.getTopicTitle(str4);
            if (str3 == null || str3.compareTo("") == 0) {
                str3 = "@" + str4 + "@";
            }
            if (!poolNotificationNameList.contains(str3)) {
                poolNotificationNameList.add(str3);
            }
            int i3 = (catfishMessageObject.message == null || catfishMessageObject.message.compareTo("") == 0) ? i2 : i2 + ACTIONSERVICE_GETTOPICMESSAGE;
            if (i >= size) {
                String str5 = catfishMessageObject.message;
                if (catfishMessageObject.messagetype == MessageType.BCASTCONFERENCE_VIDEO || catfishMessageObject.messagetype == MessageType.BCASTCONFERENCE) {
                    if (catfishMessageObject.message.startsWith("file:")) {
                        str = this.mService.getString(R.string.file) + " " + this.mService.getString(R.string.file_received);
                    } else if (catfishMessageObject.message.startsWith("voice:")) {
                        str = this.mService.getString(R.string.receive_voice_comments);
                    } else {
                        if (catfishMessageObject.message.startsWith("video:")) {
                            str = this.mService.getString(R.string.receive_video_comments);
                        }
                        str = str5;
                    }
                } else if (catfishMessageObject.messagetype == MessageType.PERSONCONTACT) {
                    str = this.mService.getString(R.string.contact_received_text);
                } else {
                    if (catfishMessageObject.messagetype == MessageType.STIKER_MESSAGE_POOL) {
                        str = this.mService.getString(R.string.sticker_has_been_received);
                    }
                    str = str5;
                }
                str = str2 + '\u0007' + str3 + '\u0007' + str;
                if (str != null) {
                    poolNotificationMsgList.add(str);
                } else {
                    Log.d(TAG, "msg null on save message to notification msg");
                }
                if (poolNotificationMsgList.size() > ACTIONSERVICE_REFRESHMEMBER) {
                    poolNotificationMsgList.remove(ACTIONSERVICE_GETMESSAGE);
                }
            }
            i += ACTIONSERVICE_GETTOPICMESSAGE;
            i2 = i3;
            str = str4;
        }
        this.mService.setPoolNotificationMsgList(poolNotificationMsgList);
        this.mService.setPoolNotificationNameList(poolNotificationNameList);
        SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this.mService);
        defaultSharedPreferences.edit().putInt("poolNotificationCount", defaultSharedPreferences.getInt("poolNotificationCount", ACTIONSERVICE_GETMESSAGE) + i2).commit();
        defaultSharedPreferences.edit().putString("poolNotificationLastTopic", this.pds.getStringImageThumbUriInTopic(str)).commit();
    }

    public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        this.catfishRestAPI = catfishRESTAPI;
    }
}
