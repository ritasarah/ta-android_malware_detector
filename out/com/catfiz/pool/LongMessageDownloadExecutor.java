package com.catfiz.pool;

import android.os.Environment;
import com.catfiz.service.CatfishMessageObject;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishService;
import com.catfiz.service.IDropableRunnable;
import com.catfiz.service.LongMessageExecutor;
import com.catfiz.util.Log;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

public class LongMessageDownloadExecutor implements IDropableRunnable, Runnable {
    private static final String TAG = "LongMessageDownloadExecutor";
    private static final int mChunkMaxSize = 16384;
    private static String mServer = null;
    private static String mUserpin = null;
    private CatfishRESTAPI catfishRestAPI = null;
    private long mAge = 0;
    private int mByteend = 0;
    private int mBytestart = 0;
    private byte[] mChunkbuffer = null;
    private FileOutputStream mChunkstream = null;
    private File mDataFile = null;
    private String mDataPath = null;
    private int mDatasize = 0;
    private long mObjSequence = 0;
    private String mSenderpin = null;
    private long mSequence = 0;
    private CatfishService mService = null;
    private int mTryToDownload = 0;
    private int mWriten = 0;
    public int scheduleNum = 0;
    private String topic_key = null;

    class GetDataStorageChunks implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        public int scheduleNum;

        private GetDataStorageChunks() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.scheduleNum = 0;
        }

        public void dropRunnable() {
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void proceedToCompleted() {
            LongMessageDownloadExecutor.this.mService.postRunnableToDbThread(new PoolNotifyDownloadCompleate());
        }

        public void run() {
            CatfishResult downloadDataChunk = this.catfishRestAPI.downloadDataChunk(LongMessageDownloadExecutor.mServer, LongMessageDownloadExecutor.mUserpin, LongMessageDownloadExecutor.this.mSenderpin, LongMessageDownloadExecutor.this.mObjSequence, LongMessageDownloadExecutor.this.mBytestart, LongMessageDownloadExecutor.this.mByteend, LongMessageDownloadExecutor.this.mChunkstream);
            if (downloadDataChunk.hasSuccess()) {
                if (downloadDataChunk.chunksize > 0) {
                    LongMessageDownloadExecutor.this.mWriten = LongMessageDownloadExecutor.this.mWriten + downloadDataChunk.chunksize;
                }
                if (LongMessageDownloadExecutor.this.mWriten < LongMessageDownloadExecutor.this.mDatasize) {
                    LongMessageDownloadExecutor.this.mBytestart = LongMessageDownloadExecutor.this.mByteend + 1;
                    LongMessageDownloadExecutor.this.mByteend = ((LongMessageDownloadExecutor.this.mDatasize - LongMessageDownloadExecutor.this.mWriten > LongMessageDownloadExecutor.mChunkMaxSize ? LongMessageDownloadExecutor.mChunkMaxSize : LongMessageDownloadExecutor.this.mDatasize - LongMessageDownloadExecutor.this.mWriten) + LongMessageDownloadExecutor.this.mBytestart) - 1;
                    LongMessageDownloadExecutor.this.mTryToDownload = 0;
                    LongMessageDownloadExecutor.this.mService.postRunnableToService(this);
                    downloadDataChunk.cleaningup();
                    return;
                }
                proceedToCompleted();
                downloadDataChunk.cleaningup();
            } else if (downloadDataChunk.hasFailure()) {
                if (downloadDataChunk.chunksize > 0) {
                    LongMessageDownloadExecutor.this.mWriten = LongMessageDownloadExecutor.this.mWriten + downloadDataChunk.chunksize;
                    if (LongMessageDownloadExecutor.this.mWriten < LongMessageDownloadExecutor.this.mDatasize) {
                        LongMessageDownloadExecutor.this.mBytestart = LongMessageDownloadExecutor.this.mWriten;
                        LongMessageDownloadExecutor.this.mByteend = (LongMessageDownloadExecutor.this.mWriten + LongMessageDownloadExecutor.mChunkMaxSize) - 1;
                    } else {
                        proceedToCompleted();
                        downloadDataChunk.cleaningup();
                        return;
                    }
                }
                LongMessageDownloadExecutor.mServer = CatfishService.getServerHost();
                if (LongMessageDownloadExecutor.this.mTryToDownload < 5) {
                    LongMessageDownloadExecutor.this.mService.scheduleRunnableToService(this, 0);
                    LongMessageDownloadExecutor.this.mTryToDownload = LongMessageDownloadExecutor.this.mTryToDownload + 1;
                } else {
                    dropRunnable();
                }
                downloadDataChunk.cleaningup();
            } else if (downloadDataChunk.hasNotFound()) {
                if (LongMessageDownloadExecutor.this.mTryToDownload < 5) {
                    LongMessageDownloadExecutor.mServer = CatfishService.getServerHost();
                    LongMessageDownloadExecutor.this.mService.scheduleRunnableToService(this, 0);
                    LongMessageDownloadExecutor.this.mTryToDownload = LongMessageDownloadExecutor.this.mTryToDownload + 1;
                }
                downloadDataChunk.cleaningup();
            } else {
                try {
                    LongMessageDownloadExecutor.this.mChunkstream.flush();
                    LongMessageDownloadExecutor.this.mChunkstream.close();
                } catch (IOException e) {
                }
                LongMessageDownloadExecutor.this.mChunkbuffer = null;
                downloadDataChunk.cleaningup();
            }
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    class PoolNotifyDownloadCompleate implements Runnable {
        private PoolNotifyDownloadCompleate() {
        }

        public void run() {
            PoolDataStorage poolDataStorage = new PoolDataStorage(LongMessageDownloadExecutor.this.mService);
            CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
            catfishMessageObject.topic_key = LongMessageDownloadExecutor.this.topic_key;
            catfishMessageObject.sequence = LongMessageDownloadExecutor.this.mSequence;
            String longMessage = LongMessageExecutor.getLongMessage(LongMessageDownloadExecutor.this.mSequence);
            String str = "";
            if (!(longMessage == null || longMessage.isEmpty())) {
                str = longMessage.substring(0, LongMessageExecutor.LONG_MESSAGE_CHAR_PREVIEW);
            }
            catfishMessageObject.message = str;
            Log.d(LongMessageDownloadExecutor.TAG, "TOPICKEY LONG MESSAGE IN = " + catfishMessageObject.topic_key + LongMessageDownloadExecutor.this.mSequence);
            poolDataStorage.updateDiscussMessage(catfishMessageObject);
            poolDataStorage.setUnReadItemInTopic(LongMessageDownloadExecutor.this.topic_key, 1);
            LongMessageDownloadExecutor.this.mService.signalNewPoolMessageReceived(catfishMessageObject.topic_key);
        }
    }

    public LongMessageDownloadExecutor(CatfishService catfishService, String str, String str2, String str3, String str4, long j, long j2) {
        this.mService = catfishService;
        mServer = str;
        mUserpin = str2;
        this.topic_key = str3;
        this.mSenderpin = str4;
        this.mSequence = j;
        this.mObjSequence = j2;
        this.mDataPath = LongMessageExecutor.getTextDirPath() + this.mSequence;
        this.mDataFile = new File(this.mDataPath);
        this.mAge = System.currentTimeMillis();
    }

    public void dropRunnable() {
    }

    public long getAge() {
        return this.mAge;
    }

    public int getScheduleNum() {
        return this.scheduleNum;
    }

    public void incraseScheduleNum() {
        this.scheduleNum++;
    }

    public void run() {
        String externalStorageState = Environment.getExternalStorageState();
        if (externalStorageState.equals("mounted")) {
            File parentFile = this.mDataFile.getParentFile();
            if (!parentFile.exists()) {
                if (parentFile.mkdirs()) {
                    File file = new File(parentFile, ".nomedia");
                    if (!file.exists()) {
                        try {
                            file.createNewFile();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                } else {
                    return;
                }
            }
            Log.d(TAG, "REQUEST INFOOO mObjSequence = " + this.mObjSequence + " mSeq = " + this.mSequence);
            CatfishResult dataStorageInfo = this.catfishRestAPI.getDataStorageInfo(mServer, mUserpin, this.mSenderpin, this.mObjSequence);
            if (dataStorageInfo.hasFailure()) {
                Log.e(TAG, "FAILURE");
                mServer = CatfishService.getServerHost();
                if (this.mTryToDownload < 5) {
                    this.mService.scheduleRunnableToService(this, 0);
                    this.mTryToDownload++;
                } else {
                    dropRunnable();
                }
                dataStorageInfo.cleaningup();
                return;
            } else if (dataStorageInfo.hasNotFound()) {
                Log.e(TAG, "NOT FOUND");
                if (this.mTryToDownload < 5) {
                    this.mService.scheduleRunnableToService(this, 0);
                    this.mTryToDownload++;
                }
                dataStorageInfo.cleaningup();
                return;
            } else if (dataStorageInfo.hasSuccess()) {
                this.mDatasize = dataStorageInfo.datasize;
                if (this.mByteend == 0) {
                    this.mByteend = 16383;
                }
                try {
                    Log.d(TAG, "GetDataStorageChunks");
                    this.mChunkstream = new FileOutputStream(this.mDataFile, true);
                    this.mService.postRunnableToService(new GetDataStorageChunks());
                    return;
                } catch (FileNotFoundException e2) {
                    Log.e(TAG, "VBCAST RECEIVE: " + e2.toString());
                    return;
                }
            } else {
                Log.e(TAG, "VBCAST RECEIVE: ERROR: DROP !!!");
                Log.e(TAG, "NOT SUCCESS");
                dataStorageInfo.cleaningup();
                return;
            }
        }
        Log.e(TAG, "VBCAST RECEIVE: media not mounted in is state: " + externalStorageState + ":DROP !!!");
    }

    public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        this.catfishRestAPI = catfishRESTAPI;
    }
}
