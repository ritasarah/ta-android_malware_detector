package com.catfiz.model;

import android.database.Cursor;
import android.net.Uri;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.svcpersistent.TaskDataStorage;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.json.JSONException;
import org.json.JSONObject;

public class Fizzlink {
    public static final String FIZZLINK_URL_DEFAULT = "fl.catfiz.com";
    public static final String TAG = "Fizzlink";
    private int mDataSize = 0;
    private int mDataType = 0;
    private String mDescription = "";
    private boolean mDownloaded = false;
    private String mFileName = "";
    private String mFilePath = "";
    private String mImgThumbUri = "";
    private boolean mIsNoData = false;
    private boolean mIsSelected = false;
    private String mLink = "";
    private String mMessage = "";
    private String mObjectOwner = null;
    private long mObjectSequence = 0;
    private int mProgress = 0;
    private String mSenderName = "";
    private String mSenderPin = "";
    private long mSequence = 0;
    private long mTimeStamp = 0;

    /* synthetic */ class AnonymousClass1 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType = new int[MessageType.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SHARE_SLINK.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SHARE_SLINK_AT_COMMENT.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SHARE_SLINK_AT_POOL.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
        }
    }

    public static String formatFromMessage(Message message) {
        Object obj = null;
        if (message == null) {
            return null;
        }
        String text;
        switch (AnonymousClass1.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[message.getType()].ordinal()]) {
            case e.b /*1*/:
            case e.c /*2*/:
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                text = message.getText();
                if (text == null || text.isEmpty()) {
                    return null;
                }
                Log.d(TAG, "result generate json text from message[PASSTHROUGH] : " + text);
                return text;
            default:
                String slink = message.getSlink();
                Log.d(TAG, "slink:" + slink);
                if (slink == null || slink.isEmpty() || slink.compareTo("0") == 0) {
                    return null;
                }
                Object obj2;
                Object obj3;
                Object obj4;
                String filePathFromMessage = getFilePathFromMessage(message);
                text = Utils.getFileNameFromPath(filePathFromMessage);
                Log.d(TAG, "filename:" + text);
                if (text != null) {
                    obj = Utils.getmimetype(Uri.parse(text));
                }
                String str = "";
                String str2 = "";
                Log.d(TAG, "messagetext: " + message.getText());
                str2 = message.getText();
                if (FileMetaInfo.isFileMetaInfoValid(str2)) {
                    FileMetaInfo metaInfoBuilder = FileMetaInfo.metaInfoBuilder(str2);
                    if (text == null) {
                        text = metaInfoBuilder.getFileName();
                    }
                    str = metaInfoBuilder.getFileSize();
                    String caption = metaInfoBuilder.getCaption();
                    obj2 = str;
                    obj3 = text;
                    obj4 = caption;
                } else {
                    str2 = str;
                    str = text;
                    text = message.getText();
                }
                JSONObject jSONObject = new JSONObject();
                try {
                    jSONObject.put(ServerMessageDataStorage.SLINK, "catfiz://fl.catfiz.com/" + slink);
                    jSONObject.put(ServerMessageDataStorage.MESSAGE, obj4);
                    jSONObject.put(FriendListDataStorage.FILENAME, obj3);
                    jSONObject.put("filesize", obj2);
                    jSONObject.put(TaskDataStorage.FILE_PATH, filePathFromMessage);
                    jSONObject.put(TaskDataStorage.TIMESTAMP, message.getTimeStamp());
                    jSONObject.put("simplelink", slink);
                    if (obj != null) {
                        jSONObject.put("mt", obj);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                String jSONObject2 = jSONObject.toString();
                Log.d(TAG, "result generate json text from message : " + jSONObject2);
                return jSONObject2;
        }
    }

    private static String getFilePathFromMessage(Message message) {
        if (message == null) {
            return null;
        }
        String dataFilePath = message.getDataFilePath();
        if (dataFilePath == null || dataFilePath.isEmpty()) {
            dataFilePath = message.getImageFilePath();
        }
        if (dataFilePath == null || dataFilePath.isEmpty()) {
            dataFilePath = message.getVoiceFilePath();
        }
        return (dataFilePath == null || dataFilePath.isEmpty()) ? null : dataFilePath;
    }

    public static String getSlinkFromJson(String str) {
        String str2 = "";
        try {
            return new JSONObject(str).getString("simplelink");
        } catch (JSONException e) {
            return "";
        }
    }

    public static Fizzlink parsingFizzlinkFromCursor(Cursor cursor) {
        Fizzlink fizzlink = new Fizzlink();
        int columnIndex = cursor.getColumnIndex(CatfishDataStorage.FIZZLINK_FILE_PATH);
        int columnIndex2 = cursor.getColumnIndex(CatfishDataStorage.FIZZLINK_FILE_NAME);
        int columnIndex3 = cursor.getColumnIndex(CatfishDataStorage.FIZZLINK_DESC);
        int columnIndex4 = cursor.getColumnIndex(CatfishDataStorage.FIZZLINK_SENDER_NAME);
        int columnIndex5 = cursor.getColumnIndex(CatfishDataStorage.FIZZLINK_SENDER_PIN);
        int columnIndex6 = cursor.getColumnIndex(CatfishDataStorage.FIZZLINK_DATA_TYPE);
        int columnIndex7 = cursor.getColumnIndex(CatfishDataStorage.FIZZLINK_DATA_SIZE);
        int columnIndex8 = cursor.getColumnIndex(CatfishDataStorage.FIZZLINK_DOWNLOADED);
        int columnIndex9 = cursor.getColumnIndex(ServerMessageDataStorage.SLINK);
        if (columnIndex9 >= 0) {
            fizzlink.setLink(cursor.getString(columnIndex9));
        }
        if (columnIndex >= 0) {
            fizzlink.setFilePath(cursor.getString(columnIndex));
        }
        if (columnIndex2 >= 0) {
            fizzlink.setFileName(cursor.getString(columnIndex2));
        }
        if (columnIndex3 >= 0) {
            fizzlink.setDescription(cursor.getString(columnIndex3));
        }
        if (columnIndex4 >= 0) {
            fizzlink.setSenderName(cursor.getString(columnIndex4));
        }
        if (columnIndex5 >= 0) {
            Log.d(TAG, "sender pin: " + cursor.getString(columnIndex5));
            fizzlink.setSenderPin(cursor.getString(columnIndex5));
        }
        if (columnIndex6 >= 0) {
            fizzlink.setDataType(cursor.getInt(columnIndex6));
        }
        if (columnIndex7 >= 0) {
            fizzlink.setDataSize(cursor.getInt(columnIndex7));
        }
        if (columnIndex8 >= 0) {
            if (cursor.getInt(columnIndex8) == 0) {
                fizzlink.setDownloaded(false);
            } else {
                fizzlink.setDownloaded(true);
            }
        }
        return fizzlink;
    }

    public static Fizzlink parsingFizzlinkFromTextMessage(String str) {
        Fizzlink fizzlink = new Fizzlink();
        try {
            JSONObject jSONObject = new JSONObject(str);
            if (jSONObject.has("simplelink")) {
                fizzlink.setLink(jSONObject.getString("simplelink"));
            }
            if (jSONObject.has(TaskDataStorage.FILE_PATH)) {
                fizzlink.setFilePath(jSONObject.getString(TaskDataStorage.FILE_PATH));
            }
            if (jSONObject.has(FriendListDataStorage.FILENAME)) {
                fizzlink.setFileName(jSONObject.getString(FriendListDataStorage.FILENAME));
            }
            if (jSONObject.has(ServerMessageDataStorage.MESSAGE)) {
                fizzlink.setDescription(jSONObject.getString(ServerMessageDataStorage.MESSAGE));
            }
            if (jSONObject.has("mt")) {
                fizzlink.setDataType(jSONObject.getInt("mt"));
            }
            if (jSONObject.has("filesize")) {
                fizzlink.setDataSize(jSONObject.getInt("filesize"));
            }
        } catch (JSONException e) {
        }
        return fizzlink;
    }

    public int getDataSize() {
        return this.mDataSize;
    }

    public int getDataType() {
        return this.mDataType;
    }

    public String getDescription() {
        return this.mDescription;
    }

    public String getFileName() {
        return this.mFileName;
    }

    public String getFilePath() {
        return this.mFilePath;
    }

    public String getImgThumbUri() {
        return this.mImgThumbUri;
    }

    public String getLink() {
        return this.mLink;
    }

    public String getMessage() {
        return this.mMessage;
    }

    public String getObjectOwner() {
        return this.mObjectOwner;
    }

    public long getObjectSequence() {
        return this.mObjectSequence;
    }

    public int getProgress() {
        return this.mProgress;
    }

    public String getSenderName() {
        return this.mSenderName;
    }

    public String getSenderPin() {
        return this.mSenderPin;
    }

    public long getSequence() {
        return this.mSequence;
    }

    public Long getTimeStamp() {
        return Long.valueOf(this.mTimeStamp);
    }

    public boolean isDownloaded() {
        return this.mDownloaded;
    }

    public boolean isNoData() {
        return this.mIsNoData;
    }

    public boolean isSelected() {
        return this.mIsSelected;
    }

    public void setDataSize(int i) {
        this.mDataSize = i;
    }

    public void setDataType(int i) {
        this.mDataType = i;
    }

    public void setDescription(String str) {
        this.mDescription = str;
    }

    public void setDownloaded(boolean z) {
        this.mDownloaded = z;
    }

    public void setFileName(String str) {
        this.mFileName = str;
    }

    public void setFilePath(String str) {
        this.mFilePath = str;
    }

    public void setImgThumbUri(String str) {
        this.mImgThumbUri = str;
    }

    public void setLink(String str) {
        this.mLink = str;
    }

    public void setMessage(String str) {
        this.mMessage = str;
    }

    public void setNoData(boolean z) {
        this.mIsNoData = z;
    }

    public void setObjectOwner(String str) {
        this.mObjectOwner = str;
    }

    public void setObjectSequence(long j) {
        this.mObjectSequence = j;
    }

    public void setProgress(int i) {
        this.mProgress = i;
    }

    public void setSelection(boolean z) {
        this.mIsSelected = z;
    }

    public void setSenderName(String str) {
        this.mSenderName = str;
    }

    public void setSenderPin(String str) {
        this.mSenderPin = str;
    }

    public void setSequence(Long l) {
        this.mSequence = l.longValue();
    }

    public void setTimeStamp(Long l) {
        this.mTimeStamp = l.longValue();
    }
}
