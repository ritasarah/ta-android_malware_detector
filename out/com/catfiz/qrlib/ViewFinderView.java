package com.catfiz.qrlib;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Rect;
import android.os.Build.VERSION;
import android.support.v4.view.MotionEventCompat;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.util.AttributeSet;
import android.view.View;
import com.b.a.u;
import com.catfiz.R;
import com.catfiz.qrlib.camera.CameraManager;
import java.util.ArrayList;
import java.util.List;

public final class ViewFinderView extends View {
    private static final long ANIMATION_DELAY = 80;
    private static final int CURRENT_POINT_OPACITY = 160;
    private static final int MAX_RESULT_POINTS = 20;
    private static final int POINT_SIZE = 6;
    private static final int[] SCANNER_ALPHA = new int[]{0, 64, AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS, 192, MotionEventCompat.ACTION_MASK, 192, AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS, 64};
    private CameraManager cameraManager;
    private final int frameColor;
    private final int laserColor;
    private List lastPossibleResultPoints;
    private final int maskColor;
    private final Paint paint;
    private List possibleResultPoints;
    private Bitmap resultBitmap;
    private final int resultColor;
    private final int resultPointColor;
    private int scannerAlpha;

    public ViewFinderView(Context context, AttributeSet attributeSet) {
        super(context, attributeSet);
        if (VERSION.SDK_INT >= 11) {
            setLayerType(1, null);
        }
        this.paint = new Paint(1);
        Resources resources = getResources();
        this.maskColor = resources.getColor(R.color.viewfinder_mask);
        this.resultColor = resources.getColor(R.color.result_view);
        this.frameColor = resources.getColor(R.color.viewfinder_frame);
        this.laserColor = resources.getColor(R.color.red);
        this.resultPointColor = resources.getColor(R.color.possible_result_points);
        this.scannerAlpha = 0;
        this.possibleResultPoints = new ArrayList(5);
        this.lastPossibleResultPoints = null;
    }

    public void addPossibleResultPoint(u uVar) {
        List list = this.possibleResultPoints;
        synchronized (uVar) {
            list.add(uVar);
            int size = list.size();
            if (size > MAX_RESULT_POINTS) {
                list.subList(0, size - 10).clear();
            }
        }
    }

    public void drawResultBitmap(Bitmap bitmap) {
        this.resultBitmap = bitmap;
        invalidate();
    }

    public void drawViewfinder() {
        Bitmap bitmap = this.resultBitmap;
        this.resultBitmap = null;
        if (bitmap != null) {
            bitmap.recycle();
        }
        invalidate();
    }

    public void onDraw(Canvas canvas) {
        Rect framingRect = this.cameraManager.getFramingRect();
        if (framingRect != null) {
            int width = canvas.getWidth();
            int height = canvas.getHeight();
            this.paint.setColor(this.resultBitmap != null ? this.resultColor : this.maskColor);
            canvas.drawRect(0.0f, 0.0f, (float) width, (float) framingRect.top, this.paint);
            canvas.drawRect(0.0f, (float) framingRect.top, (float) framingRect.left, (float) (framingRect.bottom + 1), this.paint);
            canvas.drawRect((float) (framingRect.right + 1), (float) framingRect.top, (float) width, (float) (framingRect.bottom + 1), this.paint);
            canvas.drawRect(0.0f, (float) (framingRect.bottom + 1), (float) width, (float) height, this.paint);
            if (this.resultBitmap != null) {
                this.paint.setAlpha(CURRENT_POINT_OPACITY);
                canvas.drawBitmap(this.resultBitmap, null, framingRect, this.paint);
                return;
            }
            this.paint.setColor(this.frameColor);
            canvas.drawRect((float) framingRect.left, (float) framingRect.top, (float) (framingRect.right + 1), (float) (framingRect.top + 2), this.paint);
            canvas.drawRect((float) framingRect.left, (float) (framingRect.top + 2), (float) (framingRect.left + 2), (float) (framingRect.bottom - 1), this.paint);
            canvas.drawRect((float) (framingRect.right - 1), (float) framingRect.top, (float) (framingRect.right + 1), (float) (framingRect.bottom - 1), this.paint);
            canvas.drawRect((float) framingRect.left, (float) (framingRect.bottom - 1), (float) (framingRect.right + 1), (float) (framingRect.bottom + 1), this.paint);
            Rect framingRectInPreview = this.cameraManager.getFramingRectInPreview();
            float width2 = ((float) framingRect.width()) / ((float) framingRectInPreview.width());
            float height2 = ((float) framingRect.height()) / ((float) framingRectInPreview.height());
            List<u> list = this.possibleResultPoints;
            List<u> list2 = this.lastPossibleResultPoints;
            int i = framingRect.left;
            int i2 = framingRect.top;
            if (list.isEmpty()) {
                this.lastPossibleResultPoints = null;
            } else {
                this.possibleResultPoints = new ArrayList(5);
                this.lastPossibleResultPoints = list;
                this.paint.setAlpha(CURRENT_POINT_OPACITY);
                this.paint.setColor(this.resultPointColor);
                synchronized (list) {
                    for (u uVar : list) {
                        canvas.drawCircle((float) (((int) (uVar.getX() * width2)) + i), (float) (((int) (uVar.getY() * height2)) + i2), 6.0f, this.paint);
                    }
                }
            }
            if (list2 != null) {
                this.paint.setAlpha(80);
                this.paint.setColor(this.resultPointColor);
                synchronized (list2) {
                    for (u uVar2 : list2) {
                        canvas.drawCircle((float) (((int) (uVar2.getX() * width2)) + i), (float) (((int) (uVar2.getY() * height2)) + i2), 3.0f, this.paint);
                    }
                }
            }
            postInvalidateDelayed(ANIMATION_DELAY, framingRect.left - 6, framingRect.top - 6, framingRect.right + POINT_SIZE, framingRect.bottom + POINT_SIZE);
        }
    }

    public void setCameraManager(CameraManager cameraManager) {
        this.cameraManager = cameraManager;
    }
}
