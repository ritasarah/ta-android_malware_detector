package com.catfiz.qrlib;

import android.app.Activity;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import com.b.a.a;
import com.b.a.e;
import com.b.a.v;
import com.catfiz.qrlib.data.Preferences;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Map;
import java.util.concurrent.CountDownLatch;

final class DecodeThread extends Thread {
    public static final String BARCODE_BITMAP = "barcode_bitmap";
    private static final String TAG = DecodeThread.class.getSimpleName();
    private final IDecoderActivity activity;
    private Handler handler;
    private final CountDownLatch handlerInitLatch = new CountDownLatch(1);
    private final Map hints = new EnumMap(e.class);

    DecodeThread(IDecoderActivity iDecoderActivity, Collection collection, String str, v vVar) {
        Object noneOf;
        this.activity = iDecoderActivity;
        if (collection == null || collection.isEmpty()) {
            if (iDecoderActivity instanceof Activity) {
                noneOf = EnumSet.noneOf(a.class);
                if (Preferences.KEY_DECODE_1D) {
                    noneOf.addAll(DecodeFormatManager.ONE_D_FORMATS);
                }
                if (Preferences.KEY_DECODE_QR) {
                    noneOf.addAll(DecodeFormatManager.QR_CODE_FORMATS);
                }
                if (Preferences.KEY_DECODE_DATA_MATRIX) {
                    noneOf.addAll(DecodeFormatManager.DATA_MATRIX_FORMATS);
                }
            } else {
                Log.e(TAG, "activity is not an Activity, not handling preferences.");
            }
        }
        this.hints.put(e.POSSIBLE_FORMATS, noneOf);
        if (str != null) {
            this.hints.put(e.CHARACTER_SET, str);
        }
        this.hints.put(e.NEED_RESULT_POINT_CALLBACK, vVar);
    }

    Handler getHandler() {
        try {
            this.handlerInitLatch.await();
        } catch (InterruptedException e) {
        }
        return this.handler;
    }

    public void run() {
        Looper.prepare();
        this.handler = new DecodeHandler(this.activity, this.hints);
        this.handlerInitLatch.countDown();
        Looper.loop();
    }
}
