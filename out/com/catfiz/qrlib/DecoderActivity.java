package com.catfiz.qrlib;

import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Rect;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.FragmentActivity;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.util.Log;
import android.view.KeyEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import com.b.a.a;
import com.b.a.s;
import com.b.a.u;
import com.catfiz.R;
import com.catfiz.qrlib.camera.CameraManager;
import java.util.Collection;

public class DecoderActivity extends FragmentActivity implements Callback, IDecoderActivity {
    private static final String TAG = DecoderActivity.class.getSimpleName();
    protected CameraManager cameraManager = null;
    protected String characterSet = null;
    protected Collection decodeFormats = null;
    protected DecoderActivityHandler handler = null;
    protected boolean hasSurface = false;
    protected ViewFinderView viewfinderView = null;

    protected static void drawLine(Canvas canvas, Paint paint, u uVar, u uVar2) {
        canvas.drawLine(uVar.getX(), uVar.getY(), uVar2.getX(), uVar2.getY(), paint);
    }

    protected void drawResultPoints(Bitmap bitmap, s sVar) {
        int i = 0;
        u[] c = sVar.c();
        if (c != null && c.length > 0) {
            Canvas canvas = new Canvas(bitmap);
            Paint paint = new Paint();
            paint.setColor(getResources().getColor(R.color.result_image_border));
            paint.setStrokeWidth(3.0f);
            paint.setStyle(Style.STROKE);
            canvas.drawRect(new Rect(2, 2, bitmap.getWidth() - 2, bitmap.getHeight() - 2), paint);
            paint.setColor(getResources().getColor(R.color.result_points));
            if (c.length == 2) {
                paint.setStrokeWidth(4.0f);
                drawLine(canvas, paint, c[0], c[1]);
            } else if (c.length == 4 && (sVar.d() == a.UPC_A || sVar.d() == a.EAN_13)) {
                drawLine(canvas, paint, c[0], c[1]);
                drawLine(canvas, paint, c[2], c[3]);
            } else {
                paint.setStrokeWidth(10.0f);
                int length = c.length;
                while (i < length) {
                    u uVar = c[i];
                    canvas.drawPoint(uVar.getX(), uVar.getY(), paint);
                    i++;
                }
            }
        }
    }

    public CameraManager getCameraManager() {
        return this.cameraManager;
    }

    public Handler getHandler() {
        return this.handler;
    }

    public ViewFinderView getViewfinder() {
        return this.viewfinderView;
    }

    public void handleDecode(s sVar, Bitmap bitmap) {
        drawResultPoints(bitmap, sVar);
    }

    protected void initCamera(SurfaceHolder surfaceHolder) {
        try {
            this.cameraManager.openDriver(surfaceHolder);
            if (this.handler == null) {
                this.handler = new DecoderActivityHandler(this, this.decodeFormats, this.characterSet, this.cameraManager);
            }
        } catch (Throwable e) {
            Log.w(TAG, e);
        } catch (Throwable e2) {
            Log.w(TAG, "Unexpected error initializing camera", e2);
        }
    }

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        setContentView(R.layout.decoder_activity);
        Log.v(TAG, "onCreate()");
        getWindow().addFlags(AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS);
        this.handler = null;
        this.hasSurface = false;
    }

    protected void onDestroy() {
        super.onDestroy();
        Log.v(TAG, "onDestroy()");
    }

    public boolean onKeyDown(int i, KeyEvent keyEvent) {
        return (i == 80 || i == 27) ? true : super.onKeyDown(i, keyEvent);
    }

    protected void onPause() {
        super.onPause();
        Log.v(TAG, "onPause()");
        if (this.handler != null) {
            this.handler.quitSynchronously();
            this.handler = null;
        }
        this.cameraManager.closeDriver();
        if (!this.hasSurface) {
            ((SurfaceView) findViewById(R.id.preview_view)).getHolder().removeCallback(this);
        }
    }

    protected void onResume() {
        super.onResume();
        Log.v(TAG, "onResume()");
        if (this.cameraManager == null) {
            this.cameraManager = new CameraManager(getApplication());
        }
        if (this.viewfinderView == null) {
            this.viewfinderView = (ViewFinderView) findViewById(R.id.viewfinder_view);
            this.viewfinderView.setCameraManager(this.cameraManager);
        }
        showScanner();
        SurfaceHolder holder = ((SurfaceView) findViewById(R.id.preview_view)).getHolder();
        if (this.hasSurface) {
            initCamera(holder);
            return;
        }
        holder.addCallback(this);
        holder.setType(3);
    }

    protected void showScanner() {
        this.viewfinderView.setVisibility(0);
    }

    public void surfaceChanged(SurfaceHolder surfaceHolder, int i, int i2, int i3) {
    }

    public void surfaceCreated(SurfaceHolder surfaceHolder) {
        if (surfaceHolder == null) {
            Log.e(TAG, "*** WARNING *** surfaceCreated() gave us a null surface!");
        }
        if (!this.hasSurface) {
            this.hasSurface = true;
            initCamera(surfaceHolder);
        }
    }

    public void surfaceDestroyed(SurfaceHolder surfaceHolder) {
        this.hasSurface = false;
    }
}
