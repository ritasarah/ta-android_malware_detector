package com.catfiz.qrlib;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import com.b.a.s;
import com.catfiz.R;
import com.catfiz.qrlib.camera.CameraManager;
import java.util.Collection;

public final class DecoderActivityHandler extends Handler {
    private static final String TAG = DecoderActivityHandler.class.getSimpleName();
    private final IDecoderActivity activity;
    private final CameraManager cameraManager;
    private final DecodeThread decodeThread;
    private State state = State.SUCCESS;

    enum State {
        PREVIEW,
        SUCCESS,
        DONE
    }

    DecoderActivityHandler(IDecoderActivity iDecoderActivity, Collection collection, String str, CameraManager cameraManager) {
        this.activity = iDecoderActivity;
        this.decodeThread = new DecodeThread(iDecoderActivity, collection, str, new ViewfinderResultPointCallback(iDecoderActivity.getViewfinder()));
        this.decodeThread.start();
        this.cameraManager = cameraManager;
        cameraManager.startPreview();
        restartPreviewAndDecode();
    }

    public void handleMessage(Message message) {
        if (message.what == R.id.auto_focus) {
            if (this.state == State.PREVIEW) {
                this.cameraManager.requestAutoFocus(this, R.id.auto_focus);
            }
        } else if (message.what == R.id.restart_preview) {
            Log.d(TAG, "Got restart preview message");
            restartPreviewAndDecode();
        } else if (message.what == R.id.decode_succeeded) {
            Log.d(TAG, "Got decode succeeded message");
            this.state = State.SUCCESS;
            Bundle data = message.getData();
            this.activity.handleDecode((s) message.obj, data == null ? null : (Bitmap) data.getParcelable(DecodeThread.BARCODE_BITMAP));
        } else if (message.what == R.id.decode_failed) {
            this.state = State.PREVIEW;
            this.cameraManager.requestPreviewFrame(this.decodeThread.getHandler(), R.id.decode);
        } else if (message.what == R.id.return_scan_result) {
            Log.d(TAG, "Got return scan result message");
            if (this.activity instanceof Activity) {
                ((Activity) this.activity).setResult(-1, (Intent) message.obj);
                ((Activity) this.activity).finish();
                return;
            }
            Log.e(TAG, "Scan result message, activity is not Activity. Doing nothing.");
        }
    }

    public void quitSynchronously() {
        this.state = State.DONE;
        this.cameraManager.stopPreview();
        Message.obtain(this.decodeThread.getHandler(), R.id.quit).sendToTarget();
        try {
            this.decodeThread.join(500);
        } catch (InterruptedException e) {
        }
        removeMessages(R.id.decode_succeeded);
        removeMessages(R.id.decode_failed);
    }

    void restartPreviewAndDecode() {
        if (this.state == State.SUCCESS) {
            this.state = State.PREVIEW;
            this.cameraManager.requestPreviewFrame(this.decodeThread.getHandler(), R.id.decode);
            this.cameraManager.requestAutoFocus(this, R.id.auto_focus);
            this.activity.getViewfinder().drawViewfinder();
        }
    }
}
