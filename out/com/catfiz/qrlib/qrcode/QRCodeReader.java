package com.catfiz.qrlib.qrcode;

import com.b.a.a;
import com.b.a.c;
import com.b.a.c.b;
import com.b.a.c.e;
import com.b.a.c.g;
import com.b.a.n;
import com.b.a.q;
import com.b.a.s;
import com.b.a.t;
import com.b.a.u;
import com.catfiz.qrlib.qrcode.decoder.Decoder;
import com.catfiz.qrlib.qrcode.detector.Detector;
import java.util.List;
import java.util.Map;

public class QRCodeReader implements q {
    private static final u[] NO_POINTS = new u[0];
    private final Decoder decoder = new Decoder();

    private static b extractPureBits(b bVar) {
        int[] c = bVar.c();
        int[] d = bVar.d();
        if (c == null || d == null) {
            throw n.a();
        }
        int moduleSize = moduleSize(c, bVar);
        int i = c[1];
        int i2 = d[1];
        int i3 = c[0];
        int i4 = d[0];
        if (i2 - i != i4 - i3) {
            i4 = (i2 - i) + i3;
        }
        int i5 = ((i4 - i3) + 1) / moduleSize;
        i2 = ((i2 - i) + 1) / moduleSize;
        if (i5 <= 0 || i2 <= 0) {
            throw n.a();
        } else if (i2 != i5) {
            throw n.a();
        } else {
            i4 = moduleSize >> 1;
            i += i4;
            i3 += i4;
            b bVar2 = new b(i5, i2);
            for (int i6 = 0; i6 < i2; i6++) {
                int i7 = i + (i6 * moduleSize);
                for (i4 = 0; i4 < i5; i4++) {
                    if (bVar.a((i4 * moduleSize) + i3, i7)) {
                        bVar2.b(i4, i6);
                    }
                }
            }
            return bVar2;
        }
    }

    private static int moduleSize(int[] iArr, b bVar) {
        int f = bVar.f();
        int e = bVar.e();
        int i = iArr[0];
        int i2 = iArr[1];
        while (i < e && i2 < f && bVar.a(i, i2)) {
            i++;
            i2++;
        }
        if (i == e || i2 == f) {
            throw n.a();
        }
        i2 = i - iArr[0];
        if (i2 != 0) {
            return i2;
        }
        throw n.a();
    }

    public s decode(c cVar) {
        return decode(cVar, null);
    }

    public s decode(c cVar, Map map) {
        e decode;
        u[] e;
        if (map == null || !map.containsKey(com.b.a.e.PURE_BARCODE)) {
            g detect = new Detector(cVar.c()).detect(map);
            decode = this.decoder.decode(detect.d(), map);
            e = detect.e();
        } else {
            decode = this.decoder.decode(extractPureBits(cVar.c()), map);
            e = NO_POINTS;
        }
        s sVar = new s(decode.b(), decode.a(), e, a.QR_CODE);
        List c = decode.c();
        if (c != null) {
            sVar.a(t.BYTE_SEGMENTS, c);
        }
        String d = decode.d();
        if (d != null) {
            sVar.a(t.ERROR_CORRECTION_LEVEL, d);
        }
        return sVar;
    }

    protected Decoder getDecoder() {
        return this.decoder;
    }

    public void reset() {
    }
}
