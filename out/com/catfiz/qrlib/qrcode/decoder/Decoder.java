package com.catfiz.qrlib.qrcode.decoder;

import android.support.v4.view.MotionEventCompat;
import com.b.a.c.b;
import com.b.a.c.b.a;
import com.b.a.c.b.c;
import com.b.a.c.b.e;
import com.b.a.d;
import java.util.Map;

public final class Decoder {
    private final c rsDecoder = new c(a.e);

    private void correctErrors(byte[] bArr, int i) {
        int i2 = 0;
        int length = bArr.length;
        int[] iArr = new int[length];
        for (int i3 = 0; i3 < length; i3++) {
            iArr[i3] = bArr[i3] & MotionEventCompat.ACTION_MASK;
        }
        try {
            this.rsDecoder.a(iArr, bArr.length - i);
            while (i2 < i) {
                bArr[i2] = (byte) iArr[i2];
                i2++;
            }
        } catch (e e) {
            throw d.a();
        }
    }

    public com.b.a.c.e decode(b bVar) {
        return decode(bVar, null);
    }

    public com.b.a.c.e decode(b bVar, Map map) {
        BitMatrixParser bitMatrixParser = new BitMatrixParser(bVar);
        Version readVersion = bitMatrixParser.readVersion();
        ErrorCorrectionLevel errorCorrectionLevel = bitMatrixParser.readFormatInformation().getErrorCorrectionLevel();
        DataBlock[] dataBlocks = DataBlock.getDataBlocks(bitMatrixParser.readCodewords(), readVersion, errorCorrectionLevel);
        int i = 0;
        for (DataBlock numDataCodewords : dataBlocks) {
            i += numDataCodewords.getNumDataCodewords();
        }
        byte[] bArr = new byte[i];
        int length = dataBlocks.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            DataBlock dataBlock = dataBlocks[i2];
            byte[] codewords = dataBlock.getCodewords();
            int numDataCodewords2 = dataBlock.getNumDataCodewords();
            correctErrors(codewords, numDataCodewords2);
            i = i3;
            i3 = 0;
            while (i3 < numDataCodewords2) {
                int i4 = i + 1;
                bArr[i] = codewords[i3];
                i3++;
                i = i4;
            }
            i2++;
            i3 = i;
        }
        return DecodedBitStreamParser.decode(bArr, readVersion, errorCorrectionLevel, map);
    }

    public com.b.a.c.e decode(boolean[][] zArr) {
        return decode(zArr, null);
    }

    public com.b.a.c.e decode(boolean[][] zArr, Map map) {
        int length = zArr.length;
        b bVar = new b(length);
        for (int i = 0; i < length; i++) {
            for (int i2 = 0; i2 < length; i2++) {
                if (zArr[i][i2]) {
                    bVar.b(i2, i);
                }
            }
        }
        return decode(bVar, map);
    }
}
