package com.catfiz.qrlib.qrcode.decoder;

import com.b.a.c.b;
import com.b.a.h;

final class BitMatrixParser {
    private final b bitMatrix;
    private FormatInformation parsedFormatInfo;
    private Version parsedVersion;

    BitMatrixParser(b bVar) {
        int f = bVar.f();
        if (f < 21 || (f & 3) != 1) {
            throw h.a();
        }
        this.bitMatrix = bVar;
    }

    private int copyBit(int i, int i2, int i3) {
        return this.bitMatrix.a(i, i2) ? (i3 << 1) | 1 : i3 << 1;
    }

    byte[] readCodewords() {
        FormatInformation readFormatInformation = readFormatInformation();
        Version readVersion = readVersion();
        DataMask forReference = DataMask.forReference(readFormatInformation.getDataMask());
        int f = this.bitMatrix.f();
        forReference.unmaskBitMatrix(this.bitMatrix, f);
        b buildFunctionPattern = readVersion.buildFunctionPattern();
        byte[] bArr = new byte[readVersion.getTotalCodewords()];
        int i = f - 1;
        int i2 = 0;
        int i3 = 0;
        int i4 = 0;
        int i5 = 1;
        while (i > 0) {
            if (i == 6) {
                i--;
            }
            int i6 = 0;
            while (i6 < f) {
                int i7 = i5 != 0 ? (f - 1) - i6 : i6;
                for (int i8 = 0; i8 < 2; i8++) {
                    if (!buildFunctionPattern.a(i - i8, i7)) {
                        i2++;
                        i3 <<= 1;
                        if (this.bitMatrix.a(i - i8, i7)) {
                            i3 |= 1;
                        }
                        if (i2 == 8) {
                            i2 = i4 + 1;
                            bArr[i4] = (byte) i3;
                            i3 = 0;
                            i4 = i2;
                            i2 = 0;
                        }
                    }
                }
                i6++;
            }
            i -= 2;
            i5 ^= 1;
        }
        if (i4 == readVersion.getTotalCodewords()) {
            return bArr;
        }
        throw h.a();
    }

    FormatInformation readFormatInformation() {
        int i = 0;
        if (this.parsedFormatInfo != null) {
            return this.parsedFormatInfo;
        }
        int i2;
        int i3 = 0;
        for (i2 = 0; i2 < 6; i2++) {
            i3 = copyBit(i2, 8, i3);
        }
        i3 = copyBit(8, 7, copyBit(8, 8, copyBit(7, 8, i3)));
        for (i2 = 5; i2 >= 0; i2--) {
            i3 = copyBit(8, i2, i3);
        }
        int f = this.bitMatrix.f();
        int i4 = f - 7;
        for (i2 = f - 1; i2 >= i4; i2--) {
            i = copyBit(8, i2, i);
        }
        for (i2 = f - 8; i2 < f; i2++) {
            i = copyBit(i2, 8, i);
        }
        this.parsedFormatInfo = FormatInformation.decodeFormatInformation(i3, i);
        if (this.parsedFormatInfo != null) {
            return this.parsedFormatInfo;
        }
        throw h.a();
    }

    Version readVersion() {
        if (this.parsedVersion != null) {
            return this.parsedVersion;
        }
        int f = this.bitMatrix.f();
        int i = (f - 17) >> 2;
        if (i <= 6) {
            return Version.getVersionForNumber(i);
        }
        int i2 = f - 11;
        int i3 = 0;
        for (int i4 = 5; i4 >= 0; i4--) {
            for (i = f - 9; i >= i2; i--) {
                i3 = copyBit(i, i4, i3);
            }
        }
        Version decodeVersionInformation = Version.decodeVersionInformation(i3);
        if (decodeVersionInformation == null || decodeVersionInformation.getDimensionForVersion() != f) {
            int i5 = 0;
            for (int i6 = 5; i6 >= 0; i6--) {
                for (i = f - 9; i >= i2; i--) {
                    i5 = copyBit(i6, i, i5);
                }
            }
            decodeVersionInformation = Version.decodeVersionInformation(i5);
            if (decodeVersionInformation == null || decodeVersionInformation.getDimensionForVersion() != f) {
                throw h.a();
            }
            this.parsedVersion = decodeVersionInformation;
            return decodeVersionInformation;
        }
        this.parsedVersion = decodeVersionInformation;
        return decodeVersionInformation;
    }
}
