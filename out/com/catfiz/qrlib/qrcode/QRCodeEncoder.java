package com.catfiz.qrlib.qrcode;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.os.Bundle;
import android.support.v4.widget.AutoScrollHelper;
import android.telephony.PhoneNumberUtils;
import com.b.a.a;
import com.b.a.c.b;
import com.b.a.g;
import com.b.a.l;
import com.catfiz.qrlib.data.Contents;
import com.catfiz.qrlib.data.Contents.Type;
import com.catfiz.service.CatfishDataStorage;
import java.util.Collection;
import java.util.EnumMap;
import java.util.HashSet;
import java.util.Map;
import org.apache.http.protocol.HTTP;

public final class QRCodeEncoder {
    private static final int BLACK = -16777216;
    private static final int WHITE = -1;
    private String contents = null;
    private int dimension = RtlSpacingHelper.UNDEFINED;
    private String displayContents = null;
    private boolean encoded = false;
    private a format = null;
    private String title = null;

    public QRCodeEncoder(String str, Bundle bundle, String str2, String str3, int i) {
        this.dimension = i;
        this.encoded = encodeContents(str, bundle, str2, str3);
    }

    private boolean encodeContents(String str, Bundle bundle, String str2, String str3) {
        this.format = null;
        if (str3 != null) {
            try {
                this.format = a.valueOf(str3);
            } catch (IllegalArgumentException e) {
            }
        }
        if (this.format == null || this.format == a.QR_CODE) {
            this.format = a.QR_CODE;
            encodeQRCodeContents(str, bundle, str2);
        } else if (str != null && str.length() > 0) {
            this.contents = str;
            this.displayContents = str;
            this.title = "Text";
        }
        return this.contents != null && this.contents.length() > 0;
    }

    private void encodeQRCodeContents(String str, Bundle bundle, String str2) {
        int i = 0;
        if (str2.equals(Type.TEXT)) {
            if (str != null && str.length() > 0) {
                this.contents = str;
                this.displayContents = str;
                this.title = "Text";
            }
        } else if (str2.equals(Type.EMAIL)) {
            r0 = trim(str);
            if (r0 != null) {
                this.contents = "mailto:" + r0;
                this.displayContents = r0;
                this.title = "E-Mail";
            }
        } else if (str2.equals(Type.PHONE)) {
            r0 = trim(str);
            if (r0 != null) {
                this.contents = "tel:" + r0;
                this.displayContents = PhoneNumberUtils.formatNumber(r0);
                this.title = "Phone";
            }
        } else if (str2.equals(Type.SMS)) {
            r0 = trim(str);
            if (r0 != null) {
                this.contents = "sms:" + r0;
                this.displayContents = PhoneNumberUtils.formatNumber(r0);
                this.title = "SMS";
            }
        } else if (str2.equals(Type.CONTACT)) {
            if (bundle != null) {
                StringBuilder stringBuilder = new StringBuilder(100);
                StringBuilder stringBuilder2 = new StringBuilder(100);
                stringBuilder.append("MECARD:");
                r0 = trim(bundle.getString(CatfishDataStorage.NIC_NAME));
                if (r0 != null) {
                    stringBuilder.append("N:").append(escapeMECARD(r0)).append(';');
                    stringBuilder2.append(r0);
                }
                r0 = trim(bundle.getString("postal"));
                if (r0 != null) {
                    stringBuilder.append("ADR:").append(escapeMECARD(r0)).append(';');
                    stringBuilder2.append('\n').append(r0);
                }
                Collection<String> hashSet = new HashSet(Contents.PHONE_KEYS.length);
                for (String string : Contents.PHONE_KEYS) {
                    String string2 = trim(bundle.getString(string2));
                    if (string2 != null) {
                        hashSet.add(string2);
                    }
                }
                for (String str3 : hashSet) {
                    stringBuilder.append("TEL:").append(escapeMECARD(str3)).append(';');
                    stringBuilder2.append('\n').append(PhoneNumberUtils.formatNumber(str3));
                }
                Collection<String> hashSet2 = new HashSet(Contents.EMAIL_KEYS.length);
                while (i < Contents.EMAIL_KEYS.length) {
                    String trim = trim(bundle.getString(Contents.EMAIL_KEYS[i]));
                    if (trim != null) {
                        hashSet2.add(trim);
                    }
                    i++;
                }
                for (String str32 : hashSet2) {
                    stringBuilder.append("EMAIL:").append(escapeMECARD(str32)).append(';');
                    stringBuilder2.append('\n').append(str32);
                }
                str32 = trim(bundle.getString(Contents.URL_KEY));
                if (str32 != null) {
                    stringBuilder.append("URL:").append(str32).append(';');
                    stringBuilder2.append('\n').append(str32);
                }
                str32 = trim(bundle.getString(Contents.NOTE_KEY));
                if (str32 != null) {
                    stringBuilder.append("NOTE:").append(escapeMECARD(str32)).append(';');
                    stringBuilder2.append('\n').append(str32);
                }
                if (stringBuilder2.length() > 0) {
                    stringBuilder.append(';');
                    this.contents = stringBuilder.toString();
                    this.displayContents = stringBuilder2.toString();
                    this.title = "Contact";
                    return;
                }
                this.contents = null;
                this.displayContents = null;
            }
        } else if (str2.equals(Type.LOCATION) && bundle != null) {
            float f = bundle.getFloat("LAT", AutoScrollHelper.NO_MAX);
            float f2 = bundle.getFloat("LONG", AutoScrollHelper.NO_MAX);
            if (f != AutoScrollHelper.NO_MAX && f2 != AutoScrollHelper.NO_MAX) {
                this.contents = "geo:" + f + ',' + f2;
                this.displayContents = f + "," + f2;
                this.title = "Location";
            }
        }
    }

    private static String escapeMECARD(String str) {
        if (str == null) {
            return str;
        }
        if (str.indexOf(58) < 0 && str.indexOf(59) < 0) {
            return str;
        }
        int length = str.length();
        StringBuilder stringBuilder = new StringBuilder(length);
        for (int i = 0; i < length; i++) {
            char charAt = str.charAt(i);
            if (charAt == ':' || charAt == ';') {
                stringBuilder.append('\\');
            }
            stringBuilder.append(charAt);
        }
        return stringBuilder.toString();
    }

    private static String guessAppropriateEncoding(CharSequence charSequence) {
        for (int i = 0; i < charSequence.length(); i++) {
            if (charSequence.charAt(i) > '\u00ff') {
                return HTTP.UTF_8;
            }
        }
        return null;
    }

    private static String trim(String str) {
        if (str == null) {
            return null;
        }
        String trim = str.trim();
        return trim.length() != 0 ? trim : null;
    }

    public Bitmap encodeAsBitmap() {
        Map map = null;
        if (!this.encoded) {
            return null;
        }
        String guessAppropriateEncoding = guessAppropriateEncoding(this.contents);
        if (guessAppropriateEncoding != null) {
            map = new EnumMap(g.class);
            map.put(g.CHARACTER_SET, guessAppropriateEncoding);
        }
        b encode = new l().encode(this.contents, this.format, this.dimension, this.dimension, map);
        int e = encode.e();
        int f = encode.f();
        int[] iArr = new int[(e * f)];
        int i = 0;
        int i2 = 0;
        while (i < f) {
            int i3 = i * e;
            int i4 = 0;
            int i5 = i2;
            while (i4 < e) {
                iArr[i3 + i4] = encode.a(i4, i) ? BLACK : WHITE;
                int i6 = (i5 == 0 && iArr[i3 + i4] == BLACK) ? i4 : i5;
                i4++;
                i5 = i6;
            }
            i++;
            i2 = i5;
        }
        Bitmap createBitmap = Bitmap.createBitmap(e, f, Config.ARGB_8888);
        createBitmap.setPixels(iArr, 0, e, 0, 0, e, f);
        return Bitmap.createBitmap(createBitmap, i2 + WHITE, i2 + WHITE, e - (i2 * 2), f - (i2 * 2));
    }

    public String getContents() {
        return this.contents;
    }

    public String getDisplayContents() {
        return this.displayContents;
    }

    public String getTitle() {
        return this.title;
    }
}
