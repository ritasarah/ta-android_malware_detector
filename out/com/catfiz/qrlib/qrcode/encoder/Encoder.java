package com.catfiz.qrlib.qrcode.encoder;

import android.support.v4.view.MotionEventCompat;
import com.b.a.c.a;
import com.b.a.c.d;
import com.b.a.g;
import com.b.a.x;
import com.catfiz.qrlib.qrcode.decoder.ErrorCorrectionLevel;
import com.catfiz.qrlib.qrcode.decoder.Mode;
import com.catfiz.qrlib.qrcode.decoder.Version;
import com.catfiz.qrlib.qrcode.decoder.Version.ECBlocks;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import org.apache.http.conn.routing.HttpRouteDirector;

public final class Encoder {
    private static final int[] ALPHANUMERIC_TABLE = new int[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, 37, 38, -1, -1, -1, -1, 39, 40, -1, 41, 42, 43, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 44, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, -1, -1, -1, -1, -1};
    static final String DEFAULT_BYTE_MODE_ENCODING = "ISO-8859-1";

    /* synthetic */ class AnonymousClass1 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$qrlib$qrcode$decoder$Mode = new int[Mode.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$qrlib$qrcode$decoder$Mode[Mode.NUMERIC.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$qrlib$qrcode$decoder$Mode[Mode.ALPHANUMERIC.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$qrlib$qrcode$decoder$Mode[Mode.BYTE.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$qrlib$qrcode$decoder$Mode[Mode.KANJI.ordinal()] = 4;
            } catch (NoSuchFieldError e4) {
            }
        }
    }

    private Encoder() {
    }

    static void append8BitBytes(String str, a aVar, String str2) {
        try {
            for (byte c : str.getBytes(str2)) {
                aVar.c(c, 8);
            }
        } catch (UnsupportedEncodingException e) {
            throw new x(e.toString());
        }
    }

    static void appendAlphanumericBytes(CharSequence charSequence, a aVar) {
        int length = charSequence.length();
        int i = 0;
        while (i < length) {
            int alphanumericCode = getAlphanumericCode(charSequence.charAt(i));
            if (alphanumericCode == -1) {
                throw new x();
            } else if (i + 1 < length) {
                int alphanumericCode2 = getAlphanumericCode(charSequence.charAt(i + 1));
                if (alphanumericCode2 == -1) {
                    throw new x();
                }
                aVar.c((alphanumericCode * 45) + alphanumericCode2, 11);
                i += 2;
            } else {
                aVar.c(alphanumericCode, 6);
                i++;
            }
        }
    }

    static void appendBytes(String str, Mode mode, a aVar, String str2) {
        switch (AnonymousClass1.$SwitchMap$com$catfiz$qrlib$qrcode$decoder$Mode[mode.ordinal()]) {
            case e.b /*1*/:
                appendNumericBytes(str, aVar);
                return;
            case e.c /*2*/:
                appendAlphanumericBytes(str, aVar);
                return;
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                append8BitBytes(str, aVar, str2);
                return;
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                appendKanjiBytes(str, aVar);
                return;
            default:
                throw new x("Invalid mode: " + mode);
        }
    }

    private static void appendECI(d dVar, a aVar) {
        aVar.c(Mode.ECI.getBits(), 4);
        aVar.c(dVar.a(), 8);
    }

    static void appendKanjiBytes(String str, a aVar) {
        try {
            byte[] bytes = str.getBytes("Shift_JIS");
            int length = bytes.length;
            for (int i = 0; i < length; i += 2) {
                int i2 = ((bytes[i] & MotionEventCompat.ACTION_MASK) << 8) | (bytes[i + 1] & MotionEventCompat.ACTION_MASK);
                i2 = (i2 < 33088 || i2 > 40956) ? (i2 < 57408 || i2 > 60351) ? -1 : i2 - 49472 : i2 - 33088;
                if (i2 == -1) {
                    throw new x("Invalid byte sequence");
                }
                aVar.c((i2 & MotionEventCompat.ACTION_MASK) + ((i2 >> 8) * 192), 13);
            }
        } catch (UnsupportedEncodingException e) {
            throw new x(e.toString());
        }
    }

    static void appendLengthInfo(int i, int i2, Mode mode, a aVar) {
        int characterCountBits = mode.getCharacterCountBits(Version.getVersionForNumber(i2));
        if (i > (1 << characterCountBits) - 1) {
            throw new x(i + "is bigger than" + ((1 << characterCountBits) - 1));
        }
        aVar.c(i, characterCountBits);
    }

    static void appendModeInfo(Mode mode, a aVar) {
        aVar.c(mode.getBits(), 4);
    }

    static void appendNumericBytes(CharSequence charSequence, a aVar) {
        int length = charSequence.length();
        int i = 0;
        while (i < length) {
            int charAt = charSequence.charAt(i) - 48;
            if (i + 2 < length) {
                aVar.c(((charAt * 100) + ((charSequence.charAt(i + 1) - 48) * 10)) + (charSequence.charAt(i + 2) - 48), 10);
                i += 3;
            } else if (i + 1 < length) {
                aVar.c((charAt * 10) + (charSequence.charAt(i + 1) - 48), 7);
                i += 2;
            } else {
                aVar.c(charAt, 4);
                i++;
            }
        }
    }

    private static int calculateMaskPenalty(ByteMatrix byteMatrix) {
        return (((0 + MaskUtil.applyMaskPenaltyRule1(byteMatrix)) + MaskUtil.applyMaskPenaltyRule2(byteMatrix)) + MaskUtil.applyMaskPenaltyRule3(byteMatrix)) + MaskUtil.applyMaskPenaltyRule4(byteMatrix);
    }

    private static int chooseMaskPattern(a aVar, ErrorCorrectionLevel errorCorrectionLevel, int i, ByteMatrix byteMatrix) {
        int i2 = ActivityChooserViewAdapter.MAX_ACTIVITY_COUNT_UNLIMITED;
        int i3 = -1;
        int i4 = 0;
        while (i4 < 8) {
            MatrixUtil.buildMatrix(aVar, errorCorrectionLevel, i, i4, byteMatrix);
            int calculateMaskPenalty = calculateMaskPenalty(byteMatrix);
            if (calculateMaskPenalty < i2) {
                i3 = i4;
            } else {
                calculateMaskPenalty = i2;
            }
            i4++;
            i2 = calculateMaskPenalty;
        }
        return i3;
    }

    public static Mode chooseMode(String str) {
        return chooseMode(str, null);
    }

    private static Mode chooseMode(String str, String str2) {
        int i = 0;
        if ("Shift_JIS".equals(str2)) {
            return isOnlyDoubleByteKanji(str) ? Mode.KANJI : Mode.BYTE;
        } else {
            int i2 = 0;
            int i3 = 0;
            while (i < str.length()) {
                char charAt = str.charAt(i);
                if (charAt >= '0' && charAt <= '9') {
                    i3 = 1;
                } else if (getAlphanumericCode(charAt) == -1) {
                    return Mode.BYTE;
                } else {
                    i2 = 1;
                }
                i++;
            }
            return i2 != 0 ? Mode.ALPHANUMERIC : i3 != 0 ? Mode.NUMERIC : Mode.BYTE;
        }
    }

    public static void encode(String str, ErrorCorrectionLevel errorCorrectionLevel, QRCode qRCode) {
        encode(str, errorCorrectionLevel, null, qRCode);
    }

    public static void encode(String str, ErrorCorrectionLevel errorCorrectionLevel, Map map, QRCode qRCode) {
        String str2 = map == null ? null : (String) map.get(g.CHARACTER_SET);
        if (str2 == null) {
            str2 = DEFAULT_BYTE_MODE_ENCODING;
        }
        Mode chooseMode = chooseMode(str, str2);
        a aVar = new a();
        appendBytes(str, chooseMode, aVar, str2);
        initQRCode(aVar.a(), errorCorrectionLevel, chooseMode, qRCode);
        a aVar2 = new a();
        if (chooseMode == Mode.BYTE && !DEFAULT_BYTE_MODE_ENCODING.equals(str2)) {
            d a = d.a(str2);
            if (a != null) {
                appendECI(a, aVar2);
            }
        }
        appendModeInfo(chooseMode, aVar2);
        appendLengthInfo(chooseMode == Mode.BYTE ? aVar.b() : str.length(), qRCode.getVersion(), chooseMode, aVar2);
        aVar2.a(aVar);
        terminateBits(qRCode.getNumDataBytes(), aVar2);
        a aVar3 = new a();
        interleaveWithECBytes(aVar2, qRCode.getNumTotalBytes(), qRCode.getNumDataBytes(), qRCode.getNumRSBlocks(), aVar3);
        ByteMatrix byteMatrix = new ByteMatrix(qRCode.getMatrixWidth(), qRCode.getMatrixWidth());
        qRCode.setMaskPattern(chooseMaskPattern(aVar3, errorCorrectionLevel, qRCode.getVersion(), byteMatrix));
        MatrixUtil.buildMatrix(aVar3, errorCorrectionLevel, qRCode.getVersion(), qRCode.getMaskPattern(), byteMatrix);
        qRCode.setMatrix(byteMatrix);
        if (!qRCode.isValid()) {
            throw new x("Invalid QR code: " + qRCode.toString());
        }
    }

    static byte[] generateECBytes(byte[] bArr, int i) {
        int i2 = 0;
        int length = bArr.length;
        int[] iArr = new int[(length + i)];
        for (int i3 = 0; i3 < length; i3++) {
            iArr[i3] = bArr[i3] & MotionEventCompat.ACTION_MASK;
        }
        new com.b.a.c.b.d(com.b.a.c.b.a.e).a(iArr, i);
        byte[] bArr2 = new byte[i];
        while (i2 < i) {
            bArr2[i2] = (byte) iArr[length + i2];
            i2++;
        }
        return bArr2;
    }

    static int getAlphanumericCode(int i) {
        return i < ALPHANUMERIC_TABLE.length ? ALPHANUMERIC_TABLE[i] : -1;
    }

    static void getNumDataBytesAndNumECBytesForBlockID(int i, int i2, int i3, int i4, int[] iArr, int[] iArr2) {
        if (i4 >= i3) {
            throw new x("Block ID too large");
        }
        int i5 = i % i3;
        int i6 = i3 - i5;
        int i7 = i / i3;
        int i8 = i7 + 1;
        int i9 = i2 / i3;
        int i10 = i9 + 1;
        i7 -= i9;
        i8 -= i10;
        if (i7 != i8) {
            throw new x("EC bytes mismatch");
        } else if (i3 != i6 + i5) {
            throw new x("RS blocks mismatch");
        } else {
            if (i != (i5 * (i10 + i8)) + ((i9 + i7) * i6)) {
                throw new x("Total bytes mismatch");
            } else if (i4 < i6) {
                iArr[0] = i9;
                iArr2[0] = i7;
            } else {
                iArr[0] = i10;
                iArr2[0] = i8;
            }
        }
    }

    private static int getTotalInputBytes(int i, Version version, Mode mode) {
        return (((4 + mode.getCharacterCountBits(version)) + i) + 7) / 8;
    }

    private static void initQRCode(int i, ErrorCorrectionLevel errorCorrectionLevel, Mode mode, QRCode qRCode) {
        qRCode.setECLevel(errorCorrectionLevel);
        qRCode.setMode(mode);
        for (int i2 = 1; i2 <= 40; i2++) {
            Version versionForNumber = Version.getVersionForNumber(i2);
            int totalCodewords = versionForNumber.getTotalCodewords();
            ECBlocks eCBlocksForLevel = versionForNumber.getECBlocksForLevel(errorCorrectionLevel);
            int totalECCodewords = eCBlocksForLevel.getTotalECCodewords();
            int numBlocks = eCBlocksForLevel.getNumBlocks();
            int i3 = totalCodewords - totalECCodewords;
            if (i3 >= getTotalInputBytes(i, versionForNumber, mode)) {
                qRCode.setVersion(i2);
                qRCode.setNumTotalBytes(totalCodewords);
                qRCode.setNumDataBytes(i3);
                qRCode.setNumRSBlocks(numBlocks);
                qRCode.setNumECBytes(totalECCodewords);
                qRCode.setMatrixWidth(versionForNumber.getDimensionForVersion());
                return;
            }
        }
        throw new x("Cannot find proper rs block info (input data too big?)");
    }

    static void interleaveWithECBytes(a aVar, int i, int i2, int i3, a aVar2) {
        if (aVar.b() != i2) {
            throw new x("Number of bits and data bytes does not match");
        }
        Collection<BlockPair> arrayList = new ArrayList(i3);
        int i4 = 0;
        int i5 = 0;
        int i6 = 0;
        int i7 = 0;
        while (i4 < i3) {
            int[] iArr = new int[1];
            int[] iArr2 = new int[1];
            getNumDataBytesAndNumECBytesForBlockID(i, i2, i3, i4, iArr, iArr2);
            int i8 = iArr[0];
            byte[] bArr = new byte[i8];
            aVar.a(i7 * 8, bArr, 0, i8);
            byte[] generateECBytes = generateECBytes(bArr, iArr2[0]);
            arrayList.add(new BlockPair(bArr, generateECBytes));
            int max = Math.max(i6, i8);
            i4++;
            i5 = Math.max(i5, generateECBytes.length);
            i6 = max;
            i7 = iArr[0] + i7;
        }
        if (i2 != i7) {
            throw new x("Data bytes does not match offset");
        }
        for (max = 0; max < i6; max++) {
            for (BlockPair dataBytes : arrayList) {
                byte[] dataBytes2 = dataBytes.getDataBytes();
                if (max < dataBytes2.length) {
                    aVar2.c(dataBytes2[max], 8);
                }
            }
        }
        for (max = 0; max < i5; max++) {
            for (BlockPair dataBytes3 : arrayList) {
                dataBytes2 = dataBytes3.getErrorCorrectionBytes();
                if (max < dataBytes2.length) {
                    aVar2.c(dataBytes2[max], 8);
                }
            }
        }
        if (i != aVar2.b()) {
            throw new x("Interleaving error: " + i + " and " + aVar2.b() + " differ.");
        }
    }

    private static boolean isOnlyDoubleByteKanji(String str) {
        try {
            byte[] bytes = str.getBytes("Shift_JIS");
            int length = bytes.length;
            if (length % 2 != 0) {
                return false;
            }
            for (int i = 0; i < length; i += 2) {
                int i2 = bytes[i] & MotionEventCompat.ACTION_MASK;
                if ((i2 < 129 || i2 > 159) && (i2 < 224 || i2 > 235)) {
                    return false;
                }
            }
            return true;
        } catch (UnsupportedEncodingException e) {
            return false;
        }
    }

    static void terminateBits(int i, a aVar) {
        int i2 = i << 3;
        if (aVar.a() > i2) {
            throw new x("data bits cannot fit in the QR Code" + aVar.a() + " > " + i2);
        }
        int i3;
        for (i3 = 0; i3 < 4 && aVar.a() < i2; i3++) {
            aVar.a(false);
        }
        i3 = aVar.a() & 7;
        if (i3 > 0) {
            while (i3 < 8) {
                aVar.a(false);
                i3++;
            }
        }
        int b = i - aVar.b();
        for (i3 = 0; i3 < b; i3++) {
            aVar.c((i3 & 1) == 0 ? 236 : 17, 8);
        }
        if (aVar.a() != i2) {
            throw new x("Bits size does not equal capacity");
        }
    }
}
