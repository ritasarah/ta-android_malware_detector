package com.catfiz.qrlib.qrcode.detector;

import com.b.a.c.b;
import com.b.a.c.g;
import com.b.a.c.i;
import com.b.a.c.k;
import com.b.a.e;
import com.b.a.n;
import com.b.a.u;
import com.b.a.v;
import com.catfiz.qrlib.qrcode.decoder.Version;
import java.util.Map;
import org.apache.http.conn.routing.HttpRouteDirector;

public class Detector {
    private final b image;
    private v resultPointCallback;

    public Detector(b bVar) {
        this.image = bVar;
    }

    private float calculateModuleSizeOneWay(u uVar, u uVar2) {
        float sizeOfBlackWhiteBlackRunBothWays = sizeOfBlackWhiteBlackRunBothWays((int) uVar.getX(), (int) uVar.getY(), (int) uVar2.getX(), (int) uVar2.getY());
        float sizeOfBlackWhiteBlackRunBothWays2 = sizeOfBlackWhiteBlackRunBothWays((int) uVar2.getX(), (int) uVar2.getY(), (int) uVar.getX(), (int) uVar.getY());
        return Float.isNaN(sizeOfBlackWhiteBlackRunBothWays) ? sizeOfBlackWhiteBlackRunBothWays2 / 7.0f : Float.isNaN(sizeOfBlackWhiteBlackRunBothWays2) ? sizeOfBlackWhiteBlackRunBothWays / 7.0f : (sizeOfBlackWhiteBlackRunBothWays + sizeOfBlackWhiteBlackRunBothWays2) / 14.0f;
    }

    protected static int computeDimension(u uVar, u uVar2, u uVar3, float f) {
        int round = ((round(u.distance(uVar, uVar2) / f) + round(u.distance(uVar, uVar3) / f)) >> 1) + 7;
        switch (round & 3) {
            case e.a /*0*/:
                return round + 1;
            case e.c /*2*/:
                return round - 1;
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                throw n.a();
            default:
                return round;
        }
    }

    public static k createTransform(u uVar, u uVar2, u uVar3, u uVar4, int i) {
        float x;
        float y;
        float f;
        float f2;
        float f3 = ((float) i) - 3.5f;
        if (uVar4 != null) {
            x = uVar4.getX();
            y = uVar4.getY();
            f = f3 - 3.0f;
            f2 = f;
        } else {
            x = (uVar2.getX() - uVar.getX()) + uVar3.getX();
            y = (uVar2.getY() - uVar.getY()) + uVar3.getY();
            f = f3;
            f2 = f3;
        }
        return k.a(3.5f, 3.5f, f3, 3.5f, f2, f, 3.5f, f3, uVar.getX(), uVar.getY(), uVar2.getX(), uVar2.getY(), x, y, uVar3.getX(), uVar3.getY());
    }

    private static int round(float f) {
        return (int) (0.5f + f);
    }

    private static b sampleGrid(b bVar, k kVar, int i) {
        return i.a().a(bVar, i, i, kVar);
    }

    private float sizeOfBlackWhiteBlackRun(int i, int i2, int i3, int i4) {
        int i5;
        Object obj = Math.abs(i4 - i2) > Math.abs(i3 - i) ? 1 : null;
        if (obj == null) {
            int i6 = i4;
            i4 = i3;
            i3 = i6;
            int i7 = i2;
            i2 = i;
            i = i7;
        }
        int abs = Math.abs(i4 - i2);
        int abs2 = Math.abs(i3 - i);
        int i8 = (-abs) >> 1;
        int i9 = i2 < i4 ? 1 : -1;
        int i10 = i < i3 ? 1 : -1;
        int i11 = 0;
        int i12 = i4 + i9;
        int i13 = i2;
        int i14 = i8;
        i8 = i;
        while (i13 != i12) {
            int i15;
            if ((i11 == 1) != this.image.a(obj != null ? i8 : i13, obj != null ? i13 : i8)) {
                i15 = i11;
            } else if (i11 == 2) {
                i10 = i13 - i2;
                i5 = i8 - i;
                return (float) Math.sqrt((double) ((i10 * i10) + (i5 * i5)));
            } else {
                i15 = i11 + 1;
            }
            i11 = i14 + abs2;
            if (i11 <= 0) {
                i5 = i8;
                i8 = i11;
            } else if (i8 == i3) {
                i10 = i15;
                break;
            } else {
                i5 = i8 + i10;
                i8 = i11 - abs;
            }
            i13 += i9;
            i11 = i15;
            i14 = i8;
            i8 = i5;
        }
        i10 = i11;
        if (i10 != 2) {
            return Float.NaN;
        }
        i10 = (i4 + i9) - i2;
        i5 = i3 - i;
        return (float) Math.sqrt((double) ((i10 * i10) + (i5 * i5)));
    }

    private float sizeOfBlackWhiteBlackRunBothWays(int i, int i2, int i3, int i4) {
        float f;
        int i5;
        int i6 = 0;
        float sizeOfBlackWhiteBlackRun = sizeOfBlackWhiteBlackRun(i, i2, i3, i4);
        int i7 = i - (i3 - i);
        if (i7 < 0) {
            f = ((float) i) / ((float) (i - i7));
            i5 = 0;
        } else if (i7 >= this.image.e()) {
            f = ((float) ((this.image.e() - 1) - i)) / ((float) (i7 - i));
            i5 = this.image.e() - 1;
        } else {
            i5 = i7;
            f = 1.0f;
        }
        i7 = (int) (((float) i2) - (f * ((float) (i4 - i2))));
        if (i7 < 0) {
            f = ((float) i2) / ((float) (i2 - i7));
        } else if (i7 >= this.image.f()) {
            f = ((float) ((this.image.f() - 1) - i2)) / ((float) (i7 - i2));
            i6 = this.image.f() - 1;
        } else {
            i6 = i7;
            f = 1.0f;
        }
        return (sizeOfBlackWhiteBlackRun(i, i2, (int) ((f * ((float) (i5 - i))) + ((float) i)), i6) + sizeOfBlackWhiteBlackRun) - 1.0f;
    }

    protected float calculateModuleSize(u uVar, u uVar2, u uVar3) {
        return (calculateModuleSizeOneWay(uVar, uVar2) + calculateModuleSizeOneWay(uVar, uVar3)) / 2.0f;
    }

    public g detect() {
        return detect(null);
    }

    public g detect(Map map) {
        this.resultPointCallback = map == null ? null : (v) map.get(e.NEED_RESULT_POINT_CALLBACK);
        return processFinderPatternInfo(new FinderPatternFinder(this.image, this.resultPointCallback).find(map));
    }

    protected AlignmentPattern findAlignmentInRegion(float f, int i, int i2, float f2) {
        int i3 = (int) (f2 * f);
        int max = Math.max(0, i - i3);
        int min = Math.min(this.image.e() - 1, i + i3);
        if (((float) (min - max)) < f * 3.0f) {
            throw n.a();
        }
        int max2 = Math.max(0, i2 - i3);
        int min2 = Math.min(this.image.f() - 1, i3 + i2);
        if (((float) (min2 - max2)) < f * 3.0f) {
            throw n.a();
        }
        return new AlignmentPatternFinder(this.image, max, max2, min - max, min2 - max2, f, this.resultPointCallback).find();
    }

    protected b getImage() {
        return this.image;
    }

    protected v getResultPointCallback() {
        return this.resultPointCallback;
    }

    protected g processFinderPatternInfo(FinderPatternInfo finderPatternInfo) {
        u topLeft = finderPatternInfo.getTopLeft();
        u topRight = finderPatternInfo.getTopRight();
        u bottomLeft = finderPatternInfo.getBottomLeft();
        float calculateModuleSize = calculateModuleSize(topLeft, topRight, bottomLeft);
        if (calculateModuleSize < 1.0f) {
            throw n.a();
        }
        u[] uVarArr;
        int computeDimension = computeDimension(topLeft, topRight, bottomLeft, calculateModuleSize);
        Version provisionalVersionForDimension = Version.getProvisionalVersionForDimension(computeDimension);
        int dimensionForVersion = provisionalVersionForDimension.getDimensionForVersion() - 7;
        u uVar = null;
        if (provisionalVersionForDimension.getAlignmentPatternCenters().length > 0) {
            float x = (topRight.getX() - topLeft.getX()) + bottomLeft.getX();
            float y = (topRight.getY() - topLeft.getY()) + bottomLeft.getY();
            float f = 1.0f - (3.0f / ((float) dimensionForVersion));
            int x2 = (int) (((x - topLeft.getX()) * f) + topLeft.getX());
            dimensionForVersion = (int) (topLeft.getY() + (f * (y - topLeft.getY())));
            int i = 4;
            while (i <= 16) {
                try {
                    uVar = findAlignmentInRegion(calculateModuleSize, x2, dimensionForVersion, (float) i);
                    break;
                } catch (n e) {
                    i <<= 1;
                }
            }
        }
        b sampleGrid = sampleGrid(this.image, createTransform(topLeft, topRight, bottomLeft, uVar, computeDimension), computeDimension);
        if (uVar == null) {
            uVarArr = new u[]{bottomLeft, topLeft, topRight};
        } else {
            uVarArr = new u[]{bottomLeft, topLeft, topRight, uVar};
        }
        return new g(sampleGrid, uVarArr);
    }
}
