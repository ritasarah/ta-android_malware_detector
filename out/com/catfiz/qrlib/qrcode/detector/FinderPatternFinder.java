package com.catfiz.qrlib.qrcode.detector;

import com.albus.util.AlbusModelObject;
import com.b.a.c.b;
import com.b.a.e;
import com.b.a.n;
import com.b.a.u;
import com.b.a.v;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;

public class FinderPatternFinder {
    private static final int CENTER_QUORUM = 2;
    private static final int INTEGER_MATH_SHIFT = 8;
    protected static final int MAX_MODULES = 57;
    protected static final int MIN_SKIP = 3;
    private final int[] crossCheckStateCount;
    private boolean hasSkipped;
    private final b image;
    private final List possibleCenters;
    private final v resultPointCallback;

    class CenterComparator implements Serializable, Comparator {
        private static final long serialVersionUID = 3071314294685511174L;
        private final float average;

        private CenterComparator(float f) {
            this.average = f;
        }

        public int compare(FinderPattern finderPattern, FinderPattern finderPattern2) {
            if (finderPattern2.getCount() != finderPattern.getCount()) {
                return finderPattern2.getCount() - finderPattern.getCount();
            }
            float abs = Math.abs(finderPattern2.getEstimatedModuleSize() - this.average);
            float abs2 = Math.abs(finderPattern.getEstimatedModuleSize() - this.average);
            return abs < abs2 ? 1 : abs == abs2 ? 0 : -1;
        }
    }

    class FurthestFromAverageComparator implements Serializable, Comparator {
        private static final long serialVersionUID = -952816274045567736L;
        private final float average;

        private FurthestFromAverageComparator(float f) {
            this.average = f;
        }

        public int compare(FinderPattern finderPattern, FinderPattern finderPattern2) {
            float abs = Math.abs(finderPattern2.getEstimatedModuleSize() - this.average);
            float abs2 = Math.abs(finderPattern.getEstimatedModuleSize() - this.average);
            return abs < abs2 ? -1 : abs == abs2 ? 0 : 1;
        }
    }

    public FinderPatternFinder(b bVar) {
        this(bVar, null);
    }

    public FinderPatternFinder(b bVar, v vVar) {
        this.image = bVar;
        this.possibleCenters = new ArrayList();
        this.crossCheckStateCount = new int[5];
        this.resultPointCallback = vVar;
    }

    private static float centerFromEnd(int[] iArr, int i) {
        return ((float) ((i - iArr[4]) - iArr[MIN_SKIP])) - (((float) iArr[CENTER_QUORUM]) / 2.0f);
    }

    private float crossCheckHorizontal(int i, int i2, int i3, int i4) {
        b bVar = this.image;
        int e = bVar.e();
        int[] crossCheckStateCount = getCrossCheckStateCount();
        int i5 = i;
        while (i5 >= 0 && bVar.a(i5, i2)) {
            crossCheckStateCount[CENTER_QUORUM] = crossCheckStateCount[CENTER_QUORUM] + 1;
            i5--;
        }
        if (i5 < 0) {
            return Float.NaN;
        }
        while (i5 >= 0 && !bVar.a(i5, i2) && crossCheckStateCount[1] <= i3) {
            crossCheckStateCount[1] = crossCheckStateCount[1] + 1;
            i5--;
        }
        if (i5 < 0 || crossCheckStateCount[1] > i3) {
            return Float.NaN;
        }
        while (i5 >= 0 && bVar.a(i5, i2) && crossCheckStateCount[0] <= i3) {
            crossCheckStateCount[0] = crossCheckStateCount[0] + 1;
            i5--;
        }
        if (crossCheckStateCount[0] > i3) {
            return Float.NaN;
        }
        i5 = i + 1;
        while (i5 < e && bVar.a(i5, i2)) {
            crossCheckStateCount[CENTER_QUORUM] = crossCheckStateCount[CENTER_QUORUM] + 1;
            i5++;
        }
        if (i5 == e) {
            return Float.NaN;
        }
        while (i5 < e && !bVar.a(i5, i2) && crossCheckStateCount[MIN_SKIP] < i3) {
            crossCheckStateCount[MIN_SKIP] = crossCheckStateCount[MIN_SKIP] + 1;
            i5++;
        }
        if (i5 == e || crossCheckStateCount[MIN_SKIP] >= i3) {
            return Float.NaN;
        }
        while (i5 < e && bVar.a(i5, i2) && crossCheckStateCount[4] < i3) {
            crossCheckStateCount[4] = crossCheckStateCount[4] + 1;
            i5++;
        }
        return (crossCheckStateCount[4] >= i3 || Math.abs(((((crossCheckStateCount[0] + crossCheckStateCount[1]) + crossCheckStateCount[CENTER_QUORUM]) + crossCheckStateCount[MIN_SKIP]) + crossCheckStateCount[4]) - i4) * 5 >= i4 || !foundPatternCross(crossCheckStateCount)) ? Float.NaN : centerFromEnd(crossCheckStateCount, i5);
    }

    private float crossCheckVertical(int i, int i2, int i3, int i4) {
        b bVar = this.image;
        int f = bVar.f();
        int[] crossCheckStateCount = getCrossCheckStateCount();
        int i5 = i;
        while (i5 >= 0 && bVar.a(i2, i5)) {
            crossCheckStateCount[CENTER_QUORUM] = crossCheckStateCount[CENTER_QUORUM] + 1;
            i5--;
        }
        if (i5 < 0) {
            return Float.NaN;
        }
        while (i5 >= 0 && !bVar.a(i2, i5) && crossCheckStateCount[1] <= i3) {
            crossCheckStateCount[1] = crossCheckStateCount[1] + 1;
            i5--;
        }
        if (i5 < 0 || crossCheckStateCount[1] > i3) {
            return Float.NaN;
        }
        while (i5 >= 0 && bVar.a(i2, i5) && crossCheckStateCount[0] <= i3) {
            crossCheckStateCount[0] = crossCheckStateCount[0] + 1;
            i5--;
        }
        if (crossCheckStateCount[0] > i3) {
            return Float.NaN;
        }
        i5 = i + 1;
        while (i5 < f && bVar.a(i2, i5)) {
            crossCheckStateCount[CENTER_QUORUM] = crossCheckStateCount[CENTER_QUORUM] + 1;
            i5++;
        }
        if (i5 == f) {
            return Float.NaN;
        }
        while (i5 < f && !bVar.a(i2, i5) && crossCheckStateCount[MIN_SKIP] < i3) {
            crossCheckStateCount[MIN_SKIP] = crossCheckStateCount[MIN_SKIP] + 1;
            i5++;
        }
        if (i5 == f || crossCheckStateCount[MIN_SKIP] >= i3) {
            return Float.NaN;
        }
        while (i5 < f && bVar.a(i2, i5) && crossCheckStateCount[4] < i3) {
            crossCheckStateCount[4] = crossCheckStateCount[4] + 1;
            i5++;
        }
        return (crossCheckStateCount[4] >= i3 || Math.abs(((((crossCheckStateCount[0] + crossCheckStateCount[1]) + crossCheckStateCount[CENTER_QUORUM]) + crossCheckStateCount[MIN_SKIP]) + crossCheckStateCount[4]) - i4) * 5 >= i4 * CENTER_QUORUM || !foundPatternCross(crossCheckStateCount)) ? Float.NaN : centerFromEnd(crossCheckStateCount, i5);
    }

    private int findRowSkip() {
        if (this.possibleCenters.size() <= 1) {
            return 0;
        }
        FinderPattern finderPattern = null;
        for (FinderPattern finderPattern2 : this.possibleCenters) {
            FinderPattern finderPattern22;
            if (finderPattern22.getCount() < CENTER_QUORUM) {
                finderPattern22 = finderPattern;
            } else if (finderPattern != null) {
                this.hasSkipped = true;
                return ((int) (Math.abs(finderPattern.getX() - finderPattern22.getX()) - Math.abs(finderPattern.getY() - finderPattern22.getY()))) / CENTER_QUORUM;
            }
            finderPattern = finderPattern22;
        }
        return 0;
    }

    protected static boolean foundPatternCross(int[] iArr) {
        int i;
        boolean z = true;
        int i2 = 0;
        for (i = 0; i < 5; i++) {
            int i3 = iArr[i];
            if (i3 == 0) {
                return false;
            }
            i2 += i3;
        }
        if (i2 < 7) {
            return false;
        }
        i = (i2 << INTEGER_MATH_SHIFT) / 7;
        i2 = i / CENTER_QUORUM;
        if (Math.abs(i - (iArr[0] << INTEGER_MATH_SHIFT)) >= i2 || Math.abs(i - (iArr[1] << INTEGER_MATH_SHIFT)) >= i2 || Math.abs((i * MIN_SKIP) - (iArr[CENTER_QUORUM] << INTEGER_MATH_SHIFT)) >= i2 * MIN_SKIP || Math.abs(i - (iArr[MIN_SKIP] << INTEGER_MATH_SHIFT)) >= i2 || Math.abs(i - (iArr[4] << INTEGER_MATH_SHIFT)) >= i2) {
            z = false;
        }
        return z;
    }

    private int[] getCrossCheckStateCount() {
        this.crossCheckStateCount[0] = 0;
        this.crossCheckStateCount[1] = 0;
        this.crossCheckStateCount[CENTER_QUORUM] = 0;
        this.crossCheckStateCount[MIN_SKIP] = 0;
        this.crossCheckStateCount[4] = 0;
        return this.crossCheckStateCount;
    }

    private boolean haveMultiplyConfirmedCenters() {
        float f = 0.0f;
        int size = this.possibleCenters.size();
        float f2 = 0.0f;
        int i = 0;
        for (FinderPattern finderPattern : this.possibleCenters) {
            float estimatedModuleSize;
            int i2;
            if (finderPattern.getCount() >= CENTER_QUORUM) {
                estimatedModuleSize = finderPattern.getEstimatedModuleSize() + f2;
                i2 = i + 1;
            } else {
                estimatedModuleSize = f2;
                i2 = i;
            }
            i = i2;
            f2 = estimatedModuleSize;
        }
        if (i < MIN_SKIP) {
            return false;
        }
        float f3 = f2 / ((float) size);
        for (FinderPattern finderPattern2 : this.possibleCenters) {
            f += Math.abs(finderPattern2.getEstimatedModuleSize() - f3);
        }
        return f <= 0.05f * f2;
    }

    private FinderPattern[] selectBestPatterns() {
        float f = 0.0f;
        int size = this.possibleCenters.size();
        if (size < MIN_SKIP) {
            throw n.a();
        }
        if (size > MIN_SKIP) {
            float estimatedModuleSize;
            float f2 = 0.0f;
            float f3 = 0.0f;
            for (FinderPattern estimatedModuleSize2 : this.possibleCenters) {
                estimatedModuleSize = estimatedModuleSize2.getEstimatedModuleSize();
                f3 += estimatedModuleSize;
                f2 = (estimatedModuleSize * estimatedModuleSize) + f2;
            }
            f3 /= (float) size;
            estimatedModuleSize = (float) Math.sqrt((double) ((f2 / ((float) size)) - (f3 * f3)));
            Collections.sort(this.possibleCenters, new FurthestFromAverageComparator(f3));
            float max = Math.max(AlbusModelObject.PROBABLY_SOFT_KEYBOARD_HEIGHT_RATIO * f3, estimatedModuleSize);
            int i = 0;
            while (i < this.possibleCenters.size() && this.possibleCenters.size() > MIN_SKIP) {
                if (Math.abs(((FinderPattern) this.possibleCenters.get(i)).getEstimatedModuleSize() - f3) > max) {
                    this.possibleCenters.remove(i);
                    i--;
                }
                i++;
            }
        }
        if (this.possibleCenters.size() > MIN_SKIP) {
            for (FinderPattern estimatedModuleSize22 : this.possibleCenters) {
                f += estimatedModuleSize22.getEstimatedModuleSize();
            }
            Collections.sort(this.possibleCenters, new CenterComparator(f / ((float) this.possibleCenters.size())));
            this.possibleCenters.subList(MIN_SKIP, this.possibleCenters.size()).clear();
        }
        FinderPattern[] finderPatternArr = new FinderPattern[MIN_SKIP];
        finderPatternArr[0] = (FinderPattern) this.possibleCenters.get(0);
        finderPatternArr[1] = (FinderPattern) this.possibleCenters.get(1);
        finderPatternArr[CENTER_QUORUM] = (FinderPattern) this.possibleCenters.get(CENTER_QUORUM);
        return finderPatternArr;
    }

    FinderPatternInfo find(Map map) {
        int i = (map == null || !map.containsKey(e.TRY_HARDER)) ? 0 : 1;
        int f = this.image.f();
        int e = this.image.e();
        int i2 = (f * MIN_SKIP) / 228;
        i = (i2 < MIN_SKIP || i != 0) ? MIN_SKIP : i2;
        int[] iArr = new int[5];
        int i3 = i - 1;
        boolean z = false;
        int i4 = i;
        while (i3 < f && !r6) {
            iArr[0] = 0;
            iArr[1] = 0;
            iArr[CENTER_QUORUM] = 0;
            iArr[MIN_SKIP] = 0;
            iArr[4] = 0;
            i2 = 0;
            i = 0;
            while (i2 < e) {
                if (this.image.a(i2, i3)) {
                    if ((i & 1) == 1) {
                        i++;
                    }
                    iArr[i] = iArr[i] + 1;
                } else if ((i & 1) != 0) {
                    iArr[i] = iArr[i] + 1;
                } else if (i != 4) {
                    i++;
                    iArr[i] = iArr[i] + 1;
                } else if (!foundPatternCross(iArr)) {
                    iArr[0] = iArr[CENTER_QUORUM];
                    iArr[1] = iArr[MIN_SKIP];
                    iArr[CENTER_QUORUM] = iArr[4];
                    iArr[MIN_SKIP] = 1;
                    iArr[4] = 0;
                    i = MIN_SKIP;
                } else if (handlePossibleCenter(iArr, i3, i2)) {
                    boolean haveMultiplyConfirmedCenters;
                    if (this.hasSkipped) {
                        haveMultiplyConfirmedCenters = haveMultiplyConfirmedCenters();
                    } else {
                        i = findRowSkip();
                        if (i > iArr[CENTER_QUORUM]) {
                            i2 = i3 + ((i - iArr[CENTER_QUORUM]) - CENTER_QUORUM);
                            i = e - 1;
                        } else {
                            i = i2;
                            i2 = i3;
                        }
                        i3 = i2;
                        i2 = i;
                        haveMultiplyConfirmedCenters = z;
                    }
                    iArr[0] = 0;
                    iArr[1] = 0;
                    iArr[CENTER_QUORUM] = 0;
                    iArr[MIN_SKIP] = 0;
                    iArr[4] = 0;
                    z = haveMultiplyConfirmedCenters;
                    i4 = CENTER_QUORUM;
                    i = 0;
                } else {
                    iArr[0] = iArr[CENTER_QUORUM];
                    iArr[1] = iArr[MIN_SKIP];
                    iArr[CENTER_QUORUM] = iArr[4];
                    iArr[MIN_SKIP] = 1;
                    iArr[4] = 0;
                    i = MIN_SKIP;
                }
                i2++;
            }
            if (foundPatternCross(iArr) && handlePossibleCenter(iArr, i3, e)) {
                i4 = iArr[0];
                if (this.hasSkipped) {
                    z = haveMultiplyConfirmedCenters();
                }
            }
            i3 += i4;
        }
        u[] selectBestPatterns = selectBestPatterns();
        u.orderBestPatterns(selectBestPatterns);
        return new FinderPatternInfo(selectBestPatterns);
    }

    protected b getImage() {
        return this.image;
    }

    protected List getPossibleCenters() {
        return this.possibleCenters;
    }

    protected boolean handlePossibleCenter(int[] iArr, int i, int i2) {
        boolean z = false;
        int i3 = (((iArr[0] + iArr[1]) + iArr[CENTER_QUORUM]) + iArr[MIN_SKIP]) + iArr[4];
        float centerFromEnd = centerFromEnd(iArr, i2);
        float crossCheckVertical = crossCheckVertical(i, (int) centerFromEnd, iArr[CENTER_QUORUM], i3);
        if (Float.isNaN(crossCheckVertical)) {
            return false;
        }
        float crossCheckHorizontal = crossCheckHorizontal((int) centerFromEnd, (int) crossCheckVertical, iArr[CENTER_QUORUM], i3);
        if (Float.isNaN(crossCheckHorizontal)) {
            return false;
        }
        float f = ((float) i3) / 7.0f;
        for (int i4 = 0; i4 < this.possibleCenters.size(); i4++) {
            FinderPattern finderPattern = (FinderPattern) this.possibleCenters.get(i4);
            if (finderPattern.aboutEquals(f, crossCheckVertical, crossCheckHorizontal)) {
                this.possibleCenters.set(i4, finderPattern.combineEstimate(crossCheckVertical, crossCheckHorizontal, f));
                z = true;
                break;
            }
        }
        if (!z) {
            u finderPattern2 = new FinderPattern(crossCheckHorizontal, crossCheckVertical, f);
            this.possibleCenters.add(finderPattern2);
            if (this.resultPointCallback != null) {
                this.resultPointCallback.foundPossibleResultPoint(finderPattern2);
            }
        }
        return true;
    }
}
