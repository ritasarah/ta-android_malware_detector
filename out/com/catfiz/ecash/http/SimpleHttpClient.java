package com.catfiz.ecash.http;

import android.util.Log;
import java.io.IOException;
import java.io.InputStream;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.protocol.HTTP;

public class SimpleHttpClient {
    private static final int TIMEOUT_CONNECTION = 20000;
    private static final int TIMEOUT_SOCKET = 15000;

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private java.lang.String convertStreamToString(java.io.InputStream r5) {
        /*
        r4 = this;
        r0 = new java.io.BufferedReader;
        r1 = new java.io.InputStreamReader;
        r1.<init>(r5);
        r0.<init>(r1);
        r1 = new java.lang.StringBuilder;
        r1.<init>();
    L_0x000f:
        r2 = r0.readLine();	 Catch:{ IOException -> 0x002c }
        if (r2 == 0) goto L_0x0038;
    L_0x0015:
        r3 = new java.lang.StringBuilder;	 Catch:{ IOException -> 0x002c }
        r3.<init>();	 Catch:{ IOException -> 0x002c }
        r2 = r3.append(r2);	 Catch:{ IOException -> 0x002c }
        r3 = "\n";
        r2 = r2.append(r3);	 Catch:{ IOException -> 0x002c }
        r2 = r2.toString();	 Catch:{ IOException -> 0x002c }
        r1.append(r2);	 Catch:{ IOException -> 0x002c }
        goto L_0x000f;
    L_0x002c:
        r0 = move-exception;
        r0.printStackTrace();	 Catch:{ all -> 0x0046 }
        r5.close();	 Catch:{ IOException -> 0x0041 }
    L_0x0033:
        r0 = r1.toString();
        return r0;
    L_0x0038:
        r5.close();	 Catch:{ IOException -> 0x003c }
        goto L_0x0033;
    L_0x003c:
        r0 = move-exception;
        r0.printStackTrace();
        goto L_0x0033;
    L_0x0041:
        r0 = move-exception;
        r0.printStackTrace();
        goto L_0x0033;
    L_0x0046:
        r0 = move-exception;
        r5.close();	 Catch:{ IOException -> 0x004b }
    L_0x004a:
        throw r0;
    L_0x004b:
        r1 = move-exception;
        r1.printStackTrace();
        goto L_0x004a;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.catfiz.ecash.http.SimpleHttpClient.convertStreamToString(java.io.InputStream):java.lang.String");
    }

    public HttpResult requestGet(String str) {
        HttpParams basicHttpParams = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(basicHttpParams, TIMEOUT_CONNECTION);
        HttpConnectionParams.setSoTimeout(basicHttpParams, TIMEOUT_SOCKET);
        HttpResponse execute;
        try {
            execute = new DefaultHttpClient(basicHttpParams).execute(new HttpGet(str));
            try {
                HttpEntity entity = execute.getEntity();
                if (entity == null) {
                    return new HttpResult(execute.getStatusLine().getStatusCode(), execute.getAllHeaders(), null);
                }
                InputStream content = entity.getContent();
                String convertStreamToString = convertStreamToString(content);
                content.close();
                return new HttpResult(execute.getStatusLine().getStatusCode(), execute.getAllHeaders(), convertStreamToString);
            } catch (Exception e) {
                return new HttpResult(execute.getStatusLine().getStatusCode(), execute.getAllHeaders(), null);
            }
        } catch (Exception e2) {
            execute = null;
            return new HttpResult(execute.getStatusLine().getStatusCode(), execute.getAllHeaders(), null);
        }
    }

    public HttpResult requestPost(String str, String str2) {
        HttpParams basicHttpParams = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(basicHttpParams, TIMEOUT_CONNECTION);
        HttpConnectionParams.setSoTimeout(basicHttpParams, TIMEOUT_SOCKET);
        DefaultHttpClient defaultHttpClient = new DefaultHttpClient(basicHttpParams);
        HttpUriRequest httpPost = new HttpPost(str);
        try {
            httpPost.setEntity(new StringEntity(str2, HTTP.UTF_8));
            httpPost.setHeader(HTTP.CONTENT_TYPE, "application/json; charset=utf-8");
            HttpResponse execute = defaultHttpClient.execute(httpPost);
            HttpEntity entity = execute.getEntity();
            if (entity == null) {
                return new HttpResult(execute.getStatusLine().getStatusCode(), execute.getAllHeaders(), null);
            }
            InputStream content = entity.getContent();
            String convertStreamToString = convertStreamToString(content);
            content.close();
            return new HttpResult(execute.getStatusLine().getStatusCode(), execute.getAllHeaders(), convertStreamToString);
        } catch (Exception e) {
            return null;
        }
    }

    public HttpResult requestPost(String str, HttpEntity httpEntity) {
        HttpParams basicHttpParams = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(basicHttpParams, TIMEOUT_CONNECTION);
        HttpConnectionParams.setSoTimeout(basicHttpParams, TIMEOUT_SOCKET);
        DefaultHttpClient defaultHttpClient = new DefaultHttpClient(basicHttpParams);
        HttpUriRequest httpPost = new HttpPost(str);
        Log.d(SimpleHttpClient.class.getName(), "HTTP POST REQ URL = " + str);
        try {
            httpPost.setEntity(httpEntity);
            HttpResponse execute = defaultHttpClient.execute(httpPost);
            HttpEntity entity = execute.getEntity();
            if (entity == null) {
                return new HttpResult(execute.getStatusLine().getStatusCode(), execute.getAllHeaders(), null);
            }
            InputStream content = entity.getContent();
            String convertStreamToString = convertStreamToString(content);
            content.close();
            return new HttpResult(execute.getStatusLine().getStatusCode(), execute.getAllHeaders(), convertStreamToString);
        } catch (IOException e) {
            Log.e(SimpleHttpClient.class.getName(), "ERROR CONNECTION = " + e.getMessage());
            return null;
        }
    }
}
