package com.catfiz.ecash;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.AsyncTask;
import android.os.Handler;
import android.provider.Settings.Secure;
import com.catfiz.ecash.api.BalanceInquiry;
import com.catfiz.ecash.api.Login;
import com.catfiz.ecash.api.OTPGeneral;
import com.catfiz.ecash.api.Operation;
import com.catfiz.ecash.api.ResponseStatus.StatusCode;
import com.catfiz.ecash.api.Result;
import com.catfiz.ecash.api.SimulateSMS;
import com.catfiz.ecash.api.TransferInquiry;
import com.catfiz.ecash.api.TransferPayment;
import com.catfiz.ecash.api.Validate;
import com.catfiz.ecash.model.ECashAccount;
import com.catfiz.ecash.model.ECashCredentials;
import com.catfiz.ecash.model.ECashTransfer;
import com.catfiz.ecash.security.ECashSecure;
import com.catfiz.ecash.sms.SMSBuilder;
import com.catfiz.ecash.sms.SMSSender;
import com.catfiz.util.Utils;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;

public class ECash {
    private static final String PREFERENCE_KEY_MSISDN = "q79q28xK83";
    private static final String PREFERENCE_KEY_TOKEN = "1QxkOmTLWj";
    private static final String PREFERENCE_NAME = "mzw26k1s41";
    private static ECashAccount mAccount = null;
    private static Context mContext = null;
    private static String mUid = null;
    private Operation mOperation = null;
    private String mPlainOtp = null;
    private String mPlainPin = null;
    private ECashTransfer mTransfer = null;

    final class AnonymousClass1 implements ECashCallback {
        final /* synthetic */ ECashCallback val$callback;

        AnonymousClass1(ECashCallback eCashCallback) {
            this.val$callback = eCashCallback;
        }

        public void onFailed() {
        }

        public void onResult(Result result) {
            if (result.getStatusCode() == StatusCode.RESPONSE_PROCESSED) {
                new Handler().postDelayed(new Runnable() {
                    public void run() {
                        ECash.newValidateRequest().executeAsync(new ECashCallback() {
                            public void onFailed() {
                                AnonymousClass1.this.val$callback.onFailed();
                            }

                            public void onResult(Result result) {
                                if (result.getStatusCode() == StatusCode.RESPONSE_PROCESSED) {
                                    AnonymousClass1.this.val$callback.onVerified();
                                } else {
                                    AnonymousClass1.this.val$callback.onFailed();
                                }
                            }

                            public void onVerified() {
                            }
                        });
                    }
                }, 20000);
            }
        }

        public void onVerified() {
        }
    }

    /* synthetic */ class AnonymousClass3 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$ecash$api$Operation = new int[Operation.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$ecash$api$Operation[Operation.LOGIN.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$ecash$api$Operation[Operation.SIMULATE_SMS.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$ecash$api$Operation[Operation.VALIDATE.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$ecash$api$Operation[Operation.BALANCE_INQUIRY.ordinal()] = 4;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$ecash$api$Operation[Operation.SMS.ordinal()] = 5;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$ecash$api$Operation[Operation.TRANSFER_MEMBER_INQUIRY.ordinal()] = 6;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$ecash$api$Operation[Operation.TRANSFER_MEMBER_PAYMENT.ordinal()] = 7;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$com$catfiz$ecash$api$Operation[Operation.OTP_GENERAL.ordinal()] = 8;
            } catch (NoSuchFieldError e8) {
            }
        }
    }

    private ECash(Operation operation) {
        this.mOperation = operation;
    }

    private ECash(Operation operation, ECashTransfer eCashTransfer) {
        this.mOperation = operation;
        this.mTransfer = eCashTransfer;
    }

    public static void clearAccount() {
        SharedPreferences sharedPreferences = mContext.getSharedPreferences(PREFERENCE_NAME, 0);
        sharedPreferences.edit().remove(PREFERENCE_KEY_TOKEN).commit();
        sharedPreferences.edit().remove(PREFERENCE_KEY_MSISDN).commit();
        mAccount = null;
    }

    public static void clearAccountCredentials() {
        mContext.getSharedPreferences(PREFERENCE_NAME, 0).edit().remove(PREFERENCE_KEY_TOKEN).commit();
        mAccount.setCredentials(null);
    }

    public static ECashAccount getAccount() {
        return mAccount;
    }

    public static ECashCredentials getAccountCredentials() {
        return mAccount == null ? null : mAccount.getCredentials();
    }

    public static String getUid() {
        return mUid;
    }

    public static void initializeApi(Context context) {
        mContext = context;
        if (mUid == null) {
            mUid = Secure.getString(mContext.getContentResolver(), "android_id");
        }
        if (mAccount == null) {
            SharedPreferences sharedPreferences = mContext.getSharedPreferences(PREFERENCE_NAME, 0);
            if (sharedPreferences.contains(PREFERENCE_KEY_MSISDN)) {
                ECashAccount eCashAccount = new ECashAccount();
                eCashAccount.setMsisdn(sharedPreferences.getString(PREFERENCE_KEY_MSISDN, ""));
                if (sharedPreferences.contains(PREFERENCE_KEY_TOKEN)) {
                    ECashCredentials eCashCredentials = new ECashCredentials();
                    eCashCredentials.setToken(sharedPreferences.getString(PREFERENCE_KEY_TOKEN, ""));
                    eCashAccount.setCredentials(eCashCredentials);
                }
                mAccount = eCashAccount;
            }
        }
    }

    public static ECash newBalanceInquiryRequest() {
        return new ECash(Operation.BALANCE_INQUIRY);
    }

    public static ECash newLoginRequest(String str) {
        return new ECash(Operation.LOGIN).setPlainPin(str);
    }

    public static ECash newOTPGeneralRequest() {
        return new ECash(Operation.OTP_GENERAL);
    }

    public static ECash newSMSRequest() {
        return new ECash(Operation.SMS);
    }

    public static ECash newSimulateSMSRequest() {
        return new ECash(Operation.SIMULATE_SMS);
    }

    public static ECash newTransferMemberInquiryRequest(ECashTransfer eCashTransfer) {
        return new ECash(Operation.TRANSFER_MEMBER_INQUIRY, eCashTransfer);
    }

    public static ECash newTransferMemberPaymentRequest(ECashTransfer eCashTransfer, String str, String str2) {
        return new ECash(Operation.TRANSFER_MEMBER_PAYMENT, eCashTransfer).setPlainPin(str).setPlainOtp(str2);
    }

    public static ECash newValidateRequest() {
        return new ECash(Operation.VALIDATE);
    }

    public static void registerDevice(ECashCallback eCashCallback) {
        newSMSRequest().executeAsync(new AnonymousClass1(eCashCallback));
    }

    private String secureOtp(String str) {
        try {
            return ECashSecure.encrypt(str);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private String securePin(String str) {
        try {
            return ECashSecure.encrypt(str);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static void storeAccount(ECashAccount eCashAccount) {
        if (eCashAccount != null) {
            SharedPreferences sharedPreferences = mContext.getSharedPreferences(PREFERENCE_NAME, 0);
            if (eCashAccount.getMsisdn() != null) {
                sharedPreferences.edit().putString(PREFERENCE_KEY_MSISDN, eCashAccount.getMsisdn()).commit();
            }
            if (!(eCashAccount.getCredentials() == null || eCashAccount.getCredentials().getToken() == null)) {
                sharedPreferences.edit().putString(PREFERENCE_KEY_TOKEN, eCashAccount.getCredentials().getToken()).commit();
            }
            mAccount = eCashAccount;
        }
    }

    public void executeAsync(final ECashCallback eCashCallback) {
        new AsyncTask() {
            protected Result doInBackground(Void... voidArr) {
                return ECash.this.executeSync();
            }

            protected void onPostExecute(Result result) {
                super.onPostExecute(result);
                if (eCashCallback == null) {
                    return;
                }
                if (result != null) {
                    eCashCallback.onResult(result);
                } else {
                    eCashCallback.onFailed();
                }
            }
        }.execute(new Void[0]);
    }

    public Result executeSync() {
        switch (AnonymousClass3.$SwitchMap$com$catfiz$ecash$api$Operation[this.mOperation.ordinal()]) {
            case e.b /*1*/:
                Login login = new Login(securePin(this.mPlainPin));
                login.run();
                return login.getResult();
            case e.c /*2*/:
                SimulateSMS simulateSMS = new SimulateSMS();
                simulateSMS.run();
                return simulateSMS.getResult();
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                Validate validate = new Validate();
                validate.run();
                return validate.getResult();
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                BalanceInquiry balanceInquiry = new BalanceInquiry();
                balanceInquiry.run();
                return balanceInquiry.getResult();
            case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                SMSSender sMSSender = new SMSSender(new SMSBuilder(this.mOperation, getUid()).build());
                sMSSender.run();
                return sMSSender.getResult();
            case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                TransferInquiry transferInquiry = new TransferInquiry(this.mTransfer);
                transferInquiry.run();
                return transferInquiry.getResult();
            case SimpleLog.LOG_LEVEL_OFF /*7*/:
                TransferPayment transferPayment = new TransferPayment(this.mTransfer, securePin(this.mPlainPin), secureOtp(this.mPlainOtp));
                transferPayment.run();
                return transferPayment.getResult();
            case Utils.FILE_TYPE_INSTALLER /*8*/:
                OTPGeneral oTPGeneral = new OTPGeneral();
                oTPGeneral.run();
                return oTPGeneral.getResult();
            default:
                return null;
        }
    }

    public ECash setECashTransfer(ECashTransfer eCashTransfer) {
        this.mTransfer = eCashTransfer;
        return this;
    }

    public ECash setOperation(Operation operation) {
        this.mOperation = operation;
        return this;
    }

    public ECash setPlainOtp(String str) {
        this.mPlainOtp = str;
        return this;
    }

    public ECash setPlainPin(String str) {
        this.mPlainPin = str;
        return this;
    }

    public void setSecureOtp(String str) {
        mAccount.getCredentials().setOtp(str);
    }

    public void setSecurePin(String str) {
        mAccount.getCredentials().setPin(str);
    }
}
