package com.catfiz.sticker;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.TransitionDrawable;
import android.widget.ImageView;
import com.catfiz.R;
import com.catfiz.service.ICatfishUIBinder;
import com.catfiz.sticker.StickerService.StickerStatus;
import com.catfiz.util.AnimationDrawable;
import com.catfiz.util.ImageCache;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.lang.ref.WeakReference;
import org.apache.http.conn.routing.HttpRouteDirector;

public class StikerImageLoader {
    private static final int FADE_IN_TIME = 500;
    private static final String TAG = "StikerImageLoader";
    protected Context mContext;
    private Bitmap mErrorLoadingBitmap;
    private boolean mExitTasksEarly = false;
    private Bitmap mExtractLoadingBitmap;
    private int mFadeInTime = FADE_IN_TIME;
    private ImageCache mImageCache = null;
    private StickerMetaCache mMetaCache = null;
    protected Resources mResources;
    private ICatfishUIBinder mService = null;
    private Bitmap mWaitLoadingBitmap;

    /* synthetic */ class AnonymousClass1 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$sticker$StickerService$StickerStatus = new int[StickerStatus.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$sticker$StickerService$StickerStatus[StickerStatus.READY.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerService$StickerStatus[StickerStatus.DOWNLOADING.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerService$StickerStatus[StickerStatus.EXTRACTING.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerService$StickerStatus[StickerStatus.ERROR.ordinal()] = 4;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerService$StickerStatus[StickerStatus.NOT_EXTRACTED.ordinal()] = 5;
            } catch (NoSuchFieldError e5) {
            }
        }
    }

    class AsyncDrawable extends BitmapDrawable {
        private final WeakReference stickerClientInterfaceReference;

        public AsyncDrawable(Resources resources, Bitmap bitmap, StikerTask stikerTask) {
            super(resources, bitmap);
            this.stickerClientInterfaceReference = new WeakReference(stikerTask);
        }

        public StikerTask getStickerClientInterface() {
            return (StikerTask) this.stickerClientInterfaceReference.get();
        }
    }

    public class StikerTask implements IStickerClientInterface {
        private final WeakReference imageViewReference;
        private boolean mCancle = false;
        private boolean mPlay = true;
        public final String mStikerCode;

        public StikerTask(ImageView imageView, String str, boolean z) {
            this.imageViewReference = new WeakReference(imageView);
            this.mStikerCode = str;
            this.mPlay = z;
        }

        private ImageView getAttachedImageView() {
            ImageView imageView = (ImageView) this.imageViewReference.get();
            return this == StikerImageLoader.getStikerWorkerTask(imageView) ? imageView : null;
        }

        public void cancel(boolean z) {
            this.mCancle = z;
        }

        public void onStickerError(int i, String str, StickerMessageObject stickerMessageObject) {
            Log.d(StikerImageLoader.TAG, " Sticker error with message:" + str);
            if (i == 100 && StikerImageLoader.this.mImageCache != null) {
                StikerImageLoader.this.mImageCache.clearCaches();
            }
            ImageView attachedImageView = getAttachedImageView();
            if (attachedImageView != null) {
                StikerImageLoader.this.setImageBitmap(attachedImageView, null, stickerMessageObject);
            }
        }

        public void onStickerIconReady(Bitmap bitmap, StickerMessageObject stickerMessageObject) {
            Log.d(StikerImageLoader.TAG, "icon ready");
            String str = this.mStikerCode.split(":")[0];
            if (!(stickerMessageObject == null || StikerImageLoader.this.mMetaCache == null)) {
                StikerImageLoader.this.mMetaCache.putMetadata(str, stickerMessageObject);
            }
            if (!(bitmap == null || StikerImageLoader.this.mImageCache == null)) {
                Bitmap bitmapFromMemCache = StikerImageLoader.this.mImageCache.getBitmapFromMemCache(str);
                if (bitmapFromMemCache == null) {
                    Log.d(StikerImageLoader.TAG, "Put Bitmap in Cache: ID=" + str);
                    StikerImageLoader.this.mImageCache.addBitmapToCache(str, bitmap);
                } else {
                    Log.d(StikerImageLoader.TAG, "Bitmap already in cache: ID=" + str);
                    if (bitmap != bitmapFromMemCache) {
                        bitmap.recycle();
                        bitmap = bitmapFromMemCache;
                    }
                }
            }
            ImageView attachedImageView = getAttachedImageView();
            if (attachedImageView != null && bitmap != null && !this.mCancle) {
                StikerImageLoader.this.setImageBitmap(attachedImageView, bitmap, stickerMessageObject);
            }
        }

        public void onStickerReady(Bitmap bitmap, StickerMessageObject stickerMessageObject) {
        }

        public void onStickerReady(Bitmap[] bitmapArr, AnimationDrawable animationDrawable, StickerMessageObject stickerMessageObject) {
        }

        public void onStickerWaitingForDownload(int i, StickerMessageObject stickerMessageObject) {
            Log.d(StikerImageLoader.TAG, " Sticker waiting for download ");
            ImageView attachedImageView = getAttachedImageView();
            if (attachedImageView != null) {
                StikerImageLoader.this.setImageBitmap(attachedImageView, null, stickerMessageObject);
            }
        }
    }

    public StikerImageLoader(Context context) {
        this.mContext = context;
        this.mResources = context.getResources();
        setLoadingImage(R.drawable.waiting, R.drawable.extract_download, R.drawable.error_sticker);
    }

    public static boolean cancelPotentialWork(String str, ImageView imageView) {
        if (imageView.getVisibility() != 0) {
            Log.d(TAG, "not visible");
            return false;
        }
        StikerTask stikerWorkerTask = getStikerWorkerTask(imageView);
        if (stikerWorkerTask != null) {
            Log.d(TAG, "stikerWorkerTask != null");
            String str2 = stikerWorkerTask.mStikerCode;
            Log.d(TAG, "bitmapData:" + str2 + " data:" + str);
            if (str2 == null || !str2.equals(str)) {
                stikerWorkerTask.cancel(true);
                Log.d(TAG, "cancelPotentialWork - cancelled work for " + str);
            } else {
                Log.d(TAG, "cancelPotentialWork - same work already in progress");
                return false;
            }
        }
        Log.d(TAG, "stikerWorkerTask is null");
        return true;
    }

    private static StikerTask getStikerWorkerTask(ImageView imageView) {
        if (imageView != null) {
            Drawable drawable = imageView.getDrawable();
            if (drawable instanceof AsyncDrawable) {
                return ((AsyncDrawable) drawable).getStickerClientInterface();
            }
            drawable = imageView.getBackground();
            if (drawable instanceof AnimationDrawable) {
                return (StikerTask) ((AnimationDrawable) drawable).getStickerClientInterface();
            }
        }
        return null;
    }

    private void setImageBitmap(ImageView imageView, Bitmap bitmap, StickerMessageObject stickerMessageObject) {
        int i = 0;
        if (imageView != null) {
            if (stickerMessageObject == null) {
                attachStateIconToBackgroundView(this.mWaitLoadingBitmap, imageView);
            } else if (bitmap == null) {
                switch (AnonymousClass1.$SwitchMap$com$catfiz$sticker$StickerService$StickerStatus[stickerMessageObject.stickerStatus.ordinal()]) {
                    case e.b /*1*/:
                        Log.e(TAG, "Sticker Status READY, but bitmap null, Unhandled");
                        attachStateIconToBackgroundView(this.mWaitLoadingBitmap, imageView);
                        return;
                    case e.c /*2*/:
                        Log.e(TAG, "Sticker Status DOWNLOADING show loading sticker");
                        attachStateIconToBackgroundView(this.mExtractLoadingBitmap, imageView);
                        return;
                    case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                        Log.e(TAG, "Sticker Status EXTRACTING show loading sticker");
                        attachStateIconToBackgroundView(this.mExtractLoadingBitmap, imageView);
                        return;
                    case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                        Log.e(TAG, "Sticker Status ERROR show loading sticker");
                        attachStateIconToBackgroundView(this.mErrorLoadingBitmap, imageView);
                        return;
                    case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                        Log.e(TAG, "Sticker Status NOT_EXTRACTED show loading sticker");
                        attachStateIconToBackgroundView(this.mWaitLoadingBitmap, imageView);
                        return;
                    default:
                        return;
                }
            } else {
                Drawable transitionDrawable = new TransitionDrawable(new Drawable[]{new ColorDrawable(17170445), new BitmapDrawable(this.mContext.getResources(), bitmap)});
                if (stickerMessageObject == null || stickerMessageObject.stickerPackageId == null || stickerMessageObject.stickerId == null || stickerMessageObject.stickerId.compareTo("") == 0 || stickerMessageObject.stickerPackageId.compareTo(stickerMessageObject.stickerId) != 0) {
                    i = 1;
                }
                if (i != 0) {
                    if (Utils.hasJellyBean()) {
                        imageView.setBackground(null);
                    } else {
                        imageView.setBackgroundDrawable(null);
                    }
                }
                imageView.setImageDrawable(transitionDrawable);
                transitionDrawable.startTransition(getFadeInTime());
            }
        }
    }

    public void attachStateIconToBackgroundView(Bitmap bitmap, ImageView imageView) {
        if (Utils.hasJellyBean()) {
            imageView.setBackground(new BitmapDrawable(this.mResources, bitmap));
        } else {
            imageView.setBackgroundDrawable(new BitmapDrawable(this.mResources, bitmap));
        }
    }

    public int getFadeInTime() {
        return this.mFadeInTime;
    }

    public ImageCache getImageCache() {
        return this.mImageCache;
    }

    public StickerMetaCache getMetaCache() {
        return this.mMetaCache;
    }

    public boolean isExitTasksEarly() {
        return this.mExitTasksEarly;
    }

    public void loadImage(Object obj, ImageView imageView, boolean z) {
        loadImage(obj, imageView, z, false);
    }

    public void loadImage(Object obj, ImageView imageView, boolean z, boolean z2) {
        Bitmap bitmapFromMemCache;
        if (obj == null) {
            setImageBitmap(imageView, null, null);
        }
        String valueOf = String.valueOf(obj);
        String str = valueOf.split(":")[0];
        if (this.mImageCache != null) {
            bitmapFromMemCache = this.mImageCache.getBitmapFromMemCache(str);
            Log.d(TAG, "memcache not null dan sticker id = " + str);
        } else {
            bitmapFromMemCache = null;
        }
        if (bitmapFromMemCache != null) {
            if (z2) {
                imageView.setImageDrawable(new BitmapDrawable(this.mContext.getResources(), bitmapFromMemCache));
            } else {
                if (Utils.hasJellyBean()) {
                    imageView.setBackground(null);
                } else {
                    imageView.setBackgroundDrawable(null);
                }
                Drawable transitionDrawable = new TransitionDrawable(new Drawable[]{new BitmapDrawable(this.mContext.getResources(), bitmapFromMemCache), new BitmapDrawable(this.mContext.getResources(), bitmapFromMemCache)});
                imageView.setImageDrawable(transitionDrawable);
                transitionDrawable.startTransition(getFadeInTime());
            }
            Log.d(TAG, "bitmap found on memcache");
        } else if (cancelPotentialWork(valueOf, imageView)) {
            IStickerClientInterface stikerTask = new StikerTask(imageView, valueOf, z);
            if (z2) {
                imageView.setImageDrawable(new AsyncDrawable(this.mContext.getResources(), this.mWaitLoadingBitmap, stikerTask));
                CatfizSticker.getStickerPackageIcon(stikerTask, str, this.mService);
                return;
            }
            imageView.setImageDrawable(new AsyncDrawable(this.mContext.getResources(), null, stikerTask));
            attachStateIconToBackgroundView(this.mWaitLoadingBitmap, imageView);
            CatfizSticker.getStickerIcon(stikerTask, str, this.mService);
        }
    }

    public void setCaches(StickerMetaCache stickerMetaCache, ImageCache imageCache) {
        this.mMetaCache = stickerMetaCache;
        this.mImageCache = imageCache;
    }

    public void setExitTasksEarly(boolean z) {
        this.mExitTasksEarly = z;
    }

    public void setImageCache(ImageCache imageCache) {
        this.mImageCache = imageCache;
    }

    public void setLoadingImage(int i, int i2, int i3) {
        this.mWaitLoadingBitmap = BitmapFactory.decodeResource(this.mResources, i);
        this.mExtractLoadingBitmap = BitmapFactory.decodeResource(this.mResources, i2);
        this.mErrorLoadingBitmap = BitmapFactory.decodeResource(this.mResources, i3);
    }

    public void setUiBinder(ICatfishUIBinder iCatfishUIBinder) {
        this.mService = iCatfishUIBinder;
    }

    public void startOnClick(ImageView imageView) {
        Drawable background = imageView.getBackground();
        if (background instanceof AnimationDrawable) {
            ((AnimationDrawable) background).setVisible(true, true);
            Log.d(TAG, "+++starting animation");
            return;
        }
        Log.d(TAG, "++ NOT INSTANCE OF AnimationDrawable ++");
    }
}
