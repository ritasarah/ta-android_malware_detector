package com.catfiz.sticker;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import com.catfiz.localstorage.DeleteDataRunnable;
import com.catfiz.localstorage.DropAllData;
import com.catfiz.localstorage.LocalStorageWorker;
import com.catfiz.sticker.StickerService.StickerStatus;
import com.catfiz.util.Log;
import java.util.ArrayList;

public class StickerDataStorage {
    private static final int CACHE_LIMIT = 50;
    public static final String STICKERCOUNT = "stickercount";
    public static final String STICKERDESCRIPTION = "stickerdescription";
    public static final String STICKERFONT = "stickerfont";
    public static final String STICKERFONTSIZE = "stickerfontsize";
    public static final String STICKERFONTTYPE = "stickerfonttype";
    public static final String STICKERFORMATTYPE = "stickerformattype";
    public static final String STICKERFRAMECOUNT = "stickerframecount";
    public static final String STICKERFRAMEDURATION = "stickerframeduration";
    public static final String STICKERFRAMEINDEX = "stickerframeindex";
    public static final String STICKERHEIGHT = "stickerheight";
    public static final String STICKERHITS = "stickerhits";
    public static final String STICKERID = "stickerid";
    public static final String STICKERLOOPCOUNT = "stickerloopcount";
    public static final String STICKERNAME = "stickername";
    public static final String STICKERPACKAGEDESCRIPTION = "stickerpackagedescription";
    public static final String STICKERPACKAGEID = "stickerpackageid";
    public static final String STICKERPACKAGENAME = "stickerpackagename";
    public static final String STICKERPACKAGEPRICE = "stickerpackageprice";
    public static final String STICKERPACKAGEPUBLISHER = "stickerpackagepublisher";
    public static final String STICKERPACKAGETYPE = "stickerpackagetype";
    public static final String STICKERPACKAGEVERSION = "stickerpackageversion";
    public static final String STICKERPACKAGE_KEY_IDX = "stickerpackage_idx";
    public static final String STICKERPACKAGE_TABLE_NAME = "stickerpackage";
    public static final String STICKERPERMANENT = "stickerpermanent";
    public static final String STICKERSTATUS = "stickerstatus";
    public static final String STICKERTYPE = "stickertype";
    public static final String STICKERWIDTH = "stickerwidth";
    public static final String STICKER_KEY_IDX = "sticker_idx";
    public static final String STICKER_PACKAGEID_KEY_IDX = "sticker_packageid_idx";
    public static final String STICKER_PREF_NAME = "sticker_pref";
    public static final String STICKER_TABLE_NAME = "sticker";
    private static final String TAG = "StickerDataStorage";
    public static final String TIMESTAMP = "timestamp";
    public static final String UPDATE_BUILTIN_PREF_NAME = "builtin_update";
    private static DatabaseHelper mDBHelper = null;
    private static SQLiteDatabase mStickerDataStorageDB = null;
    private Context mContext;

    class DatabaseHelper extends SQLiteOpenHelper {
        private static final String DATABASE_NAME = "catfizsticker.db";
        private static final int DATABASE_VERSION = 77;
        private Context mContext = null;

        public DatabaseHelper(Context context) {
            super(context, DATABASE_NAME, null, DATABASE_VERSION);
            this.mContext = context;
        }

        private void buildStickerPackageTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS stickerpackage(_id INTEGER PRIMARY KEY, stickerpackageid VARCHAR(25), stickerpackagename VARCHAR(255), stickerpackagepublisher VARCHAR(255), stickerpackagedescription TEXT, stickerpackagetype INTEGER NOT NULL DEFAULT 0, stickerpackageprice INTEGER NOT NULL DEFAULT 0, stickerformattype INTEGER NOT NULL DEFAULT 0, stickercount INTEGER NOT NULL DEFAULT 0, timestamp INTEGER NOT NULL DEFAULT 0, stickerpackageversion INTEGER NOT NULL DEFAULT 0, UNIQUE (stickerpackageid));");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS stickerpackage_idx ON stickerpackage(stickerpackageid);");
        }

        private void buildStickerTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS sticker(_id INTEGER PRIMARY KEY, stickerid VARCHAR(25), stickername VARCHAR(255), stickerdescription TEXT, stickerformattype INTEGER NOT NULL DEFAULT 0, stickertype INTEGER NOT NULL DEFAULT 0, stickerpackageid VARCHAR(25), stickerframecount INTEGER NOT NULL DEFAULT 0, stickerwidth INTEGER NOT NULL DEFAULT 0, stickerheight INTEGER NOT NULL DEFAULT 0, stickerframeduration TEXT, stickerframeindex TEXT, stickerloopcount INTEGER NOT NULL DEFAULT 0, stickerhits INTEGER NOT NULL DEFAULT 0, stickerpermanent INTEGER NOT NULL DEFAULT 0, stickerfont VARCHAR(255), stickerfontsize INTEGER NOT NULL DEFAULT 0, stickerfonttype INTEGER NOT NULL DEFAULT 0, stickerstatus INTEGER NOT NULL DEFAULT 0, timestamp INTEGER NOT NULL DEFAULT 0, UNIQUE (stickerid));");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sticker_idx ON sticker(stickerid);");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sticker_packageid_idx ON sticker(stickerpackageid);");
        }

        private void setUpdateBuiltInStickerFlag() {
            this.mContext.getSharedPreferences(StickerDataStorage.STICKER_PREF_NAME, 0).edit().putBoolean(StickerDataStorage.UPDATE_BUILTIN_PREF_NAME, true).commit();
        }

        public void onCreate(SQLiteDatabase sQLiteDatabase) {
            buildStickerPackageTable(sQLiteDatabase);
            buildStickerTable(sQLiteDatabase);
        }

        public void onDowngrade(SQLiteDatabase sQLiteDatabase, int i, int i2) {
            Log.d(StickerDataStorage.TAG, "Downgrade DB from " + i + " to " + i2);
            LocalStorageWorker.postRunnable(new DropAllData());
            sQLiteDatabase.execSQL("DROP TABLE IF EXISTS stickerpackage");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS stickerpackage_idx");
            sQLiteDatabase.execSQL("DROP TABLE IF EXISTS sticker");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sticker_idx");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sticker_packageid_idx");
            buildStickerPackageTable(sQLiteDatabase);
            buildStickerTable(sQLiteDatabase);
            setUpdateBuiltInStickerFlag();
        }

        public void onUpgrade(SQLiteDatabase sQLiteDatabase, int i, int i2) {
            if (i <= 1) {
                String str = "ALTER TABLE sticker ADD COLUMN stickerframeduration TEXT;";
                sQLiteDatabase.execSQL("ALTER TABLE sticker ADD COLUMN stickerframeduration TEXT;");
                Log.d(StickerDataStorage.TAG, " Update database from version 1 ");
            }
            if (i <= 2) {
                sQLiteDatabase.execSQL("ALTER TABLE sticker ADD COLUMN stickerhits INTEGER NOT NULL DEFAULT 0;");
                sQLiteDatabase.execSQL("ALTER TABLE sticker ADD COLUMN stickerpermanent INTEGER NOT NULL DEFAULT 0;");
                Log.d(StickerDataStorage.TAG, " Update database from version 2 ");
            }
            if (i <= 3) {
                sQLiteDatabase.execSQL("ALTER TABLE stickerpackage ADD COLUMN stickerpackageversion INTEGER NOT NULL DEFAULT 0;");
                Log.d(StickerDataStorage.TAG, " Update database from version 3 ");
            }
            if (i <= 4) {
                setUpdateBuiltInStickerFlag();
            }
            if (i <= 5) {
                setUpdateBuiltInStickerFlag();
            }
            if (i <= 23) {
                sQLiteDatabase.execSQL("ALTER TABLE sticker ADD COLUMN stickerframeindex TEXT;");
                sQLiteDatabase.execSQL("ALTER TABLE sticker ADD COLUMN stickerloopcount INTEGER NOT NULL DEFAULT 0;");
            }
            if (i <= 51) {
                sQLiteDatabase.execSQL("ALTER TABLE sticker ADD COLUMN stickerfont VARCHAR(255);");
                sQLiteDatabase.execSQL("ALTER TABLE sticker ADD COLUMN stickerfontsize INTEGER NOT NULL DEFAULT 0;");
                sQLiteDatabase.execSQL("ALTER TABLE sticker ADD COLUMN stickerfonttype INTEGER NOT NULL DEFAULT 0;");
                sQLiteDatabase.execSQL("ALTER TABLE sticker ADD COLUMN stickerstatus INTEGER NOT NULL DEFAULT 0;");
            }
            if (i <= 76) {
                Log.d(StickerDataStorage.TAG, "Upgrade DB from " + i + " to " + i2);
                LocalStorageWorker.postRunnable(new DropAllData());
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS stickerpackage");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS stickerpackage_idx");
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS sticker");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sticker_idx");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sticker_packageid_idx");
                buildStickerPackageTable(sQLiteDatabase);
                buildStickerTable(sQLiteDatabase);
                setUpdateBuiltInStickerFlag();
            }
        }
    }

    public StickerDataStorage(Context context) {
        this.mContext = context;
        if (mDBHelper == null) {
            Log.d(TAG, "Create new DB Helper");
            mDBHelper = new DatabaseHelper(context);
        }
    }

    private void doLRUCache() {
        SQLiteDatabase db = getDB();
        Cursor query = db.query(STICKER_TABLE_NAME, null, "stickerpermanent = 0 AND timestamp <  " + (System.currentTimeMillis() - 86400000), null, null, null, "stickerhits DESC");
        if (query.getCount() > CACHE_LIMIT) {
            int count = query.getCount() - 50;
            for (int i = 0; i < count; i++) {
                query.moveToNext();
                String string = query.getString(query.getColumnIndex(STICKERID));
                db.delete(STICKER_TABLE_NAME, "stickerid = '" + string + "'", null);
                LocalStorageWorker.postRunnable(new DeleteDataRunnable(string));
            }
        }
        query.close();
    }

    public boolean deleteSticker(String str) {
        return getDB().delete(STICKER_TABLE_NAME, new StringBuilder().append("stickerid='").append(str).append("'").toString(), null) > 0;
    }

    public boolean deleteStickerPackage(String str) {
        SQLiteDatabase db = getDB();
        int delete = db.delete(STICKERPACKAGE_TABLE_NAME, "stickerpackageid='" + str + "'", null);
        if (delete > 0) {
            delete &= db.delete(STICKER_TABLE_NAME, "stickerpackageid='" + str + "'", null);
        }
        return delete > 0;
    }

    public Cursor getAllStickerItem() {
        return getDB().query(STICKER_TABLE_NAME, null, null, null, null, null, "stickerpackageid ASC, stickerid ASC");
    }

    public Cursor getAllStickerPackage() {
        return getDB().query(STICKERPACKAGE_TABLE_NAME, null, null, null, null, null, STICKERPACKAGEID);
    }

    public SQLiteDatabase getDB() {
        mStickerDataStorageDB = mDBHelper.getWritableDatabase();
        return mStickerDataStorageDB;
    }

    public Cursor getNotExtractedStickerItem(String str) {
        return getDB().query(STICKER_TABLE_NAME, null, "stickerpackageid = '" + str + "' AND " + STICKERTYPE + " !=  " + 16 + " AND " + STICKERSTATUS + " != " + StickerStatus.EXTRACTING.ordinal() + " AND " + STICKERSTATUS + " != " + StickerStatus.DOWNLOADING.ordinal(), null, null, null, STICKERID);
    }

    public Cursor getStickerItem(String str) {
        return getDB().query(STICKER_TABLE_NAME, null, "stickerpackageid = '" + str + "' AND " + STICKERTYPE + " !=  " + 16, null, null, null, STICKERID);
    }

    public Cursor getStickerItemAndIcon(String str) {
        return getDB().query(STICKER_TABLE_NAME, null, "stickerpackageid = '" + str + "'", null, null, null, STICKERID);
    }

    public Cursor getStickerItemDetail(String str) {
        SQLiteDatabase db = getDB();
        Cursor query = db.query(STICKER_TABLE_NAME, null, "stickerid = '" + str + "'", null, null, null, null);
        if (query.getCount() > 0) {
            db.execSQL("UPDATE sticker SET stickerhits = stickerhits + 1 WHERE STICKERID = '" + str + "'");
        }
        return query;
    }

    public Cursor getStickerPackageDetail(String str) {
        return getDB().query(STICKERPACKAGE_TABLE_NAME, null, "stickerpackageid = '" + str + "'", null, null, null, null);
    }

    public void storeStickerIds(String[] strArr, String str) {
        SQLiteDatabase db = getDB();
        int length = strArr.length;
        int i = 0;
        while (i < length) {
            try {
                ContentValues contentValues = new ContentValues();
                contentValues.put(STICKERID, strArr[i]);
                contentValues.put(STICKERPACKAGEID, str);
                contentValues.put(STICKERFRAMEDURATION, "[]");
                contentValues.put(STICKERFRAMEINDEX, "[]");
                if (db.insert(STICKER_TABLE_NAME, null, contentValues) <= 0) {
                    Log.d(TAG, "INSERT WITH  STICKERID=" + strArr[i] + ": FAIL!!!");
                }
                contentValues.clear();
                i++;
            } catch (Exception e) {
                e.printStackTrace();
                return;
            }
        }
        doLRUCache();
    }

    public void storeStickerItem(StickerMessageObject stickerMessageObject) {
        SQLiteDatabase db = getDB();
        db.beginTransaction();
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put(STICKERID, stickerMessageObject.stickerId);
            contentValues.put(STICKERFORMATTYPE, Integer.valueOf(stickerMessageObject.stickerFormatType));
            contentValues.put(STICKERTYPE, Integer.valueOf(stickerMessageObject.stickerType));
            contentValues.put(STICKERPACKAGEID, stickerMessageObject.stickerPackageId);
            contentValues.put(STICKERFRAMECOUNT, Integer.valueOf(stickerMessageObject.stickerFrameCount));
            contentValues.put(STICKERFRAMEDURATION, stickerMessageObject.stickerFrameDurationArrayStr);
            contentValues.put(STICKERFRAMEINDEX, stickerMessageObject.stickerFrameIndexArrayStr);
            contentValues.put(STICKERLOOPCOUNT, Integer.valueOf(stickerMessageObject.stickerLoopCount));
            contentValues.put(STICKERPERMANENT, Boolean.valueOf(stickerMessageObject.stickerPermanent));
            contentValues.put(STICKERWIDTH, Integer.valueOf(stickerMessageObject.stickerBitmapWidth));
            contentValues.put(STICKERHEIGHT, Integer.valueOf(stickerMessageObject.stickerBitmapHeight));
            contentValues.put(STICKERFONT, stickerMessageObject.stickerFont);
            contentValues.put(STICKERFONTSIZE, Integer.valueOf(stickerMessageObject.stickerFontSize));
            contentValues.put(STICKERFONTTYPE, Integer.valueOf(stickerMessageObject.stickerFontType));
            contentValues.put(STICKERSTATUS, Integer.valueOf(stickerMessageObject.stickerStatus.ordinal()));
            contentValues.put(TIMESTAMP, Long.valueOf(stickerMessageObject.timestamp));
            if (db.insert(STICKER_TABLE_NAME, null, contentValues) <= 0) {
                Log.d(TAG, "INSERT WITH  STICKERID=" + stickerMessageObject.stickerId + ": FAIL!!!");
            }
            contentValues.clear();
            doLRUCache();
            db.setTransactionSuccessful();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            Log.d(TAG, "INSERT WITH  STICKERID=" + stickerMessageObject.stickerId + ": SUCCESS!!!");
            db.endTransaction();
        }
    }

    public void storeStickerItem(ArrayList arrayList) {
        SQLiteDatabase db = getDB();
        int size = arrayList.size();
        db.beginTransaction();
        int i = 0;
        while (i < size) {
            try {
                StickerMessageObject stickerMessageObject = (StickerMessageObject) arrayList.get(i);
                ContentValues contentValues = new ContentValues();
                contentValues.put(STICKERID, stickerMessageObject.stickerId);
                contentValues.put(STICKERFORMATTYPE, Integer.valueOf(stickerMessageObject.stickerFormatType));
                contentValues.put(STICKERTYPE, Integer.valueOf(stickerMessageObject.stickerType));
                contentValues.put(STICKERPACKAGEID, stickerMessageObject.stickerPackageId);
                contentValues.put(STICKERFRAMECOUNT, Integer.valueOf(stickerMessageObject.stickerFrameCount));
                contentValues.put(STICKERFRAMEDURATION, stickerMessageObject.stickerFrameDurationArrayStr);
                contentValues.put(STICKERFRAMEINDEX, stickerMessageObject.stickerFrameIndexArrayStr);
                contentValues.put(STICKERLOOPCOUNT, Integer.valueOf(stickerMessageObject.stickerLoopCount));
                contentValues.put(STICKERSTATUS, Integer.valueOf(stickerMessageObject.stickerStatus.ordinal()));
                contentValues.put(STICKERFONT, stickerMessageObject.stickerFont);
                contentValues.put(STICKERFONTSIZE, Integer.valueOf(stickerMessageObject.stickerFontSize));
                contentValues.put(STICKERFONTTYPE, Integer.valueOf(stickerMessageObject.stickerFontType));
                contentValues.put(STICKERPERMANENT, Boolean.valueOf(stickerMessageObject.stickerPermanent));
                contentValues.put(TIMESTAMP, Long.valueOf(stickerMessageObject.timestamp));
                if (db.insert(STICKER_TABLE_NAME, null, contentValues) <= 0) {
                    Log.d(TAG, "INSERT WITH  STICKERID=" + stickerMessageObject.stickerId + ": FAIL!!!");
                }
                contentValues.clear();
                i++;
            } catch (Exception e) {
                e.printStackTrace();
                return;
            } finally {
                db.endTransaction();
            }
        }
        doLRUCache();
        db.setTransactionSuccessful();
        db.endTransaction();
    }

    public void storeStickerPackage(StickerMessageObject stickerMessageObject) {
        SQLiteDatabase db = getDB();
        db.beginTransaction();
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put(STICKERPACKAGEID, stickerMessageObject.stickerPackageId);
            contentValues.put(STICKERPACKAGENAME, stickerMessageObject.stickerPackageName);
            contentValues.put(STICKERPACKAGEPUBLISHER, stickerMessageObject.stickerPackagePublisher);
            contentValues.put(STICKERPACKAGEVERSION, Integer.valueOf(stickerMessageObject.stickerPackageVersion));
            contentValues.put(STICKERPACKAGEDESCRIPTION, stickerMessageObject.stickerPackageDescription);
            contentValues.put(STICKERPACKAGETYPE, Integer.valueOf(stickerMessageObject.stickerPackageType));
            contentValues.put(STICKERPACKAGEPRICE, Integer.valueOf(stickerMessageObject.stickerPackagePrice));
            contentValues.put(STICKERFORMATTYPE, Integer.valueOf(stickerMessageObject.stickerFormatType));
            contentValues.put(STICKERCOUNT, Integer.valueOf(stickerMessageObject.stickerCount));
            contentValues.put(TIMESTAMP, Long.valueOf(stickerMessageObject.timestamp));
            if (db.insert(STICKERPACKAGE_TABLE_NAME, null, contentValues) <= 0) {
                Log.d(TAG, "INSERT WITH  STICKERPACKAGEID=" + stickerMessageObject.stickerPackageId + ": FAIL!!!");
            }
            contentValues.clear();
            if (stickerMessageObject.stickerIds != null && stickerMessageObject.stickerIds.length > 0) {
                storeStickerIds(stickerMessageObject.stickerIds, stickerMessageObject.stickerPackageId);
            }
            db.setTransactionSuccessful();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            db.endTransaction();
        }
    }

    public void storeStickerPackage(String str) {
        SQLiteDatabase db = getDB();
        db.beginTransaction();
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put(STICKERPACKAGEID, str);
            contentValues.put(STICKERPACKAGENAME, "");
            contentValues.put(STICKERPACKAGEPUBLISHER, "");
            contentValues.put(STICKERPACKAGEDESCRIPTION, "");
            contentValues.put(STICKERPACKAGEVERSION, Integer.valueOf(0));
            contentValues.put(STICKERPACKAGETYPE, Integer.valueOf(0));
            contentValues.put(STICKERPACKAGEPRICE, Integer.valueOf(0));
            contentValues.put(STICKERFORMATTYPE, Integer.valueOf(0));
            contentValues.put(STICKERCOUNT, Integer.valueOf(0));
            contentValues.put(TIMESTAMP, Integer.valueOf(0));
            if (db.insert(STICKERPACKAGE_TABLE_NAME, null, contentValues) <= 0) {
                Log.d(TAG, "INSERT WITH  STICKERPACKAGEID=" + str + ": FAIL!!!");
            }
            contentValues.clear();
            db.setTransactionSuccessful();
        } catch (Exception e) {
            Log.d(TAG, "ERROR storeStickerPackage = " + e.getMessage());
            e.printStackTrace();
        } finally {
            db.endTransaction();
        }
    }

    public void storeStickerPackage(ArrayList arrayList) {
        SQLiteDatabase db = getDB();
        int size = arrayList.size();
        db.beginTransaction();
        int i = 0;
        while (i < size) {
            try {
                StickerMessageObject stickerMessageObject = (StickerMessageObject) arrayList.get(i);
                ContentValues contentValues = new ContentValues();
                contentValues.put(STICKERPACKAGEID, stickerMessageObject.stickerPackageId);
                contentValues.put(STICKERPACKAGENAME, stickerMessageObject.stickerPackageName);
                contentValues.put(STICKERPACKAGEPUBLISHER, stickerMessageObject.stickerPackagePublisher);
                contentValues.put(STICKERPACKAGEVERSION, Integer.valueOf(stickerMessageObject.stickerPackageVersion));
                contentValues.put(STICKERPACKAGEDESCRIPTION, stickerMessageObject.stickerPackageDescription);
                contentValues.put(STICKERPACKAGETYPE, Integer.valueOf(stickerMessageObject.stickerPackageType));
                contentValues.put(STICKERPACKAGEPRICE, Integer.valueOf(stickerMessageObject.stickerPackagePrice));
                contentValues.put(STICKERFORMATTYPE, Integer.valueOf(stickerMessageObject.stickerFormatType));
                contentValues.put(STICKERCOUNT, Integer.valueOf(stickerMessageObject.stickerCount));
                contentValues.put(TIMESTAMP, Long.valueOf(stickerMessageObject.timestamp));
                if (db.insert(STICKERPACKAGE_TABLE_NAME, null, contentValues) <= 0) {
                    Log.d(TAG, "INSERT WITH  STICKERPACKAGEID=" + stickerMessageObject.stickerPackageId + ": FAIL!!!");
                }
                contentValues.clear();
                i++;
            } catch (Exception e) {
                e.printStackTrace();
                return;
            } finally {
                db.endTransaction();
            }
        }
        db.setTransactionSuccessful();
        db.endTransaction();
    }

    public void updateStickerItem(StickerMessageObject stickerMessageObject) {
        SQLiteDatabase db = getDB();
        db.beginTransaction();
        try {
            ContentValues contentValues = new ContentValues();
            if (stickerMessageObject.stickerName != null) {
                contentValues.put(STICKERNAME, stickerMessageObject.stickerName);
            }
            if (stickerMessageObject.stickerDescription != null) {
                contentValues.put(STICKERDESCRIPTION, stickerMessageObject.stickerDescription);
            }
            if (stickerMessageObject.stickerFormatType != 0) {
                contentValues.put(STICKERFORMATTYPE, Integer.valueOf(stickerMessageObject.stickerFormatType));
            }
            if (stickerMessageObject.stickerType != 0) {
                contentValues.put(STICKERTYPE, Integer.valueOf(stickerMessageObject.stickerType));
            }
            if (stickerMessageObject.stickerPackageId != null) {
                contentValues.put(STICKERPACKAGEID, stickerMessageObject.stickerPackageId);
            }
            if (stickerMessageObject.stickerFrameCount != 0) {
                contentValues.put(STICKERFRAMECOUNT, Integer.valueOf(stickerMessageObject.stickerFrameCount));
            }
            if (stickerMessageObject.stickerFrameDurationArrayStr != null) {
                contentValues.put(STICKERFRAMEDURATION, stickerMessageObject.stickerFrameDurationArrayStr);
            }
            if (stickerMessageObject.stickerFrameIndexArrayStr != null) {
                contentValues.put(STICKERFRAMEINDEX, stickerMessageObject.stickerFrameIndexArrayStr);
            }
            if (stickerMessageObject.stickerLoopCount != 0) {
                contentValues.put(STICKERLOOPCOUNT, Integer.valueOf(stickerMessageObject.stickerLoopCount));
            }
            if (stickerMessageObject.stickerFont != null) {
                contentValues.put(STICKERFONT, stickerMessageObject.stickerFont);
            }
            if (stickerMessageObject.stickerFontSize != 0) {
                contentValues.put(STICKERFONTSIZE, Integer.valueOf(stickerMessageObject.stickerFontSize));
            }
            if (stickerMessageObject.stickerFontType != 0) {
                contentValues.put(STICKERFONTTYPE, Integer.valueOf(stickerMessageObject.stickerFontType));
            }
            if (stickerMessageObject.timestamp != 0) {
                contentValues.put(TIMESTAMP, Long.valueOf(stickerMessageObject.timestamp));
            }
            if (((long) db.update(STICKER_TABLE_NAME, contentValues, "stickerid='" + stickerMessageObject.stickerId + "'", null)) <= 0) {
                Log.d(TAG, "UPDATE WITH  STICKERID=" + stickerMessageObject.stickerId + ": FAIL!!!");
            }
            contentValues.clear();
            db.setTransactionSuccessful();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            db.endTransaction();
        }
    }

    public void updateStickerItemSize(StickerMessageObject stickerMessageObject) {
        SQLiteDatabase db = getDB();
        db.beginTransaction();
        try {
            ContentValues contentValues = new ContentValues();
            if (stickerMessageObject.stickerBitmapHeight != 0) {
                contentValues.put(STICKERHEIGHT, Integer.valueOf(stickerMessageObject.stickerBitmapHeight));
            }
            if (stickerMessageObject.stickerBitmapWidth != 0) {
                contentValues.put(STICKERWIDTH, Integer.valueOf(stickerMessageObject.stickerBitmapWidth));
            }
            if (((long) db.update(STICKER_TABLE_NAME, contentValues, "stickerid='" + stickerMessageObject.stickerId + "'", null)) <= 0) {
                Log.d(TAG, "UPDATE WITH  STICKERID=" + stickerMessageObject.stickerId + ": FAIL!!!");
            }
            contentValues.clear();
            db.setTransactionSuccessful();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            db.endTransaction();
        }
    }

    public void updateStickerItemStatus(StickerMessageObject stickerMessageObject) {
        SQLiteDatabase db = getDB();
        db.beginTransaction();
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put(STICKERSTATUS, Integer.valueOf(stickerMessageObject.stickerStatus.ordinal()));
            if (((long) db.update(STICKER_TABLE_NAME, contentValues, "stickerid='" + stickerMessageObject.stickerId + "'", null)) <= 0) {
                Log.d(TAG, "UPDATE WITH  STICKERID=" + stickerMessageObject.stickerId + ": FAIL!!!");
            }
            contentValues.clear();
            db.setTransactionSuccessful();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            db.endTransaction();
        }
    }

    public void updateStickerPackage(StickerMessageObject stickerMessageObject) {
        SQLiteDatabase db = getDB();
        db.beginTransaction();
        try {
            ContentValues contentValues = new ContentValues();
            if (stickerMessageObject.stickerPackageName != null) {
                contentValues.put(STICKERPACKAGENAME, stickerMessageObject.stickerPackageName);
            }
            if (stickerMessageObject.stickerPackagePublisher != null) {
                contentValues.put(STICKERPACKAGEPUBLISHER, stickerMessageObject.stickerPackagePublisher);
            }
            if (stickerMessageObject.stickerPackageVersion != 0) {
                contentValues.put(STICKERPACKAGEVERSION, Integer.valueOf(stickerMessageObject.stickerPackageVersion));
            }
            if (stickerMessageObject.stickerPackageDescription != null) {
                contentValues.put(STICKERPACKAGEDESCRIPTION, stickerMessageObject.stickerPackageDescription);
            }
            if (stickerMessageObject.stickerPackageType != 0) {
                contentValues.put(STICKERPACKAGETYPE, Integer.valueOf(stickerMessageObject.stickerPackageType));
            }
            if (stickerMessageObject.stickerPackagePrice != 0) {
                contentValues.put(STICKERPACKAGEPRICE, Integer.valueOf(stickerMessageObject.stickerPackagePrice));
            }
            if (stickerMessageObject.stickerFormatType != 0) {
                contentValues.put(STICKERFORMATTYPE, Integer.valueOf(stickerMessageObject.stickerFormatType));
            }
            if (stickerMessageObject.stickerCount != 0) {
                contentValues.put(STICKERCOUNT, Integer.valueOf(stickerMessageObject.stickerCount));
            }
            if (stickerMessageObject.timestamp != 0) {
                contentValues.put(TIMESTAMP, Long.valueOf(stickerMessageObject.timestamp));
            }
            if (((long) db.update(STICKERPACKAGE_TABLE_NAME, contentValues, "stickerpackageid='" + stickerMessageObject.stickerPackageId + "'", null)) <= 0) {
                Log.d(TAG, "INSERT WITH  STICKERPACKAGEID=" + stickerMessageObject.stickerPackageId + ": FAIL!!!");
            }
            if (stickerMessageObject.stickerIds != null && stickerMessageObject.stickerIds.length > 0) {
                storeStickerIds(stickerMessageObject.stickerIds, stickerMessageObject.stickerPackageId);
            }
            contentValues.clear();
            db.setTransactionSuccessful();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            db.endTransaction();
        }
    }
}
