package com.catfiz.sticker;

import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.support.v4.content.LocalBroadcastManager;
import com.catfiz.intents.BroadcastIntents;
import com.catfiz.localstorage.CatfizStorageInputStream;
import com.catfiz.localstorage.DeleteDataRunnable;
import com.catfiz.localstorage.GetBufferStreamRunnable;
import com.catfiz.localstorage.GetDataBitmapRunnable;
import com.catfiz.localstorage.ILocalStorageInterface;
import com.catfiz.localstorage.LocalStorageInterface;
import com.catfiz.localstorage.LocalStorageWorker;
import com.catfiz.localstorage.WriteChunkNoCopyRunnable;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishService;
import com.catfiz.sticker.IStickerClientInterface.DefaultStickerClientInterface;
import com.catfiz.sticker.StickerDatabaseExecutor.StickerDatabaseAction;
import com.catfiz.sticker.StickerDatabaseResponse.StickerDatabaseResponseStatus;
import com.catfiz.sticker.StickerService.StickerFormatType;
import com.catfiz.sticker.StickerService.StickerPackageType;
import com.catfiz.sticker.StickerService.StickerServiceAction;
import com.catfiz.sticker.StickerService.StickerStatus;
import com.catfiz.util.AnimationDrawable;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class StickerStorageManager {
    private static final int FIRST_STICKER_COUNT = 4;
    private static final String TAG = "StickerStorageManager";
    private static final Map mGetStickerBitmapClientList = new HashMap();
    private String mDataId = null;
    int mFrameIndex = 0;
    Bitmap[] mStickerBitmaps = null;

    class ExtractStickerRunnable implements Runnable {
        private boolean permanentSticker = false;
        private IStickerClientInterface stickerClient = null;
        private String stickerId = null;
        private String[] stickerIds = null;
        private int stickerIndex = 0;
        private String stickerPackageId = null;

        public ExtractStickerRunnable(String str, IStickerClientInterface iStickerClientInterface, boolean z, int i) {
            this.stickerId = str;
            this.stickerClient = iStickerClientInterface;
            this.permanentSticker = z;
            this.stickerIndex = i;
            Log.d(StickerStorageManager.TAG, " ExtractStickerRunnable2 with stickerId = " + this.stickerId);
        }

        public ExtractStickerRunnable(String[] strArr, String str, IStickerClientInterface iStickerClientInterface, boolean z, int i) {
            this.stickerIds = strArr;
            this.stickerPackageId = str;
            this.stickerClient = iStickerClientInterface;
            this.permanentSticker = z;
            this.stickerIndex = i;
            Log.d(StickerStorageManager.TAG, " ExtractStickerRunnable1 with stickerId = " + this.stickerIds);
        }

        public void run() {
            int i = 0;
            if (this.stickerIds != null) {
                int i2;
                Cursor notExtractedStickerItem = new StickerDataStorage(StickerStorageManager.this.getCatfishService()).getNotExtractedStickerItem(this.stickerPackageId);
                String[] strArr = new String[notExtractedStickerItem.getCount()];
                int i3 = 0;
                while (notExtractedStickerItem.moveToNext()) {
                    i2 = i3 + 1;
                    strArr[i3] = notExtractedStickerItem.getString(notExtractedStickerItem.getColumnIndex(StickerDataStorage.STICKERID));
                    i3 = i2;
                }
                notExtractedStickerItem.close();
                int length = strArr.length;
                i3 = 0;
                while (i < length) {
                    String str = strArr[i];
                    Log.d(StickerStorageManager.TAG, " extractSticker1 with stickerId = " + str);
                    i2 = i3 + 1;
                    StickerStorageManager.this.extractSticker(str, this.stickerClient, this.permanentSticker, i3);
                    i++;
                    i3 = i2;
                }
                return;
            }
            Cursor stickerItemDetail = new StickerDataStorage(StickerStorageManager.this.getCatfishService()).getStickerItemDetail(this.stickerId);
            if (stickerItemDetail.moveToFirst()) {
                i = stickerItemDetail.getColumnIndex(StickerDataStorage.STICKERSTATUS);
                if (i > 0) {
                    StickerStatus stickerStatus = StickerStatus.values()[stickerItemDetail.getInt(i)];
                    if (stickerStatus == StickerStatus.EXTRACTING || stickerStatus == StickerStatus.DOWNLOADING) {
                        stickerItemDetail.close();
                        return;
                    }
                }
            }
            stickerItemDetail.close();
            Log.d(StickerStorageManager.TAG, " extractSticker2 with stickerId = " + this.stickerId);
            StickerStorageManager.this.extractSticker(this.stickerId, this.stickerClient, this.permanentSticker, this.stickerIndex);
        }
    }

    public StickerStorageManager() {
        LocalStorageWorker.init();
    }

    private boolean isTaskCanceled(IStickerClientInterface iStickerClientInterface) {
        if (iStickerClientInterface instanceof IStickerExitTaskEarly) {
            IStickerExitTaskEarly iStickerExitTaskEarly = (IStickerExitTaskEarly) iStickerClientInterface;
            if (iStickerExitTaskEarly.isExitTaskEarly() || iStickerExitTaskEarly.isCanceled()) {
                return true;
            }
        }
        return false;
    }

    public void deleteSticker(String str) {
        LocalStorageWorker.postRunnable(new DeleteDataRunnable(str));
    }

    public void extractSticker(String str, final IStickerClientInterface iStickerClientInterface, final boolean z, int i) {
        final StickerMessageObject obtain = StickerMessageObject.obtain();
        obtain.stickerId = str;
        obtain.stickerStatus = StickerStatus.NOT_EXTRACTED;
        getStickerBufferStream(obtain, new LocalStorageInterface() {
            public void onBufferStreamReady(byte[] bArr) {
                Log.d(StickerStorageManager.TAG, "store sticker onBufferStreamReady");
                Map hashMap = new HashMap();
                LocalStorageWorker.postRunnable(new DeleteDataRunnable(obtain.stickerId));
                try {
                    InputStream zipInputStream = new ZipInputStream(new ByteArrayInputStream(bArr));
                    ZipEntry nextEntry = zipInputStream.getNextEntry();
                    while (nextEntry != null) {
                        if (nextEntry.isDirectory()) {
                            zipInputStream.closeEntry();
                            nextEntry = zipInputStream.getNextEntry();
                        } else {
                            String name = new File(nextEntry.getName()).getName();
                            Log.d(StickerStorageManager.TAG, "store sticker filename " + name);
                            if (name.compareTo("manifest") == 0) {
                                JSONArray jSONArray;
                                int i;
                                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(zipInputStream));
                                StringBuilder stringBuilder = new StringBuilder();
                                while (true) {
                                    String readLine = bufferedReader.readLine();
                                    if (readLine == null) {
                                        break;
                                    }
                                    stringBuilder.append(readLine);
                                }
                                Log.d(StickerStorageManager.TAG, "store sticker manifest " + stringBuilder);
                                JSONObject jSONObject = new JSONObject(stringBuilder.toString());
                                obtain.stickerId = jSONObject.getString(CatfishRESTAPI.CFCOMPACT_STICKERID);
                                if (jSONObject.getString(CatfishRESTAPI.CFCOMPACT_STICKERTYPE).compareTo("multi") == 0) {
                                    obtain.stickerType |= 8;
                                } else if (jSONObject.getString(CatfishRESTAPI.CFCOMPACT_STICKERTYPE).compareTo("single") == 0) {
                                    obtain.stickerType |= StickerStorageManager.FIRST_STICKER_COUNT;
                                }
                                if (jSONObject.getString(CatfishRESTAPI.CFCOMPACT_STICKERFORMATTYPE).compareTo("svg") == 0) {
                                    obtain.stickerFormatType = StickerFormatType.FORMAT_SVG.ordinal();
                                } else if (jSONObject.getString(CatfishRESTAPI.CFCOMPACT_STICKERFORMATTYPE).compareTo("png") == 0) {
                                    obtain.stickerFormatType = StickerFormatType.FORMAT_BITMAP.ordinal();
                                }
                                obtain.stickerFrameCount = jSONObject.getInt(CatfishRESTAPI.CFCOMPACT_STICKERFRAMECOUNT);
                                obtain.stickerPackageId = jSONObject.getString(CatfishRESTAPI.CFCOMPACT_STICKERPACKAGEID);
                                obtain.stickerFrameDurationArrayStr = jSONObject.getJSONArray(CatfishRESTAPI.CFCOMPACT_STICKERFRAMEDURATION).toString();
                                if (jSONObject.has(CatfishRESTAPI.CFCOMPACT_STICKERLOOPCOUNT)) {
                                    obtain.stickerLoopCount = jSONObject.getInt(CatfishRESTAPI.CFCOMPACT_STICKERLOOPCOUNT);
                                }
                                if (jSONObject.has(CatfishRESTAPI.CFCOMPACT_STICKERFRAMEINDEX)) {
                                    obtain.stickerFrameIndexArrayStr = jSONObject.getJSONArray(CatfishRESTAPI.CFCOMPACT_STICKERFRAMEINDEX).toString();
                                } else {
                                    obtain.stickerFrameIndexArrayStr = "";
                                }
                                obtain.stickerPermanent = z;
                                obtain.timestamp = System.currentTimeMillis();
                                if (hashMap.containsKey(obtain.stickerId)) {
                                    obtain.stickerBitmapWidth = ((int[]) hashMap.get(obtain.stickerId))[0];
                                    obtain.stickerBitmapHeight = ((int[]) hashMap.get(obtain.stickerId))[1];
                                }
                                try {
                                    jSONArray = new JSONArray(obtain.stickerFrameDurationArrayStr);
                                    obtain.stickerFrameDuration = new int[jSONArray.length()];
                                    for (i = 0; i < jSONArray.length(); i++) {
                                        obtain.stickerFrameDuration[i] = jSONArray.getInt(i);
                                    }
                                } catch (JSONException e) {
                                    e.printStackTrace();
                                } catch (IOException e2) {
                                    Log.e(StickerStorageManager.TAG, "error = " + e2.getMessage());
                                    obtain.stickerStatus = StickerStatus.NOT_EXTRACTED;
                                    StickerStorageManager.this.getCatfishService().postRunnableToDbThread(new StickerDatabaseExecutor(iStickerClientInterface, StickerDatabaseAction.UPDATE_STICKER_STATUS, obtain));
                                    e2.printStackTrace();
                                }
                                try {
                                    jSONArray = new JSONArray(obtain.stickerFrameIndexArrayStr);
                                    obtain.stickerFrameIndex = new int[jSONArray.length()];
                                    for (i = 0; i < jSONArray.length(); i++) {
                                        obtain.stickerFrameIndex[i] = jSONArray.getInt(i);
                                    }
                                } catch (JSONException e3) {
                                    e3.printStackTrace();
                                } catch (IOException e22) {
                                    Log.e(StickerStorageManager.TAG, "error = " + e22.getMessage());
                                    obtain.stickerStatus = StickerStatus.NOT_EXTRACTED;
                                    StickerStorageManager.this.getCatfishService().postRunnableToDbThread(new StickerDatabaseExecutor(iStickerClientInterface, StickerDatabaseAction.UPDATE_STICKER_STATUS, obtain));
                                    e22.printStackTrace();
                                }
                                Log.d(StickerStorageManager.TAG, "post runnable to save sticker database " + stringBuilder);
                                StickerStorageManager.this.getCatfishService().postRunnableToDbThread(new StickerDatabaseExecutor(iStickerClientInterface, StickerDatabaseAction.STORE_STICKER, obtain));
                            } else {
                                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                                byte[] bArr2 = new byte[Utils.IO_BUFFER_SIZE];
                                while (true) {
                                    int read = zipInputStream.read(bArr2);
                                    if (read == -1) {
                                        break;
                                    }
                                    byteArrayOutputStream.write(bArr2, 0, read);
                                }
                                byteArrayOutputStream.flush();
                                Bitmap convertSVGToBitmap = StickerSvgUtil.convertSVGToBitmap(StickerStorageManager.this.getCatfishService(), byteArrayOutputStream.toByteArray(), (long) byteArrayOutputStream.size());
                                obtain.stickerBitmapHeight = convertSVGToBitmap.getHeight();
                                obtain.stickerBitmapWidth = convertSVGToBitmap.getWidth();
                                boolean z = name.substring(0, name.length() + -4).compareTo(new StringBuilder().append(obtain.stickerId).append("1").toString()) == 0;
                                ILocalStorageInterface anonymousClass1 = new LocalStorageInterface() {
                                    public void onWriteDone() {
                                        Log.d(StickerStorageManager.TAG, " Update sticker status READY, stickerid = " + obtain.stickerId);
                                        obtain.stickerStatus = StickerStatus.READY;
                                        StickerStorageManager.this.getCatfishService().postRunnableToDbThread(new StickerDatabaseExecutor(iStickerClientInterface, StickerDatabaseAction.UPDATE_STICKER_STATUS, obtain));
                                    }
                                };
                                obtain.stickerStatus = StickerStatus.EXTRACTING;
                                StickerStorageManager.this.getCatfishService().postRunnableToDbThread(new StickerDatabaseExecutor(iStickerClientInterface, StickerDatabaseAction.UPDATE_STICKER_STATUS, obtain));
                                try {
                                    StickerStorageManager.this.putStickerBitmap(anonymousClass1, convertSVGToBitmap, name.substring(0, name.length() - 4), z, false);
                                } catch (Exception e4) {
                                    obtain.stickerStatus = StickerStatus.NOT_EXTRACTED;
                                    StickerStorageManager.this.getCatfishService().postRunnableToDbThread(new StickerDatabaseExecutor(iStickerClientInterface, StickerDatabaseAction.UPDATE_STICKER_STATUS, obtain));
                                }
                                hashMap.put(obtain.stickerId, new int[]{obtain.stickerBitmapWidth, obtain.stickerBitmapHeight});
                                Log.d(StickerStorageManager.TAG, "store sticker bitmap size = w = " + convertSVGToBitmap.getWidth() + " id = " + obtain.stickerId);
                                StickerStorageManager.this.getCatfishService().postRunnableToDbThread(new StickerDatabaseExecutor(iStickerClientInterface, StickerDatabaseAction.UPDATE_STICKER_SIZE, obtain));
                                byteArrayOutputStream.close();
                            }
                            zipInputStream.closeEntry();
                            nextEntry = zipInputStream.getNextEntry();
                        }
                    }
                    zipInputStream.close();
                } catch (IOException e222) {
                    Log.e(StickerStorageManager.TAG, "error = " + e222.getMessage());
                    obtain.stickerStatus = StickerStatus.NOT_EXTRACTED;
                    StickerStorageManager.this.getCatfishService().postRunnableToDbThread(new StickerDatabaseExecutor(iStickerClientInterface, StickerDatabaseAction.UPDATE_STICKER_STATUS, obtain));
                    e222.printStackTrace();
                } catch (JSONException e32) {
                    Log.e(StickerStorageManager.TAG, "error parsing json = " + e32.getMessage());
                    e32.printStackTrace();
                }
                if (iStickerClientInterface == null) {
                    return;
                }
                if (!(iStickerClientInterface instanceof DefaultStickerClientInterface)) {
                    StickerStorageManager.this.getStickerBitmap(obtain, iStickerClientInterface);
                } else if (((DefaultStickerClientInterface) iStickerClientInterface).isStickerIconRequested) {
                    StickerStorageManager.this.getStickerIconBitmap(obtain, iStickerClientInterface);
                } else {
                    StickerStorageManager.this.getStickerBitmap(obtain, iStickerClientInterface);
                }
            }

            public void onDataNotFound() {
                Log.d(StickerStorageManager.TAG, "store sticker onDataNotFound");
                StickerDownloadExecutor.setStickerDownloadFinish(obtain.stickerId);
                super.onDataNotFound();
            }

            public void onError(String str) {
                Log.d(StickerStorageManager.TAG, "store sticker onError");
                StickerDownloadExecutor.setStickerDownloadFinish(obtain.stickerId);
                super.onError(str);
            }
        });
    }

    public void extractStickerPackage(File file, IStickerPackageClientInterface iStickerPackageClientInterface) {
        try {
            extractStickerPackage(new FileInputStream(file), iStickerPackageClientInterface);
        } catch (Exception e) {
        }
    }

    public void extractStickerPackage(InputStream inputStream, IStickerPackageClientInterface iStickerPackageClientInterface) {
        StickerMessageObject obtain = StickerMessageObject.obtain();
        try {
            InputStream zipInputStream = new ZipInputStream(inputStream);
            ZipEntry nextEntry = zipInputStream.getNextEntry();
            while (nextEntry != null) {
                if (nextEntry.isDirectory()) {
                    zipInputStream.closeEntry();
                    nextEntry = zipInputStream.getNextEntry();
                } else {
                    String name = new File(nextEntry.getName()).getName();
                    Log.d(TAG, " data found in package zip = " + name);
                    if (name.compareTo("manifest") == 0) {
                        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(zipInputStream));
                        StringBuilder stringBuilder = new StringBuilder();
                        while (true) {
                            String readLine = bufferedReader.readLine();
                            if (readLine == null) {
                                break;
                            }
                            stringBuilder.append(readLine);
                        }
                        Log.d(TAG, "store sticker manifest " + stringBuilder);
                        JSONObject jSONObject = new JSONObject(stringBuilder.toString());
                        obtain.stickerPackageId = jSONObject.getString(CatfishRESTAPI.CFCOMPACT_STICKERPACKAGEID);
                        obtain.stickerPackageName = jSONObject.getString(CatfishRESTAPI.CFCOMPACT_STICKERPACKAGENAME);
                        obtain.stickerPackageDescription = jSONObject.getString(CatfishRESTAPI.CFCOMPACT_STICKERPACKAGEDESC);
                        obtain.stickerPackagePublisher = jSONObject.getString(CatfishRESTAPI.CFCOMPACT_STICKERPACKAGEPUBLISHER);
                        if (jSONObject.getString(CatfishRESTAPI.CFCOMPACT_STICKERPACKAGETYPE).compareTo("free") == 0) {
                            obtain.stickerPackageType = StickerPackageType.FREE.ordinal();
                        } else if (jSONObject.getString(CatfishRESTAPI.CFCOMPACT_STICKERPACKAGETYPE).compareTo("paid") == 0) {
                            obtain.stickerPackageType = StickerPackageType.PAID.ordinal();
                        } else if (jSONObject.getString(CatfishRESTAPI.CFCOMPACT_STICKERPACKAGETYPE).compareTo("builtin") == 0) {
                            obtain.stickerPackageType = StickerPackageType.BUILT_IN.ordinal();
                        }
                        obtain.stickerPackageVersion = jSONObject.getInt(CatfishRESTAPI.CFCOMPACT_STICKERPACKAGEVERSION);
                        obtain.stickerPackagePrice = jSONObject.getInt(CatfishRESTAPI.CFCOMPACT_STICKERPACKAGEPRICE);
                        obtain.stickerCount = jSONObject.getInt(CatfishRESTAPI.CFCOMPACT_STICKERCOUNT);
                        try {
                            JSONArray jSONArray = new JSONArray(jSONObject.getString(CatfishRESTAPI.CFCOMPACT_STICKERIDS));
                            obtain.stickerIds = new String[jSONArray.length()];
                            for (int i = 0; i < jSONArray.length(); i++) {
                                obtain.stickerIds[i] = jSONArray.getString(i);
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        } catch (IOException e2) {
                            Log.e(TAG, "Error Zip = " + e2.getMessage());
                            e2.printStackTrace();
                        }
                        getCatfishService().postRunnableToDbThread(new StickerDatabaseExecutor(null, StickerDatabaseAction.UPDATE_STICKER_PACKAGE, obtain));
                    } else if (name.endsWith("zip") || name.endsWith(StickerService.CATFIZ_STICKER_EXTENSION)) {
                        r0 = new byte[Utils.IO_BUFFER_SIZE];
                        while (true) {
                            r1 = zipInputStream.read(r0);
                            if (r1 == -1) {
                                break;
                            }
                            new WriteChunkNoCopyRunnable(name.substring(0, name.length() - 4), r0, r1).run();
                            r0 = new byte[Utils.IO_BUFFER_SIZE];
                        }
                        new WriteChunkNoCopyRunnable(name.substring(0, name.length() - 4), null).run();
                    } else if (name.endsWith("svg")) {
                        Log.d(TAG, " Sticker Package icon found, process ");
                        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                        r0 = new byte[Utils.IO_BUFFER_SIZE];
                        while (true) {
                            r1 = zipInputStream.read(r0);
                            if (r1 == -1) {
                                break;
                            }
                            byteArrayOutputStream.write(r0, 0, r1);
                        }
                        byteArrayOutputStream.flush();
                        Log.d(TAG, "store sticker bitmap size = " + byteArrayOutputStream.size());
                        putStickerBitmap(null, StickerSvgUtil.convertSVGToBitmap(getCatfishService(), byteArrayOutputStream.toByteArray(), (long) byteArrayOutputStream.size()), name.substring(0, name.length() - 4), true, false);
                        byteArrayOutputStream.close();
                        StickerMessageObject obtain2 = StickerMessageObject.obtain();
                        obtain2.stickerId = name.substring(0, name.length() - 4);
                        obtain2.stickerFrameCount = 0;
                        obtain2.stickerPackageId = name.substring(0, name.length() - 4);
                        obtain2.stickerType |= 16;
                        obtain2.stickerFrameDurationArrayStr = "[]";
                        obtain2.stickerFrameIndexArrayStr = "[]";
                        obtain2.stickerLoopCount = 0;
                        obtain2.stickerStatus = StickerStatus.READY;
                        obtain2.stickerPermanent = true;
                        obtain2.timestamp = System.currentTimeMillis();
                        getCatfishService().postRunnableToDbThread(new StickerDatabaseExecutor(null, StickerDatabaseAction.STORE_STICKER, obtain2));
                    }
                    zipInputStream.closeEntry();
                    nextEntry = zipInputStream.getNextEntry();
                }
            }
            zipInputStream.close();
        } catch (IOException e22) {
            Log.e(TAG, "Error Zip = " + e22.getMessage());
            e22.printStackTrace();
        } catch (JSONException e3) {
            Log.e(TAG, "Error = " + e3.getMessage());
            e3.printStackTrace();
        }
        getCatfishService().postToDBHandler(new ExtractStickerRunnable(obtain.stickerIds, obtain.stickerPackageId, null, true, 0));
        if (iStickerPackageClientInterface != null) {
            getCatfishService().postToMainHandler(new StickerDatabaseResponse(iStickerPackageClientInterface, obtain, StickerDatabaseAction.GET_ALL_PACKAGE));
        }
    }

    public void findAndExtractSticker(InputStream inputStream, StickerMessageObject stickerMessageObject, IStickerClientInterface iStickerClientInterface) {
        Log.d(TAG, "findAndExtractSticker");
        try {
            ZipInputStream zipInputStream = new ZipInputStream(inputStream);
            ZipEntry nextEntry = zipInputStream.getNextEntry();
            while (nextEntry != null) {
                if (nextEntry.isDirectory()) {
                    zipInputStream.closeEntry();
                    nextEntry = zipInputStream.getNextEntry();
                } else {
                    String name = new File(nextEntry.getName()).getName();
                    Log.d(TAG, " data found in package zip = " + name);
                    byte[] bArr;
                    int read;
                    if (name.compareTo(stickerMessageObject.stickerId + ".zip") == 0 || name.compareTo(stickerMessageObject.stickerId + StickerService.CATFIZ_STICKER_EXTENSION) == 0) {
                        bArr = new byte[Utils.IO_BUFFER_SIZE];
                        while (true) {
                            read = zipInputStream.read(bArr);
                            if (read == -1) {
                                break;
                            }
                            new WriteChunkNoCopyRunnable(name.substring(0, name.length() - 4), bArr, read).run();
                            bArr = new byte[Utils.IO_BUFFER_SIZE];
                        }
                        new WriteChunkNoCopyRunnable(name.substring(0, name.length() - 4), null).run();
                    } else if (name.compareTo(stickerMessageObject.stickerId + ".svg") == 0) {
                        Log.d(TAG, " Sticker Package icon found, process ");
                        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                        bArr = new byte[Utils.IO_BUFFER_SIZE];
                        while (true) {
                            read = zipInputStream.read(bArr);
                            if (read == -1) {
                                break;
                            }
                            byteArrayOutputStream.write(bArr, 0, read);
                        }
                        byteArrayOutputStream.flush();
                        Log.d(TAG, "store sticker bitmap size = " + byteArrayOutputStream.size());
                        putStickerBitmap(null, StickerSvgUtil.convertSVGToBitmap(getCatfishService(), byteArrayOutputStream.toByteArray(), (long) byteArrayOutputStream.size()), name.substring(0, name.length() - 4), true, false);
                        byteArrayOutputStream.close();
                        stickerMessageObject.stickerFrameCount = 0;
                        stickerMessageObject.stickerPackageId = stickerMessageObject.stickerId;
                        stickerMessageObject.stickerType |= 16;
                        stickerMessageObject.stickerFrameDurationArrayStr = "[]";
                        stickerMessageObject.stickerFrameIndexArrayStr = "[]";
                        stickerMessageObject.stickerPermanent = true;
                        stickerMessageObject.timestamp = System.currentTimeMillis();
                        getCatfishService().postRunnableToDbThread(new StickerDatabaseExecutor(null, StickerDatabaseAction.STORE_STICKER, stickerMessageObject));
                    }
                    zipInputStream.closeEntry();
                    nextEntry = zipInputStream.getNextEntry();
                }
            }
            zipInputStream.close();
        } catch (IOException e) {
            Log.e(TAG, "Error Zip = " + e.getMessage());
            e.printStackTrace();
        }
        getCatfishService().postToDBHandler(new ExtractStickerRunnable(stickerMessageObject.stickerId, iStickerClientInterface, true, -1));
    }

    protected CatfishService getCatfishService() {
        return CatfishService.getServiceInstance();
    }

    public void getStickerBitmap(final StickerMessageObject stickerMessageObject, final IStickerClientInterface iStickerClientInterface) {
        Log.d(TAG, "-- getStickerBitmap --");
        try {
            if (mGetStickerBitmapClientList.containsKey(stickerMessageObject.stickerId)) {
                Log.d(TAG, "mGetStickerBitmapClientList contains key=" + stickerMessageObject.stickerId);
                ((List) mGetStickerBitmapClientList.get(stickerMessageObject.stickerId)).add(iStickerClientInterface);
                return;
            }
            mGetStickerBitmapClientList.put(stickerMessageObject.stickerId, new ArrayList());
            ILocalStorageInterface anonymousClass1 = new LocalStorageInterface() {
                public boolean isProcessCanceled() {
                    return StickerStorageManager.this.isTaskCanceled(iStickerClientInterface);
                }

                public void onBitmapReady(Bitmap bitmap) {
                    Log.d(StickerStorageManager.TAG, "localStorageInterface: onBitmapReady");
                    if (StickerStorageManager.this.isTaskCanceled(iStickerClientInterface)) {
                        Log.d(StickerStorageManager.TAG, "Task is canceled: DROP BITMAP");
                        bitmap.recycle();
                        if (StickerStorageManager.mGetStickerBitmapClientList.containsKey(stickerMessageObject.stickerId)) {
                            StickerStorageManager.mGetStickerBitmapClientList.remove(stickerMessageObject.stickerId);
                            return;
                        }
                        return;
                    }
                    if ((stickerMessageObject.stickerType & 8) <= 0 || (stickerMessageObject.stickerType & 32) != 0) {
                        if (!StickerStorageManager.this.isTaskCanceled(iStickerClientInterface)) {
                            StickerStorageManager.this.getCatfishService().postToMainHandler(new StickerDatabaseResponse(iStickerClientInterface, stickerMessageObject, bitmap, StickerDatabaseAction.GET_STICKER, StickerDatabaseResponseStatus.SUCCESS, 0, null));
                        }
                        if (StickerStorageManager.mGetStickerBitmapClientList.containsKey(stickerMessageObject.stickerId)) {
                            for (IStickerClientInterface iStickerClientInterface : (List) StickerStorageManager.mGetStickerBitmapClientList.get(stickerMessageObject.stickerId)) {
                                if (StickerStorageManager.this.isTaskCanceled(iStickerClientInterface)) {
                                    Log.d(StickerStorageManager.TAG, "Client is not valid anymore. Silentlty ignored");
                                } else {
                                    StickerStorageManager.this.getCatfishService().postToMainHandler(new StickerDatabaseResponse(iStickerClientInterface, stickerMessageObject, bitmap, StickerDatabaseAction.GET_STICKER, StickerDatabaseResponseStatus.SUCCESS, 0, null));
                                }
                            }
                            StickerStorageManager.mGetStickerBitmapClientList.remove(stickerMessageObject.stickerId);
                        }
                    } else {
                        StickerStorageManager.this.mStickerBitmaps[StickerStorageManager.this.mFrameIndex] = bitmap;
                        StickerStorageManager stickerStorageManager = StickerStorageManager.this;
                        stickerStorageManager.mFrameIndex++;
                        if (StickerStorageManager.this.mFrameIndex < stickerMessageObject.stickerFrameCount) {
                            LocalStorageWorker.postRunnable(new GetDataBitmapRunnable(this, stickerMessageObject.stickerId + String.valueOf(StickerStorageManager.this.mFrameIndex + 1)));
                        } else {
                            int i;
                            AnimationDrawable stickerAnimationDrawable = new StickerAnimationDrawable(stickerMessageObject.stickerId, null, stickerMessageObject, false);
                            if (stickerMessageObject.stickerLoopCount > 0) {
                                stickerAnimationDrawable.setLoopNumber(stickerMessageObject.stickerLoopCount);
                            } else {
                                stickerAnimationDrawable.setLoopNumber(3);
                            }
                            Drawable[] drawableArr = new Drawable[StickerStorageManager.this.mStickerBitmaps.length];
                            for (i = 0; i < StickerStorageManager.this.mStickerBitmaps.length; i++) {
                                drawableArr[i] = new BitmapDrawable(StickerStorageManager.this.getCatfishService().getResources(), StickerStorageManager.this.mStickerBitmaps[i]);
                            }
                            int[] iArr = stickerMessageObject.stickerFrameIndex;
                            if (iArr != null) {
                                for (i = 0; i < iArr.length; i++) {
                                    int i2 = iArr[i];
                                    if (i2 < drawableArr.length) {
                                        stickerAnimationDrawable.addFrame(drawableArr[i2], stickerMessageObject.stickerFrameDuration[i]);
                                    }
                                }
                            }
                            stickerAnimationDrawable.addFrame(drawableArr[0], 1);
                            StickerStorageManager.this.getCatfishService().postToMainHandler(new StickerDatabaseResponse(iStickerClientInterface, stickerMessageObject, StickerStorageManager.this.mStickerBitmaps, stickerAnimationDrawable, StickerDatabaseAction.GET_STICKER, StickerDatabaseResponseStatus.SUCCESS));
                            if (StickerStorageManager.mGetStickerBitmapClientList.containsKey(stickerMessageObject.stickerId)) {
                                for (IStickerClientInterface iStickerClientInterface2 : (List) StickerStorageManager.mGetStickerBitmapClientList.get(stickerMessageObject.stickerId)) {
                                    if (StickerStorageManager.this.isTaskCanceled(iStickerClientInterface2)) {
                                        Log.d(StickerStorageManager.TAG, "Client is not valid anymore. Silentlty ignored");
                                    } else {
                                        StickerStorageManager.this.getCatfishService().postToMainHandler(new StickerDatabaseResponse(iStickerClientInterface2, stickerMessageObject, StickerStorageManager.this.mStickerBitmaps, stickerAnimationDrawable, StickerDatabaseAction.GET_STICKER, StickerDatabaseResponseStatus.SUCCESS));
                                    }
                                }
                                StickerStorageManager.mGetStickerBitmapClientList.remove(stickerMessageObject.stickerId);
                            }
                        }
                    }
                    Intent intent = new Intent(BroadcastIntents.ACTION_STICKER_INSTALL_STATUS);
                    intent.putExtra("isLoading", false);
                    LocalBroadcastManager.getInstance(StickerStorageManager.this.getCatfishService()).sendBroadcast(intent);
                }

                public void onBufferStreamReady(byte[] bArr) {
                }

                public void onDataNotFound() {
                    if (StickerStorageManager.mGetStickerBitmapClientList.containsKey(stickerMessageObject.stickerId)) {
                        StickerStorageManager.mGetStickerBitmapClientList.remove(stickerMessageObject.stickerId);
                    }
                    Log.d(StickerStorageManager.TAG, " getStickerBitmap onDataNotFound");
                    StickerStorageManager.this.getCatfishService().postToMainHandler(new StickerDatabaseResponse(iStickerClientInterface, stickerMessageObject, (Bitmap) null, StickerDatabaseAction.GET_STICKER, StickerDatabaseResponseStatus.WAITING_DOWNLOAD, 0, ""));
                    if (stickerMessageObject.stickerPackageType == StickerPackageType.FREE.ordinal() || stickerMessageObject.stickerPackageType == StickerPackageType.PAID.ordinal()) {
                        CatfishService catfishService = StickerStorageManager.this.getCatfishService();
                        IStickerClientInterface iStickerClientInterface = iStickerClientInterface;
                        CatfishService catfishService2 = StickerStorageManager.this.getCatfishService();
                        StickerStorageManager.this.getCatfishService();
                        catfishService.postToServiceHandler(new StickerService(iStickerClientInterface, catfishService2, CatfishService.getCurrentServerHost(), StickerStorageManager.this.getCatfishService(), stickerMessageObject, StickerServiceAction.DOWNLOAD_STICKER), 2);
                    } else if (stickerMessageObject.stickerStatus == StickerStatus.NOT_EXTRACTED) {
                        Log.d(StickerStorageManager.TAG, "Sticker NOT FOUND: NOT EXTRACTED: EXTRACT!!!");
                        StickerStorageManager.this.getCatfishService().postToDBHandler(new StickerDatabaseExecutor(iStickerClientInterface, StickerDatabaseAction.EXTRACT_ONE_STICKER, stickerMessageObject));
                    }
                }

                public void onError(String str) {
                    Log.d(StickerStorageManager.TAG, "localStorageInterface: onError=" + str);
                    if (StickerStorageManager.mGetStickerBitmapClientList.containsKey(stickerMessageObject.stickerId)) {
                        StickerStorageManager.mGetStickerBitmapClientList.remove(stickerMessageObject.stickerId);
                    }
                    if (stickerMessageObject.stickerPackageType == StickerPackageType.BUILT_IN.ordinal() && stickerMessageObject.stickerStatus == StickerStatus.NOT_EXTRACTED) {
                        Log.d(StickerStorageManager.TAG, "We have sticker error and its not extracted. EXTRACT!!!");
                        StickerStorageManager.this.getCatfishService().postToDBHandler(new StickerDatabaseExecutor(iStickerClientInterface, StickerDatabaseAction.EXTRACT_ONE_STICKER, stickerMessageObject));
                        return;
                    }
                    Log.d(StickerStorageManager.TAG, "Notify UI that sticker has error");
                    if (!StickerStorageManager.this.isTaskCanceled(iStickerClientInterface)) {
                        StickerStorageManager.this.getCatfishService().postToMainHandler(new StickerDatabaseResponse(iStickerClientInterface, stickerMessageObject, (Bitmap) null, StickerDatabaseAction.GET_STICKER, StickerDatabaseResponseStatus.ERROR, 100, ""));
                    }
                }

                public void onFileReady(File file) {
                }

                public void onInputStreamReady(CatfizStorageInputStream catfizStorageInputStream) {
                }
            };
            if (isTaskCanceled(iStickerClientInterface)) {
                if (mGetStickerBitmapClientList.containsKey(stickerMessageObject.stickerId)) {
                    mGetStickerBitmapClientList.remove(stickerMessageObject.stickerId);
                }
            } else if ((stickerMessageObject.stickerType & 8) > 0) {
                this.mStickerBitmaps = new Bitmap[stickerMessageObject.stickerFrameCount];
                this.mFrameIndex = 0;
                String str = stickerMessageObject.stickerId + String.valueOf(this.mFrameIndex + 1);
                Log.d(TAG, "process multi bitmap id " + str);
                LocalStorageWorker.postRunnable(new GetDataBitmapRunnable(anonymousClass1, str));
            } else {
                Log.d(TAG, "process single bitmap id = " + stickerMessageObject.stickerId);
                LocalStorageWorker.postRunnable(new GetDataBitmapRunnable(anonymousClass1, stickerMessageObject.stickerId));
            }
        } catch (Exception e) {
        }
    }

    public void getStickerBufferStream(StickerMessageObject stickerMessageObject, ILocalStorageInterface iLocalStorageInterface) {
        LocalStorageWorker.postRunnable(new GetBufferStreamRunnable(iLocalStorageInterface, stickerMessageObject.stickerId));
    }

    public void getStickerIconBitmap(final StickerMessageObject stickerMessageObject, final IStickerClientInterface iStickerClientInterface) {
        ILocalStorageInterface anonymousClass2 = new LocalStorageInterface() {
            public boolean isProcessCanceled() {
                return StickerStorageManager.this.isTaskCanceled(iStickerClientInterface);
            }

            public void onBitmapReady(Bitmap bitmap) {
                Log.d(StickerStorageManager.TAG, " getStickerIconBitmap onBitmapReady " + stickerMessageObject.stickerPackageType + " id " + stickerMessageObject.stickerId);
                StickerStorageManager.this.getCatfishService().postToMainHandler(new StickerDatabaseResponse(iStickerClientInterface, stickerMessageObject, bitmap, StickerDatabaseAction.GET_STICKER_ICON, StickerDatabaseResponseStatus.SUCCESS, 0, null));
                Intent intent = new Intent(BroadcastIntents.ACTION_STICKER_INSTALL_STATUS);
                intent.putExtra("isLoading", false);
                LocalBroadcastManager.getInstance(StickerStorageManager.this.getCatfishService()).sendBroadcast(intent);
            }

            public void onBufferStreamReady(byte[] bArr) {
            }

            public void onDataNotFound() {
                if ((stickerMessageObject.stickerType & 8) <= 0 || StickerStorageManager.this.mDataId.compareTo(stickerMessageObject.stickerId + String.valueOf(0)) != 0) {
                    Log.d(StickerStorageManager.TAG, " getStickerIconBitmap onDataNotFound " + stickerMessageObject.stickerPackageType + " id " + stickerMessageObject.stickerId);
                    if (stickerMessageObject.stickerPackageType == StickerPackageType.BUILT_IN.ordinal()) {
                        StickerStorageManager.this.getCatfishService().postToDBHandler(new StickerDatabaseExecutor(iStickerClientInterface, StickerDatabaseAction.EXTRACT_ONE_STICKER, stickerMessageObject));
                        return;
                    } else {
                        StickerStorageManager.this.getCatfishService().postToMainHandler(new StickerDatabaseResponse(iStickerClientInterface, stickerMessageObject, (Bitmap) null, StickerDatabaseAction.GET_STICKER_ICON, StickerDatabaseResponseStatus.ERROR, 100, ""));
                        return;
                    }
                }
                StickerStorageManager.this.mDataId = stickerMessageObject.stickerId + String.valueOf(1);
                LocalStorageWorker.postRunnable(new GetDataBitmapRunnable(this, StickerStorageManager.this.mDataId + "_thumb"));
            }

            public void onError(String str) {
                Log.d(StickerStorageManager.TAG, " getStickerIconBitmap onError " + stickerMessageObject.stickerPackageType + " id " + stickerMessageObject.stickerId);
                if ((stickerMessageObject.stickerType & 8) > 0 && StickerStorageManager.this.mDataId.compareTo(stickerMessageObject.stickerId + String.valueOf(0)) == 0) {
                    StickerStorageManager.this.mDataId = stickerMessageObject.stickerId + String.valueOf(1);
                    LocalStorageWorker.postRunnable(new GetDataBitmapRunnable(this, StickerStorageManager.this.mDataId + "_thumb"));
                } else if (stickerMessageObject.stickerPackageType == StickerPackageType.BUILT_IN.ordinal()) {
                    StickerStorageManager.this.getCatfishService().postToDBHandler(new StickerDatabaseExecutor(iStickerClientInterface, StickerDatabaseAction.EXTRACT_ONE_STICKER, stickerMessageObject));
                } else {
                    StickerStorageManager.this.getCatfishService().postToMainHandler(new StickerDatabaseResponse(iStickerClientInterface, stickerMessageObject, (Bitmap) null, StickerDatabaseAction.GET_STICKER_ICON, StickerDatabaseResponseStatus.ERROR, 100, ""));
                }
            }

            public void onFileReady(File file) {
            }

            public void onInputStreamReady(CatfizStorageInputStream catfizStorageInputStream) {
            }
        };
        if ((stickerMessageObject.stickerType & 8) > 0) {
            this.mDataId = stickerMessageObject.stickerId + String.valueOf(0);
            LocalStorageWorker.postRunnable(new GetDataBitmapRunnable(anonymousClass2, this.mDataId + "_thumb"));
            return;
        }
        LocalStorageWorker.postRunnable(new GetDataBitmapRunnable(anonymousClass2, stickerMessageObject.stickerId + "_thumb"));
    }

    public void putStickerBitmap(ILocalStorageInterface iLocalStorageInterface, Bitmap bitmap, String str, boolean z, boolean z2) {
        Log.d(TAG, " putStickerBitmap data key = " + str);
        OutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        bitmap.compress(CompressFormat.PNG, 100, byteArrayOutputStream);
        byte[] bArr = new byte[Utils.IO_BUFFER_SIZE];
        InputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());
        while (true) {
            int read = byteArrayInputStream.read(bArr);
            if (read == -1) {
                break;
            }
            new WriteChunkNoCopyRunnable(str, bArr, read).run();
            bArr = new byte[Utils.IO_BUFFER_SIZE];
        }
        new WriteChunkNoCopyRunnable(iLocalStorageInterface, str, null).run();
        byteArrayInputStream.close();
        byteArrayOutputStream.close();
        if (z) {
            Bitmap createScaledBitmap = Bitmap.createScaledBitmap(bitmap, (int) (((float) bitmap.getWidth()) * StickerSvgUtil.SVGBITMAP_THUMB_SCALE), (int) (((float) bitmap.getHeight()) * StickerSvgUtil.SVGBITMAP_THUMB_SCALE), true);
            OutputStream byteArrayOutputStream2 = new ByteArrayOutputStream();
            createScaledBitmap.compress(CompressFormat.PNG, 100, byteArrayOutputStream2);
            InputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArrayOutputStream2.toByteArray());
            bArr = new byte[Utils.IO_BUFFER_SIZE];
            while (true) {
                int read2 = byteArrayInputStream2.read(bArr);
                if (read2 != -1) {
                    new WriteChunkNoCopyRunnable(str + "_thumb", bArr, read2).run();
                    bArr = new byte[Utils.IO_BUFFER_SIZE];
                } else {
                    new WriteChunkNoCopyRunnable(str + "_thumb", null).run();
                    byteArrayInputStream2.close();
                    byteArrayOutputStream2.close();
                    createScaledBitmap.recycle();
                    return;
                }
            }
        }
    }
}
