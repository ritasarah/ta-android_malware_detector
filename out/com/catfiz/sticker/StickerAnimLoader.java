package com.catfiz.sticker;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.widget.ImageView;
import com.catfiz.R;
import com.catfiz.service.ICatfishUIBinder;
import com.catfiz.sticker.StickerService.StickerPackageType;
import com.catfiz.sticker.StickerService.StickerStatus;
import com.catfiz.util.AnimationDrawable;
import com.catfiz.util.ImageCache;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.lang.ref.WeakReference;
import org.apache.http.conn.routing.HttpRouteDirector;

public class StickerAnimLoader {
    public static final int DEFAULT_ANIMATION_LOOP = 3;
    public static final int FADE_IN_TIME = 300;
    private static final String STATUS_ICON_FIRSTNAME = "status";
    private static final String TAG = "StickerAnimLoader";
    protected Context mContext;
    private Bitmap mErrorLoadingBitmap;
    private boolean mExitTasksEarly = false;
    private Bitmap mExtractLoadingBitmap;
    private int mFadeInTime = FADE_IN_TIME;
    private ImageCache mImageCache = null;
    private StickerMetaCache mMetaCache = null;
    protected Resources mResources;
    private ICatfishUIBinder mService = null;
    private Bitmap mWaitLoadingBitmap;

    /* synthetic */ class AnonymousClass1 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$sticker$StickerService$StickerPackageType = new int[StickerPackageType.values().length];
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$sticker$StickerService$StickerStatus = new int[StickerStatus.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$sticker$StickerService$StickerPackageType[StickerPackageType.FREE.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerService$StickerPackageType[StickerPackageType.BUILT_IN.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerService$StickerPackageType[StickerPackageType.PAID.ordinal()] = StickerAnimLoader.DEFAULT_ANIMATION_LOOP;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerService$StickerStatus[StickerStatus.READY.ordinal()] = 1;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerService$StickerStatus[StickerStatus.DOWNLOADING.ordinal()] = 2;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerService$StickerStatus[StickerStatus.EXTRACTING.ordinal()] = StickerAnimLoader.DEFAULT_ANIMATION_LOOP;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerService$StickerStatus[StickerStatus.ERROR.ordinal()] = 4;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerService$StickerStatus[StickerStatus.NOT_EXTRACTED.ordinal()] = 5;
            } catch (NoSuchFieldError e8) {
            }
        }
    }

    class AsyncAnimStickerDrawable extends BitmapDrawable implements IStickerInfoProvider {
        private final StickerMessageObject mMeta;
        private final WeakReference stickerTaskReference;

        public AsyncAnimStickerDrawable(Resources resources, StickerMessageObject stickerMessageObject, Bitmap bitmap, StickerTask stickerTask) {
            super(resources, bitmap);
            this.mMeta = stickerMessageObject;
            this.stickerTaskReference = new WeakReference(stickerTask);
        }

        public Drawable getFirstFrame() {
            return this;
        }

        public int getNumberOfFrames() {
            return this.mMeta == null ? 1 : this.mMeta.stickerFrameCount;
        }

        public String getProviderID() {
            return String.valueOf(StickerAnimLoader.TAG);
        }

        public String getStickerID() {
            return this.mMeta == null ? null : this.mMeta.stickerId;
        }

        public String getStickerPackageDescription() {
            return this.mMeta == null ? "Unknown" : this.mMeta.stickerPackageDescription;
        }

        public String getStickerPackageID() {
            return this.mMeta == null ? "Unknown" : this.mMeta.stickerPackageId;
        }

        public String getStickerPackageName() {
            return this.mMeta == null ? "Unknown" : this.mMeta.stickerPackageName;
        }

        public String getStickerPackagePriceInfo() {
            if (this.mMeta == null) {
                return "Unknown";
            }
            switch (AnonymousClass1.$SwitchMap$com$catfiz$sticker$StickerService$StickerPackageType[StickerPackageType.values()[this.mMeta.stickerPackagePrice].ordinal()]) {
                case e.b /*1*/:
                    return "Free";
                case e.c /*2*/:
                    return "Builtin Free";
                case StickerAnimLoader.DEFAULT_ANIMATION_LOOP /*3*/:
                    return "Paid";
                default:
                    return "Unknown";
            }
        }

        public String getStickerPackagePublisher() {
            return this.mMeta == null ? "Unknown" : this.mMeta.stickerPackagePublisher;
        }

        public StickerTask getStickerTask() {
            return (StickerTask) this.stickerTaskReference.get();
        }

        public boolean isAnimationAvailable() {
            return (this.mMeta == null || this.mMeta.stickerId == null || this.mMeta.stickerFrameCount <= 1) ? false : true;
        }
    }

    public class StickerTask implements IStickerClientInterface, IStickerExitTaskEarly {
        private final WeakReference imageViewReference;
        private boolean mCanceled = false;
        public boolean mPlay = true;
        private final String stickerID;

        public StickerTask(ImageView imageView, String str, boolean z) {
            this.imageViewReference = new WeakReference(imageView);
            this.stickerID = str;
            this.mPlay = z;
        }

        public void cancel(boolean z) {
            this.mCanceled = z;
        }

        public String getStickerID() {
            return this.stickerID;
        }

        public boolean isCanceled() {
            return this.mCanceled;
        }

        public boolean isExitTaskEarly() {
            return StickerAnimLoader.this.mExitTasksEarly;
        }

        public void onStickerError(int i, String str, StickerMessageObject stickerMessageObject) {
            Log.d(StickerAnimLoader.TAG, "onStickerError: PLEASE READ TODOLIST :))");
            Log.d(StickerAnimLoader.TAG, " Sticker error with message:" + str);
            if (i == 100) {
                if (StickerAnimLoader.this.mImageCache != null) {
                    StickerAnimLoader.this.mImageCache.clearCaches();
                }
                if (StickerAnimLoader.this.mMetaCache != null) {
                    StickerAnimLoader.this.mMetaCache.clearCaches();
                }
            }
            ImageView imageView = (ImageView) this.imageViewReference.get();
            if (imageView != null) {
                StickerAnimLoader.this.setImageBitmap(imageView, null, stickerMessageObject);
            }
        }

        public void onStickerIconReady(Bitmap bitmap, StickerMessageObject stickerMessageObject) {
            Log.d(StickerAnimLoader.TAG, "onStickerIconReady");
        }

        public void onStickerReady(Bitmap bitmap, StickerMessageObject stickerMessageObject) {
            if (stickerMessageObject == null) {
                Log.e(StickerAnimLoader.TAG, "Invalid metadata");
                return;
            }
            Log.d(StickerAnimLoader.TAG, "onStickerReady(FIRST FRAME): Receive stickerBitmap, meta");
            if (StickerAnimLoader.this.mMetaCache != null) {
                StickerAnimLoader.this.mMetaCache.putMetadata(this.stickerID, stickerMessageObject);
            }
            if (!(bitmap == null || StickerAnimLoader.this.mImageCache == null)) {
                Bitmap bitmapFromMemCache = StickerAnimLoader.this.mImageCache.getBitmapFromMemCache(this.stickerID + 1);
                if (bitmapFromMemCache == null) {
                    Log.d(StickerAnimLoader.TAG, "onStickerReady: Put Bitmap in Cache: ID= " + this.stickerID + 1);
                    StickerAnimLoader.this.mImageCache.addBitmapToCache(this.stickerID + 1, bitmap);
                } else {
                    Log.d(StickerAnimLoader.TAG, "onStickerReady: Bitmap already in Cache: ID= " + this.stickerID + 1);
                    if (bitmap != bitmapFromMemCache) {
                        bitmap.recycle();
                        bitmap = bitmapFromMemCache;
                    }
                }
            }
            ImageView imageView = (ImageView) this.imageViewReference.get();
            if (imageView != null && bitmap != null && !this.mCanceled) {
                Log.d(StickerAnimLoader.TAG, "*** STICKER NAME: " + stickerMessageObject.stickerName);
                Drawable asyncAnimStickerDrawable = new AsyncAnimStickerDrawable(StickerAnimLoader.this.mContext.getResources(), stickerMessageObject, bitmap, null);
                if (Utils.hasJellyBean()) {
                    imageView.setBackground(null);
                } else {
                    imageView.setBackgroundDrawable(null);
                }
                imageView.setImageDrawable(asyncAnimStickerDrawable);
            } else if (imageView != null && !this.mCanceled) {
                StickerAnimLoader.this.setImageBitmap(imageView, null, stickerMessageObject);
            }
        }

        public void onStickerReady(Bitmap[] bitmapArr, AnimationDrawable animationDrawable, StickerMessageObject stickerMessageObject) {
            Log.d(StickerAnimLoader.TAG, "onStickerReady: Receive stickerBitmap, animationDrawable, meta");
            if (!(stickerMessageObject == null || StickerAnimLoader.this.mMetaCache == null)) {
                StickerAnimLoader.this.mMetaCache.putMetadata(this.stickerID, stickerMessageObject);
            }
            if (bitmapArr != null) {
                Log.d(StickerAnimLoader.TAG, "onStickerReady: has bitmap");
                ImageView imageView = (ImageView) this.imageViewReference.get();
                if (imageView == null || this.mCanceled) {
                    Log.e(StickerAnimLoader.TAG, "onStickerReady: ImageView is not valid OR CANCELED");
                    return;
                } else if (animationDrawable != null) {
                    Log.d(StickerAnimLoader.TAG, "onStickerReady: Has animationDrawable: set to imageview");
                    imageView.setImageDrawable(null);
                    if (Utils.hasJellyBean()) {
                        imageView.setBackground(animationDrawable);
                    } else {
                        imageView.setBackgroundDrawable(animationDrawable);
                    }
                    if (this.mPlay) {
                        animationDrawable.start();
                        return;
                    }
                    return;
                } else {
                    Log.d(StickerAnimLoader.TAG, "onStickerReady: animationDrawable is NULL: check meta status sticker");
                    if (stickerMessageObject.stickerStatus != StickerStatus.READY) {
                        Log.d(StickerAnimLoader.TAG, "onStickerReady: animationDrawable is NULL: show status sticker");
                        StickerAnimLoader.this.setImageBitmap(imageView, null, stickerMessageObject);
                        return;
                    }
                    Log.d(StickerAnimLoader.TAG, "onStickerReady: animationDrawable is NULL: create animation drawable here");
                    StickerAnimLoader.this.attachFramesToView(imageView, this.stickerID, stickerMessageObject, bitmapArr, this.mPlay);
                    return;
                }
            }
            Log.d(StickerAnimLoader.TAG, "onStickerReady: has bitmap");
            ImageView imageView2 = (ImageView) this.imageViewReference.get();
            if (imageView2 != null && !this.mCanceled) {
                StickerAnimLoader.this.setImageBitmap(imageView2, null, stickerMessageObject);
            }
        }

        public void onStickerWaitingForDownload(int i, StickerMessageObject stickerMessageObject) {
            Log.d(StickerAnimLoader.TAG, "onStickerWaitingForDownload");
            ImageView imageView = (ImageView) this.imageViewReference.get();
            if (imageView != null) {
                StickerAnimLoader.this.setImageBitmap(imageView, null, stickerMessageObject);
            }
        }
    }

    public StickerAnimLoader(Context context) {
        this.mContext = context;
        this.mResources = context.getResources();
        setLoadingImage(R.drawable.waiting_chat, R.drawable.extract_download_chat, R.drawable.error_chat);
    }

    private void attachFramesToView(ImageView imageView, String str, StickerMessageObject stickerMessageObject, Bitmap[] bitmapArr, boolean z) {
        if (imageView != null && stickerMessageObject != null && bitmapArr != null) {
            if (stickerMessageObject.stickerFrameDuration == null || stickerMessageObject.stickerFrameIndex == null) {
                imageView.setImageBitmap(bitmapArr[0]);
            } else if (stickerMessageObject.stickerFrameDuration.length != stickerMessageObject.stickerFrameIndex.length) {
                imageView.setImageBitmap(bitmapArr[0]);
            } else {
                int i;
                Drawable stickerAnimationDrawable = new StickerAnimationDrawable(str, null, stickerMessageObject, false);
                if (stickerMessageObject.stickerLoopCount > 0) {
                    stickerAnimationDrawable.setLoopNumber(stickerMessageObject.stickerLoopCount);
                } else {
                    stickerAnimationDrawable.setLoopNumber(DEFAULT_ANIMATION_LOOP);
                }
                Drawable[] drawableArr = new Drawable[bitmapArr.length];
                for (i = 0; i < bitmapArr.length; i++) {
                    drawableArr[i] = new BitmapDrawable(this.mContext.getResources(), bitmapArr[i]);
                }
                int[] iArr = stickerMessageObject.stickerFrameIndex;
                i = 0;
                while (i < iArr.length) {
                    int i2 = iArr[i];
                    if (i2 < drawableArr.length) {
                        stickerAnimationDrawable.addFrame(drawableArr[i2], stickerMessageObject.stickerFrameDuration[i]);
                        i++;
                    } else {
                        imageView.setImageBitmap(bitmapArr[0]);
                        return;
                    }
                }
                stickerAnimationDrawable.addFrame(drawableArr[0], 1);
                imageView.setImageDrawable(null);
                if (Utils.hasJellyBean()) {
                    imageView.setBackground(stickerAnimationDrawable);
                } else {
                    imageView.setBackgroundDrawable(stickerAnimationDrawable);
                }
                if (z) {
                    stickerAnimationDrawable.start();
                }
            }
        }
    }

    public static boolean cancelPotentialWork(String str, ImageView imageView) {
        StickerTask stickerTask = getStickerTask(imageView);
        AnimationDrawable animationDrawable = getAnimationDrawable(imageView);
        if (stickerTask != null) {
            String stickerID = stickerTask.getStickerID();
            if (stickerID != null && stickerID.equals(str)) {
                return false;
            }
            stickerTask.cancel(true);
        } else if (animationDrawable != null && animationDrawable.getCode().equals(str)) {
            return false;
        }
        return true;
    }

    private static AnimationDrawable getAnimationDrawable(ImageView imageView) {
        if (imageView != null) {
            Drawable background = imageView.getBackground();
            if (background instanceof AnimationDrawable) {
                return (AnimationDrawable) background;
            }
        }
        return null;
    }

    public static IStickerInfoProvider getStickerProviderInfo(ImageView imageView) {
        if (imageView != null) {
            if (imageView.getBackground() instanceof IStickerInfoProvider) {
                return (IStickerInfoProvider) imageView.getBackground();
            }
            if (imageView.getDrawable() instanceof IStickerInfoProvider) {
                return (IStickerInfoProvider) imageView.getDrawable();
            }
        }
        return null;
    }

    private static StickerTask getStickerTask(ImageView imageView) {
        if (imageView != null) {
            Drawable drawable = imageView.getDrawable();
            if (drawable instanceof AsyncAnimStickerDrawable) {
                return ((AsyncAnimStickerDrawable) drawable).getStickerTask();
            }
        }
        return null;
    }

    private void setImageBitmap(ImageView imageView, Bitmap[] bitmapArr, StickerMessageObject stickerMessageObject) {
        if (stickerMessageObject == null) {
            attachStateIconToBackgroundView(this.mWaitLoadingBitmap, imageView);
            return;
        }
        switch (AnonymousClass1.$SwitchMap$com$catfiz$sticker$StickerService$StickerStatus[stickerMessageObject.stickerStatus.ordinal()]) {
            case e.b /*1*/:
                Log.e(TAG, "UNHANDLED: Sticker Status READY but bitmap returned null");
                attachStateIconToBackgroundView(this.mWaitLoadingBitmap, imageView);
                return;
            case e.c /*2*/:
                Log.d(TAG, "Sticker Status DOWNLOADING show loading sticker");
                attachStateIconToBackgroundView(this.mExtractLoadingBitmap, imageView);
                return;
            case DEFAULT_ANIMATION_LOOP /*3*/:
                Log.d(TAG, "Sticker Status EXTRACTING show loading sticker");
                attachStateIconToBackgroundView(this.mExtractLoadingBitmap, imageView);
                return;
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                Log.d(TAG, "Sticker Status ERROR show loading sticker");
                attachStateIconToBackgroundView(this.mErrorLoadingBitmap, imageView);
                return;
            case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                Log.d(TAG, "Sticker Status NOT_EXTRACTED show loading sticker");
                attachStateIconToBackgroundView(this.mWaitLoadingBitmap, imageView);
                return;
            default:
                return;
        }
    }

    public void attachStateIconToBackgroundView(Bitmap bitmap, ImageView imageView) {
        imageView.setImageDrawable(null);
        if (Utils.hasJellyBean()) {
            imageView.setBackground(new BitmapDrawable(this.mResources, bitmap));
        } else {
            imageView.setBackgroundDrawable(new BitmapDrawable(this.mResources, bitmap));
        }
    }

    public ImageCache getImageCache() {
        return this.mImageCache;
    }

    public StickerMetaCache getMetaCache() {
        return this.mMetaCache;
    }

    public boolean isExitTasksEarly() {
        return this.mExitTasksEarly;
    }

    public void loadAnimation(Object obj, ImageView imageView, boolean z, int i, int i2) {
        if (obj == null) {
            Log.e(TAG, "FATAL: loadAnimation call with NULL string code");
            setImageBitmap(imageView, null, null);
        }
        if (i2 > 0) {
            imageView.getLayoutParams().height = i2;
        }
        if (i > 0) {
            imageView.getLayoutParams().width = i;
        }
        String valueOf = String.valueOf(obj);
        String str = valueOf.split(":")[0];
        if (cancelPotentialWork(str, imageView)) {
            Log.d(TAG, "stringCode:" + valueOf + " stikerid:" + str);
            StickerMessageObject metadata = this.mMetaCache != null ? this.mMetaCache.getMetadata(str) : null;
            if (metadata != null) {
                Log.d(TAG, "Metadata for stickerID=" + str + " FOUND IN CACHE");
                if (this.mImageCache != null) {
                    Bitmap bitmapFromMemCache = this.mImageCache.getBitmapFromMemCache(str + 1);
                    if (!(bitmapFromMemCache == null || imageView == null)) {
                        Log.d(TAG, "Sticker First Frame FOUND IN CACHE: stickerID=" + str + 1);
                        IStickerClientInterface stickerTask = new StickerTask(imageView, str, z);
                        Drawable asyncAnimStickerDrawable = new AsyncAnimStickerDrawable(this.mContext.getResources(), metadata, bitmapFromMemCache, stickerTask);
                        if (Utils.hasJellyBean()) {
                            imageView.setBackground(null);
                        } else {
                            imageView.setBackgroundDrawable(null);
                        }
                        imageView.setImageDrawable(asyncAnimStickerDrawable);
                        if (z) {
                            CatfizSticker.getSticker(stickerTask, str, this.mService);
                            return;
                        }
                        return;
                    }
                }
            }
            IStickerClientInterface stickerTask2 = new StickerTask(imageView, str, z);
            Drawable asyncAnimStickerDrawable2 = new AsyncAnimStickerDrawable(this.mContext.getResources(), null, this.mWaitLoadingBitmap, stickerTask2);
            if (Utils.hasJellyBean()) {
                imageView.setBackground(null);
            } else {
                imageView.setBackgroundDrawable(null);
            }
            imageView.setImageDrawable(asyncAnimStickerDrawable2);
            Log.d(TAG, " Request sticker id = " + str);
            CatfizSticker.getStickerFirstFrame(stickerTask2, str, this.mService);
        }
    }

    public void setCaches(StickerMetaCache stickerMetaCache, ImageCache imageCache) {
        this.mMetaCache = stickerMetaCache;
        this.mImageCache = imageCache;
    }

    public void setExitTasksEarly(boolean z) {
        this.mExitTasksEarly = z;
    }

    public void setFadeInTime(int i) {
        this.mFadeInTime = i;
    }

    public void setLoadingImage(int i, int i2, int i3) {
        this.mWaitLoadingBitmap = BitmapFactory.decodeResource(this.mResources, i);
        this.mExtractLoadingBitmap = BitmapFactory.decodeResource(this.mResources, i2);
        this.mErrorLoadingBitmap = BitmapFactory.decodeResource(this.mResources, i3);
    }

    public void setUiBinder(ICatfishUIBinder iCatfishUIBinder) {
        this.mService = iCatfishUIBinder;
    }

    public void startOnClick(ImageView imageView) {
        if (imageView.getBackground() instanceof AnimationDrawable) {
            ((AnimationDrawable) imageView.getBackground()).setVisible(true, true);
            Log.d(TAG, "+++starting animation");
        } else if (imageView.getDrawable() instanceof AsyncAnimStickerDrawable) {
            AsyncAnimStickerDrawable asyncAnimStickerDrawable = (AsyncAnimStickerDrawable) imageView.getDrawable();
            if (asyncAnimStickerDrawable.isAnimationAvailable()) {
                CatfizSticker.getSticker(new StickerTask(imageView, asyncAnimStickerDrawable.getStickerID(), true), asyncAnimStickerDrawable.getStickerID(), this.mService);
                Log.d(TAG, "+++starting animation at AsyncDrawable stickerID=" + asyncAnimStickerDrawable.getStickerID());
                return;
            }
            Log.d(TAG, "+++NO ANIMATION AsyncDrawable stickerID=" + asyncAnimStickerDrawable.getStickerID());
        } else {
            Log.d(TAG, "++ NOT INSTANCE OF AnimationDrawable ++");
        }
    }
}
