package com.catfiz.sticker;

import android.content.Context;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import com.catfiz.service.CatfishService;
import com.catfiz.sticker.StickerDatabaseExecutor.StickerDatabaseAction;
import com.catfiz.sticker.StickerDatabaseResponse.StickerDatabaseResponseStatus;
import com.catfiz.util.Log;
import java.io.IOException;
import java.io.InputStream;
import org.apache.http.HttpStatus;
import org.apache.http.conn.routing.HttpRouteDirector;

public class StickerBuiltInExtractExecutor implements Runnable {
    private static final String TAG = "StickerBuiltInExtractExecutor";
    private static int mStickerBuiltInInProcessCount = 0;
    private Context mContext = null;
    private Operation mOperation = null;
    private IStickerClientInterface mStickerClient = null;
    private StickerMessageObject mStickerObject = null;
    private IStickerPackageClientInterface mStickerPackageClient = null;

    /* synthetic */ class AnonymousClass1 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$sticker$StickerBuiltInExtractExecutor$Operation = new int[Operation.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$sticker$StickerBuiltInExtractExecutor$Operation[Operation.EXTRACT_ALL_STICKER.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerBuiltInExtractExecutor$Operation[Operation.EXTRACT_ONE_STICKER.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerBuiltInExtractExecutor$Operation[Operation.EXTRACT_ONE_PACKAGE.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
        }
    }

    enum Operation {
        EXTRACT_ALL_STICKER,
        EXTRACT_ONE_PACKAGE,
        EXTRACT_ONE_STICKER
    }

    public StickerBuiltInExtractExecutor(Context context, IStickerClientInterface iStickerClientInterface, StickerMessageObject stickerMessageObject) {
        this.mContext = context;
        this.mStickerClient = iStickerClientInterface;
        this.mStickerObject = stickerMessageObject;
        this.mOperation = Operation.EXTRACT_ONE_STICKER;
    }

    public StickerBuiltInExtractExecutor(Context context, IStickerPackageClientInterface iStickerPackageClientInterface) {
        this.mContext = context;
        this.mStickerPackageClient = iStickerPackageClientInterface;
        this.mOperation = Operation.EXTRACT_ALL_STICKER;
    }

    public StickerBuiltInExtractExecutor(Context context, StickerMessageObject stickerMessageObject) {
        this.mContext = context;
        this.mStickerObject = stickerMessageObject;
        this.mOperation = Operation.EXTRACT_ONE_PACKAGE;
    }

    protected CatfishService getCatfishService() {
        return CatfishService.getServiceInstance();
    }

    public void run() {
        int i = 0;
        StickerStorageManager stickerStorageManager = new StickerStorageManager();
        AssetManager assets = this.mContext.getAssets();
        String[] list;
        int length;
        String str;
        InputStream open;
        switch (AnonymousClass1.$SwitchMap$com$catfiz$sticker$StickerBuiltInExtractExecutor$Operation[this.mOperation.ordinal()]) {
            case e.b /*1*/:
                try {
                    list = assets.list(StickerDataStorage.STICKER_TABLE_NAME);
                    mStickerBuiltInInProcessCount = list.length;
                    Log.d(TAG, " START EXTRACTING ALL PACKAGE ");
                    length = list.length;
                    while (i < length) {
                        str = list[i];
                        if (str.compareTo("builtin_manifest") != 0) {
                            Log.d(TAG, " sticker built in asset = " + str);
                            StickerMessageObject.obtain().stickerPackageId = str.substring(0, str.length() - 4);
                            open = this.mContext.getAssets().open("sticker/" + str);
                            Log.d(TAG, " extractStickerPackage1 sticker = " + str);
                            stickerStorageManager.extractStickerPackage(open, this.mStickerPackageClient);
                        }
                        i++;
                    }
                    Log.d(TAG, " EXTRACT ALL PACKAGE DONE ");
                    return;
                } catch (Exception e) {
                    Log.e(TAG, "GET_ALL_PACKAGE error = " + e.getMessage());
                    return;
                }
            case e.c /*2*/:
                InputStream open2;
                try {
                    open2 = this.mContext.getAssets().open("sticker/" + this.mStickerObject.stickerPackageId + StickerService.CATFIZ_STICKER_EXTENSION);
                    try {
                        stickerStorageManager.findAndExtractSticker(open2, this.mStickerObject, this.mStickerClient);
                        return;
                    } catch (IOException e2) {
                        getCatfishService().postToMainHandler(new StickerDatabaseResponse(this.mStickerClient, this.mStickerObject, (Bitmap) null, StickerDatabaseAction.GET_STICKER_ICON, StickerDatabaseResponseStatus.ERROR, HttpStatus.SC_OK, "IOException"));
                        return;
                    }
                } catch (IOException e3) {
                    open2 = this.mContext.getAssets().open("sticker/" + this.mStickerObject.stickerPackageId + ".zip");
                }
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                try {
                    list = assets.list(StickerDataStorage.STICKER_TABLE_NAME);
                    Log.d(TAG, " START EXTRACTING ALL PACKAGE ");
                    length = list.length;
                    while (i < length) {
                        str = list[i];
                        if (str.compareTo(this.mStickerObject.stickerPackageId + ".zip") == 0 || str.compareTo(this.mStickerObject.stickerPackageId + StickerService.CATFIZ_STICKER_EXTENSION) == 0) {
                            open = this.mContext.getAssets().open("sticker/" + str);
                            Log.d(TAG, " extractStickerPackage2 sticker = " + str);
                            stickerStorageManager.extractStickerPackage(open, null);
                        }
                        i++;
                    }
                    Log.d(TAG, " EXTRACT ALL PACKAGE DONE ");
                    return;
                } catch (Exception e4) {
                    Log.e(TAG, "GET_ALL_PACKAGE error = " + e4.getMessage());
                    return;
                }
            default:
                return;
        }
    }
}
