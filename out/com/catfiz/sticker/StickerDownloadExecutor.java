package com.catfiz.sticker;

import android.content.Context;
import android.os.Environment;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import com.catfiz.localstorage.LocalStorageWorker;
import com.catfiz.localstorage.WriteChunkRunnable;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishService;
import com.catfiz.service.ICatfishClientInterface;
import com.catfiz.service.IDropableRunnable;
import com.catfiz.util.Log;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StickerDownloadExecutor implements IDropableRunnable, Runnable {
    private static final String TAG = "StickerDownloadExecutor";
    private static int mChunkMaxSize = AccessibilityNodeInfoCompat.ACTION_COPY;
    public static final String mParentPath = (Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + CatfishService.FILE_PACKAGE_NAME_CATFIZ);
    private static String mServer = null;
    private static volatile Map mStickerDownloadInProgressMap = new HashMap();
    private CatfishRESTAPI catfishRestAPI = null;
    private volatile long mAge = System.currentTimeMillis();
    private int mByteend = 0;
    private int mBytestart = 0;
    private ICatfishClientInterface mCatfizClient = null;
    private IStickerClientInterface mCatfizStickerClient = null;
    private byte[] mChunkbuffer = null;
    private Context mContext;
    private int mDatasize = 0;
    private CatfishService mService = null;
    private StickerMessageObject mStickerObject = null;
    private int mWriten = 0;
    public int scheduleNum = 0;

    class GetStickerChunks implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        public int scheduleNum;

        private GetStickerChunks() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.scheduleNum = 0;
        }

        public void dropRunnable() {
            StickerDownloadExecutor.setStickerDownloadFinish(StickerDownloadExecutor.this.mStickerObject.stickerId);
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            Log.d(StickerDownloadExecutor.TAG, "Get byte range: bs=" + String.valueOf(StickerDownloadExecutor.this.mBytestart) + ", " + "be=" + String.valueOf(StickerDownloadExecutor.this.mByteend) + ", " + "size=" + String.valueOf(StickerDownloadExecutor.this.mDatasize) + ", " + "mWriten=" + String.valueOf(StickerDownloadExecutor.this.mWriten));
            CatfishResult downloadStickerChunk = this.catfishRestAPI.downloadStickerChunk(StickerDownloadExecutor.mServer, StickerDownloadExecutor.this.mStickerObject.stickerId, (long) StickerDownloadExecutor.this.mBytestart, (long) StickerDownloadExecutor.this.mByteend);
            Log.d(StickerDownloadExecutor.TAG, "Chunksize: " + String.valueOf(downloadStickerChunk.chunksize));
            if (downloadStickerChunk.hasSuccess()) {
                this.mAge = System.currentTimeMillis();
                if (downloadStickerChunk.chunksize > 0) {
                    StickerDownloadExecutor.this.mWriten = StickerDownloadExecutor.this.mWriten + downloadStickerChunk.chunksize;
                }
                if (StickerDownloadExecutor.this.mWriten < StickerDownloadExecutor.this.mDatasize) {
                    StickerDownloadExecutor.mChunkMaxSize = CatfishRESTAPI.growChunkSize(StickerDownloadExecutor.mChunkMaxSize);
                    StickerDownloadExecutor.this.mBytestart = StickerDownloadExecutor.this.mWriten;
                    StickerDownloadExecutor.this.mByteend = (StickerDownloadExecutor.this.mBytestart + StickerDownloadExecutor.mChunkMaxSize) - 1;
                    StickerDownloadExecutor.this.mService.postRunnableToService(this);
                    downloadStickerChunk.cleaningup();
                    return;
                }
                LocalStorageWorker.postRunnable(new WriteChunkRunnable(StickerDownloadExecutor.this.mStickerObject.stickerId, null));
                StickerDownloadExecutor.this.proceedToCompleted();
            } else if (downloadStickerChunk.hasFailure()) {
                Log.d(StickerDownloadExecutor.TAG, "STICKER RECEIVE: Get Data Chunk: FAIL: Reschedule");
                if (downloadStickerChunk.chunksize > 0) {
                    this.mAge = System.currentTimeMillis();
                    StickerDownloadExecutor.this.mWriten = StickerDownloadExecutor.this.mWriten + downloadStickerChunk.chunksize;
                    if (StickerDownloadExecutor.this.mWriten < StickerDownloadExecutor.this.mDatasize) {
                        StickerDownloadExecutor.this.mBytestart = StickerDownloadExecutor.this.mWriten;
                        StickerDownloadExecutor.this.mByteend = (StickerDownloadExecutor.this.mWriten + StickerDownloadExecutor.mChunkMaxSize) - 1;
                        StickerDownloadExecutor.this.mService.postRunnableToService(this);
                        downloadStickerChunk.cleaningup();
                        return;
                    }
                    LocalStorageWorker.postRunnable(new WriteChunkRunnable(StickerDownloadExecutor.this.mStickerObject.stickerId, null));
                    StickerDownloadExecutor.this.proceedToCompleted();
                    downloadStickerChunk.cleaningup();
                    return;
                }
                StickerDownloadExecutor.mChunkMaxSize = CatfishRESTAPI.fallbackChunkSize(StickerDownloadExecutor.mChunkMaxSize);
                StickerDownloadExecutor.mServer = CatfishService.getServerHost();
                StickerDownloadExecutor.this.mService.scheduleRunnableToService(this, 0);
                downloadStickerChunk.cleaningup();
                return;
            } else {
                StickerDownloadExecutor.setStickerDownloadFinish(StickerDownloadExecutor.this.mStickerObject.stickerId);
            }
            StickerDownloadExecutor.this.mChunkbuffer = null;
            downloadStickerChunk.cleaningup();
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    public StickerDownloadExecutor(ICatfishClientInterface iCatfishClientInterface, CatfishService catfishService, String str, Context context, StickerMessageObject stickerMessageObject, int i) {
        this.mCatfizClient = iCatfishClientInterface;
        this.mContext = context;
        this.mService = catfishService;
        mServer = str;
        this.mStickerObject = stickerMessageObject;
        this.mAge = System.currentTimeMillis();
        this.mDatasize = i;
    }

    public StickerDownloadExecutor(IStickerClientInterface iStickerClientInterface, CatfishService catfishService, String str, Context context, StickerMessageObject stickerMessageObject, int i) {
        this.mCatfizStickerClient = iStickerClientInterface;
        this.mContext = context;
        this.mService = catfishService;
        mServer = str;
        this.mStickerObject = stickerMessageObject;
        this.mAge = System.currentTimeMillis();
        this.mDatasize = i;
        Log.d(TAG, " StickerDownloadExecutor id = " + this.mStickerObject.stickerId);
    }

    public static List getStickerDownloadClient(String str) {
        return mStickerDownloadInProgressMap.containsKey(str) ? (List) mStickerDownloadInProgressMap.get(str) : null;
    }

    private void proceedToCompleted() {
        new StickerStorageManager().extractSticker(this.mStickerObject.stickerId, this.mCatfizStickerClient, false, -1);
    }

    public static void setStickerDownloadFinish(String str) {
        if (mStickerDownloadInProgressMap.containsKey(str)) {
            mStickerDownloadInProgressMap.remove(str);
        }
    }

    public void dropRunnable() {
        setStickerDownloadFinish(this.mStickerObject.stickerId);
    }

    public long getAge() {
        return this.mAge;
    }

    public int getScheduleNum() {
        return this.scheduleNum;
    }

    public void incraseScheduleNum() {
        this.scheduleNum++;
    }

    public void run() {
        if (mStickerDownloadInProgressMap.containsKey(this.mStickerObject.stickerId)) {
            List list = (List) mStickerDownloadInProgressMap.get(this.mStickerObject.stickerId);
            if (this.mCatfizStickerClient != null) {
                list.add(this.mCatfizStickerClient);
                return;
            }
            return;
        }
        mStickerDownloadInProgressMap.put(this.mStickerObject.stickerId, new ArrayList());
        if (this.mStickerObject.stickerId.compareTo("piggon_shocked") == 0 || this.mStickerObject.stickerId.compareTo("piggon_happy_single") == 0) {
            InputStream open;
            Log.d(TAG, " prepare store piggon_shocked to local storeage");
            try {
                open = this.mContext.getAssets().open(this.mStickerObject.stickerId + StickerService.CATFIZ_STICKER_EXTENSION);
            } catch (IOException e) {
                open = this.mContext.getAssets().open(this.mStickerObject.stickerId + ".zip");
            }
            try {
                byte[] bArr = new byte[AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT];
                while (true) {
                    int read = open.read(bArr);
                    if (read == -1) {
                        break;
                    }
                    LocalStorageWorker.postRunnable(new WriteChunkRunnable(this.mStickerObject.stickerId, bArr, read));
                }
                LocalStorageWorker.postRunnable(new WriteChunkRunnable(this.mStickerObject.stickerId, null));
                Log.d(TAG, " success store piggon_shocked to local storeage");
                open.close();
            } catch (IOException e2) {
                e2.printStackTrace();
            }
            proceedToCompleted();
            return;
        }
        this.mService.postRunnableToService(new GetStickerChunks());
    }

    public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        this.catfishRestAPI = catfishRESTAPI;
    }
}
