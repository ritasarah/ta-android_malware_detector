package com.catfiz.sticker;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.RectF;
import android.graphics.drawable.PictureDrawable;
import android.util.DisplayMetrics;
import com.catfiz.localstorage.CatfizStorageInputStream;
import com.catfiz.localstorage.LocalStorageInterface;
import com.catfiz.svgandroid.SVG;
import com.catfiz.svgandroid.SVGParseException;
import com.catfiz.svgandroid.SVGParser;
import com.catfiz.util.Log;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;

public class StickerSvgUtil {
    public static float SVGBITMAP_SCALING_FACTOR = 1.0f;
    public static float SVGBITMAP_TARGET_DP = 200.0f;
    public static float SVGBITMAP_THUMB_SCALE = 0.3f;
    public static final String TAG = "StickerSvgUtil";

    final class AnonymousClass1 extends LocalStorageInterface {
        final /* synthetic */ IStickerClientInterface val$stickerInterface;
        final /* synthetic */ StickerMessageObject val$stickerObject;
        final /* synthetic */ StickerStorageManager val$stickerStorageManager;

        AnonymousClass1(StickerStorageManager stickerStorageManager, StickerMessageObject stickerMessageObject, IStickerClientInterface iStickerClientInterface) {
            this.val$stickerStorageManager = stickerStorageManager;
            this.val$stickerObject = stickerMessageObject;
            this.val$stickerInterface = iStickerClientInterface;
        }

        public boolean isProcessCanceled() {
            return false;
        }

        public void onBitmapReady(Bitmap bitmap) {
        }

        public void onBufferStreamReady(byte[] bArr) {
            try {
                Bitmap access$000 = StickerSvgUtil.pictureDrawable2Bitmap(SVGParser.getSVGFromStickerStream(new ByteArrayInputStream(bArr), (long) bArr.length).createPictureDrawable());
                this.val$stickerStorageManager.putStickerBitmap(null, access$000, this.val$stickerObject.stickerId, false, false);
                this.val$stickerInterface.onStickerReady(access$000, this.val$stickerObject);
            } catch (SVGParseException e) {
            } catch (IOException e2) {
            }
        }

        public void onDataNotFound() {
        }

        public void onError(String str) {
        }

        public void onFileReady(File file) {
        }

        public void onInputStreamReady(CatfizStorageInputStream catfizStorageInputStream) {
        }
    }

    public static Bitmap convertSVGStickerToBitmap(InputStream inputStream, long j) {
        Bitmap bitmap = null;
        try {
            bitmap = pictureDrawable2Bitmap(SVGParser.getSVGFromStickerStream(inputStream, j).createPictureDrawable());
        } catch (SVGParseException e) {
            Log.e(TAG, " Error SVG Parser e = " + e.getMessage());
        } catch (IOException e2) {
            Log.e(TAG, " Error SVG Parser e = " + e2.getMessage());
            e2.printStackTrace();
        }
        return bitmap;
    }

    public static void convertSVGStickerToPNGFormat(StickerMessageObject stickerMessageObject, IStickerClientInterface iStickerClientInterface) {
        StickerStorageManager stickerStorageManager = new StickerStorageManager();
        stickerStorageManager.getStickerBufferStream(stickerMessageObject, new AnonymousClass1(stickerStorageManager, stickerMessageObject, iStickerClientInterface));
    }

    public static Bitmap convertSVGToBitmap(Context context, byte[] bArr, long j) {
        SVG sVGFromStickerStream;
        try {
            sVGFromStickerStream = SVGParser.getSVGFromStickerStream(new ByteArrayInputStream(bArr), j);
        } catch (Exception e) {
            Log.d(TAG, "Not Sticker. Try to decode using compressed SVG");
            try {
                sVGFromStickerStream = SVGParser.getSVGFromCompressedStream(new ByteArrayInputStream(bArr));
            } catch (Exception e2) {
                Log.d(TAG, "Not Compressed. Try to decode using plain SVG");
                try {
                    sVGFromStickerStream = SVGParser.getSVGFromInputStream(new ByteArrayInputStream(bArr));
                } catch (Exception e3) {
                    Log.d(TAG, "FAIL TO DECODE SVG");
                    e3.printStackTrace();
                    return null;
                }
            }
        }
        if (sVGFromStickerStream == null) {
            Log.d(TAG, "NULL SVG. DROP");
            return null;
        }
        RectF bounds = sVGFromStickerStream.getBounds();
        DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();
        float f = (SVGBITMAP_TARGET_DP * displayMetrics.density) + 0.5f;
        float f2 = (SVGBITMAP_TARGET_DP * displayMetrics.density) + 0.5f;
        Log.d(TAG, " screen density = " + displayMetrics.density);
        float width = bounds.width();
        float height = bounds.height();
        f = Math.min(f / width, f2 / height);
        f2 = (width * f) + 0.5f;
        float f3 = (height * f) + 0.5f;
        width = (f2 - (width * f)) / 2.0f;
        height = (f3 - (height * f)) / 2.0f;
        Matrix matrix = new Matrix();
        matrix.preScale(f, f);
        matrix.postTranslate(width, height);
        Bitmap createBitmap = Bitmap.createBitmap((int) f2, (int) f3, Config.ARGB_8888);
        createBitmap.setDensity(0);
        Canvas canvas = new Canvas(createBitmap);
        canvas.concat(matrix);
        canvas.drawPicture(sVGFromStickerStream.getPicture());
        return createBitmap;
    }

    private static Bitmap pictureDrawable2Bitmap(PictureDrawable pictureDrawable) {
        float intrinsicWidth = (float) pictureDrawable.getIntrinsicWidth();
        float intrinsicHeight = (float) pictureDrawable.getIntrinsicHeight();
        float f = 1.0f;
        if (intrinsicWidth < 600.0f || intrinsicHeight < 600.0f) {
            f = Math.min(600.0f / intrinsicWidth, 600.0f / intrinsicHeight);
            intrinsicWidth = (intrinsicWidth * f) + 0.5f;
            intrinsicHeight = (intrinsicHeight * f) + 0.5f;
        }
        Bitmap createBitmap = Bitmap.createBitmap((int) intrinsicWidth, (int) intrinsicHeight, Config.ARGB_8888);
        Canvas canvas = new Canvas(createBitmap);
        Matrix matrix = new Matrix();
        matrix.preScale(f, f);
        canvas.concat(matrix);
        canvas.drawPicture(pictureDrawable.getPicture());
        return createBitmap;
    }
}
