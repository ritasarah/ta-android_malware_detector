package com.catfiz.sticker;

import android.graphics.Bitmap;
import com.catfiz.sticker.StickerDatabaseExecutor.StickerDatabaseAction;
import com.catfiz.util.AnimationDrawable;
import com.catfiz.util.Log;
import java.util.List;
import org.apache.http.conn.routing.HttpRouteDirector;

public class StickerDatabaseResponse implements Runnable {
    private static final String TAG = "StickerDatabaseResponse";
    private StickerDatabaseAction mAction = null;
    private AnimationDrawable mAnimationDrawable = null;
    private String mErrorMessage = null;
    private int mErrorStatus = 0;
    private int mProgressPercent = 0;
    private StickerDatabaseResponseStatus mResponseStatus = null;
    private Bitmap mStickerBitmap = null;
    private Bitmap[] mStickerBitmaps = null;
    private IStickerClientInterface mStickerClient = null;
    private StickerMessageObject mStickerObject = null;
    private StickerMessageObject mStickerPackage = null;
    private IStickerPackageClientInterface mStickerPackageClient = null;
    private StickerMessageObject[] mStickerPackages = null;

    /* synthetic */ class AnonymousClass1 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$sticker$StickerDatabaseExecutor$StickerDatabaseAction = new int[StickerDatabaseAction.values().length];
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$sticker$StickerDatabaseResponse$StickerDatabaseResponseStatus = new int[StickerDatabaseResponseStatus.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$sticker$StickerDatabaseExecutor$StickerDatabaseAction[StickerDatabaseAction.GET_ALL_PACKAGE.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerDatabaseExecutor$StickerDatabaseAction[StickerDatabaseAction.GET_STICKER.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerDatabaseExecutor$StickerDatabaseAction[StickerDatabaseAction.GET_STICKER_ICON.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerDatabaseResponse$StickerDatabaseResponseStatus[StickerDatabaseResponseStatus.ERROR.ordinal()] = 1;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerDatabaseResponse$StickerDatabaseResponseStatus[StickerDatabaseResponseStatus.SUCCESS.ordinal()] = 2;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerDatabaseResponse$StickerDatabaseResponseStatus[StickerDatabaseResponseStatus.WAITING_DOWNLOAD.ordinal()] = 3;
            } catch (NoSuchFieldError e6) {
            }
        }
    }

    public enum StickerDatabaseResponseStatus {
        SUCCESS,
        ERROR,
        NOT_FOUND,
        WAITING_DOWNLOAD
    }

    public StickerDatabaseResponse(IStickerClientInterface iStickerClientInterface, StickerMessageObject stickerMessageObject, Bitmap bitmap, StickerDatabaseAction stickerDatabaseAction, StickerDatabaseResponseStatus stickerDatabaseResponseStatus, int i, String str) {
        this.mStickerClient = iStickerClientInterface;
        this.mStickerObject = stickerMessageObject;
        this.mStickerBitmap = bitmap;
        this.mAction = stickerDatabaseAction;
        this.mResponseStatus = stickerDatabaseResponseStatus;
    }

    public StickerDatabaseResponse(IStickerClientInterface iStickerClientInterface, StickerMessageObject stickerMessageObject, Bitmap[] bitmapArr, AnimationDrawable animationDrawable, StickerDatabaseAction stickerDatabaseAction, StickerDatabaseResponseStatus stickerDatabaseResponseStatus) {
        this.mStickerClient = iStickerClientInterface;
        this.mStickerObject = stickerMessageObject;
        this.mStickerBitmaps = bitmapArr;
        this.mAnimationDrawable = animationDrawable;
        this.mAction = stickerDatabaseAction;
        this.mResponseStatus = stickerDatabaseResponseStatus;
    }

    public StickerDatabaseResponse(IStickerPackageClientInterface iStickerPackageClientInterface, int i, StickerDatabaseAction stickerDatabaseAction) {
        this.mStickerPackageClient = iStickerPackageClientInterface;
        this.mAction = stickerDatabaseAction;
        this.mProgressPercent = i;
    }

    public StickerDatabaseResponse(IStickerPackageClientInterface iStickerPackageClientInterface, StickerMessageObject stickerMessageObject, StickerDatabaseAction stickerDatabaseAction) {
        this.mStickerPackageClient = iStickerPackageClientInterface;
        this.mStickerPackage = stickerMessageObject;
        this.mAction = stickerDatabaseAction;
    }

    public StickerDatabaseResponse(IStickerPackageClientInterface iStickerPackageClientInterface, StickerMessageObject[] stickerMessageObjectArr, StickerDatabaseAction stickerDatabaseAction) {
        this.mStickerPackageClient = iStickerPackageClientInterface;
        this.mStickerPackages = stickerMessageObjectArr;
        this.mAction = stickerDatabaseAction;
    }

    private boolean isTaskCanceled(IStickerClientInterface iStickerClientInterface) {
        if (iStickerClientInterface instanceof IStickerExitTaskEarly) {
            IStickerExitTaskEarly iStickerExitTaskEarly = (IStickerExitTaskEarly) iStickerClientInterface;
            if (iStickerExitTaskEarly.isExitTaskEarly() || iStickerExitTaskEarly.isCanceled()) {
                return true;
            }
        }
        return false;
    }

    public void run() {
        List<IStickerClientInterface> stickerDownloadClient;
        switch (AnonymousClass1.$SwitchMap$com$catfiz$sticker$StickerDatabaseExecutor$StickerDatabaseAction[this.mAction.ordinal()]) {
            case e.b /*1*/:
                if (this.mStickerPackages != null && this.mStickerPackageClient != null) {
                    this.mStickerPackageClient.onStickerPackageReady(this.mStickerPackages);
                    return;
                } else if (this.mStickerPackage != null && this.mStickerPackageClient != null) {
                    this.mStickerPackageClient.onStickerPackageUpdate(this.mStickerPackage);
                    return;
                } else if (this.mStickerPackage == null && this.mStickerPackageClient != null) {
                    this.mStickerPackageClient.onStickerPackageWaiting(this.mProgressPercent);
                    return;
                } else {
                    return;
                }
            case e.c /*2*/:
                switch (AnonymousClass1.$SwitchMap$com$catfiz$sticker$StickerDatabaseResponse$StickerDatabaseResponseStatus[this.mResponseStatus.ordinal()]) {
                    case e.b /*1*/:
                        this.mStickerClient.onStickerError(this.mErrorStatus, this.mErrorMessage, this.mStickerObject);
                        return;
                    case e.c /*2*/:
                        stickerDownloadClient = StickerDownloadExecutor.getStickerDownloadClient(this.mStickerObject.stickerId);
                        if ((this.mStickerObject.stickerType & 8) <= 0 || (this.mStickerObject.stickerType & 32) != 0) {
                            if (!(this.mStickerClient == null || isTaskCanceled(this.mStickerClient))) {
                                this.mStickerClient.onStickerReady(this.mStickerBitmap, this.mStickerObject);
                            }
                            if (stickerDownloadClient != null) {
                                for (IStickerClientInterface iStickerClientInterface : stickerDownloadClient) {
                                    if (!(iStickerClientInterface == null || isTaskCanceled(iStickerClientInterface))) {
                                        iStickerClientInterface.onStickerReady(this.mStickerBitmap, this.mStickerObject);
                                    }
                                }
                            }
                        } else {
                            if (!(this.mStickerClient == null || isTaskCanceled(this.mStickerClient))) {
                                this.mStickerClient.onStickerReady(this.mStickerBitmaps, this.mAnimationDrawable, this.mStickerObject);
                            }
                            if (stickerDownloadClient != null) {
                                for (IStickerClientInterface iStickerClientInterface2 : stickerDownloadClient) {
                                    Log.d(TAG, " Deliver bitmap to pending client ");
                                    if (!(iStickerClientInterface2 == null || isTaskCanceled(iStickerClientInterface2))) {
                                        iStickerClientInterface2.onStickerReady(this.mStickerBitmaps, this.mAnimationDrawable, this.mStickerObject);
                                    }
                                }
                            }
                        }
                        StickerDownloadExecutor.setStickerDownloadFinish(this.mStickerObject.stickerId);
                        return;
                    case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                        this.mStickerClient.onStickerWaitingForDownload(0, this.mStickerObject);
                        return;
                    default:
                        return;
                }
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                switch (AnonymousClass1.$SwitchMap$com$catfiz$sticker$StickerDatabaseResponse$StickerDatabaseResponseStatus[this.mResponseStatus.ordinal()]) {
                    case e.b /*1*/:
                        this.mStickerClient.onStickerError(this.mErrorStatus, this.mErrorMessage, this.mStickerObject);
                        return;
                    case e.c /*2*/:
                        stickerDownloadClient = StickerDownloadExecutor.getStickerDownloadClient(this.mStickerObject.stickerId);
                        if (this.mStickerClient != null) {
                            this.mStickerClient.onStickerIconReady(this.mStickerBitmap, this.mStickerObject);
                        }
                        if (stickerDownloadClient != null) {
                            for (IStickerClientInterface iStickerClientInterface22 : stickerDownloadClient) {
                                if (iStickerClientInterface22 != null) {
                                    iStickerClientInterface22.onStickerIconReady(this.mStickerBitmap, this.mStickerObject);
                                }
                            }
                        }
                        StickerDownloadExecutor.setStickerDownloadFinish(this.mStickerObject.stickerId);
                        return;
                    default:
                        return;
                }
            default:
                return;
        }
    }
}
