package com.catfiz.sticker;

import com.catfiz.sticker.StickerService.StickerStatus;

public class StickerMessageObject {
    private static final int MAX_POOL_SIZE = 50;
    private static StickerMessageObject sPool;
    private static int sPoolSize = 0;
    private static final Object sPoolSync = new Object();
    private static final Object sRefCountSync = new Object();
    private int mObjectRefCount = 1;
    StickerMessageObject next;
    public int stickerBitmapHeight;
    public int stickerBitmapWidth;
    public int stickerCount;
    public String stickerDescription;
    public String stickerFont = "";
    public int stickerFontSize;
    public int stickerFontType;
    public int stickerFormatType;
    public int stickerFrameCount;
    public int[] stickerFrameDuration;
    public String stickerFrameDurationArrayStr;
    public int[] stickerFrameIndex;
    public String stickerFrameIndexArrayStr;
    public int[][] stickerFrameSize;
    public String stickerId;
    public String[] stickerIds;
    public int stickerLoopCount;
    public String stickerName;
    public StickerMessageObject[] stickerObjects;
    public String stickerPackageDescription;
    public String stickerPackageIconId;
    public String stickerPackageId;
    public String stickerPackageName;
    public int stickerPackagePrice;
    public String stickerPackagePublisher;
    public int stickerPackageType;
    public int stickerPackageVersion;
    public boolean stickerPermanent;
    public StickerStatus stickerStatus = StickerStatus.NOT_EXTRACTED;
    public int stickerType;
    public long timestamp;

    public static StickerMessageObject obtain() {
        synchronized (sPoolSync) {
            if (sPool != null) {
                StickerMessageObject stickerMessageObject = sPool;
                sPool = stickerMessageObject.next;
                stickerMessageObject.next = null;
                sPoolSize--;
                stickerMessageObject.mObjectRefCount++;
                return stickerMessageObject;
            }
            return new StickerMessageObject();
        }
    }

    public static StickerMessageObject obtain(String str) {
        StickerMessageObject obtain = obtain();
        obtain.stickerId = str;
        return obtain;
    }

    public void cleaningup() {
        this.stickerPackageId = null;
        this.stickerPackageName = null;
        this.stickerPackagePublisher = null;
        this.stickerPackageDescription = null;
        this.stickerPackageType = 0;
        this.stickerPackagePrice = 0;
        this.stickerCount = 0;
        this.stickerPackageIconId = null;
        this.stickerIds = null;
        this.stickerFrameSize = (int[][]) null;
        this.stickerObjects = null;
        this.stickerPackageVersion = 0;
        this.stickerId = null;
        this.stickerName = null;
        this.stickerDescription = null;
        this.stickerFormatType = 0;
        this.stickerType = 0;
        this.stickerFrameCount = 0;
        this.stickerPermanent = false;
        this.stickerBitmapWidth = 0;
        this.stickerBitmapHeight = 0;
        this.stickerFrameDuration = null;
        this.stickerFrameDurationArrayStr = null;
        this.stickerFrameIndex = null;
        this.stickerFrameIndexArrayStr = null;
        this.stickerLoopCount = 0;
        this.stickerStatus = null;
        this.stickerFont = null;
        this.stickerFontSize = 0;
        this.stickerFontType = 0;
        this.timestamp = 0;
    }

    public StickerMessageObject getRefCopy() {
        synchronized (sRefCountSync) {
            this.mObjectRefCount++;
        }
        return this;
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void recycle() {
        /*
        r3 = this;
        r1 = sRefCountSync;
        monitor-enter(r1);
        r0 = r3.mObjectRefCount;	 Catch:{ all -> 0x0034 }
        if (r0 <= 0) goto L_0x000d;
    L_0x0007:
        r0 = r3.mObjectRefCount;	 Catch:{ all -> 0x0034 }
        r0 = r0 + -1;
        r3.mObjectRefCount = r0;	 Catch:{ all -> 0x0034 }
    L_0x000d:
        r0 = r3.mObjectRefCount;	 Catch:{ all -> 0x0034 }
        if (r0 <= 0) goto L_0x0013;
    L_0x0011:
        monitor-exit(r1);	 Catch:{ all -> 0x0034 }
    L_0x0012:
        return;
    L_0x0013:
        r0 = 0;
        r3.mObjectRefCount = r0;	 Catch:{ all -> 0x0034 }
        monitor-exit(r1);	 Catch:{ all -> 0x0034 }
        r3.cleaningup();
        r1 = sPoolSync;
        monitor-enter(r1);
        r0 = sPoolSize;	 Catch:{ all -> 0x0031 }
        r2 = 50;
        if (r0 >= r2) goto L_0x002f;
    L_0x0023:
        r0 = sPool;	 Catch:{ all -> 0x0031 }
        r3.next = r0;	 Catch:{ all -> 0x0031 }
        sPool = r3;	 Catch:{ all -> 0x0031 }
        r0 = sPoolSize;	 Catch:{ all -> 0x0031 }
        r0 = r0 + 1;
        sPoolSize = r0;	 Catch:{ all -> 0x0031 }
    L_0x002f:
        monitor-exit(r1);	 Catch:{ all -> 0x0031 }
        goto L_0x0012;
    L_0x0031:
        r0 = move-exception;
        monitor-exit(r1);	 Catch:{ all -> 0x0031 }
        throw r0;
    L_0x0034:
        r0 = move-exception;
        monitor-exit(r1);	 Catch:{ all -> 0x0034 }
        throw r0;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.catfiz.sticker.StickerMessageObject.recycle():void");
    }
}
