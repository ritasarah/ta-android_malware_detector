package com.catfiz.sticker;

import android.content.SharedPreferences;
import android.database.Cursor;
import android.graphics.Bitmap;
import com.catfiz.localstorage.LocalStorageWorker;
import com.catfiz.service.CatfishService;
import com.catfiz.service.PinManagerV2;
import com.catfiz.sticker.StickerDatabaseResponse.StickerDatabaseResponseStatus;
import com.catfiz.sticker.StickerService.StickerServiceAction;
import com.catfiz.sticker.StickerService.StickerStatus;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.HttpStatus;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.apache.http.protocol.HTTP;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class StickerDatabaseExecutor implements Runnable {
    private static final String TAG = "StickerDatabaseExecutor";
    private StickerDatabaseAction mAction = null;
    private IStickerClientInterface mStickerClient = null;
    private IStickerExitTaskEarly mStickerClientControler = null;
    private StickerMessageObject mStickerObject = null;
    private IStickerPackageClientInterface mStickerPackageClient = null;

    /* synthetic */ class AnonymousClass1 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$sticker$StickerDatabaseExecutor$StickerDatabaseAction = new int[StickerDatabaseAction.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$sticker$StickerDatabaseExecutor$StickerDatabaseAction[StickerDatabaseAction.GET_ALL_PACKAGE.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerDatabaseExecutor$StickerDatabaseAction[StickerDatabaseAction.GET_FIRST_FRAME.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerDatabaseExecutor$StickerDatabaseAction[StickerDatabaseAction.GET_STICKER.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerDatabaseExecutor$StickerDatabaseAction[StickerDatabaseAction.GET_STICKER_ICON.ordinal()] = 4;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerDatabaseExecutor$StickerDatabaseAction[StickerDatabaseAction.GET_STICKER_PACKAGE_ICON.ordinal()] = 5;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerDatabaseExecutor$StickerDatabaseAction[StickerDatabaseAction.PREPARE_STICKER.ordinal()] = 6;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerDatabaseExecutor$StickerDatabaseAction[StickerDatabaseAction.STORE_STICKER.ordinal()] = 7;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerDatabaseExecutor$StickerDatabaseAction[StickerDatabaseAction.STORE_STICKER_PACKAGE.ordinal()] = 8;
            } catch (NoSuchFieldError e8) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerDatabaseExecutor$StickerDatabaseAction[StickerDatabaseAction.UPDATE_STICKER_PACKAGE.ordinal()] = 9;
            } catch (NoSuchFieldError e9) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerDatabaseExecutor$StickerDatabaseAction[StickerDatabaseAction.UPDATE_STICKER_SIZE.ordinal()] = 10;
            } catch (NoSuchFieldError e10) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerDatabaseExecutor$StickerDatabaseAction[StickerDatabaseAction.UPDATE_STICKER_STATUS.ordinal()] = 11;
            } catch (NoSuchFieldError e11) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerDatabaseExecutor$StickerDatabaseAction[StickerDatabaseAction.DELETE_STICKER_PACKAGE.ordinal()] = 12;
            } catch (NoSuchFieldError e12) {
            }
            try {
                $SwitchMap$com$catfiz$sticker$StickerDatabaseExecutor$StickerDatabaseAction[StickerDatabaseAction.EXTRACT_ONE_STICKER.ordinal()] = 13;
            } catch (NoSuchFieldError e13) {
            }
        }
    }

    public enum StickerDatabaseAction {
        GET_ALL_PACKAGE,
        GET_STICKER,
        GET_STICKER_ICON,
        GET_STICKER_PACKAGE_ICON,
        PREPARE_STICKER,
        STORE_STICKER_PACKAGE,
        UPDATE_STICKER_PACKAGE,
        STORE_STICKER,
        UPDATE_STICKER_SIZE,
        UPDATE_STICKER_STATUS,
        GET_FIRST_FRAME,
        DELETE_STICKER_PACKAGE,
        EXTRACT_ONE_STICKER
    }

    public StickerDatabaseExecutor(IStickerClientInterface iStickerClientInterface, StickerDatabaseAction stickerDatabaseAction, StickerMessageObject stickerMessageObject) {
        this.mStickerClient = iStickerClientInterface;
        if (iStickerClientInterface instanceof IStickerExitTaskEarly) {
            this.mStickerClientControler = (IStickerExitTaskEarly) iStickerClientInterface;
        }
        this.mAction = stickerDatabaseAction;
        this.mStickerObject = stickerMessageObject;
    }

    public StickerDatabaseExecutor(IStickerClientInterface iStickerClientInterface, StickerDatabaseAction stickerDatabaseAction, String str) {
        String stringFromJson = getStringFromJson(str, "stickerId");
        this.mStickerClient = iStickerClientInterface;
        if (iStickerClientInterface instanceof IStickerExitTaskEarly) {
            this.mStickerClientControler = (IStickerExitTaskEarly) iStickerClientInterface;
        }
        this.mAction = stickerDatabaseAction;
        this.mStickerObject = StickerMessageObject.obtain();
        this.mStickerObject.stickerId = stringFromJson;
    }

    public StickerDatabaseExecutor(IStickerPackageClientInterface iStickerPackageClientInterface, StickerDatabaseAction stickerDatabaseAction) {
        this.mStickerPackageClient = iStickerPackageClientInterface;
        this.mAction = stickerDatabaseAction;
    }

    public StickerDatabaseExecutor(StickerDatabaseAction stickerDatabaseAction, StickerMessageObject stickerMessageObject) {
        this.mAction = stickerDatabaseAction;
        this.mStickerObject = stickerMessageObject;
    }

    private void extractStickerManifest() {
        InputStream open = getCatfishService().getAssets().open("sticker/builtin_manifest");
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(open));
        StringBuilder stringBuilder = new StringBuilder();
        while (true) {
            String readLine = bufferedReader.readLine();
            if (readLine == null) {
                break;
            }
            stringBuilder.append(readLine);
        }
        StickerDataStorage stickerDataStorage = new StickerDataStorage(getCatfishService());
        JSONArray jSONArray = new JSONArray(new JSONObject(stringBuilder.toString()).getString("pks"));
        for (int i = 0; i < jSONArray.length(); i++) {
            Log.d(TAG, "storeStickerPackage stickerPackageId = " + jSONArray.getString(i));
            stickerDataStorage.storeStickerPackage(jSONArray.getString(i));
        }
        bufferedReader.close();
        open.close();
    }

    private boolean isTaskCanceled() {
        return this.mStickerClientControler == null ? false : this.mStickerClientControler.isExitTaskEarly() || this.mStickerClientControler.isCanceled();
    }

    protected CatfishService getCatfishService() {
        return CatfishService.getServiceInstance();
    }

    public String getStringFromJson(String str, String str2) {
        try {
            JSONObject jSONObject = new JSONObject(str);
            if (jSONObject.has(str2)) {
                str = jSONObject.getString(str2);
            }
        } catch (Exception e) {
            Log.e(TAG, "Error: " + e.toString());
        }
        return str;
    }

    public void run() {
        int i = 0;
        if (getCatfishService() != null) {
            StickerDataStorage stickerDataStorage = new StickerDataStorage(getCatfishService());
            StickerStorageManager stickerStorageManager = new StickerStorageManager();
            int i2;
            int i3;
            int i4;
            int i5;
            int i6;
            int columnIndex;
            int columnIndex2;
            int columnIndex3;
            int columnIndex4;
            int columnIndex5;
            Cursor stickerPackageDetail;
            CatfishService catfishService;
            IStickerClientInterface iStickerClientInterface;
            CatfishService catfishService2;
            Cursor stickerItemDetail;
            int columnIndex6;
            switch (AnonymousClass1.$SwitchMap$com$catfiz$sticker$StickerDatabaseExecutor$StickerDatabaseAction[this.mAction.ordinal()]) {
                case e.b /*1*/:
                    Cursor allStickerPackage = stickerDataStorage.getAllStickerPackage();
                    SharedPreferences sharedPreferences = getCatfishService().getSharedPreferences(StickerDataStorage.STICKER_PREF_NAME, 0);
                    boolean z = sharedPreferences.getBoolean(StickerDataStorage.UPDATE_BUILTIN_PREF_NAME, false);
                    Log.d(TAG, "GET_ALL_PACKAGE count = " + allStickerPackage.getCount() + " update = " + z);
                    if (allStickerPackage.getCount() <= 0 || z) {
                        try {
                            extractStickerManifest();
                            sharedPreferences.edit().putBoolean(StickerDataStorage.UPDATE_BUILTIN_PREF_NAME, false).commit();
                            Log.d(TAG, "GET_ALL_PACKAGE extract build in sticker");
                            getCatfishService().postToMainHandler(new StickerDatabaseResponse(this.mStickerPackageClient, 0, this.mAction));
                            LocalStorageWorker.postRunnable(new StickerBuiltInExtractExecutor(getCatfishService(), this.mStickerPackageClient));
                            return;
                        } catch (IOException e) {
                            e.printStackTrace();
                            return;
                        } catch (JSONException e2) {
                            e2.printStackTrace();
                            return;
                        }
                    }
                    StickerMessageObject[] stickerMessageObjectArr = new StickerMessageObject[allStickerPackage.getCount()];
                    i2 = 0;
                    while (allStickerPackage.moveToNext()) {
                        stickerMessageObjectArr[i2] = StickerMessageObject.obtain();
                        String string = allStickerPackage.getString(allStickerPackage.getColumnIndex(StickerDataStorage.STICKERPACKAGEID));
                        String string2 = allStickerPackage.getString(allStickerPackage.getColumnIndex(StickerDataStorage.STICKERPACKAGENAME));
                        String string3 = allStickerPackage.getString(allStickerPackage.getColumnIndex(StickerDataStorage.STICKERPACKAGEDESCRIPTION));
                        String string4 = allStickerPackage.getString(allStickerPackage.getColumnIndex(StickerDataStorage.STICKERPACKAGEPUBLISHER));
                        i3 = allStickerPackage.getInt(allStickerPackage.getColumnIndex(StickerDataStorage.STICKERPACKAGETYPE));
                        i4 = allStickerPackage.getInt(allStickerPackage.getColumnIndex(StickerDataStorage.STICKERPACKAGEPRICE));
                        i5 = allStickerPackage.getInt(allStickerPackage.getColumnIndex(StickerDataStorage.STICKERCOUNT));
                        stickerMessageObjectArr[i2].stickerPackageId = string;
                        stickerMessageObjectArr[i2].stickerPackageName = string2;
                        stickerMessageObjectArr[i2].stickerPackageDescription = string3;
                        stickerMessageObjectArr[i2].stickerPackagePublisher = string4;
                        stickerMessageObjectArr[i2].stickerPackageType = i3;
                        stickerMessageObjectArr[i2].stickerPackagePrice = i4;
                        stickerMessageObjectArr[i2].stickerCount = i5;
                        if (stickerMessageObjectArr[i2].stickerCount == 0) {
                            LocalStorageWorker.postRunnable(new StickerBuiltInExtractExecutor(getCatfishService(), stickerMessageObjectArr[i2]));
                        } else {
                            Cursor stickerItem = stickerDataStorage.getStickerItem(string);
                            stickerMessageObjectArr[i2].stickerIds = new String[stickerMessageObjectArr[i2].stickerCount];
                            stickerMessageObjectArr[i2].stickerFrameSize = new int[stickerMessageObjectArr[i2].stickerCount][];
                            i6 = 0;
                            while (stickerItem.moveToNext()) {
                                string3 = stickerItem.getString(stickerItem.getColumnIndex(StickerDataStorage.STICKERID));
                                Log.d(TAG, " StickerId found = " + string3);
                                int i7 = stickerItem.getInt(stickerItem.getColumnIndex(StickerDataStorage.STICKERWIDTH));
                                i3 = stickerItem.getInt(stickerItem.getColumnIndex(StickerDataStorage.STICKERHEIGHT));
                                stickerMessageObjectArr[i2].stickerIds[i6] = string3;
                                stickerMessageObjectArr[i2].stickerFrameSize[i6] = new int[2];
                                stickerMessageObjectArr[i2].stickerFrameSize[i6][0] = i7;
                                stickerMessageObjectArr[i2].stickerFrameSize[i6][1] = i3;
                                i6++;
                            }
                            stickerItem.close();
                            i2++;
                        }
                    }
                    allStickerPackage.close();
                    getCatfishService().postToMainHandler(new StickerDatabaseResponse(this.mStickerPackageClient, stickerMessageObjectArr, this.mAction));
                    return;
                case e.c /*2*/:
                case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                    if (!isTaskCanceled()) {
                        Log.d(TAG, "GET_STICKER id = " + this.mStickerObject.stickerId);
                        Cursor stickerItemDetail2 = stickerDataStorage.getStickerItemDetail(this.mStickerObject.stickerId);
                        Log.d(TAG, "GET_STICKER cursor count = " + stickerItemDetail2.getCount());
                        if (stickerItemDetail2.moveToFirst()) {
                            JSONArray jSONArray;
                            i2 = stickerItemDetail2.getColumnIndex(StickerDataStorage.STICKERNAME);
                            i6 = stickerItemDetail2.getColumnIndex(StickerDataStorage.STICKERPACKAGEID);
                            columnIndex = stickerItemDetail2.getColumnIndex(StickerDataStorage.STICKERFORMATTYPE);
                            columnIndex2 = stickerItemDetail2.getColumnIndex(StickerDataStorage.STICKERTYPE);
                            columnIndex3 = stickerItemDetail2.getColumnIndex(StickerDataStorage.STICKERFRAMECOUNT);
                            i4 = stickerItemDetail2.getColumnIndex(StickerDataStorage.STICKERFRAMEDURATION);
                            i5 = stickerItemDetail2.getColumnIndex(StickerDataStorage.STICKERFRAMEINDEX);
                            columnIndex4 = stickerItemDetail2.getColumnIndex(StickerDataStorage.STICKERLOOPCOUNT);
                            columnIndex5 = stickerItemDetail2.getColumnIndex(StickerDataStorage.STICKERSTATUS);
                            this.mStickerObject.stickerName = stickerItemDetail2.getString(i2);
                            this.mStickerObject.stickerPackageId = stickerItemDetail2.getString(i6);
                            this.mStickerObject.stickerFormatType = stickerItemDetail2.getInt(columnIndex);
                            this.mStickerObject.stickerType = stickerItemDetail2.getInt(columnIndex2);
                            this.mStickerObject.stickerFrameCount = stickerItemDetail2.getInt(columnIndex3);
                            this.mStickerObject.stickerLoopCount = stickerItemDetail2.getInt(columnIndex4);
                            if (columnIndex5 > 0) {
                                this.mStickerObject.stickerStatus = StickerStatus.values()[stickerItemDetail2.getInt(columnIndex5)];
                            }
                            this.mStickerObject.stickerFrameDurationArrayStr = stickerItemDetail2.getString(i4);
                            try {
                                jSONArray = new JSONArray(this.mStickerObject.stickerFrameDurationArrayStr);
                                this.mStickerObject.stickerFrameDuration = new int[jSONArray.length()];
                                for (i2 = 0; i2 < jSONArray.length(); i2++) {
                                    this.mStickerObject.stickerFrameDuration[i2] = jSONArray.getInt(i2);
                                }
                            } catch (JSONException e22) {
                                e22.printStackTrace();
                            }
                            this.mStickerObject.stickerFrameIndexArrayStr = stickerItemDetail2.getString(i5);
                            try {
                                jSONArray = new JSONArray(this.mStickerObject.stickerFrameIndexArrayStr);
                                this.mStickerObject.stickerFrameIndex = new int[jSONArray.length()];
                                for (i2 = 0; i2 < jSONArray.length(); i2++) {
                                    this.mStickerObject.stickerFrameIndex[i2] = jSONArray.getInt(i2) - 1;
                                }
                            } catch (JSONException e222) {
                                this.mStickerObject.stickerFrameIndex = new int[this.mStickerObject.stickerFrameCount];
                                while (i < this.mStickerObject.stickerFrameCount) {
                                    this.mStickerObject.stickerFrameIndex[i] = i;
                                    i++;
                                }
                                e222.printStackTrace();
                            }
                            stickerItemDetail2.close();
                            stickerPackageDetail = stickerDataStorage.getStickerPackageDetail(this.mStickerObject.stickerPackageId);
                            if (stickerPackageDetail.moveToFirst()) {
                                i = stickerPackageDetail.getColumnIndex(StickerDataStorage.STICKERPACKAGETYPE);
                                i6 = stickerPackageDetail.getColumnIndex(StickerDataStorage.STICKERPACKAGENAME);
                                columnIndex = stickerPackageDetail.getColumnIndex(StickerDataStorage.STICKERPACKAGEDESCRIPTION);
                                columnIndex2 = stickerPackageDetail.getColumnIndex(StickerDataStorage.STICKERPACKAGEPUBLISHER);
                                columnIndex3 = stickerPackageDetail.getColumnIndex(StickerDataStorage.STICKERPACKAGEPRICE);
                                int columnIndex7 = stickerPackageDetail.getColumnIndex(StickerDataStorage.STICKERCOUNT);
                                this.mStickerObject.stickerPackageType = stickerPackageDetail.getInt(i);
                                this.mStickerObject.stickerPackageName = stickerPackageDetail.getString(i6);
                                this.mStickerObject.stickerPackageDescription = stickerPackageDetail.getString(columnIndex);
                                this.mStickerObject.stickerPackagePublisher = stickerPackageDetail.getString(columnIndex2);
                                this.mStickerObject.stickerPackagePrice = stickerPackageDetail.getInt(columnIndex3);
                                this.mStickerObject.stickerCount = stickerPackageDetail.getInt(columnIndex7);
                            }
                            stickerPackageDetail.close();
                            if (this.mStickerObject.stickerStatus != StickerStatus.READY) {
                                getCatfishService().postToMainHandler(new StickerDatabaseResponse(this.mStickerClient, this.mStickerObject, null, null, StickerDatabaseAction.GET_STICKER, StickerDatabaseResponseStatus.SUCCESS));
                            }
                            if (isTaskCanceled()) {
                                this.mStickerClient = null;
                                return;
                            }
                            if (this.mAction == StickerDatabaseAction.GET_FIRST_FRAME) {
                                StickerMessageObject stickerMessageObject = this.mStickerObject;
                                stickerMessageObject.stickerType &= -33;
                                stickerMessageObject = this.mStickerObject;
                                stickerMessageObject.stickerType |= 32;
                            }
                            stickerStorageManager.getStickerBitmap(this.mStickerObject, this.mStickerClient);
                            return;
                        }
                        Log.d(TAG, "GET_STICKER Ready to Download");
                        if (!isTaskCanceled()) {
                            getCatfishService().postToMainHandler(new StickerDatabaseResponse(this.mStickerClient, this.mStickerObject, (Bitmap) null, StickerDatabaseAction.GET_STICKER, StickerDatabaseResponseStatus.WAITING_DOWNLOAD, HttpStatus.SC_MULTIPLE_CHOICES, "Sticker database notfound"));
                        }
                        catfishService = getCatfishService();
                        iStickerClientInterface = this.mStickerClient;
                        catfishService2 = getCatfishService();
                        getCatfishService();
                        catfishService.postToServiceHandler(new StickerService(iStickerClientInterface, catfishService2, CatfishService.getCurrentServerHost(), getCatfishService(), this.mStickerObject, StickerServiceAction.DOWNLOAD_STICKER), 2);
                        stickerItemDetail2.close();
                        return;
                    }
                    return;
                case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                    Log.d(TAG, "GET_STICKER_ICON id = " + this.mStickerObject.stickerId);
                    stickerItemDetail = stickerDataStorage.getStickerItemDetail(this.mStickerObject.stickerId);
                    Log.d(TAG, "GET_STICKER_ICON cursor count = " + stickerItemDetail.getCount());
                    if (stickerItemDetail.moveToFirst()) {
                        JSONArray jSONArray2;
                        i2 = stickerItemDetail.getColumnIndex(StickerDataStorage.STICKERNAME);
                        columnIndex = stickerItemDetail.getColumnIndex(StickerDataStorage.STICKERPACKAGEID);
                        columnIndex2 = stickerItemDetail.getColumnIndex(StickerDataStorage.STICKERFORMATTYPE);
                        columnIndex3 = stickerItemDetail.getColumnIndex(StickerDataStorage.STICKERTYPE);
                        i3 = stickerItemDetail.getColumnIndex(StickerDataStorage.STICKERFRAMECOUNT);
                        i4 = stickerItemDetail.getColumnIndex(StickerDataStorage.STICKERFRAMEDURATION);
                        i5 = stickerItemDetail.getColumnIndex(StickerDataStorage.STICKERFRAMEINDEX);
                        columnIndex4 = stickerItemDetail.getColumnIndex(StickerDataStorage.STICKERLOOPCOUNT);
                        columnIndex5 = stickerItemDetail.getColumnIndex(StickerDataStorage.STICKERSTATUS);
                        this.mStickerObject.stickerName = stickerItemDetail.getString(i2);
                        this.mStickerObject.stickerPackageId = stickerItemDetail.getString(columnIndex);
                        this.mStickerObject.stickerFormatType = stickerItemDetail.getInt(columnIndex2);
                        this.mStickerObject.stickerType = stickerItemDetail.getInt(columnIndex3);
                        this.mStickerObject.stickerFrameCount = stickerItemDetail.getInt(i3);
                        this.mStickerObject.stickerLoopCount = stickerItemDetail.getInt(columnIndex4);
                        if (columnIndex5 > 0) {
                            this.mStickerObject.stickerStatus = StickerStatus.values()[stickerItemDetail.getInt(columnIndex5)];
                        }
                        this.mStickerObject.stickerFrameDurationArrayStr = stickerItemDetail.getString(i4);
                        try {
                            jSONArray2 = new JSONArray(this.mStickerObject.stickerFrameDurationArrayStr);
                            this.mStickerObject.stickerFrameDuration = new int[jSONArray2.length()];
                            for (i2 = 0; i2 < jSONArray2.length(); i2++) {
                                this.mStickerObject.stickerFrameDuration[i2] = jSONArray2.getInt(i2);
                            }
                        } catch (JSONException e2222) {
                            e2222.printStackTrace();
                        }
                        this.mStickerObject.stickerFrameIndexArrayStr = stickerItemDetail.getString(i5);
                        try {
                            jSONArray2 = new JSONArray(this.mStickerObject.stickerFrameIndexArrayStr);
                            this.mStickerObject.stickerFrameIndex = new int[jSONArray2.length()];
                            for (i2 = 0; i2 < jSONArray2.length(); i2++) {
                                this.mStickerObject.stickerFrameIndex[i2] = jSONArray2.getInt(i2) - 1;
                            }
                        } catch (JSONException e22222) {
                            this.mStickerObject.stickerFrameIndex = new int[this.mStickerObject.stickerFrameCount];
                            while (i < this.mStickerObject.stickerFrameCount) {
                                this.mStickerObject.stickerFrameIndex[i] = i;
                                i++;
                            }
                            e22222.printStackTrace();
                        }
                        stickerItemDetail.close();
                        Log.d(TAG, " GET_STICKER_ICON id = " + this.mStickerObject.stickerId + " status = " + this.mStickerObject.stickerStatus.name());
                        if (this.mStickerObject.stickerStatus != StickerStatus.READY) {
                            getCatfishService().postToMainHandler(new StickerDatabaseResponse(this.mStickerClient, this.mStickerObject, null, null, StickerDatabaseAction.GET_STICKER_ICON, StickerDatabaseResponseStatus.SUCCESS));
                        }
                        stickerPackageDetail = stickerDataStorage.getStickerPackageDetail(this.mStickerObject.stickerPackageId);
                        if (stickerPackageDetail.moveToFirst()) {
                            i = stickerPackageDetail.getColumnIndex(StickerDataStorage.STICKERPACKAGETYPE);
                            i6 = stickerPackageDetail.getColumnIndex(StickerDataStorage.STICKERPACKAGENAME);
                            columnIndex6 = stickerPackageDetail.getColumnIndex(StickerDataStorage.STICKERPACKAGEDESCRIPTION);
                            columnIndex = stickerPackageDetail.getColumnIndex(StickerDataStorage.STICKERPACKAGEPUBLISHER);
                            columnIndex2 = stickerPackageDetail.getColumnIndex(StickerDataStorage.STICKERPACKAGEPRICE);
                            columnIndex3 = stickerPackageDetail.getColumnIndex(StickerDataStorage.STICKERCOUNT);
                            this.mStickerObject.stickerPackageType = stickerPackageDetail.getInt(i);
                            this.mStickerObject.stickerPackageName = stickerPackageDetail.getString(i6);
                            this.mStickerObject.stickerPackageDescription = stickerPackageDetail.getString(columnIndex6);
                            this.mStickerObject.stickerPackagePublisher = stickerPackageDetail.getString(columnIndex);
                            this.mStickerObject.stickerPackagePrice = stickerPackageDetail.getInt(columnIndex2);
                            this.mStickerObject.stickerCount = stickerPackageDetail.getInt(columnIndex3);
                        }
                        stickerPackageDetail.close();
                        stickerStorageManager.getStickerIconBitmap(this.mStickerObject, this.mStickerClient);
                        return;
                    }
                    Log.d(TAG, "GET_STICKER_ICON Ready to Download");
                    getCatfishService().postToMainHandler(new StickerDatabaseResponse(this.mStickerClient, this.mStickerObject, (Bitmap) null, StickerDatabaseAction.GET_STICKER_ICON, StickerDatabaseResponseStatus.ERROR, HttpStatus.SC_MULTIPLE_CHOICES, "Sticker Icon Not Found"));
                    return;
                case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                    Log.d(TAG, "GET_STICKER_ICON id = " + this.mStickerObject.stickerId);
                    stickerItemDetail = stickerDataStorage.getStickerItemDetail(this.mStickerObject.stickerId);
                    Log.d(TAG, "GET_STICKER_ICON cursor count = " + stickerItemDetail.getCount());
                    if (stickerItemDetail.moveToFirst()) {
                        JSONArray jSONArray3;
                        i2 = stickerItemDetail.getColumnIndex(StickerDataStorage.STICKERPACKAGEID);
                        columnIndex6 = stickerItemDetail.getColumnIndex(StickerDataStorage.STICKERFORMATTYPE);
                        columnIndex = stickerItemDetail.getColumnIndex(StickerDataStorage.STICKERTYPE);
                        columnIndex2 = stickerItemDetail.getColumnIndex(StickerDataStorage.STICKERFRAMECOUNT);
                        columnIndex3 = stickerItemDetail.getColumnIndex(StickerDataStorage.STICKERFRAMEDURATION);
                        i3 = stickerItemDetail.getColumnIndex(StickerDataStorage.STICKERFRAMEINDEX);
                        i4 = stickerItemDetail.getColumnIndex(StickerDataStorage.STICKERLOOPCOUNT);
                        i5 = stickerItemDetail.getColumnIndex(StickerDataStorage.STICKERSTATUS);
                        this.mStickerObject.stickerPackageId = stickerItemDetail.getString(i2);
                        this.mStickerObject.stickerFormatType = stickerItemDetail.getInt(columnIndex6);
                        this.mStickerObject.stickerType = stickerItemDetail.getInt(columnIndex);
                        this.mStickerObject.stickerFrameCount = stickerItemDetail.getInt(columnIndex2);
                        this.mStickerObject.stickerLoopCount = stickerItemDetail.getInt(i4);
                        if (i5 > 0) {
                            this.mStickerObject.stickerStatus = StickerStatus.values()[stickerItemDetail.getInt(i5)];
                        }
                        if (this.mStickerObject.stickerStatus == null) {
                            this.mStickerObject.stickerStatus = StickerStatus.NOT_EXTRACTED;
                        }
                        this.mStickerObject.stickerFrameDurationArrayStr = stickerItemDetail.getString(columnIndex3);
                        try {
                            jSONArray3 = new JSONArray(this.mStickerObject.stickerFrameDurationArrayStr);
                            this.mStickerObject.stickerFrameDuration = new int[jSONArray3.length()];
                            for (i2 = 0; i2 < jSONArray3.length(); i2++) {
                                this.mStickerObject.stickerFrameDuration[i2] = jSONArray3.getInt(i2);
                            }
                        } catch (JSONException e222222) {
                            e222222.printStackTrace();
                        }
                        this.mStickerObject.stickerFrameIndexArrayStr = stickerItemDetail.getString(i3);
                        try {
                            jSONArray3 = new JSONArray(this.mStickerObject.stickerFrameIndexArrayStr);
                            this.mStickerObject.stickerFrameIndex = new int[jSONArray3.length()];
                            for (i2 = 0; i2 < jSONArray3.length(); i2++) {
                                this.mStickerObject.stickerFrameIndex[i2] = jSONArray3.getInt(i2) - 1;
                            }
                        } catch (JSONException e2222222) {
                            this.mStickerObject.stickerFrameIndex = new int[this.mStickerObject.stickerFrameCount];
                            while (i < this.mStickerObject.stickerFrameCount) {
                                this.mStickerObject.stickerFrameIndex[i] = i;
                                i++;
                            }
                            e2222222.printStackTrace();
                        }
                        stickerItemDetail.close();
                        stickerPackageDetail = stickerDataStorage.getStickerPackageDetail(this.mStickerObject.stickerPackageId);
                        if (stickerPackageDetail.moveToFirst()) {
                            i = stickerPackageDetail.getColumnIndex(StickerDataStorage.STICKERPACKAGETYPE);
                            this.mStickerObject.stickerPackageType = stickerPackageDetail.getInt(i);
                        }
                        stickerPackageDetail.close();
                        stickerStorageManager.getStickerIconBitmap(this.mStickerObject, this.mStickerClient);
                        return;
                    }
                    Log.d(TAG, "GET_STICKER_ICON Ready to Download");
                    getCatfishService().postToMainHandler(new StickerDatabaseResponse(this.mStickerClient, this.mStickerObject, (Bitmap) null, StickerDatabaseAction.GET_STICKER_ICON, StickerDatabaseResponseStatus.ERROR, HttpStatus.SC_MULTIPLE_CHOICES, "Sticker package database icon not found"));
                    return;
                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                    Log.d(TAG, " PREPARE_STICKER ");
                    stickerPackageDetail = stickerDataStorage.getStickerItemDetail(this.mStickerObject.stickerId);
                    if (stickerPackageDetail.moveToFirst()) {
                        stickerPackageDetail.close();
                        return;
                    }
                    Log.d(TAG, " PREPARE_STICKER Download Sticker id = " + this.mStickerObject.stickerId);
                    catfishService = getCatfishService();
                    iStickerClientInterface = this.mStickerClient;
                    catfishService2 = getCatfishService();
                    getCatfishService();
                    catfishService.postToServiceHandler(new StickerService(iStickerClientInterface, catfishService2, CatfishService.getCurrentServerHost(), getCatfishService(), this.mStickerObject, StickerServiceAction.DOWNLOAD_STICKER), 2);
                    return;
                case SimpleLog.LOG_LEVEL_OFF /*7*/:
                    Log.d(TAG, " Store sticker to database id = " + this.mStickerObject.stickerId);
                    stickerPackageDetail = stickerDataStorage.getStickerItemDetail(this.mStickerObject.stickerId);
                    if (stickerPackageDetail.moveToFirst()) {
                        stickerDataStorage.updateStickerItem(this.mStickerObject);
                    } else {
                        stickerDataStorage.storeStickerItem(this.mStickerObject);
                    }
                    stickerPackageDetail.close();
                    return;
                case Utils.FILE_TYPE_INSTALLER /*8*/:
                    stickerDataStorage.storeStickerPackage(this.mStickerObject);
                    return;
                case HTTP.HT /*9*/:
                    stickerDataStorage.updateStickerPackage(this.mStickerObject);
                    return;
                case HTTP.LF /*10*/:
                    stickerDataStorage.updateStickerItemSize(this.mStickerObject);
                    return;
                case PinManagerV2.REGCODE_HASOLDACC /*11*/:
                    stickerDataStorage.updateStickerItemStatus(this.mStickerObject);
                    return;
                case PinManagerV2.REGCODE_MAX /*12*/:
                    stickerPackageDetail = stickerDataStorage.getStickerItemAndIcon(this.mStickerObject.stickerPackageId);
                    Log.d(TAG, " Delete Sticker package = " + this.mStickerObject.stickerPackageId + " count = " + stickerPackageDetail.getCount());
                    while (stickerPackageDetail.moveToNext()) {
                        stickerStorageManager.deleteSticker(stickerPackageDetail.getString(stickerPackageDetail.getColumnIndex(StickerDataStorage.STICKERID)));
                    }
                    stickerPackageDetail.close();
                    stickerDataStorage.deleteStickerPackage(this.mStickerObject.stickerPackageId);
                    return;
                case HTTP.CR /*13*/:
                    stickerPackageDetail = stickerDataStorage.getStickerItemDetail(this.mStickerObject.stickerId);
                    if (stickerPackageDetail.moveToFirst()) {
                        i = stickerPackageDetail.getColumnIndex(StickerDataStorage.STICKERSTATUS);
                        if (i > 0) {
                            StickerStatus stickerStatus = StickerStatus.values()[stickerPackageDetail.getInt(i)];
                            if (stickerStatus == StickerStatus.EXTRACTING || stickerStatus == StickerStatus.DOWNLOADING) {
                                stickerPackageDetail.close();
                                return;
                            }
                        }
                    }
                    stickerPackageDetail.close();
                    LocalStorageWorker.postRunnable(new StickerBuiltInExtractExecutor(getCatfishService(), this.mStickerClient, this.mStickerObject));
                    return;
                default:
                    return;
            }
        }
    }
}
