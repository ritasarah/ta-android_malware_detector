package com.catfiz.sticker;

import android.content.Context;
import android.os.Environment;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishService;
import com.catfiz.service.ICatfishClientInterface;
import com.catfiz.service.IDropableRunnable;
import com.catfiz.util.Log;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;

public class StickerPackageDownloadExecutor implements IDropableRunnable, Runnable {
    private static final String TAG = "StickerPackageDownloadExecutor";
    private static int mChunkMaxSize = AccessibilityNodeInfoCompat.ACTION_COPY;
    public static final String mParentPath = (Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + CatfishService.FILE_PACKAGE_NAME_CATFIZ + "/cache");
    private static String mServer = null;
    private static volatile Map mStickerPackageDownloadInProgressMap = new HashMap();
    private CatfishRESTAPI catfishRestAPI = null;
    private volatile long mAge = System.currentTimeMillis();
    private int mByteend = 0;
    private int mBytestart = 0;
    private byte[] mChunkbuffer = null;
    private FileOutputStream mChunkstream = null;
    private Context mContext;
    private File mDataFile = null;
    private String mDataPath = null;
    private int mDatasize = 0;
    public ICatfishClientInterface mIfClient = null;
    private CatfishService mService = null;
    private StickerMessageObject mStickerPackageObject = null;
    private int mWriten = 0;
    public int scheduleNum = 0;

    class GetStickerPackageChunks implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        public int scheduleNum;

        private GetStickerPackageChunks() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.scheduleNum = 0;
        }

        public void dropRunnable() {
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            Log.d(StickerPackageDownloadExecutor.TAG, "Get byte range: bs=" + String.valueOf(StickerPackageDownloadExecutor.this.mBytestart) + ", " + "be=" + String.valueOf(StickerPackageDownloadExecutor.this.mByteend) + ", " + "size=" + String.valueOf(StickerPackageDownloadExecutor.this.mDatasize) + ", " + "mWriten=" + String.valueOf(StickerPackageDownloadExecutor.this.mWriten));
            CatfishResult downloadStickerPackageChunk = this.catfishRestAPI.downloadStickerPackageChunk(StickerPackageDownloadExecutor.mServer, StickerPackageDownloadExecutor.this.mStickerPackageObject.stickerPackageId, (long) StickerPackageDownloadExecutor.this.mBytestart, (long) StickerPackageDownloadExecutor.this.mByteend, StickerPackageDownloadExecutor.this.mChunkstream);
            Log.d(StickerPackageDownloadExecutor.TAG, "Chunksize: " + String.valueOf(downloadStickerPackageChunk.chunksize));
            if (downloadStickerPackageChunk.hasSuccess()) {
                this.mAge = System.currentTimeMillis();
                if (downloadStickerPackageChunk.chunksize > 0) {
                    StickerPackageDownloadExecutor.this.mWriten = StickerPackageDownloadExecutor.this.mWriten + downloadStickerPackageChunk.chunksize;
                }
                if (StickerPackageDownloadExecutor.this.mWriten < StickerPackageDownloadExecutor.this.mDatasize) {
                    StickerPackageDownloadExecutor.mChunkMaxSize = CatfishRESTAPI.growChunkSize(StickerPackageDownloadExecutor.mChunkMaxSize);
                    StickerPackageDownloadExecutor.this.mBytestart = StickerPackageDownloadExecutor.this.mWriten;
                    StickerPackageDownloadExecutor.this.mByteend = (StickerPackageDownloadExecutor.this.mBytestart + StickerPackageDownloadExecutor.mChunkMaxSize) - 1;
                    StickerPackageDownloadExecutor.this.mService.postRunnableToService(this);
                    downloadStickerPackageChunk.cleaningup();
                    return;
                }
                Log.d(StickerPackageDownloadExecutor.TAG, "STICKER RECEIVE: Get Data Chunk: DONE");
                Log.d(StickerPackageDownloadExecutor.TAG, "byte wtitten: " + StickerPackageDownloadExecutor.this.mWriten + " mdatafile current size:" + StickerPackageDownloadExecutor.this.mDataFile.length());
                StickerPackageDownloadExecutor.this.proceedToCompleted();
                try {
                    StickerPackageDownloadExecutor.this.mChunkstream.flush();
                    StickerPackageDownloadExecutor.this.mChunkstream.close();
                } catch (IOException e) {
                    try {
                        StickerPackageDownloadExecutor.this.mChunkstream.flush();
                        StickerPackageDownloadExecutor.this.mChunkstream.close();
                    } catch (IOException e2) {
                    }
                    StickerPackageDownloadExecutor.this.mChunkbuffer = null;
                    downloadStickerPackageChunk.cleaningup();
                    return;
                }
            } else if (downloadStickerPackageChunk.hasFailure()) {
                Log.d(StickerPackageDownloadExecutor.TAG, "STICKER RECEIVE: Get Data Chunk: FAIL: Reschedule");
                if (downloadStickerPackageChunk.chunksize > 0) {
                    this.mAge = System.currentTimeMillis();
                    StickerPackageDownloadExecutor.this.mWriten = StickerPackageDownloadExecutor.this.mWriten + downloadStickerPackageChunk.chunksize;
                    if (StickerPackageDownloadExecutor.this.mWriten < StickerPackageDownloadExecutor.this.mDatasize) {
                        StickerPackageDownloadExecutor.this.mBytestart = StickerPackageDownloadExecutor.this.mWriten;
                        StickerPackageDownloadExecutor.this.mByteend = (StickerPackageDownloadExecutor.this.mWriten + StickerPackageDownloadExecutor.mChunkMaxSize) - 1;
                        StickerPackageDownloadExecutor.this.mService.postRunnableToService(this);
                        downloadStickerPackageChunk.cleaningup();
                        return;
                    }
                    Log.d(StickerPackageDownloadExecutor.TAG, "VBCAST RECEIVE (In FAILURE): Get Data Chunk: DONE");
                    Log.d(StickerPackageDownloadExecutor.TAG, "byte wtitten: " + StickerPackageDownloadExecutor.this.mWriten + " mdatafile current size:" + StickerPackageDownloadExecutor.this.mDataFile.length());
                    StickerPackageDownloadExecutor.this.proceedToCompleted();
                    try {
                        StickerPackageDownloadExecutor.this.mChunkstream.flush();
                        StickerPackageDownloadExecutor.this.mChunkstream.close();
                        downloadStickerPackageChunk.cleaningup();
                        return;
                    } catch (IOException e3) {
                        try {
                            StickerPackageDownloadExecutor.this.mChunkstream.flush();
                            StickerPackageDownloadExecutor.this.mChunkstream.close();
                        } catch (IOException e4) {
                        }
                        StickerPackageDownloadExecutor.this.mChunkbuffer = null;
                        downloadStickerPackageChunk.cleaningup();
                        return;
                    }
                }
                StickerPackageDownloadExecutor.mChunkMaxSize = CatfishRESTAPI.fallbackChunkSize(StickerPackageDownloadExecutor.mChunkMaxSize);
                StickerPackageDownloadExecutor.mServer = CatfishService.getServerHost();
                StickerPackageDownloadExecutor.this.mService.scheduleRunnableToService(this, 0);
                downloadStickerPackageChunk.cleaningup();
                return;
            } else {
                Log.d(StickerPackageDownloadExecutor.TAG, "VBCAST RECEIVE: Get Data Chunk: ERROR: DROP");
                StickerPackageDownloadExecutor.this.mDataFile.delete();
            }
            try {
                StickerPackageDownloadExecutor.this.mChunkstream.flush();
                StickerPackageDownloadExecutor.this.mChunkstream.close();
            } catch (IOException e5) {
            }
            StickerPackageDownloadExecutor.this.mChunkbuffer = null;
            downloadStickerPackageChunk.cleaningup();
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    public StickerPackageDownloadExecutor(ICatfishClientInterface iCatfishClientInterface, CatfishService catfishService, String str, Context context, StickerMessageObject stickerMessageObject, int i) {
        this.mContext = context;
        this.mService = catfishService;
        mServer = str;
        this.mStickerPackageObject = stickerMessageObject;
        this.mAge = System.currentTimeMillis();
        if (!new File(mParentPath).exists()) {
            new File(mParentPath).mkdirs();
        }
        this.mDataPath = mParentPath + "/stickerpackage.cache" + String.valueOf(this.mAge);
        this.mDataFile = new File(this.mDataPath);
        this.mDatasize = i;
    }

    private void proceedToCompleted() {
        Log.d(TAG, " proceedToCompleted sticker packagedownload ");
        new StickerStorageManager().extractStickerPackage(this.mDataFile, null);
        this.mDataFile.delete();
    }

    public void dropRunnable() {
    }

    public long getAge() {
        return this.mAge;
    }

    public int getScheduleNum() {
        return this.scheduleNum;
    }

    public void incraseScheduleNum() {
        this.scheduleNum++;
    }

    public void run() {
        if (this.mStickerPackageObject.stickerPackageId.compareTo("piggon") == 0) {
            try {
                InputStream open = this.mContext.getAssets().open("piggon.zip");
                this.mChunkstream = new FileOutputStream(this.mDataFile, false);
                byte[] bArr = new byte[AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT];
                while (true) {
                    int read = open.read(bArr);
                    if (read != -1) {
                        this.mChunkstream.write(bArr, 0, read);
                    } else {
                        this.mChunkstream.flush();
                        this.mChunkstream.close();
                        proceedToCompleted();
                        return;
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
                return;
            }
        }
        try {
            this.mChunkstream = new FileOutputStream(this.mDataFile, false);
            this.mService.postRunnableToService(new GetStickerPackageChunks());
        } catch (FileNotFoundException e2) {
            Log.e(TAG, "STICKER RECEIVE: " + e2.toString());
        }
    }

    public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        this.catfishRestAPI = catfishRESTAPI;
    }
}
