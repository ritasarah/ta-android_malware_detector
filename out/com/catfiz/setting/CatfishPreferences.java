package com.catfiz.setting;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
import android.os.Environment;
import android.support.v4.view.MotionEventCompat;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.telephony.TelephonyManager;
import com.catfiz.base.Constant;
import com.catfiz.crypto.SimpleCrypto;
import com.catfiz.service.CatfishService;
import com.catfiz.util.Log;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.Key;
import java.util.Map;
import java.util.Set;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.json.JSONException;
import org.json.JSONObject;

public class CatfishPreferences implements SharedPreferences {
    public static volatile JSONObject JSONPreference = null;
    private static final String TAG = "CatfishPreferences";
    Context context = null;
    private String deviceid = null;
    private String key = "cf321d6e83efc6b7f80c3ae402d356e0cae83593";
    public String mParentPath = (Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + CatfishService.FILE_PACKAGE_NAME_CATFIZ + "/");

    public CatfishPreferences(Context context) {
        Log.d(TAG, "CatfishPreferences: CTOR :ThreadID " + Thread.currentThread().getId());
        JSONPreference = new JSONObject();
        this.deviceid = ((TelephonyManager) context.getSystemService(Constant.PHONE)).getDeviceId();
        this.context = context;
        if (this.deviceid != null) {
            JSONPrefInitialize();
            if (JSONPreference != null) {
                try {
                    JSONPreference.put(CatfishService.PREFERENCE_CREATION_ID, 1);
                } catch (Exception e) {
                }
            }
        }
    }

    private void backupPreferences() {
        try {
            FileOutputStream openFileOutput = this.context.openFileOutput(".cfpref.backup", 0);
            FileInputStream openFileInput = this.context.openFileInput(".cfpref");
            byte[] bArr = new byte[AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT];
            while (true) {
                int read = openFileInput.read(bArr);
                if (read > 0) {
                    openFileOutput.write(bArr, 0, read);
                } else {
                    openFileOutput.close();
                    openFileInput.close();
                    return;
                }
            }
        } catch (FileNotFoundException e) {
            Log.e(TAG, "ERROR: " + e.toString());
        } catch (IOException e2) {
            Log.e(TAG, "ERROR: " + e2.toString());
        }
    }

    private void commitPreference() {
        if (this.deviceid != null) {
            if (!(getString(CatfishService.CATFISHID_PREF, null) == null || getString(CatfishService.USERNAME_PREF, null) == null || getString(CatfishService.USERSTATUS_PREF, null) == null)) {
                backupPreferences();
            }
            try {
                FileOutputStream openFileOutput = this.context.openFileOutput(".cfpref", 0);
                openFileOutput.write(SimpleCrypto.encrypt(calcHmac(this.deviceid), JSONPreference.toString()).getBytes());
                openFileOutput.close();
            } catch (Exception e) {
                Log.e(TAG, "ERROR: " + e.toString());
            }
        }
    }

    private boolean restorePreferences() {
        try {
            FileInputStream openFileInput = this.context.openFileInput(".cfpref.backup");
            FileOutputStream openFileOutput = this.context.openFileOutput(".cfpref", 0);
            byte[] bArr = new byte[AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT];
            while (true) {
                int read = openFileInput.read(bArr);
                if (read > 0) {
                    openFileOutput.write(bArr, 0, read);
                } else {
                    InputStream openFileInput2 = this.context.openFileInput(".cfpref");
                    InputStream dataInputStream = new DataInputStream(openFileInput2);
                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(dataInputStream));
                    String readLine = bufferedReader.readLine();
                    bufferedReader.close();
                    openFileOutput.close();
                    openFileInput.close();
                    dataInputStream.close();
                    openFileInput2.close();
                    JSONPreference = new JSONObject(SimpleCrypto.decrypt(calcHmac(this.deviceid), readLine));
                    return true;
                }
            }
        } catch (FileNotFoundException e) {
            Log.e(TAG, "ERROR: " + e.toString());
            return false;
        } catch (IOException e2) {
            Log.e(TAG, "ERROR: " + e2.toString());
            return false;
        } catch (JSONException e3) {
            Log.d(TAG, e3.getMessage());
            return false;
        } catch (Exception e4) {
            Log.e(TAG, "ERROR: " + e4.toString());
            return false;
        }
    }

    public void JSONPrefInitialize() {
        FileOutputStream openFileOutput;
        Log.d(TAG, "JSONPrefInitialize:ThreadID " + Thread.currentThread().getId());
        File file = new File(this.mParentPath, ".cfpref");
        if ("mounted".equals(Environment.getExternalStorageState())) {
            Log.d(TAG, "MEDIA_MOUNTED");
            if (file.exists()) {
                try {
                    FileOutputStream openFileOutput2 = this.context.openFileOutput(".cfpref", 0);
                    FileInputStream fileInputStream = new FileInputStream(file);
                    byte[] bArr = new byte[AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT];
                    while (true) {
                        int read = fileInputStream.read(bArr);
                        if (read <= 0) {
                            break;
                        }
                        openFileOutput2.write(bArr, 0, read);
                    }
                    openFileOutput2.close();
                    file.delete();
                } catch (FileNotFoundException e) {
                    Log.e(TAG, "ERROR: " + e.toString());
                } catch (IOException e2) {
                    Log.e(TAG, "ERROR: " + e2.toString());
                }
            }
        }
        try {
            InputStream openFileInput = this.context.openFileInput(".cfpref");
            InputStream dataInputStream = new DataInputStream(openFileInput);
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(dataInputStream));
            String readLine = bufferedReader.readLine();
            bufferedReader.close();
            dataInputStream.close();
            openFileInput.close();
            JSONPreference = new JSONObject(SimpleCrypto.decrypt(calcHmac(this.deviceid), readLine));
        } catch (FileNotFoundException e3) {
            Log.e(TAG, e3.getMessage());
            if (!restorePreferences()) {
                try {
                    openFileOutput = this.context.openFileOutput(".cfpref", 0);
                    openFileOutput.write(SimpleCrypto.encrypt(calcHmac(this.deviceid), JSONPreference.toString()).getBytes());
                    openFileOutput.close();
                } catch (FileNotFoundException e32) {
                    e32.printStackTrace();
                } catch (Exception e4) {
                    e4.printStackTrace();
                }
            }
        } catch (JSONException e5) {
            Log.e(TAG, "ERROR: " + e5.toString());
        } catch (Exception e42) {
            Log.e(TAG, "ERROR: " + e42.toString());
            if (!restorePreferences()) {
                try {
                    openFileOutput = this.context.openFileOutput(".cfpref", 0);
                    openFileOutput.write(SimpleCrypto.encrypt(calcHmac(this.deviceid), JSONPreference.toString()).getBytes());
                    openFileOutput.close();
                } catch (FileNotFoundException e322) {
                    e322.printStackTrace();
                } catch (Exception e422) {
                    e422.printStackTrace();
                }
            }
        }
    }

    public String calcHmac(String str) {
        Key secretKeySpec = new SecretKeySpec(this.key.getBytes(), "HmacSHA1");
        Mac instance = Mac.getInstance("HmacSHA1");
        instance.init(secretKeySpec);
        byte[] doFinal = instance.doFinal(str.getBytes());
        StringBuffer stringBuffer = new StringBuffer();
        for (byte b : doFinal) {
            int i = b & MotionEventCompat.ACTION_MASK;
            if (i <= 15) {
                stringBuffer.append("0");
            }
            stringBuffer.append(Integer.toHexString(i));
        }
        return stringBuffer.toString();
    }

    public boolean contains(String str) {
        return JSONPreference.has(str);
    }

    public Editor edit() {
        return new Editor() {
            public void apply() {
            }

            public Editor clear() {
                CatfishPreferences.JSONPreference = new JSONObject();
                return this;
            }

            public boolean commit() {
                CatfishPreferences.this.commitPreference();
                return false;
            }

            public Editor putBoolean(String str, boolean z) {
                try {
                    CatfishPreferences.JSONPreference.put(str, z);
                } catch (JSONException e) {
                    Log.e(CatfishPreferences.TAG, "ERROR: " + e.toString());
                }
                return this;
            }

            public Editor putFloat(String str, float f) {
                try {
                    CatfishPreferences.JSONPreference.put(str, (double) f);
                } catch (JSONException e) {
                    Log.e(CatfishPreferences.TAG, "ERROR: " + e.toString());
                }
                return this;
            }

            public Editor putInt(String str, int i) {
                try {
                    CatfishPreferences.JSONPreference.put(str, i);
                } catch (JSONException e) {
                    Log.e(CatfishPreferences.TAG, "ERROR: " + e.toString());
                }
                return this;
            }

            public Editor putLong(String str, long j) {
                try {
                    CatfishPreferences.JSONPreference.put(str, j);
                } catch (JSONException e) {
                    Log.e(CatfishPreferences.TAG, "ERROR: " + e.toString());
                }
                return this;
            }

            public Editor putString(String str, String str2) {
                try {
                    CatfishPreferences.JSONPreference.put(str, str2);
                } catch (JSONException e) {
                    Log.e(CatfishPreferences.TAG, "ERROR: " + e.toString());
                }
                return this;
            }

            public Editor putStringSet(String str, Set set) {
                return null;
            }

            public Editor remove(String str) {
                CatfishPreferences.JSONPreference.remove(str);
                return this;
            }
        };
    }

    public Map getAll() {
        return null;
    }

    public boolean getBoolean(String str, boolean z) {
        if (!contains(str)) {
            return z;
        }
        try {
            return JSONPreference.getBoolean(str);
        } catch (JSONException e) {
            Log.e(TAG, "ERROR: " + e.toString());
            return false;
        }
    }

    public float getFloat(String str, float f) {
        if (!contains(str)) {
            return f;
        }
        try {
            return (float) JSONPreference.getInt(str);
        } catch (JSONException e) {
            Log.e(TAG, "ERROR: " + e.toString());
            return 0.0f;
        }
    }

    public int getInt(String str, int i) {
        if (!contains(str)) {
            return i;
        }
        try {
            return JSONPreference.getInt(str);
        } catch (JSONException e) {
            Log.e(TAG, "ERROR: " + e.toString());
            return 0;
        }
    }

    public long getLong(String str, long j) {
        if (!contains(str)) {
            return j;
        }
        try {
            return JSONPreference.getLong(str);
        } catch (JSONException e) {
            Log.e(TAG, "ERROR: " + e.toString());
            return 0;
        }
    }

    public String getString(String str, String str2) {
        if (!contains(str)) {
            return str2;
        }
        try {
            return JSONPreference.getString(str);
        } catch (JSONException e) {
            Log.e(TAG, "ERROR: " + e.toString());
            return null;
        }
    }

    public Set getStringSet(String str, Set set) {
        return null;
    }

    public boolean isCfprefAlreadyToGo() {
        if (this.deviceid == null) {
            return false;
        }
        try {
            InputStream openFileInput = this.context.openFileInput(".cfpref");
            InputStream dataInputStream = new DataInputStream(openFileInput);
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(dataInputStream));
            String readLine = bufferedReader.readLine();
            bufferedReader.close();
            dataInputStream.close();
            openFileInput.close();
            JSONObject jSONObject = new JSONObject(SimpleCrypto.decrypt(calcHmac(this.deviceid), readLine));
            return true;
        } catch (FileNotFoundException e) {
            Log.e(TAG, "ERROR: " + e.toString());
            return false;
        } catch (IOException e2) {
            Log.e(TAG, "ERROR: " + e2.toString());
            return false;
        } catch (JSONException e3) {
            Log.e(TAG, "ERROR: " + e3.toString());
            return false;
        } catch (Exception e4) {
            Log.e(TAG, "ERROR: " + e4.toString());
            return false;
        }
    }

    public void registerOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener onSharedPreferenceChangeListener) {
    }

    public void unregisterOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener onSharedPreferenceChangeListener) {
    }
}
