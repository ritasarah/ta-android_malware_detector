package com.catfiz.media;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Matrix;
import android.media.ExifInterface;
import android.net.Uri;
import android.os.AsyncTask;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;

public class ImageReScaler extends AsyncTask {
    private static final String TAG = "ImageReScaler";
    private Context mContext = null;
    private int mRequiredSize;

    public ImageReScaler(Context context, int i) {
        this.mContext = context;
        this.mRequiredSize = i;
    }

    public static int calculateSampleSize(int i, int i2, int i3) {
        int i4 = 1;
        if (i2 > i3 || i > i3) {
            i4 = Math.round(((float) i2) / ((float) i3));
            int round = Math.round(((float) i) / ((float) i3));
            if (i4 >= round) {
                i4 = round;
            }
        }
        while (((float) (i * i2)) / ((float) (i4 * i4)) > ((float) ((i3 * i3) * 2))) {
            i4++;
        }
        return i4;
    }

    public static int getExifRotation(File file) {
        if (file == null) {
            return 0;
        }
        try {
            switch (new ExifInterface(file.getAbsolutePath()).getAttributeInt("Orientation", 0)) {
                case e.c /*2*/:
                    return 90;
                case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                    return 180;
                case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                    return 180;
                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                    return 90;
                case Utils.FILE_TYPE_INSTALLER /*8*/:
                    return 270;
                default:
                    return 0;
            }
        } catch (IOException e) {
            return 0;
        }
    }

    public static Bitmap rescaleFromFilePath(Context context, String str, float f) {
        Log.d(TAG, "rescaleFromFilePath");
        int i = (int) ((context.getResources().getDisplayMetrics().density * f) + 0.5f);
        Log.d(TAG, "rescaleFromFilePath:" + str + " pixels=" + i);
        return rescaleFromFilePath(str, i);
    }

    public static Bitmap rescaleFromFilePath(String str, int i) {
        try {
            Log.d(TAG, "cek filepath");
            if (str == null) {
                return null;
            }
            Log.d(TAG, "filepath pass");
            Options options = new Options();
            options.inJustDecodeBounds = true;
            BitmapFactory.decodeFile(str, options);
            Log.d(TAG, "cek sanity");
            if (options.outWidth == 0 || options.outHeight == 0) {
                return null;
            }
            Log.d(TAG, "sanity pass");
            int calculateSampleSize = calculateSampleSize(options.outWidth, options.outHeight, i);
            Options options2 = new Options();
            options2.inSampleSize = calculateSampleSize;
            options2.inJustDecodeBounds = false;
            options2.inPreferredConfig = Config.ARGB_8888;
            options2.inDither = false;
            options2.inTargetDensity = 0;
            Log.d(TAG, "Decoded File=" + str + ", scale=" + calculateSampleSize);
            Bitmap decodeFile = BitmapFactory.decodeFile(str, options2);
            int exifRotation = getExifRotation(new File(str));
            if (exifRotation == 0) {
                return decodeFile;
            }
            Log.d(TAG, "ROTATE: " + exifRotation);
            Matrix matrix = new Matrix();
            matrix.setRotate((float) exifRotation);
            Bitmap createBitmap = Bitmap.createBitmap(decodeFile, 0, 0, decodeFile.getWidth(), decodeFile.getHeight(), matrix, true);
            decodeFile.recycle();
            return createBitmap;
        } catch (OutOfMemoryError e) {
            Log.e(TAG, "Encounter problem when decode bitmap");
            return null;
        } catch (Exception e2) {
            e2.printStackTrace();
            Log.e(TAG, "Please see the log");
            return null;
        }
    }

    public static Bitmap rescaleFromResources(Context context, int i, float f) {
        return rescaleFromResources(context.getResources(), i, f);
    }

    public static Bitmap rescaleFromResources(Resources resources, int i, float f) {
        Bitmap bitmap = null;
        int i2 = (int) ((resources.getDisplayMetrics().density * f) + 0.5f);
        try {
            Options options = new Options();
            options.inJustDecodeBounds = true;
            BitmapFactory.decodeResource(resources, i, options);
            if (!(options.outWidth == 0 || options.outHeight == 0)) {
                i2 = calculateSampleSize(options.outWidth, options.outHeight, i2);
                options = new Options();
                options.inSampleSize = i2;
                options.inJustDecodeBounds = false;
                options.inPreferredConfig = Config.ARGB_8888;
                options.inDither = false;
                options.inTargetDensity = 0;
                bitmap = BitmapFactory.decodeResource(resources, i, options);
            }
        } catch (OutOfMemoryError e) {
            Log.e(TAG, "Encounter problem when decode bitmap");
        } catch (Exception e2) {
        }
        return bitmap;
    }

    public static Bitmap rescaleFromUri(Context context, Uri uri, int i) {
        if (uri == null) {
            return null;
        }
        try {
            Options options = new Options();
            options.inJustDecodeBounds = true;
            BitmapFactory.decodeStream(context.getContentResolver().openInputStream(uri), null, options);
            if (options.outWidth == 0 || options.outHeight == 0) {
                return null;
            }
            int calculateSampleSize = calculateSampleSize(options.outWidth, options.outHeight, i);
            Options options2 = new Options();
            options2.inSampleSize = calculateSampleSize;
            options2.inJustDecodeBounds = false;
            options2.inPreferredConfig = Config.ARGB_8888;
            options2.inDither = false;
            options2.inTargetDensity = 0;
            Bitmap decodeStream = BitmapFactory.decodeStream(context.getContentResolver().openInputStream(uri), null, options2);
            int exifRotation = getExifRotation(new File(uri.getPath()));
            if (exifRotation != 0) {
                Log.d(TAG, "ROTATE: " + exifRotation);
                Matrix matrix = new Matrix();
                matrix.setRotate((float) exifRotation);
                Bitmap createBitmap = Bitmap.createBitmap(decodeStream, 0, 0, decodeStream.getWidth(), decodeStream.getHeight(), matrix, true);
                decodeStream.recycle();
                decodeStream = createBitmap;
            }
            Log.d(TAG, "rescale complete");
            return decodeStream;
        } catch (OutOfMemoryError e) {
            Log.e(TAG, "Encounter problem when decode bitmap");
            return null;
        } catch (FileNotFoundException e2) {
            Log.e(TAG, "File Not found: " + e2.toString());
            return null;
        } catch (Exception e3) {
            Log.e(TAG, "Exception: see stacktrace");
            e3.printStackTrace();
            return null;
        }
    }

    protected Bitmap doInBackground(Uri... uriArr) {
        if (uriArr.length != 1) {
            throw new IllegalArgumentException("We expect to process only one Uri");
        }
        Log.d(TAG, "Rescale: Uri=" + uriArr[0].toString());
        if (isCancelled()) {
            return null;
        }
        Bitmap rescaleFromUri = rescaleFromUri(this.mContext, uriArr[0], this.mRequiredSize);
        if (!isCancelled()) {
            return rescaleFromUri;
        }
        if (rescaleFromUri == null) {
            return null;
        }
        rescaleFromUri.recycle();
        return null;
    }
}
