package com.catfiz.media;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Matrix;
import android.net.Uri;
import android.os.Environment;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import com.catfiz.pool.PoolDataStorage;
import com.catfiz.pool.PoolLimitedDownloadExecutor;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishService;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.util.CFURLSpan;
import com.catfiz.util.ExifRotateUtils;
import com.catfiz.util.Log;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;

public class CatfishPhotoStorage extends StorageDir {
    public static final float DEFAULT_BIGTHUMBNAIL_SIZE = 75.0f;
    public static final float DEFAULT_EXTRALARGE_SIZE = 120.0f;
    public static final float DEFAULT_PROFILEPHOTO_SIZE = 75.0f;
    public static final float DEFAULT_SMALLTHUMBNAIL_SIZE = 24.0f;
    public static final float DEFAULT_THUMBNAIL_SIZE = 48.0f;
    private static final String TAG = "CatfishPhotoStorage";
    public static boolean mExternalStorageAvailable = false;
    private static BroadcastReceiver mExternalStorageReceiver = null;
    public static boolean mExternalStorageWriteable = false;
    public static final String mParentPath = (Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + CatfishService.FILE_PACKAGE_NAME_CATFIZ);
    public static final String mPoolParentPath = (Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + CatfishService.FILE_PACKAGE_NAME_CATFIZ + "/pool/");
    public static final String mPoolProfilePicPath = (Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + CatfishService.FILE_PACKAGE_NAME_CATFIZ + "/pool/profile_pic/");
    public static final String mPoolThumbnailPath = (Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + CatfishService.FILE_PACKAGE_NAME_CATFIZ + "/pool/thumbs/");
    public static final String mPoolThumbnailProfilePath = (Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + CatfishService.FILE_PACKAGE_NAME_CATFIZ + "/pool/profile/");
    private static long unique_thumb_id = 0;

    public class UniqueThumbId {
        public synchronized long generate() {
            long currentTimeMillis = System.currentTimeMillis();
            while (currentTimeMillis == CatfishPhotoStorage.unique_thumb_id) {
                try {
                    wait(1);
                } catch (InterruptedException e) {
                }
                currentTimeMillis = System.currentTimeMillis();
            }
            CatfishPhotoStorage.unique_thumb_id = currentTimeMillis;
            return CatfishPhotoStorage.unique_thumb_id;
        }
    }

    public static File createFriendProfilePhotoFile(Context context, String str) {
        File file;
        IOException e;
        if (!isPhotoStorageMounted()) {
            return null;
        }
        String str2 = "pff" + str + ".jpg";
        try {
            new File(getPhotoStorageDir(context)).mkdirs();
            file = new File(getPhotoStorageDir(context), ".nomedia");
            if (!file.exists()) {
                file.createNewFile();
            }
            file = new File(getPhotoStorageDir(context), str2);
            try {
                if (file.exists()) {
                    return file;
                }
                Log.d(TAG, "Create New Friend Profile Photo: " + str2);
                file.createNewFile();
                return file;
            } catch (IOException e2) {
                e = e2;
                Log.e(TAG, "Error:" + e.toString());
                return file;
            }
        } catch (IOException e3) {
            IOException iOException = e3;
            file = null;
            e = iOException;
            Log.e(TAG, "Error:" + e.toString());
            return file;
        }
    }

    public static File createFriendProfileThumbFile(Context context, String str) {
        IOException e;
        if (!isPhotoStorageMounted()) {
            return null;
        }
        String str2 = "pff" + str + ".thumb.jpg";
        File file;
        try {
            new File(getPhotoStorageDir(context)).mkdirs();
            file = new File(getPhotoStorageDir(context), ".nomedia");
            if (!file.exists()) {
                file.createNewFile();
            }
            file = new File(getPhotoStorageDir(context), str2);
            try {
                if (file.exists()) {
                    return file;
                }
                Log.d(TAG, "Create New Friend Profile Photo: " + str2);
                file.createNewFile();
                return file;
            } catch (IOException e2) {
                e = e2;
                Log.e(TAG, "Error:" + e.toString());
                return file;
            }
        } catch (IOException e3) {
            IOException iOException = e3;
            file = null;
            e = iOException;
            Log.e(TAG, "Error:" + e.toString());
            return file;
        }
    }

    public static boolean delFriendFoto(Context context, String str) {
        File friendProfilePhotoFile = getFriendProfilePhotoFile(context, str);
        File friendProfileThumbFile = getFriendProfileThumbFile(context, str);
        if (friendProfileThumbFile != null) {
            friendProfileThumbFile.delete();
        }
        if (friendProfilePhotoFile == null) {
            return false;
        }
        if (!friendProfilePhotoFile.exists()) {
            return true;
        }
        friendProfilePhotoFile.delete();
        return true;
    }

    public static boolean delPromotedFriendPhoto(Context context, String str) {
        File promoteFriendProfilePhotoFile = getPromoteFriendProfilePhotoFile(context, str);
        if (promoteFriendProfilePhotoFile == null) {
            return false;
        }
        promoteFriendProfilePhotoFile.delete();
        return true;
    }

    public static File getCacheFile(Context context, String str) {
        File file;
        IOException e;
        if (!isPhotoStorageMounted()) {
            return null;
        }
        try {
            new File(getCacheStorageDir(context)).mkdirs();
            file = new File(getCacheStorageDir(context), ".nomedia");
            if (!file.exists()) {
                file.createNewFile();
            }
            file = new File(getCacheStorageDir(context), str);
            try {
                if (file.exists()) {
                    file.delete();
                }
                file.createNewFile();
                return file;
            } catch (IOException e2) {
                e = e2;
                Log.e(TAG, "Error:" + e.toString());
                return file;
            }
        } catch (IOException e3) {
            IOException iOException = e3;
            file = null;
            e = iOException;
            Log.e(TAG, "Error:" + e.toString());
            return file;
        }
    }

    public static String getCacheStorageDir(Context context) {
        return mParentPath + "/cache";
    }

    private static int getDefaultPoolPhotoId(Context context) {
        int i = 0;
        try {
            i = context.getPackageManager().getApplicationInfo(context.getPackageName(), AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS).metaData.getInt("defaultPoolPhoto");
        } catch (NameNotFoundException e) {
            e.printStackTrace();
        }
        Log.d(TAG, " --- Notification, getNotificationIconFriend = --- " + i);
        return i;
    }

    private static int getDefaultUserPhotoId(Context context) {
        int i = 0;
        try {
            i = context.getPackageManager().getApplicationInfo(context.getPackageName(), AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS).metaData.getInt("defaultUserPhoto");
        } catch (NameNotFoundException e) {
            e.printStackTrace();
        }
        Log.d(TAG, " --- Notification, getNotificationIconFriend = --- " + i);
        return i;
    }

    private static int getDefaultUserPhotoPromoteGroup(Context context) {
        int i = 0;
        try {
            i = context.getPackageManager().getApplicationInfo(context.getPackageName(), AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS).metaData.getInt("defaultUserPhotoPromoteGroup");
        } catch (NameNotFoundException e) {
            e.printStackTrace();
        }
        Log.d(TAG, " --- Notification, getNotificationIconFriend = --- " + i);
        return i;
    }

    public static Bitmap getDownloadImageInPool(Context context, String str) {
        Bitmap decodeStream;
        FileInputStream fileInputStream;
        Throwable th;
        FileNotFoundException e;
        if (isPhotoStorageMounted()) {
            try {
                File file = new File(str);
                if (file.exists()) {
                    FileInputStream fileInputStream2;
                    try {
                        fileInputStream2 = new FileInputStream(file);
                        try {
                            Options options = new Options();
                            options.inPreferredConfig = Config.ARGB_8888;
                            options.inDither = false;
                            decodeStream = BitmapFactory.decodeStream(fileInputStream2, null, options);
                            if (fileInputStream2 != null) {
                                try {
                                    fileInputStream2.close();
                                } catch (IOException e2) {
                                }
                            }
                        } catch (OutOfMemoryError e3) {
                            fileInputStream = fileInputStream2;
                            try {
                                Log.e(TAG, "Encounter problem when decode bitmap");
                                if (fileInputStream != null) {
                                    try {
                                        fileInputStream.close();
                                    } catch (IOException e4) {
                                    }
                                }
                                decodeStream = null;
                                return decodeStream != null ? BitmapFactory.decodeResource(context.getResources(), getDefaultPoolPhotoId(context)) : decodeStream;
                            } catch (Throwable th2) {
                                Throwable th3 = th2;
                                fileInputStream2 = fileInputStream;
                                th = th3;
                                if (fileInputStream2 != null) {
                                    try {
                                        fileInputStream2.close();
                                    } catch (IOException e5) {
                                    }
                                }
                                throw th;
                            }
                        } catch (FileNotFoundException e6) {
                            e = e6;
                            try {
                                Log.e(TAG, "Error:" + e.toString());
                                if (fileInputStream2 != null) {
                                    try {
                                        fileInputStream2.close();
                                    } catch (IOException e7) {
                                    }
                                }
                                decodeStream = null;
                                if (decodeStream != null) {
                                }
                            } catch (Throwable th4) {
                                th = th4;
                                if (fileInputStream2 != null) {
                                    fileInputStream2.close();
                                }
                                throw th;
                            }
                        }
                    } catch (OutOfMemoryError e8) {
                        fileInputStream = null;
                        Log.e(TAG, "Encounter problem when decode bitmap");
                        if (fileInputStream != null) {
                            fileInputStream.close();
                        }
                        decodeStream = null;
                        if (decodeStream != null) {
                        }
                    } catch (FileNotFoundException e9) {
                        e = e9;
                        fileInputStream2 = null;
                        Log.e(TAG, "Error:" + e.toString());
                        if (fileInputStream2 != null) {
                            fileInputStream2.close();
                        }
                        decodeStream = null;
                        if (decodeStream != null) {
                        }
                    } catch (Throwable th5) {
                        th = th5;
                        fileInputStream2 = null;
                        if (fileInputStream2 != null) {
                            fileInputStream2.close();
                        }
                        throw th;
                    }
                    if (decodeStream != null) {
                    }
                }
            } catch (Exception e10) {
                Log.e(TAG, "Error: " + e10.toString());
                decodeStream = null;
            }
        }
        decodeStream = null;
        if (decodeStream != null) {
        }
    }

    public static Bitmap getDownloadThumbBitmap(Context context, String str) {
        Bitmap downloadThumbBitmapOnly = getDownloadThumbBitmapOnly(context, str);
        return downloadThumbBitmapOnly == null ? ImageReScaler.rescaleFromResources(context.getResources(), getDefaultUserPhotoId(context), (float) DEFAULT_THUMBNAIL_SIZE) : downloadThumbBitmapOnly;
    }

    public static Bitmap getDownloadThumbBitmapInPool(Context context, String str) {
        Bitmap rescaleFromFilePath;
        if (isPhotoStorageMounted()) {
            try {
                rescaleFromFilePath = ImageReScaler.rescaleFromFilePath(context, new File(new URI(str)).getAbsolutePath(), 69.0f);
            } catch (Exception e) {
                Log.e(TAG, "Error: " + e.toString());
                rescaleFromFilePath = null;
            }
        } else {
            rescaleFromFilePath = null;
        }
        return rescaleFromFilePath == null ? BitmapFactory.decodeResource(context.getResources(), getDefaultPoolPhotoId(context)) : rescaleFromFilePath;
    }

    public static Bitmap getDownloadThumbBitmapInPool(Context context, String str, Resources resources, String str2) {
        Bitmap rescaleFromFilePath;
        if (isPhotoStorageMounted()) {
            try {
                rescaleFromFilePath = ImageReScaler.rescaleFromFilePath(context, new File(new URI(str)).getAbsolutePath(), 69.0f);
            } catch (Exception e) {
                Log.e(TAG, "Error: " + e.toString());
                rescaleFromFilePath = null;
            }
        } else {
            rescaleFromFilePath = null;
        }
        return rescaleFromFilePath == null ? BitmapFactory.decodeResource(resources, resources.getIdentifier("nopic_pool", "drawable", str2)) : rescaleFromFilePath;
    }

    public static Bitmap getDownloadThumbBitmapOnly(Context context, String str) {
        FileInputStream fileInputStream;
        FileInputStream fileInputStream2;
        Bitmap bitmap;
        Throwable th;
        FileNotFoundException fileNotFoundException;
        if (!isPhotoStorageMounted()) {
            return null;
        }
        try {
            File file = new File(new URI(str));
            if (file.exists()) {
                try {
                    int calculateSampleSize;
                    fileInputStream = new FileInputStream(file);
                    try {
                        Options options = new Options();
                        options.inJustDecodeBounds = true;
                        BitmapFactory.decodeStream(fileInputStream, null, options);
                        calculateSampleSize = ImageReScaler.calculateSampleSize(options.outWidth, options.outHeight, (int) ((context.getResources().getDisplayMetrics().density * DEFAULT_EXTRALARGE_SIZE) + 0.5f));
                        fileInputStream2 = new FileInputStream(file);
                    } catch (OutOfMemoryError e) {
                        try {
                            Log.e(TAG, "Encounter problem when decode bitmap");
                            if (fileInputStream != null) {
                                try {
                                    fileInputStream.close();
                                } catch (IOException e2) {
                                }
                            }
                            bitmap = null;
                            return bitmap;
                        } catch (Throwable th2) {
                            fileInputStream2 = fileInputStream;
                            th = th2;
                            if (fileInputStream2 != null) {
                                try {
                                    fileInputStream2.close();
                                } catch (IOException e3) {
                                }
                            }
                            throw th;
                        }
                    } catch (FileNotFoundException e4) {
                        fileInputStream2 = fileInputStream;
                        fileNotFoundException = e4;
                        try {
                            Log.e(TAG, "Error:" + fileNotFoundException.toString());
                            if (fileInputStream2 != null) {
                                try {
                                    fileInputStream2.close();
                                } catch (IOException e5) {
                                }
                            }
                            bitmap = null;
                            return bitmap;
                        } catch (Throwable th3) {
                            th = th3;
                            if (fileInputStream2 != null) {
                                fileInputStream2.close();
                            }
                            throw th;
                        }
                    } catch (Throwable th22) {
                        fileInputStream2 = fileInputStream;
                        th = th22;
                        if (fileInputStream2 != null) {
                            fileInputStream2.close();
                        }
                        throw th;
                    }
                    try {
                        Options options2 = new Options();
                        options2.inPreferredConfig = Config.ARGB_8888;
                        options2.inSampleSize = calculateSampleSize;
                        options2.inDither = false;
                        bitmap = BitmapFactory.decodeStream(fileInputStream2, null, options2);
                        int exifRotation = ExifRotateUtils.getExifRotation(file);
                        if (exifRotation != 0) {
                            Log.d(TAG, "ROTATE: " + exifRotation);
                            Matrix matrix = new Matrix();
                            matrix.setRotate((float) exifRotation);
                            Bitmap createBitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
                            bitmap.recycle();
                            bitmap = createBitmap;
                        }
                        if (fileInputStream2 != null) {
                            try {
                                fileInputStream2.close();
                            } catch (IOException e6) {
                            }
                        }
                    } catch (OutOfMemoryError e7) {
                        fileInputStream = fileInputStream2;
                        Log.e(TAG, "Encounter problem when decode bitmap");
                        if (fileInputStream != null) {
                            fileInputStream.close();
                        }
                        bitmap = null;
                        return bitmap;
                    } catch (FileNotFoundException e8) {
                        fileNotFoundException = e8;
                        Log.e(TAG, "Error:" + fileNotFoundException.toString());
                        if (fileInputStream2 != null) {
                            fileInputStream2.close();
                        }
                        bitmap = null;
                        return bitmap;
                    }
                } catch (OutOfMemoryError e9) {
                    fileInputStream = null;
                    Log.e(TAG, "Encounter problem when decode bitmap");
                    if (fileInputStream != null) {
                        fileInputStream.close();
                    }
                    bitmap = null;
                    return bitmap;
                } catch (FileNotFoundException e10) {
                    fileNotFoundException = e10;
                    fileInputStream2 = null;
                    Log.e(TAG, "Error:" + fileNotFoundException.toString());
                    if (fileInputStream2 != null) {
                        fileInputStream2.close();
                    }
                    bitmap = null;
                    return bitmap;
                } catch (Throwable th4) {
                    th = th4;
                    fileInputStream2 = null;
                    if (fileInputStream2 != null) {
                        fileInputStream2.close();
                    }
                    throw th;
                }
            } else {
                bitmap = null;
            }
            return bitmap;
        } catch (URISyntaxException e11) {
            Log.e(TAG, "Error: " + e11.toString());
            return null;
        }
    }

    public static File getDownloadThumbFile(Context context, String str) {
        IOException e;
        if (!isPhotoStorageMounted()) {
            return null;
        }
        String str2 = CatfishRESTAPI.CFCOMPACT_STICKERFORMATTYPE + str + "." + String.valueOf(new UniqueThumbId().generate()) + ".jpg";
        File file;
        try {
            new File(getThumbnailStorageDir(context)).mkdirs();
            file = new File(getThumbnailStorageDir(context), ".nomedia");
            if (!file.exists()) {
                file.createNewFile();
            }
            file = new File(getThumbnailStorageDir(context), str2);
            try {
                if (file.exists()) {
                    file.delete();
                }
                file.createNewFile();
                return file;
            } catch (IOException e2) {
                e = e2;
                Log.e(TAG, "Error:" + e.toString());
                return file;
            }
        } catch (IOException e3) {
            IOException iOException = e3;
            file = null;
            e = iOException;
            Log.e(TAG, "Error:" + e.toString());
            return file;
        }
    }

    public static File getDownloadThumbStream(Context context, String str) {
        IOException e;
        if (!isPhotoStorageMounted()) {
            return null;
        }
        UniqueThumbId uniqueThumbId = new UniqueThumbId();
        String str2 = str + ".png";
        File file;
        try {
            new File(getThumbnailStorageDir(context)).mkdirs();
            file = new File(getThumbnailStorageDir(context), ".nomedia");
            if (!file.exists()) {
                file.createNewFile();
            }
            file = new File(getThumbnailStorageDir(context), str2);
            try {
                if (file.exists()) {
                    file.delete();
                }
                file.createNewFile();
                return file;
            } catch (IOException e2) {
                e = e2;
                Log.e(TAG, "Error:" + e.toString());
                return file;
            }
        } catch (IOException e3) {
            IOException iOException = e3;
            file = null;
            e = iOException;
            Log.e(TAG, "Error:" + e.toString());
            return file;
        }
    }

    public static String getExternalDownloadDir(Context context) {
        return Environment.getExternalStorageDirectory().getAbsolutePath() + CFURLSpan.CATFIZ_DOWNLOAD_PATH;
    }

    public static File getFriendPhotoFileForPoolPromote(Context context, String str) {
        File friendProfilePhotoFile = getFriendProfilePhotoFile(context, str);
        return friendProfilePhotoFile == null ? null : friendProfilePhotoFile;
    }

    public static Bitmap getFriendProfilePhotoBitmap(Context context, String str) {
        return getFriendProfilePhotoBitmap(context, str, Integer.valueOf(getDefaultUserPhotoId(context)));
    }

    public static Bitmap getFriendProfilePhotoBitmap(Context context, String str, Integer num) {
        Bitmap friendProfilePhotoBitmapOnly = getFriendProfilePhotoBitmapOnly(context, str, (float) DEFAULT_THUMBNAIL_SIZE);
        return (friendProfilePhotoBitmapOnly != null || num == null) ? friendProfilePhotoBitmapOnly : ImageReScaler.rescaleFromResources(context.getResources(), num.intValue(), (float) DEFAULT_THUMBNAIL_SIZE);
    }

    public static Bitmap getFriendProfilePhotoBitmapOnly(Context context, String str, float f) {
        File friendProfilePhotoFile = getFriendProfilePhotoFile(context, str);
        if (friendProfilePhotoFile == null) {
            return null;
        }
        Log.d(TAG, "getFriendProfilePhotoBitmap PATH=" + friendProfilePhotoFile.getAbsolutePath());
        return ImageReScaler.rescaleFromFilePath(context, friendProfilePhotoFile.getAbsolutePath(), f);
    }

    public static Bitmap getFriendProfilePhotoBitmapOnly(Context context, String str, int i) {
        File friendProfilePhotoFile = getFriendProfilePhotoFile(context, str);
        if (friendProfilePhotoFile == null) {
            return null;
        }
        Log.d(TAG, "getFriendProfilePhotoBitmap PATH=" + friendProfilePhotoFile.getAbsolutePath());
        return ImageReScaler.rescaleFromFilePath(context, friendProfilePhotoFile.getAbsolutePath(), (float) i);
    }

    public static File getFriendProfilePhotoFile(Context context, String str) {
        File file;
        IOException e;
        if (!isPhotoStorageMounted()) {
            return null;
        }
        String str2 = "pff" + str + ".jpg";
        try {
            new File(getPhotoStorageDir(context)).mkdirs();
            file = new File(getPhotoStorageDir(context), ".nomedia");
            if (!file.exists()) {
                file.createNewFile();
            }
            file = new File(getPhotoStorageDir(context), str2);
            try {
                return !file.exists() ? null : file;
            } catch (IOException e2) {
                e = e2;
                Log.e(TAG, "Error:" + e.toString());
                return file;
            }
        } catch (IOException e3) {
            IOException iOException = e3;
            file = null;
            e = iOException;
            Log.e(TAG, "Error:" + e.toString());
            return file;
        }
    }

    public static File getFriendProfilePhotoFileTemp(Context context, String str) {
        if (!isPhotoStorageMounted()) {
            return null;
        }
        String str2 = "pff" + str + ".jpg.temp";
        try {
            new File(getPhotoStorageDir(context)).mkdirs();
            File file = new File(getPhotoStorageDir(context), ".nomedia");
            if (!file.exists()) {
                file.createNewFile();
            }
            file = new File(getPhotoStorageDir(context), str2);
            if (file.exists()) {
                Log.d(TAG, "Temporary File (" + str2 + ") exists. Delete.");
                file.delete();
            }
            if (file.exists()) {
                return file;
            }
            Log.d(TAG, "Create New Friend Temporary Profile Photo: " + str2);
            file.createNewFile();
            return file;
        } catch (IOException e) {
            Log.e(TAG, "Error:" + e.toString());
            return null;
        }
    }

    public static Bitmap getFriendProfileThumbBitmap(Context context, String str) {
        FileInputStream fileInputStream;
        Throwable th;
        FileInputStream fileInputStream2;
        FileNotFoundException fileNotFoundException;
        Bitmap bitmap = null;
        File friendProfileThumbFile = getFriendProfileThumbFile(context, str);
        if (friendProfileThumbFile != null && friendProfileThumbFile.exists()) {
            try {
                fileInputStream = new FileInputStream(friendProfileThumbFile);
                try {
                    Options options = new Options();
                    options.inPreferredConfig = Config.ARGB_8888;
                    options.inDither = false;
                    bitmap = BitmapFactory.decodeStream(fileInputStream, null, options);
                    if (fileInputStream != null) {
                        try {
                            fileInputStream.close();
                        } catch (IOException e) {
                        }
                    }
                } catch (OutOfMemoryError e2) {
                    try {
                        Log.e(TAG, "Encounter problem when decode bitmap");
                        if (fileInputStream != null) {
                            try {
                                fileInputStream.close();
                            } catch (IOException e3) {
                            }
                        }
                        return bitmap;
                    } catch (Throwable th2) {
                        th = th2;
                        if (fileInputStream != null) {
                            try {
                                fileInputStream.close();
                            } catch (IOException e4) {
                            }
                        }
                        throw th;
                    }
                } catch (FileNotFoundException e5) {
                    FileNotFoundException fileNotFoundException2 = e5;
                    fileInputStream2 = fileInputStream;
                    fileNotFoundException = fileNotFoundException2;
                    try {
                        Log.e(TAG, "Error:" + fileNotFoundException.toString());
                        if (fileInputStream2 != null) {
                            try {
                                fileInputStream2.close();
                            } catch (IOException e6) {
                            }
                        }
                        return bitmap;
                    } catch (Throwable th3) {
                        th = th3;
                        fileInputStream = fileInputStream2;
                        if (fileInputStream != null) {
                            fileInputStream.close();
                        }
                        throw th;
                    }
                }
            } catch (OutOfMemoryError e7) {
                fileInputStream = bitmap;
                Log.e(TAG, "Encounter problem when decode bitmap");
                if (fileInputStream != null) {
                    fileInputStream.close();
                }
                return bitmap;
            } catch (FileNotFoundException e8) {
                fileNotFoundException = e8;
                fileInputStream2 = bitmap;
                Log.e(TAG, "Error:" + fileNotFoundException.toString());
                if (fileInputStream2 != null) {
                    fileInputStream2.close();
                }
                return bitmap;
            } catch (Throwable th4) {
                Throwable th5 = th4;
                fileInputStream = bitmap;
                th = th5;
                if (fileInputStream != null) {
                    fileInputStream.close();
                }
                throw th;
            }
        }
        return bitmap;
    }

    public static File getFriendProfileThumbFile(Context context, String str) {
        IOException e;
        if (!isPhotoStorageMounted()) {
            return null;
        }
        String str2 = "pff" + str + ".thumb.jpg";
        File file;
        try {
            new File(getPhotoStorageDir(context)).mkdirs();
            file = new File(getPhotoStorageDir(context), ".nomedia");
            if (!file.exists()) {
                file.createNewFile();
            }
            file = new File(getPhotoStorageDir(context), str2);
            try {
                return !file.exists() ? null : file;
            } catch (IOException e2) {
                e = e2;
                Log.e(TAG, "Error:" + e.toString());
                return file;
            }
        } catch (IOException e3) {
            IOException iOException = e3;
            file = null;
            e = iOException;
            Log.e(TAG, "Error:" + e.toString());
            return file;
        }
    }

    public static String getImageStorageDir(Context context) {
        return mParentPath + "/image";
    }

    public static String getPhotoStorageDir(Context context) {
        return mParentPath + "/files";
    }

    public static Bitmap getPhotoThumbSized(Context context, String str) {
        FileInputStream fileInputStream;
        if (!isPhotoStorageMounted()) {
            return null;
        }
        try {
            Bitmap rescaleFromFilePath;
            File file = new File(str);
            fileInputStream = null;
            if (file.exists()) {
                rescaleFromFilePath = ImageReScaler.rescaleFromFilePath(context, file.getAbsolutePath(), DEFAULT_THUMBNAIL_SIZE);
                if (null != null) {
                    try {
                        fileInputStream.close();
                    } catch (IOException e) {
                    }
                }
            } else {
                rescaleFromFilePath = null;
            }
            return rescaleFromFilePath;
        } catch (Exception e2) {
            Log.e(TAG, "Error: " + e2.toString());
            return null;
        } catch (Throwable th) {
            if (null != null) {
                try {
                    fileInputStream.close();
                } catch (IOException e3) {
                }
            }
        }
    }

    public static Bitmap getPoolPhotoInDBThread(Context context, String str) {
        Cursor topic = new PoolDataStorage(context).getTopic(str);
        return topic.moveToFirst() ? getDownloadThumbBitmapInPool(context, topic.getString(topic.getColumnIndex(ServerMessageDataStorage.IMAGETHUMB_URI))) : null;
    }

    public static Bitmap getPoolProfilePhotoImage(Context context, String str) {
        Bitmap decodeStream;
        FileInputStream fileInputStream;
        Throwable th;
        FileNotFoundException e;
        if (!isPhotoStorageMounted()) {
            return null;
        }
        try {
            File file = new File(str);
            if (file.exists()) {
                FileInputStream fileInputStream2;
                try {
                    Options options = new Options();
                    options.inJustDecodeBounds = true;
                    BitmapFactory.decodeStream(null, null, options);
                    ImageReScaler.calculateSampleSize(options.outWidth, options.outHeight, (int) ((context.getResources().getDisplayMetrics().density * DEFAULT_THUMBNAIL_SIZE) + 0.5f));
                    fileInputStream2 = new FileInputStream(file);
                    try {
                        Options options2 = new Options();
                        options2.inPreferredConfig = Config.ARGB_8888;
                        options2.inDither = false;
                        decodeStream = BitmapFactory.decodeStream(fileInputStream2, null, options2);
                        if (fileInputStream2 != null) {
                            try {
                                fileInputStream2.close();
                            } catch (IOException e2) {
                            }
                        }
                    } catch (OutOfMemoryError e3) {
                        fileInputStream = fileInputStream2;
                        try {
                            Log.e(TAG, "Encounter problem when decode bitmap");
                            if (fileInputStream != null) {
                                try {
                                    fileInputStream.close();
                                } catch (IOException e4) {
                                }
                            }
                            decodeStream = null;
                            return decodeStream;
                        } catch (Throwable th2) {
                            Throwable th3 = th2;
                            fileInputStream2 = fileInputStream;
                            th = th3;
                            if (fileInputStream2 != null) {
                                try {
                                    fileInputStream2.close();
                                } catch (IOException e5) {
                                }
                            }
                            throw th;
                        }
                    } catch (FileNotFoundException e6) {
                        e = e6;
                        try {
                            Log.e(TAG, "Error:" + e.toString());
                            if (fileInputStream2 != null) {
                                try {
                                    fileInputStream2.close();
                                } catch (IOException e7) {
                                }
                            }
                            decodeStream = null;
                            return decodeStream;
                        } catch (Throwable th4) {
                            th = th4;
                            if (fileInputStream2 != null) {
                                fileInputStream2.close();
                            }
                            throw th;
                        }
                    }
                } catch (OutOfMemoryError e8) {
                    fileInputStream = null;
                    Log.e(TAG, "Encounter problem when decode bitmap");
                    if (fileInputStream != null) {
                        fileInputStream.close();
                    }
                    decodeStream = null;
                    return decodeStream;
                } catch (FileNotFoundException e9) {
                    e = e9;
                    fileInputStream2 = null;
                    Log.e(TAG, "Error:" + e.toString());
                    if (fileInputStream2 != null) {
                        fileInputStream2.close();
                    }
                    decodeStream = null;
                    return decodeStream;
                } catch (Throwable th5) {
                    th = th5;
                    fileInputStream2 = null;
                    if (fileInputStream2 != null) {
                        fileInputStream2.close();
                    }
                    throw th;
                }
            } else {
                decodeStream = null;
            }
            return decodeStream;
        } catch (Exception e10) {
            Log.e(TAG, "Error: " + e10.toString());
            return null;
        }
    }

    public static Bitmap getPromoteBitmap(Context context, String str) {
        return getFriendProfilePhotoBitmap(context, str, Integer.valueOf(getDefaultUserPhotoPromoteGroup(context)));
    }

    public static File getPromoteFriendProfilePhotoFile(Context context, String str) {
        if (isPhotoStorageMounted()) {
            String str2 = "img" + str + ".jpg";
            try {
                new File(getImageStorageDir(context)).mkdirs();
                File file = new File(getImageStorageDir(context), ".nomedia");
                if (!file.exists()) {
                    file.createNewFile();
                }
                file = new File(getImageStorageDir(context), str2);
                if (file.exists()) {
                    return file;
                }
            } catch (IOException e) {
            }
        }
        return null;
    }

    public static File getPromoteFriendProfilePhotoFileTemp(Context context, String str) {
        IOException e;
        if (!isPhotoStorageMounted()) {
            return null;
        }
        String str2 = "img" + str + ".jpg.temp";
        File file;
        try {
            new File(getImageStorageDir(context)).mkdirs();
            file = new File(getImageStorageDir(context), ".nomedia");
            if (!file.exists()) {
                file.createNewFile();
            }
            file = new File(getImageStorageDir(context), str2);
            try {
                if (file.exists()) {
                    Log.d(TAG, "Temporary File (" + str2 + ") exists. Delete.");
                    file.delete();
                }
                if (file.exists()) {
                    return file;
                }
                Log.d(TAG, "Create New Promote Friend Temporary Profile Photo: " + str2);
                file.createNewFile();
                return file;
            } catch (IOException e2) {
                e = e2;
                Log.e(TAG, "Error:" + e.toString());
                return file;
            }
        } catch (IOException e3) {
            IOException iOException = e3;
            file = null;
            e = iOException;
            Log.e(TAG, "Error:" + e.toString());
            return file;
        }
    }

    public static Bitmap getPromotedFriendProfilePhotoBitmapInPool(Context context, String str) {
        Bitmap bitmap = null;
        if (isPhotoStorageMounted()) {
            String str2 = "pff" + str + ".jpg";
            if (str != null && str.compareTo(CatfishService.getUserPIN()) == 0) {
                str2 = "pf" + CatfishService.getUserPIN() + ".jpg";
            }
            bitmap = ImageReScaler.rescaleFromFilePath(context, new File(PoolLimitedDownloadExecutor.mParentFilePath, str2).getAbsolutePath(), DEFAULT_THUMBNAIL_SIZE);
            if (bitmap == null) {
                bitmap = getPromoteBitmap(context, str);
            }
        }
        return bitmap == null ? ImageReScaler.rescaleFromResources(context.getResources(), getDefaultUserPhotoPromoteGroup(context), (float) DEFAULT_THUMBNAIL_SIZE) : bitmap;
    }

    public static Bitmap getPromotedProfilePhotoBitmap(Context context, String str) {
        return getPromotedProfilePhotoBitmap(context, str, Integer.valueOf(getDefaultUserPhotoId(context)));
    }

    public static Bitmap getPromotedProfilePhotoBitmap(Context context, String str, Integer num) {
        Bitmap promotedProfilePhotoBitmapOnly = getPromotedProfilePhotoBitmapOnly(context, str, (float) DEFAULT_PROFILEPHOTO_SIZE);
        return (promotedProfilePhotoBitmapOnly != null || num == null) ? promotedProfilePhotoBitmapOnly : ImageReScaler.rescaleFromResources(context.getResources(), num.intValue(), (float) DEFAULT_PROFILEPHOTO_SIZE);
    }

    public static Bitmap getPromotedProfilePhotoBitmapOnly(Context context, String str, float f) {
        File promoteFriendProfilePhotoFile = getPromoteFriendProfilePhotoFile(context, str);
        return promoteFriendProfilePhotoFile != null ? ImageReScaler.rescaleFromFilePath(context, promoteFriendProfilePhotoFile.getAbsolutePath(), f) : null;
    }

    public static Bitmap getPromotedProfilePhotoBitmapOnly(Context context, String str, int i) {
        File promoteFriendProfilePhotoFile = getPromoteFriendProfilePhotoFile(context, str);
        return promoteFriendProfilePhotoFile != null ? ImageReScaler.rescaleFromFilePath(context, promoteFriendProfilePhotoFile.getAbsolutePath(), (float) i) : null;
    }

    public static File getThumbStream(Context context, String str) {
        if (!isPhotoStorageMounted()) {
            return null;
        }
        UniqueThumbId uniqueThumbId = new UniqueThumbId();
        String str2 = str + ".png";
        try {
            new File(getThumbnailStorageDir(context)).mkdirs();
            File file = new File(getThumbnailStorageDir(context), ".nomedia");
            if (!file.exists()) {
                file.createNewFile();
            }
            file = new File(getThumbnailStorageDir(context), str2);
            if (file.exists()) {
                return file;
            }
        } catch (IOException e) {
            Log.e(TAG, "Error:" + e.toString());
        }
        return null;
    }

    public static String getThumbnailStorageDir(Context context) {
        return mParentPath + "/thumbs";
    }

    public static Bitmap getUndownloadedThumbBitmap(Context context, String str) {
        FileInputStream fileInputStream;
        Bitmap bitmap;
        Object obj;
        FileInputStream fileInputStream2;
        Throwable th;
        FileNotFoundException fileNotFoundException;
        FileInputStream fileInputStream3 = null;
        if (isPhotoStorageMounted()) {
            File file = new File(mPoolThumbnailPath + str);
            Log.d(TAG, " POOL THUMBNAIL FILE = " + mPoolThumbnailPath + str);
            if (file.exists()) {
                try {
                    fileInputStream = new FileInputStream(file);
                    try {
                        Options options = new Options();
                        options.inPreferredConfig = Config.ARGB_8888;
                        options.inDither = false;
                        Bitmap decodeStream = BitmapFactory.decodeStream(fileInputStream, null, options);
                        if (fileInputStream != null) {
                            try {
                                fileInputStream.close();
                            } catch (IOException e) {
                            }
                        }
                        bitmap = decodeStream;
                    } catch (OutOfMemoryError e2) {
                        try {
                            Log.e(TAG, "Encounter problem when decode bitmap");
                            if (fileInputStream != null) {
                                try {
                                    fileInputStream.close();
                                } catch (IOException e3) {
                                }
                            }
                            obj = fileInputStream3;
                            return bitmap != null ? BitmapFactory.decodeResource(context.getResources(), getDefaultPoolPhotoId(context)) : bitmap;
                        } catch (Throwable th2) {
                            fileInputStream2 = fileInputStream;
                            th = th2;
                            if (fileInputStream2 != null) {
                                try {
                                    fileInputStream2.close();
                                } catch (IOException e4) {
                                }
                            }
                            throw th;
                        }
                    } catch (FileNotFoundException e5) {
                        FileNotFoundException fileNotFoundException2 = e5;
                        fileInputStream2 = fileInputStream;
                        fileNotFoundException = fileNotFoundException2;
                        try {
                            Log.e(TAG, "Error:" + fileNotFoundException.toString());
                            if (fileInputStream2 != null) {
                                try {
                                    fileInputStream2.close();
                                } catch (IOException e6) {
                                }
                            }
                            obj = fileInputStream3;
                            if (bitmap != null) {
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            if (fileInputStream2 != null) {
                                fileInputStream2.close();
                            }
                            throw th;
                        }
                    }
                } catch (OutOfMemoryError e7) {
                    fileInputStream = fileInputStream3;
                    Log.e(TAG, "Encounter problem when decode bitmap");
                    if (fileInputStream != null) {
                        fileInputStream.close();
                    }
                    obj = fileInputStream3;
                    if (bitmap != null) {
                    }
                } catch (FileNotFoundException e8) {
                    fileNotFoundException = e8;
                    fileInputStream2 = fileInputStream3;
                    Log.e(TAG, "Error:" + fileNotFoundException.toString());
                    if (fileInputStream2 != null) {
                        fileInputStream2.close();
                    }
                    obj = fileInputStream3;
                    if (bitmap != null) {
                    }
                } catch (Throwable th4) {
                    th = th4;
                    fileInputStream2 = fileInputStream3;
                    if (fileInputStream2 != null) {
                        fileInputStream2.close();
                    }
                    throw th;
                }
                if (bitmap != null) {
                }
            }
        }
        obj = fileInputStream3;
        if (bitmap != null) {
        }
    }

    public static Bitmap getUserProfilePhotoBitmap(Context context) {
        return getUserProfilePhotoBitmap(context, Integer.valueOf(getDefaultUserPhotoId(context)));
    }

    public static Bitmap getUserProfilePhotoBitmap(Context context, Integer num) {
        Bitmap userProfilePhotoBitmapOnly = getUserProfilePhotoBitmapOnly(context, DEFAULT_THUMBNAIL_SIZE);
        return (userProfilePhotoBitmapOnly != null || num == null) ? userProfilePhotoBitmapOnly : ImageReScaler.rescaleFromResources(context.getResources(), num.intValue(), (float) DEFAULT_THUMBNAIL_SIZE);
    }

    public static Bitmap getUserProfilePhotoBitmapOnly(Context context, float f) {
        if (!isPhotoStorageMounted() || CatfishService.getUserPIN() == null) {
            return null;
        }
        return ImageReScaler.rescaleFromFilePath(context, new File(getPhotoStorageDir(context), "pf" + CatfishService.getUserPIN() + ".jpg").getAbsolutePath(), f);
    }

    public static File getUserProfilePhotoFile(Context context) {
        IOException e;
        if (isPhotoStorageMounted()) {
            String str = "pf" + CatfishService.getUserPIN() + ".jpg";
            File file;
            try {
                new File(getPhotoStorageDir(context)).mkdirs();
                file = new File(getPhotoStorageDir(context), ".nomedia");
                if (!file.exists()) {
                    file.createNewFile();
                }
                file = new File(getPhotoStorageDir(context), str);
                try {
                    if (file.exists()) {
                        return file;
                    }
                    Log.d(TAG, "Create New User Profile Photo: " + str);
                    file.createNewFile();
                    return file;
                } catch (IOException e2) {
                    e = e2;
                    Log.e(TAG, "Error:" + e.toString());
                    return file;
                }
            } catch (IOException e3) {
                IOException iOException = e3;
                file = null;
                e = iOException;
                Log.e(TAG, "Error:" + e.toString());
                return file;
            }
        }
        Log.e(TAG, "Error: SDCard is NOT MOUNTED");
        return null;
    }

    public static File getUserProfilePhotoFileTemp(Context context) {
        if (isPhotoStorageMounted()) {
            String str = "pf" + CatfishService.getUserPIN() + ".jpg.temp";
            try {
                new File(getPhotoStorageDir(context)).mkdirs();
                File file = new File(getPhotoStorageDir(context), ".nomedia");
                if (!file.exists()) {
                    file.createNewFile();
                }
                file = new File(getPhotoStorageDir(context), str);
                if (file.exists()) {
                    Log.d(TAG, "Temporary File (" + str + ")exists. Delete.");
                    file.delete();
                }
                if (file.exists()) {
                    return file;
                }
                Log.d(TAG, "Create New User Temporary Profile Photo:" + str);
                file.createNewFile();
                return file;
            } catch (IOException e) {
                Log.e(TAG, "Error:" + e.toString());
                return null;
            }
        }
        Log.e(TAG, "Error: SDCard is NOT MOUNTED");
        return null;
    }

    public static Uri getUserProfilePhotoFileUri(Context context) {
        File userProfilePhotoFile = getUserProfilePhotoFile(context);
        return userProfilePhotoFile == null ? null : Uri.fromFile(userProfilePhotoFile);
    }

    public static boolean isPhotoStorageMounted() {
        if (!mExternalStorageAvailable) {
            Log.e(TAG, "External Storage is not available");
        }
        if (!mExternalStorageWriteable) {
            Log.e(TAG, "External Storage is not writable");
        }
        return mExternalStorageAvailable && mExternalStorageWriteable;
    }

    public static Bitmap makeFriendThumbProfile(Context context, String str) {
        Bitmap rescaleFromFilePath = ImageReScaler.rescaleFromFilePath(context, new File(getPhotoStorageDir(context), "pff" + str + ".jpg").getAbsolutePath(), DEFAULT_SMALLTHUMBNAIL_SIZE);
        if (rescaleFromFilePath == null) {
            return null;
        }
        saveFriendProfileThumbBitmap(context, str, rescaleFromFilePath);
        return rescaleFromFilePath;
    }

    public static void saveFriendProfileThumbBitmap(Context context, String str, Bitmap bitmap) {
        Throwable th;
        File createFriendProfileThumbFile = createFriendProfileThumbFile(context, str);
        if (createFriendProfileThumbFile != null) {
            FileOutputStream fileOutputStream = null;
            FileOutputStream fileOutputStream2;
            try {
                fileOutputStream2 = new FileOutputStream(createFriendProfileThumbFile);
                try {
                    bitmap.compress(CompressFormat.JPEG, 60, fileOutputStream2);
                    if (fileOutputStream2 != null) {
                        try {
                            fileOutputStream2.close();
                        } catch (IOException e) {
                        }
                    }
                } catch (Exception e2) {
                    if (fileOutputStream2 != null) {
                        try {
                            fileOutputStream2.close();
                        } catch (IOException e3) {
                        }
                    }
                } catch (Throwable th2) {
                    Throwable th3 = th2;
                    fileOutputStream = fileOutputStream2;
                    th = th3;
                    if (fileOutputStream != null) {
                        try {
                            fileOutputStream.close();
                        } catch (IOException e4) {
                        }
                    }
                    throw th;
                }
            } catch (Exception e5) {
                fileOutputStream2 = null;
                if (fileOutputStream2 != null) {
                    fileOutputStream2.close();
                }
            } catch (Throwable th4) {
                th = th4;
                if (fileOutputStream != null) {
                    fileOutputStream.close();
                }
                throw th;
            }
        }
    }

    public static void setTempToFriendPhotoProfile(Context context, String str) {
        File file = new File(getPhotoStorageDir(context), "pff" + str + ".jpg.temp");
        File file2 = new File(getPhotoStorageDir(context), "pff" + str + ".jpg");
        File file3 = new File(getPhotoStorageDir(context), "pff" + str + ".thumb.jpg");
        if (file.exists() && file.exists()) {
            file2.delete();
            file.renameTo(new File(getPhotoStorageDir(context), "pff" + str + ".jpg"));
            if (file3.exists()) {
                file3.delete();
            }
            makeFriendThumbProfile(context, str);
        }
    }

    public static void setTempToPromoteFriendPhotoProfile(Context context, String str) {
        File file = new File(getImageStorageDir(context), "img" + str + ".jpg.temp");
        File file2 = new File(getImageStorageDir(context), "img" + str + ".jpg");
        if (file.exists() && file.exists()) {
            file2.delete();
            file.renameTo(new File(getImageStorageDir(context), "img" + str + ".jpg"));
        }
    }

    public static void setTempToUserPhotoProfile(Context context) {
        File file = new File(getPhotoStorageDir(context), "pf" + CatfishService.getUserPIN() + ".jpg.temp");
        File file2 = new File(getPhotoStorageDir(context), "pf" + CatfishService.getUserPIN() + ".jpg");
        if (file.exists() && file.exists()) {
            file2.delete();
            file.renameTo(new File(getPhotoStorageDir(context), "pf" + CatfishService.getUserPIN() + ".jpg"));
        }
    }

    public static void startWatchingPhotoStorage(Context context) {
        if (mExternalStorageReceiver == null) {
            mExternalStorageReceiver = new BroadcastReceiver() {
                public void onReceive(Context context, Intent intent) {
                    Log.d(CatfishPhotoStorage.TAG, "----Storage: " + intent.getData() + ", ACTION: " + intent.getAction());
                    CatfishPhotoStorage.updatePhotoStorageState();
                }
            };
            IntentFilter intentFilter = new IntentFilter();
            intentFilter.addAction("android.intent.action.MEDIA_MOUNTED");
            intentFilter.addAction("android.intent.action.MEDIA_UNMOUNTED");
            intentFilter.addDataScheme("file");
            context.registerReceiver(mExternalStorageReceiver, intentFilter);
            updatePhotoStorageState();
        }
    }

    public static void stopWatchingPhotoStorage(Context context) {
        if (mExternalStorageReceiver != null) {
            context.unregisterReceiver(mExternalStorageReceiver);
            mExternalStorageReceiver = null;
        }
    }

    private static void updatePhotoStorageState() {
        String externalStorageState = Environment.getExternalStorageState();
        if ("mounted".equals(externalStorageState)) {
            mExternalStorageAvailable = true;
            mExternalStorageWriteable = true;
        } else if ("mounted_ro".equals(externalStorageState)) {
            mExternalStorageAvailable = true;
            mExternalStorageWriteable = false;
        } else {
            mExternalStorageWriteable = false;
            mExternalStorageAvailable = false;
        }
    }
}
