package com.catfiz.localstorage;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.os.Environment;
import com.catfiz.service.CatfishService;
import com.catfiz.util.Log;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Arrays;

public class ChunkStorage {
    public static final String CHUNK = "chunk";
    public static final String CHUNKINDEX = "chunkindex";
    public static final String CHUNKSIZE = "chunksize";
    public static final String CHUNK_TABLE_NAME = "chunk";
    public static final String DATAID = "dataid";
    public static final String DATAID_KEY_IDX = "dataid_idx";
    public static final String DATAKEY = "datakey";
    public static final String DATAKEY_KEY_IDX = "datakey_idx";
    public static final String DATASIZE = "datasize";
    public static final String DATA_TABLE_NAME = "data";
    public static final int MAX_CHUNK_SIZE = 5120;
    private static final String TAG = "ChunkStorage";
    public static final String TIMESTAMP = "timestamp";
    private static boolean isTransactionBegin = false;
    private SQLiteDatabase mChunkStorageDB = null;
    private Context mContext;
    private DatabaseHelper mDBHelper = null;

    class DatabaseHelper extends SQLiteOpenHelper {
        private static final String DATABASE_NAME = "chunk";
        private static final int DATABASE_VERSION = 1;
        private static final String PATH = (Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + CatfishService.FILE_PACKAGE_NAME_CATFIZ + "/");

        public DatabaseHelper(Context context) {
            super(context, PATH + DATABASE_NAME, null, DATABASE_VERSION);
        }

        private void buildChunkTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS chunk(_id INTEGER PRIMARY KEY, dataid INTEGER, chunkindex INTEGER, chunksize INTEGER, chunk BLOB );");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS dataid_idx ON chunk(dataid);");
        }

        private void buildDataTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS data(dataid INTEGER PRIMARY KEY, datakey VARCHAR(25), datasize INTEGER, timestamp INTEGER, UNIQUE (datakey));");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS datakey_idx ON data(datakey);");
        }

        public void onCreate(SQLiteDatabase sQLiteDatabase) {
            buildChunkTable(sQLiteDatabase);
            buildDataTable(sQLiteDatabase);
        }

        public void onUpgrade(SQLiteDatabase sQLiteDatabase, int i, int i2) {
        }
    }

    public ChunkStorage(Context context) {
        this.mContext = context;
        this.mDBHelper = new DatabaseHelper(context);
    }

    public void deleteData(String str) {
        SQLiteDatabase db = getDB();
        int dataId = getDataId(str);
        db.delete(CHUNK_TABLE_NAME, "dataid = " + dataId, null);
        db.delete(DATA_TABLE_NAME, "dataid = " + dataId, null);
    }

    public void dropAllData() {
        SQLiteDatabase db = getDB();
        if (db != null) {
            db.delete(CHUNK_TABLE_NAME, null, null);
            db.delete(DATA_TABLE_NAME, null, null);
        }
    }

    public long generateDataId(String str) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        contentValues.put(DATAKEY, str);
        contentValues.put(DATASIZE, Integer.valueOf(0));
        contentValues.put(TIMESTAMP, Long.valueOf(System.currentTimeMillis()));
        long insert = db.insert(DATA_TABLE_NAME, null, contentValues);
        contentValues.clear();
        return insert;
    }

    public byte[] getChunk(int i, int i2) {
        Cursor query = getDB().query(CHUNK_TABLE_NAME, new String[]{CHUNK_TABLE_NAME}, "dataid = " + i + " AND " + CHUNKINDEX + " = " + i2, null, null, null, null);
        query.moveToFirst();
        if (query.getCount() == 0) {
            return null;
        }
        byte[] blob = query.getBlob(0);
        query.close();
        return blob;
    }

    public byte[] getChunk(String str, int i) {
        SQLiteDatabase db = getDB();
        int dataId = getDataId(str);
        Cursor query = db.query(CHUNK_TABLE_NAME, new String[]{CHUNK_TABLE_NAME}, null, new String[]{"dataid = " + dataId, "chunkindex = " + i}, null, null, null);
        query.moveToFirst();
        if (query.getCount() == 0) {
            return null;
        }
        byte[] blob = query.getBlob(0);
        query.close();
        return blob;
    }

    public SQLiteDatabase getDB() {
        return this.mDBHelper.getWritableDatabase();
    }

    public int getDataId(String str) {
        Cursor query = getDB().query(DATA_TABLE_NAME, new String[]{DATAID}, "datakey = '" + str + "'", null, null, null, null);
        if (query.getCount() == 0) {
            return -1;
        }
        query.moveToFirst();
        int i = query.getInt(0);
        query.close();
        return i;
    }

    public void setBeginTransaction() {
        if (!isTransactionBegin) {
            getDB().beginTransaction();
            isTransactionBegin = true;
        }
    }

    public void setEndTransaction() {
        if (isTransactionBegin) {
            SQLiteDatabase db = getDB();
            db.setTransactionSuccessful();
            db.endTransaction();
            isTransactionBegin = false;
            setBeginTransaction();
        }
    }

    public void storeChunk(int i, int i2, byte[] bArr) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        contentValues.put(DATAID, Integer.valueOf(i));
        contentValues.put(CHUNKINDEX, Integer.valueOf(i2));
        contentValues.put(CHUNKSIZE, Integer.valueOf(bArr.length));
        contentValues.put(CHUNK_TABLE_NAME, bArr);
        if (db.insert(CHUNK_TABLE_NAME, null, contentValues) == -1) {
            Log.d(TAG, " Store Chunk Error");
        } else {
            Log.d(TAG, " Store Chunk Success");
        }
    }

    public void storeChunk(String str, int i, byte[] bArr) {
        SQLiteDatabase db = getDB();
        int dataId = getDataId(str);
        ContentValues contentValues = new ContentValues();
        contentValues.put(DATAID, Integer.valueOf(dataId));
        contentValues.put(CHUNKINDEX, Integer.valueOf(i));
        contentValues.put(CHUNKSIZE, Integer.valueOf(bArr.length));
        contentValues.put(CHUNK_TABLE_NAME, bArr);
        db.insert(CHUNK_TABLE_NAME, null, contentValues);
    }

    public void storeFile(String str, File file) {
        SQLiteDatabase db = getDB();
        db.beginTransaction();
        ContentValues contentValues = new ContentValues();
        contentValues.put(DATAKEY, str);
        contentValues.put(DATASIZE, Long.valueOf(file.length()));
        contentValues.put(TIMESTAMP, Long.valueOf(System.currentTimeMillis()));
        long insert = db.insert(DATA_TABLE_NAME, null, contentValues);
        if (insert == -1) {
            throw new IOException("datakey is exists");
        }
        contentValues.clear();
        byte[] bArr = new byte[MAX_CHUNK_SIZE];
        FileInputStream fileInputStream = new FileInputStream(file);
        byte[] bArr2 = bArr;
        int i = 0;
        while (true) {
            try {
                int read = fileInputStream.read(bArr2);
                if (read <= 0) {
                    break;
                }
                if (read != MAX_CHUNK_SIZE) {
                    byte[] bArr3 = new byte[read];
                    bArr3 = new byte[read];
                    bArr2 = Arrays.copyOf(Arrays.copyOf(bArr2, read), read);
                }
                ContentValues contentValues2 = new ContentValues();
                contentValues2.put(DATAID, Long.valueOf(insert));
                contentValues2.put(CHUNKINDEX, Integer.valueOf(i));
                contentValues2.put(CHUNKSIZE, Integer.valueOf(read));
                contentValues2.put(CHUNK_TABLE_NAME, bArr2);
                db.insert(CHUNK_TABLE_NAME, null, contentValues2);
                contentValues2.clear();
                i++;
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                db.endTransaction();
            }
        }
        db.setTransactionSuccessful();
        fileInputStream.close();
    }

    public void updateDataSize(int i, int i2) {
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        contentValues.put(DATASIZE, Integer.valueOf(i2));
        db.update(DATA_TABLE_NAME, contentValues, "dataid = " + i, null);
        contentValues.clear();
    }
}
