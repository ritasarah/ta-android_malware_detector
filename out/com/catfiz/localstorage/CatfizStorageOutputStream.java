package com.catfiz.localstorage;

import java.io.IOException;
import java.io.OutputStream;
import java.util.Arrays;

public class CatfizStorageOutputStream extends OutputStream {
    private static final String TAG = "CatfizStorageOutputStream";
    private int mByteIndex = 0;
    private ChunkStorage mChunkStorage = null;
    private int mDataId = -1;
    private String mDataKey = null;
    private int mIndex = 0;
    private byte[] mTempBuffer = new byte[ChunkStorage.MAX_CHUNK_SIZE];

    public CatfizStorageOutputStream(ChunkStorage chunkStorage, String str, boolean z) {
        this.mChunkStorage = chunkStorage;
        this.mDataKey = str;
        this.mChunkStorage.setBeginTransaction();
        if (this.mChunkStorage.getDataId(str) != -1) {
            if (z) {
                this.mChunkStorage.deleteData(str);
            } else {
                throw new IOException("datakey is exists");
            }
        }
        this.mDataId = (int) this.mChunkStorage.generateDataId(str);
    }

    public void flush() {
        int i = this.mByteIndex % ChunkStorage.MAX_CHUNK_SIZE;
        if (i != 0) {
            this.mIndex = this.mByteIndex / ChunkStorage.MAX_CHUNK_SIZE;
            byte[] bArr = new byte[i];
            this.mChunkStorage.storeChunk(this.mDataId, this.mIndex, Arrays.copyOf(this.mTempBuffer, i));
            this.mTempBuffer = new byte[ChunkStorage.MAX_CHUNK_SIZE];
        }
        this.mChunkStorage.updateDataSize(this.mDataId, this.mByteIndex);
        this.mChunkStorage.setEndTransaction();
        super.flush();
    }

    public void write(int i) {
        int i2 = this.mByteIndex % ChunkStorage.MAX_CHUNK_SIZE;
        this.mTempBuffer[i2] = (byte) i;
        if (i2 == 5119) {
            this.mIndex = this.mByteIndex / ChunkStorage.MAX_CHUNK_SIZE;
            this.mChunkStorage.storeChunk(this.mDataId, this.mIndex, this.mTempBuffer);
            this.mTempBuffer = new byte[ChunkStorage.MAX_CHUNK_SIZE];
        }
        this.mByteIndex++;
    }

    public void writeChunk(byte[] bArr) {
        this.mChunkStorage.storeChunk(this.mDataId, this.mIndex, bArr);
        this.mIndex++;
    }
}
