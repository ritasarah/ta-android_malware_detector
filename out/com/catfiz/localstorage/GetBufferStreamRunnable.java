package com.catfiz.localstorage;

import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import com.catfiz.service.CatfishService;
import com.catfiz.util.Log;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

public class GetBufferStreamRunnable implements Runnable {
    private static final String TAG = "GetBufferStreamRunnable";
    private String mDataKey = null;
    private ILocalStorageInterface mLocalStorageInterface = null;

    public GetBufferStreamRunnable(ILocalStorageInterface iLocalStorageInterface, String str) {
        this.mLocalStorageInterface = iLocalStorageInterface;
        this.mDataKey = str;
    }

    protected CatfishService getCatfishService() {
        return CatfishService.getServiceInstance();
    }

    public void run() {
        Log.d(TAG, "GetBufferStreamRunnable run");
        ChunkStorage chunkStorage = new ChunkStorage(getCatfishService());
        try {
            InputStream fileInputStream = new FileInputStream(new File(LocalStorageWorker.FILESTORAGE_ROOT_PATH, this.mDataKey));
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            byte[] bArr = new byte[AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT];
            while (true) {
                int read = fileInputStream.read(bArr);
                if (read != -1) {
                    byteArrayOutputStream.write(bArr, 0, read);
                } else {
                    Log.d(TAG, "GetBufferStreamRunnable deliver byte to client");
                    this.mLocalStorageInterface.onBufferStreamReady(byteArrayOutputStream.toByteArray());
                    fileInputStream.close();
                    byteArrayOutputStream.flush();
                    byteArrayOutputStream.close();
                    return;
                }
            }
        } catch (IOException e) {
            this.mLocalStorageInterface.onError(e.getMessage());
        } catch (DataNotFoundException e2) {
            this.mLocalStorageInterface.onDataNotFound();
        } catch (OutOfMemoryError e3) {
            System.gc();
            Log.d(TAG, "OutOfMemoryError");
        }
    }
}
