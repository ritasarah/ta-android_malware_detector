package com.catfiz.localstorage;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import com.catfiz.service.CatfishService;
import com.catfiz.util.Log;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

public class GetDataBitmapRunnable implements Runnable {
    private static final String TAG = "GetDataBitmapRunnable";
    private String mDataKey = null;
    private ILocalStorageInterface mLocalStorageInterface = null;

    public GetDataBitmapRunnable(ILocalStorageInterface iLocalStorageInterface, String str) {
        this.mLocalStorageInterface = iLocalStorageInterface;
        this.mDataKey = str;
    }

    protected CatfishService getCatfishService() {
        return CatfishService.getServiceInstance();
    }

    public void run() {
        InputStream fileInputStream;
        IOException e;
        Throwable th;
        Exception e2;
        if (this.mLocalStorageInterface.isProcessCanceled()) {
            Log.d(TAG, "PROCESS CANCELED: CALL CALLBACK AS ERROR");
            this.mLocalStorageInterface.onError("Process canceled and handle as error :D.");
            return;
        }
        try {
            fileInputStream = new FileInputStream(new File(LocalStorageWorker.FILESTORAGE_ROOT_PATH, this.mDataKey));
            try {
                Bitmap decodeStream = BitmapFactory.decodeStream(fileInputStream);
                if (decodeStream == null) {
                    this.mLocalStorageInterface.onError(null);
                } else {
                    this.mLocalStorageInterface.onBitmapReady(decodeStream);
                }
            } catch (OutOfMemoryError e3) {
                try {
                    Log.e(TAG, " Get Data Bitmap Out of memory, dataid = " + this.mDataKey);
                    this.mLocalStorageInterface.onError(e3.getMessage());
                    System.gc();
                } catch (IOException e4) {
                    e = e4;
                    try {
                        this.mLocalStorageInterface.onError(e.getMessage());
                        if (fileInputStream != null) {
                            try {
                                fileInputStream.close();
                            } catch (Exception e5) {
                                return;
                            }
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        if (fileInputStream != null) {
                            try {
                                fileInputStream.close();
                            } catch (Exception e6) {
                            }
                        }
                        throw th;
                    }
                } catch (DataNotFoundException e7) {
                    this.mLocalStorageInterface.onDataNotFound();
                    if (fileInputStream != null) {
                        try {
                            fileInputStream.close();
                        } catch (Exception e8) {
                            return;
                        }
                    }
                } catch (Exception e9) {
                    e2 = e9;
                    this.mLocalStorageInterface.onError(e2.getMessage());
                    if (fileInputStream != null) {
                        try {
                            fileInputStream.close();
                        } catch (Exception e10) {
                            return;
                        }
                    }
                }
            }
            if (fileInputStream != null) {
                try {
                    fileInputStream.close();
                } catch (Exception e11) {
                }
            }
        } catch (IOException e12) {
            e = e12;
            fileInputStream = null;
            this.mLocalStorageInterface.onError(e.getMessage());
            if (fileInputStream != null) {
                fileInputStream.close();
            }
        } catch (DataNotFoundException e13) {
            fileInputStream = null;
            this.mLocalStorageInterface.onDataNotFound();
            if (fileInputStream != null) {
                fileInputStream.close();
            }
        } catch (Exception e14) {
            e2 = e14;
            fileInputStream = null;
            this.mLocalStorageInterface.onError(e2.getMessage());
            if (fileInputStream != null) {
                fileInputStream.close();
            }
        } catch (Throwable th3) {
            th = th3;
            fileInputStream = null;
            if (fileInputStream != null) {
                fileInputStream.close();
            }
            throw th;
        }
    }
}
