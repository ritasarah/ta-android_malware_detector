package com.catfiz.service;

import android.content.Intent;
import com.catfiz.intents.CatfishIntents;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishUIBinder.ServiceOP;
import com.catfiz.service.uidbexec.CUIDBAddFirstMessageExecutor;
import com.catfiz.service.uisvcexec.CUIServiceExecutor;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.util.Log;

public class PinManagerV2 implements IDropableRunnable, Runnable {
    public static final int ACCSTAT_ACTIVEUSER = 1;
    public static final int ACCSTAT_DELETED = 5;
    public static final int ACCSTAT_INACTIVEUSER = 3;
    public static final int ACCSTAT_MAX = 8;
    public static final int ACCSTAT_NOTREGISTERED = 7;
    public static final int ACCSTAT_NULL = 0;
    public static final int ACCSTAT_PENDING = 2;
    public static final int ACCSTAT_PENDINGBYADMIN = 6;
    public static final int ACCSTAT_SUSPENDED = 4;
    public static final int OP_ACCOUNTCHECK = 2;
    public static final int OP_ACTIVATEACCOUNT = 5;
    public static final int OP_DEVICECHECK = 1;
    public static final int OP_LOGINACCOUNT = 3;
    public static final int OP_NULL = 0;
    public static final int OP_REGISTERACCOUNT = 4;
    public static final int OP_UPGRADEACCOUNT = 6;
    public static final int PINMAN_STATE_DEVCHECK = 1;
    public static final int PINMAN_STATE_DEVCHECK_DONE = 2;
    public static final int PINMAN_STATE_FINAL = 100;
    public static final int PINMAN_STATE_INIT = 0;
    public static final int PINMAN_STATE_REGISTERED = 5;
    public static final int PINMAN_STATE_WAITFOR_LOGIN = 3;
    public static final int PINMAN_STATE_WAITFOR_PROFILE = 6;
    public static final int PINMAN_STATE_WAITFOR_UPGRADE = 4;
    public static final int REGCODE_ACCACTIVATED = 7;
    public static final int REGCODE_ACCSUSPENDED = 10;
    public static final int REGCODE_ALREADYREGISTERED = 2;
    public static final int REGCODE_AUTHERROR = 6;
    public static final int REGCODE_HASOLDACC = 11;
    public static final int REGCODE_INVALIDEMAIL = 9;
    public static final int REGCODE_INVALIDORGID = 5;
    public static final int REGCODE_INVALIDREG = 4;
    public static final int REGCODE_LIMITOPS = 8;
    public static final int REGCODE_MAX = 12;
    public static final int REGCODE_NOTREGISTERED = 3;
    public static final int REGCODE_NULL = 0;
    public static final int REGCODE_SOMEERROR = 1;
    private static final String TAG = "PinManagerV2";
    private static final String[] mAccStatStr;
    private static volatile int mPinManState = REGCODE_NULL;
    private static final String[] mRegCodeStr = new String[]{"REGCODE_NULL", "REGCODE_SOMEERROR", "REGCODE_ALREADYREGISTERED", "REGCODE_NOTREGISTERED", "REGCODE_INVALIDREG", "REGCODE_INVALIDORGID", "REGCODE_AUTHERROR", "REGCODE_ACCACTIVATED", "REGCODE_LIMITOPS", "REGCODE_INVALIDEMAIL", "REGCODE_ACCSUSPENDED", "REGCODE_HASOLDACC", "REGCODE_MAX"};
    private String mActivationCode = null;
    private long mAge = 0;
    private ICatfishClientInterface mClient = null;
    private String mDeviceId = null;
    private int mOperation = REGCODE_NULL;
    private String mOrgId = null;
    private CatfishRESTAPI mRestAPI = null;
    private int mScheduleNum = REGCODE_NULL;
    private CatfishService mService = null;
    private String mUserEmail = null;
    private String mUserKey = null;
    private String mUserPIN = null;

    class ErrorResponse implements Runnable {
        private ICatfishClientInterface mClient = null;

        public ErrorResponse(ICatfishClientInterface iCatfishClientInterface) {
            this.mClient = iCatfishClientInterface;
        }

        public void run() {
            if (this.mClient != null && !this.mClient.isFinish()) {
                this.mClient.onError();
            }
        }
    }

    class RestoreUserProfile implements IDropableRunnable, Runnable {
        private static final int RESTORE_USRPROFILE_STAGE0 = 0;
        private static final int RESTORE_USRPROFILE_STAGE1 = 1;
        private static final int RESTORE_USRPROFILE_STAGE2 = 2;
        private static final int RESTORE_USRPROFILE_STAGE3 = 3;
        private long mAge = 0;
        private ICatfishClientInterface mClient = null;
        private CatfishRESTAPI mRestAPI = null;
        private boolean mRestoreAllFriends = true;
        private int mScheduleNum = RESTORE_USRPROFILE_STAGE0;
        private String mServerHost = null;
        private CatfishService mService = null;
        private int mStage = RESTORE_USRPROFILE_STAGE0;
        private String mUserPIN = null;

        public RestoreUserProfile(CatfishService catfishService, ICatfishClientInterface iCatfishClientInterface, String str) {
            this.mService = catfishService;
            this.mClient = iCatfishClientInterface;
            this.mAge = System.currentTimeMillis();
            this.mUserPIN = str;
        }

        private void do_add_firstmessage() {
            this.mService.postToDBHandler(new CUIDBAddFirstMessageExecutor(this.mClient));
        }

        private void do_get_userprofile_photo() {
            this.mService.postToServiceHandler(new PPFDownloadExecutor(this.mService, this.mServerHost, this.mUserPIN, this.mUserPIN, true), RESTORE_USRPROFILE_STAGE2);
        }

        private void do_restore_allfriends() {
            ICatfishClientInterface callBack = this.mService.getCallBack(CatfishService.CATFISH_ACTION_DEVICEIDREGISTERED);
            CatfishMessageObject obtain = CatfishMessageObject.obtain();
            obtain.userpin = this.mUserPIN;
            this.mService.postToServiceHandler(new CUIServiceExecutor(new CatfishUIBinder(this.mService), callBack, this.mServerHost, obtain.getRefCopy(), ServiceOP.SERVICEOP_UICLIENT_REQUEST_ALL_FRIENDPIN));
            obtain.recycle();
            gonext_stage(RESTORE_USRPROFILE_STAGE3);
        }

        private void do_restore_group_data() {
            CatfishResult poolBackupData = this.mRestAPI.getPoolBackupData(this.mServerHost, this.mUserPIN);
            if (!poolBackupData.hasSuccess() && poolBackupData.hasFailure()) {
            }
            do_add_firstmessage();
            this.mService.signalUIRegistrationComplete();
            poolBackupData.cleaningup();
        }

        private void do_restore_userdata() {
            CatfishResult userDataProfile = this.mRestAPI.getUserDataProfile(this.mServerHost, this.mUserPIN, this.mUserPIN);
            if (userDataProfile.hasSuccess()) {
                write_userdata_to_db(userDataProfile);
            } else if (userDataProfile.hasFailure()) {
                Log.d(PinManagerV2.TAG, "FAIL to restore user data from " + this.mServerHost + ": RESCHEDULE");
                do_retry();
                userDataProfile.cleaningup();
                return;
            }
            gonext_stage(RESTORE_USRPROFILE_STAGE2);
            userDataProfile.cleaningup();
        }

        private void do_restore_userprofile() {
            CatfishResult userProfileInfo = this.mRestAPI.getUserProfileInfo(this.mServerHost, this.mUserPIN, this.mUserPIN);
            if (userProfileInfo.hasSuccess()) {
                if (userProfileInfo.username != null && userProfileInfo.username.length() > 0) {
                    this.mService.setUserProfile(userProfileInfo.username, userProfileInfo.userstatus, userProfileInfo.object_sequence);
                }
                if (userProfileInfo.photoavailable) {
                    do_get_userprofile_photo();
                }
                gonext_stage(RESTORE_USRPROFILE_STAGE1);
                userProfileInfo.cleaningup();
            } else if (userProfileInfo.hasNotFound()) {
                do_add_firstmessage();
                this.mService.signalUIRegistrationComplete();
                userProfileInfo.cleaningup();
            } else if (userProfileInfo.hasFailure()) {
                Log.d(PinManagerV2.TAG, "FAIL Get User Profile Info from " + this.mServerHost + ": RESCHEDULE");
                do_retry();
                userProfileInfo.cleaningup();
            } else {
                postResponse(new ErrorResponse(this.mClient));
                userProfileInfo.cleaningup();
            }
        }

        private void do_retry() {
            this.mServerHost = CatfishService.getServerHost();
            this.mService.scheduleRunnableToService(this);
        }

        private void gonext_stage(int i) {
            if (this.mStage == i) {
                Log.e(PinManagerV2.TAG, "ERROR: RestoreUserProfile in circular stage call: DROP");
                return;
            }
            this.mStage = i;
            this.mService.postToServiceHandler(this);
        }

        private void postResponse(Runnable runnable) {
            this.mService.postToMainHandler(runnable);
        }

        private void write_userdata_to_db(CatfishResult catfishResult) {
            CatfishMessageObject obtain = CatfishMessageObject.obtain();
            obtain.senderpin = this.mUserPIN;
            obtain.rcvtimestamp = catfishResult.timestamp;
            obtain.message = catfishResult.data_json;
            this.mService.postToDBHandler(new StoreUserDataToDB(this.mService, obtain.getRefCopy()));
            obtain.recycle();
        }

        public void dropRunnable() {
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.mScheduleNum;
        }

        public void incraseScheduleNum() {
            this.mScheduleNum += RESTORE_USRPROFILE_STAGE1;
        }

        public void run() {
            if (this.mServerHost == null) {
                this.mServerHost = CatfishService.getCurrentServerHost();
            }
            if (this.mUserPIN == null) {
                Log.e(PinManagerV2.TAG, "ERROR: RestoreUserProfile can't running with NULL userpin");
                return;
            }
            switch (this.mStage) {
                case RESTORE_USRPROFILE_STAGE0 /*0*/:
                    Log.d(PinManagerV2.TAG, "STAGE0: Restore user profile");
                    do_restore_userprofile();
                    return;
                case RESTORE_USRPROFILE_STAGE1 /*1*/:
                    Log.d(PinManagerV2.TAG, "STAGE1: Restore user data");
                    do_restore_userdata();
                    return;
                case RESTORE_USRPROFILE_STAGE2 /*2*/:
                    Log.d(PinManagerV2.TAG, "STAGE2: Restore All Friends");
                    do_restore_allfriends();
                    return;
                case RESTORE_USRPROFILE_STAGE3 /*3*/:
                    Log.d(PinManagerV2.TAG, "STAGE3: Restore Group Data");
                    do_restore_group_data();
                    return;
                default:
                    return;
            }
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.mRestAPI = catfishRESTAPI;
        }
    }

    class StoreUserDataToDB implements Runnable {
        private CatfishMessageObject mMsg = null;
        private CatfishService mService = null;

        public StoreUserDataToDB(CatfishService catfishService, CatfishMessageObject catfishMessageObject) {
            this.mService = catfishService;
            this.mMsg = catfishMessageObject;
        }

        public void run() {
            if (this.mMsg.senderpin == null || this.mMsg.senderpin.length() <= 0) {
                this.mMsg.recycle();
            } else if (this.mMsg.message == null || this.mMsg.message.length() <= 0) {
                this.mMsg.recycle();
            } else {
                new FriendListDataStorage(this.mService).updateFriendDataProfile(this.mMsg);
                this.mMsg.recycle();
            }
        }
    }

    class SuccessResponse implements Runnable {
        private ICatfishClientInterface mClient = null;

        public SuccessResponse(ICatfishClientInterface iCatfishClientInterface) {
            this.mClient = iCatfishClientInterface;
        }

        public void run() {
            if (this.mClient != null && !this.mClient.isFinish()) {
                this.mClient.onSuccess();
            }
        }
    }

    static {
        String[] strArr = new String[REGCODE_INVALIDEMAIL];
        strArr[REGCODE_NULL] = "ACCSTAT_NULL";
        strArr[REGCODE_SOMEERROR] = "ACCSTAT_ACTIVEUSER";
        strArr[REGCODE_ALREADYREGISTERED] = "ACCSTAT_PENDING";
        strArr[REGCODE_NOTREGISTERED] = "ACCSTAT_INACTIVEUSER";
        strArr[REGCODE_INVALIDREG] = "ACCSTAT_SUSPENDED";
        strArr[REGCODE_INVALIDORGID] = "ACCSTAT_DELETED";
        strArr[REGCODE_AUTHERROR] = "ACCSTAT_PENDINGBYADMIN";
        strArr[REGCODE_ACCACTIVATED] = "ACCSTAT_NOTREGISTERED";
        strArr[REGCODE_LIMITOPS] = "ACCSTAT_MAX";
        mAccStatStr = strArr;
    }

    public PinManagerV2(CatfishService catfishService, int i, String str, String str2) {
        this.mService = catfishService;
        this.mOperation = i;
        this.mDeviceId = str2;
        this.mOrgId = str;
        this.mUserEmail = null;
        this.mUserKey = null;
        this.mClient = null;
        this.mUserPIN = null;
        this.mAge = System.currentTimeMillis();
    }

    public PinManagerV2(CatfishService catfishService, ICatfishClientInterface iCatfishClientInterface, int i, String str, String str2, String str3, String str4, String str5, String str6) {
        this.mService = catfishService;
        this.mOperation = i;
        this.mDeviceId = str2;
        this.mOrgId = str;
        this.mUserEmail = str3;
        this.mUserKey = str4;
        this.mClient = iCatfishClientInterface;
        this.mUserPIN = str5;
        this.mActivationCode = str6;
        this.mAge = System.currentTimeMillis();
    }

    public static String accStatToStr(int i) {
        return (i >= REGCODE_LIMITOPS || i < 0) ? mAccStatStr[REGCODE_LIMITOPS] : mAccStatStr[i];
    }

    public static void deviceChecking(CatfishService catfishService, String str, String str2) {
        if (getState() != 0) {
            Log.d(TAG, "PinManager is not at initial state.");
        } else {
            catfishService.postToServiceHandler(new PinManagerV2(catfishService, REGCODE_SOMEERROR, str, str2));
        }
    }

    private void do_device_check() {
        if (this.mDeviceId == null || this.mOrgId == null) {
            Log.d(TAG, "Invalid deviceid or orgid");
            setState(REGCODE_NULL);
        } else if (getState() != 0) {
            Log.d(TAG, "PinManager is already checking the device.");
        } else {
            setState(REGCODE_SOMEERROR);
            String registrationServer = CatfishService.getRegistrationServer();
            CatfishResult deviceCheck = this.mRestAPI.deviceCheck(registrationServer, this.mDeviceId, this.mOrgId);
            if (deviceCheck.hasSuccess()) {
                Log.d(TAG, "Device check is okay: code: " + regCodeToStr(deviceCheck.code) + ", status: " + accStatToStr(deviceCheck.status));
                CatfishService catfishService = this.mService;
                CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
                catfishPreferences.edit().putInt(CatfishService.CATFISHID_REGSTATUS, deviceCheck.code).commit();
                catfishPreferences.edit().putInt(CatfishService.CATFISHID_ACCSTATUS, deviceCheck.status).commit();
                if (deviceCheck.userpin != null) {
                    catfishPreferences.edit().putString(CatfishService.CATFISHID_OLDACCOUNT, deviceCheck.userpin).commit();
                }
                setState(REGCODE_ALREADYREGISTERED);
                deviceCheck.cleaningup();
                return;
            }
            if (deviceCheck.hasFailure()) {
                Log.d(TAG, "FAIL Registering to " + registrationServer + ": RESCHEDULE");
                this.mService.scheduleRunnableToService(this);
            }
            setState(REGCODE_NULL);
            deviceCheck.cleaningup();
        }
    }

    private void do_ui_account_check() {
        if (this.mOrgId == null) {
            Log.d(TAG, "Invalid orgid");
        } else if (getState() == 0) {
            Log.d(TAG, "PinManager is not checking device or something error: TRY DEVICE CHECK");
            r0 = this.mService.getDeviceId();
            if (r0 == null) {
                Log.d(TAG, "TRY DEVICE CHECK: Device id is invalid: CANCEL");
                return;
            }
            deviceChecking(this.mService, this.mOrgId, r0);
            this.mService.scheduleRunnableToService(this);
        } else if (getState() != REGCODE_ALREADYREGISTERED) {
            Log.d(TAG, "PinManager is checking the device: WAIT");
            this.mService.scheduleRunnableToService(this);
        } else {
            CatfishService catfishService = this.mService;
            CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
            int i = catfishPreferences.getInt(CatfishService.CATFISHID_REGSTATUS, REGCODE_NULL);
            int i2 = catfishPreferences.getInt(CatfishService.CATFISHID_ACCSTATUS, REGCODE_NULL);
            r0 = catfishPreferences.getString(CatfishService.CATFISHID_OLDACCOUNT, null);
            String catfishIDFromSecurePref = this.mService.getCatfishIDFromSecurePref();
            if (catfishIDFromSecurePref != null) {
                r0 = catfishIDFromSecurePref;
            }
            switch (i) {
                case REGCODE_ALREADYREGISTERED /*2*/:
                    if (i2 != REGCODE_ACCACTIVATED || r0 == null) {
                        catfishPreferences.edit().putInt(CatfishService.CATFISHID_LOGINSTATE, REGCODE_NOTREGISTERED).commit();
                        this.mService.signalUIToLogin();
                        return;
                    }
                    catfishPreferences.edit().putInt(CatfishService.CATFISHID_LOGINSTATE, REGCODE_INVALIDREG).commit();
                    this.mService.signalUIToUpgrade(r0);
                    return;
                case REGCODE_NOTREGISTERED /*3*/:
                    catfishPreferences.edit().putInt(CatfishService.CATFISHID_LOGINSTATE, REGCODE_NOTREGISTERED).commit();
                    this.mService.signalUIToLogin();
                    return;
                case REGCODE_HASOLDACC /*11*/:
                    if (r0 == null) {
                        Log.d(TAG, "ERROR: Server state HASOLDACC but not send current nic");
                        this.mService.signalUIRegistrationError();
                    }
                    catfishPreferences.edit().putInt(CatfishService.CATFISHID_LOGINSTATE, REGCODE_INVALIDREG).commit();
                    this.mService.signalUIToUpgrade(r0);
                    return;
                default:
                    Log.e(TAG, "ERROR: regcode: " + regCodeToStr(i) + ", accstat: " + accStatToStr(i2));
                    this.mService.signalUIRegistrationError();
                    return;
            }
        }
    }

    private void do_ui_activateAccount() {
        if (this.mOrgId == null || this.mUserEmail == null || this.mActivationCode == null || this.mClient == null) {
            Log.e(TAG, "ERROR: Invalid parameters");
            return;
        }
        CatfishService catfishService = this.mService;
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        int i = catfishPreferences.getInt(CatfishService.CATFISHID_LOGINSTATE, REGCODE_NULL);
        if (i != REGCODE_INVALIDORGID) {
            Log.e(TAG, "ERROR: Activation at wrong state: " + i + ", expected: " + REGCODE_INVALIDORGID);
            postResponse(new ErrorResponse(this.mClient));
            return;
        }
        String registrationServer = CatfishService.getRegistrationServer();
        CatfishResult activateCatfizUser = this.mRestAPI.activateCatfizUser(registrationServer, this.mUserEmail, this.mActivationCode);
        if (activateCatfizUser.hasSuccess()) {
            if (activateCatfizUser.code != 0) {
                Log.e(TAG, "ERROR: Server error = " + regCodeToStr(activateCatfizUser.code) + ": DROP");
                postResponse(new ErrorResponse(this.mClient));
                activateCatfizUser.cleaningup();
                return;
            }
            Log.d(TAG, "ACTIVATION ACCOUNT SUCCESS: user pin = " + activateCatfizUser.userpin + ", code:" + this.mActivationCode);
            catfishPreferences.edit().putInt(CatfishService.CATFISHID_LOGINSTATE, PINMAN_STATE_FINAL).commit();
            this.mService.setUserPIN(activateCatfizUser.userpin);
            postResponse(new SuccessResponse(this.mClient));
            activateCatfizUser.cleaningup();
        } else if (activateCatfizUser.hasFailure()) {
            Log.d(TAG, "FAIL Activation Account to " + registrationServer + ": RESCHEDULE");
            this.mService.scheduleRunnableToService(this);
            activateCatfizUser.cleaningup();
        } else {
            Log.d(TAG, "ERROR Activation Account to " + registrationServer + ": DROP");
            postResponse(new ErrorResponse(this.mClient));
            activateCatfizUser.cleaningup();
        }
    }

    private void do_ui_loginAccount() {
        if (this.mOrgId == null || this.mUserEmail == null || this.mUserKey == null || this.mClient == null || this.mDeviceId == null) {
            Log.e(TAG, "ERROR: Invalid parameters");
            return;
        }
        CatfishService catfishService = this.mService;
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        int i = catfishPreferences.getInt(CatfishService.CATFISHID_LOGINSTATE, REGCODE_NULL);
        catfishPreferences.edit().remove(CatfishService.CATFISHID_ACCSTATUS).commit();
        if (i == 0) {
            Log.e(TAG, "ERROR: Login not allowed at INIT state");
            postResponse(new ErrorResponse(this.mClient));
            return;
        }
        String registrationServer = CatfishService.getRegistrationServer();
        CatfishResult loginCatfizAccount = this.mRestAPI.loginCatfizAccount(registrationServer, this.mUserEmail, this.mUserKey, this.mDeviceId);
        if (loginCatfizAccount.hasSuccess()) {
            if (loginCatfizAccount.code != 0) {
                Log.e(TAG, "ERROR: Server error = " + regCodeToStr(loginCatfizAccount.code) + ": DROP");
                postResponse(new ErrorResponse(this.mClient));
                loginCatfizAccount.cleaningup();
            } else if (loginCatfizAccount.userpin == null) {
                Log.e(TAG, "ERROR: Server return NULL for user pin: DROP");
                postResponse(new ErrorResponse(this.mClient));
                loginCatfizAccount.cleaningup();
            } else {
                i = loginCatfizAccount.status;
                catfishPreferences.edit().putInt(CatfishService.CATFISHID_ACCSTATUS, i).commit();
                Log.d(TAG, "LOGIN SUCCESS: user pin = " + loginCatfizAccount.userpin + ", accstat: " + accStatToStr(i));
                if (i == REGCODE_SOMEERROR) {
                    catfishPreferences.edit().putInt(CatfishService.CATFISHID_LOGINSTATE, PINMAN_STATE_FINAL).commit();
                } else {
                    catfishPreferences.edit().putInt(CatfishService.CATFISHID_LOGINSTATE, REGCODE_INVALIDORGID).commit();
                }
                catfishPreferences.edit().putBoolean(CatfishService.CATFISHID_REGPROFILE_COMPLETE, true).commit();
                this.mUserPIN = this.mService.getCatfishIDFromSecurePref();
                if (this.mUserPIN != loginCatfizAccount.userpin) {
                    this.mUserPIN = loginCatfizAccount.userpin;
                    this.mService.postToServiceHandler(new RestoreUserProfile(this.mService, this.mClient, this.mUserPIN));
                }
                this.mService.setUserPIN(this.mUserPIN);
                postResponse(new SuccessResponse(this.mClient));
                loginCatfizAccount.cleaningup();
            }
        } else if (loginCatfizAccount.hasFailure()) {
            Log.d(TAG, "FAIL Login to " + registrationServer + ": RESCHEDULE");
            this.mService.scheduleRunnableToService(this);
            loginCatfizAccount.cleaningup();
        } else {
            Log.e(TAG, "ERROR: Server error = " + regCodeToStr(loginCatfizAccount.code) + ": DROP");
            postResponse(new ErrorResponse(this.mClient));
            loginCatfizAccount.cleaningup();
        }
    }

    private void do_ui_registerAccount() {
        if (this.mOrgId == null || this.mUserEmail == null || this.mUserKey == null || this.mClient == null || this.mDeviceId == null) {
            Log.e(TAG, "ERROR: Invalid parameters");
            return;
        }
        CatfishService catfishService = this.mService;
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        int i = catfishPreferences.getInt(CatfishService.CATFISHID_LOGINSTATE, REGCODE_NULL);
        catfishPreferences.edit().remove(CatfishService.CATFISHID_ACCSTATUS).commit();
        if (i == 0) {
            Log.e(TAG, "ERROR: Register not allowed at INIT state");
            postResponse(new ErrorResponse(this.mClient));
            return;
        }
        String registrationServer = CatfishService.getRegistrationServer();
        CatfishResult registerCatfizAccount = this.mRestAPI.registerCatfizAccount(registrationServer, this.mUserEmail, this.mUserKey, this.mDeviceId, this.mUserPIN);
        if (registerCatfizAccount.hasSuccess()) {
            if (registerCatfizAccount.code != 0) {
                Log.e(TAG, "ERROR: Server error = " + regCodeToStr(registerCatfizAccount.code) + ": DROP");
                postResponse(new ErrorResponse(this.mClient));
                registerCatfizAccount.cleaningup();
            } else if (registerCatfizAccount.userpin == null) {
                Log.e(TAG, "ERROR: Server return NULL for user pin: DROP");
                postResponse(new ErrorResponse(this.mClient));
                registerCatfizAccount.cleaningup();
            } else {
                Log.d(TAG, "REGISTER SUCCESS: user pin = " + registerCatfizAccount.userpin);
                if (registerCatfizAccount.userpin == null) {
                    Log.e(TAG, "ERROR: Server send null nic");
                    postResponse(new ErrorResponse(this.mClient));
                    registerCatfizAccount.cleaningup();
                } else if (this.mUserPIN == null || this.mUserPIN.equals(registerCatfizAccount.userpin)) {
                    catfishPreferences.edit().putInt(CatfishService.CATFISHID_ACCSTATUS, registerCatfizAccount.status).commit();
                    catfishPreferences.edit().putInt(CatfishService.CATFISHID_LOGINSTATE, REGCODE_AUTHERROR).commit();
                    this.mService.setUserPIN(registerCatfizAccount.userpin);
                    postResponse(new SuccessResponse(this.mClient));
                    registerCatfizAccount.cleaningup();
                } else {
                    Log.e(TAG, "ERROR: Server send null nic");
                    postResponse(new ErrorResponse(this.mClient));
                    registerCatfizAccount.cleaningup();
                }
            }
        } else if (registerCatfizAccount.hasFailure()) {
            Log.d(TAG, "FAIL Registering to " + registrationServer + ": RESCHEDULE");
            this.mService.scheduleRunnableToService(this);
            registerCatfizAccount.cleaningup();
        } else {
            Log.e(TAG, "ERROR: Server error = " + regCodeToStr(registerCatfizAccount.code) + ": DROP");
            postResponse(new ErrorResponse(this.mClient));
            registerCatfizAccount.cleaningup();
        }
    }

    public static synchronized int getState() {
        int i;
        synchronized (PinManagerV2.class) {
            i = mPinManState;
        }
        return i;
    }

    private void postResponse(Runnable runnable) {
        this.mService.postToMainHandler(runnable);
    }

    public static String regCodeToStr(int i) {
        return (i >= REGCODE_MAX || i < 0) ? mRegCodeStr[REGCODE_MAX] : mRegCodeStr[i];
    }

    private void sendNetworkProblemBroadcast() {
        this.mService.sendBroadcast(new Intent(CatfishIntents.ACTION_UI_REGISTER_NETWORKPROBLEM));
    }

    private static synchronized void setState(int i) {
        synchronized (PinManagerV2.class) {
            mPinManState = i;
        }
    }

    public static void ui_accountChecking(CatfishService catfishService) {
        catfishService.postToServiceHandler(new PinManagerV2(catfishService, REGCODE_ALREADYREGISTERED, CatfishRESTAPI.ORGANIZATION_ID_CATFIZ, null));
    }

    public static void ui_activateAccount(CatfishService catfishService, ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        catfishService.postToServiceHandler(new PinManagerV2(catfishService, iCatfishClientInterface, REGCODE_INVALIDORGID, CatfishRESTAPI.ORGANIZATION_ID_CATFIZ, null, str, null, null, str2));
    }

    public static void ui_loginAccount(CatfishService catfishService, ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        catfishService.postToServiceHandler(new PinManagerV2(catfishService, iCatfishClientInterface, REGCODE_NOTREGISTERED, CatfishRESTAPI.ORGANIZATION_ID_CATFIZ, catfishService.getDeviceId(), str, str2, null, null));
    }

    public static void ui_registerAccount(CatfishService catfishService, ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        catfishService.postToServiceHandler(new PinManagerV2(catfishService, iCatfishClientInterface, REGCODE_INVALIDREG, CatfishRESTAPI.ORGANIZATION_ID_CATFIZ, catfishService.getDeviceId(), str, str2, null, null));
    }

    public static void ui_setProfileIsComplete(CatfishService catfishService) {
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        int i = catfishPreferences.getInt(CatfishService.CATFISHID_LOGINSTATE, REGCODE_NULL);
        catfishPreferences.edit().putBoolean(CatfishService.CATFISHID_REGPROFILE_COMPLETE, true).commit();
        if (i == REGCODE_AUTHERROR) {
            catfishPreferences.edit().putInt(CatfishService.CATFISHID_LOGINSTATE, REGCODE_INVALIDORGID).commit();
        }
    }

    public static void ui_upgradeAccount(CatfishService catfishService, ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        String string = CatfishService.getCatfishPreferences().getString(CatfishService.CATFISHID_OLDACCOUNT, null);
        String catfishIDFromSecurePref = catfishService.getCatfishIDFromSecurePref();
        if (catfishIDFromSecurePref != null) {
            string = catfishIDFromSecurePref;
        }
        catfishService.postToServiceHandler(new PinManagerV2(catfishService, iCatfishClientInterface, REGCODE_AUTHERROR, CatfishRESTAPI.ORGANIZATION_ID_CATFIZ, catfishService.getDeviceId(), str, str2, string, null));
    }

    public void dropRunnable() {
        switch (this.mOperation) {
            case REGCODE_SOMEERROR /*1*/:
                Log.d(TAG, "OPERATION: OP_DEVICECHECK: DROP");
                setState(REGCODE_NULL);
                return;
            case REGCODE_NOTREGISTERED /*3*/:
                Log.d(TAG, "OPERATION: OP_LOGINACCOUNT: DROP");
                sendNetworkProblemBroadcast();
                postResponse(new ErrorResponse(this.mClient));
                return;
            case REGCODE_INVALIDREG /*4*/:
                Log.d(TAG, "OPERATION: OP_REGISTERACCOUNT: DROP");
                sendNetworkProblemBroadcast();
                postResponse(new ErrorResponse(this.mClient));
                return;
            case REGCODE_INVALIDORGID /*5*/:
                Log.d(TAG, "OPERATION: OP_ACTIVATEACCOUNT: DROP");
                sendNetworkProblemBroadcast();
                postResponse(new ErrorResponse(this.mClient));
                return;
            case REGCODE_AUTHERROR /*6*/:
                Log.d(TAG, "OPERATION: OP_UPGRADEACCOUNT: DROP");
                sendNetworkProblemBroadcast();
                postResponse(new ErrorResponse(this.mClient));
                return;
            default:
                return;
        }
    }

    public long getAge() {
        return this.mAge;
    }

    public int getScheduleNum() {
        return this.mScheduleNum;
    }

    public void incraseScheduleNum() {
        this.mScheduleNum += REGCODE_SOMEERROR;
    }

    public void run() {
        switch (this.mOperation) {
            case REGCODE_SOMEERROR /*1*/:
                do_device_check();
                return;
            case REGCODE_ALREADYREGISTERED /*2*/:
                do_ui_account_check();
                return;
            case REGCODE_NOTREGISTERED /*3*/:
                do_ui_loginAccount();
                return;
            case REGCODE_INVALIDREG /*4*/:
                break;
            case REGCODE_INVALIDORGID /*5*/:
                do_ui_activateAccount();
                return;
            case REGCODE_AUTHERROR /*6*/:
                if (this.mUserPIN == null) {
                    Log.e(TAG, "Account upgrade with current pin NULL is not allowed.");
                    postResponse(new ErrorResponse(this.mClient));
                    return;
                }
                break;
            default:
                return;
        }
        do_ui_registerAccount();
    }

    public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        this.mRestAPI = catfishRESTAPI;
    }
}
