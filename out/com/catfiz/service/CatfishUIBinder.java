package com.catfiz.service;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences.Editor;
import android.graphics.drawable.Drawable;
import android.os.Binder;
import android.os.Environment;
import android.os.Parcel;
import android.support.v4.content.LocalBroadcastManager;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import com.albus.util.AlbusModelObject;
import com.catfiz.backup.LocalBackup;
import com.catfiz.intents.BroadcastIntents;
import com.catfiz.localstorage.ChunkStorage;
import com.catfiz.objectcomment.ObjectCommentDataStorage;
import com.catfiz.pool.PoolDataUploadExecutor;
import com.catfiz.pool.PoolDataUploadExecutor.PoolDataType;
import com.catfiz.pool.PoolServiceExecutor;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.PinManager.PinServiceOperation;
import com.catfiz.service.uidbexec.CUIBCASTDeliveryStatusUpdater;
import com.catfiz.service.uidbexec.CUIDBBlacklistNic;
import com.catfiz.service.uidbexec.CUIDBGetActiveChatExecutor;
import com.catfiz.service.uidbexec.CUIDBGetAllFriendExecutor;
import com.catfiz.service.uidbexec.CUIDBGetBlacklistNicExecutor;
import com.catfiz.service.uidbexec.CUIDBGetChatConvExecutor;
import com.catfiz.service.uidbexec.CUIDBGetChatConvWithLimitExecutor;
import com.catfiz.service.uidbexec.CUIDBGetFriendExecutor;
import com.catfiz.service.uidbexec.CUIDBGetGroupExecutor;
import com.catfiz.service.uidbexec.CUIDBGetObjectConvExecutor;
import com.catfiz.service.uidbexec.CUIDBGetOfficials;
import com.catfiz.service.uidbexec.CUIDBGetStatCommConvExecutor;
import com.catfiz.service.uidbexec.CUIDBGetUserLikeListExecutor;
import com.catfiz.service.uidbexec.CUIDBIsThisFriendExecutor;
import com.catfiz.service.uidbexec.CUIDBNotifyMessageReadExecutor;
import com.catfiz.service.uidbexec.CUIDBPoolAddRecipient;
import com.catfiz.service.uidbexec.CUIDBPoolAddRecipient.PoolRecipient;
import com.catfiz.service.uidbexec.CUIDBRemoveBlacklistNic;
import com.catfiz.service.uidbexec.CUIDBSendBCASTExecutor;
import com.catfiz.service.uidbexec.CUIDBSendMessageExecutor;
import com.catfiz.service.uidbexec.CUIDBSendMessageWTypeExecutor;
import com.catfiz.service.uidbexec.CUIDBSendPINGFriendExecutor;
import com.catfiz.service.uidbexec.CUIDBStreamThumbUpdate;
import com.catfiz.service.uidbexec.CUIDBUpdateOpen;
import com.catfiz.service.uidbexec.CUIDatabaseRequestExecutor;
import com.catfiz.service.uidbexec.CUIGetFriendProfileDBExecutor;
import com.catfiz.service.uidbexec.CUIGetSlinkChaceDBExecutor;
import com.catfiz.service.uiresponse.CUIResponseExecutor;
import com.catfiz.service.uisvcexec.CUIServiceExecutor;
import com.catfiz.service.uisvcexec.GetUserActivityExecutor;
import com.catfiz.service.uisvcexec.GetUserDataProfileExecutor;
import com.catfiz.service.uisvcexec.UpdateFriendProfileExecutor;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.sticker.IStickerClientInterface;
import com.catfiz.util.Log;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Locale;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.json.JSONException;
import org.json.JSONObject;

public class CatfishUIBinder extends Binder implements ICatfishUIBinder {
    public static final String LAST_DOWNLOAD_THEMELIST = "last_download_theme";
    public static final String PREFERENCE_NAME = "com.catfiz.preference";
    private static final String TAG = "CatfishUIBinder";
    private CatfishService catfish_service = null;

    /* synthetic */ class AnonymousClass3 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishUIBinder$RestoreFriendsServiceOP = new int[RestoreFriendsServiceOP.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$RestoreFriendsServiceOP[RestoreFriendsServiceOP.RESTOREFRIENDSSERVICEOP_REQUEST_UPDATEFRDPROFILE.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$RestoreFriendsServiceOP[RestoreFriendsServiceOP.RESTOREFRIENDSSERVICEOP_UICLIENT_GETUSERACTIVITY.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$RestoreFriendsServiceOP[RestoreFriendsServiceOP.RESTOREFRIENDSSERVICEOP_UICLIENT_GETUSERDATAPROFILE.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
        }
    }

    public class CUIInvokeOnSetFriendAlias implements Runnable {
        private final String mFriendAlias;
        private final String mFriendPin;
        private final ICatfishClientInterface mIfClient;
        private int mUseAlias;

        public CUIInvokeOnSetFriendAlias(ICatfishClientInterface iCatfishClientInterface, String str, String str2, int i) {
            this.mFriendPin = str;
            this.mFriendAlias = str2;
            this.mUseAlias = i;
            this.mIfClient = iCatfishClientInterface;
        }

        public void run() {
            if (!this.mIfClient.isFinish()) {
                this.mIfClient.onSetFriendAlias(this.mFriendPin, this.mFriendAlias, this.mUseAlias);
            }
        }
    }

    public class CUISetFriendAlias implements Runnable {
        private final String mFriendAlias;
        private final String mFriendPin;
        private final ICatfishClientInterface mIfClient;
        private final CatfishService mService;
        private int mUseAlias;

        public CUISetFriendAlias(CatfishService catfishService, ICatfishClientInterface iCatfishClientInterface, String str, String str2, int i) {
            this.mService = catfishService;
            this.mFriendPin = str;
            this.mFriendAlias = str2;
            this.mIfClient = iCatfishClientInterface;
            this.mUseAlias = i;
        }

        public void run() {
            if (new FriendListDataStorage(this.mService).setFriendAlias(this.mFriendPin, this.mFriendAlias, this.mUseAlias)) {
                this.mService.postToMainHandler(new CUIInvokeOnSetFriendAlias(this.mIfClient, this.mFriendPin, this.mFriendAlias, this.mUseAlias));
            }
        }
    }

    public class CUISetUnreadStatusComment implements Runnable {
        private final String mFriendPin;
        private final ICatfishClientInterface mIfClient;
        private final CatfishService mService;

        public CUISetUnreadStatusComment(CatfishService catfishService, ICatfishClientInterface iCatfishClientInterface, String str) {
            this.mService = catfishService;
            this.mFriendPin = str;
            this.mIfClient = iCatfishClientInterface;
        }

        public void run() {
            if (new FriendListDataStorage(this.mService).updateFriendStatCommRead(this.mFriendPin)) {
                Log.d(CatfishUIBinder.TAG, "~~~ Success CUISetUnreadStatusComment");
            } else {
                Log.d(CatfishUIBinder.TAG, "~~~ Error CUISetUnreadStatusComment");
            }
        }
    }

    public enum DatabaseRequestOP {
        UNKNOWN,
        GET_ALL_FRIENDLIST,
        GET_ALL_FRIENDLIST_WITH_LIMITS,
        GET_ALL_ACTIVE_FRIENDLIST,
        GET_ALL_OFFICIALS,
        GET_ALL_PENDINGREQ,
        GET_ALL_FRIENDREQ,
        GET_ALL_NOTIFICATION,
        GET_ALL_RECENTUPDATES,
        GET_CONVERSATION,
        GET_STATCOMM_CONVERSATION,
        CHECK_IS_FRIEND,
        ADDPENDINGREQ,
        UPDATE_PENDINGREQ,
        DROP_PENDINGREQ,
        PINGFRIEND,
        IGNORE_FRIEND,
        ACCEPT_FRIEND_PARTIAL,
        ACCEPT_FRIEND_COMMIT,
        SENDMESSAGE,
        SENDBCASTMESSAGE,
        SENDBCASTVOICE,
        DELETE_CONVERSATION,
        DELETE_STATCOMM_CONVERSATION,
        DELETEPENDINGREQ,
        DELETE_ALL_RECENTUPDATES,
        DELETE_ALL_CHAT,
        DELETE_ALL_STATUSCOM,
        DELETE_FRIEND,
        NOTIFYFRD_STATUSUPDATE,
        NOTIFYFRD_MESSAGES_READ,
        UPDATE_FRIENDPROFILE,
        NOTIFYFRD_NAMEUPDATE,
        USERGROUP_CREATE,
        USERGROUP_DELETE,
        USERGROUP_JOIN,
        GET_ALL_USERGROUPS,
        GET_ALL_CONTACTS,
        GET_CONTACTS_LIKE,
        GET_CONTACTS_CATEGORY_LIKE,
        SETUSERSTATUS_DELETEOLDSTATUS,
        SET_MESSAGES_AS_READ,
        SET_STATCOMM_AS_READ,
        CREATE_TOPIC_CONV,
        SEND_CONV_MESSAGE,
        SEND_POOL_SLINK,
        GET_ALL_TOPICS,
        GET_POOL_DISCUSS,
        GET_POOL_DISCUSS_WITH_LIMIT,
        GET_POOL_DISCUSS_COUNT,
        DROP_CONFERENCE,
        LEAVE_CONFERENCE,
        DELETE_CONFERENCE,
        CONF_USERNAMECHAGED,
        GET_CONFERENCE_MEMBER,
        SEARCH_CONFERENCE_MEMBER,
        CLEAR_CONFERENCE,
        DELETE_CONFERENCE_MEMBER,
        DELETE_INVALID_TOPIC,
        DOWNLOAD_CONFERENCE_DATA,
        ACCEPT_CONFERENCE,
        SAVE_CONFERENCE,
        CLEAR_ALL_CONFERENCE,
        PROMOTE_FRIEND_IN_CONFERENCE,
        SHARE_PHOTO_IN_CONFERENCE,
        SEND_POOL_RESPONSE,
        GET_POOL_LIKE_LIST,
        UPDATEPOOLSTATUSTOSENT,
        POOL_SET_MUTE,
        POOL_IS_MUTE,
        GET_MY_PROFILE,
        SAVE_PROFILE,
        GET_USER_LIKE_LIST,
        IS_THIS_FRIEND,
        SAVE_CHAT,
        DELETE_SINGGLE_MESSAGE,
        REFRESH_ALL_GROUP_CONTACT,
        GET_CHILD_GROUP_CONTACT,
        GET_GROUP_CONTACT,
        ADD_CATEGORY,
        DELETE_CATEGORY,
        MOVE_TO_CATEGORY,
        ADD_TO_CATEGORY,
        ADD_MULTIPLE_TO_CATEGORY,
        ADD_TO_MULTIPLE_CATEGORY,
        REMOVE_FROM_CATEGORY,
        REMOVE_MULTIPLE_FROM_CATEGORY,
        REMOVE_FROM_MULTIPLE_CATEGORY,
        SET_POOL_DISCUSS_AS_READ,
        GET_SERVER_MESSAGE,
        REQUEST_ALL_FRIENDPIN_FROM_SERVER,
        AFTERSENDLONGMESSAGE,
        SEND_SVGEMOTION,
        DISABLE_STATUS_BUTTON,
        GET_FRIEND_ALIAS,
        NIC_PROFILE,
        STORE_NIC_PROFILE_CACHE,
        NIC_PROFILE_UPDATE,
        UPDATE_PROGRESS_DOWNLOAD_STATUS_COMMENT,
        UPDATE_PROGRESS_DOWNLOAD_POOL,
        UPDATE_PROGRESS_UPLOAD_STATUS_COMMENT,
        UPDATE_PROGRESS_UPLOAD_POOL,
        UPDATE_PROGRESS_UPLOAD_CHAT,
        GET_ALL_GALLERY_PHOTO,
        GET_ALL_GALLERY_VOICE,
        GET_ALL_GALLERY_VIDEO,
        GET_ALL_GALLERY_OTHER,
        GET_ALL_GALLERY_TIME,
        GET_ALL_GALLERY_POOL,
        GET_ALL_GALLERY_STATUS,
        GET_ALL_GALLERY_PRIVATE_MESSAGE,
        GET_ALL_GALLERY_POOL_TIME,
        GET_ALL_GALLERY_STATUS_TIME,
        GET_ALL_GALLERY_PRIVATE_MESSAGE_TIME,
        GET_ALL_GALLERY_TO_SELECTED,
        GET_ALL_GALLERY_POOL_TO_SELECTED,
        GET_ALL_GALLERY_PRIVATE_MESSAGE_TO_SELECTED,
        GET_ALL_GALLERY_STATUS_COMMENT_TO_SELECTED,
        GET_ALL_GALLERY_BY_TIME,
        GET_ALL_GALLERY_BY_POOL,
        GET_ALL_GALLERY_BY_STATUS,
        GET_ALL_GALLERY_BY_PRIVATE_MESSAGE,
        GET_ALL_GALLERY_BY_STATUS_TIME,
        GET_ALL_GALLERY_BY_PRIVATE_MESSAGE_TIME,
        GET_ALL_GALLERY_BY_POOL_TIME,
        REMOVE_GALLERY,
        REMOVE_ALL_GALLERY,
        GET_SINGLE_DISCUSS,
        GET_SINGLE_MESSAGE,
        GET_ALL_MULTIMEDIA_DATA_POOL,
        GET_CHAT_MULTIMEDIA,
        MULTIPLE_DELETE_FRIEND,
        MULTIPLE_MOVE_FRIEND,
        SEND_NIC_MESSAGE,
        GET_NIC_MESSAGE,
        DELETE_NIC_MESSAGE,
        NOTIFYFRD_PROFILEUPDATE,
        SAVE_USER_ACTIVITY,
        NOTIFYFRD_USERACTIVITYUPDATE,
        SAVE_DATA_PROFILE,
        SAVE_DOWNLOADED_USER_ACTIVITY,
        CEK_OUR_DATAPROFILE,
        SENDMESSAGE_WITHTIPE,
        CHANGE_POOL_TITLE,
        CHANGE_POOL_TOPIC_MESSAGE,
        IGNORE_ALL_FRIEND,
        ACCEPT_ALL_FRIEND,
        SAVE_PROFILE_BYUSER,
        UPLOAD_FIZZLINK_LIST,
        DELETE_SINGLE_FIZZLINK,
        STORE_FIZZLINK_FROM_RECIPIENT,
        GET_LAST_TIMESTAMP,
        GET_FRIEND_PROFILEINFO_DB,
        UPDATE_RECIPIENTNAME_NICMSG,
        RESENDINGADDREQ,
        UPDATE_RECIPIENTNAME_BLACKLISTNIC,
        GET_NIC_MESSAGE_CONV,
        UPDATE_STICKER_AUTOPLAY,
        UPDATE_STICKER_AUTOPLAYPOOL,
        UPDATE_FRIEND_REQUESTER_PROFILE,
        UPDATE_ALL_FRIENDS,
        UPDATE_STATUS_FRIENDS,
        UPDATE_PHOTO_FRIENDS,
        UPDATE_FRIEND_PHOTOUPDATE_MARK,
        UPDATE_FRIEND_STATUSUPDATE_MARK,
        GET_PENDING_TOPICS,
        GET_UNREAD_STATUS_COMMENT_COUNT,
        GET_USER_CATEGORIES
    }

    public enum LongMessageOperation {
        CREATEJSONMESSAGE_POOL,
        CONCATEJSONMESSAGE,
        CREATEJSONMESSAGE_CHAT,
        CREATEJSONMESSAGE_POOL_SENDVIADS,
        CREATEJSONMESSAGE_CHAT_SENDVIADS
    }

    class RestoreFriendsProfileDatabaseExecutor implements Runnable {
        private CatfishMessageObject cmo = null;
        private int index = 0;
        private ICatfishClientInterface mClientInterface = null;
        private String mUserpin = null;
        private int message_count = 0;
        private ArrayList messages = null;
        private String svr = null;

        public RestoreFriendsProfileDatabaseExecutor(ICatfishClientInterface iCatfishClientInterface, String str, String str2, ArrayList arrayList) {
            this.svr = str;
            this.mClientInterface = iCatfishClientInterface;
            this.message_count = arrayList.size();
            this.messages = arrayList;
            this.mUserpin = str2;
        }

        public RestoreFriendsProfileDatabaseExecutor(ICatfishClientInterface iCatfishClientInterface, String str, String str2, ArrayList arrayList, int i) {
            this.svr = str;
            this.mClientInterface = iCatfishClientInterface;
            this.message_count = arrayList.size();
            this.messages = arrayList;
            this.mUserpin = str2;
            this.index = i;
        }

        public void run() {
            FriendListDataStorage friendListDataStorage = new FriendListDataStorage(CatfishUIBinder.this.catfish_service);
            this.cmo = (CatfishMessageObject) this.messages.get(this.index);
            if (!friendListDataStorage.isPinAFriend(this.cmo.userpin)) {
                this.cmo.senderpin = this.cmo.userpin;
                friendListDataStorage.addNewFriend(this.cmo);
            }
            CatfishUIBinder.this.catfish_service.postToServiceHandler(new RestoreFriendsProfileExecutor(this.mClientInterface, this.svr, this.mUserpin, this.messages, this.index, RestoreFriendsServiceOP.RESTOREFRIENDSSERVICEOP_REQUEST_UPDATEFRDPROFILE));
            this.cmo = null;
        }
    }

    class RestoreFriendsProfileExecutor implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private int index;
        private long liveAge;
        private ICatfishClientInterface mClientInterface;
        private RestoreFriendsServiceOP mOperation;
        private String mUserpin;
        private int message_count;
        private ArrayList messages;
        private CatfishMessageObject msg;
        public int scheduleNum;
        private String svr;

        public RestoreFriendsProfileExecutor(ICatfishClientInterface iCatfishClientInterface, String str, String str2, ArrayList arrayList, int i, RestoreFriendsServiceOP restoreFriendsServiceOP) {
            this.scheduleNum = 0;
            this.liveAge = 0;
            this.mClientInterface = null;
            this.svr = null;
            this.mUserpin = null;
            this.msg = null;
            this.messages = null;
            this.index = 0;
            this.message_count = 0;
            this.catfishRestAPI = null;
            this.mOperation = null;
            this.liveAge = System.currentTimeMillis();
            this.svr = str;
            this.mClientInterface = iCatfishClientInterface;
            this.message_count = arrayList.size();
            this.messages = arrayList;
            this.mOperation = restoreFriendsServiceOP;
            this.mUserpin = str2;
            this.index = i;
            this.msg = new CatfishMessageObject();
            this.msg.userpin = this.mUserpin;
            this.msg.recipient = ((CatfishMessageObject) this.messages.get(i)).userpin;
            this.msg.message = null;
        }

        public void dropRunnable() {
        }

        public long getAge() {
            return this.liveAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            CatfishResult userActivity;
            switch (AnonymousClass3.$SwitchMap$com$catfiz$service$CatfishUIBinder$RestoreFriendsServiceOP[this.mOperation.ordinal()]) {
                case e.b /*1*/:
                    Log.d(CatfishUIBinder.TAG, " --- RESTOREFRIENDSSERVICEOP_REQUEST_UPDATEFRDPROFILE --- ");
                    Log.d(CatfishUIBinder.TAG, "Get Friend (" + this.msg.recipient + ") profile");
                    CatfishResult userProfileInfo = this.catfishRestAPI.getUserProfileInfo(this.svr, this.msg.userpin, this.msg.recipient);
                    Log.d(CatfishUIBinder.TAG, "SERVICEOP_REQUEST_UPDATEFRDPROFILE result: " + userProfileInfo);
                    if (userProfileInfo.hasSuccess()) {
                        if (userProfileInfo.photoavailable) {
                            Log.d(CatfishUIBinder.TAG, "----Photo Available: Get The Photo");
                            CatfishUIBinder.this.catfish_service.postToServiceHandler(new PPFDownloadExecutor(CatfishUIBinder.this.catfish_service, this.svr, this.msg.userpin, this.msg.recipient) {
                                public void onDownloadPhotoFail() {
                                    super.onDownloadPhotoFail();
                                    Log.d(CatfishUIBinder.TAG, "Friend (" + RestoreFriendsProfileExecutor.this.msg.recipient + "): Fail When Get Photo");
                                }
                            }, 2);
                        } else {
                            Log.d(CatfishUIBinder.TAG, "Friend (" + this.msg.recipient + "): No Photo Available");
                        }
                        this.msg.object_sequence = userProfileInfo.object_sequence;
                        Log.d(CatfishUIBinder.TAG, "--- RESTOREFRIENDSSERVICEOP_REQUEST_UPDATEFRDPROFILE ---,uname=" + userProfileInfo.username + ";");
                        if (userProfileInfo.username == null) {
                            Log.d(CatfishUIBinder.TAG, "Friend: " + this.msg.recipient + " : Username is NULL");
                        } else if (userProfileInfo.username.length() > 0 && userProfileInfo.username.compareTo(" ") != 0) {
                            this.msg.username = userProfileInfo.username;
                            this.msg.userstatus = userProfileInfo.userstatus;
                            Log.d(CatfishUIBinder.TAG, "Friend: " + this.msg.recipient + " : Post to update profile DB");
                            CatfishUIBinder.this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(CatfishUIBinder.this, this.mClientInterface, this.msg, DatabaseRequestOP.UPDATE_FRIENDPROFILE));
                        } else if (userProfileInfo.username.compareTo(" ") != 0) {
                            Log.d(CatfishUIBinder.TAG, "Friend: " + this.msg.recipient + " : Username is zero length");
                        }
                        Log.d(CatfishUIBinder.TAG, "Friend: " + this.msg.recipient + " : NOT AVAILABLE");
                    } else if (userProfileInfo.hasNotFound()) {
                        Log.e(CatfishUIBinder.TAG, "Please Check, Server tell that Photo is not FOUND");
                        CatfishUIBinder.this.catfish_service.postToDBHandler(new Runnable() {
                            public void run() {
                                CatfishDataStorage catfishDataStorage = new CatfishDataStorage(CatfishUIBinder.this.catfish_service);
                                CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
                                catfishMessageObject.userpin = RestoreFriendsProfileExecutor.this.mUserpin;
                                catfishMessageObject.recipient = RestoreFriendsProfileExecutor.this.msg.recipient;
                                catfishDataStorage.deleteRecipientFromFriend(catfishMessageObject);
                            }
                        });
                        this.index++;
                        if (this.index < this.message_count) {
                            CatfishUIBinder.this.catfish_service.postToDBHandler(new RestoreFriendsProfileDatabaseExecutor(this.mClientInterface, this.svr, this.mUserpin, this.messages, this.index));
                        } else {
                            if (LocalBackup.isBackupExists(CatfishUIBinder.this.catfish_service)) {
                                new LocalBackup().restoreWithoutFriendlist(CatfishUIBinder.this.catfish_service);
                            }
                            Log.d(CatfishUIBinder.TAG, "--- RESTORE FRIENDLIST + PROFILE DATA COMPLETE ---");
                        }
                        userProfileInfo.cleaningup();
                        return;
                    } else if (userProfileInfo.hasFailure()) {
                        Log.d(CatfishUIBinder.TAG, "----GET FRIEND PROFILE:" + this.msg.recipient + " FAIL: Reschedule!!!---");
                        this.svr = CatfishService.getServerHost();
                        userProfileInfo.cleaningup();
                        CatfishUIBinder.this.catfish_service.scheduleRunnableToService(this);
                    } else if (!userProfileInfo.hasSuccess()) {
                        Log.e(CatfishUIBinder.TAG, "Please Check, Server tell that something wrong in our parameter");
                        userProfileInfo.cleaningup();
                    }
                    CatfishUIBinder.this.catfish_service.postToServiceHandler(new RestoreFriendsProfileExecutor(this.mClientInterface, this.svr, this.mUserpin, this.messages, this.index, RestoreFriendsServiceOP.RESTOREFRIENDSSERVICEOP_UICLIENT_GETUSERACTIVITY));
                    return;
                case e.c /*2*/:
                    Log.d(CatfishUIBinder.TAG, "----GET USER ACTIVITY---");
                    userActivity = this.catfishRestAPI.getUserActivity(this.svr, this.msg.userpin, this.msg.recipient);
                    if (userActivity.hasSuccess()) {
                        Log.e(CatfishUIBinder.TAG, "Saving useractivity to db, friendpin:" + userActivity.userpin + " data:" + userActivity.data_json);
                        this.msg.senderpin = userActivity.userpin;
                        this.msg.rcvtimestamp = userActivity.timestamp;
                        this.msg.message = userActivity.data_json;
                        CatfishUIBinder.this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(CatfishUIBinder.this, this.mClientInterface, this.msg, DatabaseRequestOP.SAVE_DOWNLOADED_USER_ACTIVITY));
                    } else if (!userActivity.hasNotFound()) {
                        if (userActivity.hasFailure()) {
                            this.svr = CatfishService.getServerHost();
                            CatfishUIBinder.this.catfish_service.scheduleRunnableToService(this);
                        } else {
                            Log.e(CatfishUIBinder.TAG, "Please Check, Server tell that something wrong in our parameter");
                        }
                    }
                    userActivity.cleaningup();
                    CatfishUIBinder.this.catfish_service.postToServiceHandler(new RestoreFriendsProfileExecutor(this.mClientInterface, this.svr, this.mUserpin, this.messages, this.index, RestoreFriendsServiceOP.RESTOREFRIENDSSERVICEOP_UICLIENT_GETUSERDATAPROFILE));
                    return;
                case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                    Log.d(CatfishUIBinder.TAG, "---- RESTOREFRIENDSSERVICEOP_UICLIENT_GETUSERDATAPROFILE---");
                    userActivity = this.catfishRestAPI.getUserDataProfile(this.svr, this.msg.userpin, this.msg.recipient);
                    if (userActivity.hasSuccess()) {
                        Log.d(CatfishUIBinder.TAG, "----GET USER DATA PROFILE---" + userActivity.data_json + " " + userActivity.toString());
                        Log.e(CatfishUIBinder.TAG, "Saving data profile to db, friendpin:" + userActivity.userpin + " data:" + userActivity.data_json);
                        this.msg.senderpin = userActivity.userpin;
                        this.msg.rcvtimestamp = userActivity.timestamp;
                        this.msg.message = userActivity.data_json;
                        CatfishUIBinder.this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(CatfishUIBinder.this, this.mClientInterface, this.msg, DatabaseRequestOP.SAVE_DATA_PROFILE));
                    } else if (userActivity.hasNotFound()) {
                        Log.d(CatfishUIBinder.TAG, "----GET USER DATA PROFILE: " + userActivity.userpin + " NOT FOUND ----");
                    } else if (userActivity.hasFailure()) {
                        this.svr = CatfishService.getServerHost();
                        CatfishUIBinder.this.catfish_service.scheduleRunnableToService(this);
                    } else {
                        Log.e(CatfishUIBinder.TAG, "Please Check, Server tell that something wrong in our parameter");
                    }
                    userActivity.cleaningup();
                    CatfishUIBinder.this.catfish_service.signalDeviceIdNPinRegistered(false);
                    this.index++;
                    if (this.index < this.message_count) {
                        CatfishUIBinder.this.catfish_service.postToDBHandler(new RestoreFriendsProfileDatabaseExecutor(this.mClientInterface, this.svr, this.mUserpin, this.messages, this.index));
                        return;
                    }
                    if (LocalBackup.isBackupExists(CatfishUIBinder.this.catfish_service)) {
                        new LocalBackup().restoreWithoutFriendlist(CatfishUIBinder.this.catfish_service);
                    }
                    Log.d(CatfishUIBinder.TAG, "--- RESTORE FRIENDLIST + PROFILE DATA COMPLETE ---");
                    return;
                default:
                    return;
            }
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    enum RestoreFriendsServiceOP {
        RESTOREFRIENDSSERVICEOP_REQUEST_UPDATEFRDPROFILE,
        RESTOREFRIENDSSERVICEOP_UICLIENT_GETUSERACTIVITY,
        RESTOREFRIENDSSERVICEOP_UICLIENT_GETUSERDATAPROFILE
    }

    public enum ServiceERRORCode {
        NOERROR,
        SERVICEUNKNOWN,
        MESSAGENULL,
        SERVICEUNHANDLED,
        ALLREADY_A_FRIEND
    }

    public enum ServiceOP {
        SERVICEOP_UNKNOWN,
        SERVICEOP_UICLIENT_PINGSERVER,
        SERVICEOP_UICLIENT_SENDMESSAGE,
        SERVICEOP_UICLIENT_SENDBCASTMESSAGE,
        SERVICEOP_UICLIENT_GETPROFILE,
        SERVICEOP_UICLIENT_GETMESSAGE,
        SERVICEOP_UICLIENT_PINGFRIEND,
        SERVICEOP_UICLIENT_SETUSERNAME,
        SERVICEOP_UICLIENT_SETUSERSTATUS,
        SERVICEOP_UICLIENT_NOTIFYWRITING,
        SERVICEOP_UICLIENT_REQUESTFRIEND_GETPROFILE,
        SERVICEOP_UICLIENT_REQUESTFRIEND,
        SERVICEOP_UICLIENT_ACCEPTFRIEND,
        SERVICEOP_UICLIENT_ACCFRD_GETPHOTO,
        SERVICEOP_UICLIENT_GETPFIINFO,
        SERVICEOP_UICLIENT_USRGRPCREATE,
        SERVICEOP_UICLIENT_USRGRPDELETE,
        SERVICEOP_UICLIENT_USRGRPINVITE,
        SERVICEOP_UICLIENT_USRGRPJOIN,
        SERVICEOP_NOTIFYFRDS_STATUSUPDATE,
        SERVICEOP_DELETE_FRIEND,
        SERVICEOP_MESSAGES_READ,
        SERVICEOP_REQUEST_UPDATEFRDPROFILE,
        SERVICEOP_REQUEST_FRIENDPROFILE,
        SERVICEOP_REQUEST_MULTIPLEFRIENDPROFILE,
        SERVICEOP_UICLIENT_CREATE_TOPIC_CONV,
        SERVICEOP_UICLIENT_SEND_MESSAGE_CONV,
        SERVICEOP_UICLIENT_DROP_TOPIC_CONV,
        SERVICEOP_UICLIENT_LEAVE_TOPIC_CONV,
        SERVICEOP_UICLIENT_DEL_CONF_MEMBER,
        SERVICEOP_UICLIENT_PROMOTE_FRIEND_IN_CONFRC,
        SERVICEOP_UICLIENT_SEND_POOL_RESPONSE,
        SERVICEOP_NOTIFYFRDS_NAMEUPDATE,
        SERVICEOP_UICLIENT_REQUEST_ALL_FRIENDPIN,
        SERVICEOP_UICLIENT_SENDLONGMESSAGE,
        SERVICEOP_UICLIENT_SENDMESSAGE_WITH_TIPE,
        SERVICEOP_UICLIENT_SENDMESSAGE_WITH_TIPE_CONVKEY,
        SERVICEOP_NOTIFYFRDS_PROFILEUPDATE,
        SERVICEOP_UICLIENT_SETUSERPROFILE,
        SERVICEOP_UICLIENT_USER_ACTIVITY,
        SERVICEOP_NOTIFYFRDS_USERACTIVITYUPDATE,
        SERVICEOP_UICLIENT_GETUSERDATAPROFILE,
        SERVICEOP_UICLIENT_GETUSERACTIVITY,
        SERVICEOP_UICLIENT_GETNICRECIPIENTNAME,
        SERVICEOP_UICLIENT_GETBLACKLISTRECIPIENTNAME,
        SERVICEOP_NIC_PROFILE_DOWNLOAD,
        SERVICEOP_UICLIENT_UPDATEREQUESTERPROFILE,
        SERVICEOP_UICLIENT_GETADVIEW,
        SERVICEOP_UICLIENT_ADCLICK,
        SERVICEOP_UICLIENT_REGISTERPHONENUMBER,
        SERVICEOP_UICLIENT_EMAIL_REG_EXCLUSIVE,
        SERVICEOP_UICLIENT_EMAIL_REG_COBRAND,
        SERVICEOP_UICLIENT_RESEND_ACTIVATION,
        SERVICEOP_UICLIENT_EMAIL_ACTIVATION,
        SERVICEOP_UICLIENT_EMAIL_REG_CHECK,
        SERVICEOP_UICLIENT_EMAIL_RESET_PASSWORD,
        SERVICEOP_UICLIENT_EMAIL_RESET_PASSWORD_ACTIVATION,
        SERVICEOP_UICLIENT_UPDATE_NIC,
        SERVICEOP_UICLIENT_EMAIL_REG_EXISTING,
        SERVICEOP_UICLIENT_GETAPPS,
        SERVICEOP_UICLIENT_VERIFYAPPS,
        SERVICEOP_UICLIENT_STREAM_GET_THUMBNAIL
    }

    public CatfishUIBinder(CatfishService catfishService) {
        this.catfish_service = catfishService;
    }

    private void postResponse(CUIResponseExecutor cUIResponseExecutor) {
        this.catfish_service.postToMainHandler(cUIResponseExecutor);
    }

    private void postUpdateBCASTDeliveryStatus(ICatfishClientInterface iCatfishClientInterface, CatfishMessageObject catfishMessageObject, MessageDeliveryStatus messageDeliveryStatus) {
        catfishMessageObject.deliverystatus = messageDeliveryStatus;
        this.catfish_service.postToDBHandler(new CUIBCASTDeliveryStatusUpdater(this, iCatfishClientInterface, catfishMessageObject));
    }

    public void acceptAllFriend(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.ACCEPT_ALL_FRIEND));
    }

    public void acceptConverence(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str2;
        obtain.userpin = str;
        obtain.object_sequence = Long.parseLong(str2.split(":")[1]);
        obtain.object_owner = str2.split(":")[0];
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain.getRefCopy(), DatabaseRequestOP.ACCEPT_CONFERENCE));
        this.catfish_service.postRunnableToService(new PoolServiceExecutor(CatfishService.getCurrentServerHost(), 4, this.catfish_service, str, obtain.getRefCopy()));
        this.catfish_service.postRunnableToService(new PoolServiceExecutor(CatfishService.getCurrentServerHost(), 0, this.catfish_service, str, obtain.getRefCopy()));
        obtain.recycle();
    }

    public void acceptFriend(ICatfishClientInterface iCatfishClientInterface, String str, String str2, long j) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.recipient = str2;
        obtain.message = null;
        obtain.sequence = j;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.ACCEPT_FRIEND_PARTIAL));
    }

    public void activateUser(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.email = str;
        obtain.code = str2;
        this.catfish_service.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getRegistrationServer(), obtain.getRefCopy(), ServiceOP.SERVICEOP_UICLIENT_EMAIL_ACTIVATION));
        obtain.recycle();
    }

    public void addMultipleToCategoryGroup(ICatfishClientInterface iCatfishClientInterface, int i, String[] strArr) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.groupid = (long) i;
        obtain.recipients = strArr;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.ADD_MULTIPLE_TO_CATEGORY));
    }

    public void addNewCategoryGroup(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.groupname = str;
        obtain.data_json = str2;
        obtain.groupdesc = str3;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.ADD_CATEGORY));
    }

    public void addToCategoryGroup(ICatfishClientInterface iCatfishClientInterface, int i, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.groupid = (long) i;
        obtain.recipient = str;
        obtain.recipientname = str2;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.ADD_TO_CATEGORY));
    }

    public void addToMultipleCategoryGroup(ICatfishClientInterface iCatfishClientInterface, int[] iArr, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.groupids = iArr;
        obtain.userpin = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.ADD_TO_MULTIPLE_CATEGORY));
    }

    public void bindAudioReceivedCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATISFH_ACTION_AUDIOFILE_RECEIVED, iCatfishClientInterface);
    }

    public void bindBCASTResponseCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_BCASTRESPONSE, iCatfishClientInterface);
    }

    public void bindBlacklistNicNameReady(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_BLACKLISTNICNAMEREADY, iCatfishClientInterface);
        Log.d(TAG, "client interface tag action bindBlacklistNicNameReady: " + iCatfishClientInterface.getTagAction());
    }

    public void bindCommentOnStatusCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATISFH_ACTION_HASCOMMENT_ONSTATUS, iCatfishClientInterface);
    }

    public void bindDataFileReceivedCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATISFH_ACTION_DATAFILE_RECEIVED, iCatfishClientInterface);
    }

    public void bindDeletedTopicConverenceCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_TOPICPOOLDELETED, iCatfishClientInterface);
    }

    public void bindDeliveryStatusUpdateCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_DELIVERYSTATUS_UPDATED, iCatfishClientInterface);
    }

    public void bindDeviceIdNPinRegisteredCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_DEVICEIDREGISTERED, iCatfishClientInterface);
    }

    public void bindDownloadFizzlink(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_FIZZLINKDOWNLOAD, iCatfishClientInterface);
    }

    public void bindDownloadPool(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_DOWNLOAD_POOL, iCatfishClientInterface);
    }

    public void bindDownloadStatus(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_DOWNLOAD_STATUS, iCatfishClientInterface);
    }

    public void bindFizzlinkUploadCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_FIZZLINKUPLOAD, iCatfishClientInterface);
    }

    public void bindFriendProfileUpdate(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATISFH_ACTION_FRDPFI_UPDATE, iCatfishClientInterface);
    }

    public void bindHasGroupDeleteCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_HASGROUP_DELETE, iCatfishClientInterface);
    }

    public void bindHasNewFriendCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_HASNEWFRIEND, iCatfishClientInterface);
    }

    public void bindHasNewMessageCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_HASNEWMESSAGE, iCatfishClientInterface);
    }

    public void bindHasNewMessageConverenceCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_NEWMESSAGEPOOLRECEIVE, iCatfishClientInterface);
    }

    public void bindHasNewNicMessageCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_HASNEWNICMESSAGE, iCatfishClientInterface);
    }

    public void bindHasNewObjectCommentCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_HASNEWOBJECTCOMMENT, iCatfishClientInterface);
    }

    public void bindHasNewTopicConverenceCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_NEWTOPICRECEIVE, iCatfishClientInterface);
    }

    public void bindHasTheme(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_HASNEWTHEME, iCatfishClientInterface);
    }

    public void bindHasUserActivityUpdateCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_HASUSERACTIVITYUPDATE, iCatfishClientInterface);
    }

    public void bindImageReceivedCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATISFH_ACTION_IMAGEFILE_RECEIVED, iCatfishClientInterface);
    }

    public void bindMainViewFriendProfileUpdate(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATISFH_ACTION_MAINVIEW_FRDPFI_UPDATE, iCatfishClientInterface);
    }

    public void bindNewFriendAddedCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_NEWFRIENDADDED, iCatfishClientInterface);
    }

    public void bindNewServerMessageCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_NEWSERVERMESSAGERECEIVED, iCatfishClientInterface);
    }

    public void bindNicMsgRecipientNameReady(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_NICMSGRECIPIENTNAMEREADY, iCatfishClientInterface);
    }

    public void bindOnDeletedByFriendCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_DELETEBYFRD, iCatfishClientInterface);
    }

    public void bindOnTypingCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_HASONTYPINGSIGNAL, iCatfishClientInterface);
    }

    public void bindPingReceivedCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_HASPING, iCatfishClientInterface);
    }

    public void bindPoolDataFileReceivedCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATISFH_ACTION_POOL_DATAFILE_RECEIVED, iCatfishClientInterface);
    }

    public void bindRegisterDeviceIdCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_REGISTERDEVICEID, iCatfishClientInterface);
    }

    public void bindRegistrationCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_UI_REGISTRATION, iCatfishClientInterface);
    }

    public void bindResponseNetralOnStatusCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATISFH_ACTION_HASRESPONSENETRAL_ONCOMENT, iCatfishClientInterface);
    }

    public void bindResponseOnStatusCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATISFH_ACTION_HASRESPONSE_ONCOMENT, iCatfishClientInterface);
    }

    public void bindResponsePoolCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_RESPONSEPOOLMESSAGERECEIVE, iCatfishClientInterface);
    }

    public void bindRestoreFromServerCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_RESTOREFROMSERVER, iCatfishClientInterface);
    }

    public void bindUpdatedTopicMemberCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_TOPICMEMBERUPDATED, iCatfishClientInterface);
    }

    public void bindUpdatesIncomingCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_HASUPDATES, iCatfishClientInterface);
    }

    public void bindUploadChat(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_UPLOAD_CHAT, iCatfishClientInterface);
    }

    public void bindUploadFizzlink(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_FIZZLINKUPLOAD, iCatfishClientInterface);
    }

    public void bindUploadPool(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_UPLOAD_POOL, iCatfishClientInterface);
    }

    public void bindUploadStartSendingCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_UPLOAD_START_SENDING, iCatfishClientInterface);
    }

    public void bindUploadStatus(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATFISH_ACTION_UPLOAD_STATUS, iCatfishClientInterface);
    }

    public void bindVoiceChatReceivedCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.bindCallBackToAction(CatfishService.CATISFH_ACTION_VOICECHAT_RECEIVED, iCatfishClientInterface);
    }

    public void blackListNic(ICatfishClientInterface iCatfishClientInterface, String str, String str2, long j) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str.toUpperCase(Locale.US);
        obtain.username = str2;
        obtain.rcvtimestamp = j;
        this.catfish_service.postToDBHandler(new CUIDBBlacklistNic(iCatfishClientInterface, obtain.getRefCopy()));
        if (str2 == null) {
            obtain.senderpin = CatfishService.getUserPIN();
            obtain.recipient = str.toUpperCase(Locale.US);
            obtain.sequence = j;
            Log.d(TAG, "sequence:" + obtain.sequence);
            CatfishService catfishService = this.catfish_service;
            CatfishService catfishService2 = this.catfish_service;
            catfishService.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getCurrentServerHost(), obtain.getRefCopy(), ServiceOP.SERVICEOP_UICLIENT_GETBLACKLISTRECIPIENTNAME));
        }
        obtain.recycle();
    }

    public void cancelNotification(int i) {
        this.catfish_service.cancelNotification(i);
    }

    public void changePoolAttachFile(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToDBHandler(new PoolDataUploadExecutor(iCatfishClientInterface, catfishService2, CatfishService.getCurrentServerHost(), str, str2, str3, str4, PoolDataType.TOPIC_ATTACH.ordinal(), null));
    }

    public void changePoolImage(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToDBHandler(new PoolDataUploadExecutor(iCatfishClientInterface, catfishService2, CatfishService.getCurrentServerHost(), str, str2, str3, str4, PoolDataType.TOPIC_IMAGE.ordinal(), null));
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.username = str2;
        obtain.topic_key = str3;
        obtain.image_path = str4;
        this.catfish_service.postToDBHandler(new CUIDBPoolAddRecipient(iCatfishClientInterface, obtain, PoolRecipient.PHOTO));
    }

    public void changePoolMessage(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.username = str2;
        obtain.topic_key = str3;
        obtain.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
        obtain.message = str4;
        obtain.messagetype = MessageType.NEW_POOL_TOPIC_MESSAGE;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.CHANGE_POOL_TOPIC_MESSAGE));
        this.catfish_service.postToDBHandler(new CUIDBPoolAddRecipient(iCatfishClientInterface, obtain, PoolRecipient.DESC));
    }

    public void changePoolTitle(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.username = str2;
        obtain.topic_key = str3;
        obtain.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
        obtain.message = str4;
        obtain.messagetype = MessageType.NEW_POOL_TITLE;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.CHANGE_POOL_TITLE));
    }

    public void changeUserKey(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3) {
        CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
        catfishMessageObject.longpin = str;
        catfishMessageObject.password = str2;
        catfishMessageObject.message = str3;
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        PinServiceOperation pinServiceOperation = PinServiceOperation.CHANGE_USER_KEY;
        String deviceId = this.catfish_service.getDeviceId();
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToServiceHandler(new PinManager(catfishService2, pinServiceOperation, deviceId, CatfishService.getUserPIN(), catfishMessageObject));
    }

    public void checkAndUpdateFriendlist(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToServiceHandler(new FriendListUpdateExecutor(iCatfishClientInterface, catfishService2, CatfishService.getCurrentServerHost(), str));
    }

    public void checkIsFriend(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.recipient = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.CHECK_IS_FRIEND));
    }

    public void clearAllConferenceMessage(ICatfishClientInterface iCatfishClientInterface, String str) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.CLEAR_ALL_CONFERENCE));
    }

    public void clearConferenceMessage(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str2;
        obtain.userpin = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.CLEAR_CONFERENCE));
    }

    public void clearContactSelection() {
        CatfishService catfishService = this.catfish_service;
        CatfishService.mContactSelection.clear();
    }

    public void clearSingleConferenceMessage(ICatfishClientInterface iCatfishClientInterface, String str, String str2, long j) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str2;
        obtain.userpin = str;
        obtain.sequence = j;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.CLEAR_CONFERENCE));
    }

    public void createTopicConverence(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4, String str5, String str6, File file, String str7) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.username = str2;
        obtain.recipient = str3;
        obtain.title = str4;
        obtain.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
        obtain.message = str5;
        obtain.image_path = str6;
        obtain.datafile_path = str7;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.CREATE_TOPIC_CONV));
    }

    public void deleteAllRecentUpdates(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.DELETE_ALL_RECENTUPDATES));
    }

    public void deleteCategoryGroup(ICatfishClientInterface iCatfishClientInterface, int i) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.groupid = (long) i;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.DELETE_CATEGORY));
    }

    public void deleteChatConversation(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.conversation_key = str + ":" + str2;
        obtain.recipient = str2;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.DELETE_CONVERSATION));
    }

    public void deleteConference(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str2;
        obtain.userpin = str;
        obtain.object_sequence = Long.parseLong(str2.split(":")[1]);
        obtain.object_owner = str2.split(":")[0];
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.DELETE_CONFERENCE));
    }

    public void deleteConverenceMember(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str2;
        obtain.userpin = str;
        obtain.object_sequence = Long.parseLong(str2.split(":")[1]);
        obtain.object_owner = str2.split(":")[0];
        obtain.senderpin = str3;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.DELETE_CONFERENCE_MEMBER));
    }

    public void deleteFriend(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.recipient = str2;
        obtain.message = null;
        obtain.conversation_key = str + ":" + str2;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.DELETE_FRIEND));
    }

    public void deleteMultipleFriend(ICatfishClientInterface iCatfishClientInterface, String str, ArrayList arrayList, int i) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.message = null;
        obtain.otherData = arrayList;
        obtain.groupid = (long) i;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.MULTIPLE_DELETE_FRIEND));
    }

    public void deleteNicMessage(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.conversation_key = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.DELETE_NIC_MESSAGE));
    }

    public void deleteObjCommConversation(ICatfishClientInterface iCatfishClientInterface, String str, long j) {
    }

    public void deletePendingRequest(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = null;
        obtain.recipient = str;
        obtain.message = null;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.DELETEPENDINGREQ));
    }

    public void deleteSingleMessage(ICatfishClientInterface iCatfishClientInterface, long j, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.sequence = j;
        obtain.conversation_key = CatfishService.getUserPIN() + ":" + str;
        obtain.userpin = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.DELETE_SINGGLE_MESSAGE));
    }

    public void deleteSingleUploadFizzlink(ICatfishClientInterface iCatfishClientInterface, long j) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.object_sequence = j;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.DELETE_SINGLE_FIZZLINK));
    }

    public void deleteStatCommConversation(ICatfishClientInterface iCatfishClientInterface, String str, long j) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.conversation_key = "sc:" + str + ":" + String.valueOf(j);
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.DELETE_STATCOMM_CONVERSATION));
    }

    public void deleteWalpaperChat(String str) {
        String str2 = Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + CatfishService.FILE_PACKAGE_NAME_CATFIZ + "/bg/background.jpg";
        if (str.compareTo("pool") == 0) {
            str2 = Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + CatfishService.FILE_PACKAGE_NAME_CATFIZ + "/bg/pool_background.jpg";
        }
        File file = new File(str2);
        str2 = Environment.getExternalStorageState();
        if (str2.equals("mounted")) {
            int i = 1;
        } else {
            Log.e(TAG, "SVG Emoticon Adapter: media not mounted in is state: " + str2 + ":DROP !!!");
            Object obj = null;
        }
        File parentFile = file.getParentFile();
        if (!(parentFile.exists() || parentFile.mkdirs())) {
            Log.e(TAG, "SVG Emoticon Adapter: Path to file could not be created.");
            obj = null;
        }
        if (obj != null) {
            file.delete();
        }
    }

    public void downloadBroadcastImageStatus(ICatfishClientInterface iCatfishClientInterface, Context context, String str, String str2, String str3, String str4, long j, long j2, String str5, String str6, ICatfishUIBinder iCatfishUIBinder) {
        Intent intent = new Intent(BroadcastIntents.ACTION_DOWNLOAD_STATUS);
        intent.putExtra(CatfishService.PROGRESS_VALUE, 0);
        intent.putExtra("idRecord", str6);
        LocalBroadcastManager.getInstance(this.catfish_service).sendBroadcast(intent);
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postRunnableToService(new StatusDataBcastDLoadExecutor(catfishService2, CatfishService.getCurrentServerHost(), str, str2, str4, str3, j2, j, str5, str6), 2);
    }

    public void downloadConferenceFile(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4, long j, long j2, int i, int i2, int i3, String str5) {
        CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
        catfishMessageObject.topic_key = str2;
        catfishMessageObject.senderpin = str3;
        catfishMessageObject.message = str4;
        catfishMessageObject.sequence = j;
        catfishMessageObject.data_sequence = j2;
        catfishMessageObject.bytestart = i;
        catfishMessageObject.byteend = i2;
        catfishMessageObject.bytewritten = i3;
        catfishMessageObject.data_comment = str5;
        Log.d(TAG, "Download conference file bytestart = " + catfishMessageObject.bytestart + " byteend = " + catfishMessageObject.byteend + " bytewritten = " + catfishMessageObject.bytewritten);
        Log.d(TAG, "message:" + str4 + "\n datacomment:" + str5);
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, catfishMessageObject, DatabaseRequestOP.DOWNLOAD_CONFERENCE_DATA));
    }

    public void downloadMessageSlinkData(ICatfishClientInterface iCatfishClientInterface, long j, String str, String str2, int i, String str3, String str4, String str5, String str6) {
        Log.d(TAG, "GET SLINK DATA FROM SERVER");
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postRunnableToService(new MessageSlinkDataDownloadExecutor(catfishService2, CatfishService.getCurrentServerHost(), str, str2, iCatfishClientInterface, i, str3, str4, true, j, str5, str6), 2);
    }

    public void downloadSlinkData(ICatfishClientInterface iCatfishClientInterface, String str, String str2, int i, String str3, String str4) {
        Log.d(TAG, "GET SLINK DATA FROM SERVER");
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postRunnableToService(new SlinkDataDownloadExecutor(catfishService2, CatfishService.getCurrentServerHost(), str, str2, iCatfishClientInterface, i, str3, str4, true), 2);
    }

    public void dropConverence(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str2;
        obtain.userpin = str;
        obtain.object_sequence = Long.parseLong(str2.split(":")[1]);
        obtain.object_owner = str2.split(":")[0];
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.DROP_CONFERENCE));
    }

    public void getChatMultimedia(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.GET_CHAT_MULTIMEDIA));
    }

    public void getConverenceMember(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
    }

    public void getDataProfile(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        Log.d(TAG, "getDataProfile");
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToServiceHandler(new GetUserDataProfileExecutor(this, catfishService2, CatfishService.getCurrentServerHost(), iCatfishClientInterface, str, str2));
    }

    public void getFriend(ICatfishClientInterface iCatfishClientInterface, String str) {
        this.catfish_service.postToDBHandler(new CUIDBGetFriendExecutor(iCatfishClientInterface, str));
    }

    public void getFriendNameFromServer(ICatfishClientInterface iCatfishClientInterface, String str, String str2, long j, String str3) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.senderpin = str;
        obtain.recipient = str2;
        obtain.sequence = j;
        obtain.message = str3;
        Log.d(TAG, "----get recipientname post to server---");
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        catfishService.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getCurrentServerHost(), obtain, ServiceOP.SERVICEOP_UICLIENT_GETNICRECIPIENTNAME));
    }

    public void getGroup(ICatfishClientInterface iCatfishClientInterface, String str) {
        this.catfish_service.postToDBHandler(new CUIDBGetGroupExecutor(iCatfishClientInterface, str));
    }

    public void getMessageSlinkInfo(ICatfishClientInterface iCatfishClientInterface, long j, String str, String str2, boolean z) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postRunnableToService(new SlinkFileInfoExecutor(catfishService2, j, CatfishService.getCurrentServerHost(), str2, false, z), 2);
    }

    public Object[] getSelectContactAsArray() {
        CatfishService catfishService = this.catfish_service;
        return CatfishService.mContactSelection.toArray();
    }

    public Iterator getSelectContactIterator() {
        CatfishService catfishService = this.catfish_service;
        return CatfishService.mContactSelection.iterator();
    }

    public Context getServiceContext() {
        return this.catfish_service;
    }

    public CatfishService getServiceInstance() {
        return this.catfish_service;
    }

    public void getSlink(ICatfishClientInterface iCatfishClientInterface, Context context, String str, long j, String str2, String str3, int i, String str4, String str5, long j2, long j3) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToDBHandler(new CatfizGetSlinkExecutor(catfishService2, iCatfishClientInterface, context, CatfishService.getCurrentServerHost(), str, j, str2, str3, i, str4, str5, j2, j3));
    }

    public String getSlinkFromJson(String str, String str2) {
        try {
            JSONObject jSONObject = new JSONObject(str);
            if (str2.compareTo(ChunkStorage.DATA_TABLE_NAME) == 0) {
                return jSONObject.has(ServerMessageDataStorage.IMAGEPATH) ? jSONObject.getString(ServerMessageDataStorage.IMAGEPATH) : jSONObject.has(ObjectCommentDataStorage.DATAPATH) ? jSONObject.getString(ObjectCommentDataStorage.DATAPATH) : null;
            } else {
                if (!jSONObject.has(str2)) {
                    return null;
                }
                String string = jSONObject.getString(str2);
                Log.e(TAG, "slink:@" + str2 + "@ datae:" + string);
                return string;
            }
        } catch (Exception e) {
            Log.e(TAG, "Error: " + e.toString());
            return null;
        }
    }

    public void getSlinkInfo(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postRunnableToService(new SlinkFileInfoDownloadExecutor(catfishService2, CatfishService.getCurrentServerHost(), str, str2, iCatfishClientInterface), 2);
    }

    public void getStreamThumbnailDownload(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.slink = str;
        this.catfish_service.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, null, obtain.getRefCopy(), ServiceOP.SERVICEOP_UICLIENT_STREAM_GET_THUMBNAIL), 1);
    }

    public Drawable getTemptDrawable() {
        CatfishService catfishService = this.catfish_service;
        return CatfishService.getStoredDrawable();
    }

    public long getUniqueMonotonic() {
        return CatfishRESTAPI.uniqueMonotonicSequence();
    }

    public void getUserActivity(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.recipient = str2;
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        catfishService.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getCurrentServerHost(), obtain, ServiceOP.SERVICEOP_UICLIENT_GETUSERACTIVITY));
    }

    public void getUserProfileInfo(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.recipient = str2;
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        catfishService.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getCurrentServerHost(), obtain, ServiceOP.SERVICEOP_UICLIENT_GETPFIINFO));
    }

    public void handleNotification(Intent intent) {
        this.catfish_service.handleNotification(intent);
    }

    public void ignoreAllFriend(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.IGNORE_ALL_FRIEND));
    }

    public void ignoreFriend(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.senderpin = str2;
        obtain.message = null;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.IGNORE_FRIEND));
    }

    public void inviteConverence(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String[] strArr) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.topic_key = str2;
        obtain.recipients = strArr;
        obtain.object_owner = str2.split(":")[0];
        obtain.object_sequence = Long.parseLong(str2.split(":")[1]);
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        catfishService.postToServiceHandler(new PoolServiceExecutor(CatfishService.getCurrentServerHost(), 2, this.catfish_service, str, obtain));
    }

    public boolean isContactSelected(String str) {
        CatfishService catfishService = this.catfish_service;
        return CatfishService.mContactSelection.contains(str);
    }

    public boolean isFriendOnTyping(String str) {
        CatfishService catfishService = this.catfish_service;
        return CatfishService.mFriendOnTypingList.contains(str);
    }

    public void isPoolMute(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.POOL_IS_MUTE));
    }

    public void isThisFriend(ICatfishClientInterface iCatfishClientInterface, String str, int i) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.senderpin = str;
        obtain.binarytype = i;
        this.catfish_service.postToDBHandler(new CUIDBIsThisFriendExecutor(iCatfishClientInterface, obtain));
    }

    public void leaveConverence(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str2;
        obtain.userpin = str;
        obtain.object_sequence = Long.parseLong(str2.split(":")[1]);
        obtain.object_owner = str2.split(":")[0];
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.LEAVE_CONFERENCE));
    }

    public void moveMultipleFriendToCategoryGroup(ICatfishClientInterface iCatfishClientInterface, int i, int i2, ArrayList arrayList) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.groupid = (long) i;
        obtain.grouptimestamp = (long) i2;
        obtain.otherData = arrayList;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.MULTIPLE_MOVE_FRIEND));
    }

    public void moveToCategoryGroup(ICatfishClientInterface iCatfishClientInterface, int i, int i2, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.groupid = (long) i;
        obtain.grouptimestamp = (long) i2;
        obtain.recipient = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.MOVE_TO_CATEGORY));
    }

    public void notifyFriendsProfileUpdate(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.username = str2;
        obtain.data_json = str3;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.NOTIFYFRD_PROFILEUPDATE));
    }

    public void notifyFriendsUsernameUpdate(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.username = str2;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.NOTIFYFRD_NAMEUPDATE));
    }

    public void notifyFriendsUserstatusUpdate(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.userstatus = str3;
        obtain.username = str2;
        CatfishService catfishService = this.catfish_service;
        obtain.sequence = CatfishService.getCatfishPreferences().getLong(CatfishService.USERSTATUS_SEQ_PREF, 0);
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.NOTIFYFRD_STATUSUPDATE));
    }

    public void notifyMessagesRead(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.recipient = str2;
        obtain.message = null;
        this.catfish_service.postToDBHandler(new CUIDBNotifyMessageReadExecutor(obtain));
    }

    public void notifyWriting(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.recipient = str2;
        obtain.message = null;
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        catfishService.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getCurrentServerHost(), obtain, ServiceOP.SERVICEOP_UICLIENT_NOTIFYWRITING));
    }

    protected boolean onTransact(int i, Parcel parcel, Parcel parcel2, int i2) {
        return super.onTransact(i, parcel, parcel2, i2);
    }

    public void pingFriend(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.recipient = str2;
        obtain.message = null;
        obtain.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
        this.catfish_service.postToDBHandler(new CUIDBSendPINGFriendExecutor(this, iCatfishClientInterface, obtain));
    }

    public void pingServer(ICatfishClientInterface iCatfishClientInterface) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        catfishService.postToServiceHandler(new CUIServiceExecutor((ICatfishUIBinder) this, iCatfishClientInterface, CatfishService.getCurrentServerHost(), ServiceOP.SERVICEOP_UICLIENT_PINGSERVER));
    }

    public void promoteFriendInPool(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4) {
        CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
        catfishMessageObject.userpin = str;
        catfishMessageObject.topic_key = str3;
        catfishMessageObject.message = str4;
        catfishMessageObject.username = str2;
        catfishMessageObject.object_sequence = Long.parseLong(str3.split(":")[1]);
        catfishMessageObject.object_owner = str3.split(":")[0];
        catfishMessageObject.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, catfishMessageObject, DatabaseRequestOP.PROMOTE_FRIEND_IN_CONFERENCE));
    }

    public void reSendCommentedDataChat(ICatfishClientInterface iCatfishClientInterface, Context context, String str, String str2, String str3, String str4, ICatfishUIBinder iCatfishUIBinder, String str5, long j) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.sequence = j;
        obtain.conversation_key = CatfishService.getUserPIN() + ":" + str2;
        obtain.userpin = str2;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.DELETE_SINGGLE_MESSAGE));
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToDBHandler(new ChatDataUploadExecutor(catfishService2, iCatfishClientInterface, context, CatfishService.getCurrentServerHost(), str, str2, str3, str4, iCatfishUIBinder, str5));
    }

    public void reSendPoolData(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4, int i, String str5, long j) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str3;
        obtain.userpin = str;
        obtain.sequence = j;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.CLEAR_CONFERENCE));
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToDBHandler(new PoolDataUploadExecutor(iCatfishClientInterface, catfishService2, CatfishService.getCurrentServerHost(), str, str2, str3, str4, i, str5));
    }

    public void recentUpdateOpen(ICatfishClientInterface iCatfishClientInterface, String str) {
        this.catfish_service.postRunnableToDbThread(new CUIDBUpdateOpen(str, 1));
    }

    public void recentUpdateOpenComment(ICatfishClientInterface iCatfishClientInterface, String str) {
        this.catfish_service.postRunnableToDbThread(new CUIDBUpdateOpen(str, 2));
    }

    public void recentUpdateOpenLike(ICatfishClientInterface iCatfishClientInterface, String str) {
        this.catfish_service.postRunnableToDbThread(new CUIDBUpdateOpen(str, 3));
    }

    public void refreshAllCategoryContact(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.REFRESH_ALL_GROUP_CONTACT));
    }

    public void refreshMemberList(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.topic_key = str2;
        obtain.object_sequence = Long.parseLong(str2.split(":")[1]);
        obtain.object_owner = str2.split(":")[0];
        this.catfish_service.postToServiceHandler(new PoolServiceExecutor(CatfishService.getCurrentServerHost(), 6, this.catfish_service, str, obtain));
    }

    public void registerDeviceId(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3) {
        CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
        catfishMessageObject.username = str2;
        catfishMessageObject.password = this.catfish_service.getDeviceId();
        this.catfish_service.postToServiceHandler(new PinManager(this.catfish_service, PinServiceOperation.REGISTER_PIN_DEVICEID, this.catfish_service.getDeviceId(), str, catfishMessageObject));
    }

    public void registerEmailCobrand(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.email = str;
        obtain.password = str2;
        obtain.imei = str3;
        this.catfish_service.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getRegistrationServer(), obtain.getRefCopy(), ServiceOP.SERVICEOP_UICLIENT_EMAIL_REG_COBRAND));
        obtain.recycle();
    }

    public void registerEmailCobrandExisting(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.email = str;
        obtain.password = str2;
        obtain.imei = str3;
        this.catfish_service.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getRegistrationServer(), obtain.getRefCopy(), ServiceOP.SERVICEOP_UICLIENT_EMAIL_REG_EXISTING));
        obtain.recycle();
    }

    public void registerEmailExclusive(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.email = str;
        obtain.password = str2;
        obtain.imei = str3;
        this.catfish_service.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getRegistrationServer(), obtain.getRefCopy(), ServiceOP.SERVICEOP_UICLIENT_EMAIL_REG_EXCLUSIVE));
        obtain.recycle();
    }

    public void registerPhoneNumber(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.phoneNumber = str;
        obtain.userpin = str2;
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        catfishService.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getCurrentServerHost(), obtain.getRefCopy(), ServiceOP.SERVICEOP_UICLIENT_REGISTERPHONENUMBER));
        obtain.recycle();
    }

    public void removeAllGallery(ICatfishClientInterface iCatfishClientInterface) {
    }

    public void removeBlacklistNic(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        this.catfish_service.postToDBHandler(new CUIDBRemoveBlacklistNic(iCatfishClientInterface, obtain));
    }

    public void removeFromCategoryGroup(ICatfishClientInterface iCatfishClientInterface, int i, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.groupid = (long) i;
        obtain.userpin = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.REMOVE_FROM_CATEGORY));
    }

    public void removeFromMultipleCategoryGroup(ICatfishClientInterface iCatfishClientInterface, int[] iArr, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.groupids = iArr;
        obtain.userpin = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.REMOVE_FROM_MULTIPLE_CATEGORY));
    }

    public void removeMultipleFromCategoryGroup(ICatfishClientInterface iCatfishClientInterface, int i, String[] strArr) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.groupid = (long) i;
        obtain.recipients = strArr;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.REMOVE_MULTIPLE_FROM_CATEGORY));
    }

    public void requestActiveChatFriendList(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDBGetActiveChatExecutor(iCatfishClientInterface));
    }

    public void requestAllContacts(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.GET_ALL_CONTACTS));
    }

    public void requestAllFriendPinFromServer(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain.getRefCopy(), DatabaseRequestOP.CEK_OUR_DATAPROFILE));
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        catfishService.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getCurrentServerHost(), obtain.getRefCopy(), ServiceOP.SERVICEOP_UICLIENT_REQUEST_ALL_FRIENDPIN));
        obtain.recycle();
    }

    public void requestAllFriendPinFromServerFromService(CatfishService catfishService, ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        this.catfish_service = catfishService;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService2.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getCurrentServerHost(), obtain.getRefCopy(), ServiceOP.SERVICEOP_UICLIENT_REQUEST_ALL_FRIENDPIN));
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain.getRefCopy(), DatabaseRequestOP.CEK_OUR_DATAPROFILE));
        obtain.recycle();
    }

    public void requestAllGallery(ICatfishClientInterface iCatfishClientInterface) {
    }

    public void requestAllMultimediaDataInPool(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.GET_ALL_MULTIMEDIA_DATA_POOL));
    }

    public void requestAllNotification(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.GET_ALL_NOTIFICATION));
    }

    public void requestAllProgressUploadDownload(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.requestAllProgressUploadDownload(iCatfishClientInterface);
    }

    public void requestAllRecentUpdates(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.GET_ALL_RECENTUPDATES));
    }

    public void requestAllTopic(ICatfishClientInterface iCatfishClientInterface) {
        requestAllTopic(iCatfishClientInterface, false);
    }

    public void requestAllTopic(ICatfishClientInterface iCatfishClientInterface, boolean z) {
        if (z) {
            this.catfish_service.postHighPrioToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.GET_ALL_TOPICS));
        } else {
            this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.GET_ALL_TOPICS));
        }
    }

    public void requestAllUsergroups(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.GET_ALL_USERGROUPS));
    }

    public void requestBlacklistPin(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDBGetBlacklistNicExecutor(iCatfishClientInterface));
    }

    public void requestChatConvWithLimit(ICatfishClientInterface iCatfishClientInterface, String str, long j, int i) {
        requestChatConvWithLimit(iCatfishClientInterface, str, j, i, false);
    }

    public void requestChatConvWithLimit(ICatfishClientInterface iCatfishClientInterface, String str, long j, int i, boolean z) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.conversation_key = str;
        obtain.timestamp = j;
        obtain.limit = i;
        if (z) {
            this.catfish_service.postHighPrioToDBHandler(new CUIDBGetChatConvWithLimitExecutor(iCatfishClientInterface, obtain));
        } else {
            this.catfish_service.postToDBHandler(new CUIDBGetChatConvWithLimitExecutor(iCatfishClientInterface, obtain));
        }
    }

    public void requestChatConversation(ICatfishClientInterface iCatfishClientInterface, String str, boolean z, boolean z2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.conversation_key = str;
        obtain.is_need_count = z;
        if (z2) {
            this.catfish_service.postHighPrioToDBHandler(new CUIDBGetChatConvExecutor(iCatfishClientInterface, obtain));
        } else {
            this.catfish_service.postToDBHandler(new CUIDBGetChatConvExecutor(iCatfishClientInterface, obtain));
        }
    }

    public void requestChatConversation(ICatfishClientInterface iCatfishClientInterface, boolean z, String str) {
        requestChatConversation(iCatfishClientInterface, str, z, false);
    }

    public void requestChildGroupFriend(ICatfishClientInterface iCatfishClientInterface, long j, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.groupid = j;
        obtain.message = str;
        obtain.datafile_path = str2;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.GET_CHILD_GROUP_CONTACT));
    }

    public void requestConferenceMember(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.GET_CONFERENCE_MEMBER));
    }

    public void requestContactsCategoryLike(ICatfishClientInterface iCatfishClientInterface, String str, long j, String str2, String str3) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.conversation_key = str;
        obtain.groupid = j;
        obtain.message = str2;
        obtain.datafile_path = str3;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.GET_CONTACTS_CATEGORY_LIKE));
    }

    public void requestContactsLike(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.conversation_key = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.GET_CONTACTS_LIKE));
    }

    public void requestDeleteAllMessage(ICatfishClientInterface iCatfishClientInterface, long j, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.sequence = j;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, str.equals("chat") ? DatabaseRequestOP.DELETE_ALL_CHAT : DatabaseRequestOP.DELETE_ALL_STATUSCOM));
    }

    public void requestFriend(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.recipient = str2;
        obtain.message = str3;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.ADDPENDINGREQ));
        requestNicProfile(iCatfishClientInterface, str2);
    }

    public void requestFriendAlias(ICatfishClientInterface iCatfishClientInterface, CatfishMessageObject catfishMessageObject) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, catfishMessageObject, DatabaseRequestOP.GET_FRIEND_ALIAS));
    }

    public void requestFriendList(ICatfishClientInterface iCatfishClientInterface) {
        requestFriendList(iCatfishClientInterface, false);
    }

    public void requestFriendList(ICatfishClientInterface iCatfishClientInterface, boolean z) {
        if (z) {
            this.catfish_service.postHighPrioToDBHandler(new CUIDBGetAllFriendExecutor(iCatfishClientInterface));
        } else {
            this.catfish_service.postToDBHandler(new CUIDBGetAllFriendExecutor(iCatfishClientInterface));
        }
    }

    public void requestFriendListWithLimits(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDBGetAllFriendExecutor(iCatfishClientInterface, true));
    }

    public void requestFriendProfile(ICatfishClientInterface iCatfishClientInterface, String str) {
        if (str != null) {
            this.catfish_service.postToDBHandler(new CUIGetFriendProfileDBExecutor(this, iCatfishClientInterface, str, DatabaseRequestOP.GET_FRIEND_PROFILEINFO_DB));
        }
    }

    public void requestFriendReqList(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.GET_ALL_FRIENDREQ));
    }

    public void requestGroupFriend(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.GET_GROUP_CONTACT));
    }

    public void requestLastTimeStamp(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, null, DatabaseRequestOP.GET_LAST_TIMESTAMP));
    }

    public void requestMigrateKey(ICatfishClientInterface iCatfishClientInterface) {
    }

    public void requestMyProfile(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.GET_MY_PROFILE));
    }

    public void requestNicMessage(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.GET_NIC_MESSAGE));
    }

    public void requestNicMessageConv(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.conversation_key = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.GET_NIC_MESSAGE_CONV));
    }

    public void requestNicProfile(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.NIC_PROFILE));
    }

    public void requestObjCommConversation(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.conversation_key = str;
        Log.d(TAG, "Request object Conversation uibinder: " + str);
        this.catfish_service.postToDBHandler(new CUIDBGetObjectConvExecutor(iCatfishClientInterface, obtain));
    }

    public void requestOfficalsList(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDBGetOfficials(iCatfishClientInterface));
    }

    public void requestPendingReqList(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.GET_ALL_PENDINGREQ));
    }

    public void requestPendingTopic(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.GET_PENDING_TOPICS));
    }

    public void requestPoolDiscuss(ICatfishClientInterface iCatfishClientInterface, String str) {
        requestPoolDiscuss(iCatfishClientInterface, str, false);
    }

    public void requestPoolDiscuss(ICatfishClientInterface iCatfishClientInterface, String str, boolean z) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str;
        if (z) {
            this.catfish_service.postHighPrioToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.GET_POOL_DISCUSS));
        } else {
            this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.GET_POOL_DISCUSS));
        }
    }

    public void requestPoolDiscussCount(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.GET_POOL_DISCUSS_COUNT));
    }

    public void requestPoolDiscussWithLimit(ICatfishClientInterface iCatfishClientInterface, String str, long j, int i) {
        requestPoolDiscussWithLimit(iCatfishClientInterface, str, j, i, false);
    }

    public void requestPoolDiscussWithLimit(ICatfishClientInterface iCatfishClientInterface, String str, long j, int i, boolean z) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str;
        obtain.timestamp = j;
        obtain.limit = i;
        if (z) {
            this.catfish_service.postHighPrioToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.GET_POOL_DISCUSS_WITH_LIMIT));
        } else {
            this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.GET_POOL_DISCUSS_WITH_LIMIT));
        }
    }

    public void requestPoolLikeList(ICatfishClientInterface iCatfishClientInterface, String str, long j) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str;
        obtain.sequence = j;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.GET_POOL_LIKE_LIST));
    }

    public void requestSearchConferenceMember(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str;
        obtain.message = str2;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SEARCH_CONFERENCE_MEMBER));
    }

    public void requestServerMessage(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.GET_SERVER_MESSAGE));
    }

    public void requestSingleDiscus(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.GET_SINGLE_DISCUSS));
    }

    public void requestSingleMessage(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.conversation_key = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.GET_SINGLE_MESSAGE));
    }

    public void requestSlinkChace(ICatfishClientInterface iCatfishClientInterface, String str) {
        this.catfish_service.postToDBHandler(new CUIGetSlinkChaceDBExecutor(iCatfishClientInterface, str));
    }

    public void requestStatCommConversation(ICatfishClientInterface iCatfishClientInterface, String str) {
        requestStatCommConversation(iCatfishClientInterface, str, false);
    }

    public void requestStatCommConversation(ICatfishClientInterface iCatfishClientInterface, String str, boolean z) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.conversation_key = str;
        if (z) {
            this.catfish_service.postHighPrioToDBHandler(new CUIDBGetStatCommConvExecutor(iCatfishClientInterface, obtain));
        } else {
            this.catfish_service.postToDBHandler(new CUIDBGetStatCommConvExecutor(iCatfishClientInterface, obtain));
        }
    }

    public void requestUnreadStatusCommentCount(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.GET_UNREAD_STATUS_COMMENT_COUNT));
    }

    public void requestUpdateAllFriend(ICatfishClientInterface iCatfishClientInterface, String str) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.UPDATE_ALL_FRIENDS));
    }

    public void requestUpdateFriendProfile(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        Log.e(TAG, "request friend update");
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToServiceHandler(new UpdateFriendProfileExecutor(this, catfishService2, CatfishService.getCurrentServerHost(), iCatfishClientInterface, str, str2));
        catfishService = this.catfish_service;
        catfishService2 = this.catfish_service;
        catfishService3 = this.catfish_service;
        catfishService.postToServiceHandler(new GetUserActivityExecutor(this, catfishService2, CatfishService.getCurrentServerHost(), iCatfishClientInterface, str, str2));
        catfishService = this.catfish_service;
        catfishService2 = this.catfish_service;
        catfishService3 = this.catfish_service;
        catfishService.postToServiceHandler(new GetUserDataProfileExecutor(this, catfishService2, CatfishService.getCurrentServerHost(), iCatfishClientInterface, str, str2));
    }

    public void requestUpdateNicProfile(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.NIC_PROFILE_UPDATE));
    }

    public void requestUploadFizzlinkList(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, DatabaseRequestOP.UPLOAD_FIZZLINK_LIST));
    }

    public void requestUserCategories(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.GET_USER_CATEGORIES));
    }

    public void requestUserLikeList(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.conversation_key = str;
        this.catfish_service.postToDBHandler(new CUIDBGetUserLikeListExecutor(iCatfishClientInterface, obtain));
    }

    public void resendActivation(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.email = str;
        obtain.password = str2;
        this.catfish_service.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getRegistrationServer(), obtain.getRefCopy(), ServiceOP.SERVICEOP_UICLIENT_RESEND_ACTIVATION));
        obtain.recycle();
    }

    public void resendChatQuote(ICatfishClientInterface iCatfishClientInterface, long j, String str, String str2, String str3, MessageType messageType) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.sequence = j;
        obtain.conversation_key = CatfishService.getUserPIN() + ":" + str;
        obtain.userpin = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.DELETE_SINGGLE_MESSAGE));
        obtain = new CatfishMessageObject();
        obtain.userpin = CatfishService.getUserPIN();
        obtain.recipient = str;
        obtain.message = str2;
        obtain.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
        obtain.messagetype = messageType;
        obtain.username = str3;
        this.catfish_service.postToDBHandler(new CUIDBSendMessageWTypeExecutor(this, iCatfishClientInterface, obtain));
    }

    public void resendQuotedMessageConverence(ICatfishClientInterface iCatfishClientInterface, String str, String str2, long j, String str3, String str4) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str2;
        obtain.userpin = str;
        obtain.sequence = j;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.CLEAR_CONFERENCE));
        obtain = CatfishMessageObject.obtain();
        obtain.userpin = CatfishService.getUserPIN();
        obtain.username = str4;
        obtain.message = str3;
        obtain.topic_key = str2;
        obtain.messagetype = MessageType.QUOTE;
        obtain.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SEND_CONV_MESSAGE));
    }

    public void resendSingleConferenceMessage(ICatfishClientInterface iCatfishClientInterface, String str, String str2, long j, String str3, String str4) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str2;
        obtain.userpin = str;
        obtain.sequence = j;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.CLEAR_CONFERENCE));
        obtain = new CatfishMessageObject();
        obtain.userpin = CatfishService.getUserPIN();
        obtain.username = str4;
        obtain.topic_key = str2;
        obtain.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
        obtain.message = str3;
        obtain.messagetype = MessageType.MESSAGE;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SEND_CONV_MESSAGE));
    }

    public void resendSingleMessage(ICatfishClientInterface iCatfishClientInterface, long j, String str, String str2, String str3) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.sequence = j;
        obtain.conversation_key = CatfishService.getUserPIN() + ":" + str;
        obtain.userpin = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.DELETE_SINGGLE_MESSAGE));
        obtain = new CatfishMessageObject();
        obtain.userpin = CatfishService.getUserPIN();
        obtain.recipient = str;
        obtain.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
        obtain.message = str2;
        obtain.username = str3;
        Log.d(TAG, "-- sendMessage to db executor");
        this.catfish_service.postToDBHandler(new CUIDBSendMessageExecutor(this, iCatfishClientInterface, obtain));
    }

    public void resendingRequestFriend(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.recipient = str2;
        obtain.message = str3;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.RESENDINGADDREQ));
        requestUpdateNicProfile(iCatfishClientInterface, str2);
    }

    public void resetChatNotifList(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.resetArrayForNotifChat();
    }

    public void resetFriendAlias(ICatfishClientInterface iCatfishClientInterface, String str) {
        this.catfish_service.postToDBHandler(new CUISetFriendAlias(this.catfish_service, iCatfishClientInterface, str, null, 0));
    }

    public void resetOfficialMessageNotifList(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.resetArrayForNotifOfficialMessage();
    }

    public void resetPassword(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.email = str;
        this.catfish_service.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getRegistrationServer(), obtain.getRefCopy(), ServiceOP.SERVICEOP_UICLIENT_EMAIL_RESET_PASSWORD));
        obtain.recycle();
    }

    public void resetPasswordActivation(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.email = str;
        obtain.password = str2;
        obtain.email_code = str3;
        this.catfish_service.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getRegistrationServer(), obtain.getRefCopy(), ServiceOP.SERVICEOP_UICLIENT_EMAIL_RESET_PASSWORD_ACTIVATION));
        obtain.recycle();
    }

    public void resetPoolNotifList(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.resetArrayForNotifPool();
    }

    public void resetTemptDrawable() {
        CatfishService catfishService = this.catfish_service;
        CatfishService.resetStoredDrawable();
    }

    public void restoreAllFriendPinFromServer(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        catfishService.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getCurrentServerHost(), obtain.getRefCopy(), ServiceOP.SERVICEOP_UICLIENT_REQUEST_ALL_FRIENDPIN));
        obtain.recycle();
    }

    public void restoreFromServer(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3) {
        CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
        catfishMessageObject.username = str2;
        catfishMessageObject.password = str3;
        this.catfish_service.postToServiceHandler(new PinManager(this.catfish_service, PinServiceOperation.GETPINFROMDEVID, this.catfish_service.getDeviceId(), str, catfishMessageObject));
    }

    public void saveChatConversation(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.conversation_key = str;
        obtain.datafile_path = str2;
        obtain.title = str3;
        obtain.sendername = str4;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SAVE_CHAT));
    }

    public void saveChatFile(ICatfishClientInterface iCatfishClientInterface, final String str, final String str2) {
        this.catfish_service.postToDBHandler(new Runnable() {
            public void run() {
                File file = new File(str);
                File file2 = new File(str2 + "/" + file.getName());
                try {
                    InputStream fileInputStream = new FileInputStream(file);
                    OutputStream fileOutputStream = new FileOutputStream(file2);
                    byte[] bArr = new byte[AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT];
                    while (true) {
                        int read = fileInputStream.read(bArr);
                        if (read > 0) {
                            fileOutputStream.write(bArr, 0, read);
                        } else {
                            return;
                        }
                    }
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                } catch (IOException e2) {
                    e2.printStackTrace();
                }
            }
        });
    }

    public void saveConferenceConversation(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str2;
        obtain.userpin = str;
        obtain.datafile_path = str3;
        obtain.title = str4;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SAVE_CONFERENCE));
    }

    public void saveConferenceFile(ICatfishClientInterface iCatfishClientInterface, final String str, final String str2) {
        this.catfish_service.postToDBHandler(new Runnable() {
            public void run() {
                File file = new File(str);
                File file2 = new File(str2 + "/" + file.getName().substring(13));
                try {
                    InputStream fileInputStream = new FileInputStream(file);
                    OutputStream fileOutputStream = new FileOutputStream(file2);
                    byte[] bArr = new byte[AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT];
                    while (true) {
                        int read = fileInputStream.read(bArr);
                        if (read > 0) {
                            fileOutputStream.write(bArr, 0, read);
                        } else {
                            return;
                        }
                    }
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                } catch (IOException e2) {
                    e2.printStackTrace();
                }
            }
        });
    }

    public void saveMessageFizzlinkToDb(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4, MessageType messageType, Context context, int i, long j) {
        CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
        catfishMessageObject.userpin = str;
        catfishMessageObject.recipient = str2;
        catfishMessageObject.message = str4;
        catfishMessageObject.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
        catfishMessageObject.username = str3;
        catfishMessageObject.messagetype = messageType;
        catfishMessageObject.source = i;
        catfishMessageObject.object_sequence = j;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, catfishMessageObject, DatabaseRequestOP.STORE_FIZZLINK_FROM_RECIPIENT));
        Log.e(TAG, "message content:" + str4);
        String str5 = null;
        if (i == 0) {
            str5 = str + ":" + str2;
        } else if (i == 1) {
            str5 = "sc:" + str2 + ":" + String.valueOf(j);
        }
        ICatfishClientInterface iCatfishClientInterface2 = iCatfishClientInterface;
        Context context2 = context;
        String str6 = str4;
        int i2 = i;
        String str7 = str2;
        getSlink(iCatfishClientInterface2, context2, getSlinkFromJson(str4, ObjectCommentDataStorage.OBJECTOWNER), Long.parseLong(getSlinkFromJson(str4, ObjectCommentDataStorage.OBJECTSEQUENCE)), getSlinkFromJson(str4, ObjectCommentDataStorage.DATAPATH), str6, i2, str7, str5, catfishMessageObject.sequence, j);
    }

    public void saveMessageFizzlinkToDbForPool(ICatfishClientInterface iCatfishClientInterface, String str, String str2, ArrayList arrayList, String str3, int i, Context context, int i2) {
        if (i == MessageType.SHARE_SLINK_AT_POOL.ordinal()) {
            Log.d(TAG, ServerMessageDataStorage.MESSAGE + str3);
            if (getSlinkFromJson(str3, ServerMessageDataStorage.SLINK) != null) {
                shareMessageToConferences(iCatfishClientInterface, arrayList, str, str2, str3, i);
                return;
            }
            Iterator it = arrayList.iterator();
            while (it.hasNext()) {
                String str4 = (String) it.next();
                CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
                catfishMessageObject.userpin = str;
                catfishMessageObject.username = str2;
                catfishMessageObject.topic_key = str4;
                catfishMessageObject.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
                catfishMessageObject.message = str3;
                catfishMessageObject.messagetype = MessageType.SHARE_SLINK_AT_POOL;
                catfishMessageObject.source = i2;
                this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, catfishMessageObject, DatabaseRequestOP.STORE_FIZZLINK_FROM_RECIPIENT));
                getSlink(iCatfishClientInterface, context, getSlinkFromJson(str3, ObjectCommentDataStorage.OBJECTOWNER), Long.parseLong(getSlinkFromJson(str3, ObjectCommentDataStorage.OBJECTSEQUENCE)), getSlinkFromJson(str3, ObjectCommentDataStorage.DATAPATH), str3, i2, null, str4, catfishMessageObject.sequence, 0);
            }
        }
    }

    public void selectContact(String str, boolean z) {
        CatfishService catfishService = this.catfish_service;
        CatfishService.mContactSelection.remove(str);
        if (z) {
            catfishService = this.catfish_service;
            CatfishService.mContactSelection.add(str);
        }
    }

    public void sendBcastToFriendlist(ICatfishClientInterface iCatfishClientInterface, String str, String str2, int i, String str3, String str4, long j, long j2, String str5) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToServiceHandler(new FriendListBcast(iCatfishClientInterface, catfishService2, CatfishService.getCurrentServerHost(), str, str2, i, str3, str4, j, j2, str5));
    }

    public void sendBroadcastImageStatus(ICatfishClientInterface iCatfishClientInterface, Context context, String str, String str2, String str3, String str4, long j, ICatfishUIBinder iCatfishUIBinder, String str5) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToDBHandler(new StatusDataBcastUploadExecutor(catfishService2, iCatfishClientInterface, context, CatfishService.getCurrentServerHost(), str, str2, str3, str4, j, iCatfishUIBinder, str5));
    }

    public void sendBroadcastMessage(ICatfishClientInterface iCatfishClientInterface, String str, String[] strArr, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.messagetype = MessageType.BCASTMESSAGE;
        obtain.userpin = str;
        obtain.recipients = strArr;
        obtain.message = str2;
        obtain.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
        this.catfish_service.postToDBHandler(new CUIDBSendBCASTExecutor(this, iCatfishClientInterface, obtain));
    }

    public void sendBroadcastVideoStatus(ICatfishClientInterface iCatfishClientInterface, Context context, String str, String str2, String str3, String str4, long j, ICatfishUIBinder iCatfishUIBinder) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToDBHandler(new StatusDataBcastUploadExecutor(catfishService2, iCatfishClientInterface, context, CatfishService.getCurrentServerHost(), str, str2, str3, str4, j, iCatfishUIBinder, AlbusModelObject.DATA_TYPE_VIDEO));
    }

    public void sendBroadcastVoice(ICatfishClientInterface iCatfishClientInterface, String str, String[] strArr, String str2, String str3) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToDBHandler(new VoiceBcastUploadExecutor(catfishService2, CatfishService.getCurrentServerHost(), str, strArr, str2, str3));
    }

    public void sendBroadcastVoiceStatus(ICatfishClientInterface iCatfishClientInterface, Context context, String str, String str2, String str3, String str4, long j, ICatfishUIBinder iCatfishUIBinder) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToDBHandler(new StatusDataBcastUploadExecutor(catfishService2, iCatfishClientInterface, context, CatfishService.getCurrentServerHost(), str, str2, str3, str4, j, iCatfishUIBinder, AlbusModelObject.DATA_TYPE_VOICE));
    }

    public void sendCommentedDataChat(ICatfishClientInterface iCatfishClientInterface, Context context, String str, String str2, String str3, String str4, ICatfishUIBinder iCatfishUIBinder, String str5) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToDBHandler(new ChatDataUploadExecutor(catfishService2, iCatfishClientInterface, context, CatfishService.getCurrentServerHost(), str, str2, str3, str4, iCatfishUIBinder, str5));
    }

    public void sendContactsTo(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String[] strArr) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToDBHandler(new SendContactsExecutor(iCatfishClientInterface, catfishService2, CatfishService.getCurrentServerHost(), str, str2, str3, strArr));
    }

    public void sendMessage(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.recipient = str2;
        obtain.message = str4;
        obtain.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
        obtain.username = str3;
        Log.d(TAG, "-- sendMessage to db executor");
        this.catfish_service.postToDBHandler(new CUIDBSendMessageExecutor(this, iCatfishClientInterface, obtain));
    }

    public void sendMessageConverence(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str2;
        obtain.username = str3;
        obtain.topic_key = str;
        obtain.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
        obtain.message = str4;
        obtain.messagetype = MessageType.MESSAGE;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SEND_CONV_MESSAGE));
    }

    public void sendMessageConverenceWType(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4, MessageType messageType) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str2;
        obtain.username = str3;
        obtain.topic_key = str;
        obtain.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
        obtain.message = str4;
        obtain.messagetype = messageType;
        if (MessageType.STIKER_MESSAGE_POOL == messageType) {
            try {
                JSONObject jSONObject = new JSONObject(str4);
                obtain.stickerheight = Integer.parseInt(jSONObject.remove("stickerHeight").toString());
                obtain.stickerwidth = Integer.parseInt(jSONObject.remove("stickerWidth").toString());
                obtain.message = jSONObject.toString();
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SEND_CONV_MESSAGE));
    }

    public void sendMessageWithMessageTipe(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4, MessageType messageType) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.recipient = str2;
        obtain.message = str4;
        obtain.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
        obtain.username = str3;
        obtain.messagetype = messageType;
        if (messageType == MessageType.STIKER_MESSAGE) {
            try {
                JSONObject jSONObject = new JSONObject(str4);
                obtain.stickerheight = Integer.parseInt(jSONObject.remove("stickerHeight").toString());
                obtain.stickerwidth = Integer.parseInt(jSONObject.remove("stickerWidth").toString());
                obtain.message = jSONObject.toString();
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
        this.catfish_service.postToDBHandler(new CUIDBSendMessageWTypeExecutor(this, iCatfishClientInterface, obtain));
    }

    public void sendNicMessage(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.recipient = str2.toUpperCase(Locale.US);
        obtain.message = str4;
        obtain.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
        obtain.username = str3;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SEND_NIC_MESSAGE));
    }

    public void sendObjectComment(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4, long j, String str5, MessageType messageType, int i, String str6, long j2) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        CatfishService catfishService4 = catfishService;
        catfishService4.postToDBHandler(new SendObjectCommentExecutor(iCatfishClientInterface, catfishService2, CatfishService.getCurrentServerHost(), str, str2, str3, str4, j, str5, messageType, i, str6, j2));
    }

    public void sendPoolData(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4, int i, String str5) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToDBHandler(new PoolDataUploadExecutor(iCatfishClientInterface, catfishService2, CatfishService.getCurrentServerHost(), str, str2, str3, str4, i, str5));
    }

    public void sendPoolPhoto(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4, String str5) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str3;
        obtain.userpin = str;
        obtain.username = str2;
        obtain.object_sequence = Long.parseLong(str3.split(":")[1]);
        obtain.object_owner = str3.split(":")[0];
        obtain.datafile_path = str4;
        obtain.message = str5;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SHARE_PHOTO_IN_CONFERENCE));
    }

    public void sendPoolResponse(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, MessageType messageType, String str4, long j) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str;
        obtain.userpin = str2;
        obtain.username = str3;
        obtain.object_sequence = Long.parseLong(str.split(":")[1]);
        obtain.object_owner = str.split(":")[0];
        obtain.messagetype = messageType;
        obtain.message = str4 + ":" + String.valueOf(j);
        obtain.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SEND_POOL_RESPONSE));
    }

    public void sendQuotedMessageConverence(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str2;
        obtain.username = str3;
        obtain.message = str4;
        obtain.topic_key = str;
        obtain.messagetype = MessageType.QUOTE;
        obtain.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SEND_CONV_MESSAGE));
    }

    public void sendSVGEmotion(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4, String str5) {
        String externalStorageState = Environment.getExternalStorageState();
        if (externalStorageState.equals("mounted")) {
            externalStorageState = Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + CatfishService.FILE_PACKAGE_NAME_CATFIZ + "/tempelan";
            File parentFile = new File(externalStorageState + "/" + str5).getParentFile();
            if (parentFile.exists() || parentFile.mkdirs()) {
                CatfishMessageObject obtain = CatfishMessageObject.obtain();
                obtain.userpin = str;
                obtain.recipient = str2;
                obtain.message = "{ \"svgemoticon\": { \"kode\":\"" + str3 + "\", \"repokey\":\"" + str4 + "\", \"filename\":\"" + str5 + "\", \"size\":\"" + ((int) new File(externalStorageState + "/" + str5).length()) + "\" } }";
                obtain.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
                obtain.messagetype = MessageType.SVG_EMOTICONS;
                this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SEND_SVGEMOTION));
                return;
            }
            Log.e(TAG, "DBCAST RECEIVE: Path to file could not be created.");
            return;
        }
        Log.e(TAG, "DBCAST RECEIVE: media not mounted in is state: " + externalStorageState + ":DROP !!!");
    }

    public void sendStatusComment(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4, long j, MessageType messageType) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToDBHandler(new SendStatusCommentExecutor(iCatfishClientInterface, catfishService2, CatfishService.getCurrentServerHost(), str, str2, str3, str4, j, messageType));
    }

    public void sendStatusComment(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4, long j, MessageType messageType, boolean z) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToDBHandler(new SendStatusCommentExecutor(iCatfishClientInterface, catfishService2, CatfishService.getCurrentServerHost(), str, str2, str3, str4, j, messageType, z));
    }

    public void sendStatusLike(ICatfishClientInterface iCatfishClientInterface, String str, long j, int i) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToDBHandler(new StatusLikeExecutor(iCatfishClientInterface, catfishService2, CatfishService.getCurrentServerHost(), str, j, i));
    }

    public void sendStatusResponse(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, String str4, String str5, long j, long j2, String str6, boolean z) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToDBHandler(new SendStatusResponseExecutor(iCatfishClientInterface, catfishService2, CatfishService.getCurrentServerHost(), str, str2, str3, str4, str5, j, j2, str6, z));
    }

    public void sendVideoChat(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3, File file) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        Context context = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToDBHandler(new ChatDataUploadExecutor(catfishService2, iCatfishClientInterface, context, CatfishService.getCurrentServerHost(), str, str2, file.getAbsolutePath(), str3, this, AlbusModelObject.DATA_TYPE_VIDEO));
    }

    public void sendVoiceChat(ICatfishClientInterface iCatfishClientInterface, String str, String str2, File file) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToServiceHandler(new P2PUploadExecutor(catfishService2, CatfishService.getCurrentServerHost(), str, str2, 4, file), 2);
    }

    public void setActivity(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.data_json = str2;
        obtain.otherData = str3;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SAVE_USER_ACTIVITY));
    }

    public void setFriendAlias(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        this.catfish_service.postToDBHandler(new CUISetFriendAlias(this.catfish_service, iCatfishClientInterface, str, str2, 1));
    }

    public void setFriendlist(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToDBHandler(new FriendListSetExecutor(iCatfishClientInterface, catfishService2, CatfishService.getCurrentServerHost(), str));
    }

    public void setMessagesAsRead(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.recipient = str2;
        obtain.message = null;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SET_MESSAGES_AS_READ));
    }

    public void setPoolMute(ICatfishClientInterface iCatfishClientInterface, String str, boolean z) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str;
        obtain.isMute = z;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.POOL_SET_MUTE));
    }

    public void setProfile(ICatfishClientInterface iCatfishClientInterface, String str, String str2, boolean z) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.data_json = str2;
        if (z) {
            obtain.rdcounter = 1;
        }
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SAVE_PROFILE));
    }

    public void setProfileManualByUser(ICatfishClientInterface iCatfishClientInterface, String str, String str2, boolean z) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.data_json = str2;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SAVE_PROFILE_BYUSER));
    }

    public void setReadPoolDiscuss(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SET_POOL_DISCUSS_AS_READ));
    }

    public void setStatCommAsRead(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.object_owner = str;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SET_STATCOMM_AS_READ));
    }

    public void setUnreadStatusComment(ICatfishClientInterface iCatfishClientInterface, String str) {
        this.catfish_service.postToDBHandler(new CUISetUnreadStatusComment(this.catfish_service, iCatfishClientInterface, str));
    }

    public void setUserName(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.recipient = null;
        obtain.message = str2;
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        obtain.old_username = catfishPreferences.getString(CatfishService.USERNAME_PREF, "");
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain.getRefCopy(), DatabaseRequestOP.CONF_USERNAMECHAGED));
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        catfishService.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getCurrentServerHost(), obtain.getRefCopy(), ServiceOP.SERVICEOP_UICLIENT_SETUSERNAME));
        Editor edit = catfishPreferences.edit();
        edit.putString(CatfishService.USERNAME_PREF, str2);
        edit.commit();
        obtain.recycle();
    }

    public void setUserStatus(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.recipient = null;
        obtain.message = str2;
        CatfishService catfishService = this.catfish_service;
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        long uniqueMonotonicSequence = CatfishRESTAPI.uniqueMonotonicSequence();
        obtain.sequence = uniqueMonotonicSequence;
        obtain.object_sequence = catfishPreferences.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0);
        Editor edit = catfishPreferences.edit();
        edit.putString(CatfishService.USERSTATUS_PREF, str2);
        edit.putLong(CatfishService.USERSTATUS_SEQ_PREF, uniqueMonotonicSequence);
        edit.commit();
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SETUSERSTATUS_DELETEOLDSTATUS));
    }

    public void shareAudio(ICatfishClientInterface iCatfishClientInterface, String str, String str2, File file) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToServiceHandler(new P2PUploadExecutor(catfishService2, CatfishService.getCurrentServerHost(), str, str2, 2, file), 2);
    }

    public void shareDataToPools(ICatfishClientInterface iCatfishClientInterface, String str, String str2, ArrayList arrayList, String str3, int i, String str4) {
        Iterator it = arrayList.iterator();
        while (it.hasNext()) {
            String str5 = (String) it.next();
            CatfishService catfishService = this.catfish_service;
            CatfishService catfishService2 = this.catfish_service;
            this.catfish_service.postToDBHandler(new PoolDataUploadExecutor(iCatfishClientInterface, catfishService, CatfishService.getCurrentServerHost(), str, str2, str5, str3, i, str4));
        }
    }

    public void shareFile(ICatfishClientInterface iCatfishClientInterface, String str, String str2, File file) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToServiceHandler(new P2PUploadExecutor(catfishService2, CatfishService.getCurrentServerHost(), str, str2, 5, file), 2);
    }

    public void shareMessageToConferences(ICatfishClientInterface iCatfishClientInterface, ArrayList arrayList, String str, String str2, String str3, int i) {
        Iterator it;
        String str4;
        CatfishMessageObject obtain;
        if (i == MessageType.SHARE_SLINK_AT_POOL.ordinal()) {
            it = arrayList.iterator();
            while (it.hasNext()) {
                str4 = (String) it.next();
                obtain = CatfishMessageObject.obtain();
                obtain.userpin = str;
                obtain.username = str2;
                obtain.topic_key = str4;
                obtain.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
                obtain.message = str3;
                obtain.messagetype = MessageType.SHARE_SLINK_AT_POOL;
                this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SEND_POOL_SLINK));
            }
        } else if (i == MessageType.CONFRC_MESSAGE.ordinal()) {
            it = arrayList.iterator();
            while (it.hasNext()) {
                str4 = (String) it.next();
                obtain = CatfishMessageObject.obtain();
                obtain.userpin = str;
                obtain.username = str2;
                obtain.topic_key = str4;
                obtain.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
                obtain.message = str3;
                obtain.messagetype = MessageType.MESSAGE;
                this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.SEND_CONV_MESSAGE));
            }
        }
    }

    public void sharePhotoImage(ICatfishClientInterface iCatfishClientInterface, String str, String str2, File file, boolean z) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToServiceHandler(new P2PUploadExecutor(catfishService2, CatfishService.getCurrentServerHost(), str, str2, 1, file, z), 2);
    }

    public void shareVideo(ICatfishClientInterface iCatfishClientInterface, String str, String str2, File file) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToServiceHandler(new P2PUploadExecutor(catfishService2, CatfishService.getCurrentServerHost(), str, str2, 3, file), 2);
    }

    public void stickerDownload(IStickerClientInterface iStickerClientInterface, Context context, String str) {
    }

    public void stickerDownloadStickerPackage(ICatfishClientInterface iCatfishClientInterface, Context context, String str, String str2) {
    }

    public void storeTemptDrawable(Drawable drawable) {
        CatfishService catfishService = this.catfish_service;
        CatfishService.setStoredDrawable(drawable);
    }

    public void unBindAudioReceivedCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATISFH_ACTION_AUDIOFILE_RECEIVED, iCatfishClientInterface);
    }

    public void unBindBCASTResponseCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_BCASTRESPONSE, iCatfishClientInterface);
    }

    public void unBindBlacklistNicNameReady(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_BLACKLISTNICNAMEREADY, iCatfishClientInterface);
    }

    public void unBindCommentOnStatusCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATISFH_ACTION_HASCOMMENT_ONSTATUS, iCatfishClientInterface);
    }

    public void unBindDataFileReceivedCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATISFH_ACTION_DATAFILE_RECEIVED, iCatfishClientInterface);
    }

    public void unBindDeletedTopicConverenceCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_TOPICPOOLDELETED, iCatfishClientInterface);
    }

    public void unBindDeliveryStatusUpdateCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_DELIVERYSTATUS_UPDATED, iCatfishClientInterface);
    }

    public void unBindDeviceIdNPinRegisteredCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_DEVICEIDREGISTERED, iCatfishClientInterface);
    }

    public void unBindDownloadFizzlink(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_FIZZLINKDOWNLOAD, iCatfishClientInterface);
    }

    public void unBindDownloadPool(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_DOWNLOAD_POOL, iCatfishClientInterface);
    }

    public void unBindDownloadStatus(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_DOWNLOAD_STATUS, iCatfishClientInterface);
    }

    public void unBindFizzlinkUploadCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_FIZZLINKUPLOAD, iCatfishClientInterface);
    }

    public void unBindFriendProfileUpdate(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATISFH_ACTION_FRDPFI_UPDATE, iCatfishClientInterface);
    }

    public void unBindHasGroupDeleteCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_HASGROUP_DELETE, iCatfishClientInterface);
    }

    public void unBindHasNewFriendCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_HASNEWFRIEND, iCatfishClientInterface);
    }

    public void unBindHasNewMessageCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_HASNEWMESSAGE, iCatfishClientInterface);
    }

    public void unBindHasNewMessageConverenceCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_NEWMESSAGEPOOLRECEIVE, iCatfishClientInterface);
    }

    public void unBindHasNewTopicConverenceCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_NEWTOPICRECEIVE, iCatfishClientInterface);
    }

    public void unBindHasTheme(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_HASNEWTHEME, iCatfishClientInterface);
    }

    public void unBindHasUserActivityUpdateCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_HASUSERACTIVITYUPDATE, iCatfishClientInterface);
    }

    public void unBindImageReceivedCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATISFH_ACTION_IMAGEFILE_RECEIVED, iCatfishClientInterface);
    }

    public void unBindMainViewFriendProfileUpdate(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATISFH_ACTION_MAINVIEW_FRDPFI_UPDATE, iCatfishClientInterface);
    }

    public void unBindNewFriendAddedCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_NEWFRIENDADDED, iCatfishClientInterface);
    }

    public void unBindNewServerMessageCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_NEWSERVERMESSAGERECEIVED, iCatfishClientInterface);
    }

    public void unBindNicMsgRecipientNameReady(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_NICMSGRECIPIENTNAMEREADY, iCatfishClientInterface);
    }

    public void unBindOnDeletedByFriendCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_DELETEBYFRD, iCatfishClientInterface);
    }

    public void unBindOnTypingCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_HASONTYPINGSIGNAL, iCatfishClientInterface);
    }

    public void unBindPingReceivedCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_HASPING, iCatfishClientInterface);
    }

    public void unBindPoolDataFileReceivedCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATISFH_ACTION_POOL_DATAFILE_RECEIVED, iCatfishClientInterface);
    }

    public void unBindRegisterDeviceIdCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_REGISTERDEVICEID, iCatfishClientInterface);
    }

    public void unBindRegistrationCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_UI_REGISTRATION, iCatfishClientInterface);
    }

    public void unBindResponseNetralOnStatusCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATISFH_ACTION_HASRESPONSENETRAL_ONCOMENT, iCatfishClientInterface);
    }

    public void unBindResponseOnStatusCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATISFH_ACTION_HASRESPONSE_ONCOMENT, iCatfishClientInterface);
    }

    public void unBindResponsePoolCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_RESPONSEPOOLMESSAGERECEIVE, iCatfishClientInterface);
    }

    public void unBindRestoreFromServerCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_RESTOREFROMSERVER, iCatfishClientInterface);
    }

    public void unBindUpdatedTopicMemberCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_TOPICMEMBERUPDATED, iCatfishClientInterface);
    }

    public void unBindUploadChat(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_UPLOAD_CHAT, iCatfishClientInterface);
    }

    public void unBindUploadFizzlink(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_FIZZLINKUPLOAD, iCatfishClientInterface);
    }

    public void unBindUploadPool(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_UPLOAD_POOL, iCatfishClientInterface);
    }

    public void unBindUploadStartSendingCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_UPLOAD_START_SENDING, iCatfishClientInterface);
    }

    public void unBindUploadStatus(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_UPLOAD_STATUS, iCatfishClientInterface);
    }

    public void unBindVoiceChatReceivedCallback(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATISFH_ACTION_VOICECHAT_RECEIVED, iCatfishClientInterface);
    }

    public void unbindHasNewNicMessageCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_HASNEWNICMESSAGE, iCatfishClientInterface);
    }

    public void unbindHasNewObjectCommentCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_HASNEWNICMESSAGE, iCatfishClientInterface);
    }

    public void unbindUpdatesIncomingCallBack(ICatfishClientInterface iCatfishClientInterface) {
        this.catfish_service.unBindCallBackToAction(CatfishService.CATFISH_ACTION_HASUPDATES, iCatfishClientInterface);
    }

    public void updateFriendRequesterProfile(ICatfishClientInterface iCatfishClientInterface, String str) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain(str);
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        catfishService.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getCurrentServerHost(), obtain, ServiceOP.SERVICEOP_UICLIENT_UPDATEREQUESTERPROFILE));
        requestUpdateNicProfile(iCatfishClientInterface, str);
    }

    public void updateNic(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.email = str;
        obtain.password = str2;
        obtain.nic = str3;
        this.catfish_service.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getRegistrationServer(), obtain.getRefCopy(), ServiceOP.SERVICEOP_UICLIENT_UPDATE_NIC));
        obtain.recycle();
    }

    public void updateProgresBar(ICatfishClientInterface iCatfishClientInterface, int i, int i2) {
    }

    public void updateStickerAutoPlay(ICatfishClientInterface iCatfishClientInterface, String str, MessageType messageType) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.conversation_key = str;
        obtain.messagetype = messageType;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.UPDATE_STICKER_AUTOPLAY));
    }

    public void updateStickerAutoPlayPool(ICatfishClientInterface iCatfishClientInterface, String str, MessageType messageType) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.topic_key = str;
        obtain.messagetype = messageType;
        this.catfish_service.postToDBHandler(new CUIDatabaseRequestExecutor(this, iCatfishClientInterface, obtain, DatabaseRequestOP.UPDATE_STICKER_AUTOPLAYPOOL));
    }

    public void updateStreamThumbnailDownload(ICatfishClientInterface iCatfishClientInterface, String str, int i) {
        this.catfish_service.postRunnableToDbThread(new CUIDBStreamThumbUpdate(iCatfishClientInterface, str, i));
    }

    public void updateUserStatus(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = str;
        obtain.recipient = null;
        obtain.message = str2;
        CatfishService catfishService = this.catfish_service;
        obtain.sequence = CatfishService.getCatfishPreferences().getLong(CatfishService.USERSTATUS_SEQ_PREF, 0);
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService2.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getCurrentServerHost(), obtain, ServiceOP.SERVICEOP_UICLIENT_SETUSERSTATUS));
    }

    public void uploadFizzlinkToServer(ICatfishClientInterface iCatfishClientInterface, String str, String str2) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToDBHandler(new FizzlinkUploadExecutor(catfishService2, iCatfishClientInterface, CatfishService.getCurrentServerHost(), str, str2));
    }

    public void uploadProfilePhoto(ICatfishClientInterface iCatfishClientInterface, String str, File file) {
        CatfishService catfishService = this.catfish_service;
        CatfishService catfishService2 = this.catfish_service;
        CatfishService catfishService3 = this.catfish_service;
        catfishService.postToServiceHandler(new PPFUploadExecutor(catfishService2, CatfishService.getCurrentServerHost(), str, file), 2);
    }

    public void verifyRegister(ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3) {
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.email = str;
        obtain.password = str2;
        obtain.imei = str3;
        this.catfish_service.postToServiceHandler(new CUIServiceExecutor(this, iCatfishClientInterface, CatfishService.getRegistrationServer(), obtain.getRefCopy(), ServiceOP.SERVICEOP_UICLIENT_EMAIL_REG_CHECK));
        obtain.recycle();
    }
}
