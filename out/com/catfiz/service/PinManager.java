package com.catfiz.service;

import android.content.Intent;
import android.database.Cursor;
import android.support.v4.view.MotionEventCompat;
import com.catfiz.R;
import com.catfiz.intents.CatfishIntents;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.uidbexec.CUIDBAddFirstMessageExecutor;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.security.Key;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.apache.http.protocol.HTTP;

public class PinManager implements IDropableRunnable, Runnable {
    private static final String TAG = "PinManager";
    public static boolean isRestoringFriendlist = false;
    private CatfishRESTAPI catfishRestAPI = null;
    private String deviceid = null;
    private long liveAge = 0;
    private String mServerHost = null;
    private CatfishService mService = null;
    private ICatfishUIBinder mUIBinder = null;
    private CatfishMessageObject message = null;
    private PinServiceOperation operation = null;
    public int scheduleNum = 0;
    private String userpin = null;

    /* synthetic */ class AnonymousClass1 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$PinManager$PinDatabaseOperation = new int[PinDatabaseOperation.values().length];
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$PinManager$PinServiceOperation = new int[PinServiceOperation.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$PinManager$PinDatabaseOperation[PinDatabaseOperation.BROADCAST_CHANGE_PIN.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$PinManager$PinDatabaseOperation[PinDatabaseOperation.BROADCAST_DELETE_FRIENDS.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$PinManager$PinDatabaseOperation[PinDatabaseOperation.STORE_USER_DATA.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$service$PinManager$PinServiceOperation[PinServiceOperation.CHECK_ISDEVICEID_REGISTERED.ordinal()] = 1;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$service$PinManager$PinServiceOperation[PinServiceOperation.CHECK_ISPIN_EXISTS.ordinal()] = 2;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$PinManager$PinServiceOperation[PinServiceOperation.REGISTER_PIN_DEVICEID.ordinal()] = 3;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$service$PinManager$PinServiceOperation[PinServiceOperation.GENERATE_PIN.ordinal()] = 4;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$com$catfiz$service$PinManager$PinServiceOperation[PinServiceOperation.UPDATE_PIN.ordinal()] = 5;
            } catch (NoSuchFieldError e8) {
            }
            try {
                $SwitchMap$com$catfiz$service$PinManager$PinServiceOperation[PinServiceOperation.BROADCAST_CHANGE_PIN.ordinal()] = 6;
            } catch (NoSuchFieldError e9) {
            }
            try {
                $SwitchMap$com$catfiz$service$PinManager$PinServiceOperation[PinServiceOperation.GETPINFROMDEVID.ordinal()] = 7;
            } catch (NoSuchFieldError e10) {
            }
            try {
                $SwitchMap$com$catfiz$service$PinManager$PinServiceOperation[PinServiceOperation.RESTORE_USER_PROFILE.ordinal()] = 8;
            } catch (NoSuchFieldError e11) {
            }
            try {
                $SwitchMap$com$catfiz$service$PinManager$PinServiceOperation[PinServiceOperation.RESTORE_USER_DATA.ordinal()] = 9;
            } catch (NoSuchFieldError e12) {
            }
            try {
                $SwitchMap$com$catfiz$service$PinManager$PinServiceOperation[PinServiceOperation.RESTORE_GROUP_DATA.ordinal()] = 10;
            } catch (NoSuchFieldError e13) {
            }
            try {
                $SwitchMap$com$catfiz$service$PinManager$PinServiceOperation[PinServiceOperation.CHANGE_USER_KEY.ordinal()] = 11;
            } catch (NoSuchFieldError e14) {
            }
            try {
                $SwitchMap$com$catfiz$service$PinManager$PinServiceOperation[PinServiceOperation.BROADCAST_DELETE_FRIENDS.ordinal()] = 12;
            } catch (NoSuchFieldError e15) {
            }
            try {
                $SwitchMap$com$catfiz$service$PinManager$PinServiceOperation[PinServiceOperation.GETPINTORESTORE.ordinal()] = 13;
            } catch (NoSuchFieldError e16) {
            }
        }
    }

    enum PinDatabaseOperation {
        STORE_USER_DATA,
        BROADCAST_CHANGE_PIN,
        BROADCAST_DELETE_FRIENDS
    }

    class PinManagerDatabaseRunnable implements Runnable {
        private CatfishMessageObject msg = null;
        private String newpin = null;
        private String oldpin = null;
        private PinDatabaseOperation operation = null;
        private String userpin = null;

        public PinManagerDatabaseRunnable(PinDatabaseOperation pinDatabaseOperation, String str, CatfishMessageObject catfishMessageObject) {
            this.operation = pinDatabaseOperation;
            this.userpin = str;
            this.msg = catfishMessageObject;
        }

        public PinManagerDatabaseRunnable(PinDatabaseOperation pinDatabaseOperation, String str, String str2) {
            this.operation = pinDatabaseOperation;
            this.oldpin = str;
            this.newpin = str2;
        }

        public void run() {
            String str = null;
            CatfishDataStorage catfishDataStorage;
            Cursor allFriends;
            CatfishMessageObject catfishMessageObject;
            switch (AnonymousClass1.$SwitchMap$com$catfiz$service$PinManager$PinDatabaseOperation[this.operation.ordinal()]) {
                case e.b /*1*/:
                    catfishDataStorage = new CatfishDataStorage(PinManager.this.mService);
                    allFriends = new FriendListDataStorage(PinManager.this.mService).getAllFriends();
                    while (allFriends.moveToNext()) {
                        str = str == null ? allFriends.getString(allFriends.getColumnIndex(FriendListDataStorage.FRIENDPIN)) : str + ";" + allFriends.getString(allFriends.getColumnIndex(FriendListDataStorage.FRIENDPIN));
                    }
                    if (str != null) {
                        catfishMessageObject = new CatfishMessageObject();
                        catfishMessageObject.userpin = this.oldpin;
                        catfishMessageObject.messagetype = MessageType.BCASTCHANGEPIN;
                        catfishMessageObject.message = this.newpin;
                        catfishMessageObject.recipient = str;
                        catfishMessageObject.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
                        PinManager.this.mService.postToServiceHandler(new PinManager(PinManager.this.mService, PinServiceOperation.BROADCAST_CHANGE_PIN, PinManager.this.deviceid, this.oldpin, catfishMessageObject));
                        return;
                    }
                    return;
                case e.c /*2*/:
                    catfishDataStorage = new CatfishDataStorage(PinManager.this.mService);
                    allFriends = new FriendListDataStorage(PinManager.this.mService).getAllFriends();
                    while (allFriends.moveToNext()) {
                        str = str == null ? allFriends.getString(allFriends.getColumnIndex(FriendListDataStorage.FRIENDPIN)) : str + ";" + allFriends.getString(allFriends.getColumnIndex(FriendListDataStorage.FRIENDPIN));
                    }
                    if (str != null) {
                        catfishMessageObject = new CatfishMessageObject();
                        catfishMessageObject.userpin = this.userpin;
                        catfishMessageObject.messagetype = MessageType.DELETEFRD;
                        catfishMessageObject.message = "";
                        catfishMessageObject.recipient = str;
                        catfishMessageObject.sequence = CatfishRESTAPI.uniqueMonotonicSequence();
                        PinManager.this.mService.postToServiceHandler(new PinManager(PinManager.this.mService, PinServiceOperation.BROADCAST_DELETE_FRIENDS, PinManager.this.deviceid, this.userpin, catfishMessageObject));
                        return;
                    }
                    return;
                case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                    Log.d(PinManager.TAG, "----save profile for: " + this.msg.senderpin);
                    if (this.msg.senderpin == null) {
                        Log.d(PinManager.TAG, "----friendpin invalid");
                        return;
                    } else if (this.msg.senderpin.length() <= 0) {
                        Log.d(PinManager.TAG, "----friendpin invalid");
                        return;
                    } else if (this.msg.message == null) {
                        Log.d(PinManager.TAG, "----profile invalid");
                        return;
                    } else if (this.msg.message.length() <= 0) {
                        Log.d(PinManager.TAG, "----profile invalid");
                        return;
                    } else {
                        CatfishDataStorage catfishDataStorage2 = new CatfishDataStorage(PinManager.this.mService);
                        if (new FriendListDataStorage(PinManager.this.mService).updateFriendDataProfile(this.msg)) {
                            Log.d(PinManager.TAG, "----Receive Friend Profile Update: DB update success");
                            CatfishService.getCatfishPreferences().edit().putBoolean("profile_complete", true).commit();
                            PinManager.this.mService.signalDeviceIdNPinRegistered(true);
                            return;
                        }
                        Log.d(PinManager.TAG, "---- Receive Friend Profile Update: DB update for " + this.msg.senderpin + " fail");
                        return;
                    }
                default:
                    return;
            }
        }
    }

    public enum PinServiceOperation {
        CHECK_ISDEVICEID_REGISTERED,
        CHECK_ISPIN_EXISTS,
        REGISTER_PIN_DEVICEID,
        GENERATE_PIN,
        BROADCAST_CHANGE_PIN,
        GETPINFROMDEVID,
        RESTORE_USER_PROFILE,
        CHANGE_USER_KEY,
        BROADCAST_DELETE_FRIENDS,
        GETPINTORESTORE,
        RESTORE_USER_DATA,
        UPDATE_PIN,
        RESTORE_GROUP_DATA
    }

    public PinManager(CatfishService catfishService, PinServiceOperation pinServiceOperation, String str, String str2) {
        this.mService = catfishService;
        this.operation = pinServiceOperation;
        this.deviceid = str;
        this.userpin = str2;
        this.liveAge = System.currentTimeMillis();
        Log.d(TAG, "PinManager constructor, userpin" + this.userpin);
    }

    public PinManager(CatfishService catfishService, PinServiceOperation pinServiceOperation, String str, String str2, CatfishMessageObject catfishMessageObject) {
        this.mService = catfishService;
        this.operation = pinServiceOperation;
        this.deviceid = str;
        this.userpin = str2;
        this.liveAge = System.currentTimeMillis();
        this.message = catfishMessageObject;
    }

    private void sendNetworkProblemBroadcast() {
        this.mService.sendBroadcast(new Intent(CatfishIntents.ACTION_UI_REGISTER_NETWORKPROBLEM));
    }

    public String calcHmac(String str, String str2) {
        Key secretKeySpec = new SecretKeySpec(str.getBytes(), "HmacSHA1");
        Mac instance = Mac.getInstance("HmacSHA1");
        instance.init(secretKeySpec);
        byte[] doFinal = instance.doFinal(str2.getBytes());
        StringBuffer stringBuffer = new StringBuffer();
        for (byte b : doFinal) {
            int i = b & MotionEventCompat.ACTION_MASK;
            if (i <= 15) {
                stringBuffer.append("0");
            }
            stringBuffer.append(Integer.toHexString(i));
        }
        return stringBuffer.toString();
    }

    public void dropRunnable() {
        if (CatfishService.getUserPIN() == null) {
            this.scheduleNum = 0;
            this.liveAge = System.currentTimeMillis();
            this.mService.postToServiceHandler(this);
        }
        Log.d(TAG, " --- Drop Runnable PinManager --- ");
    }

    public long getAge() {
        return this.liveAge;
    }

    public int getScheduleNum() {
        return this.scheduleNum;
    }

    public void incraseScheduleNum() {
        this.scheduleNum++;
    }

    public void run() {
        Exception e;
        String str;
        String str2 = null;
        if (this.mService == null) {
            this.mService = CatfishService.getServiceInstance();
        }
        if (this.mServerHost == null) {
            this.mServerHost = CatfishService.getCurrentServerHost();
        }
        CatfishService catfishService;
        CatfishResult isUserpinExists;
        String str3;
        CatfishService catfishService2;
        CatfishPreferences catfishPreferences;
        String string;
        CatfishResult pinFromDevId;
        switch (AnonymousClass1.$SwitchMap$com$catfiz$service$PinManager$PinServiceOperation[this.operation.ordinal()]) {
            case e.b /*1*/:
                Log.d(TAG, "CHECK_ISDEVICEID_REGISTERED");
                catfishService = this.mService;
                CatfishService.getCatfishPreferences();
                if (this.userpin == null) {
                    this.mService.postToServiceHandler(new PinManager(this.mService, PinServiceOperation.GENERATE_PIN, this.deviceid, this.userpin));
                    return;
                }
                return;
            case e.c /*2*/:
                Log.d(TAG, "CHECK_ISPIN_EXISTS");
                isUserpinExists = this.catfishRestAPI.isUserpinExists(this.mServerHost, this.userpin);
                if (isUserpinExists.hasSuccess()) {
                    Log.d(TAG, "CHECK_ISPIN_EXISTS sukses");
                    return;
                } else if (isUserpinExists.hasNotFound()) {
                    Log.d(TAG, "CHECK_ISPIN_EXISTS notfound");
                    return;
                } else if (isUserpinExists.hasFailure()) {
                    Log.d(TAG, "CHECK_ISPIN_EXISTS Failure");
                    this.mServerHost = CatfishService.getServerHost();
                    this.mService.scheduleRunnableToService(this);
                    sendNetworkProblemBroadcast();
                    return;
                } else {
                    return;
                }
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                Log.d(TAG, "REGISTER_PIN_DEVICEID");
                str3 = this.userpin;
                catfishService2 = this.mService;
                CatfishPreferences catfishPreferences2 = CatfishService.getCatfishPreferences();
                if (catfishPreferences2.contains(CatfishService.CATFISHID_NEW_PIN_TEMP)) {
                    str3 = catfishPreferences2.getString(CatfishService.CATFISHID_NEW_PIN_TEMP, this.userpin);
                }
                try {
                    if (this.message.password != null) {
                        if (this.message.username == null) {
                            System.exit(1);
                        }
                        str2 = calcHmac(this.message.password, this.message.username);
                    } else {
                        str2 = this.message.userkey;
                    }
                    this.mService.setUserKey(str2);
                } catch (Exception e2) {
                    e2.printStackTrace();
                    System.exit(1);
                }
                CatfishResult registerDevidNPin = this.catfishRestAPI.registerDevidNPin(this.mServerHost, str3, this.deviceid, str2);
                if (registerDevidNPin.hasSuccess() || registerDevidNPin.hasDeviceAlreadyRegistered()) {
                    Log.d(TAG, "REGISTER_PIN_DEVICEID sukses");
                    this.mService.setLongPIN(registerDevidNPin.longpin);
                    this.mService.setUserKey(str2);
                    if (str3.compareTo(this.userpin) != 0) {
                        this.mService.postToDBHandler(new PinManagerDatabaseRunnable(PinDatabaseOperation.BROADCAST_CHANGE_PIN, this.userpin, str3));
                        if (catfishPreferences2.contains(CatfishService.CATFISHID_NEW_PIN_TEMP)) {
                            catfishPreferences2.edit().remove(CatfishService.CATFISHID_NEW_PIN_TEMP).commit();
                        }
                        this.mService.setUserPIN(str3);
                    }
                    if (catfishPreferences2.contains(CatfishService.ISNEWUSERPENDING)) {
                        catfishPreferences2.edit().remove(CatfishService.ISNEWUSERPENDING).commit();
                    }
                    if (catfishPreferences2.contains(CatfishService.ISREGISTERPENDING)) {
                        catfishPreferences2.edit().remove(CatfishService.ISREGISTERPENDING).commit();
                    }
                    this.mService.signalDeviceIdNPinRegistered(false);
                    return;
                } else if (registerDevidNPin.hasFailure()) {
                    Log.d(TAG, "REGISTER_PIN_DEVICEID Failure");
                    this.mServerHost = CatfishService.getServerHost();
                    this.mService.scheduleRunnableToService(this);
                    sendNetworkProblemBroadcast();
                    return;
                } else if (registerDevidNPin.hasPinAlreadyExists()) {
                    catfishService = this.mService;
                    if (CatfishService.getLongPIN() != null) {
                        catfishService = this.mService;
                        if (CatfishService.getLongPIN().compareTo("") != 0) {
                            return;
                        }
                    }
                    this.mService.postToServiceHandler(new PinManager(this.mService, PinServiceOperation.GETPINTORESTORE, this.mService.getDeviceId(), this.userpin));
                    return;
                } else {
                    if (catfishPreferences2.contains(CatfishService.ISNEWUSERPENDING)) {
                        catfishPreferences2.edit().remove(CatfishService.ISNEWUSERPENDING).commit();
                    }
                    if (catfishPreferences2.contains(CatfishService.ISREGISTERPENDING)) {
                        catfishPreferences2.edit().remove(CatfishService.ISREGISTERPENDING).commit();
                    }
                    this.mService.signalDeviceIdNPinRegistered(false);
                    return;
                }
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                Log.d(TAG, "GENERATE_PIN");
                isUserpinExists = this.catfishRestAPI.generatePIN(this.mServerHost);
                if (isUserpinExists.hasSuccess()) {
                    Log.d(TAG, "GENERATE_PIN sukses");
                    if (this.userpin == null) {
                        this.userpin = isUserpinExists.userpin;
                        this.mService.setUserPIN(this.userpin);
                        this.mService.signalDeviceIdNPinRegistered(false);
                        this.mService.postToDBHandler(new CUIDBAddFirstMessageExecutor(new CatfishClientInterface()));
                    }
                    catfishPreferences = CatfishService.getCatfishPreferences();
                    string = catfishPreferences.getString(CatfishRESTAPI.CFCOMPACT_EMAIL, "");
                    str2 = catfishPreferences.getString(CatfishRESTAPI.CFCOMPACT_USERKEY, "");
                    if (!string.equals("")) {
                        this.catfishRestAPI.updateNicEmailRegister(CatfishService.getRegistrationServer(), string, str2, isUserpinExists.userpin);
                        return;
                    }
                    return;
                } else if (isUserpinExists.hasFailure()) {
                    Log.d(TAG, "GENERATE_PIN Failure");
                    this.mServerHost = CatfishService.getServerHost();
                    this.mService.scheduleRunnableToService(this);
                    sendNetworkProblemBroadcast();
                    return;
                } else {
                    Log.d(TAG, "GENERATE_PIN exception");
                    if (this.scheduleNum < 50) {
                        this.mServerHost = CatfishService.getServerHost();
                        this.mService.scheduleRunnableToService(this);
                    }
                    sendNetworkProblemBroadcast();
                    return;
                }
            case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                CatfishPreferences catfishPreferences3 = CatfishService.getCatfishPreferences();
                isUserpinExists = this.catfishRestAPI.updateNicEmailRegister(CatfishService.getRegistrationServer(), catfishPreferences3.getString(CatfishRESTAPI.CFCOMPACT_EMAIL, ""), catfishPreferences3.getString(CatfishRESTAPI.CFCOMPACT_USERKEY, ""), this.userpin);
                if (!isUserpinExists.hasSuccess()) {
                    if (isUserpinExists.hasFailure()) {
                        this.mServerHost = CatfishService.getServerHost();
                        this.mService.scheduleRunnableToService(this);
                    } else {
                        Log.e(TAG, "Please Check, Server tell that something wrong in our parameter");
                    }
                }
                isUserpinExists.cleaningup();
                return;
            case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                if (this.message != null) {
                    Log.d(TAG, "BROADCAST_CHANGE_PIN");
                    isUserpinExists = this.catfishRestAPI.sendBroadcast(this.mServerHost, this.userpin, this.message.recipient, this.message.message, this.message.messagetype.ordinal(), this.message.sequence);
                    if (!isUserpinExists.hasSuccess() && isUserpinExists.hasFailure()) {
                        this.mServerHost = CatfishService.getServerHost();
                        this.mService.scheduleRunnableToService(this);
                        return;
                    }
                    return;
                }
                return;
            case SimpleLog.LOG_LEVEL_OFF /*7*/:
                Log.d(TAG, "GETPINFROMDEVID");
                if (this.message.userkey != null) {
                    str3 = this.message.userkey;
                } else {
                    try {
                        str3 = calcHmac(this.message.password, this.message.username);
                    } catch (Exception e3) {
                        Exception exception = e3;
                        str3 = " ";
                        exception.printStackTrace();
                    }
                }
                pinFromDevId = this.catfishRestAPI.getPinFromDevId(this.mServerHost, this.deviceid, str3);
                Log.d(TAG, "userpin = " + this.message.username + "password =" + this.message.password + " USERKEY = " + str3);
                if (pinFromDevId.hasSuccess()) {
                    Log.d(TAG, "GETPINFROMDEVID success");
                    catfishService2 = this.mService;
                    CatfishPreferences catfishPreferences4 = CatfishService.getCatfishPreferences();
                    if (catfishPreferences4.contains(CatfishService.ISNEWUSERPENDING)) {
                        catfishPreferences4.edit().remove(CatfishService.ISNEWUSERPENDING).commit();
                    }
                    if (catfishPreferences4.contains(CatfishService.ISRESTOREPENDING)) {
                        catfishPreferences4.edit().remove(CatfishService.ISRESTOREPENDING).commit();
                    }
                    if (catfishPreferences4.contains(CatfishService.CATFISHID_NEW_PIN_TEMP)) {
                        catfishPreferences4.edit().remove(CatfishService.CATFISHID_NEW_PIN_TEMP).commit();
                    }
                    this.userpin = pinFromDevId.userpin;
                    this.mService.setUserPIN(this.userpin);
                    this.mService.setLongPIN(pinFromDevId.longpin);
                    this.mService.setUserKey(str3);
                    return;
                } else if (pinFromDevId.hasFailure()) {
                    Log.d(TAG, "GETPINFROMDEVID failure");
                    this.mServerHost = CatfishService.getServerHost();
                    this.mService.scheduleRunnableToService(this);
                    sendNetworkProblemBroadcast();
                    return;
                } else {
                    this.mService.postToServiceHandler(new PinManager(this.mService, PinServiceOperation.GETPINTORESTORE, this.mService.getDeviceId(), this.userpin));
                    return;
                }
            case Utils.FILE_TYPE_INSTALLER /*8*/:
                Log.d(TAG, "RESTORE_USER_PROFILE, getUserProfileInfo " + this.userpin);
                isUserpinExists = this.catfishRestAPI.getUserProfileInfo(this.mServerHost, this.userpin, this.userpin);
                if (isUserpinExists.hasSuccess()) {
                    Log.d(TAG, "RESTORE_USER_PROFILE, success ");
                    if (isUserpinExists.username != null && isUserpinExists.username.length() > 0) {
                        Log.d(TAG, "RESTORE_USER_PROFILE, success username = " + isUserpinExists.username);
                        this.mService.setUserProfile(isUserpinExists.username, isUserpinExists.userstatus, isUserpinExists.object_sequence);
                    }
                    this.mService.postToServiceHandler(new PinManager(this.mService, PinServiceOperation.RESTORE_USER_DATA, this.mService.getDeviceId(), this.userpin));
                    if (isUserpinExists.photoavailable) {
                        this.mService.postToServiceHandler(new PPFDownloadExecutor(this.mService, this.mServerHost, this.userpin, this.userpin, true), 2);
                    }
                } else if (isUserpinExists.hasFailure()) {
                    isUserpinExists.cleaningup();
                    this.mServerHost = CatfishService.getServerHost();
                    this.mService.scheduleRunnableToService(this);
                    sendNetworkProblemBroadcast();
                    return;
                } else if (!isUserpinExists.hasSuccess()) {
                    Log.e(TAG, "Please Check, Server tell that something wrong in our parameter");
                    isUserpinExists.cleaningup();
                    this.mService.signalDeviceIdNPinRegistered(false);
                    return;
                }
                Log.d(TAG, "RESTORE_USER_PROFILE, signalDeviceIdNPinRegistered");
                this.mService.signalDeviceIdNPinRegistered(true);
                this.mUIBinder = new CatfishUIBinder(this.mService);
                this.mUIBinder.restoreAllFriendPinFromServer(this.mService.getCallBack(CatfishService.CATFISH_ACTION_DEVICEIDREGISTERED), this.userpin);
                return;
            case HTTP.HT /*9*/:
                Log.d(TAG, "----- RESTORE_USER_DATA -----");
                isUserpinExists = this.catfishRestAPI.getUserDataProfile(this.mServerHost, this.userpin, this.userpin);
                if (isUserpinExists.hasSuccess()) {
                    Log.d(TAG, "----GET USER DATA PROFILE---" + isUserpinExists.data_json + " " + isUserpinExists.toString());
                    Log.e(TAG, "Saving data profile to db, friendpin:" + isUserpinExists.userpin + " data:" + isUserpinExists.data_json);
                    CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
                    catfishMessageObject.senderpin = isUserpinExists.userpin;
                    catfishMessageObject.rcvtimestamp = isUserpinExists.timestamp;
                    catfishMessageObject.message = isUserpinExists.data_json;
                    this.mService.postToDBHandler(new PinManagerDatabaseRunnable(PinDatabaseOperation.STORE_USER_DATA, this.userpin, catfishMessageObject));
                    this.mService.postToServiceHandler(new PinManager(this.mService, PinServiceOperation.RESTORE_GROUP_DATA, str2, isUserpinExists.userpin));
                } else if (isUserpinExists.hasNotFound()) {
                    Log.d(TAG, "----GET USER DATA PROFILE: " + isUserpinExists.userpin + " NOT FOUND ----");
                } else if (isUserpinExists.hasFailure()) {
                    this.mServerHost = CatfishService.getServerHost();
                    this.mService.scheduleRunnableToService(this);
                } else {
                    Log.e(TAG, "Please Check, Server tell that something wrong in our parameter");
                }
                isUserpinExists.cleaningup();
                return;
            case HTTP.LF /*10*/:
                Log.d(TAG, "----- RESTORE_GROUP_DATA -----");
                isUserpinExists = this.catfishRestAPI.getPoolBackupData(this.mServerHost, this.userpin);
                if (isUserpinExists.hasSuccess()) {
                    Log.d(TAG, "----GET USER BACKUP GROUP DATA---" + isUserpinExists.data_json + " " + isUserpinExists.toString());
                } else if (isUserpinExists.hasNotFound()) {
                    Log.d(TAG, "----GET USER BACKUP GROUP DATA: " + isUserpinExists.userpin + " NOT FOUND ----");
                } else if (!isUserpinExists.hasFailure()) {
                    Log.e(TAG, "Please Check, Server tell that something wrong in our parameter");
                }
                isUserpinExists.cleaningup();
                return;
            case PinManagerV2.REGCODE_HASOLDACC /*11*/:
                try {
                    string = calcHmac(this.message.password, CatfishService.getUserPIN());
                    try {
                        str3 = calcHmac(this.message.message, CatfishService.getUserPIN());
                        str2 = string;
                    } catch (Exception e32) {
                        Exception exception2 = e32;
                        str3 = string;
                        e2 = exception2;
                        e2.printStackTrace();
                        str = str2;
                        str2 = str3;
                        str3 = str;
                        pinFromDevId = this.catfishRestAPI.changeUserKey(this.mServerHost, this.message.longpin, str2, str3);
                        if (!pinFromDevId.hasSuccess()) {
                            this.mService.setLongPIN(pinFromDevId.longpin);
                            this.mService.setUserKey(str3);
                            catfishService = this.mService;
                            CatfishService.signalToast(this.mService.getString(R.string.password_changed));
                            return;
                        } else if (pinFromDevId.hasFailure()) {
                            catfishService = this.mService;
                            CatfishService.signalToast(this.mService.getString(R.string.change_pass_failed));
                            return;
                        } else {
                            this.mServerHost = CatfishService.getServerHost();
                            this.mService.scheduleRunnableToService(this);
                            return;
                        }
                    }
                } catch (Exception e322) {
                    e2 = e322;
                    str3 = str2;
                    e2.printStackTrace();
                    str = str2;
                    str2 = str3;
                    str3 = str;
                    pinFromDevId = this.catfishRestAPI.changeUserKey(this.mServerHost, this.message.longpin, str2, str3);
                    if (!pinFromDevId.hasSuccess()) {
                        this.mService.setLongPIN(pinFromDevId.longpin);
                        this.mService.setUserKey(str3);
                        catfishService = this.mService;
                        CatfishService.signalToast(this.mService.getString(R.string.password_changed));
                        return;
                    } else if (pinFromDevId.hasFailure()) {
                        this.mServerHost = CatfishService.getServerHost();
                        this.mService.scheduleRunnableToService(this);
                        return;
                    } else {
                        catfishService = this.mService;
                        CatfishService.signalToast(this.mService.getString(R.string.change_pass_failed));
                        return;
                    }
                }
                pinFromDevId = this.catfishRestAPI.changeUserKey(this.mServerHost, this.message.longpin, str2, str3);
                if (!pinFromDevId.hasSuccess()) {
                    this.mService.setLongPIN(pinFromDevId.longpin);
                    this.mService.setUserKey(str3);
                    catfishService = this.mService;
                    CatfishService.signalToast(this.mService.getString(R.string.password_changed));
                    return;
                } else if (pinFromDevId.hasFailure()) {
                    this.mServerHost = CatfishService.getServerHost();
                    this.mService.scheduleRunnableToService(this);
                    return;
                } else {
                    catfishService = this.mService;
                    CatfishService.signalToast(this.mService.getString(R.string.change_pass_failed));
                    return;
                }
            case PinManagerV2.REGCODE_MAX /*12*/:
                if (this.message != null) {
                    Log.d(TAG, "BROADCAST_DELETE_FRIENDS");
                    isUserpinExists = this.catfishRestAPI.sendBroadcast(this.mServerHost, this.userpin, this.message.recipient, this.message.message, this.message.messagetype.ordinal(), this.message.sequence);
                    if (!isUserpinExists.hasSuccess() && isUserpinExists.hasFailure()) {
                        this.mServerHost = CatfishService.getServerHost();
                        this.mService.scheduleRunnableToService(this);
                        return;
                    }
                    return;
                }
                return;
            case HTTP.CR /*13*/:
                Log.d(TAG, "GETPINTORESTORE");
                isUserpinExists = this.catfishRestAPI.getPinToRestore(this.mServerHost, this.deviceid);
                if (isUserpinExists.hasSuccess()) {
                    Log.d(TAG, "GETPINTORESTORE success");
                    this.userpin = isUserpinExists.userpin;
                    CatfishService catfishService3 = this.mService;
                    catfishPreferences = CatfishService.getCatfishPreferences();
                    catfishPreferences.edit().putBoolean(CatfishService.ISRESTOREPENDING, true).commit();
                    catfishPreferences.edit().putString(CatfishService.CATFISHID_NEW_PIN_TEMP, this.userpin).commit();
                    catfishService3 = this.mService;
                    catfishPreferences = CatfishService.getCatfishPreferences();
                    if (catfishPreferences.contains(CatfishService.ISNEWUSERPENDING)) {
                        catfishPreferences.edit().remove(CatfishService.ISNEWUSERPENDING).commit();
                    }
                    if (catfishPreferences.contains(CatfishService.ISRESTOREPENDING)) {
                        catfishPreferences.edit().remove(CatfishService.ISRESTOREPENDING).commit();
                    }
                    if (catfishPreferences.contains(CatfishService.CATFISHID_NEW_PIN_TEMP)) {
                        catfishPreferences.edit().remove(CatfishService.CATFISHID_NEW_PIN_TEMP).commit();
                    }
                    this.userpin = isUserpinExists.userpin;
                    this.mService.setUserPIN(this.userpin);
                    this.mService.setLongPIN(isUserpinExists.longpin);
                    return;
                } else if (isUserpinExists.hasFailure()) {
                    Log.d(TAG, "GETPINTORESTORE failure");
                    this.mServerHost = CatfishService.getServerHost();
                    this.mService.scheduleRunnableToService(this);
                    sendNetworkProblemBroadcast();
                    return;
                } else {
                    Log.d(TAG, "GETPINTORESTORE exception");
                    if (this.scheduleNum < 50) {
                        this.mServerHost = CatfishService.getServerHost();
                        this.mService.scheduleRunnableToService(this);
                    }
                    sendNetworkProblemBroadcast();
                    return;
                }
            default:
                return;
        }
    }

    public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        this.catfishRestAPI = catfishRESTAPI;
    }
}
