package com.catfiz.service;

import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;

public class CatfishPushExecutor implements Runnable {
    private static final byte ACCEPT_NOTIFY_NEW_MESSAGE = (byte) 3;
    private static final long DELAYEDPUSH = 10000;
    private static final int MAXCONSUMEHEADERTIME = 600000;
    private static final int MAXTRIES = 3;
    private static final byte NOOP_COMMAND = (byte) 0;
    private static final byte NOTIFY_MBOX_CONFERENCE = (byte) 7;
    private static final byte NOTIFY_MBOX_CONTROLS = (byte) 4;
    private static final byte NOTIFY_MBOX_LOWPRIO = (byte) 8;
    private static final byte NOTIFY_MBOX_MESSAGE = (byte) 5;
    private static final byte NOTIFY_MBOX_STATUSCOMM = (byte) 6;
    private static final byte NOTIFY_NEW_MESSAGE = (byte) 2;
    private static final byte SUBSCRIBE_COMMAND = (byte) 1;
    private static final String TAG = "CatfishPushExecutor";
    public static volatile String mSubcribeCommand = null;
    private volatile boolean mAbort;
    public Socket mSocket;
    public volatile String mUserpin;

    public CatfishPushExecutor() {
        this.mUserpin = null;
        this.mSocket = null;
        this.mAbort = false;
        this.mAbort = false;
        this.mSocket = null;
    }

    private void consumeHeader(InputStream inputStream, byte[] bArr) {
        Log.d(TAG, "---PUSH Channel (CONSUME HEADER): Consuming...---");
        int i = 0;
        while (true) {
            int read = inputStream.read(bArr, 0, 1);
            if (read < 0 || this.mAbort) {
                break;
            } else if (read == 0) {
                Log.d(TAG, "---PUSH Channel (CONSUME HEADER): NO DATA: CONTINUE---");
            } else {
                if (bArr[0] == (byte) 10) {
                    i++;
                } else if (bArr[0] != (byte) 13) {
                    i = 0;
                }
                if (i >= 2) {
                    break;
                }
            }
        }
        Log.d(TAG, "---PUSH Channel (CONSUME HEADER): Done.---");
    }

    private void sendSignal(byte b, OutputStream outputStream) {
        outputStream.write(("GET /" + System.currentTimeMillis() + " HTTP/1.1\r\nContent-Length: 1\r\n\r\n").getBytes());
        outputStream.write(b);
        outputStream.flush();
    }

    public synchronized void abortPUSHChannel() {
        this.mAbort = true;
        if (this.mSocket != null) {
            try {
                this.mSocket.shutdownOutput();
            } catch (IOException e) {
            }
            try {
                this.mSocket.shutdownInput();
            } catch (IOException e2) {
            }
            try {
                this.mSocket.close();
            } catch (IOException e3) {
            }
        }
    }

    public boolean buildCommand() {
        this.mUserpin = CatfishService.getUserPIN();
        if (this.mUserpin != null) {
            byte[] bArr = new byte[]{SUBSCRIBE_COMMAND, Integer.valueOf(this.mUserpin.length()).byteValue()};
            mSubcribeCommand = "GET /" + System.currentTimeMillis() + " HTTP/1.1\r\nContent-Length: " + (this.mUserpin.length() + 2) + "\r\n\r\n";
            mSubcribeCommand += new String(bArr);
            mSubcribeCommand += this.mUserpin;
            return true;
        }
        mSubcribeCommand = null;
        return false;
    }

    public synchronized void resetPUSHChannel() {
        this.mAbort = false;
        this.mSocket = null;
    }

    public synchronized boolean restartPUSHChannel() {
        boolean z = false;
        synchronized (this) {
            this.mAbort = false;
            if (this.mSocket != null) {
                try {
                    this.mSocket.shutdownOutput();
                } catch (IOException e) {
                }
                try {
                    this.mSocket.shutdownInput();
                } catch (IOException e2) {
                }
                try {
                    this.mSocket.close();
                } catch (IOException e3) {
                }
                z = CatfishServiceConnState.isPushExecutorRunning();
            }
        }
        return z;
    }

    public void run() {
        CatfishServiceConnState.setExecutorPosted(false);
        if (CatfishServiceConnState.isPushExecutorRunning()) {
            Log.d(TAG, "---PUSH Channel is allready active---");
        } else if (buildCommand()) {
            CatfishServiceConnState.setExecutorRunning(true);
            this.mSocket = new Socket();
            String pushHost = CatfishService.getPushHost();
            int pushPort = CatfishService.getPushPort();
            try {
                this.mSocket.setKeepAlive(true);
                this.mSocket.setTcpNoDelay(true);
                this.mSocket.connect(new InetSocketAddress(pushHost, pushPort), 60000);
                Log.d(TAG, "---PUSH Channel: ACTIVE---");
                InputStream inputStream = this.mSocket.getInputStream();
                OutputStream outputStream = this.mSocket.getOutputStream();
                byte[] bArr = new byte[AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT];
                Log.d(TAG, "Send request:\n" + mSubcribeCommand);
                outputStream.write(mSubcribeCommand.getBytes());
                outputStream.flush();
                this.mSocket.setSoTimeout(MAXCONSUMEHEADERTIME);
                consumeHeader(inputStream, bArr);
                this.mSocket.setSoTimeout(((int) CatfishService.getPushChannelDelay()) + 480000);
                while (true) {
                    int read = inputStream.read(bArr, 0, 4);
                    if (read >= 0 && !this.mAbort) {
                        if (this.mAbort) {
                            Log.d(TAG, "---PUSH Channel:" + pushHost + ":" + pushPort + ": ABORT...ABORT!!!---");
                        } else if (read == 0) {
                            Log.d(TAG, "---PUSH Channel:" + pushHost + ":" + pushPort + ": NO DATA: CONTINUE---");
                        } else {
                            switch (bArr[0]) {
                                case e.a /*0*/:
                                    Log.d(TAG, "---PUSH Channel:" + pushHost + ":" + pushPort + ": NOOP ---");
                                    Log.d(TAG, "Send ping");
                                    sendSignal(NOOP_COMMAND, outputStream);
                                    continue;
                                case e.c /*2*/:
                                    continue;
                                case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                                    Log.d(TAG, "---PUSH Channel:" + pushHost + ":" + pushPort + ": NEW CONTROL MESSAGE ---");
                                    CatfishService.pushSignalToGetControlMessages();
                                    Log.d(TAG, "Send Accept Signal");
                                    sendSignal(ACCEPT_NOTIFY_NEW_MESSAGE, outputStream);
                                    continue;
                                case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                                    Log.d(TAG, "---PUSH Channel:" + pushHost + ":" + pushPort + ": Signal the service: NEW MESSAGE ---");
                                    CatfishService.pushSignalToGetMessages();
                                    Log.d(TAG, "Send Accept Signal");
                                    sendSignal(ACCEPT_NOTIFY_NEW_MESSAGE, outputStream);
                                    continue;
                                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                                    Log.d(TAG, "---PUSH Channel:" + pushHost + ":" + pushPort + ": NEW STATUS COMMENT ---");
                                    CatfishService.pushSignalToGetStatusComment();
                                    Log.d(TAG, "Send Accept Signal");
                                    sendSignal(ACCEPT_NOTIFY_NEW_MESSAGE, outputStream);
                                    continue;
                                case SimpleLog.LOG_LEVEL_OFF /*7*/:
                                    Log.d(TAG, "---PUSH Channel:" + pushHost + ":" + pushPort + ": NEW POOL MESSAGE ---");
                                    CatfishService.pushSignalToGetConference();
                                    Log.d(TAG, "Send Accept Signal");
                                    sendSignal(ACCEPT_NOTIFY_NEW_MESSAGE, outputStream);
                                    continue;
                                case Utils.FILE_TYPE_INSTALLER /*8*/:
                                    Log.d(TAG, "---PUSH Channel:" + pushHost + ":" + pushPort + ": NEW LOWPRIO MESSAGE ---");
                                    CatfishService.pushSignalToGetLowPrio();
                                    Log.d(TAG, "Send Accept Signal");
                                    sendSignal(ACCEPT_NOTIFY_NEW_MESSAGE, outputStream);
                                    continue;
                                default:
                                    Log.d(TAG, "---PUSH Channel:" + pushHost + ":" + pushPort + ": NON COMMAND ---");
                                    Log.d(TAG, "Non Command --> Go to consume header state");
                                    if (this.mAbort) {
                                        Log.d(TAG, "---PUSH Channel: ABORT...ABORT!!!---");
                                        break;
                                    }
                                    this.mSocket.setSoTimeout(MAXCONSUMEHEADERTIME);
                                    consumeHeader(inputStream, bArr);
                                    this.mSocket.setSoTimeout(((int) CatfishService.getPushChannelDelay()) + 480000);
                                    continue;
                            }
                        }
                    }
                    if (!this.mAbort) {
                        Log.d(TAG, "---PUSH Channel:" + pushHost + ":" + pushPort + ": DROP (GRACEFULLY)---");
                    }
                    synchronized (this) {
                        try {
                            this.mSocket.close();
                        } catch (IOException e) {
                        } catch (Error e2) {
                        }
                        this.mSocket = null;
                    }
                    if (this.mAbort) {
                        Log.d(TAG, "---PUSH Channel: Aborting... ---");
                        CatfishServiceConnState.setExecutorPosted(false);
                        CatfishServiceConnState.setExecutorRunning(false);
                    } else {
                        Log.d(TAG, "---PUSH Channel: Restarting... ---");
                        CatfishServiceConnState.setExecutorPosted(false);
                        CatfishServiceConnState.setExecutorRunning(false);
                        CatfishService.activatePushChannel(DELAYEDPUSH);
                    }
                    Log.d(TAG, "---PUSH Channel: Exit---");
                    return;
                }
            } catch (Exception e3) {
                Log.d(TAG, "---PUSH Channel:" + pushHost + ":" + pushPort + ":" + e3.toString());
                CatfishService.schedulePushChannel();
                synchronized (this) {
                    try {
                        this.mSocket.close();
                    } catch (IOException e4) {
                    } catch (Error e5) {
                    }
                    this.mSocket = null;
                    if (this.mAbort) {
                        Log.d(TAG, "---PUSH Channel: Aborting... ---");
                        CatfishServiceConnState.setExecutorPosted(false);
                        CatfishServiceConnState.setExecutorRunning(false);
                    } else {
                        Log.d(TAG, "---PUSH Channel: Restarting... ---");
                        CatfishServiceConnState.setExecutorPosted(false);
                        CatfishServiceConnState.setExecutorRunning(false);
                        CatfishService.activatePushChannel(DELAYEDPUSH);
                    }
                    Log.d(TAG, "---PUSH Channel: Exit---");
                }
            } catch (Error e6) {
                Log.d(TAG, "---PUSH Channel:" + pushHost + ":" + pushPort + ":" + e6.toString());
                CatfishService.schedulePushChannel();
                synchronized (this) {
                    try {
                        this.mSocket.close();
                    } catch (IOException e7) {
                    } catch (Error e8) {
                    }
                    this.mSocket = null;
                    if (this.mAbort) {
                        Log.d(TAG, "---PUSH Channel: Aborting... ---");
                        CatfishServiceConnState.setExecutorPosted(false);
                        CatfishServiceConnState.setExecutorRunning(false);
                    } else {
                        Log.d(TAG, "---PUSH Channel: Restarting... ---");
                        CatfishServiceConnState.setExecutorPosted(false);
                        CatfishServiceConnState.setExecutorRunning(false);
                        CatfishService.activatePushChannel(DELAYEDPUSH);
                    }
                    Log.d(TAG, "---PUSH Channel: Exit---");
                }
            } catch (Throwable th) {
                synchronized (this) {
                    try {
                        this.mSocket.close();
                    } catch (IOException e9) {
                    } catch (Error e10) {
                    }
                    this.mSocket = null;
                    if (this.mAbort) {
                        Log.d(TAG, "---PUSH Channel: Aborting... ---");
                        CatfishServiceConnState.setExecutorPosted(false);
                        CatfishServiceConnState.setExecutorRunning(false);
                    } else {
                        Log.d(TAG, "---PUSH Channel: Restarting... ---");
                        CatfishServiceConnState.setExecutorPosted(false);
                        CatfishServiceConnState.setExecutorRunning(false);
                        CatfishService.activatePushChannel(DELAYEDPUSH);
                    }
                    Log.d(TAG, "---PUSH Channel: Exit---");
                }
            }
        } else {
            Log.e(TAG, "--- FAIL TO REBUILD COMMAND: ABORT ---");
            CatfishService.schedulePushChannel();
        }
    }
}
