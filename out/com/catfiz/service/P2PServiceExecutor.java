package com.catfiz.service;

import com.catfiz.util.Log;

public class P2PServiceExecutor {
    private static final String TAG = "P2PServiceExecutor";

    public class P2PDataReady implements IDropableRunnable, Runnable {
        private long mAge = 0;
        private boolean mChannelCompleted = false;
        private long mChannelId = 0;
        private CatfishService mService = null;
        public int scheduleNum = 0;

        public P2PDataReady(CatfishService catfishService, long j, boolean z) {
            this.mService = catfishService;
            this.mChannelId = j;
            this.mChannelCompleted = z;
            this.mAge = System.currentTimeMillis();
        }

        public void dropRunnable() {
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            IP2PDropableRunnable waitP2PReceiver = this.mService.getWaitP2PReceiver(this.mChannelId);
            if (waitP2PReceiver != null) {
                Log.d(P2PServiceExecutor.TAG, "P2P READY: CONTINUE");
                if (this.mChannelCompleted) {
                    ((IP2PChunkData) waitP2PReceiver).setChannelCompleted(true);
                }
                this.mService.postToServiceHandler((IDropableRunnable) waitP2PReceiver, 2);
                return;
            }
            Log.d(P2PServiceExecutor.TAG, "P2P READY: NO RECEIVER IN WAIT: IGNORE");
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        }
    }

    public class P2PDelivered implements IDropableRunnable, Runnable {
        private long mAge = 0;
        long mChannelId = 0;
        private CatfishService mService = null;
        public int scheduleNum = 0;

        public P2PDelivered(CatfishService catfishService, long j) {
            this.mService = catfishService;
            this.mChannelId = j;
            this.mAge = System.currentTimeMillis();
        }

        public void dropRunnable() {
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            IP2PDropableRunnable waitP2PSender = this.mService.getWaitP2PSender(this.mChannelId);
            if (waitP2PSender != null) {
                Log.d(P2PServiceExecutor.TAG, "P2P DELIVERED: UPLOAD CONTINUE");
                this.mService.postToServiceHandler((IDropableRunnable) waitP2PSender, 2);
                return;
            }
            Log.d(P2PServiceExecutor.TAG, "P2P DELIVERED: NO SENDER IN WAIT: IGNORE");
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        }
    }
}
