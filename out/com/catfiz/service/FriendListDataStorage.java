package com.catfiz.service;

import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;
import android.preference.PreferenceManager;
import android.widget.Toast;
import com.catfiz.R;
import com.catfiz.intents.CatfishIntents;
import com.catfiz.pool.PoolDataStorage;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.util.Log;
import java.util.ArrayList;
import org.apache.http.HttpStatus;

public class FriendListDataStorage {
    public static final String ACTIVECHAT_IDX = "activechat_idx";
    public static final String ACTIVITYCOUNT = "activitycount";
    public static final String CATEGORY_CHILD_IDX = "categorychild_idx";
    public static final String CODE = "code";
    public static final String COUNTFLAG = "countflag";
    public static final String DATABASE_NAME = "catfiz_friendlist.db";
    public static final String FILENAME = "filename";
    public static final String FOLLOW = "follow";
    public static final String FRIENDALIAS = "friendalias";
    public static final String FRIENDLISTREQUEST_IDX = "friendlistrequest_idx";
    public static final String FRIENDLIST_TABLE_NAME = "friendlist";
    public static final String FRIENDNAME = "friendname";
    public static final String FRIENDNAME_IDX = "friendname_idx";
    public static final String FRIENDPIN = "friendpin";
    public static final String GROUPCONTACTID = "groupcontactid";
    public static final String GROUPCONTACTNAME = "groupcontactname";
    public static final String GROUPFRIENDCOUNT = "groupfriendcount";
    public static final String GROUP_CHILD_CONTACT_TABEL_NAME = "groupfriend_contact";
    public static final String GROUP_CONTACT_TABEL_NAME = "group_contact";
    public static final String HAVEUNREAD = "haveunread";
    public static final String HAVEUNREADSTATCOMM = "hvunreadstatcomm";
    public static final String IGNOREPOOL = "ignorepool";
    public static final String ISBLACKLIST = "isblacklist";
    public static final String LASTACTIVITY = "lastactivity";
    public static final String LASTACTIVITY_IDX = "last_activity_idx";
    public static final String LASTCHATACTIVITY = "lastchatactivity";
    public static final String LASTDELIVERYSTATUS = "lastdeliverystatus";
    public static final String LASTFILEPATH = "lastfilepath";
    public static final String LASTMESSAGE = "lastmessage";
    public static final String LASTMESSAGESEQ = "lastmsgsequence";
    public static final String LASTMESSAGETYPE = "lastmessagetype";
    public static final String LASTSTATUSUPDATE = "laststatusupdate";
    public static final String LIKESTATUS = "likestatus";
    public static final String MELIKETHIS = "melikethis";
    public static final String MESSAGE = "message";
    public static final String MESSAGETYPE = "messagetype";
    public static final String OBJCOMMENTCOUNT = "objcommentcount";
    public static final String OFFICIAL_TABLE_NAME = "officiallist";
    public static final String PENDINGREQUEST_TABLE_NAME = "pendingreq";
    public static final String PHOTOAVAILABLE = "photoavailable";
    public static final String PHOTOFILENAME = "photofilename";
    public static final String PHOTOUPDATEMARK = "photoupdatemark";
    public static final String PREFERENCE_NAME = "com.catfiz.preference";
    public static final String REBUILD_CATEGORY = "rebuild_category";
    public static final String RECIPIENT = "recipient";
    public static final String RECIPIENTNAME = "recipientname";
    public static final String REPO = "repo";
    public static final String REQUESTFRIEND_TABLE_NAME = "requestfriend";
    public static final String SENDERNAME = "sendername";
    public static final String SENDERPIN = "senderpin";
    public static final String SEQUENCE = "sequence";
    public static final String SLINK = "slink";
    public static final String STATUS = "status";
    public static final String STATUSSEQ = "statusseq";
    public static final String STATUSUPDATEMARK = "statusupdatemark";
    private static final String TAG = "FriendListDataStorage";
    public static final String TIMESTAMP = "timestamp";
    public static final String UNREADCOUNT = "unreadcount";
    public static final String USEALIAS = "usealias";
    public static final String USERACTIVITY = "useractivity";
    public static final String USERACTIVITY_TIMESTAMP = "useractivity_timestamp";
    public static final String USERPIN = "userpin";
    public static final String USERPROFILE = "userprofile";
    public static final String USERSET_FRIENDPROFILE = "usersetfriendprofile";
    public static final String USER_PROFILE_TABLE_NAME = "user_profile";
    private static SQLiteDatabase mCatfishDataStorageDB = null;
    private static DatabaseHelper mDBHelper = null;
    private Context mContext;
    private PoolDataStorage pds = null;

    class DatabaseHelper extends SQLiteOpenHelper {
        private static final String DATABASE_NAME = "catfiz_friendlist.db";
        private static final int DATABASE_VERSION = 11;
        private Context mContext = null;

        public DatabaseHelper(Context context) {
            super(context, DATABASE_NAME, null, DATABASE_VERSION);
            this.mContext = context;
        }

        private boolean addFirstOfficial(SQLiteDatabase sQLiteDatabase) {
            ContentValues contentValues = new ContentValues();
            contentValues = new ContentValues();
            contentValues.put(FriendListDataStorage.FRIENDPIN, CatfishService.OFFICIAL_PIN);
            contentValues.put(FriendListDataStorage.LASTACTIVITY, Long.valueOf(System.currentTimeMillis()));
            contentValues.put(FriendListDataStorage.LASTCHATACTIVITY, Long.valueOf(System.currentTimeMillis()));
            contentValues.put(FriendListDataStorage.FRIENDNAME, CatfishService.OFFICIAL_NAME);
            contentValues.put(FriendListDataStorage.LASTMESSAGE, CatfishService.OFFICIAL_MESSAGE);
            contentValues.put(FriendListDataStorage.LASTDELIVERYSTATUS, Integer.valueOf(MessageDeliveryStatus.RECEIVED.ordinal()));
            contentValues.put(FriendListDataStorage.LASTMESSAGETYPE, Integer.valueOf(MessageType.MESSAGE.ordinal()));
            return sQLiteDatabase.insert(FriendListDataStorage.OFFICIAL_TABLE_NAME, null, contentValues) != -1;
        }

        private void buildFriendListTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS friendlist(_id INTEGER PRIMARY KEY,friendpin VARCHAR(10),friendname VARCHAR(255),friendalias VARCHAR(255),usealias INTEGER NOT NULL DEFAULT 0,status TEXT,statusseq INTEGER NOT NULL DEFAULT 0,photoavailable INTEGER NOT NULL DEFAULT 0,photofilename TEXT,haveunread INTEGER NOT NULL DEFAULT 0,hvunreadstatcomm INTEGER NOT NULL DEFAULT 0,lastactivity INTEGER NOT NULL DEFAULT 0,activitycount INTEGER NOT NULL DEFAULT 0,ignorepool VARCHAR(1),follow INTEGER NOT NULL DEFAULT 0,likestatus INTEGER NOT NULL DEFAULT 0,melikethis INTEGER NOT NULL DEFAULT 0,useractivity TEXT,useractivity_timestamp INTEGER NOT NULL DEFAULT 0,lastchatactivity INTEGER NOT NULL DEFAULT 0,laststatusupdate INTEGER NOT NULL DEFAULT 0,statusupdatemark INTEGER NOT NULL DEFAULT 0,photoupdatemark INTEGER NOT NULL DEFAULT 0,unreadcount INTEGER NOT NULL DEFAULT 0,lastmessage VARCHAR(255),lastmsgsequence INTEGER NOT NULL DEFAULT 0,lastfilepath VARCHAR(255),lastdeliverystatus INTEGER NOT NULL DEFAULT 0,lastmessagetype INTEGER NOT NULL DEFAULT 0,isblacklist INTEGER NOT NULL DEFAULT 0,UNIQUE (friendpin));");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS last_activity_idx ON friendlist(lastactivity DESC);");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS friendname_idx ON friendlist(friendname);");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS friendlistrequest_idx ON friendlist(haveunread, activitycount, lastactivity, hvunreadstatcomm);");
        }

        private void buildGroupContactTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS group_contact (_id INTEGER PRIMARY KEY,groupcontactname VARCHAR(20),groupfriendcount INTEGER NOT NULL DEFAULT 0);");
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS groupfriend_contact (_id INTEGER PRIMARY KEY,groupcontactid INTEGER NOT NULL DEFAULT 0,friendpin VARCHAR(10),friendname VARCHAR(255));");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS categorychild_idx ON groupfriend_contact(groupcontactid DESC);");
        }

        private void buildOfficialTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS officiallist(_id INTEGER PRIMARY KEY,friendpin VARCHAR(10),friendname VARCHAR(255),friendalias VARCHAR(255),usealias INTEGER NOT NULL DEFAULT 0,status TEXT,statusseq INTEGER NOT NULL DEFAULT 0,photoavailable INTEGER NOT NULL DEFAULT 0,photofilename TEXT,haveunread INTEGER NOT NULL DEFAULT 0,hvunreadstatcomm INTEGER NOT NULL DEFAULT 0,lastactivity INTEGER NOT NULL DEFAULT 0,activitycount INTEGER NOT NULL DEFAULT 0,ignorepool VARCHAR(1),follow INTEGER NOT NULL DEFAULT 0,likestatus INTEGER NOT NULL DEFAULT 0,melikethis INTEGER NOT NULL DEFAULT 0,useractivity TEXT,useractivity_timestamp INTEGER NOT NULL DEFAULT 0,lastchatactivity INTEGER NOT NULL DEFAULT 0,laststatusupdate INTEGER NOT NULL DEFAULT 0,statusupdatemark INTEGER NOT NULL DEFAULT 0,photoupdatemark INTEGER NOT NULL DEFAULT 0,unreadcount INTEGER NOT NULL DEFAULT 0,lastmessage VARCHAR(255),lastmsgsequence INTEGER NOT NULL DEFAULT 0,lastfilepath VARCHAR(255),lastdeliverystatus INTEGER NOT NULL DEFAULT 0,lastmessagetype INTEGER NOT NULL DEFAULT 0,isblacklist INTEGER NOT NULL DEFAULT 0,UNIQUE (friendpin));");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS last_activity_idx ON officiallist(lastactivity DESC);");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS friendname_idx ON officiallist(friendname);");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS friendlistrequest_idx ON officiallist(haveunread, activitycount, lastactivity, hvunreadstatcomm);");
        }

        private void buildPendingRequestTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS pendingreq (_id INTEGER PRIMARY KEY,recipient VARCHAR(10),recipientname VARCHAR(255),messagetype INTEGER NOT NULL DEFAULT 0,timestamp INTEGER NOT NULL DEFAULT 0,message TEXT,UNIQUE (recipient));");
        }

        private void buildRequestFriendTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS requestfriend (_id INTEGER PRIMARY KEY,senderpin VARCHAR(10),sendername VARCHAR(255),messagetype INTEGER NOT NULL DEFAULT 0,timestamp INTEGER NOT NULL DEFAULT 0,sequence INTEGER NOT NULL DEFAULT 0,message TEXT,UNIQUE (senderpin));");
        }

        private void buildUserProfileTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS user_profile (_id INTEGER PRIMARY KEY,userpin VARCHAR(10),userprofile TEXT,usersetfriendprofile TEXT);");
        }

        private void refreshCategoryFizz(SQLiteDatabase sQLiteDatabase) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(FriendListDataStorage.GROUPFRIENDCOUNT, Integer.valueOf(sQLiteDatabase.query(FriendListDataStorage.FRIENDLIST_TABLE_NAME, null, null, null, null, null, null).getCount()));
            sQLiteDatabase.update(FriendListDataStorage.GROUP_CONTACT_TABEL_NAME, contentValues, "_id ='1'", null);
        }

        public void onCreate(SQLiteDatabase sQLiteDatabase) {
            buildFriendListTable(sQLiteDatabase);
            buildGroupContactTable(sQLiteDatabase);
            buildRequestFriendTable(sQLiteDatabase);
            buildPendingRequestTable(sQLiteDatabase);
            buildUserProfileTable(sQLiteDatabase);
            buildOfficialTable(sQLiteDatabase);
            addFirstOfficial(sQLiteDatabase);
        }

        public void onUpgrade(SQLiteDatabase sQLiteDatabase, int i, int i2) {
            if (i <= 1) {
                buildRequestFriendTable(sQLiteDatabase);
                buildPendingRequestTable(sQLiteDatabase);
                buildUserProfileTable(sQLiteDatabase);
            }
            if (i <= 2) {
                sQLiteDatabase.execSQL("ALTER TABLE friendlist ADD COLUMN statusupdatemark INTEGER NOT NULL DEFAULT 0;");
                sQLiteDatabase.execSQL("ALTER TABLE friendlist ADD COLUMN photoupdatemark INTEGER NOT NULL DEFAULT 0;");
            }
            if (i <= 4) {
                sQLiteDatabase.execSQL("ALTER TABLE friendlist ADD COLUMN unreadcount INTEGER NOT NULL DEFAULT 0;");
                sQLiteDatabase.execSQL("ALTER TABLE friendlist ADD COLUMN lastmessage VARCHAR(255);");
                sQLiteDatabase.execSQL("ALTER TABLE friendlist ADD COLUMN lastdeliverystatus INTEGER NOT NULL DEFAULT 0;");
                sQLiteDatabase.execSQL("ALTER TABLE friendlist ADD COLUMN lastmessagetype INTEGER NOT NULL DEFAULT 0;");
            }
            if (i <= 5) {
                sQLiteDatabase.execSQL("ALTER TABLE friendlist ADD COLUMN lastfilepath VARCHAR(255);");
            }
            if (i <= 6) {
                sQLiteDatabase.execSQL("ALTER TABLE friendlist ADD COLUMN isblacklist INTEGER NOT NULL DEFAULT 0;");
            }
            if (i <= 8) {
                Log.d(FriendListDataStorage.TAG, "create table official");
                buildOfficialTable(sQLiteDatabase);
                addFirstOfficial(sQLiteDatabase);
            }
            if (i <= 9) {
                sQLiteDatabase.execSQL("ALTER TABLE friendlist ADD COLUMN lastmsgsequence INTEGER NOT NULL DEFAULT 0;");
                if (i == 9) {
                    sQLiteDatabase.execSQL("ALTER TABLE officiallist ADD COLUMN lastmsgsequence INTEGER NOT NULL DEFAULT 0;");
                }
            }
            if (i <= 10) {
                refreshCategoryFizz(sQLiteDatabase);
            }
        }
    }

    public FriendListDataStorage(Context context) {
        if (mDBHelper == null) {
            Log.d(TAG, "Create new DB Helper");
            mDBHelper = new DatabaseHelper(context);
        }
        this.mContext = context;
    }

    private int getLastMessageStatus(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return 0;
        }
        Cursor rawQuery = db.rawQuery("SELECT lastdeliverystatus FROM friendlist WHERE friendpin = '" + str + "';", null);
        if (!rawQuery.moveToFirst()) {
            return 0;
        }
        int i = rawQuery.getInt(rawQuery.getColumnIndex(LASTDELIVERYSTATUS));
        rawQuery.close();
        return i;
    }

    private void refreshCategoryFizz() {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(GROUPFRIENDCOUNT, Integer.valueOf(db.query(FRIENDLIST_TABLE_NAME, null, null, null, null, null, null).getCount()));
            db.update(GROUP_CONTACT_TABEL_NAME, contentValues, "_id ='1'", null);
        }
    }

    public boolean addFirstOfficial() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues = new ContentValues();
        contentValues.put(FRIENDPIN, CatfishService.OFFICIAL_PIN);
        contentValues.put(LASTACTIVITY, Long.valueOf(System.currentTimeMillis()));
        contentValues.put(LASTCHATACTIVITY, Long.valueOf(System.currentTimeMillis()));
        contentValues.put(FRIENDNAME, CatfishService.OFFICIAL_NAME);
        contentValues.put(LASTMESSAGE, CatfishService.OFFICIAL_MESSAGE);
        contentValues.put(LASTDELIVERYSTATUS, Integer.valueOf(MessageDeliveryStatus.RECEIVED.ordinal()));
        contentValues.put(LASTMESSAGETYPE, Integer.valueOf(MessageType.MESSAGE.ordinal()));
        return db.insert(OFFICIAL_TABLE_NAME, null, contentValues) != -1;
    }

    public boolean addNewContactCategory(String str, boolean z, String str2) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(GROUPCONTACTNAME, str);
        long insert = z ? db.insert(GROUP_CONTACT_TABEL_NAME, null, contentValues) : (long) db.update(GROUP_CONTACT_TABEL_NAME, contentValues, "_id ='" + str2 + "'", null);
        contentValues.clear();
        return insert > 0;
    }

    public boolean addNewFriend(CatfishMessageObject catfishMessageObject) {
        if (isSenderAFriend(catfishMessageObject)) {
            return false;
        }
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        if (!isGroupFriendTabelEmpty()) {
            Cursor query = db.query(GROUP_CONTACT_TABEL_NAME, null, null, null, null, null, null);
            query.moveToFirst();
            int i = query.getInt(query.getColumnIndex(GROUPFRIENDCOUNT));
            query.close();
            contentValues.put(GROUPFRIENDCOUNT, Integer.valueOf(i + 1));
            db.update(GROUP_CONTACT_TABEL_NAME, contentValues, "_id = 1", null);
            contentValues.clear();
            contentValues.put(GROUPCONTACTID, Integer.valueOf(1));
            contentValues.put(FRIENDPIN, catfishMessageObject.senderpin);
            db.insert(GROUP_CHILD_CONTACT_TABEL_NAME, null, contentValues);
            contentValues.clear();
        }
        ContentValues contentValues2 = new ContentValues();
        contentValues2.put(FRIENDPIN, catfishMessageObject.senderpin);
        contentValues2.put(LASTACTIVITY, Long.valueOf(catfishMessageObject.rcvtimestamp));
        long insert = db.insert(FRIENDLIST_TABLE_NAME, null, contentValues2);
        refreshCategoryFizz();
        return insert != -1;
    }

    public boolean addNewFriendRequest(CatfishMessageObject catfishMessageObject) {
        if (isFriendRequestExists(catfishMessageObject)) {
            return false;
        }
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(SENDERPIN, catfishMessageObject.senderpin);
        contentValues.put(MESSAGETYPE, Integer.valueOf(catfishMessageObject.messagetype.ordinal()));
        contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
        contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.sequence));
        contentValues.put(MESSAGE, catfishMessageObject.message);
        return db.insert(REQUESTFRIEND_TABLE_NAME, null, contentValues) != -1;
    }

    public boolean addNewOfficial(String str, String str2) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues = new ContentValues();
        contentValues.put(FRIENDPIN, str);
        contentValues.put(FRIENDNAME, str2);
        contentValues.put(LASTACTIVITY, Long.valueOf(System.currentTimeMillis()));
        contentValues.put(LASTCHATACTIVITY, Long.valueOf(System.currentTimeMillis()));
        return db.insert(OFFICIAL_TABLE_NAME, null, contentValues) != -1;
    }

    public boolean addPendingRequest(CatfishMessageObject catfishMessageObject) {
        if (isPendingReqExists(catfishMessageObject)) {
            return false;
        }
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(RECIPIENT, catfishMessageObject.recipient);
        contentValues.put(MESSAGETYPE, Integer.valueOf(catfishMessageObject.messagetype.ordinal()));
        contentValues.put(TIMESTAMP, Long.valueOf(System.currentTimeMillis()));
        contentValues.put(MESSAGE, catfishMessageObject.message);
        long insert = db.insert(PENDINGREQUEST_TABLE_NAME, null, contentValues);
        contentValues.clear();
        return insert != -1;
    }

    public boolean addRecipientAsNewFriend(CatfishMessageObject catfishMessageObject) {
        if (isRecipientAFriend(catfishMessageObject)) {
            return false;
        }
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        if (!isGroupFriendTabelEmpty()) {
            Cursor query = db.query(GROUP_CONTACT_TABEL_NAME, null, null, null, null, null, null);
            query.moveToFirst();
            int i = query.getInt(query.getColumnIndex(GROUPFRIENDCOUNT));
            query.close();
            contentValues.put(GROUPFRIENDCOUNT, Integer.valueOf(i + 1));
            db.update(GROUP_CONTACT_TABEL_NAME, contentValues, "_id = 1", null);
            contentValues.clear();
            contentValues.put(GROUPCONTACTID, Integer.valueOf(1));
            contentValues.put(FRIENDPIN, catfishMessageObject.recipient);
            Log.d(TAG, "@@@@@@@@@@ username" + catfishMessageObject.username);
            if (catfishMessageObject.username != null) {
                contentValues.put(FRIENDNAME, catfishMessageObject.username);
            }
            db.insert(GROUP_CHILD_CONTACT_TABEL_NAME, null, contentValues);
        }
        contentValues.clear();
        ContentValues contentValues2 = new ContentValues();
        contentValues2.put(FRIENDPIN, catfishMessageObject.recipient);
        contentValues2.put(LASTACTIVITY, Long.valueOf(catfishMessageObject.rcvtimestamp));
        contentValues2.put(STATUSSEQ, Long.valueOf(catfishMessageObject.object_sequence));
        if (!isGroupFriendTabelEmpty()) {
            contentValues2.put(ACTIVITYCOUNT, Integer.valueOf(HttpStatus.SC_MULTIPLE_CHOICES));
        }
        if (catfishMessageObject.username != null) {
            contentValues2.put(FRIENDNAME, catfishMessageObject.username);
            contentValues2.put(FRIENDALIAS, catfishMessageObject.username);
        }
        if (catfishMessageObject.userstatus != null) {
            contentValues2.put(STATUS, catfishMessageObject.userstatus);
        }
        long insert = db.insert(FRIENDLIST_TABLE_NAME, null, contentValues2);
        refreshCategoryFizz();
        return insert != -1;
    }

    public boolean addToCategory(int i, String str, String str2) {
        SQLiteDatabase db = getDB();
        Cursor query = db.query(GROUP_CHILD_CONTACT_TABEL_NAME, null, "friendpin ='" + str + "' AND " + GROUPCONTACTID + " ='" + i + "'", null, null, null, null);
        if (query.getCount() != 0) {
            query.close();
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(GROUPCONTACTID, Integer.valueOf(i));
        contentValues.put(FRIENDPIN, str);
        contentValues.put(FRIENDNAME, str2);
        db.insert(GROUP_CHILD_CONTACT_TABEL_NAME, null, contentValues);
        contentValues.clear();
        Cursor query2 = db.query(GROUP_CONTACT_TABEL_NAME, null, "_id = '" + i + "'", null, null, null, null);
        query2.moveToFirst();
        contentValues.put(GROUPFRIENDCOUNT, Integer.valueOf(query2.getInt(query2.getColumnIndex(GROUPFRIENDCOUNT)) + 1));
        db.update(GROUP_CONTACT_TABEL_NAME, contentValues, "_id ='" + i + "'", null);
        query.close();
        query2.close();
        refreshCategoryFizz();
        return true;
    }

    public void addUnreadMessage(String str) {
        SQLiteDatabase db = getDB();
        if (db != null) {
            db.execSQL("UPDATE friendlist SET unreadcount = unreadcount + 1 WHERE friendpin='" + str + "'");
            db.execSQL("UPDATE officiallist SET unreadcount = unreadcount + 1 WHERE friendpin='" + str + "'");
        }
    }

    public boolean createFizzGroupContact() {
        ContentValues contentValues;
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        Cursor query = db.query(FRIENDLIST_TABLE_NAME, null, null, null, null, null, null);
        ContentValues contentValues2 = new ContentValues();
        contentValues2.put(GROUPCONTACTNAME, this.mContext.getString(R.string.fizz));
        contentValues2.put(GROUPFRIENDCOUNT, Integer.valueOf(query.getCount()));
        db.insert(GROUP_CONTACT_TABEL_NAME, null, contentValues2);
        contentValues2.clear();
        db.delete(GROUP_CHILD_CONTACT_TABEL_NAME, null, null);
        ArrayList arrayList = new ArrayList();
        db.beginTransaction();
        int i = 0;
        while (i < query.getCount()) {
            try {
                query.moveToPosition(i);
                int columnIndex = query.getColumnIndex(FRIENDALIAS);
                int columnIndex2 = query.getColumnIndex(FRIENDPIN);
                contentValues = new ContentValues();
                try {
                    contentValues.put(GROUPCONTACTID, Integer.valueOf(1));
                    contentValues.put(FRIENDPIN, query.getString(columnIndex2));
                    contentValues.put(FRIENDNAME, query.getString(columnIndex));
                    Log.d(TAG, "-- name: " + query.getString(columnIndex));
                    if ((!arrayList.contains(query.getString(columnIndex2)) ? db.insert(GROUP_CHILD_CONTACT_TABEL_NAME, null, contentValues) : 0) <= 0) {
                        Log.d(TAG, "Failed to add friend " + query.getString(columnIndex2) + " to category");
                    } else {
                        arrayList.add(query.getString(columnIndex2));
                    }
                    i++;
                    contentValues2 = contentValues;
                } catch (Exception e) {
                    Exception e2 = e;
                }
            } catch (Exception e3) {
                e2 = e3;
                contentValues = contentValues2;
            }
        }
        db.setTransactionSuccessful();
        db.endTransaction();
        i = 0;
        if (i != 0) {
            db.delete(GROUP_CONTACT_TABEL_NAME, null, null);
            Toast.makeText(this.mContext, "Fail to create Contact Category, Try Againt", 0).show();
        }
        contentValues2.clear();
        query.close();
        arrayList.clear();
        return true;
        try {
            e2.printStackTrace();
            i = 1;
            contentValues2 = contentValues;
            if (i != 0) {
                db.delete(GROUP_CONTACT_TABEL_NAME, null, null);
                Toast.makeText(this.mContext, "Fail to create Contact Category, Try Againt", 0).show();
            }
            contentValues2.clear();
            query.close();
            arrayList.clear();
            return true;
        } finally {
            db.endTransaction();
        }
    }

    public boolean decreaseAllCountActivity() {
        int i = 0;
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        Cursor query = db.query(FRIENDLIST_TABLE_NAME, null, "haveunread <= 0 AND activitycount > 0", null, null, null, null);
        int count = query.getCount();
        db.beginTransaction();
        while (i < count) {
            try {
                query.moveToPosition(i);
                int i2 = query.getInt(query.getColumnIndex(ACTIVITYCOUNT));
                String string = query.getString(query.getColumnIndex(FRIENDPIN));
                if (i2 <= HttpStatus.SC_MULTIPLE_CHOICES) {
                    ContentValues contentValues = new ContentValues();
                    contentValues.put(ACTIVITYCOUNT, Integer.valueOf(i2 - 25));
                    db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin ='" + string + "'", null);
                }
                i++;
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                db.endTransaction();
            }
        }
        db.setTransactionSuccessful();
        db.endTransaction();
        query.close();
        return true;
    }

    public int deleteAllFriendRequest() {
        SQLiteDatabase db = getDB();
        return db == null ? 0 : db.delete(REQUESTFRIEND_TABLE_NAME, null, null);
    }

    public boolean deleteCategory(int i) {
        int delete;
        Exception e;
        SQLiteDatabase db = getDB();
        db.beginTransaction();
        try {
            Cursor query = db.query(GROUP_CHILD_CONTACT_TABEL_NAME, null, "groupcontactid ='" + i + "'", null, null, null, null);
            int count = query.getCount();
            if (count > 0) {
                for (int i2 = 0; i2 < count; i2++) {
                    query.moveToPosition(i2);
                    String string = query.getString(query.getColumnIndex(FRIENDPIN));
                    Cursor query2 = db.query(GROUP_CHILD_CONTACT_TABEL_NAME, null, "friendpin ='" + string + "'", null, null, null, null);
                    if (query2.getCount() <= 1) {
                        Log.d(TAG, "pin single:" + string);
                        ContentValues contentValues = new ContentValues();
                        contentValues.put(GROUPCONTACTID, Integer.valueOf(1));
                        db.update(GROUP_CHILD_CONTACT_TABEL_NAME, contentValues, "friendpin = '" + string + "'", null);
                    } else {
                        Log.d(TAG, "pin double:" + string);
                        db.delete(GROUP_CHILD_CONTACT_TABEL_NAME, "groupcontactid ='" + i + "'", null);
                    }
                    query2.close();
                }
            }
            delete = db.delete(GROUP_CONTACT_TABEL_NAME, "_id ='" + i + "'", null);
            try {
                query.close();
                db.setTransactionSuccessful();
                db.endTransaction();
            } catch (Exception e2) {
                e = e2;
                try {
                    e.printStackTrace();
                    return delete > 0;
                } finally {
                    db.endTransaction();
                }
            }
        } catch (Exception e3) {
            e = e3;
            delete = 0;
            e.printStackTrace();
            if (delete > 0) {
            }
        }
        if (delete > 0) {
        }
    }

    public int deleteFriendFromCategory(int i) {
        SQLiteDatabase db = getDB();
        Log.d(TAG, "id tabel" + i);
        Cursor query = db.query(GROUP_CHILD_CONTACT_TABEL_NAME, null, "_id ='" + i + "'", null, null, null, null);
        query.moveToFirst();
        int i2 = query.getInt(query.getColumnIndex(GROUPCONTACTID));
        query.getString(query.getColumnIndex(FRIENDPIN));
        db.delete(GROUP_CHILD_CONTACT_TABEL_NAME, "_id ='" + i + "'", null);
        ContentValues contentValues = new ContentValues();
        Cursor query2 = db.query(GROUP_CONTACT_TABEL_NAME, null, "_id = '" + i2 + "'", null, null, null, null);
        query2.moveToFirst();
        contentValues.put(GROUPFRIENDCOUNT, Integer.valueOf(query2.getInt(query2.getColumnIndex(GROUPFRIENDCOUNT)) - 1));
        db.update(GROUP_CONTACT_TABEL_NAME, contentValues, "_id ='" + i2 + "'", null);
        contentValues.clear();
        query2.close();
        query.close();
        refreshCategoryFizz();
        return i2;
    }

    public int deleteFriendFromCategory(int i, String str) {
        SQLiteDatabase db = getDB();
        db.delete(GROUP_CHILD_CONTACT_TABEL_NAME, "friendpin ='" + str + "' AND " + GROUPCONTACTID + " ='" + i + "'", null);
        ContentValues contentValues = new ContentValues();
        Cursor query = db.query(GROUP_CONTACT_TABEL_NAME, null, "_id = '" + i + "'", null, null, null, null);
        query.moveToFirst();
        contentValues.put(GROUPFRIENDCOUNT, Integer.valueOf(query.getInt(query.getColumnIndex(GROUPFRIENDCOUNT)) - 1));
        db.update(GROUP_CONTACT_TABEL_NAME, contentValues, "_id ='" + i + "'", null);
        contentValues.clear();
        query.close();
        refreshCategoryFizz();
        return i;
    }

    public int deleteFriendRequest(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return 0;
        }
        return db.delete(REQUESTFRIEND_TABLE_NAME, "senderpin='" + catfishMessageObject.senderpin + "'", null);
    }

    public boolean deleteOfficial(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        if (db.delete(OFFICIAL_TABLE_NAME, "FRIENDPIN = \"" + str + "\"", null) == -1) {
            Log.d(TAG, "FAIL TO DELETE OFFICIAL: " + str);
            return false;
        }
        Log.d(TAG, "OFFICIAL: " + str + ": DELETED");
        return true;
    }

    public int deletePendingRequest(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return 0;
        }
        return db.delete(PENDINGREQUEST_TABLE_NAME, "recipient='" + catfishMessageObject.recipient + "'", null);
    }

    public boolean deleteRecipientFromFriend(CatfishMessageObject catfishMessageObject) {
        int i = 0;
        if (isRecipientAFriend(catfishMessageObject)) {
            SQLiteDatabase db = getDB();
            if (db == null) {
                return false;
            }
            db.beginTransaction();
            try {
                Cursor query = db.query(GROUP_CHILD_CONTACT_TABEL_NAME, null, "friendpin = '" + catfishMessageObject.recipient + "'", null, null, null, null);
                int count = query.getCount();
                while (i < count) {
                    query.moveToPosition(i);
                    int i2 = query.getInt(query.getColumnIndex(GROUPCONTACTID));
                    Cursor query2 = db.query(GROUP_CONTACT_TABEL_NAME, null, "_id = " + i2, null, null, null, null);
                    query2.moveToFirst();
                    ContentValues contentValues = new ContentValues();
                    if (query2.getCount() > 0 && query2.getColumnIndex(GROUPFRIENDCOUNT) >= 0) {
                        int i3 = query2.getInt(query2.getColumnIndex(GROUPFRIENDCOUNT));
                        Log.d(TAG, "countnya :" + i3);
                        contentValues.put(GROUPFRIENDCOUNT, Integer.valueOf(i3 - 1));
                        db.update(GROUP_CONTACT_TABEL_NAME, contentValues, "_id = " + i2, null);
                    }
                    contentValues.clear();
                    query2.close();
                    i++;
                }
                query.close();
                db.delete(GROUP_CHILD_CONTACT_TABEL_NAME, "friendpin ='" + catfishMessageObject.recipient + "'", null);
                if (db.delete(FRIENDLIST_TABLE_NAME, "FRIENDPIN = \"" + catfishMessageObject.recipient + "\"", null) <= 0) {
                    Log.e(TAG, "---DATASTORAGE: FAIL TO DELETE " + catfishMessageObject.recipient);
                }
                if (CatfishService.getUserPIN().compareTo(catfishMessageObject.recipient) != 0 && db.delete(USER_PROFILE_TABLE_NAME, "userpin = '" + catfishMessageObject.recipient + "'", null) <= 0) {
                    Log.e(TAG, "---DATASTORAGE: FAIL TO DELETE " + catfishMessageObject.recipient + " USER PROFILE");
                }
                refreshCategoryFizz();
                db.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                db.endTransaction();
            }
            return true;
        }
        Log.d(TAG, "DELETE -RECIPIENT " + catfishMessageObject.recipient + " NOT FRIEND");
        return false;
    }

    public int deleteRecipientFromFriendRequest(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return 0;
        }
        return db.delete(REQUESTFRIEND_TABLE_NAME, "senderpin='" + catfishMessageObject.recipient + "'", null);
    }

    public boolean deleteSenderFromFriend(CatfishMessageObject catfishMessageObject) {
        int i = 0;
        if (!isSenderAFriend(catfishMessageObject)) {
            return false;
        }
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        db.beginTransaction();
        try {
            Cursor query = db.query(GROUP_CHILD_CONTACT_TABEL_NAME, null, "friendpin = '" + catfishMessageObject.senderpin + "'", null, null, null, null);
            int count = query.getCount();
            while (i < count) {
                query.moveToPosition(i);
                int i2 = query.getInt(query.getColumnIndex(GROUPCONTACTID));
                Cursor query2 = db.query(GROUP_CONTACT_TABEL_NAME, null, "_id = " + i2, null, null, null, null);
                query2.moveToFirst();
                ContentValues contentValues = new ContentValues();
                int i3 = query2.getInt(query2.getColumnIndex(GROUPFRIENDCOUNT));
                Log.d(TAG, "countnya :" + i3);
                contentValues.put(GROUPFRIENDCOUNT, Integer.valueOf(i3 - 1));
                db.update(GROUP_CONTACT_TABEL_NAME, contentValues, "_id = " + i2, null);
                contentValues.clear();
                query2.close();
                i++;
            }
            query.close();
            db.delete(GROUP_CHILD_CONTACT_TABEL_NAME, "friendpin ='" + catfishMessageObject.senderpin + "'", null);
            if (db.delete(FRIENDLIST_TABLE_NAME, "FRIENDPIN = \"" + catfishMessageObject.senderpin + "\"", null) <= 0) {
                Log.e(TAG, "---DATASTORAGE: FAIL TO DELETE " + catfishMessageObject.senderpin);
            }
            if (db.delete(USER_PROFILE_TABLE_NAME, "userpin = '" + catfishMessageObject.recipient + "'", null) <= 0) {
                Log.e(TAG, "---DATASTORAGE: FAIL TO DELETE " + catfishMessageObject.recipient + " USER PROFILE");
            }
            db.setTransactionSuccessful();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            db.endTransaction();
        }
        refreshCategoryFizz();
        return true;
    }

    public int deleteSenderFromPendingRequest(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return 0;
        }
        return db.delete(PENDINGREQUEST_TABLE_NAME, "recipient='" + catfishMessageObject.senderpin + "'", null);
    }

    public Cursor getActiveChat() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(FRIENDLIST_TABLE_NAME, null, "lastchatactivity > 0", null, null, null, "lastchatactivity DESC", null);
    }

    public Cursor getActiveFriendChat() {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.query(FRIENDLIST_TABLE_NAME, null, "activitycount > 200 OR haveunread > 0 OR hvunreadstatcomm > 0 ", null, null, null, null);
    }

    public Cursor getAllContacts() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(FRIENDLIST_TABLE_NAME, null, null, null, null, null, "UPPER(friendalias)");
    }

    public Cursor getAllFriendRequest() {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.query(REQUESTFRIEND_TABLE_NAME, null, null, null, null, null, null);
    }

    public Cursor getAllFriends() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        CatfishService.getCatfishPreferences().getInt("list_friendlist", 0);
        return db.query(FRIENDLIST_TABLE_NAME, null, "isblacklist=0", null, null, null, "friendname COLLATE NOCASE");
    }

    public Cursor getAllFriendsCategoryWHLimit() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(FRIENDLIST_TABLE_NAME, null, null, null, null, null, "friendname COLLATE NOCASE ASC");
    }

    public Cursor getAllFriendsForFriendlist() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        String str = CatfishService.getCatfishPreferences().getInt("list_friendlist", 0) == 0 ? "haveunread DESC, lastchatactivity DESC, laststatusupdate DESC" : "lastactivity DESC";
        String string = PreferenceManager.getDefaultSharedPreferences(this.mContext).getString("limitFriendList", "4");
        r7 = string.equals("1") ? str + " LIMIT 50" : string.equals("2") ? str + " LIMIT 100" : string.equals("3") ? str + " LIMIT 150" : str;
        return db.query(FRIENDLIST_TABLE_NAME, null, "isblacklist=0", null, null, null, r7);
    }

    public Cursor getAllFriendsWHLimit() {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.query(FRIENDLIST_TABLE_NAME, null, null, null, null, null, null);
    }

    public Cursor getAllPendingRequest() {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.query(PENDINGREQUEST_TABLE_NAME, null, null, null, null, null, null);
    }

    public Cursor getContactInfoList(String[] strArr) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        String str = "";
        String[] strArr2 = new String[]{FRIENDPIN, FRIENDNAME};
        int length = strArr.length;
        int i = 0;
        int i2 = 0;
        while (i < length) {
            String str2 = strArr[i];
            str2 = i2 == 0 ? str + "(friendpin = '" + str2 + "'" + ")" : str + " OR (friendpin = '" + str2 + "'" + ")";
            i2++;
            i++;
            str = str2;
        }
        Log.d(TAG, "SELECTIONS = " + str);
        return db.query(FRIENDLIST_TABLE_NAME, strArr2, str, null, null, null, null);
    }

    public Cursor getContactsLike(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(FRIENDLIST_TABLE_NAME, null, "friendalias LIKE '%" + str.replace("'", "''") + "%'", null, null, null, "UPPER(friendalias)");
    }

    public SQLiteDatabase getDB() {
        try {
            mCatfishDataStorageDB = mDBHelper.getWritableDatabase();
            return mCatfishDataStorageDB;
        } catch (SQLiteException e) {
            e.printStackTrace();
            Log.e(TAG, "FATAL ERROR IN DB: " + e.toString());
            System.exit(0);
            return null;
        } catch (Exception e2) {
            e2.printStackTrace();
            Log.e(TAG, "FATAL ERROR IN DB: " + e2.toString());
            System.exit(0);
            return null;
        }
    }

    public Cursor getFriend(String str) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.query(FRIENDLIST_TABLE_NAME, null, "friendpin='" + str + "'", null, null, null, null);
    }

    public String getFriendAlias(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        Cursor rawQuery = db.rawQuery("SELECT friendalias FROM friendlist WHERE friendpin = '" + str + "';", null);
        if (rawQuery.getCount() <= 0) {
            rawQuery.close();
            Cursor rawQuery2 = db.rawQuery("SELECT friendname FROM friendlist WHERE friendpin = '" + str + "';", null);
            if (rawQuery2.getCount() <= 0) {
                rawQuery2.close();
                return null;
            }
            rawQuery2.moveToFirst();
            String string = rawQuery2.getString(rawQuery2.getColumnIndex(FRIENDNAME));
            rawQuery2.close();
            return string;
        }
        rawQuery.moveToFirst();
        string = rawQuery.getString(rawQuery.getColumnIndex(FRIENDALIAS));
        rawQuery.close();
        return string;
    }

    public int getFriendCount() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return 0;
        }
        Cursor query = db.query(FRIENDLIST_TABLE_NAME, null, null, null, null, null, null);
        int count = query.getCount();
        query.close();
        return count;
    }

    public Cursor getFriendListNeedPhotoUpdate() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(FRIENDLIST_TABLE_NAME, null, "photoupdatemark = 1", null, null, null, null, "10");
    }

    public Cursor getFriendListNeedStatusUpdate() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(FRIENDLIST_TABLE_NAME, null, "statusupdatemark = 1", null, null, null, null, "10");
    }

    public Cursor getFriendPINs() {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT friendpin FROM friendlist;", null);
    }

    public String getFriendStatus(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        Cursor rawQuery = db.rawQuery("SELECT status FROM friendlist WHERE friendpin = '" + str + "';", null);
        if (rawQuery.getCount() <= 0) {
            rawQuery.close();
            return null;
        }
        rawQuery.moveToFirst();
        String string = rawQuery.getString(rawQuery.getColumnIndex(STATUS));
        rawQuery.close();
        return string;
    }

    public long getFriendStatusSequence(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return 0;
        }
        Cursor rawQuery = db.rawQuery("SELECT statusseq FROM friendlist WHERE friendpin = '" + str + "';", null);
        if (rawQuery.getCount() <= 0) {
            rawQuery.close();
            return 0;
        }
        rawQuery.moveToFirst();
        long j = rawQuery.getLong(rawQuery.getColumnIndex(STATUSSEQ));
        rawQuery.close();
        return j;
    }

    public String getFriendname(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        Cursor rawQuery = db.rawQuery("SELECT friendname FROM friendlist WHERE friendpin = '" + str + "';", null);
        if (rawQuery.getCount() <= 0) {
            rawQuery.close();
            return null;
        }
        rawQuery.moveToFirst();
        String string = rawQuery.getString(rawQuery.getColumnIndex(FRIENDNAME));
        rawQuery.close();
        return string;
    }

    public Cursor getGroupContact(boolean z, String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        Cursor query;
        if (z) {
            query = db.query(GROUP_CONTACT_TABEL_NAME, null, null, null, null, null, null);
        } else {
            Log.d(TAG, "idnya:" + str);
            query = db.query(GROUP_CHILD_CONTACT_TABEL_NAME, null, "groupcontactid = " + str, null, null, null, "friendname COLLATE NOCASE ASC ");
        }
        return query;
    }

    public Cursor getGroupContactLike(String str, String str2) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        Log.d(TAG, "idnya:" + str + " and like:" + str2 + "@");
        Cursor query = db.query(GROUP_CHILD_CONTACT_TABEL_NAME, null, "groupcontactid = " + str + " AND " + FRIENDNAME + " LIKE '%" + str2 + "%'", null, null, null, "friendname COLLATE NOCASE ASC ");
        Log.d(TAG, "jumlah count di cursor" + query.getCount());
        return query;
    }

    public int getLIkeCount(CatfishMessageObject catfishMessageObject) {
        int i = 0;
        SQLiteDatabase db = getDB();
        if (db != null) {
            Cursor rawQuery = db.rawQuery("SELECT likestatus FROM friendlist WHERE friendpin ='" + catfishMessageObject.recipient + "' AND " + STATUSSEQ + " ='" + catfishMessageObject.object_sequence + "'", null);
            if (rawQuery.getCount() > 0) {
                rawQuery.moveToFirst();
                i = rawQuery.getInt(rawQuery.getColumnIndex(LIKESTATUS));
            }
            rawQuery.close();
        }
        return i;
    }

    public long getLastChatActivity(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return 0;
        }
        Cursor query = db.query(FRIENDLIST_TABLE_NAME, null, "friendpin='" + str + "'", null, null, null, null);
        query.moveToFirst();
        return query.getCount() <= 0 ? 0 : (long) query.getInt(query.getColumnIndex(LASTCHATACTIVITY));
    }

    public int getLastGroupId() {
        Cursor query = getDB().query(GROUP_CHILD_CONTACT_TABEL_NAME, null, " _id = MAX(_id) ", null, null, null, null);
        query.moveToFirst();
        return query.getInt(query.getColumnIndex("_id"));
    }

    public Cursor getMyProfile(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(USER_PROFILE_TABLE_NAME, null, "userpin = '" + catfishMessageObject.userpin + "'", null, null, null, null);
    }

    public Cursor getOfficials() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(OFFICIAL_TABLE_NAME, null, "lastchatactivity > 0", null, null, null, "lastchatactivity DESC", null);
    }

    public Cursor getUserCategories(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(GROUP_CHILD_CONTACT_TABEL_NAME, null, "friendpin ='" + str + "'", null, null, null, null);
    }

    public boolean isDataExist(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        Cursor query = db.query(USER_PROFILE_TABLE_NAME, null, "userpin = '" + catfishMessageObject.userpin + "'", null, null, null, null);
        boolean z = query.getCount() > 0;
        query.close();
        return z;
    }

    public boolean isDataProfileMissing(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        Cursor query = db.query(USER_PROFILE_TABLE_NAME, null, "userpin ='" + str + "'", null, null, null, null);
        if (query.getCount() > 0) {
            Log.d(TAG, "Our data profile is exist");
            query.close();
            return false;
        }
        Log.d(TAG, "Our data profile is not exist");
        query.close();
        return true;
    }

    public boolean isFriendRequestExists(CatfishMessageObject catfishMessageObject) {
        boolean z = false;
        SQLiteDatabase db = getDB();
        if (db != null) {
            Cursor rawQuery = db.rawQuery("SELECT senderpin FROM requestfriend WHERE senderpin = '" + catfishMessageObject.senderpin + "';", null);
            if (rawQuery.getCount() > 0) {
                z = true;
            }
            rawQuery.close();
        }
        return z;
    }

    public boolean isGroupFriendTabelEmpty() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        Cursor query = db.query(GROUP_CONTACT_TABEL_NAME, null, null, null, null, null, null);
        if (query.getCount() <= 0) {
            query.close();
            return true;
        }
        query.close();
        return false;
    }

    public boolean isHasUnreadMessages(String str) {
        boolean z = false;
        SQLiteDatabase db = getDB();
        if (db != null) {
            Cursor rawQuery = db.rawQuery("SELECT friendpin FROM friendlist WHERE friendpin = '" + str + "' AND " + "HAVEUNREAD != 0;", null);
            if (rawQuery.getCount() > 0) {
                z = true;
            }
            rawQuery.close();
        }
        return z;
    }

    public boolean isOfficialExists(String str) {
        boolean z = false;
        SQLiteDatabase db = getDB();
        if (db != null) {
            Cursor rawQuery = db.rawQuery("SELECT friendpin FROM officiallist WHERE friendpin = '" + str + "';", null);
            if (rawQuery.getCount() > 0) {
                z = true;
            }
            rawQuery.close();
        }
        return z;
    }

    public boolean isPendingReqExists(CatfishMessageObject catfishMessageObject) {
        boolean z = false;
        SQLiteDatabase db = getDB();
        if (db != null) {
            Cursor rawQuery = db.rawQuery("SELECT recipient FROM pendingreq WHERE recipient = '" + catfishMessageObject.recipient + "';", null);
            if (rawQuery.getCount() > 0) {
                z = true;
            }
            rawQuery.close();
        }
        return z;
    }

    public boolean isPinAFriend(String str) {
        boolean z = false;
        SQLiteDatabase db = getDB();
        if (!(db == null || str == null || str.equals(""))) {
            Cursor rawQuery = db.rawQuery("SELECT friendpin FROM friendlist WHERE friendpin = '" + str + "';", null);
            if (rawQuery.getCount() > 0) {
                z = true;
            }
            rawQuery.close();
        }
        return z;
    }

    public boolean isRecipientAFriend(CatfishMessageObject catfishMessageObject) {
        boolean z = false;
        SQLiteDatabase db = getDB();
        if (db != null) {
            Cursor rawQuery = db.rawQuery("SELECT friendpin FROM friendlist WHERE friendpin = '" + catfishMessageObject.recipient + "';", null);
            if (rawQuery.getCount() > 0) {
                z = true;
            }
            rawQuery.close();
        }
        return z;
    }

    public boolean isSenderAFriend(CatfishMessageObject catfishMessageObject) {
        boolean z = false;
        SQLiteDatabase db = getDB();
        if (db != null) {
            Cursor rawQuery = db.rawQuery("SELECT friendpin FROM friendlist WHERE friendpin = '" + catfishMessageObject.senderpin + "';", null);
            if (rawQuery.getCount() > 0) {
                z = true;
            }
            rawQuery.close();
        }
        return z;
    }

    public boolean isSenderInPendingReq(CatfishMessageObject catfishMessageObject) {
        boolean z = false;
        SQLiteDatabase db = getDB();
        if (db != null) {
            Cursor rawQuery = db.rawQuery("SELECT recipient FROM pendingreq WHERE recipient = '" + catfishMessageObject.senderpin + "';", null);
            if (rawQuery.getCount() > 0) {
                z = true;
            }
            rawQuery.close();
        }
        return z;
    }

    public Cursor isThisOurFriend(String str) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.query(FRIENDLIST_TABLE_NAME, null, "friendpin ='" + str + "'", null, null, null, null);
    }

    public boolean isUseAlias(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        int i;
        Cursor query = db.query(FRIENDLIST_TABLE_NAME, null, "friendpin='" + str + "'", null, null, null, null);
        if (query.getCount() > 0) {
            query.moveToFirst();
            i = query.getInt(query.getColumnIndex(USEALIAS));
        } else {
            i = 0;
        }
        query.close();
        return i > 0;
    }

    public int moveToCategory(int i, int i2, String str) {
        int i3;
        SQLiteDatabase db = getDB();
        Cursor query = db.query(GROUP_CHILD_CONTACT_TABEL_NAME, null, "friendpin = '" + str + "' ", null, null, null, null);
        query.moveToFirst();
        int i4 = query.getInt(query.getColumnIndex(GROUPCONTACTID));
        Cursor query2 = db.query(GROUP_CHILD_CONTACT_TABEL_NAME, null, "friendpin ='" + str + "' AND " + GROUPCONTACTID + " ='" + i + "'", null, null, null, null);
        if (query2.getCount() != 0) {
            i3 = -99;
        } else {
            ContentValues contentValues = new ContentValues();
            Cursor rawQuery = db.rawQuery("SELECT COUNT(*) num FROM groupfriend_contact WHERE groupcontactid ='" + i4 + "'", null);
            rawQuery.moveToFirst();
            int i5 = rawQuery.getInt(rawQuery.getColumnIndex("num"));
            Log.d(TAG, "Jumlah child pada id:" + i4 + " sebelum dikurangi =" + i5 + " SELECT COUNT(*) FROM " + GROUP_CHILD_CONTACT_TABEL_NAME + " WHERE " + GROUPCONTACTID + " ='" + i4 + "'");
            contentValues.put(GROUPFRIENDCOUNT, Integer.valueOf(i5 - 1));
            db.update(GROUP_CONTACT_TABEL_NAME, contentValues, "_id ='" + i4 + "'", null);
            contentValues.clear();
            contentValues.put(GROUPCONTACTID, Integer.valueOf(i));
            db.update(GROUP_CHILD_CONTACT_TABEL_NAME, contentValues, "friendpin = '" + str + "' AND " + GROUPCONTACTID + " ='" + i4 + "'", null);
            contentValues.clear();
            rawQuery.close();
            rawQuery = db.rawQuery("SELECT COUNT(*) num FROM groupfriend_contact WHERE groupcontactid ='" + i + "'", null);
            rawQuery.moveToFirst();
            i5 = rawQuery.getInt(rawQuery.getColumnIndex("num"));
            Log.d(TAG, "Jumlah child pada id:" + i + " setelah move =" + i5);
            contentValues.put(GROUPFRIENDCOUNT, Integer.valueOf(i5));
            db.update(GROUP_CONTACT_TABEL_NAME, contentValues, "_id ='" + i + "'", null);
            contentValues.clear();
            rawQuery.close();
            query.close();
            i3 = i4;
        }
        query2.close();
        refreshCategoryFizz();
        return i3;
    }

    public boolean reduceActivityCount(String str, int i) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        long update;
        Log.d(TAG, "reduce ACTIVITY point:" + i);
        Cursor query = db.query(FRIENDLIST_TABLE_NAME, null, "friendpin = '" + str + "'", null, null, null, null);
        query.moveToFirst();
        if (query.getCount() > 0) {
            int i2 = query.getInt(query.getColumnIndex(ACTIVITYCOUNT));
            Log.d(TAG, "reduce ACTIVITY Count:" + i2);
            if (i2 < HttpStatus.SC_MULTIPLE_CHOICES) {
                i2 -= i;
                ContentValues contentValues = new ContentValues();
                Log.d(TAG, "reduced ACTIVITY Count:" + i2);
                contentValues.put(ACTIVITYCOUNT, Integer.valueOf(i2));
                update = (long) db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin='" + str + "'", null);
                Log.d(TAG, "reduce ACTIVITY point finish");
                query.close();
                return update <= 0;
            }
        }
        update = 0;
        Log.d(TAG, "reduce ACTIVITY point finish");
        query.close();
        if (update <= 0) {
        }
    }

    public boolean refreshContactCategory() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        int i;
        db.beginTransaction();
        try {
            int i2;
            db.delete(GROUP_CHILD_CONTACT_TABEL_NAME, "friendpin not in (select friendlist.friendpin from friendlist LEFT OUTER JOIN groupfriend_contact on groupfriend_contact.friendpin = friendlist.friendpin)", null);
            ContentValues contentValues = new ContentValues();
            Cursor rawQuery = db.rawQuery("select 1,friendpin,friendalias from friendlist where friendpin not in (select friendlist.friendpin from groupfriend_contact LEFT OUTER JOIN friendlist on groupfriend_contact.friendpin=friendlist.friendpin)", null);
            int columnIndex = rawQuery.getColumnIndex(FRIENDPIN);
            rawQuery.getColumnIndex(FRIENDALIAS);
            Log.d(TAG, "insert new record sejumlah:" + rawQuery.getCount() + " karena ada di friendlist tp tidak ada di groupcontactchild");
            int count = rawQuery.getCount();
            for (i2 = 0; i2 < count; i2++) {
                rawQuery.moveToPosition(i2);
                Log.d(TAG, "insert new record:friendpin");
                contentValues.put(GROUPCONTACTID, Integer.valueOf(1));
                contentValues.put(FRIENDPIN, rawQuery.getString(columnIndex));
                db.insert(GROUP_CHILD_CONTACT_TABEL_NAME, null, contentValues);
                contentValues.clear();
            }
            rawQuery.close();
            rawQuery = db.query(FRIENDLIST_TABLE_NAME, null, null, null, null, null, null);
            columnIndex = rawQuery.getColumnIndex(FRIENDPIN);
            count = rawQuery.getColumnIndex(FRIENDALIAS);
            int count2 = rawQuery.getCount();
            for (i2 = 0; i2 < count2; i2++) {
                rawQuery.moveToPosition(i2);
                contentValues.put(FRIENDNAME, rawQuery.getString(count));
                db.update(GROUP_CHILD_CONTACT_TABEL_NAME, contentValues, "friendpin = '" + rawQuery.getString(columnIndex) + "'", null);
                contentValues.clear();
            }
            rawQuery.close();
            rawQuery = db.rawQuery("SELECT groupcontactid, count(friendpin) jumlah FROM groupfriend_contact group by groupcontactid", null);
            columnIndex = rawQuery.getColumnIndex("jumlah");
            count = rawQuery.getColumnIndex(GROUPCONTACTID);
            count2 = rawQuery.getCount();
            for (i2 = 0; i2 < count2; i2++) {
                rawQuery.moveToPosition(i2);
                contentValues.put(GROUPFRIENDCOUNT, Integer.valueOf(rawQuery.getInt(columnIndex)));
                db.update(GROUP_CONTACT_TABEL_NAME, contentValues, " _id = " + rawQuery.getInt(count), null);
                contentValues.clear();
            }
            rawQuery.close();
            db.setTransactionSuccessful();
            refreshCategoryFizz();
            i = 0;
        } catch (Exception e) {
            e.printStackTrace();
            i = 1;
            if (i != 0) {
                Log.d(TAG, "--REBUILD CONTACT CATEGORI FAIL--");
            } else {
                this.mContext.getSharedPreferences(PREFERENCE_NAME, 0).edit().remove(REBUILD_CATEGORY).commit();
                Toast.makeText(this.mContext, R.string.rebuild_alert_finish, 1).show();
            }
            return true;
        } finally {
            db.endTransaction();
        }
        if (i != 0) {
            this.mContext.getSharedPreferences(PREFERENCE_NAME, 0).edit().remove(REBUILD_CATEGORY).commit();
            Toast.makeText(this.mContext, R.string.rebuild_alert_finish, 1).show();
        } else {
            Log.d(TAG, "--REBUILD CONTACT CATEGORI FAIL--");
        }
        return true;
    }

    public boolean resetChatActivity(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(ACTIVITYCOUNT, Integer.valueOf(100));
        contentValues.put(HAVEUNREAD, Integer.valueOf(0));
        db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin ='" + str + "'", null);
        return true;
    }

    public void resetUnreadMessage(String str) {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(UNREADCOUNT, Integer.valueOf(0));
            db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin='" + str + "'", null);
            db.update(OFFICIAL_TABLE_NAME, contentValues, "friendpin='" + str + "'", null);
        }
    }

    public void setBlackList(String str, boolean z) {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            if (z) {
                contentValues.put(ISBLACKLIST, Integer.valueOf(1));
            } else {
                contentValues.put(ISBLACKLIST, Integer.valueOf(0));
            }
            db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin='" + str + "'", null);
        }
    }

    public void setChatInactive(String str) {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(LASTCHATACTIVITY, Integer.valueOf(0));
            db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin='" + str + "'", null);
        }
    }

    public boolean setChildNameWithoutAlias(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        Cursor query = db.query(FRIENDLIST_TABLE_NAME, null, "friendpin = '" + str + "'", null, null, null, null);
        int columnIndex = query.getColumnIndex(FRIENDNAME);
        query.moveToFirst();
        ContentValues contentValues = new ContentValues();
        contentValues.put(FRIENDNAME, query.getString(columnIndex));
        db.update(GROUP_CHILD_CONTACT_TABEL_NAME, contentValues, "friendpin='" + str + "'", null);
        contentValues.clear();
        contentValues.put(FRIENDALIAS, query.getString(columnIndex));
        contentValues.put(USEALIAS, Integer.valueOf(0));
        db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin='" + str + "'", null);
        return true;
    }

    public boolean setFollow(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(FOLLOW, "1");
        return db.update(FRIENDLIST_TABLE_NAME, contentValues, new StringBuilder().append("friendpin='").append(str).append("'").toString(), null) > 0;
    }

    public boolean setFriendAlias(String str, String str2, int i) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        if (i > 0) {
            contentValues.put(FRIENDALIAS, str2);
        }
        contentValues.put(USEALIAS, Integer.valueOf(i));
        int update = db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin='" + str + "'", null);
        contentValues.clear();
        if (i > 0) {
            contentValues.put(FRIENDNAME, str2);
            db.update(GROUP_CHILD_CONTACT_TABEL_NAME, contentValues, "friendpin='" + str + "'", null);
        } else {
            setChildNameWithoutAlias(str);
        }
        return update > 0;
    }

    public boolean setFriendLastActivity(String str, long j) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        if (j == 0) {
            return false;
        }
        contentValues.put(LASTACTIVITY, Long.valueOf(j));
        return db.update(FRIENDLIST_TABLE_NAME, contentValues, new StringBuilder().append("friendpin='").append(str).append("'").toString(), null) > 0;
    }

    public void setLastMessage(String str, long j, String str2, int i, int i2, String str3) {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(LASTMESSAGESEQ, Long.valueOf(j));
            contentValues.put(LASTMESSAGE, str2);
            contentValues.put(LASTDELIVERYSTATUS, Integer.valueOf(i));
            contentValues.put(LASTMESSAGETYPE, Integer.valueOf(i2));
            contentValues.put(LASTFILEPATH, str3);
            db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin='" + str + "'", null);
        }
    }

    public void setLastMessage(boolean z, String str, long j, String str2, int i, int i2, String str3) {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(LASTMESSAGESEQ, Long.valueOf(j));
            contentValues.put(LASTMESSAGE, str2);
            if (z) {
                contentValues.put(LASTDELIVERYSTATUS, Integer.valueOf(MessageDeliveryStatus.QUEUEING.ordinal()));
            } else {
                contentValues.put(LASTDELIVERYSTATUS, Integer.valueOf(MessageDeliveryStatus.UNDEFINED.ordinal()));
            }
            contentValues.put(LASTMESSAGETYPE, Integer.valueOf(i2));
            contentValues.put(LASTFILEPATH, str3);
            db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin='" + str + "'", null);
        }
    }

    public void setLastMessageOfficial(String str, long j, String str2, int i, int i2, String str3) {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(LASTMESSAGESEQ, Long.valueOf(j));
            contentValues.put(LASTMESSAGE, str2);
            contentValues.put(LASTDELIVERYSTATUS, Integer.valueOf(MessageDeliveryStatus.UNDEFINED.ordinal()));
            contentValues.put(LASTMESSAGETYPE, Integer.valueOf(i2));
            contentValues.put(LASTFILEPATH, str3);
            db.update(OFFICIAL_TABLE_NAME, contentValues, "friendpin='" + str + "'", null);
        }
    }

    public void setLastMessageOfficialStatus(String str, int i) {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(LASTDELIVERYSTATUS, Integer.valueOf(i));
            db.update(OFFICIAL_TABLE_NAME, contentValues, "friendpin='" + str + "'", null);
        }
    }

    public void setLastMessageStatus(boolean z, String str, int i) {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            if (z && getLastMessageStatus(str) != MessageDeliveryStatus.UNDEFINED.ordinal()) {
                contentValues.put(LASTDELIVERYSTATUS, Integer.valueOf(i));
                db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin='" + str + "'", null);
            }
        }
    }

    public void setOfficialInactive(String str) {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(LASTCHATACTIVITY, Integer.valueOf(0));
            db.update(OFFICIAL_TABLE_NAME, contentValues, "friendpin='" + str + "'", null);
        }
    }

    public boolean setProfile(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(USERPROFILE, catfishMessageObject.data_json);
        return db.update(USER_PROFILE_TABLE_NAME, contentValues, new StringBuilder().append("userpin='").append(catfishMessageObject.userpin).append("'").toString(), null) > 0;
    }

    public boolean setProfileManualByUser(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(USERSET_FRIENDPROFILE, catfishMessageObject.data_json);
        return db.update(USER_PROFILE_TABLE_NAME, contentValues, new StringBuilder().append("userpin='").append(catfishMessageObject.userpin).append("'").toString(), null) > 0;
    }

    public boolean setUnReadMessageStatus(String str, int i, long j) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(HAVEUNREAD, Integer.valueOf(i));
        if (j != 0) {
            contentValues.put(LASTACTIVITY, Long.valueOf(j));
        }
        int update = db.update(OFFICIAL_TABLE_NAME, contentValues, "friendpin='" + str + "'", null) + db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin='" + str + "'", null);
        if (i == 0) {
            resetUnreadMessage(str);
        } else {
            addUnreadMessage(str);
        }
        return update > 0;
    }

    public boolean setUnReadStatCommStatus(String str, int i, long j) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(HAVEUNREADSTATCOMM, Integer.valueOf(i));
        Log.d(TAG, "setUnReadStatCommStatus");
        if (j != 0) {
            contentValues.put(LASTACTIVITY, Long.valueOf(j));
        }
        int update = db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin='" + str + "'", null);
        reduceActivityCount(str, 50);
        return update > 0;
    }

    public boolean setUnfollow(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(FOLLOW, "0");
        return db.update(FRIENDLIST_TABLE_NAME, contentValues, new StringBuilder().append("friendpin='").append(str).append("'").toString(), null) > 0;
    }

    public void setUpdateAllFriendMark() {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(STATUSUPDATEMARK, Integer.valueOf(1));
            contentValues.put(PHOTOUPDATEMARK, Integer.valueOf(1));
            db.update(FRIENDLIST_TABLE_NAME, contentValues, null, null);
        }
    }

    public void setUpdatePhotoMark(String str, int i) {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(PHOTOUPDATEMARK, Integer.valueOf(i));
            db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin = '" + str + "'", null);
        }
    }

    public void setUpdateStatusMark(String str, int i) {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(STATUSUPDATEMARK, Integer.valueOf(i));
            db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin = '" + str + "'", null);
        }
    }

    public boolean storeProfile(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(USERPIN, catfishMessageObject.userpin);
        contentValues.put(USERPROFILE, catfishMessageObject.data_json);
        long insert = db.insert(USER_PROFILE_TABLE_NAME, null, contentValues);
        if (insert <= 0) {
            Log.e(TAG, "stored profile: " + catfishMessageObject.data_json);
        }
        return insert > 0;
    }

    public boolean storeProfileManualByUser(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(USERPIN, catfishMessageObject.userpin);
        contentValues.put(USERSET_FRIENDPROFILE, catfishMessageObject.data_json);
        long insert = db.insert(USER_PROFILE_TABLE_NAME, null, contentValues);
        if (insert <= 0) {
            Log.e(TAG, "stored profile: " + catfishMessageObject.data_json);
        }
        return insert > 0;
    }

    public boolean updateActivityCount(String str, int i) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        Log.d(TAG, "friendpin:" + str + " point:" + i);
        if (i == 99) {
            i = 50;
        } else if (i < HttpStatus.SC_MULTIPLE_CHOICES) {
            Cursor query = db.query(FRIENDLIST_TABLE_NAME, null, "friendpin = '" + str + "'", null, null, null, null);
            query.moveToFirst();
            if (query.getCount() > 0) {
                int i2 = query.getInt(query.getColumnIndex(ACTIVITYCOUNT));
                Log.d(TAG, "count :" + i2);
                if (i2 > HttpStatus.SC_MULTIPLE_CHOICES) {
                    i = i2;
                }
            }
            Log.d(TAG, "count point:" + i);
            query.close();
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(ACTIVITYCOUNT, Integer.valueOf(i));
        return db.update(FRIENDLIST_TABLE_NAME, contentValues, new StringBuilder().append("friendpin='").append(str).append("'").toString(), null) > 0;
    }

    public boolean updateActivityCountAll(long j) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        Cursor query = db.query(FRIENDLIST_TABLE_NAME, null, "lastactivity <= '" + (j - 86400000) + "'", null, null, null, null);
        ContentValues contentValues = new ContentValues();
        int count = query.getCount();
        db.beginTransaction();
        int i = 0;
        int i2 = false;
        while (i < count) {
            try {
                query.moveToPosition(i);
                int i3 = query.getInt(query.getColumnIndex(ACTIVITYCOUNT));
                if (i3 <= HttpStatus.SC_MULTIPLE_CHOICES) {
                    i3 -= i3 / 4;
                    String string = query.getString(query.getColumnIndex(FRIENDPIN));
                    contentValues.put(ACTIVITYCOUNT, Integer.valueOf(i3));
                    i2 = db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin='" + string + "'", null);
                    contentValues.clear();
                }
                i++;
            } catch (Exception e) {
                Exception exception = e;
                i = i2;
                exception.printStackTrace();
                i2 = i;
            } finally {
                db.endTransaction();
            }
        }
        db.setTransactionSuccessful();
        db.endTransaction();
        if (i2 > 0) {
            Log.d(TAG, "---ActivityCount Out of date, decrease 25%---");
        }
        query.close();
        return i2 > 0;
    }

    public boolean updateAllFriendStatCommRead() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(HAVEUNREADSTATCOMM, Integer.valueOf(0));
        db.update(FRIENDLIST_TABLE_NAME, contentValues, null, null);
        return true;
    }

    public boolean updateAllFriendStatCommUnread() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(HAVEUNREADSTATCOMM, Integer.valueOf(0));
        contentValues.put(LIKESTATUS, Integer.valueOf(0));
        db.update(FRIENDLIST_TABLE_NAME, contentValues, null, null);
        return true;
    }

    public boolean updateDropPendingRequest(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(MESSAGETYPE, Integer.valueOf(MessageType.INVALID_REQUEST.ordinal()));
        return db.update(PENDINGREQUEST_TABLE_NAME, contentValues, new StringBuilder().append("recipient='").append(catfishMessageObject.recipient).append("'").toString(), null) > 0;
    }

    public boolean updateFriendDataProfile(CatfishMessageObject catfishMessageObject) {
        if (!new FriendListDataStorage(this.mContext).isSenderAFriend(catfishMessageObject) && CatfishService.getUserPIN().compareTo(catfishMessageObject.senderpin) != 0) {
            return false;
        }
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        long insert;
        Cursor query = db.query(USER_PROFILE_TABLE_NAME, null, "userpin='" + catfishMessageObject.senderpin + "'", null, null, null, null);
        ContentValues contentValues = new ContentValues();
        contentValues.put(USERPROFILE, catfishMessageObject.message);
        if (query.getCount() <= 0) {
            contentValues.put(USERPIN, catfishMessageObject.senderpin);
            insert = db.insert(USER_PROFILE_TABLE_NAME, null, contentValues);
        } else {
            insert = (long) db.update(USER_PROFILE_TABLE_NAME, contentValues, "userpin='" + catfishMessageObject.senderpin + "'", null);
        }
        query.close();
        return insert > 0;
    }

    public boolean updateFriendName(CatfishMessageObject catfishMessageObject) {
        if (!isSenderAFriend(catfishMessageObject)) {
            return false;
        }
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        Cursor query = db.query(FRIENDLIST_TABLE_NAME, null, "friendpin='" + catfishMessageObject.senderpin + "'", null, null, null, null);
        query.moveToFirst();
        int i = query.getInt(query.getColumnIndex(USEALIAS));
        query.close();
        ContentValues contentValues = new ContentValues();
        contentValues.put(FRIENDNAME, catfishMessageObject.message);
        if (i <= 0) {
            contentValues.put(FRIENDALIAS, catfishMessageObject.message);
        }
        int update = db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin='" + catfishMessageObject.senderpin + "'", null);
        this.pds = new PoolDataStorage(this.mContext);
        this.pds.updateFriendName(catfishMessageObject);
        if (i <= 0) {
            contentValues.clear();
            contentValues.put(FRIENDNAME, catfishMessageObject.message);
            db.update(GROUP_CHILD_CONTACT_TABEL_NAME, contentValues, "friendpin='" + catfishMessageObject.senderpin + "'", null);
        }
        return update > 0;
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean updateFriendProfile(com.catfiz.service.CatfishMessageObject r12) {
        /*
        r11 = this;
        r9 = 0;
        r2 = 0;
        r0 = r11.isSenderAFriend(r12);
        if (r0 != 0) goto L_0x0009;
    L_0x0008:
        return r9;
    L_0x0009:
        r0 = r11.getDB();
        if (r0 == 0) goto L_0x0008;
    L_0x000f:
        r10 = new android.content.ContentValues;
        r10.<init>();
        r1 = "friendname";
        r3 = r12.username;
        r10.put(r1, r3);
        r1 = r12.senderpin;
        r1 = r11.isUseAlias(r1);
        if (r1 != 0) goto L_0x0062;
    L_0x0023:
        r1 = "friendalias";
        r3 = r12.username;
        r10.put(r1, r3);
        r1 = "usealias";
        r3 = java.lang.Boolean.valueOf(r9);
        r10.put(r1, r3);
        r1 = new android.content.ContentValues;
        r1.<init>();
        r3 = "friendname";
        r4 = r12.username;
        r1.put(r3, r4);
        r3 = "groupfriend_contact";
        r4 = new java.lang.StringBuilder;
        r4.<init>();
        r5 = "friendpin='";
        r4 = r4.append(r5);
        r5 = r12.senderpin;
        r4 = r4.append(r5);
        r5 = "'";
        r4 = r4.append(r5);
        r4 = r4.toString();
        r0.update(r3, r1, r4, r2);
        r1.clear();
    L_0x0062:
        r8 = 150; // 0x96 float:2.1E-43 double:7.4E-322;
        r1 = "friendlist";
        r3 = new java.lang.StringBuilder;
        r3.<init>();
        r4 = "friendpin = '";
        r3 = r3.append(r4);
        r4 = r12.senderpin;
        r3 = r3.append(r4);
        r4 = "'";
        r3 = r3.append(r4);
        r3 = r3.toString();
        r4 = r2;
        r5 = r2;
        r6 = r2;
        r7 = r2;
        r3 = r0.query(r1, r2, r3, r4, r5, r6, r7);
        r3.moveToFirst();
        r1 = r3.getCount();
        if (r1 <= 0) goto L_0x0103;
    L_0x0092:
        r1 = "activitycount";
        r1 = r3.getColumnIndex(r1);
        r1 = r3.getInt(r1);
        if (r1 <= r8) goto L_0x0103;
    L_0x009e:
        r4 = "FriendListDataStorage";
        r5 = new java.lang.StringBuilder;
        r5.<init>();
        r6 = "count point:";
        r5 = r5.append(r6);
        r5 = r5.append(r1);
        r5 = r5.toString();
        com.catfiz.util.Log.d(r4, r5);
        r3.close();
        r3 = "status";
        r4 = r12.userstatus;
        r10.put(r3, r4);
        r3 = "statusseq";
        r4 = r12.object_sequence;
        r4 = java.lang.Long.valueOf(r4);
        r10.put(r3, r4);
        r3 = r11.isGroupFriendTabelEmpty();
        if (r3 != 0) goto L_0x00da;
    L_0x00d1:
        r3 = "activitycount";
        r1 = java.lang.Integer.valueOf(r1);
        r10.put(r3, r1);
    L_0x00da:
        r1 = "friendlist";
        r3 = new java.lang.StringBuilder;
        r3.<init>();
        r4 = "friendpin='";
        r3 = r3.append(r4);
        r4 = r12.senderpin;
        r3 = r3.append(r4);
        r4 = "'";
        r3 = r3.append(r4);
        r3 = r3.toString();
        r0 = r0.update(r1, r10, r3, r2);
        if (r0 <= 0) goto L_0x0101;
    L_0x00fd:
        r0 = 1;
    L_0x00fe:
        r9 = r0;
        goto L_0x0008;
    L_0x0101:
        r0 = r9;
        goto L_0x00fe;
    L_0x0103:
        r1 = r8;
        goto L_0x009e;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.catfiz.service.FriendListDataStorage.updateFriendProfile(com.catfiz.service.CatfishMessageObject):boolean");
    }

    public boolean updateFriendProfile(CatfishMessageObject catfishMessageObject, boolean z) {
        if (!isSenderAFriend(catfishMessageObject)) {
            return false;
        }
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(FRIENDNAME, catfishMessageObject.username);
        if (!z) {
            contentValues.put(FRIENDALIAS, catfishMessageObject.username);
            contentValues.put(USEALIAS, Boolean.valueOf(false));
        }
        contentValues.put(STATUS, catfishMessageObject.userstatus);
        contentValues.put(STATUSSEQ, Long.valueOf(catfishMessageObject.object_sequence));
        if (!isGroupFriendTabelEmpty()) {
            contentValues.put(ACTIVITYCOUNT, Integer.valueOf(150));
        }
        return db.update(FRIENDLIST_TABLE_NAME, contentValues, new StringBuilder().append("friendpin='").append(catfishMessageObject.senderpin).append("'").toString(), null) > 0;
    }

    public boolean updateFriendStatCommRead(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(HAVEUNREADSTATCOMM, Integer.valueOf(0));
        db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin ='" + str + "'", null);
        return true;
    }

    public boolean updateFriendStatus(CatfishMessageObject catfishMessageObject) {
        if (!isSenderAFriend(catfishMessageObject)) {
            return false;
        }
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(STATUS, catfishMessageObject.message);
        contentValues.put(STATUSSEQ, Long.valueOf(catfishMessageObject.object_sequence));
        contentValues.put(MELIKETHIS, Integer.valueOf(0));
        contentValues.put(LIKESTATUS, Integer.valueOf(0));
        return db.update(FRIENDLIST_TABLE_NAME, contentValues, new StringBuilder().append("friendpin='").append(catfishMessageObject.senderpin).append("'").toString(), null) > 0;
    }

    public boolean updateFriendStatusSeq(String str, long j) {
        if (!isPinAFriend(str)) {
            return false;
        }
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(STATUSSEQ, Long.valueOf(j));
        return db.update(FRIENDLIST_TABLE_NAME, contentValues, new StringBuilder().append("friendpin='").append(str).append("'").toString(), null) > 0;
    }

    public boolean updateFriendUserActivity(CatfishMessageObject catfishMessageObject) {
        if (!isSenderAFriend(catfishMessageObject)) {
            return false;
        }
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        long insert;
        Cursor query = db.query(FRIENDLIST_TABLE_NAME, null, "friendpin='" + catfishMessageObject.senderpin + "'", null, null, null, null);
        ContentValues contentValues = new ContentValues();
        contentValues.put(USERACTIVITY, catfishMessageObject.message);
        if (query.getCount() <= 0) {
            contentValues.put(USERACTIVITY_TIMESTAMP, Long.valueOf(System.currentTimeMillis()));
            insert = db.insert(FRIENDLIST_TABLE_NAME, null, contentValues);
        } else {
            query.moveToFirst();
            long j = query.getLong(query.getColumnIndex(USERACTIVITY_TIMESTAMP));
            long currentTimeMillis = System.currentTimeMillis();
            if (j < currentTimeMillis) {
                contentValues.put(USERACTIVITY_TIMESTAMP, Long.valueOf(currentTimeMillis));
            } else {
                contentValues.put(USERACTIVITY_TIMESTAMP, Long.valueOf(j + 1));
            }
            insert = (long) db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin='" + catfishMessageObject.senderpin + "'", null);
        }
        query.close();
        return insert > 0;
    }

    public boolean updateLastChatActivity(String str, long j) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(LASTCHATACTIVITY, Long.valueOf(j));
        db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin='" + str + "'", null);
        return db.update(OFFICIAL_TABLE_NAME, contentValues, new StringBuilder().append("friendpin='").append(str).append("'").toString(), null) > 0;
    }

    public boolean updateLastStatusChange(String str, long j) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        if (j == 0 || getLastChatActivity(str) != 0) {
            return false;
        }
        contentValues.put(LASTSTATUSUPDATE, Long.valueOf(j));
        return db.update(FRIENDLIST_TABLE_NAME, contentValues, new StringBuilder().append("friendpin='").append(str).append("'").toString(), null) > 0;
    }

    public int updateNewFriendRequest(String str, String str2, int i) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return 0;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(SENDERNAME, str2);
        if (i != 0) {
            contentValues.put(MESSAGETYPE, Integer.valueOf(i));
        }
        return db.update(REQUESTFRIEND_TABLE_NAME, contentValues, "senderpin='" + str + "'", null);
    }

    public boolean updatePendingRequest(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(RECIPIENTNAME, catfishMessageObject.recipientname);
        return db.update(PENDINGREQUEST_TABLE_NAME, contentValues, new StringBuilder().append("recipient='").append(catfishMessageObject.recipient).append("'").toString(), null) > 0;
    }

    public boolean updatePendingRequest(String str, String str2, int i) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(RECIPIENTNAME, str2);
        if (i != 0) {
            contentValues.put(MESSAGETYPE, Integer.valueOf(i));
        }
        return db.update(PENDINGREQUEST_TABLE_NAME, contentValues, new StringBuilder().append("recipient='").append(str).append("'").toString(), null) > 0;
    }

    public boolean updateStatusLike(CatfishMessageObject catfishMessageObject, boolean z) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        int i;
        CatfishDataStorage catfishDataStorage = new CatfishDataStorage(this.mContext);
        Cursor rawQuery = db.rawQuery("SELECT likestatus,melikethis FROM friendlist WHERE friendpin ='" + catfishMessageObject.object_owner + "' AND " + STATUSSEQ + " ='" + catfishMessageObject.object_sequence + "'", null);
        Log.d(TAG, "query get friend count : SELECT likestatus,melikethis FROM friendlist WHERE friendpin ='" + catfishMessageObject.object_owner + "' AND " + STATUSSEQ + " ='" + catfishMessageObject.object_sequence + "'");
        if (rawQuery.getCount() > 0) {
            Log.d(TAG, "UPDATESTATUSLIKE: FOUND: UPDATING DB");
            rawQuery.moveToFirst();
            int i2 = rawQuery.getInt(rawQuery.getColumnIndex(LIKESTATUS));
            i = rawQuery.getInt(rawQuery.getColumnIndex(MELIKETHIS));
            Log.d(TAG, "UPDATESTATUSLIKE: COUNT=" + String.valueOf(i2));
            Cursor responseLikeList = catfishDataStorage.getResponseLikeList("sl:" + catfishMessageObject.object_owner + ":" + catfishMessageObject.object_sequence);
            i2 = responseLikeList.getCount() + Integer.parseInt(catfishMessageObject.message);
            responseLikeList.close();
            Log.d(TAG, "UPDATESTATUSLIKE: COUNT=" + String.valueOf(i2) + ": UPDATE");
            if (z) {
                i = i == 0 ? 1 : 0;
            }
            ContentValues contentValues = new ContentValues();
            contentValues.put(LIKESTATUS, Integer.valueOf(i2));
            contentValues.put(MELIKETHIS, Integer.valueOf(i));
            int update = db.update(FRIENDLIST_TABLE_NAME, contentValues, "friendpin ='" + catfishMessageObject.object_owner + "' AND " + STATUSSEQ + " ='" + catfishMessageObject.object_sequence + "'", null);
            Intent intent = new Intent(CatfishIntents.ACTION_UI_STATUSLIKE_RESULT);
            intent.putExtra(LIKESTATUS, i2);
            intent.putExtra(MELIKETHIS, i);
            intent.putExtra("cek", "notme");
            intent.putExtra("pin", catfishMessageObject.object_owner);
            this.mContext.sendBroadcast(intent);
            i = update;
        } else {
            Log.d(TAG, "UPDATESTATUSLIKE: NOT FOUND");
            boolean z2 = false;
        }
        rawQuery.close();
        return i > 0;
    }
}
