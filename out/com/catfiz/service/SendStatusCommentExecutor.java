package com.catfiz.service;

import android.database.Cursor;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import com.albus.util.AlbusModelObject;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.svcpersistent.CommonMessageInfo.MessageContext;
import com.catfiz.svcpersistent.CommonPersistentExecutorBase;
import com.catfiz.util.Log;
import java.io.UnsupportedEncodingException;
import org.apache.http.protocol.HTTP;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class SendStatusCommentExecutor extends CommonPersistentExecutorBase implements Runnable {
    private static final String TAG = "SendStatusCommentExecutor";
    private String mConvKey;
    private ICatfishClientInterface mIfClient = null;
    private String mMessage;
    private MessageType mMessageType;
    private long mObjSequence;
    private long mRcvTimestamp;
    private String mRecipient;
    private boolean mResend;
    private String[] mSelected_contacts;
    private long mSequence;
    private String mServer;
    private volatile CatfishService mService = null;
    private String mUsername;
    private String mUserpin;

    class BcastCommentToFriendList implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        public int scheduleNum;

        private BcastCommentToFriendList() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.scheduleNum = 0;
        }

        public void dropRunnable() {
            Log.e(SendStatusCommentExecutor.TAG, "SEND STATUS COMMENT: SEND ERROR: DROP BY SERVICE !!!");
            SendStatusCommentExecutor.this.deleteTaskState(String.valueOf(SendStatusCommentExecutor.this.mSequence), false);
            SendStatusCommentExecutor.this.mService.postRunnableToDbThread(new UpdateSendMessageStatusToDB(MessageDeliveryStatus.DROP));
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            CatfishResult friendlistBcast = this.catfishRestAPI.friendlistBcast(SendStatusCommentExecutor.this.mServer, SendStatusCommentExecutor.this.mUserpin, SendStatusCommentExecutor.this.mUsername, SendStatusCommentExecutor.this.mMessageType.ordinal(), SendStatusCommentExecutor.this.mRecipient, SendStatusCommentExecutor.this.mMessage, SendStatusCommentExecutor.this.mSequence, SendStatusCommentExecutor.this.mObjSequence, SendStatusCommentExecutor.this.mRecipient);
            if (friendlistBcast.hasSuccess()) {
                SendStatusCommentExecutor.this.deleteTaskState(String.valueOf(SendStatusCommentExecutor.this.mSequence), false);
                SendStatusCommentExecutor.this.mService.postRunnableToDbThread(new UpdateSendMessageStatusToDB(MessageDeliveryStatus.SENT));
                Log.e(SendStatusCommentExecutor.TAG, "sattus komen send:" + SendStatusCommentExecutor.this.mMessageType.ordinal());
            } else if (friendlistBcast.hasFailure()) {
                SendStatusCommentExecutor.this.mServer = CatfishService.getServerHost();
                SendStatusCommentExecutor.this.mService.scheduleRunnableToService(this, 1);
            } else {
                SendStatusCommentExecutor.this.deleteTaskState(String.valueOf(SendStatusCommentExecutor.this.mSequence), false);
                Log.e(SendStatusCommentExecutor.TAG, "SEND STATUS COMMENT: SEND ERROR: DROP !!!");
                SendStatusCommentExecutor.this.mService.postRunnableToDbThread(new UpdateSendMessageStatusToDB(MessageDeliveryStatus.DROP));
            }
            friendlistBcast.cleaningup();
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    class BcastLongCommentToFriendList implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI = null;
        private String longMessage = null;
        private long mAge = System.currentTimeMillis();
        public int scheduleNum = 0;

        public BcastLongCommentToFriendList(String str) {
            this.longMessage = str;
        }

        public void dropRunnable() {
            Log.e(SendStatusCommentExecutor.TAG, "SEND STATUS COMMENT: SEND ERROR: DROP BY SERVICE !!!");
            SendStatusCommentExecutor.this.mService.postRunnableToDbThread(new UpdateSendMessageStatusToDB(MessageDeliveryStatus.DROP));
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            CatfishResult friendlistBcast = this.catfishRestAPI.friendlistBcast(SendStatusCommentExecutor.this.mServer, SendStatusCommentExecutor.this.mUserpin, SendStatusCommentExecutor.this.mUsername, SendStatusCommentExecutor.this.mMessageType.ordinal(), SendStatusCommentExecutor.this.mRecipient, this.longMessage, SendStatusCommentExecutor.this.mSequence, SendStatusCommentExecutor.this.mObjSequence, SendStatusCommentExecutor.this.mRecipient);
            if (friendlistBcast.hasSuccess()) {
                SendStatusCommentExecutor.this.mService.postRunnableToDbThread(new UpdateSendMessageStatusToDB(MessageDeliveryStatus.SENT));
            } else if (friendlistBcast.hasFailure()) {
                SendStatusCommentExecutor.this.mServer = CatfishService.getServerHost();
                SendStatusCommentExecutor.this.mService.scheduleRunnableToService(this, 1);
            } else {
                Log.e(SendStatusCommentExecutor.TAG, "SEND STATUS COMMENT: SEND ERROR: DROP !!!");
                SendStatusCommentExecutor.this.mService.postRunnableToDbThread(new UpdateSendMessageStatusToDB(MessageDeliveryStatus.DROP));
            }
            friendlistBcast.cleaningup();
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    class InvokeClientCallback implements Runnable {
        private Cursor mCursor;
        private ICatfishClientInterface mIfClient;

        public InvokeClientCallback(ICatfishClientInterface iCatfishClientInterface, Cursor cursor) {
            this.mCursor = cursor;
            this.mIfClient = iCatfishClientInterface;
        }

        public void run() {
            if (!this.mIfClient.isFinish()) {
                this.mIfClient.onDatabaseResponse(CatfishService.GET_STATCOMM_CONVERSATION_KEY, this.mCursor, 0);
            }
        }
    }

    public class LongMessageRunnable implements Runnable {
        private ICatfishClientInterface mInterfaceClient = null;
        private CatfishMessageObject message = null;

        public LongMessageRunnable(ICatfishClientInterface iCatfishClientInterface, CatfishMessageObject catfishMessageObject) {
            this.mInterfaceClient = iCatfishClientInterface;
            this.message = catfishMessageObject;
        }

        public void run() {
            String saveSentLongMessageToFile = new LongMessageExecutor(this.message.message, this.message.sequence).saveSentLongMessageToFile();
            String substring = this.message.message.substring(0, LongMessageExecutor.LONG_MESSAGE_CHAR_PREVIEW);
            SendStatusCommentExecutor.this.mMessageType = MessageType.LONGSTATUSCOMMENT;
            CatfishService access$300 = SendStatusCommentExecutor.this.mService;
            CatfishService access$3002 = SendStatusCommentExecutor.this.mService;
            ICatfishClientInterface iCatfishClientInterface = this.mInterfaceClient;
            SendStatusCommentExecutor.this.mService;
            access$300.postToDBHandler(new StatusDataBcastUploadExecutor(access$3002, iCatfishClientInterface, null, CatfishService.getCurrentServerHost(), SendStatusCommentExecutor.this.mUserpin, SendStatusCommentExecutor.this.mRecipient, saveSentLongMessageToFile, StatusDataBcastUploadExecutor.ID_LONGMESSAGE, SendStatusCommentExecutor.this.mObjSequence, null, AlbusModelObject.TEXT, substring, this.message.sequence));
            this.message.recycle();
        }
    }

    class UpdateSendMessageStatusToDB implements Runnable {
        private MessageDeliveryStatus mDeliveryStatus;

        public UpdateSendMessageStatusToDB(MessageDeliveryStatus messageDeliveryStatus) {
            this.mDeliveryStatus = messageDeliveryStatus;
        }

        public void run() {
            CatfishDataStorage catfishDataStorage = new CatfishDataStorage(SendStatusCommentExecutor.this.mService);
            CatfishMessageObject obtain = CatfishMessageObject.obtain();
            obtain.userpin = SendStatusCommentExecutor.this.mUserpin;
            obtain.conversation_key = SendStatusCommentExecutor.this.mConvKey;
            obtain.sequence = SendStatusCommentExecutor.this.mSequence;
            obtain.recipient = SendStatusCommentExecutor.this.mRecipient;
            obtain.deliverystatus = this.mDeliveryStatus;
            if (!catfishDataStorage.updateMessageSentStatusWConvkey(obtain, null)) {
                Log.e(SendStatusCommentExecutor.TAG, "SEND STATUS COMMENT: UPDATE SEND STATUS FAIL: " + String.valueOf(obtain.deliverystatus.ordinal()));
            } else if (!(SendStatusCommentExecutor.this.mIfClient == null || SendStatusCommentExecutor.this.mIfClient.isFinish())) {
                SendStatusCommentExecutor.this.mService.postToMainHandler(new InvokeClientCallback(SendStatusCommentExecutor.this.mIfClient, catfishDataStorage.getChatConversation(SendStatusCommentExecutor.this.mConvKey)));
            }
            obtain.recycle();
        }
    }

    public SendStatusCommentExecutor(ICatfishClientInterface iCatfishClientInterface, CatfishService catfishService, String str, String str2, String str3, String str4, String str5, long j, MessageType messageType) {
        initSendStatusCommentExecutor(iCatfishClientInterface, catfishService, str, str2, str3, str4, str5, j, messageType, false);
    }

    public SendStatusCommentExecutor(ICatfishClientInterface iCatfishClientInterface, CatfishService catfishService, String str, String str2, String str3, String str4, String str5, long j, MessageType messageType, boolean z) {
        initSendStatusCommentExecutor(iCatfishClientInterface, catfishService, str, str2, str3, str4, str5, j, messageType, z);
    }

    private String buildMessage(FriendListDataStorage friendListDataStorage) {
        Cursor contactInfoList = friendListDataStorage.getContactInfoList(this.mSelected_contacts);
        contactInfoList.moveToFirst();
        int count = contactInfoList.getCount();
        int columnIndex = contactInfoList.getColumnIndex(FriendListDataStorage.FRIENDNAME);
        int columnIndex2 = contactInfoList.getColumnIndex(FriendListDataStorage.FRIENDPIN);
        JSONObject jSONObject = new JSONObject();
        JSONArray jSONArray = new JSONArray();
        int i = 0;
        while (i < count) {
            try {
                JSONObject jSONObject2 = new JSONObject();
                jSONObject2.put("pin", contactInfoList.getString(columnIndex2));
                jSONObject2.put(CatfishDataStorage.NIC_NAME, contactInfoList.getString(columnIndex));
                jSONArray.put(jSONObject2);
                contactInfoList.moveToNext();
                i++;
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
        jSONObject.put("contacts", jSONArray);
        jSONObject.put(ServerMessageDataStorage.COUNT, String.valueOf(count));
        this.mMessage = jSONObject.toString();
        contactInfoList.close();
        return this.mMessage;
    }

    public void initSendStatusCommentExecutor(ICatfishClientInterface iCatfishClientInterface, CatfishService catfishService, String str, String str2, String str3, String str4, String str5, long j, MessageType messageType, boolean z) {
        this.mIfClient = iCatfishClientInterface;
        this.mService = catfishService;
        this.mServer = str;
        this.mUserpin = str2;
        this.mUsername = str3;
        this.mRecipient = str4;
        this.mMessage = str5;
        this.mObjSequence = j;
        this.mMessageType = messageType;
        this.mResend = z;
        this.mSelected_contacts = new String[]{str5};
        this.mSequence = CatfishRESTAPI.uniqueMonotonicSequence();
        this.mRcvTimestamp = this.mSequence;
        this.mConvKey = "sc:" + this.mRecipient + ":" + String.valueOf(j);
    }

    public void run() {
        Log.e(TAG, "~~~~~~~~~SendStatusCommentExecutor:" + this.mSequence);
        if (isResumeProcess()) {
            this.mSequence = Long.parseLong(getResumeUploadData().mKey);
            this.mRcvTimestamp = this.mSequence;
        }
        CatfishDataStorage catfishDataStorage = new CatfishDataStorage(this.mService);
        FriendListDataStorage friendListDataStorage = new FriendListDataStorage(this.mService);
        CatfishMessageObject obtain = CatfishMessageObject.obtain();
        obtain.userpin = this.mUserpin;
        obtain.username = this.mUsername;
        obtain.recipient = this.mRecipient;
        obtain.senderpin = this.mUserpin;
        obtain.messagetype = this.mMessageType;
        obtain.rcvtimestamp = this.mRcvTimestamp;
        obtain.conversation_key = this.mConvKey;
        obtain.deliverystatus = MessageDeliveryStatus.QUEUEING;
        obtain.sequence = this.mSequence;
        obtain.object_sequence = this.mObjSequence;
        obtain.object_owner = this.mRecipient;
        if (this.mResend) {
            obtain.message = this.mMessage;
        } else if (this.mMessageType == MessageType.PROMOTECONTACT) {
            obtain.message = buildMessage(friendListDataStorage);
        } else {
            obtain.message = this.mMessage;
        }
        obtain.isUserComment = true;
        obtain.messagetype = MessageType.STATUSCOMMENT;
        catfishDataStorage.addRecentupdates(obtain);
        obtain.messagetype = this.mMessageType;
        if (MessageType.STIKER_MESSAGE_STATUS == this.mMessageType) {
            try {
                JSONObject jSONObject = new JSONObject(obtain.message);
                try {
                    obtain.stickerheight = Integer.parseInt(jSONObject.remove("stickerHeight").toString());
                } catch (Exception e) {
                    obtain.stickerheight = 0;
                }
                try {
                    obtain.stickerwidth = Integer.parseInt(jSONObject.remove("stickerWidth").toString());
                } catch (Exception e2) {
                    obtain.stickerwidth = 0;
                }
                obtain.message = jSONObject.toString();
            } catch (JSONException e3) {
                e3.printStackTrace();
            }
        }
        if (isResumeProcess()) {
            updateTaskState(String.valueOf(this.mSequence), this.mRecipient, this.mMessageType.ordinal(), MessageContext.STATUS_COMMENT_MESSAGE.ordinal(), null, true);
            this.mService.postToServiceHandler(new BcastCommentToFriendList(), 1);
            return;
        }
        byte[] bytes;
        try {
            bytes = this.mMessage.getBytes(HTTP.UTF_8);
        } catch (UnsupportedEncodingException e4) {
            e4.printStackTrace();
            bytes = null;
        }
        if (bytes.length > AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT) {
            obtain.messagetype = MessageType.LONGSTATUSCOMMENT;
        }
        if (catfishDataStorage.storeUserMessageWConvKey(obtain, null)) {
            if (!(this.mIfClient == null || this.mIfClient.isFinish())) {
                this.mService.postToMainHandler(new InvokeClientCallback(this.mIfClient, catfishDataStorage.getChatConversation(this.mConvKey)));
            }
            if (this.mMessageType != MessageType.STATUSCOMMENT || bytes.length <= AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT) {
                updateTaskState(String.valueOf(this.mSequence), this.mRecipient, this.mMessageType.ordinal(), MessageContext.STATUS_COMMENT_MESSAGE.ordinal(), null, true);
                this.mService.postToServiceHandler(new BcastCommentToFriendList(), 1);
            } else {
                this.mService.postToLongMessageHandler(new LongMessageRunnable(this.mIfClient, obtain.getRefCopy()));
            }
        } else {
            Log.e(TAG, "SEND STATUS COMMENT: Write to DB FAIL: DROP !!!");
            if (!(this.mIfClient == null || this.mIfClient.isFinish())) {
                this.mService.postToMainHandler(new InvokeClientCallback(this.mIfClient, catfishDataStorage.getChatConversation(this.mConvKey)));
            }
        }
        obtain.recycle();
    }
}
