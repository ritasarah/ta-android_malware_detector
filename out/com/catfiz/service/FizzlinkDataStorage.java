package com.catfiz.service;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.util.Log;
import java.io.File;

public class FizzlinkDataStorage {
    public static final String DATAFILEPATH = "datafilepath";
    public static final String DATASIZE = "datasize";
    public static final String DATATYPE = "datatype";
    public static final String DESCRIPTION = "description";
    public static final String FILENAME = "filename";
    public static final String FIZZLINK_DOWNLOAD_TABLE_NAME = "fizzlink_download";
    public static final int FIZZLINK_MAX_CHACE = 20;
    public static final String FIZZLINK_UPLOAD_TABLE_NAME = "fizzlink_upload";
    public static final String IMAGETHUMB_URI = "imagethumburi";
    public static final String MESSAGE = "message";
    public static final String OBJECTSEQUENCE = "objectsequence";
    public static final String SENDERNAME = "sendername";
    public static final String SENDERPIN = "senderpin";
    public static final String SLINK = "slink";
    private static final String TAG = "FizzlinkDataStorage";
    public static final String TIMESTAMP = "timestamp";
    private static SQLiteDatabase mCatfishDataStorageDB = null;
    private static DatabaseHelper mDBHelper = null;
    private Context mContext;

    class DatabaseHelper extends SQLiteOpenHelper {
        private static final String DATABASE_NAME = "catfiz_fizzlink.db";
        private static final int DATABASE_VERSION = 3;
        private Context mContext = null;

        public DatabaseHelper(Context context) {
            super(context, DATABASE_NAME, null, DATABASE_VERSION);
            this.mContext = context;
        }

        private void buildFizzDownloadTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS fizzlink_download (_id INTEGER PRIMARY KEY,slink TEXT,datafilepath TEXT,datasize INTEGER NOT NULL DEFAULT 0,filename TEXT,sendername VARCHAR(255),senderpin TEXT,description TEXT,datatype INTEGER NOT NULL DEFAULT 0,timestamp INTEGER NOT NULL DEFAULT 0,imagethumburi TEXT,UNIQUE (timestamp));");
        }

        private void buildFizzUploadTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS fizzlink_upload (_id INTEGER PRIMARY KEY,slink TEXT,datafilepath TEXT,objectsequence INTEGER NOT NULL DEFAULT 0,message TEXT,imagethumburi TEXT,timestamp INTEGER NOT NULL DEFAULT 0,datasize INTEGER NOT NULL DEFAULT 0,UNIQUE (timestamp));");
        }

        private void rebuildFizzDownloadTable(SQLiteDatabase sQLiteDatabase, int i, int i2) {
            Log.d(FizzlinkDataStorage.TAG, "DROPING OLD IGNORED_NIC_TABLE_NAME DB");
            sQLiteDatabase.execSQL("DROP TABLE IF EXISTS fizzlink_download");
            Log.d(FizzlinkDataStorage.TAG, "CREATING NEW IGNORED_NIC_TABLE_NAME DB");
            buildFizzDownloadTable(sQLiteDatabase);
        }

        public void onCreate(SQLiteDatabase sQLiteDatabase) {
            buildFizzDownloadTable(sQLiteDatabase);
            buildFizzUploadTable(sQLiteDatabase);
        }

        public void onUpgrade(SQLiteDatabase sQLiteDatabase, int i, int i2) {
            if (i <= 1) {
                sQLiteDatabase.execSQL("ALTER TABLE fizzlink_download ADD COLUMN senderpin TEXT;");
            }
            if (i <= 2) {
                sQLiteDatabase.execSQL("ALTER TABLE fizzlink_upload ADD COLUMN datasize  INTEGER NOT NULL DEFAULT 0;");
            }
        }
    }

    public FizzlinkDataStorage(Context context) {
        if (mDBHelper == null) {
            Log.d(TAG, "Create new DB Helper");
            mDBHelper = new DatabaseHelper(context);
        }
        this.mContext = context;
    }

    private boolean deletethumb(String str) {
        if (str == null) {
            return false;
        }
        try {
            File file = new File(str);
            if (!file.exists()) {
                return false;
            }
            boolean delete = file.delete();
            Log.d(TAG, "deleted fizzlink thumb file:" + str);
            return delete;
        } catch (Exception e) {
            return false;
        }
    }

    public boolean checkNDeleteChace() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        int delete;
        Cursor query = db.query(FIZZLINK_DOWNLOAD_TABLE_NAME, null, null, null, null, null, "timestamp ASC");
        if (query.getCount() >= FIZZLINK_MAX_CHACE) {
            query.moveToFirst();
            deletethumb(query.getString(query.getColumnIndex(IMAGETHUMB_URI)));
            delete = db.delete(FIZZLINK_DOWNLOAD_TABLE_NAME, "timestamp = '" + query.getInt(query.getColumnIndex(TIMESTAMP)) + "'", null);
        } else {
            delete = 0;
        }
        return delete > 0;
    }

    public Cursor deleteSingleFizzlink(long j) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        if (((long) db.delete(FIZZLINK_UPLOAD_TABLE_NAME, "objectsequence ='" + j + "'", null)) <= 0) {
            Log.d(TAG, "DELETE FIZZLINK for objsequence " + j + " SUCCESS");
        }
        return db.query(FIZZLINK_UPLOAD_TABLE_NAME, null, null, null, null, null, null);
    }

    public Cursor getAllUploadedFizzlinkList() {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.query(FIZZLINK_UPLOAD_TABLE_NAME, null, null, null, null, null, null);
    }

    public SQLiteDatabase getDB() {
        try {
            mCatfishDataStorageDB = mDBHelper.getWritableDatabase();
            return mCatfishDataStorageDB;
        } catch (SQLiteException e) {
            e.printStackTrace();
            Log.e(TAG, "FATAL ERROR IN DB: " + e.toString());
            System.exit(0);
            return null;
        } catch (Exception e2) {
            e2.printStackTrace();
            Log.e(TAG, "FATAL ERROR IN DB: " + e2.toString());
            System.exit(0);
            return null;
        }
    }

    public Cursor getFizzlinkDownloadData(String str) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.query(FIZZLINK_DOWNLOAD_TABLE_NAME, null, "slink='" + str + "'", null, null, null, null);
    }

    public Cursor getSingleFizzlinkUpload(long j) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.query(FIZZLINK_UPLOAD_TABLE_NAME, null, "objectsequence ='" + j + "'", null, null, null, null);
    }

    public boolean storeFizzlinkDownloadData(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(SLINK, catfishMessageObject.slink);
        contentValues.put(DATAFILEPATH, catfishMessageObject.datafile_path);
        contentValues.put(DATASIZE, Integer.valueOf(catfishMessageObject.datasize));
        contentValues.put(FILENAME, catfishMessageObject.filename);
        contentValues.put(SENDERNAME, catfishMessageObject.sendername);
        contentValues.put(SENDERPIN, catfishMessageObject.senderpin);
        contentValues.put(DESCRIPTION, catfishMessageObject.desc);
        contentValues.put(DATATYPE, Integer.valueOf(catfishMessageObject.datatype));
        contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
        checkNDeleteChace();
        long insert = db.insert(FIZZLINK_DOWNLOAD_TABLE_NAME, null, contentValues);
        if (insert <= 0) {
            Log.e(TAG, "storeFizzlink download info : SLINK: " + catfishMessageObject.slink + ": FAIL");
        }
        return insert > 0;
    }

    public boolean storeFizzlinkUploadMessage(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(MESSAGE, catfishMessageObject.message);
        contentValues.put(OBJECTSEQUENCE, Long.valueOf(catfishMessageObject.object_sequence));
        contentValues.put(SLINK, catfishMessageObject.slink);
        contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
        contentValues.put(DATAFILEPATH, catfishMessageObject.datafile_path);
        contentValues.put(DATASIZE, Integer.valueOf(catfishMessageObject.datasize));
        if (db.insert(FIZZLINK_UPLOAD_TABLE_NAME, null, contentValues) <= 0) {
            Log.d(TAG, "INSERT upload slink: FAIL!!!");
        }
        contentValues.clear();
        Log.d(TAG, "Message STORED");
        return true;
    }

    public boolean updateFizzlinkDownloadData(String str, String str2) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(IMAGETHUMB_URI, str2);
        return db.update(FIZZLINK_DOWNLOAD_TABLE_NAME, contentValues, new StringBuilder().append("slink='").append(str).append("'").toString(), null) > 0;
    }

    public boolean updateUploadFizzlinkStatus(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        if (catfishMessageObject.slink != null) {
            contentValues.put(SLINK, catfishMessageObject.slink);
        }
        if (catfishMessageObject.deliverystatus == MessageDeliveryStatus.DROP) {
            contentValues.put(SLINK, Integer.valueOf(1));
        }
        if (db.update(FIZZLINK_UPLOAD_TABLE_NAME, contentValues, "objectsequence = " + catfishMessageObject.object_sequence, null) > 0) {
            Log.d(TAG, "UPDATE UPLOAD FIZZLINK with objectsequence" + catfishMessageObject.object_sequence + " SUCCESS");
            return true;
        }
        Log.d(TAG, "UPDATE UPLOAD FIZZLINK with objectsequence" + catfishMessageObject.object_sequence + " FAIL");
        return true;
    }
}
