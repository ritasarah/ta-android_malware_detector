package com.catfiz.service;

import android.content.ContentValues;
import android.content.Context;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;
import android.preference.PreferenceManager;
import com.albus.util.AlbusModelObject;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.pool.PoolDataStorage;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.CatfishService.UpdateRecent;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.io.File;
import java.util.ArrayList;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.json.JSONException;
import org.json.JSONObject;

public class CatfishDataStorage {
    public static final String ACTION = "action";
    public static final String ACTION_CODE = "actioncode";
    public static final String ACTIVITYCOUNT = "activitycount";
    public static final String ATTACHMENT_FILE_SIZE = "attachmentfilesize";
    public static final String ATTACHMENT_HEIGHT = "attachmentheight";
    public static final String ATTACHMENT_WIDTH = "attachmentwidth";
    public static final String CODE = "code";
    public static final String CODE_IDX = "code_idx";
    public static final String CONVERSATION_KEY = "convkey";
    public static final String CONVERSATION_KEY_IDX = "convkey_idx";
    public static final String CONVERSATION_KEY_OBJECTSEQ_IDX = "convkey_objectseq_idx";
    public static final String CONVERSATION_KEY_SEQUENCE_IDX = "convkey_sequence_idx";
    public static final String COUNT = "count";
    public static final String COUNTFLAG = "countflag";
    public static final String COUNTFUN = "countfunny";
    public static final String COUNTPRET = "countpret";
    public static final String CREATORPIN = "creatorpin";
    public static final String DATABASE_NAME = "catfish.db";
    public static final String DATAFILEPATH = "datafilepath";
    public static final String DATASIZE = "datasize";
    public static final String DATATYPE = "datatype";
    public static final String DELIVERYSTATUS = "deliverystatus";
    public static final String DELIVERYSTATUS_IDX = "deliverystatus_idx";
    public static final String DESCRIPTION = "description";
    public static final String FILENAME = "filename";
    public static final String FILENAME_IDX = "filename_idx";
    public static final String FILE_PATH = "filePath";
    public static final String FIZZLINK_DATA_SIZE = "fizzlinkdatasize";
    public static final String FIZZLINK_DATA_TYPE = "fizzlinkdatatype";
    public static final String FIZZLINK_DESC = "fizzlinkdesc";
    public static final String FIZZLINK_DOWNLOADED = "fizzlinkdownloaded";
    public static final String FIZZLINK_FILE_NAME = "fizzlinkfilename";
    public static final String FIZZLINK_FILE_PATH = "fizzlinkfilepath";
    public static final int FIZZLINK_MAX_CHACE = 20;
    public static final String FIZZLINK_SENDER_NAME = "fizzlinksendername";
    public static final String FIZZLINK_SENDER_PIN = "fizzlinksenderpin";
    public static final String FOLLOW = "follow";
    public static final String FRIENDALIAS = "friendalias";
    public static final String FRIENDLISTREQUEST_IDX = "friendlistrequest_idx";
    public static final String FRIENDNAME = "friendname";
    public static final String FRIENDNAME_IDX = "friendname_idx";
    public static final String FRIENDPIN = "friendpin";
    public static final String GROUPID = "groupid";
    public static final String GROUPNAME = "groupname";
    public static final String GROUPOWNER = "groupowner";
    public static final String HAVEUNREAD = "haveunread";
    public static final String HAVEUNREADSTATCOMM = "hvunreadstatcomm";
    public static final String ICONID = "iconid";
    public static final String IGNORED_NIC_TABLE_NAME = "ignored_nic";
    public static final String IGNOREPOOL = "ignorepool";
    public static final String IMAGEPATH = "imagepath";
    public static final String IMAGETHUMB_URI = "imagethumburi";
    public static final String INVITATION = "invitation";
    public static final String INVITATIONMESSAGE = "invitationmsg";
    public static final String INVITEBY = "inviteby";
    public static final String INVITERNAME = "invitername";
    public static final String ISAFRIEND = "isafriend";
    public static final String LASTACTIVITY = "lastactivity";
    public static final String LASTACTIVITY_IDX = "last_activity_idx";
    public static final String LASTCHATACTIVITY = "lastchatactivity";
    public static final String LASTSTATUSUPDATE = "laststatusupdate";
    public static final String LIKESTATUS = "likestatus";
    public static final String MELIKETHIS = "melikethis";
    public static final String MEMBERNAME = "membername";
    public static final String MEMBERPIN = "memberpin";
    public static final String MESSAGE = "message";
    public static final String MESSAGES_TABLE_NAME = "messages";
    public static final String MESSAGETYPE = "messagetype";
    public static final String NICMESSAGE_TABLE_NAME = "nicmessages";
    public static final String NIC_NAME = "name";
    public static final String NIC_NIC = "nic";
    public static final String NIC_PROFILE_CACHE_TABLE_NAME = "nic_profile";
    public static final int NIC_PROFILE_MAX_CACHE = 10;
    public static final String NIC_STATUS = "status";
    public static final String NIC_TIMESTAMP = "timestamp";
    public static final String OBJCOMMENTCOUNT = "objcommentcount";
    public static final String OBJECTOWNERPIN = "objownerpin";
    public static final String OBJECTSEQUENCE = "objectsequence";
    public static final String OBJECT_COMMENT_TABLE_NAME = "object_comment";
    public static final String PHOTOAVAILABLE = "photoavailable";
    public static final String PHOTOFILENAME = "photofilename";
    public static final String PREFERENCE_NAME = "com.catfiz.preference";
    public static final String PREF_NAME_UNREAD_STATUS_COMMENT = "filename_idx";
    public static final String PROGRESS = "progress";
    public static final String QUOTE_MESSAGE = "quotemessage";
    public static final String QUOTE_SENDER_NAME = "quotesendername";
    public static final String QUOTE_SENDER_NIC = "quotesendernic";
    public static final String REBUILD_CATEGORY = "rebuild_category";
    public static final String RECENTUPDATES_ACTION_IDX = "rcu_action_idx";
    public static final String RECENTUPDATES_FRD_IDX = "rcu_frd_idx";
    public static final String RECENTUPDATES_TABLE_NAME = "recentupdates";
    public static final String RECENT_ACTION = "recaction";
    public static final String RECENT_ACTION_CODE = "recactioncode";
    public static final String RECENT_IS_USER_COMMENT = "recisusercomment";
    public static final String RECENT_IS_USER_LIKE = "recisuserlike";
    public static final String RECENT_LIKE_COUNT = "reclikecount";
    public static final String RECENT_MESSAGE = "recmessage";
    public static final String RECENT_NEW_COMMENT = "recnewcomment";
    public static final String RECENT_NEW_LIKE = "recnewlike";
    public static final String RECENT_OBJECTSEQUENCE = "recobject";
    public static final String RECENT_RECIPIENT = "recrecipient";
    public static final String RECENT_RECIPIENT_NAME = "recrecipientname";
    public static final String RECENT_SEQUENCE = "recsequence";
    public static final String RECENT_STATUS = "recstatus";
    public static final String RECENT_STATUSSEQ = "recstatusseq";
    public static final String RECENT_STATUS_COUNT = "recstatcount";
    public static final String RECENT_STATUS_SEQ = "recstatseq";
    public static final String RECENT_TIMESTAMP = "rectimestamp";
    public static final String RECENT_USERPIN = "recuserpin";
    public static final String RECENT_USER_NAME = "recusername";
    public static final String RECIPIENT = "recipient";
    public static final String RECIPIENTNAME = "recipientname";
    public static final String REPO = "repo";
    public static final String REPO_IDX = "repo_idx";
    public static final String SENDERNAME = "sendername";
    public static final String SENDERPIN = "senderpin";
    public static final String SEQUENCE = "sequence";
    public static final String SLINK = "slink";
    public static final String STATUS = "status";
    public static final String STATUSCOMMENT_TABLE_NAME = "status";
    public static final String STATUSSEQ = "statusseq";
    public static final String STICKERPLAYED = "stickerplayed";
    public static final String STICKERSIZEHEIGHT = "stickersheight";
    public static final String STICKERSIZEWIDTH = "stickerswidth";
    public static final String STREAMTHUMBNAILDOWNLOAD = "streamthumbnail";
    public static final String SVG_CODE_TABLE_NAME = "svg_code";
    private static final String TAG = "CatfishDataStorage";
    public static final String TIMESTAMP = "timestamp";
    public static final String TIMESTAMP_IDX = "timestamp_idx";
    public static final String TYPE = "type";
    public static final String UPLOAD_DOWNLOAD_TABLE_NAME = "upload_download";
    public static final String USEALIAS = "usealias";
    public static final String USERACTIVITY = "useractivity";
    public static final String USERACTIVITY_TIMESTAMP = "useractivity_timestamp";
    public static final String USERGROUP_LASTACTIVITY_IDX = "usergroup_last_activity_idx";
    public static final String USERGROUP_MEMBERS_TABLE_NAME = "usergroup_member";
    public static final String USERGROUP_TABLE_NAME = "usergroups";
    public static final String USERNAME = "username";
    public static final String USERPIN = "userpin";
    public static final String USERPROFILE = "userprofile";
    public static final String USERSET_FRIENDPROFILE = "usersetfriendprofile";
    public static final String VOICEFILEPATH = "voicefilepath";
    private static SQLiteDatabase mCatfishDataStorageDB = null;
    private static DatabaseHelper mDBHelper = null;
    private Context mContext;

    /* synthetic */ class AnonymousClass1 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus = new int[MessageDeliveryStatus.values().length];
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType = new int[MessageType.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus[MessageDeliveryStatus.SENT.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.PHOTOUPDT.ordinal()] = 1;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.STATUSLIKE.ordinal()] = 2;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.STATUSCOMMENT.ordinal()] = 3;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.STATUSUPDT.ordinal()] = 4;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.USERNAMEUPDT.ordinal()] = 5;
            } catch (NoSuchFieldError e6) {
            }
        }
    }

    class DatabaseHelper extends SQLiteOpenHelper {
        private static final String DATABASE_NAME = "catfish.db";
        private static final int DATABASE_VERSION = 98;
        private Context mContext = null;

        public DatabaseHelper(Context context) {
            super(context, DATABASE_NAME, null, DATABASE_VERSION);
            this.mContext = context;
        }

        private void buildAndMigrateReceUpdatesTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("DROP TABLE IF EXISTS recentupdates");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS timestamp_idx");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS rcu_frd_idx");
            buildRecentUpdatesTable(sQLiteDatabase);
        }

        private void buildGroupMemberTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS usergroup_member (_id INTEGER PRIMARY KEY,groupid INTEGER NOT NULL DEFAULT 0,memberpin VARCHAR(10),membername VARCHAR(255),groupowner INTEGER NOT NULL DEFAULT 0,isafriend INTEGER NOT NULL DEFAULT 0,status TEXT,photofilename TEXT);");
        }

        private void buildIgnoredNicTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS ignored_nic (_id INTEGER PRIMARY KEY,userpin VARCHAR(10),username VARCHAR(255),timestamp INTEGER NOT NULL DEFAULT 0,UNIQUE (timestamp));");
            Log.d(CatfishDataStorage.TAG, "IGNORED_NIC_TABLE_NAME created");
        }

        private void buildMessageTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS messages (_id INTEGER PRIMARY KEY,senderpin VARCHAR(10),sendername VARCHAR(255),recipient VARCHAR(10),messagetype INTEGER NOT NULL DEFAULT 0,datatype INTEGER NOT NULL DEFAULT 0,timestamp INTEGER NOT NULL DEFAULT 0,convkey VARCHAR(21),message TEXT,deliverystatus INTEGER NOT NULL DEFAULT 0,sequence INTEGER NOT NULL DEFAULT 0,imagethumburi TEXT,imagepath TEXT,voicefilepath TEXT,datafilepath TEXT,objectsequence INTEGER NOT NULL DEFAULT 0,objownerpin VARCHAR(10),count INTEGER NOT NULL DEFAULT 0,countfunny INTEGER NOT NULL DEFAULT 0,countflag INTEGER NOT NULL DEFAULT 0,countpret INTEGER NOT NULL DEFAULT 0,slink TEXT,objcommentcount INTEGER NOT NULL DEFAULT 0,stickerplayed INTEGER NOT NULL DEFAULT 0,stickersheight INTEGER NOT NULL DEFAULT 0,stickerswidth INTEGER NOT NULL DEFAULT 0,streamthumbnail INTEGER NOT NULL DEFAULT 0,fizzlinkdatasize INTEGER NOT NULL DEFAULT 0,fizzlinkfilename TEXT,fizzlinkfilepath TEXT,fizzlinksendername TEXT,fizzlinksenderpin TEXT,fizzlinkdesc TEXT,fizzlinkdatatype INTEGER NOT NULL DEFAULT 0,fizzlinkdownloaded INTEGER NOT NULL DEFAULT 0,quotesendernic VARCHAR(10),quotesendername VARCHAR(255),quotemessage TEXT,attachmentfilesize INTEGER NOT NULL DEFAULT 0,attachmentwidth INTEGER NOT NULL DEFAULT 0,attachmentheight INTEGER NOT NULL DEFAULT 0,UNIQUE (timestamp));");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS convkey_idx ON messages(convkey);");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS convkey_sequence_idx ON messages(convkey,sequence);");
        }

        private void buildNicProfileTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS nic_profile (_id INTEGER PRIMARY KEY,nic VARCHAR(10),name VARCHAR(255),status TEXT,timestamp INTEGER NOT NULL DEFAULT 0);");
        }

        private void buildObjectCommentTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS object_comment (_id INTEGER PRIMARY KEY,senderpin VARCHAR(10),sendername VARCHAR(255),recipient VARCHAR(10),messagetype INTEGER NOT NULL DEFAULT 0,timestamp INTEGER NOT NULL DEFAULT 0,convkey VARCHAR(21),message TEXT,deliverystatus INTEGER NOT NULL DEFAULT 0,sequence INTEGER NOT NULL DEFAULT 0,objectsequence INTEGER NOT NULL DEFAULT 0,objownerpin VARCHAR(10),count INTEGER NOT NULL DEFAULT 0,UNIQUE (timestamp));");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS convkey_idx ON object_comment(convkey);");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS convkey_sequence_idx ON object_comment(convkey,sequence);");
        }

        private void buildRecentUpdatesTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS recentupdates (_id INTEGER PRIMARY KEY,recuserpin VARCHAR(10),recsequence INTEGER NOT NULL DEFAULT 0,recobject INTEGER NOT NULL DEFAULT 0,recstatusseq INTEGER NOT NULL DEFAULT 0,recrecipient VARCHAR(10),recactioncode INTEGER NOT NULL DEFAULT 0,recusername VARCHAR(255),recrecipientname VARCHAR(255),recaction TEXT,recstatus TEXT,rectimestamp INTEGER NOT NULL DEFAULT 0,recisuserlike INTEGER NOT NULL DEFAULT 0,recisusercomment INTEGER NOT NULL DEFAULT 0,recstatcount INTEGER NOT NULL DEFAULT 0,reclikecount INTEGER NOT NULL DEFAULT 0,recstatseq TEXT,recmessage TEXT,recnewcomment INTEGER NOT NULL DEFAULT 0,recnewlike INTEGER NOT NULL DEFAULT 0,UNIQUE (rectimestamp));");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS timestamp_idx ON recentupdates(rectimestamp DESC);");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS rcu_frd_idx ON recentupdates(recuserpin);");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS rcu_action_idx ON recentupdates(recactioncode);");
        }

        private void buildStatusCommentTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS status (_id INTEGER PRIMARY KEY,senderpin VARCHAR(10),sendername VARCHAR(255),recipient VARCHAR(10),messagetype INTEGER NOT NULL DEFAULT 0,timestamp INTEGER NOT NULL DEFAULT 0,convkey VARCHAR(21),message TEXT,deliverystatus INTEGER NOT NULL DEFAULT 0,sequence INTEGER NOT NULL DEFAULT 0,imagethumburi TEXT,imagepath TEXT,voicefilepath TEXT,datafilepath TEXT,objectsequence INTEGER NOT NULL DEFAULT 0,objownerpin VARCHAR(10),count INTEGER NOT NULL DEFAULT 0,countfunny INTEGER NOT NULL DEFAULT 0,countflag INTEGER NOT NULL DEFAULT 0,countpret INTEGER NOT NULL DEFAULT 0,slink TEXT,objcommentcount INTEGER NOT NULL DEFAULT 0,stickerplayed INTEGER NOT NULL DEFAULT 0,stickersheight INTEGER NOT NULL DEFAULT 0,stickerswidth INTEGER NOT NULL DEFAULT 0,UNIQUE (timestamp));");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS convkey_idx ON status(convkey);");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS convkey_sequence_idx ON status(convkey,sequence);");
        }

        private void buildSvgCodeTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS svg_code (_id INTEGER PRIMARY KEY,filename VARCHAR(20),code VARCHAR(10),repo VARCHAR(40));");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS code_idx ON svg_code(code DESC);");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS repo_idx ON svg_code(repo DESC);");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS filename_idx ON svg_code(filename DESC);");
        }

        private void buildUploadDownloadTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS upload_download (_id INTEGER PRIMARY KEY,senderpin VARCHAR(10),sendername VARCHAR(255),recipient VARCHAR(10),messagetype INTEGER NOT NULL DEFAULT 0,timestamp INTEGER NOT NULL DEFAULT 0,convkey VARCHAR(21),deliverystatus INTEGER NOT NULL DEFAULT 0,sequence INTEGER NOT NULL DEFAULT 0,type VARCHAR(10),filePath TEXT,objectsequence INTEGER NOT NULL DEFAULT 0,objownerpin VARCHAR(10),count INTEGER NOT NULL DEFAULT 0,countfunny INTEGER NOT NULL DEFAULT 0,countflag INTEGER NOT NULL DEFAULT 0,countpret INTEGER NOT NULL DEFAULT 0,progress INTEGER NOT NULL DEFAULT 0,UNIQUE (timestamp));");
        }

        private void buildUserGroupsTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS usergroups (_id INTEGER PRIMARY KEY,groupid INTEGER NOT NULL DEFAULT 0,groupname VARCHAR(255),creatorpin VARCHAR(10),timestamp INTEGER NOT NULL DEFAULT 0,iconid INTEGER NOT NULL DEFAULT 0,haveunread INTEGER NOT NULL DEFAULT 0,lastactivity INTEGER NOT NULL DEFAULT 0,description TEXT,invitation INTEGER NOT NULL DEFAULT 0,inviteby VARCHAR(10),invitername\tVARCHAR(255),invitationmsg TEXT,UNIQUE (groupid));");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS usergroup_last_activity_idx ON usergroups(lastactivity DESC);");
        }

        private void firstMessage(SQLiteDatabase sQLiteDatabase) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(CatfishDataStorage.SENDERPIN, CatfishService.OFFICIAL_PIN);
            contentValues.put(CatfishDataStorage.SENDERNAME, CatfishService.OFFICIAL_NAME);
            contentValues.put(CatfishDataStorage.RECIPIENT, CatfishService.getUserPIN());
            contentValues.put(CatfishDataStorage.MESSAGETYPE, Integer.valueOf(MessageType.MESSAGE.ordinal()));
            contentValues.put(CatfishDataStorage.TIMESTAMP, Long.valueOf(System.currentTimeMillis()));
            contentValues.put(CatfishDataStorage.CONVERSATION_KEY, CatfishService.getUserPIN() + ":" + CatfishService.OFFICIAL_PIN);
            contentValues.put(CatfishDataStorage.MESSAGE, CatfishService.OFFICIAL_MESSAGE);
            contentValues.put(CatfishDataStorage.DELIVERYSTATUS, Integer.valueOf(MessageDeliveryStatus.RECEIVED.ordinal()));
            contentValues.put(CatfishDataStorage.SEQUENCE, Long.valueOf(System.currentTimeMillis()));
            contentValues.put(CatfishDataStorage.OBJECTSEQUENCE, Long.valueOf(System.currentTimeMillis()));
            contentValues.put(CatfishDataStorage.OBJECTOWNERPIN, CatfishService.OFFICIAL_PIN);
            sQLiteDatabase.insert(CatfishDataStorage.MESSAGES_TABLE_NAME, null, contentValues);
        }

        private void migrateAndBuildIgnoredNicTable(SQLiteDatabase sQLiteDatabase, int i, int i2) {
            Cursor query = sQLiteDatabase.query(CatfishDataStorage.IGNORED_NIC_TABLE_NAME, null, null, null, null, null, null);
            ArrayList arrayList = new ArrayList();
            int count = query.getCount();
            query.moveToFirst();
            int columnIndex = query.getColumnIndex(CatfishDataStorage.USERPIN);
            int columnIndex2 = query.getColumnIndex(CatfishDataStorage.USERNAME);
            int columnIndex3 = query.getColumnIndex(CatfishDataStorage.TIMESTAMP);
            for (int i3 = 0; i3 < count; i3++) {
                query.moveToPosition(i3);
                ContentValues contentValues = new ContentValues();
                contentValues.put(CatfishDataStorage.USERPIN, query.getString(columnIndex));
                contentValues.put(CatfishDataStorage.USERNAME, query.getString(columnIndex2));
                contentValues.put(CatfishDataStorage.TIMESTAMP, query.getString(columnIndex3));
                arrayList.add(contentValues);
            }
            query.close();
            Log.d(CatfishDataStorage.TAG, "DROPING OLD IGNORED_NIC_TABLE_NAME DB");
            sQLiteDatabase.execSQL("DROP TABLE IF EXISTS ignored_nic");
            Log.d(CatfishDataStorage.TAG, "CREATING NEW IGNORED_NIC_TABLE_NAME DB");
            buildIgnoredNicTable(sQLiteDatabase);
            count = arrayList.size();
            for (int i4 = 0; i4 < count; i4++) {
                sQLiteDatabase.insert(CatfishDataStorage.IGNORED_NIC_TABLE_NAME, null, (ContentValues) arrayList.get(i4));
            }
            Log.d(CatfishDataStorage.TAG, "Updating Ignored Nic is Success");
        }

        private void migrateAndBuildMessageTable(SQLiteDatabase sQLiteDatabase, int i, int i2) {
            Cursor query = sQLiteDatabase.query(CatfishDataStorage.MESSAGES_TABLE_NAME, null, null, null, null, null, null);
            ArrayList arrayList = new ArrayList();
            int count = query.getCount();
            query.moveToFirst();
            int columnIndex = query.getColumnIndex(CatfishDataStorage.SENDERPIN);
            int columnIndex2 = query.getColumnIndex(CatfishDataStorage.RECIPIENT);
            int columnIndex3 = query.getColumnIndex(CatfishDataStorage.MESSAGETYPE);
            int columnIndex4 = query.getColumnIndex(CatfishDataStorage.TIMESTAMP);
            int columnIndex5 = query.getColumnIndex(CatfishDataStorage.CONVERSATION_KEY);
            int columnIndex6 = query.getColumnIndex(CatfishDataStorage.MESSAGE);
            int columnIndex7 = query.getColumnIndex(CatfishDataStorage.DELIVERYSTATUS);
            int columnIndex8 = query.getColumnIndex(CatfishDataStorage.SEQUENCE);
            int columnIndex9 = query.getColumnIndex(CatfishDataStorage.IMAGETHUMB_URI);
            int columnIndex10 = query.getColumnIndex(CatfishDataStorage.IMAGEPATH);
            int columnIndex11 = query.getColumnIndex(CatfishDataStorage.VOICEFILEPATH);
            int columnIndex12 = query.getColumnIndex(CatfishDataStorage.OBJECTSEQUENCE);
            int columnIndex13 = query.getColumnIndex(CatfishDataStorage.SENDERNAME);
            int columnIndex14 = query.getColumnIndex(CatfishDataStorage.OBJECTOWNERPIN);
            int columnIndex15 = query.getColumnIndex(CatfishDataStorage.OBJCOMMENTCOUNT);
            int columnIndex16 = query.getColumnIndex(CatfishDataStorage.SLINK);
            String str = null;
            String str2 = null;
            String str3 = null;
            for (int i3 = 0; i3 < count; i3++) {
                query.moveToPosition(i3);
                if (columnIndex9 >= 0) {
                    str = query.getString(columnIndex9);
                }
                if (columnIndex10 >= 0) {
                    str2 = query.getString(columnIndex10);
                }
                if (columnIndex11 >= 0) {
                    str3 = query.getString(columnIndex11);
                }
                ContentValues contentValues = new ContentValues();
                contentValues.put(CatfishDataStorage.SENDERPIN, query.getString(columnIndex));
                if (columnIndex13 >= 0) {
                    contentValues.put(CatfishDataStorage.SENDERNAME, query.getString(columnIndex13));
                }
                contentValues.put(CatfishDataStorage.RECIPIENT, query.getString(columnIndex2));
                contentValues.put(CatfishDataStorage.MESSAGETYPE, Integer.valueOf(query.getInt(columnIndex3)));
                contentValues.put(CatfishDataStorage.TIMESTAMP, Long.valueOf(query.getLong(columnIndex4)));
                contentValues.put(CatfishDataStorage.CONVERSATION_KEY, query.getString(columnIndex5));
                contentValues.put(CatfishDataStorage.MESSAGE, query.getString(columnIndex6));
                contentValues.put(CatfishDataStorage.DELIVERYSTATUS, Integer.valueOf(query.getInt(columnIndex7)));
                contentValues.put(CatfishDataStorage.SEQUENCE, Long.valueOf(query.getLong(columnIndex8)));
                contentValues.put(CatfishDataStorage.IMAGETHUMB_URI, str);
                contentValues.put(CatfishDataStorage.IMAGEPATH, str2);
                contentValues.put(CatfishDataStorage.VOICEFILEPATH, str3);
                if (columnIndex12 >= 0) {
                    contentValues.put(CatfishDataStorage.OBJECTSEQUENCE, Long.valueOf(query.getLong(columnIndex12)));
                }
                if (columnIndex14 >= 0) {
                    contentValues.put(CatfishDataStorage.OBJECTOWNERPIN, query.getString(columnIndex14));
                }
                if (columnIndex15 >= 0) {
                    contentValues.put(CatfishDataStorage.OBJCOMMENTCOUNT, query.getString(columnIndex15));
                }
                if (columnIndex16 >= 0) {
                    contentValues.put(CatfishDataStorage.SLINK, query.getString(columnIndex16));
                }
                arrayList.add(contentValues);
            }
            query.close();
            Log.d(CatfishDataStorage.TAG, "DROPING OLD MESSAGE DB");
            sQLiteDatabase.execSQL("DROP TABLE IF EXISTS messages");
            Log.d(CatfishDataStorage.TAG, "DROPING OLD MESSAGE INDEXES");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS convkey_idx");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS convkey_sequence_idx");
            Log.d(CatfishDataStorage.TAG, "CREATING NEW MESSAGE DB");
            buildMessageTable(sQLiteDatabase);
            int size = arrayList.size();
            for (int i4 = 0; i4 < size; i4++) {
                SQLiteDatabase sQLiteDatabase2 = sQLiteDatabase;
                sQLiteDatabase2.insert(CatfishDataStorage.MESSAGES_TABLE_NAME, null, (ContentValues) arrayList.get(i4));
            }
            Log.d(CatfishDataStorage.TAG, "Updating Message DB is Success");
        }

        private void separateFizzlinkDatabase(SQLiteDatabase sQLiteDatabase, int i, int i2) {
            sQLiteDatabase.endTransaction();
            try {
                sQLiteDatabase.execSQL("ATTACH DATABASE '" + new FizzlinkDataStorage(this.mContext).getDB().getPath() + "' As 'FDB'");
                sQLiteDatabase.execSQL("INSERT INTO FDB.fizzlink_upload SELECT * FROM fizzlink_upload");
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS fizzlink_upload");
                sQLiteDatabase.execSQL("INSERT INTO FDB.fizzlink_download SELECT * FROM fizzlink_download");
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS fizzlink_download");
                sQLiteDatabase.execSQL("DETACH DATABASE FDB");
            } catch (Exception e) {
            }
            sQLiteDatabase.beginTransaction();
        }

        private void separateFriendListDatabase(SQLiteDatabase sQLiteDatabase, int i, int i2) {
            sQLiteDatabase.endTransaction();
            try {
                sQLiteDatabase.execSQL("ALTER TABLE friendlist ADD COLUMN statusupdatemark INTEGER NOT NULL DEFAULT 0;");
                sQLiteDatabase.execSQL("ALTER TABLE friendlist ADD COLUMN photoupdatemark INTEGER NOT NULL DEFAULT 0;");
                sQLiteDatabase.execSQL("ATTACH DATABASE '" + new FriendListDataStorage(this.mContext).getDB().getPath() + "' As 'FDB'");
                sQLiteDatabase.execSQL("INSERT INTO FDB.friendlist SELECT * FROM friendlist");
                sQLiteDatabase.execSQL("INSERT INTO FDB.groupfriend_contact SELECT * FROM groupfriend_contact");
                sQLiteDatabase.execSQL("INSERT INTO FDB.group_contact SELECT * FROM group_contact");
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS friendlist");
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS groupfriend_contact");
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS group_contact");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS last_activity_idx");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS friendname_idx");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS friendlistrequest_idx");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS categorychild_idx");
                sQLiteDatabase.execSQL("DETACH DATABASE FDB");
            } catch (Exception e) {
                e.printStackTrace();
            }
            sQLiteDatabase.beginTransaction();
        }

        private void separateRequestFriendDatabase(SQLiteDatabase sQLiteDatabase, int i, int i2) {
            sQLiteDatabase.endTransaction();
            try {
                sQLiteDatabase.execSQL("ATTACH DATABASE '" + new FriendListDataStorage(this.mContext).getDB().getPath() + "' As 'FDB'");
                sQLiteDatabase.execSQL("INSERT INTO FDB.requestfriend SELECT * FROM requestfriend");
                sQLiteDatabase.execSQL("INSERT INTO FDB.pendingreq SELECT * FROM pendingreq");
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS requestfriend");
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS pendingreq");
                sQLiteDatabase.execSQL("DETACH DATABASE FDB");
            } catch (Exception e) {
            }
            sQLiteDatabase.beginTransaction();
        }

        private void separateStatusCommentMessage(SQLiteDatabase sQLiteDatabase, int i, int i2) {
            sQLiteDatabase.execSQL("INSERT INTO status SELECT * FROM messages WHERE convkey LIKE 'sc:%' ");
            sQLiteDatabase.delete(CatfishDataStorage.MESSAGES_TABLE_NAME, "convkey LIKE 'sc:%' ", null);
        }

        private void separateUserProfileDatabase(SQLiteDatabase sQLiteDatabase, int i, int i2) {
            sQLiteDatabase.endTransaction();
            try {
                sQLiteDatabase.execSQL("ATTACH DATABASE '" + new FriendListDataStorage(this.mContext).getDB().getPath() + "' As 'FDB'");
                sQLiteDatabase.execSQL("INSERT INTO FDB.user_profile SELECT * FROM user_profile");
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS user_profile");
                sQLiteDatabase.execSQL("DETACH DATABASE FDB");
            } catch (Exception e) {
            }
            sQLiteDatabase.beginTransaction();
        }

        public void onCreate(SQLiteDatabase sQLiteDatabase) {
            buildMessageTable(sQLiteDatabase);
            buildRecentUpdatesTable(sQLiteDatabase);
            buildUserGroupsTable(sQLiteDatabase);
            buildGroupMemberTable(sQLiteDatabase);
            buildSvgCodeTable(sQLiteDatabase);
            buildIgnoredNicTable(sQLiteDatabase);
            buildObjectCommentTable(sQLiteDatabase);
            buildNicProfileTable(sQLiteDatabase);
            buildStatusCommentTable(sQLiteDatabase);
            firstMessage(sQLiteDatabase);
        }

        public void onUpgrade(SQLiteDatabase sQLiteDatabase, int i, int i2) {
            String str;
            Log.d(CatfishDataStorage.TAG, "Upgrade DB from version: " + String.valueOf(i) + " to version: " + String.valueOf(i2));
            if (i >= 97) {
                Log.d(CatfishDataStorage.TAG, "olversion is >= 97.");
            } else if (i >= 96) {
                buildAndMigrateReceUpdatesTable(sQLiteDatabase);
            } else if (i >= 95) {
                buildAndMigrateReceUpdatesTable(sQLiteDatabase);
            } else if (i >= 94) {
                buildAndMigrateReceUpdatesTable(sQLiteDatabase);
            } else if (i >= 93) {
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotesendernic VARCHAR(10);");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotesendername VARCHAR(255);");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotemessage TEXT;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentfilesize INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentwidth INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentheight INTEGER NOT NULL DEFAULT 0;");
                buildAndMigrateReceUpdatesTable(sQLiteDatabase);
            } else if (i >= 92) {
                r0 = sQLiteDatabase.query(CatfishDataStorage.MESSAGES_TABLE_NAME, null, null, null, null, null, null);
                r1 = r0.getColumnIndex(CatfishDataStorage.FIZZLINK_SENDER_PIN);
                r0.close();
                if (r1 < 0) {
                    str = "ALTER TABLE messages ADD COLUMN fizzlinksenderpin TEXT ;";
                    sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinksenderpin TEXT ;");
                }
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotesendernic VARCHAR(10);");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotesendername VARCHAR(255);");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotemessage TEXT;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentfilesize INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentwidth INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentheight INTEGER NOT NULL DEFAULT 0;");
                buildAndMigrateReceUpdatesTable(sQLiteDatabase);
            } else if (i >= 91) {
                r0 = sQLiteDatabase.query(CatfishDataStorage.MESSAGES_TABLE_NAME, null, null, null, null, null, null);
                r1 = r0.getColumnIndex(CatfishDataStorage.FIZZLINK_DOWNLOADED);
                int columnIndex = r0.getColumnIndex(CatfishDataStorage.FIZZLINK_SENDER_PIN);
                r0.close();
                if (r1 < 0) {
                    str = "ALTER TABLE messages ADD COLUMN fizzlinkdownloaded INTEGER NOT NULL DEFAULT 0 ;";
                    sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkdownloaded INTEGER NOT NULL DEFAULT 0 ;");
                }
                if (columnIndex < 0) {
                    str = "ALTER TABLE messages ADD COLUMN fizzlinksenderpin TEXT ;";
                    sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinksenderpin TEXT ;");
                }
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotesendernic VARCHAR(10);");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotesendername VARCHAR(255);");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotemessage TEXT;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentfilesize INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentwidth INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentheight INTEGER NOT NULL DEFAULT 0;");
                buildAndMigrateReceUpdatesTable(sQLiteDatabase);
            } else if (i >= 90) {
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkdownloaded INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinksenderpin TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotesendernic VARCHAR(10);");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotesendername VARCHAR(255);");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotemessage TEXT;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentfilesize INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentwidth INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentheight INTEGER NOT NULL DEFAULT 0;");
                buildAndMigrateReceUpdatesTable(sQLiteDatabase);
            } else if (i >= 89) {
                buildAndMigrateReceUpdatesTable(sQLiteDatabase);
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkdownloaded INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinksenderpin TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotesendernic VARCHAR(10);");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotesendername VARCHAR(255);");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotemessage TEXT;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentfilesize INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentwidth INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentheight INTEGER NOT NULL DEFAULT 0;");
            } else if (i >= 88) {
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkfilename TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkdownloaded INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkdatasize INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkfilepath TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinksendername TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkdesc TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinksenderpin TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkdatatype INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotesendernic VARCHAR(10);");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotesendername VARCHAR(255);");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotemessage TEXT;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentfilesize INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentwidth INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentheight INTEGER NOT NULL DEFAULT 0;");
                buildAndMigrateReceUpdatesTable(sQLiteDatabase);
            } else if (i >= 87) {
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkfilename TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkdownloaded INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkdatasize INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkfilepath TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinksendername TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkdesc TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkdatatype INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinksenderpin TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN streamthumbnail INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotesendernic VARCHAR(10);");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotesendername VARCHAR(255);");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotemessage TEXT;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentfilesize INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentwidth INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentheight INTEGER NOT NULL DEFAULT 0;");
                buildAndMigrateReceUpdatesTable(sQLiteDatabase);
            } else if (i >= 86) {
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN streamthumbnail INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkdownloaded INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkfilename TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkdatasize INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkfilepath TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinksendername TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkdesc TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinksenderpin TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkdatatype INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotesendernic VARCHAR(10);");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotesendername VARCHAR(255);");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN quotemessage TEXT;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentfilesize INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentwidth INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN attachmentheight INTEGER NOT NULL DEFAULT 0;");
                buildAndMigrateReceUpdatesTable(sQLiteDatabase);
                firstMessage(sQLiteDatabase);
            } else if (i >= 82) {
                buildAndMigrateReceUpdatesTable(sQLiteDatabase);
                firstMessage(sQLiteDatabase);
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN streamthumbnail INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkdownloaded INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinksenderpin TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkfilename TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkdatasize INTEGER NOT NULL DEFAULT 0 ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkfilepath TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinksendername TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkdesc TEXT ;");
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN fizzlinkdatatype INTEGER NOT NULL DEFAULT 0 ;");
            } else if (i >= 74) {
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS recentupdates");
                buildAndMigrateReceUpdatesTable(sQLiteDatabase);
                firstMessage(sQLiteDatabase);
            } else if (i >= 72) {
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS recentupdates");
                buildAndMigrateReceUpdatesTable(sQLiteDatabase);
                firstMessage(sQLiteDatabase);
                buildNicProfileTable(sQLiteDatabase);
            } else if (i >= 71) {
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                buildNicProfileTable(sQLiteDatabase);
                buildAndMigrateReceUpdatesTable(sQLiteDatabase);
                firstMessage(sQLiteDatabase);
            } else if (i >= 69) {
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                buildNicProfileTable(sQLiteDatabase);
                buildAndMigrateReceUpdatesTable(sQLiteDatabase);
            } else if (i >= 68) {
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                buildObjectCommentTable(sQLiteDatabase);
                buildNicProfileTable(sQLiteDatabase);
                buildAndMigrateReceUpdatesTable(sQLiteDatabase);
            } else if (i >= 67) {
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                buildObjectCommentTable(sQLiteDatabase);
                buildIgnoredNicTable(sQLiteDatabase);
                buildNicProfileTable(sQLiteDatabase);
            } else if (i >= 66) {
                buildObjectCommentTable(sQLiteDatabase);
                buildIgnoredNicTable(sQLiteDatabase);
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                buildNicProfileTable(sQLiteDatabase);
            } else if (i >= 64) {
                buildObjectCommentTable(sQLiteDatabase);
                buildIgnoredNicTable(sQLiteDatabase);
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                buildNicProfileTable(sQLiteDatabase);
            } else if (i >= 62) {
                buildObjectCommentTable(sQLiteDatabase);
                buildIgnoredNicTable(sQLiteDatabase);
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                buildNicProfileTable(sQLiteDatabase);
            } else if (i >= 59) {
                buildObjectCommentTable(sQLiteDatabase);
                buildIgnoredNicTable(sQLiteDatabase);
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                refreshCategory();
                buildNicProfileTable(sQLiteDatabase);
            } else if (i >= 58) {
                buildObjectCommentTable(sQLiteDatabase);
                buildIgnoredNicTable(sQLiteDatabase);
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                refreshCategory();
                buildNicProfileTable(sQLiteDatabase);
            } else if (i >= 57) {
                buildObjectCommentTable(sQLiteDatabase);
                buildIgnoredNicTable(sQLiteDatabase);
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                buildSvgCodeTable(sQLiteDatabase);
                refreshCategory();
                buildNicProfileTable(sQLiteDatabase);
            } else if (i >= 53) {
                buildObjectCommentTable(sQLiteDatabase);
                buildIgnoredNicTable(sQLiteDatabase);
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                refreshCategory();
                buildSvgCodeTable(sQLiteDatabase);
                buildNicProfileTable(sQLiteDatabase);
            } else if (i >= 48) {
                buildObjectCommentTable(sQLiteDatabase);
                buildIgnoredNicTable(sQLiteDatabase);
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                refreshCategory();
                buildSvgCodeTable(sQLiteDatabase);
                buildNicProfileTable(sQLiteDatabase);
            } else if (i >= 43) {
                buildObjectCommentTable(sQLiteDatabase);
                buildIgnoredNicTable(sQLiteDatabase);
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                refreshCategory();
                buildSvgCodeTable(sQLiteDatabase);
                buildNicProfileTable(sQLiteDatabase);
            } else if (i >= 42) {
                buildObjectCommentTable(sQLiteDatabase);
                buildIgnoredNicTable(sQLiteDatabase);
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                refreshCategory();
                buildSvgCodeTable(sQLiteDatabase);
                buildNicProfileTable(sQLiteDatabase);
            } else if (i >= 41) {
                buildObjectCommentTable(sQLiteDatabase);
                buildIgnoredNicTable(sQLiteDatabase);
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                refreshCategory();
                buildSvgCodeTable(sQLiteDatabase);
                buildNicProfileTable(sQLiteDatabase);
            } else if (i >= 39) {
                buildObjectCommentTable(sQLiteDatabase);
                buildIgnoredNicTable(sQLiteDatabase);
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                refreshCategory();
                buildSvgCodeTable(sQLiteDatabase);
                buildNicProfileTable(sQLiteDatabase);
            } else if (i >= 28) {
                buildObjectCommentTable(sQLiteDatabase);
                buildIgnoredNicTable(sQLiteDatabase);
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                refreshCategory();
                buildSvgCodeTable(sQLiteDatabase);
                buildNicProfileTable(sQLiteDatabase);
            } else if (i >= 27) {
                buildObjectCommentTable(sQLiteDatabase);
                buildIgnoredNicTable(sQLiteDatabase);
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                refreshCategory();
                buildSvgCodeTable(sQLiteDatabase);
                buildNicProfileTable(sQLiteDatabase);
            } else if (i >= 24) {
                buildObjectCommentTable(sQLiteDatabase);
                buildIgnoredNicTable(sQLiteDatabase);
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS usergroups");
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS usergroup_member");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS usergroup_last_activity_idx");
                buildUserGroupsTable(sQLiteDatabase);
                buildGroupMemberTable(sQLiteDatabase);
                refreshCategory();
                buildSvgCodeTable(sQLiteDatabase);
                buildNicProfileTable(sQLiteDatabase);
            } else if (i >= 17) {
                buildObjectCommentTable(sQLiteDatabase);
                buildIgnoredNicTable(sQLiteDatabase);
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS usergroups");
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS usergroup_member");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS usergroup_last_activity_idx");
                buildUserGroupsTable(sQLiteDatabase);
                buildGroupMemberTable(sQLiteDatabase);
                buildSvgCodeTable(sQLiteDatabase);
                buildNicProfileTable(sQLiteDatabase);
            } else if (i >= 13) {
                buildObjectCommentTable(sQLiteDatabase);
                buildIgnoredNicTable(sQLiteDatabase);
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS messages");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS convkey_idx");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS convkey_sequence_idx");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS deliverystatus_idx");
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                buildUserGroupsTable(sQLiteDatabase);
                buildGroupMemberTable(sQLiteDatabase);
                buildSvgCodeTable(sQLiteDatabase);
                buildNicProfileTable(sQLiteDatabase);
            } else if (i >= 9) {
                buildObjectCommentTable(sQLiteDatabase);
                buildIgnoredNicTable(sQLiteDatabase);
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS recentupdates");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS timestamp_idx");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS deliverystatus_idx");
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                buildRecentUpdatesTable(sQLiteDatabase);
                buildUserGroupsTable(sQLiteDatabase);
                buildGroupMemberTable(sQLiteDatabase);
                buildSvgCodeTable(sQLiteDatabase);
                buildNicProfileTable(sQLiteDatabase);
            } else {
                buildObjectCommentTable(sQLiteDatabase);
                buildIgnoredNicTable(sQLiteDatabase);
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS recentupdates");
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS usergroups");
                sQLiteDatabase.execSQL("DROP TABLE IF EXISTS usergroup_member");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS usergroup_last_activity_idx");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS friendname_idx");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS timestamp_idx");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS deliverystatus_idx");
                migrateAndBuildMessageTable(sQLiteDatabase, i, i2);
                buildRecentUpdatesTable(sQLiteDatabase);
                buildUserGroupsTable(sQLiteDatabase);
                buildGroupMemberTable(sQLiteDatabase);
                buildSvgCodeTable(sQLiteDatabase);
                buildNicProfileTable(sQLiteDatabase);
            }
            if (i <= 78) {
                separateFriendListDatabase(sQLiteDatabase, i, i2);
            }
            if (i <= 80) {
                separateRequestFriendDatabase(sQLiteDatabase, i, i2);
                separateUserProfileDatabase(sQLiteDatabase, i, i2);
            }
            if (i <= 81) {
                separateFizzlinkDatabase(sQLiteDatabase, i, i2);
            }
            if (i <= 97) {
                Log.d(CatfishDataStorage.TAG, "Upgrade from " + i + " to " + i2);
                str = "ALTER TABLE messages ADD COLUMN datatype INTEGER NOT NULL DEFAULT 0;";
                sQLiteDatabase.execSQL("ALTER TABLE messages ADD COLUMN datatype INTEGER NOT NULL DEFAULT 0;");
            }
            Log.d(CatfishDataStorage.TAG, "Upgrade DB from version: " + String.valueOf(i) + " to version: " + String.valueOf(i2) + " Finish");
        }

        public void refreshCategory() {
            this.mContext.getSharedPreferences(CatfishDataStorage.PREFERENCE_NAME, 0).edit().putInt(CatfishDataStorage.REBUILD_CATEGORY, 1).commit();
        }
    }

    public CatfishDataStorage(Context context) {
        if (mDBHelper == null) {
            Log.d(TAG, "Create new DB Helper");
            mDBHelper = new DatabaseHelper(context);
        }
        this.mContext = context;
    }

    private boolean deleteRecentUpdateBySenderPin(SQLiteDatabase sQLiteDatabase, String str, int i) {
        long delete = (long) sQLiteDatabase.delete(RECENTUPDATES_TABLE_NAME, "recuserpin = '" + str + "' AND " + RECENT_ACTION_CODE + " = " + i + "", null);
        if (delete <= 0) {
            Log.e(TAG, "---DATASTORAGE: FAIL TO DELETE " + str + "actioncode: " + i + " in recentupdate");
        }
        return delete > 0;
    }

    public static CatfishMessageObject friendLastMessageBuilder(Cursor cursor) {
        CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
        int columnIndex = cursor.getColumnIndex(MESSAGE);
        int columnIndex2 = cursor.getColumnIndex(MESSAGETYPE);
        int columnIndex3 = cursor.getColumnIndex(SEQUENCE);
        int columnIndex4 = cursor.getColumnIndex(DELIVERYSTATUS);
        int columnIndex5 = cursor.getColumnIndex(DATAFILEPATH);
        int columnIndex6 = cursor.getColumnIndex(IMAGEPATH);
        int columnIndex7 = cursor.getColumnIndex(VOICEFILEPATH);
        cursor.moveToFirst();
        catfishMessageObject.sequence = cursor.getLong(columnIndex3);
        catfishMessageObject.message = cursor.getString(columnIndex);
        catfishMessageObject.deliverystatus = MessageDeliveryStatus.values()[cursor.getInt(columnIndex4)];
        catfishMessageObject.type = cursor.getInt(columnIndex2);
        catfishMessageObject.datafile_path = cursor.getString(columnIndex5);
        if (catfishMessageObject.datafile_path == null || catfishMessageObject.datafile_path.isEmpty()) {
            catfishMessageObject.datafile_path = cursor.getString(columnIndex6);
        }
        if (catfishMessageObject.datafile_path == null || catfishMessageObject.datafile_path.isEmpty()) {
            catfishMessageObject.datafile_path = cursor.getString(columnIndex7);
        }
        return catfishMessageObject;
    }

    private long getSelfUpdateTimeStamp() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return 0;
        }
        Cursor rawQuery = db.rawQuery("SELECT rectimestamp FROM recentupdates WHERE recactioncode = " + UpdateRecent.SELFSTATUSUPDT.ordinal(), null);
        if (rawQuery.getCount() <= 0) {
            rawQuery.close();
            return 0;
        }
        rawQuery.moveToFirst();
        long j = rawQuery.getLong(rawQuery.getColumnIndex(RECENT_TIMESTAMP));
        rawQuery.close();
        return j;
    }

    private long getUpdateTimeStamp(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return 0;
        }
        Cursor rawQuery = db.rawQuery("SELECT rectimestamp FROM recentupdates WHERE recrecipient = '" + str + "' AND " + RECENT_ACTION_CODE + " = " + UpdateRecent.STATUSUPDT.ordinal(), null);
        if (rawQuery.getCount() <= 0) {
            rawQuery.close();
            return 0;
        }
        rawQuery.moveToFirst();
        long j = rawQuery.getLong(rawQuery.getColumnIndex(RECENT_TIMESTAMP));
        rawQuery.close();
        return j;
    }

    public void addFirstMessage() {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(SENDERPIN, CatfishService.OFFICIAL_PIN);
            contentValues.put(SENDERNAME, CatfishService.OFFICIAL_NAME);
            contentValues.put(RECIPIENT, CatfishService.getUserPIN());
            contentValues.put(MESSAGETYPE, Integer.valueOf(MessageType.MESSAGE.ordinal()));
            contentValues.put(TIMESTAMP, Long.valueOf(System.currentTimeMillis()));
            contentValues.put(CONVERSATION_KEY, CatfishService.getUserPIN() + ":" + CatfishService.OFFICIAL_PIN);
            contentValues.put(MESSAGE, CatfishService.OFFICIAL_MESSAGE);
            contentValues.put(DELIVERYSTATUS, Integer.valueOf(MessageDeliveryStatus.RECEIVED.ordinal()));
            contentValues.put(SEQUENCE, Long.valueOf(System.currentTimeMillis()));
            contentValues.put(OBJECTSEQUENCE, Long.valueOf(System.currentTimeMillis()));
            contentValues.put(OBJECTOWNERPIN, CatfishService.OFFICIAL_PIN);
            db.insert(MESSAGES_TABLE_NAME, null, contentValues);
        }
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean addRecentupdates(com.catfiz.service.CatfishMessageObject r27) {
        /*
        r26 = this;
        r0 = r27;
        r2 = r0.senderpin;
        if (r2 != 0) goto L_0x000f;
    L_0x0006:
        r2 = "CatfishDataStorage";
        r3 = "addRecentupdates: invalid senderpin: null";
        com.catfiz.util.Log.e(r2, r3);
        r2 = 0;
    L_0x000e:
        return r2;
    L_0x000f:
        r20 = r26.getDB();
        if (r20 != 0) goto L_0x0017;
    L_0x0015:
        r2 = 0;
        goto L_0x000e;
    L_0x0017:
        r21 = new com.catfiz.service.FriendListDataStorage;
        r0 = r26;
        r2 = r0.mContext;
        r0 = r21;
        r0.<init>(r2);
        r0 = r27;
        r2 = r0.senderpin;
        r0 = r21;
        r16 = r0.getFriendStatusSequence(r2);
        r0 = r27;
        r2 = r0.senderpin;
        r0 = r21;
        r10 = r0.getFriendStatus(r2);
        r9 = 0;
        r8 = 0;
        r2 = "";
        r2 = "";
        r0 = r27;
        r13 = r0.senderpin;
        r0 = r27;
        r14 = r0.recipient;
        r2 = "CatfishDataStorage";
        r3 = new java.lang.StringBuilder;
        r3.<init>();
        r4 = "senderpin : ";
        r3 = r3.append(r4);
        r0 = r27;
        r4 = r0.senderpin;
        r3 = r3.append(r4);
        r4 = " recipient :";
        r3 = r3.append(r4);
        r0 = r27;
        r4 = r0.recipient;
        r3 = r3.append(r4);
        r4 = " object owner : ";
        r3 = r3.append(r4);
        r0 = r27;
        r4 = r0.object_owner;
        r3 = r3.append(r4);
        r4 = " message type : ";
        r3 = r3.append(r4);
        r0 = r27;
        r4 = r0.messagetype;
        r3 = r3.append(r4);
        r3 = r3.toString();
        com.catfiz.util.Log.d(r2, r3);
        r0 = r27;
        r2 = r0.senderpin;
        r3 = com.catfiz.service.CatfishService.getUserPIN();
        r2 = r2.equals(r3);
        if (r2 == 0) goto L_0x00c6;
    L_0x0098:
        r0 = r27;
        r2 = r0.recipient;
        r3 = com.catfiz.service.CatfishService.getUserPIN();
        r2 = r2.equals(r3);
        if (r2 == 0) goto L_0x00c6;
    L_0x00a6:
        r3 = "";
        r2 = "";
    L_0x00aa:
        r7 = 0;
        r6 = 0;
        r4 = 0;
        r5 = 0;
        r0 = r27;
        r0 = r0.rcvtimestamp;
        r22 = r0;
        r11 = com.catfiz.service.CatfishDataStorage.AnonymousClass1.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType;
        r0 = r27;
        r12 = r0.messagetype;
        r12 = r12.ordinal();
        r11 = r11[r12];
        switch(r11) {
            case 1: goto L_0x00d3;
            case 2: goto L_0x01c1;
            case 3: goto L_0x0320;
            case 4: goto L_0x04a1;
            case 5: goto L_0x0550;
            default: goto L_0x00c3;
        };
    L_0x00c3:
        r2 = 0;
        goto L_0x000e;
    L_0x00c6:
        r0 = r21;
        r3 = r0.getFriendname(r13);
        r0 = r21;
        r2 = r0.getFriendname(r14);
        goto L_0x00aa;
    L_0x00d3:
        r11 = "";
        r2 = com.catfiz.service.CatfishService.UpdateRecent.PHOTOUPDT;
        r2 = r2.ordinal();
        r0 = r27;
        r12 = r0.senderpin;
        r0 = r27;
        r14 = r0.senderpin;
        r0 = r26;
        r1 = r20;
        r0.deleteRecentUpdateBySenderPin(r1, r14, r2);
        r14 = r8;
        r15 = r9;
        r18 = r16;
        r9 = r10;
        r16 = r12;
        r8 = r2;
        r12 = r3;
        r10 = r11;
        r11 = r13;
        r24 = r5;
        r5 = r4;
        r4 = r24;
    L_0x00fa:
        if (r11 == 0) goto L_0x0587;
    L_0x00fc:
        r2 = r11.isEmpty();
        if (r2 != 0) goto L_0x0587;
    L_0x0102:
        r2 = "null";
        r2 = r11.equals(r2);
        if (r2 != 0) goto L_0x0587;
    L_0x010a:
        r0 = r21;
        r2 = r0.getFriendAlias(r11);
        if (r2 == 0) goto L_0x0587;
    L_0x0112:
        r17 = r2.isEmpty();
        if (r17 != 0) goto L_0x0587;
    L_0x0118:
        r3 = new android.content.ContentValues;
        r3.<init>();
        r17 = "recuserpin";
        r0 = r17;
        r3.put(r0, r13);
        r13 = "recusername";
        r3.put(r13, r12);
        if (r11 == 0) goto L_0x0130;
    L_0x012b:
        r12 = "recrecipient";
        r3.put(r12, r11);
    L_0x0130:
        r11 = "recrecipientname";
        r3.put(r11, r2);
        r2 = "recaction";
        r3.put(r2, r10);
        r2 = "recactioncode";
        r8 = java.lang.Integer.valueOf(r8);
        r3.put(r2, r8);
        r2 = "recstatus";
        r0 = r16;
        r3.put(r2, r0);
        r2 = "rectimestamp";
        r8 = java.lang.Long.valueOf(r22);
        r3.put(r2, r8);
        r2 = "reclikecount";
        r6 = java.lang.Integer.valueOf(r6);
        r3.put(r2, r6);
        r2 = "CatfishDataStorage";
        r6 = new java.lang.StringBuilder;
        r6.<init>();
        r8 = "comment count : ";
        r6 = r6.append(r8);
        r6 = r6.append(r7);
        r6 = r6.toString();
        com.catfiz.util.Log.d(r2, r6);
        r2 = "recstatcount";
        r6 = java.lang.Integer.valueOf(r7);
        r3.put(r2, r6);
        r2 = "recisuserlike";
        r5 = java.lang.Integer.valueOf(r5);
        r3.put(r2, r5);
        r2 = "recisusercomment";
        r4 = java.lang.Integer.valueOf(r4);
        r3.put(r2, r4);
        r2 = "recmessage";
        r3.put(r2, r9);
        r2 = "recstatusseq";
        r4 = java.lang.Long.valueOf(r18);
        r3.put(r2, r4);
        r2 = "recnewcomment";
        r4 = java.lang.Integer.valueOf(r15);
        r3.put(r2, r4);
        r2 = "recnewlike";
        r4 = java.lang.Integer.valueOf(r14);
        r3.put(r2, r4);
        r2 = "recentupdates";
        r4 = 0;
        r0 = r20;
        r2 = r0.insert(r2, r4, r3);
        r4 = 0;
        r2 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1));
        if (r2 <= 0) goto L_0x0584;
    L_0x01be:
        r2 = 1;
        goto L_0x000e;
    L_0x01c1:
        r0 = r21;
        r1 = r27;
        r10 = r0.getLIkeCount(r1);
        r0 = r27;
        r3 = r0.senderpin;
        r5 = com.catfiz.service.CatfishService.getUserPIN();
        r3 = r3.equals(r5);
        if (r3 == 0) goto L_0x02ad;
    L_0x01d7:
        r0 = r27;
        r3 = r0.recipient;
        r5 = com.catfiz.service.CatfishService.getUserPIN();
        r3 = r3.equals(r5);
        if (r3 == 0) goto L_0x02ad;
    L_0x01e5:
        r3 = "recentupdates";
        r5 = new java.lang.StringBuilder;
        r5.<init>();
        r6 = "recactioncode = ";
        r5 = r5.append(r6);
        r6 = com.catfiz.service.CatfishService.UpdateRecent.SELFSTATUSUPDT;
        r6 = r6.ordinal();
        r5 = r5.append(r6);
        r5 = r5.toString();
        r6 = 0;
        r0 = r20;
        r0.delete(r3, r5, r6);
        r3 = com.catfiz.service.CatfishService.getCatfishPreferences();
        r5 = "userstatus";
        r6 = "";
        r6 = r3.getString(r5, r6);
        r3 = com.catfiz.service.CatfishService.UpdateRecent.SELFSTATUSUPDT;
        r5 = r3.ordinal();
        r0 = r27;
        r3 = r0.isUserLike;
        r7 = 1;
        if (r3 != r7) goto L_0x02a9;
    L_0x021f:
        r3 = r10 + 1;
    L_0x0221:
        r7 = r6;
        r24 = r3;
        r3 = r4;
        r4 = r24;
    L_0x0227:
        r0 = r27;
        r10 = r0.object_sequence;
        r0 = r26;
        r10 = r0.isMeComment(r10);
        r11 = -1;
        if (r4 != r11) goto L_0x0235;
    L_0x0234:
        r4 = 0;
    L_0x0235:
        r0 = r27;
        r11 = r0.isUserLike;
        r12 = 1;
        if (r11 == r12) goto L_0x0247;
    L_0x023c:
        r0 = r27;
        r11 = r0.message;
        r11 = java.lang.Integer.parseInt(r11);
        if (r11 <= 0) goto L_0x0247;
    L_0x0246:
        r8 = 1;
    L_0x0247:
        r0 = r27;
        r11 = r0.conversation_key;
        r12 = "sl";
        r15 = "sc";
        r12 = r11.replace(r12, r15);
        r0 = r27;
        r11 = r0.recipient;
        r0 = r21;
        r16 = r0.getFriendStatusSequence(r11);
        r0 = r26;
        r11 = r0.getStatusCount(r12);
        r15 = "CatfishDataStorage";
        r18 = new java.lang.StringBuilder;
        r18.<init>();
        r19 = "conversation key : ";
        r18 = r18.append(r19);
        r0 = r18;
        r12 = r0.append(r12);
        r18 = "status count : ";
        r0 = r18;
        r12 = r12.append(r0);
        r12 = r12.append(r11);
        r12 = r12.toString();
        com.catfiz.util.Log.d(r15, r12);
        r0 = r27;
        r15 = r0.username;
        r0 = r27;
        r12 = r0.message;
        r18 = r16;
        r16 = r7;
        r7 = r11;
        r11 = r14;
        r14 = r8;
        r8 = r5;
        r5 = r3;
        r3 = r2;
        r24 = r4;
        r4 = r10;
        r10 = r6;
        r6 = r24;
        r25 = r9;
        r9 = r12;
        r12 = r15;
        r15 = r25;
        goto L_0x00fa;
    L_0x02a9:
        r3 = r10 + -1;
        goto L_0x0221;
    L_0x02ad:
        r3 = com.catfiz.service.CatfishService.UpdateRecent.STATUSUPDT;
        r5 = r3.ordinal();
        r0 = r27;
        r3 = r0.recipient;
        r0 = r21;
        r7 = r0.getFriendStatus(r3);
        r0 = r26;
        r3 = r0.mContext;
        r3 = r3.getResources();
        r4 = com.catfiz.R.string.rac_friend_statusupdate;
        r6 = r3.getString(r4);
        r0 = r27;
        r3 = r0.isUserLike;
        r4 = 1;
        if (r3 != r4) goto L_0x030e;
    L_0x02d2:
        r3 = 1;
        r4 = r10 + 1;
    L_0x02d5:
        r10 = "recentupdates";
        r11 = new java.lang.StringBuilder;
        r11.<init>();
        r12 = "recrecipient = '";
        r11 = r11.append(r12);
        r11 = r11.append(r14);
        r12 = "' AND ";
        r11 = r11.append(r12);
        r12 = "recactioncode";
        r11 = r11.append(r12);
        r12 = " = ";
        r11 = r11.append(r12);
        r12 = com.catfiz.service.CatfishService.UpdateRecent.STATUSUPDT;
        r12 = r12.ordinal();
        r11 = r11.append(r12);
        r11 = r11.toString();
        r12 = 0;
        r0 = r20;
        r0.delete(r10, r11, r12);
        goto L_0x0227;
    L_0x030e:
        r0 = r27;
        r3 = r0.isUserLike;
        r4 = 2;
        if (r3 != r4) goto L_0x0319;
    L_0x0315:
        r3 = 0;
    L_0x0316:
        r4 = r10 + -1;
        goto L_0x02d5;
    L_0x0319:
        r0 = r26;
        r3 = r0.isMeLike(r14);
        goto L_0x0316;
    L_0x0320:
        r0 = r27;
        r14 = r0.object_owner;
        r2 = com.catfiz.service.CatfishService.UpdateRecent.STATUSUPDT;
        r2.ordinal();
        r2 = "CatfishDataStorage";
        r4 = new java.lang.StringBuilder;
        r4.<init>();
        r5 = "STATUSCOMMENT: userpin: ";
        r4 = r4.append(r5);
        r0 = r27;
        r5 = r0.userpin;
        r4 = r4.append(r5);
        r5 = ", senderpin: ";
        r4 = r4.append(r5);
        r0 = r27;
        r5 = r0.senderpin;
        r4 = r4.append(r5);
        r5 = ", recipient: ";
        r4 = r4.append(r5);
        r0 = r27;
        r5 = r0.recipient;
        r4 = r4.append(r5);
        r5 = ", objowner: ";
        r4 = r4.append(r5);
        r0 = r27;
        r5 = r0.object_owner;
        r4 = r4.append(r5);
        r5 = ", objseq: ";
        r4 = r4.append(r5);
        r0 = r27;
        r6 = r0.object_sequence;
        r4 = r4.append(r6);
        r4 = r4.toString();
        com.catfiz.util.Log.d(r2, r4);
        r0 = r26;
        r6 = r0.isMeLike(r14);
        r2 = "recentupdates";
        r4 = new java.lang.StringBuilder;
        r4.<init>();
        r5 = "recrecipient = '";
        r4 = r4.append(r5);
        r4 = r4.append(r14);
        r5 = "' AND (";
        r4 = r4.append(r5);
        r5 = "recactioncode";
        r4 = r4.append(r5);
        r5 = " = ";
        r4 = r4.append(r5);
        r5 = com.catfiz.service.CatfishService.UpdateRecent.STATUSUPDT;
        r5 = r5.ordinal();
        r4 = r4.append(r5);
        r5 = " OR ";
        r4 = r4.append(r5);
        r5 = "recactioncode";
        r4 = r4.append(r5);
        r5 = " = ";
        r4 = r4.append(r5);
        r5 = com.catfiz.service.CatfishService.UpdateRecent.SELFSTATUSUPDT;
        r5 = r5.ordinal();
        r4 = r4.append(r5);
        r5 = ")";
        r4 = r4.append(r5);
        r4 = r4.toString();
        r5 = 0;
        r0 = r20;
        r0.delete(r2, r4, r5);
        r0 = r27;
        r2 = r0.isUserComment;
        if (r2 == 0) goto L_0x0489;
    L_0x03e2:
        r2 = 1;
    L_0x03e3:
        r0 = r27;
        r4 = r0.isUserComment;
        if (r4 != 0) goto L_0x058a;
    L_0x03e9:
        r4 = 1;
    L_0x03ea:
        r0 = r21;
        r1 = r27;
        r7 = r0.getLIkeCount(r1);
        r0 = r27;
        r5 = r0.conversation_key;
        r0 = r26;
        r5 = r0.getStatusCount(r5);
        r9 = r5 + r2;
        r5 = "CatfishDataStorage";
        r10 = new java.lang.StringBuilder;
        r10.<init>();
        r11 = "status count : ";
        r10 = r10.append(r11);
        r10 = r10.append(r9);
        r11 = " friend name :";
        r10 = r10.append(r11);
        r3 = r10.append(r3);
        r10 = " sender pin : ";
        r3 = r3.append(r10);
        r0 = r27;
        r10 = r0.object_owner;
        r3 = r3.append(r10);
        r3 = r3.toString();
        com.catfiz.util.Log.d(r5, r3);
        r0 = r27;
        r0 = r0.object_sequence;
        r16 = r0;
        r0 = r27;
        r3 = r0.senderpin;
        r0 = r21;
        r15 = r0.getFriendname(r3);
        r0 = r27;
        r3 = r0.object_owner;
        r5 = com.catfiz.service.CatfishService.getUserPIN();
        r3 = r3.equals(r5);
        if (r3 == 0) goto L_0x048c;
    L_0x044c:
        r5 = com.catfiz.service.CatfishService.getCatfishPreferences();
        r3 = "username";
        r10 = "";
        r3 = r5.getString(r3, r10);
        r10 = "userstatus";
        r11 = "";
        r5 = r5.getString(r10, r11);
    L_0x0460:
        r0 = r26;
        r10 = r0.mContext;
        r10 = r10.getResources();
        r11 = com.catfiz.R.string.rac_friend_statusupdate;
        r12 = r10.getString(r11);
        r10 = com.catfiz.service.CatfishService.UpdateRecent.STATUSUPDT;
        r10 = r10.ordinal();
        r0 = r27;
        r11 = r0.message;
        r18 = r16;
        r16 = r5;
        r5 = r6;
        r6 = r7;
        r7 = r9;
        r9 = r11;
        r11 = r14;
        r14 = r8;
        r8 = r10;
        r10 = r12;
        r12 = r15;
        r15 = r4;
        r4 = r2;
        goto L_0x00fa;
    L_0x0489:
        r2 = 0;
        goto L_0x03e3;
    L_0x048c:
        r0 = r27;
        r3 = r0.object_owner;
        r0 = r21;
        r3 = r0.getFriendname(r3);
        r0 = r27;
        r5 = r0.object_owner;
        r0 = r21;
        r5 = r0.getFriendStatus(r5);
        goto L_0x0460;
    L_0x04a1:
        r2 = "CatfishDataStorage";
        r11 = new java.lang.StringBuilder;
        r11.<init>();
        r12 = "STATUSUPDT: userpin: ";
        r11 = r11.append(r12);
        r0 = r27;
        r12 = r0.userpin;
        r11 = r11.append(r12);
        r12 = ", senderpin: ";
        r11 = r11.append(r12);
        r0 = r27;
        r12 = r0.senderpin;
        r11 = r11.append(r12);
        r12 = ", recipient: ";
        r11 = r11.append(r12);
        r0 = r27;
        r12 = r0.recipient;
        r11 = r11.append(r12);
        r12 = ", objowner: ";
        r11 = r11.append(r12);
        r0 = r27;
        r12 = r0.object_owner;
        r11 = r11.append(r12);
        r12 = ", objseq: ";
        r11 = r11.append(r12);
        r0 = r27;
        r14 = r0.object_sequence;
        r11 = r11.append(r14);
        r11 = r11.toString();
        com.catfiz.util.Log.d(r2, r11);
        r0 = r27;
        r12 = r0.senderpin;
        r2 = "recentupdates";
        r11 = new java.lang.StringBuilder;
        r11.<init>();
        r14 = "recrecipient = '";
        r11 = r11.append(r14);
        r11 = r11.append(r12);
        r14 = "' AND ";
        r11 = r11.append(r14);
        r14 = "recactioncode";
        r11 = r11.append(r14);
        r14 = " = ";
        r11 = r11.append(r14);
        r14 = com.catfiz.service.CatfishService.UpdateRecent.STATUSUPDT;
        r14 = r14.ordinal();
        r11 = r11.append(r14);
        r11 = r11.toString();
        r14 = 0;
        r0 = r20;
        r0.delete(r2, r11, r14);
        r0 = r27;
        r11 = r0.message;
        r2 = com.catfiz.service.CatfishService.UpdateRecent.STATUSUPDT;
        r2 = r2.ordinal();
        r0 = r27;
        r14 = r0.message;
        r15 = r9;
        r18 = r16;
        r9 = r10;
        r16 = r14;
        r10 = r11;
        r14 = r8;
        r11 = r12;
        r8 = r2;
        r12 = r3;
        r24 = r5;
        r5 = r4;
        r4 = r24;
        goto L_0x00fa;
    L_0x0550:
        r0 = r27;
        r11 = r0.message;
        r2 = com.catfiz.service.CatfishService.UpdateRecent.USERNAMEUPDT;
        r2 = r2.ordinal();
        r0 = r27;
        r3 = r0.message;
        r0 = r27;
        r12 = r0.message;
        r0 = r27;
        r14 = r0.username;
        r0 = r27;
        r15 = r0.senderpin;
        r0 = r26;
        r1 = r20;
        r0.deleteRecentUpdateBySenderPin(r1, r15, r2);
        r15 = r9;
        r18 = r16;
        r9 = r3;
        r16 = r10;
        r10 = r11;
        r3 = r12;
        r11 = r13;
        r12 = r14;
        r14 = r8;
        r8 = r2;
        r24 = r5;
        r5 = r4;
        r4 = r24;
        goto L_0x00fa;
    L_0x0584:
        r2 = 0;
        goto L_0x000e;
    L_0x0587:
        r2 = r3;
        goto L_0x0118;
    L_0x058a:
        r4 = r9;
        goto L_0x03ea;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.catfiz.service.CatfishDataStorage.addRecentupdates(com.catfiz.service.CatfishMessageObject):boolean");
    }

    public boolean addRecentupdates(String str, int i, String str2, long j) {
        boolean z = true;
        String friendname = new FriendListDataStorage(this.mContext).getFriendname(str);
        if (friendname == null) {
            return false;
        }
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        if (((long) db.delete(RECENTUPDATES_TABLE_NAME, "recuserpin = '" + str + "' AND " + RECENT_ACTION_CODE + " = " + i + "", null)) <= 0) {
            Log.e(TAG, "---DATASTORAGE: FAIL TO DELETE  recentupdate");
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(RECENT_RECIPIENT, str);
        contentValues.put(RECENT_RECIPIENT_NAME, friendname);
        contentValues.put(RECENT_USERPIN, str);
        contentValues.put(RECENT_USER_NAME, friendname);
        contentValues.put(RECENT_ACTION, str2);
        contentValues.put(RECENT_ACTION_CODE, Integer.valueOf(i));
        contentValues.put(RECENT_TIMESTAMP, Long.valueOf(j));
        long insert = db.insert(RECENTUPDATES_TABLE_NAME, null, contentValues);
        Log.d(TAG, "---DATASTORAGE: insert" + (insert > 0));
        if (insert <= 0) {
            z = false;
        }
        return z;
    }

    public boolean addRecentupdatesPoolDesc(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        CatfishService.getCatfishPreferences().getString(USERNAME, "");
        if (((long) db.delete(RECENTUPDATES_TABLE_NAME, "recactioncode = " + UpdateRecent.POOLDESCUPDT.ordinal() + "", null)) <= 0) {
            Log.e(TAG, "---DATASTORAGE: FAIL TO DELETE " + catfishMessageObject.senderpin + " recentupdate");
        }
        String title = new PoolDataStorage(this.mContext).getTitle(catfishMessageObject.topic_key);
        ContentValues contentValues = new ContentValues();
        contentValues.put(RECENT_USERPIN, catfishMessageObject.topic_key);
        contentValues.put(RECENT_USER_NAME, title);
        contentValues.put(RECENT_ACTION, catfishMessageObject.message);
        contentValues.put(RECENT_ACTION_CODE, Integer.valueOf(UpdateRecent.POOLDESCUPDT.ordinal()));
        contentValues.put(RECENT_TIMESTAMP, Long.valueOf(CatfishRESTAPI.uniqueMonotonicSequence()));
        return db.insert(RECENTUPDATES_TABLE_NAME, null, contentValues) > 0;
    }

    public boolean addRecentupdatesPoolPhoto(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        CatfishService.getCatfishPreferences().getString(USERNAME, "");
        if (((long) db.delete(RECENTUPDATES_TABLE_NAME, "recactioncode = " + UpdateRecent.POOLPHOTOUPDT.ordinal() + "", null)) <= 0) {
            Log.e(TAG, "---DATASTORAGE: FAIL TO DELETE " + catfishMessageObject.senderpin + " recentupdate");
        }
        String title = new PoolDataStorage(this.mContext).getTitle(catfishMessageObject.topic_key);
        ContentValues contentValues = new ContentValues();
        contentValues.put(RECENT_USERPIN, catfishMessageObject.topic_key);
        contentValues.put(RECENT_USER_NAME, title);
        contentValues.put(RECENT_ACTION, catfishMessageObject.image_path);
        contentValues.put(RECENT_ACTION_CODE, Integer.valueOf(UpdateRecent.POOLPHOTOUPDT.ordinal()));
        contentValues.put(RECENT_TIMESTAMP, Long.valueOf(CatfishRESTAPI.uniqueMonotonicSequence()));
        return db.insert(RECENTUPDATES_TABLE_NAME, null, contentValues) > 0;
    }

    public boolean addRecentupdatesPoolTitle(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        CatfishService.getCatfishPreferences().getString(USERNAME, "");
        if (((long) db.delete(RECENTUPDATES_TABLE_NAME, "recactioncode = " + UpdateRecent.POOLTITLEUPDT.ordinal() + "", null)) <= 0) {
            Log.e(TAG, "---DATASTORAGE: FAIL TO DELETE " + catfishMessageObject.senderpin + " recentupdate");
        }
        String title = new PoolDataStorage(this.mContext).getTitle(catfishMessageObject.topic_key);
        ContentValues contentValues = new ContentValues();
        contentValues.put(RECENT_USERPIN, catfishMessageObject.topic_key);
        contentValues.put(RECENT_USER_NAME, title);
        contentValues.put(RECENT_ACTION, catfishMessageObject.message);
        contentValues.put(RECENT_ACTION_CODE, Integer.valueOf(UpdateRecent.POOLTITLEUPDT.ordinal()));
        contentValues.put(RECENT_TIMESTAMP, Long.valueOf(CatfishRESTAPI.uniqueMonotonicSequence()));
        return db.insert(RECENTUPDATES_TABLE_NAME, null, contentValues) > 0;
    }

    public boolean addRecentupdatesSelfName(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        String str = catfishMessageObject.old_username;
        if (((long) db.delete(RECENTUPDATES_TABLE_NAME, "recactioncode = " + UpdateRecent.SELFUSERNAMEUPDT.ordinal() + "", null)) <= 0) {
            Log.e(TAG, "---DATASTORAGE: FAIL TO DELETE " + catfishMessageObject.senderpin + " recentupdate");
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(RECENT_USERPIN, catfishMessageObject.senderpin);
        contentValues.put(RECENT_USER_NAME, str);
        contentValues.put(RECENT_RECIPIENT, catfishMessageObject.senderpin);
        contentValues.put(RECENT_RECIPIENT_NAME, catfishMessageObject.message);
        contentValues.put(RECENT_ACTION, str);
        contentValues.put(RECENT_ACTION_CODE, Integer.valueOf(UpdateRecent.SELFUSERNAMEUPDT.ordinal()));
        contentValues.put(RECENT_TIMESTAMP, Long.valueOf(CatfishRESTAPI.uniqueMonotonicSequence()));
        return db.insert(RECENTUPDATES_TABLE_NAME, null, contentValues) > 0;
    }

    public boolean addRecentupdatesSelfPhoto() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        if (((long) db.delete(RECENTUPDATES_TABLE_NAME, "recactioncode = " + UpdateRecent.SELFPHOTOUPDT.ordinal() + "", null)) <= 0) {
            Log.e(TAG, "---DATASTORAGE: FAIL TO DELETE  recentupdate");
        }
        String string = CatfishService.getCatfishPreferences().getString(USERNAME, "");
        ContentValues contentValues = new ContentValues();
        contentValues.put(RECENT_USERPIN, CatfishService.getUserPIN());
        contentValues.put(RECENT_RECIPIENT, CatfishService.getUserPIN());
        contentValues.put(RECENT_RECIPIENT_NAME, string);
        contentValues.put(RECENT_USER_NAME, string);
        contentValues.put(RECENT_ACTION, "");
        contentValues.put(RECENT_ACTION_CODE, Integer.valueOf(UpdateRecent.SELFPHOTOUPDT.ordinal()));
        contentValues.put(RECENT_TIMESTAMP, Long.valueOf(CatfishRESTAPI.uniqueMonotonicSequence()));
        return db.insert(RECENTUPDATES_TABLE_NAME, null, contentValues) > 0;
    }

    public boolean addRecentupdatesSelfStatus(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        String string = CatfishService.getCatfishPreferences().getString(USERNAME, "");
        if (((long) db.delete(RECENTUPDATES_TABLE_NAME, "recrecipient = '" + catfishMessageObject.userpin + "' AND (" + RECENT_ACTION_CODE + " = " + UpdateRecent.STATUSUPDT.ordinal() + " OR " + RECENT_ACTION_CODE + " = " + UpdateRecent.SELFSTATUSUPDT.ordinal() + ")", null)) <= 0) {
            Log.e(TAG, "---DATASTORAGE: FAIL TO DELETE " + catfishMessageObject.senderpin + " recentupdate");
        }
        Log.d(TAG, "add recent updates selft status :" + catfishMessageObject.message);
        ContentValues contentValues = new ContentValues();
        contentValues.put(RECENT_RECIPIENT, catfishMessageObject.userpin);
        contentValues.put(RECENT_RECIPIENT_NAME, string);
        contentValues.put(RECENT_USERPIN, catfishMessageObject.userpin);
        contentValues.put(RECENT_USER_NAME, string);
        contentValues.put(RECENT_USERPIN, catfishMessageObject.userpin);
        contentValues.put(RECENT_USER_NAME, string);
        contentValues.put(RECENT_ACTION, catfishMessageObject.message);
        contentValues.put(RECENT_STATUS, catfishMessageObject.message);
        contentValues.put(RECENT_ACTION_CODE, Integer.valueOf(UpdateRecent.SELFSTATUSUPDT.ordinal()));
        contentValues.put(RECENT_TIMESTAMP, Long.valueOf(CatfishRESTAPI.uniqueMonotonicSequence()));
        return db.insert(RECENTUPDATES_TABLE_NAME, null, contentValues) > 0;
    }

    public void beginTransaction() {
        SQLiteDatabase db = getDB();
        if (db != null) {
            db.beginTransaction();
        }
    }

    public boolean checkNDeleteNicProfileCache() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        int delete;
        Cursor query = db.query(NIC_PROFILE_CACHE_TABLE_NAME, null, null, null, null, null, "timestamp ASC");
        if (query.getCount() >= NIC_PROFILE_MAX_CACHE) {
            query.moveToFirst();
            File friendProfilePhotoFile = CatfishPhotoStorage.getFriendProfilePhotoFile(this.mContext, query.getString(query.getColumnIndex(NIC_NIC)));
            if (friendProfilePhotoFile != null) {
                friendProfilePhotoFile.delete();
            }
            delete = db.delete(NIC_PROFILE_CACHE_TABLE_NAME, "timestamp = '" + query.getInt(query.getColumnIndex(TIMESTAMP)) + "'", null);
        } else {
            delete = 0;
        }
        return delete > 0;
    }

    public int deleteAllConversations(String str, String str2) {
        SQLiteDatabase db = getDB();
        return db == null ? 0 : db.delete(MESSAGES_TABLE_NAME, "convkey = '" + (str + ":" + str2) + "' OR " + OBJECTOWNERPIN + "= '" + str2 + "'", null);
    }

    public boolean deleteAllRecentUpdates() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        db.delete(RECENTUPDATES_TABLE_NAME, null, null);
        return true;
    }

    public boolean deleteChatConversation(CatfishMessageObject catfishMessageObject) {
        FriendListDataStorage friendListDataStorage = new FriendListDataStorage(this.mContext);
        if (friendListDataStorage.isOfficialExists(catfishMessageObject.recipient)) {
            if (friendListDataStorage.deleteOfficial(catfishMessageObject.recipient)) {
                Log.d(TAG, "official: " + catfishMessageObject.recipient + ":deleted");
            } else {
                Log.d(TAG, "fail to delete official: " + catfishMessageObject.recipient);
            }
        }
        return deleteChatConversation(catfishMessageObject.conversation_key);
    }

    public boolean deleteChatConversation(String str) {
        Log.d(TAG, "TO DELETE CHAT: convkey=" + str);
        if (!isChatConversationExists(str)) {
            return false;
        }
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        Log.d(TAG, "DELETE CHAT: convkey=" + str + ", " + String.valueOf(db.delete(MESSAGES_TABLE_NAME, "convkey = '" + str + "'", null)) + " DELETED");
        return true;
    }

    public boolean deleteChatConversationAllOutofDate(long j) {
        Log.d(TAG, "TO DELETE CHAT: out of date");
        SQLiteDatabase db = getDB();
        FriendListDataStorage friendListDataStorage = new FriendListDataStorage(this.mContext);
        SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this.mContext);
        if (db == null) {
            return false;
        }
        long j2 = 0;
        Object obj = 1;
        int i = -1;
        try {
            i = defaultSharedPreferences.getInt("dataOutOfDate", -1);
        } catch (ClassCastException e) {
            defaultSharedPreferences.edit().remove("dataOutOfDate").commit();
            Log.e(TAG, "Invalid Type: dataOutOfDate. integer expected.: remove");
        }
        switch (i) {
            case e.b /*1*/:
                j2 = j - 259200000;
                Log.d(TAG, "TO DELETE CHAT: 3 days");
                break;
            case e.c /*2*/:
                j2 = j - 604800000;
                Log.d(TAG, "TO DELETE CHAT: 7 days");
                break;
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                j2 = j - 604800000;
                Log.d(TAG, "TO DELETE CHAT: 7 days");
                break;
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                j2 = j - 2592000000L;
                Log.d(TAG, "TO DELETE CHAT: 30 days");
                break;
            default:
                obj = null;
                Log.d(TAG, "TO DELETE CHAT: nothing");
                break;
        }
        if (obj != null) {
            int delete = db.delete(MESSAGES_TABLE_NAME, "timestamp <= '" + j2 + "' ", null);
            db.delete(RECENTUPDATES_TABLE_NAME, "rectimestamp <= '" + j2 + "' ", null);
            Log.d(TAG, "DELETE CHAT: timestamp <= " + j2 + ", " + String.valueOf(delete) + " DELETED , Current timemilis: " + System.currentTimeMillis());
            Cursor activeFriendChat = friendListDataStorage.getActiveFriendChat();
            int count = activeFriendChat.getCount();
            db.beginTransaction();
            delete = 0;
            while (delete < count) {
                try {
                    activeFriendChat.moveToPosition(delete);
                    String string = activeFriendChat.getString(activeFriendChat.getColumnIndex(FRIENDPIN));
                    Cursor chatConversation = getChatConversation(CatfishService.getUserPIN() + ":" + string);
                    if (chatConversation != null && chatConversation.getCount() == 0) {
                        Log.d(TAG, "friend with nic " + string + " have no conversation chat, update activity count and unread mesage");
                        friendListDataStorage.resetChatActivity(string);
                    }
                    chatConversation.close();
                    chatConversation = getChatConversation("sc:" + string + ":" + String.valueOf(activeFriendChat.getLong(activeFriendChat.getColumnIndex(STATUSSEQ))));
                    if (chatConversation != null && chatConversation.getCount() == 0) {
                        Log.d(TAG, "friend with nic " + string + " have no conversation on status comment, update status unread mesage");
                        friendListDataStorage.updateFriendStatCommRead(string);
                    }
                    chatConversation.close();
                    delete++;
                } catch (Exception e2) {
                    e2.printStackTrace();
                } finally {
                    db.endTransaction();
                }
            }
            db.setTransactionSuccessful();
            db.endTransaction();
            activeFriendChat.close();
        }
        return true;
    }

    public boolean deleteChatConversationAlls(long j, String str) {
        Log.d(TAG, "TO DELETE CHAT: out of date");
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        FriendListDataStorage friendListDataStorage = new FriendListDataStorage(this.mContext);
        String str2 = "";
        if (str.equals("chat")) {
            str2 = " not like 'sc%'";
        } else {
            str2 = " like 'sc%'";
            friendListDataStorage.updateAllFriendStatCommRead();
        }
        Log.d(TAG, "DELETE ALL CHAT: timestamp <= " + j + ", " + String.valueOf(db.delete(MESSAGES_TABLE_NAME, "timestamp <= '" + j + "' AND " + CONVERSATION_KEY + str2, null)) + " DELETED , Current timemilis: " + System.currentTimeMillis());
        return true;
    }

    public boolean deleteChatConversationResponse(String str, String str2) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        Log.d(TAG, "DELETE CHAT: convkey=  response" + String.valueOf(db.delete(MESSAGES_TABLE_NAME, "recipient = '" + str + "' AND " + CONVERSATION_KEY + " LIKE " + "'" + str2 + "%'", null)) + " DELETED");
        return true;
    }

    public boolean deleteInvalidRecentUpdates() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        String str = "recuserpin IS NULL OR recuserpin = '' OR recuserpin = \"null\"OR rectimestamp = 0";
        Log.d(TAG, "deleteInvalidRecentUpdates: delete " + db.delete(RECENTUPDATES_TABLE_NAME, "recuserpin IS NULL OR recuserpin = '' OR recuserpin = \"null\"OR rectimestamp = 0", null) + " records");
        return true;
    }

    public boolean deleteNicMessage(CatfishMessageObject catfishMessageObject) {
        String str = catfishMessageObject.conversation_key;
        Log.d(TAG, "TO DELETE CHAT: convkey=" + str);
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        if (str == null) {
            db.delete(MESSAGES_TABLE_NAME, "convkey like 'nm%'", null);
            Log.d(TAG, "DELETE CHAT: ALL MESSAGE DELETED");
        } else {
            Log.d(TAG, "DELETE CHAT: convkey=" + str + ", " + String.valueOf(db.delete(MESSAGES_TABLE_NAME, "convkey = '" + str + "'", null)) + " DELETED");
        }
        return true;
    }

    public boolean deleteRecipientFromFriend(CatfishMessageObject catfishMessageObject) {
        FriendListDataStorage friendListDataStorage = new FriendListDataStorage(this.mContext);
        if (friendListDataStorage.isRecipientAFriend(catfishMessageObject)) {
            friendListDataStorage.deleteRecipientFromFriend(catfishMessageObject);
            SQLiteDatabase db = getDB();
            if (db == null) {
                return false;
            }
            db.beginTransaction();
            try {
                if (db.delete(MESSAGES_TABLE_NAME, "convkey = '" + (catfishMessageObject.userpin + ":" + catfishMessageObject.recipient) + "' OR " + OBJECTOWNERPIN + " = '" + catfishMessageObject.recipient + "'", null) <= 0) {
                    Log.e(TAG, "---DATASTORAGE: FAIL TO DELETE " + catfishMessageObject.recipient + " CONVERSATIONS");
                }
                if (db.delete(RECENTUPDATES_TABLE_NAME, "recrecipient = '" + catfishMessageObject.recipient + "'", null) <= 0) {
                    Log.e(TAG, "---DATASTORAGE: FAIL TO DELETE " + catfishMessageObject.recipient + " RECENT UPDATES");
                }
                db.setTransactionSuccessful();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                db.endTransaction();
            }
            return true;
        }
        Log.d(TAG, "DELETE -RECIPIENT " + catfishMessageObject.recipient + " NOT FRIEND");
        return false;
    }

    public boolean deleteSenderFromFriend(CatfishMessageObject catfishMessageObject) {
        FriendListDataStorage friendListDataStorage = new FriendListDataStorage(this.mContext);
        if (!friendListDataStorage.isSenderAFriend(catfishMessageObject)) {
            return false;
        }
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        friendListDataStorage.deleteSenderFromFriend(catfishMessageObject);
        db.beginTransaction();
        try {
            if (db.delete(MESSAGES_TABLE_NAME, "convkey = '" + (catfishMessageObject.userpin + ":" + catfishMessageObject.senderpin) + "' OR " + OBJECTOWNERPIN + " = '" + catfishMessageObject.senderpin + "'", null) <= 0) {
                Log.e(TAG, "---DATASTORAGE: FAIL TO DELETE " + catfishMessageObject.senderpin + " CONVERSATIONS");
            }
            if (db.delete(RECENTUPDATES_TABLE_NAME, "recrecipient = '" + catfishMessageObject.senderpin + "'", null) <= 0) {
                Log.e(TAG, "---DATASTORAGE: FAIL TO DELETE " + catfishMessageObject.senderpin + " RECENT UPDATES");
            }
            db.setTransactionSuccessful();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            db.endTransaction();
        }
        return true;
    }

    public boolean deleteSingleChat(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        if (db.delete(MESSAGES_TABLE_NAME, "convkey = '" + catfishMessageObject.conversation_key + "' AND " + SEQUENCE + "= " + catfishMessageObject.sequence, null) <= 0) {
            Log.d(TAG, "DELETE SINGLE CHAT:FAIL");
        } else {
            Log.d(TAG, "DELETE SINGLE CHAT:SUCCESS");
        }
        return true;
    }

    public boolean deleteUserMessageWConvKeyForResponse(CatfishMessageObject catfishMessageObject, String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        if (catfishMessageObject.conversation_key == null) {
            catfishMessageObject.conversation_key = "scl:" + catfishMessageObject.object_owner + ":" + catfishMessageObject.object_sequence + ":" + catfishMessageObject.senderpin;
        }
        int delete = db.delete(MESSAGES_TABLE_NAME, "convkey='" + catfishMessageObject.conversation_key + "' ", null);
        Cursor rawQuery = catfishMessageObject.messagetype == MessageType.UNLIKE ? db.rawQuery("SELECT count FROM messages WHERE senderpin = '" + catfishMessageObject.object_owner + "' AND " + SEQUENCE + "=" + catfishMessageObject.object_sequence, null) : catfishMessageObject.messagetype == MessageType.FLAG ? db.rawQuery("SELECT countflag FROM messages WHERE senderpin = '" + catfishMessageObject.object_owner + "' AND " + SEQUENCE + "=" + catfishMessageObject.object_sequence, null) : catfishMessageObject.messagetype == MessageType.PRET ? db.rawQuery("SELECT countpret FROM messages WHERE senderpin = '" + catfishMessageObject.object_owner + "' AND " + SEQUENCE + "=" + catfishMessageObject.object_sequence, null) : db.rawQuery("SELECT countfunny FROM messages WHERE senderpin = '" + catfishMessageObject.object_owner + "' AND " + SEQUENCE + "=" + catfishMessageObject.object_sequence, null);
        int columnIndex = catfishMessageObject.messagetype == MessageType.UNLIKE ? rawQuery.getColumnIndex(COUNT) : catfishMessageObject.messagetype == MessageType.FLAG ? rawQuery.getColumnIndex(COUNTFLAG) : catfishMessageObject.messagetype == MessageType.PRET ? rawQuery.getColumnIndex(COUNTPRET) : rawQuery.getColumnIndex(COUNTFUN);
        rawQuery.moveToNext();
        columnIndex = rawQuery.getInt(columnIndex) - 1;
        rawQuery.close();
        ContentValues contentValues = new ContentValues();
        if (catfishMessageObject.messagetype == MessageType.UNLIKE) {
            contentValues.put(COUNT, Integer.valueOf(columnIndex));
        } else if (catfishMessageObject.messagetype == MessageType.FLAG) {
            contentValues.put(COUNTFLAG, Integer.valueOf(columnIndex));
        } else if (catfishMessageObject.messagetype == MessageType.PRET) {
            contentValues.put(COUNTPRET, Integer.valueOf(columnIndex));
        } else {
            contentValues.put(COUNTFUN, Integer.valueOf(columnIndex));
        }
        db.update(MESSAGES_TABLE_NAME, contentValues, "senderpin='" + catfishMessageObject.object_owner + "' AND " + SEQUENCE + "='" + catfishMessageObject.object_sequence + "' ", null);
        return delete > 0;
    }

    public boolean deletethumb(String str) {
        if (str == null) {
            return false;
        }
        try {
            File file = new File(str);
            if (!file.exists()) {
                return false;
            }
            boolean delete = file.delete();
            Log.d(TAG, "deleted fizzlink thumb file:" + str);
            return delete;
        } catch (Exception e) {
            return false;
        }
    }

    public void endTransaction() {
        SQLiteDatabase db = getDB();
        if (db != null) {
            db.endTransaction();
        }
    }

    public Cursor getAllMultimediaMessage() {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.query(MESSAGES_TABLE_NAME, null, "imagepath not null or voicefilepath not null or datafilepath not null", null, null, null, null);
    }

    public Cursor getAllRecentUpdates() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(RECENTUPDATES_TABLE_NAME, null, null, null, null, null, "rectimestamp DESC");
    }

    public Cursor getBlockedNicList() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(IGNORED_NIC_TABLE_NAME, null, null, null, null, null, "_id");
    }

    public Cursor getChatConvWithLimit(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        String str = catfishMessageObject.timestamp != 0 ? " AND timestamp<" + catfishMessageObject.timestamp : "";
        return db.query(MESSAGES_TABLE_NAME, null, "convkey = '" + catfishMessageObject.conversation_key + "'" + str, null, null, null, "_id DESC", catfishMessageObject.limit + "");
    }

    public Cursor getChatConversation(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(MESSAGES_TABLE_NAME, null, "convkey = '" + catfishMessageObject.conversation_key + "'", null, null, null, "_id");
    }

    public Cursor getChatConversation(String str) {
        return getChatConversation(str, "_id");
    }

    public Cursor getChatConversation(String str, String str2) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.query(MESSAGES_TABLE_NAME, null, "convkey = '" + str + "'", null, null, null, str2);
    }

    public Cursor getChatDataFileInChat(long j) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT datafilepath FROM messages WHERE timestamp <= '" + j + "' AND " + CONVERSATION_KEY + " not like 'sc%' AND " + MESSAGETYPE + " = 1 AND " + SENDERPIN + " != '" + CatfishService.getUserPIN() + "' AND " + DATAFILEPATH + " != '';", null);
    }

    public Cursor getChatImageFileInChat(long j) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT imagepath FROM messages WHERE timestamp <= '" + j + "' AND " + CONVERSATION_KEY + " not like 'sc%' AND " + MESSAGETYPE + " = 1 AND " + SENDERPIN + " != '" + CatfishService.getUserPIN() + "' AND " + IMAGEPATH + " != '';", null);
    }

    public Cursor getChatImageThumbsInChat(long j) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT imagethumburi FROM messages WHERE timestamp <= '" + j + "' AND " + CONVERSATION_KEY + " not like 'sc:%' AND " + MESSAGETYPE + " = 1 AND " + IMAGETHUMB_URI + " != '';", null);
    }

    public Cursor getChatVoiceFileInChat(long j) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT voicefilepath FROM messages WHERE timestamp <= '" + j + "' AND " + CONVERSATION_KEY + " not like 'sc:%' AND " + MESSAGETYPE + " = 1 AND " + VOICEFILEPATH + " != '';", null);
    }

    public SQLiteDatabase getDB() {
        try {
            mCatfishDataStorageDB = mDBHelper.getWritableDatabase();
            return mCatfishDataStorageDB;
        } catch (SQLiteException e) {
            e.printStackTrace();
            Log.e(TAG, "FATAL ERROR IN DB: " + e.toString());
            System.exit(0);
            return null;
        } catch (Exception e2) {
            e2.printStackTrace();
            Log.e(TAG, "FATAL ERROR IN DB: " + e2.toString());
            System.exit(0);
            return null;
        }
    }

    public String getFizzlinkShareByMessage(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        Cursor query = db.query(MESSAGES_TABLE_NAME, null, "message ='" + str + "'", null, null, null, null);
        query.moveToFirst();
        String string = query.getString(query.getColumnIndex(CONVERSATION_KEY));
        query.close();
        return string;
    }

    public Cursor getImageFileInChat(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.rawQuery("SELECT imagepath FROM messages WHERE convkey = '" + catfishMessageObject.conversation_key + "' AND " + SENDERPIN + " != '" + CatfishService.getUserPIN() + "' AND " + IMAGEPATH + " != '';", null);
    }

    public Cursor getImagePromoteFileInChat(long j) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT message FROM messages WHERE timestamp <= '" + j + "' AND " + CONVERSATION_KEY + " like 'sc:%' AND " + MESSAGETYPE + " = " + MessageType.PROMOTECONTACT.ordinal() + ";", null);
    }

    public Cursor getImagePromoteFileInChat(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT message FROM messages WHERE convkey = '" + catfishMessageObject.conversation_key + "' AND " + MESSAGETYPE + " = " + MessageType.PROMOTECONTACT.ordinal() + ";", null);
    }

    public Cursor getImageThumbsInChat(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT imagethumburi FROM messages WHERE convkey = '" + catfishMessageObject.conversation_key + "' AND " + IMAGETHUMB_URI + " != '';", null);
    }

    public Cursor getLastTimeStamp() {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT MAX(timestamp) FROM messages", null);
    }

    public Cursor getLongMessageFileInChatStatcom(long j) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT message,sequence FROM messages WHERE timestamp <= '" + j + "' AND " + CONVERSATION_KEY + " like 'sc:%' AND (" + MESSAGETYPE + " = " + MessageType.LONG_MESSAGE.ordinal() + " OR " + MESSAGETYPE + " = " + MessageType.LONGSTATUSCOMMENT.ordinal() + " );", null);
    }

    public Cursor getLongMessageFileInChatStatcom(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT sequence FROM messages WHERE convkey = '" + catfishMessageObject.conversation_key + "' AND (" + MESSAGETYPE + " = " + MessageType.LONG_MESSAGE.ordinal() + " OR " + MESSAGETYPE + " = " + MessageType.LONGSTATUSCOMMENT.ordinal() + ")" + ";", null);
    }

    public Cursor getNicMessageConv(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(MESSAGES_TABLE_NAME, null, "convkey ='" + str + "'", null, null, null, "timestamp ASC");
    }

    public Cursor getNicMessageList() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(MESSAGES_TABLE_NAME, null, "convkey LIKE  'nm:%'  GROUP BY convkey", null, null, null, "timestamp DESC");
    }

    public Cursor getNicProfileCache(String str) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.query(NIC_PROFILE_CACHE_TABLE_NAME, null, "nic='" + str + "'", null, null, null, null);
    }

    public Cursor getObjectConversation(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(OBJECT_COMMENT_TABLE_NAME, null, "convkey = '" + catfishMessageObject.conversation_key + "'", null, null, null, "_id");
    }

    public Cursor getObjectConversation(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(OBJECT_COMMENT_TABLE_NAME, null, "convkey = '" + str + "'", null, null, null, "_id");
    }

    public Cursor getOutOfDateImageThumbsInChat(long j) {
        int i = -1;
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this.mContext);
        long j2 = 0;
        Object obj = 1;
        try {
            i = defaultSharedPreferences.getInt("dataOutOfDate", -1);
        } catch (ClassCastException e) {
            defaultSharedPreferences.edit().remove("dataOutOfDate").commit();
            Log.e(TAG, "Invalid Type: dataOutOfDate. integer expected.: remove");
        }
        switch (i) {
            case e.b /*1*/:
                j2 = j - 259200000;
                Log.d(TAG, "TO DELETE CHAT: 3 days");
                break;
            case e.c /*2*/:
                j2 = j - 604800000;
                Log.d(TAG, "TO DELETE CHAT: 7 days");
                break;
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                j2 = j - 604800000;
                Log.d(TAG, "TO DELETE CHAT: 7 days");
                break;
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                j2 = j - 2592000000L;
                Log.d(TAG, "TO DELETE CHAT: 30 days");
                break;
            default:
                obj = null;
                Log.d(TAG, "TO DELETE CHAT: nothing");
                break;
        }
        return obj != null ? db.rawQuery("SELECT imagethumburi FROM messages WHERE timestamp <= '" + j2 + "' AND " + IMAGETHUMB_URI + " != '';", null) : db.rawQuery("SELECT imagethumburi FROM messages WHERE timestamp <= '0' AND imagethumburi != '';", null);
    }

    public Cursor getOutOfDateImagefileInChat(long j) {
        int i = -1;
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this.mContext);
        long j2 = 0;
        Object obj = 1;
        try {
            i = defaultSharedPreferences.getInt("dataOutOfDate", -1);
        } catch (ClassCastException e) {
            defaultSharedPreferences.edit().remove("dataOutOfDate").commit();
            Log.e(TAG, "Invalid Type: dataOutOfDate. integer expected.: remove");
        }
        switch (i) {
            case e.b /*1*/:
                j2 = j - 259200000;
                Log.d(TAG, "TO DELETE CHAT: 3 days");
                break;
            case e.c /*2*/:
                j2 = j - 604800000;
                Log.d(TAG, "TO DELETE CHAT: 7 days");
                break;
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                j2 = j - 604800000;
                Log.d(TAG, "TO DELETE CHAT: 7 days");
                break;
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                j2 = j - 2592000000L;
                Log.d(TAG, "TO DELETE CHAT: 30 days");
                break;
            default:
                obj = null;
                Log.d(TAG, "TO DELETE CHAT: nothing");
                break;
        }
        return obj != null ? db.rawQuery("SELECT imagepath FROM messages WHERE timestamp <= '" + j2 + "' AND " + SENDERPIN + " != '" + CatfishService.getUserPIN() + "' AND " + IMAGEPATH + " != '';", null) : db.rawQuery("SELECT imagepath FROM messages WHERE timestamp <= '0' AND senderpin != '" + CatfishService.getUserPIN() + "' AND " + IMAGEPATH + " != '';", null);
    }

    public Cursor getOutOfDateVoiceFileInChat(long j) {
        int i = -1;
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this.mContext);
        long j2 = 0;
        Object obj = 1;
        try {
            i = defaultSharedPreferences.getInt("dataOutOfDate", -1);
        } catch (ClassCastException e) {
            defaultSharedPreferences.edit().remove("dataOutOfDate").commit();
            Log.e(TAG, "Invalid Type: dataOutOfDate. integer expected.: remove");
        }
        switch (i) {
            case e.b /*1*/:
                j2 = j - 259200000;
                Log.d(TAG, "TO DELETE CHAT: 3 days");
                break;
            case e.c /*2*/:
                j2 = j - 604800000;
                Log.d(TAG, "TO DELETE CHAT: 7 days");
                break;
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                j2 = j - 604800000;
                Log.d(TAG, "TO DELETE CHAT: 7 days");
                break;
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                j2 = j - 2592000000L;
                Log.d(TAG, "TO DELETE CHAT: 30 days");
                break;
            default:
                obj = null;
                Log.d(TAG, "TO DELETE CHAT: nothing");
                break;
        }
        return obj != null ? db.rawQuery("SELECT voicefilepath FROM messages WHERE timestamp <= '" + j2 + "' AND " + VOICEFILEPATH + " != '';", null) : db.rawQuery("SELECT voicefilepath FROM messages WHERE timestamp <= '0' AND voicefilepath != '';", null);
    }

    public Cursor getOutOfDatedataFileInChat(long j) {
        int i = -1;
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this.mContext);
        long j2 = 0;
        Object obj = 1;
        try {
            i = defaultSharedPreferences.getInt("dataOutOfDate", -1);
        } catch (ClassCastException e) {
            defaultSharedPreferences.edit().remove("dataOutOfDate").commit();
            Log.e(TAG, "Invalid Type: dataOutOfDate. integer expected.: remove");
        }
        switch (i) {
            case e.b /*1*/:
                j2 = j - 259200000;
                Log.d(TAG, "TO DELETE CHAT: 3 days");
                break;
            case e.c /*2*/:
                j2 = j - 604800000;
                Log.d(TAG, "TO DELETE CHAT: 7 days");
                break;
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                j2 = j - 604800000;
                Log.d(TAG, "TO DELETE CHAT: 7 days");
                break;
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                j2 = j - 2592000000L;
                Log.d(TAG, "TO DELETE CHAT: 30 days");
                break;
            default:
                obj = null;
                Log.d(TAG, "TO DELETE CHAT: nothing");
                break;
        }
        return obj != null ? db.rawQuery("SELECT datafilepath FROM messages WHERE timestamp <= '" + j2 + "' AND " + SENDERPIN + " != '" + CatfishService.getUserPIN() + "' AND " + DATAFILEPATH + " != '';", null) : db.rawQuery("SELECT datafilepath FROM messages WHERE timestamp <= '0' AND senderpin != '" + CatfishService.getUserPIN() + "' AND " + DATAFILEPATH + " != '';", null);
    }

    public Cursor getQueuedMessages() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(MESSAGES_TABLE_NAME, null, "recipient != '" + CatfishService.getUserPIN() + "' AND " + DELIVERYSTATUS + " = 1", null, null, null, "_id");
    }

    public Cursor getResponseLikeList(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        try {
            return db.query(MESSAGES_TABLE_NAME, null, "convkey LIKE '" + str + "%'", null, null, null, null);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public Cursor getSingleChatConversation(long j) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(MESSAGES_TABLE_NAME, null, "sequence='" + j + "'", null, null, null, "_id");
    }

    public Cursor getSingleChatConversation(String str, long j) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(MESSAGES_TABLE_NAME, null, "convkey = '" + str + "'" + " AND " + SEQUENCE + "='" + j + "'", null, null, null, "_id");
    }

    public Cursor getSingleDataFileInChat(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT datafilepath FROM messages WHERE convkey = '" + catfishMessageObject.conversation_key + "' AND " + SEQUENCE + " = '" + catfishMessageObject.sequence + "' AND " + SENDERPIN + " != '" + CatfishService.getUserPIN() + "' AND " + DATAFILEPATH + " != '';", null);
    }

    public Cursor getSingleImageFileInChat(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT imagepath FROM messages WHERE convkey = '" + catfishMessageObject.conversation_key + "' AND " + SEQUENCE + " = '" + catfishMessageObject.sequence + "' AND " + SENDERPIN + " != '" + CatfishService.getUserPIN() + "' AND " + IMAGEPATH + " != '';", null);
    }

    public Cursor getSingleImageThumbsInChat(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT imagethumburi FROM messages WHERE convkey = '" + catfishMessageObject.conversation_key + "' AND " + SEQUENCE + " = '" + catfishMessageObject.sequence + "' AND " + IMAGETHUMB_URI + " != '';", null);
    }

    public Cursor getSingleLastChatConversation(String str) {
        Cursor cursor = null;
        SQLiteDatabase db = getDB();
        if (db != null) {
            cursor = db.query(MESSAGES_TABLE_NAME, null, "convkey = '" + str + "'", null, null, null, "_id DESC");
            if (cursor.getCount() > 0) {
                cursor.moveToFirst();
            }
        }
        return cursor;
    }

    public Cursor getSingleVoiceFileInChat(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT voicefilepath FROM messages WHERE convkey = '" + catfishMessageObject.conversation_key + "' AND " + SEQUENCE + " = '" + catfishMessageObject.sequence + "' AND " + VOICEFILEPATH + " != '';", null);
    }

    public int getStatusCount(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return 0;
        }
        Cursor query = db.query(MESSAGES_TABLE_NAME, null, "convkey = '" + str + "'", null, null, null, null);
        int count = query.getCount();
        query.close();
        return count <= 0 ? 0 : count;
    }

    public Cursor getStatusDataFileInChat(long j) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT datafilepath FROM messages WHERE timestamp <= '" + j + "' AND " + CONVERSATION_KEY + " like 'sc%' AND " + SENDERPIN + " = '" + CatfishService.getUserPIN() + "' AND " + DATAFILEPATH + " != '';", null);
    }

    public Cursor getStatusImageFileInChat(long j) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT imagepath FROM messages WHERE timestamp <= '" + j + "' AND " + CONVERSATION_KEY + " like 'sc:%' AND " + MESSAGETYPE + " != 1 AND " + SENDERPIN + " != '" + CatfishService.getUserPIN() + "' AND " + IMAGEPATH + " != '';", null);
    }

    public Cursor getStatusImageThumbsInChat(long j) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT imagethumburi FROM messages WHERE convkey like 'sc:%' AND messagetype != 1 AND imagethumburi != '';", null);
    }

    public Cursor getStatusVoiceFileInChat(long j) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT voicefilepath FROM messages WHERE timestamp <= '" + j + "' AND " + CONVERSATION_KEY + " like 'sc:%' AND " + MESSAGETYPE + " != 1 AND " + VOICEFILEPATH + " != '';", null);
    }

    public Cursor getSvgCode() {
        Cursor cursor = null;
        SQLiteDatabase db = getDB();
        if (db != null) {
            cursor = db.query(SVG_CODE_TABLE_NAME, null, null, null, null, null, "_id");
            if (cursor == null) {
                Log.d(TAG, "cursor null ");
            }
        }
        return cursor;
    }

    public int getUnreadStatusCommentCount() {
        return this.mContext.getSharedPreferences(PREFERENCE_NAME, 0).getInt(PREF_NAME_UNREAD_STATUS_COMMENT, 0);
    }

    public Cursor getVideoFileInStatcom(long j) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT message,sequence FROM messages WHERE timestamp <= '" + j + "' AND " + CONVERSATION_KEY + " like 'sc:%' AND (" + MESSAGETYPE + " = " + MessageType.BCASTVIDEOSTATUS.ordinal() + " OR " + MESSAGETYPE + " = " + MessageType.BCASTVIDEOSTATUS.ordinal() + " );", null);
    }

    public Cursor getVideoFileInStatcom(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT sequence FROM messages WHERE convkey = '" + catfishMessageObject.conversation_key + "' AND " + MESSAGETYPE + " = " + MessageType.BCASTVIDEOSTATUS.ordinal() + ";", null);
    }

    public Cursor getVoiceFileInChat(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        return db == null ? null : db.rawQuery("SELECT voicefilepath FROM messages WHERE convkey = '" + catfishMessageObject.conversation_key + "' AND " + VOICEFILEPATH + " != '';", null);
    }

    public boolean increaseObjCommCount(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        Cursor query = db.query(MESSAGES_TABLE_NAME, null, "senderpin = '" + catfishMessageObject.object_owner + "' and " + SEQUENCE + " = '" + catfishMessageObject.object_sequence + "' ", null, null, null, null);
        query.moveToFirst();
        int i = query.getCount() > 0 ? query.getInt(query.getColumnIndex(OBJCOMMENTCOUNT)) + 1 : 0;
        Log.d(TAG, "count point:" + i);
        query.close();
        ContentValues contentValues = new ContentValues();
        contentValues.put(OBJCOMMENTCOUNT, Integer.valueOf(i));
        return db.update(MESSAGES_TABLE_NAME, contentValues, new StringBuilder().append("senderpin = '").append(catfishMessageObject.object_owner).append("' and ").append(SEQUENCE).append(" = '").append(catfishMessageObject.object_sequence).append("' ").toString(), null) > 0;
    }

    public void increaseUnreadStatusCommentCount() {
        increaseUnreadStatusCommentCount(1);
    }

    public void increaseUnreadStatusCommentCount(int i) {
        SharedPreferences sharedPreferences = this.mContext.getSharedPreferences(PREFERENCE_NAME, 0);
        sharedPreferences.edit().putInt(PREF_NAME_UNREAD_STATUS_COMMENT, sharedPreferences.getInt(PREF_NAME_UNREAD_STATUS_COMMENT, 0) + i).commit();
    }

    public boolean isBlackListNic(CatfishMessageObject catfishMessageObject) {
        boolean z = false;
        SQLiteDatabase db = getDB();
        if (db != null) {
            Log.d(TAG, "isBlackListNic: pin =" + catfishMessageObject.senderpin);
            Cursor rawQuery = db.rawQuery("SELECT userpin FROM ignored_nic WHERE userpin = '" + catfishMessageObject.senderpin + "';", null);
            if (rawQuery.getCount() > 0) {
                z = true;
            }
            rawQuery.close();
        }
        return z;
    }

    public boolean isChatConversationExists(CatfishMessageObject catfishMessageObject) {
        Cursor chatConversation = getChatConversation(catfishMessageObject);
        boolean z = chatConversation.getCount() > 0;
        chatConversation.close();
        return z;
    }

    public boolean isChatConversationExists(String str) {
        Cursor chatConversation = getChatConversation(str);
        boolean z = chatConversation.getCount() > 0;
        chatConversation.close();
        return z;
    }

    public int isMeComment(long j) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return 0;
        }
        Cursor rawQuery = db.rawQuery("SELECT recisusercomment FROM recentupdates WHERE recstatseq = '" + j + "' AND " + RECENT_ACTION_CODE + " = " + UpdateRecent.STATUSUPDT.ordinal(), null);
        if (rawQuery.getCount() <= 0) {
            rawQuery.close();
            return 0;
        }
        rawQuery.moveToFirst();
        int i = rawQuery.getInt(rawQuery.getColumnIndex(RECENT_IS_USER_COMMENT));
        rawQuery.close();
        return i;
    }

    public int isMeLike(String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return 0;
        }
        Cursor rawQuery = db.rawQuery("SELECT recisuserlike FROM recentupdates WHERE recrecipient = '" + str + "' AND " + RECENT_ACTION_CODE + " = " + UpdateRecent.STATUSUPDT.ordinal() + "", null);
        if (rawQuery.getCount() <= 0) {
            rawQuery.close();
            return 0;
        }
        rawQuery.moveToFirst();
        int i = rawQuery.getInt(rawQuery.getColumnIndex(RECENT_IS_USER_LIKE));
        rawQuery.close();
        return i;
    }

    public boolean isResponseAlready(String str, String str2, int i) {
        boolean z = false;
        SQLiteDatabase db = getDB();
        if (db != null) {
            Cursor rawQuery = db.rawQuery("SELECT * FROM messages WHERE senderpin ='" + str + "' AND " + CONVERSATION_KEY + " ='" + str2 + "' AND " + MESSAGETYPE + " ='" + i + "'", null);
            Log.d(TAG, "SELECT * FROM messages WHERE senderpin ='" + str + "' AND " + CONVERSATION_KEY + " ='" + str2 + "'");
            if (rawQuery.getCount() > 0) {
                z = true;
            }
            rawQuery.close();
        }
        return z;
    }

    public boolean isStatusCommentExist(String str, Long l) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        Cursor rawQuery = db.rawQuery("SELECT count FROM messages WHERE senderpin = '" + str + "' AND " + SEQUENCE + "=" + l, null);
        rawQuery.moveToNext();
        try {
            rawQuery.getInt(rawQuery.getColumnIndex(COUNT));
            rawQuery.close();
            return true;
        } catch (Exception e) {
            rawQuery.close();
            return false;
        }
    }

    public boolean isUserMessageForStatusLikeExists(String str, String str2, String str3) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        boolean z;
        Cursor query = db.query(MESSAGES_TABLE_NAME, null, "convkey = '" + str2 + "' AND " + SENDERPIN + " = '" + str + "'", null, null, null, "_id");
        if (query.getCount() > 0) {
            if (str3 == null) {
                z = true;
            } else {
                query.moveToNext();
                if (str3.compareTo(query.getString(query.getColumnIndex(MESSAGE))) == 0) {
                    z = true;
                }
            }
            query.close();
            return z;
        }
        z = false;
        query.close();
        return z;
    }

    public boolean removeBlockedNic(CatfishMessageObject catfishMessageObject) {
        FriendListDataStorage friendListDataStorage = new FriendListDataStorage(this.mContext);
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        friendListDataStorage.setBlackList(catfishMessageObject.userpin, false);
        return db.delete(IGNORED_NIC_TABLE_NAME, new StringBuilder().append("userpin='").append(catfishMessageObject.userpin).append("'").toString(), null) > 0;
    }

    public void resetUnreadStatusCommentCount() {
        this.mContext.getSharedPreferences(PREFERENCE_NAME, 0).edit().remove(PREF_NAME_UNREAD_STATUS_COMMENT).commit();
    }

    public void saveUpdateRecentOpen(String str) {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(RECENT_NEW_COMMENT, Integer.valueOf(0));
            contentValues.put(RECENT_NEW_LIKE, Integer.valueOf(0));
            db.update(RECENTUPDATES_TABLE_NAME, contentValues, "recrecipient = '" + str + "' AND " + RECENT_ACTION_CODE + " = " + UpdateRecent.STATUSUPDT.ordinal(), null);
        }
    }

    public void saveUpdateRecentOpenComment(String str) {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(RECENT_NEW_COMMENT, Integer.valueOf(0));
            db.update(RECENTUPDATES_TABLE_NAME, contentValues, "recrecipient = '" + str + "' AND " + RECENT_ACTION_CODE + " = " + UpdateRecent.STATUSUPDT.ordinal(), null);
        }
    }

    public void saveUpdateRecentOpenLike(String str) {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(RECENT_NEW_LIKE, Integer.valueOf(0));
            db.update(RECENTUPDATES_TABLE_NAME, contentValues, "recrecipient = '" + str + "' AND " + RECENT_ACTION_CODE + " = " + UpdateRecent.STATUSUPDT.ordinal(), null);
        }
    }

    public boolean setAsReadMessages(CatfishMessageObject catfishMessageObject) {
        if (!new FriendListDataStorage(this.mContext).isSenderAFriend(catfishMessageObject)) {
            return false;
        }
        SQLiteDatabase db = getDB();
        String str = catfishMessageObject.userpin + ":" + catfishMessageObject.senderpin;
        if (db == null) {
            return false;
        }
        Log.d(TAG, "ConvKey: " + str + "\n" + "Sequence: " + String.valueOf(catfishMessageObject.sequence));
        ContentValues contentValues = new ContentValues();
        contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        return db.update(MESSAGES_TABLE_NAME, contentValues, new StringBuilder().append("convkey = '").append(str).append("' AND ").append(RECIPIENT).append(" = '").append(catfishMessageObject.senderpin).append("' AND ").append(DELIVERYSTATUS).append(" = ").append(String.valueOf(MessageDeliveryStatus.DELIVERED.ordinal())).toString(), null) > 0;
    }

    public String setStatusDownloadFlag(CatfishMessageObject catfishMessageObject, String str) {
        if (catfishMessageObject == null || catfishMessageObject.message == null) {
            return null;
        }
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        try {
            int parseInt = Integer.parseInt(catfishMessageObject.message);
            Log.d(TAG, "update download button:" + parseInt);
            ContentValues contentValues = new ContentValues();
            contentValues.put(IMAGETHUMB_URI, str);
            if (db.update(MESSAGES_TABLE_NAME, contentValues, "_id =" + parseInt, null) <= 0) {
                return null;
            }
            Cursor query = db.query(MESSAGES_TABLE_NAME, null, "_id = '" + parseInt + "'", null, null, null, null);
            query.moveToFirst();
            return query.getString(query.getColumnIndex(CONVERSATION_KEY));
        } catch (Exception e) {
            return null;
        }
    }

    public void setTransactionSuccessful() {
        SQLiteDatabase db = getDB();
        if (db != null) {
            db.setTransactionSuccessful();
        }
    }

    public boolean storeBlockedNic(CatfishMessageObject catfishMessageObject) {
        FriendListDataStorage friendListDataStorage = new FriendListDataStorage(this.mContext);
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        catfishMessageObject.senderpin = catfishMessageObject.userpin;
        if (friendListDataStorage.isFriendRequestExists(catfishMessageObject)) {
            friendListDataStorage.deleteFriendRequest(catfishMessageObject);
        }
        friendListDataStorage.setBlackList(catfishMessageObject.senderpin, true);
        ContentValues contentValues = new ContentValues();
        contentValues.put(USERPIN, catfishMessageObject.userpin);
        contentValues.put(USERNAME, catfishMessageObject.username);
        contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
        long insert = db.insert(IGNORED_NIC_TABLE_NAME, null, contentValues);
        contentValues.clear();
        return insert != -1;
    }

    public boolean storeMessages(ArrayList arrayList, int i) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        int size = arrayList.size();
        long j = 0;
        db.beginTransaction();
        FriendListDataStorage friendListDataStorage = new FriendListDataStorage(this.mContext);
        for (int i2 = 0; i2 < size; i2++) {
            ContentValues contentValues = new ContentValues();
            CatfishMessageObject catfishMessageObject = (CatfishMessageObject) arrayList.get(i2);
            contentValues.put(SENDERPIN, catfishMessageObject.senderpin);
            if (catfishMessageObject.sendername == null || catfishMessageObject.sendername.isEmpty()) {
                contentValues.put(SENDERNAME, friendListDataStorage.getFriendname(catfishMessageObject.senderpin));
            } else {
                contentValues.put(SENDERNAME, catfishMessageObject.sendername);
            }
            contentValues.put(RECIPIENT, catfishMessageObject.userpin);
            contentValues.put(MESSAGETYPE, Integer.valueOf(catfishMessageObject.messagetype.ordinal()));
            contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
            String str = catfishMessageObject.conversation_key != null ? catfishMessageObject.conversation_key : catfishMessageObject.userpin + ":" + catfishMessageObject.senderpin;
            if (catfishMessageObject.stickerheight > 0) {
                contentValues.put(STICKERSIZEHEIGHT, Integer.valueOf(catfishMessageObject.stickerheight));
            }
            if (catfishMessageObject.stickerwidth > 0) {
                contentValues.put(STICKERSIZEWIDTH, Integer.valueOf(catfishMessageObject.stickerwidth));
            }
            contentValues.put(CONVERSATION_KEY, str);
            contentValues.put(MESSAGE, catfishMessageObject.message);
            contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
            contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.sequence));
            contentValues.put(IMAGETHUMB_URI, catfishMessageObject.imagethumb_uri);
            contentValues.put(IMAGEPATH, catfishMessageObject.image_path);
            contentValues.put(VOICEFILEPATH, catfishMessageObject.voicefilepath);
            contentValues.put(OBJECTSEQUENCE, Long.valueOf(catfishMessageObject.object_sequence));
            contentValues.put(OBJECTOWNERPIN, catfishMessageObject.object_owner);
            contentValues.put(DATAFILEPATH, catfishMessageObject.datafile_path);
            Cursor query = db.query(MESSAGES_TABLE_NAME, null, "sequence = '" + catfishMessageObject.sequence + "' and " + SENDERPIN + " = '" + catfishMessageObject.senderpin + "' and " + RECIPIENT + " = '" + catfishMessageObject.userpin + "' ", null, null, null, null);
            if (query.getCount() <= 0) {
                long j2;
                if (catfishMessageObject.messagetype == MessageType.DELETE_STATUSCOMENT_BYOWNER) {
                    long delete;
                    try {
                        JSONObject jSONObject = new JSONObject(catfishMessageObject.message);
                        delete = (long) db.delete(MESSAGES_TABLE_NAME, "senderpin ='" + jSONObject.getString(SENDERPIN) + "' and " + SEQUENCE + " =" + jSONObject.getString(SEQUENCE), null);
                    } catch (JSONException e) {
                        e.printStackTrace();
                        delete = j;
                    } catch (Throwable th) {
                        db.endTransaction();
                    }
                    j2 = delete;
                } else {
                    j2 = db.insert(MESSAGES_TABLE_NAME, null, contentValues);
                }
                if (i == 100) {
                    friendListDataStorage.updateActivityCount(catfishMessageObject.object_owner, i);
                } else {
                    friendListDataStorage.updateActivityCount(catfishMessageObject.senderpin, i);
                }
                if (i == 600) {
                    Log.d(TAG, "file path from catfiz lib : " + catfishMessageObject.datafile_path);
                    Log.d(TAG, "file path from catfiz lib : " + catfishMessageObject.datafile_path);
                    friendListDataStorage.updateLastChatActivity(catfishMessageObject.senderpin, catfishMessageObject.rcvtimestamp);
                    friendListDataStorage.setLastMessage(false, catfishMessageObject.senderpin, catfishMessageObject.sequence, catfishMessageObject.message, catfishMessageObject.deliverystatus.ordinal(), catfishMessageObject.messagetype.ordinal(), catfishMessageObject.datafile_path);
                    friendListDataStorage.setLastMessageOfficial(catfishMessageObject.senderpin, catfishMessageObject.sequence, catfishMessageObject.message, catfishMessageObject.deliverystatus.ordinal(), catfishMessageObject.messagetype.ordinal(), catfishMessageObject.datafile_path);
                }
                if (j2 > 0) {
                    if (catfishMessageObject.messagetype != MessageType.DELETE_STATUSCOMENT_BYOWNER) {
                        Log.d(TAG, "INSERT WITH CONVERSATION_KEY=" + str);
                        if (!(catfishMessageObject.messagetype == MessageType.STATUSCOMMENT || catfishMessageObject.messagetype == MessageType.LONGSTATUSCOMMENT || catfishMessageObject.messagetype == MessageType.PROMOTECONTACT || catfishMessageObject.messagetype == MessageType.BCASTIMAGESTATUS || catfishMessageObject.messagetype == MessageType.BCASTVOICESTATUS || catfishMessageObject.messagetype == MessageType.DELETE_STATUSCOMENT_BYOWNER || catfishMessageObject.messagetype == MessageType.SHARE_SLINK_AT_COMMENT || catfishMessageObject.messagetype == MessageType.STIKER_MESSAGE_STATUS || catfishMessageObject.messagetype == MessageType.NIC_MESSAGE || catfishMessageObject.messagetype == MessageType.BCASTVIDEOSTATUS)) {
                            friendListDataStorage.setUnReadMessageStatus(catfishMessageObject.senderpin, 1, catfishMessageObject.rcvtimestamp);
                            j = j2;
                        }
                    } else {
                        Log.d(TAG, "DELETED WITH CONVERSATION_KEY=" + str);
                        j = j2;
                    }
                } else if (catfishMessageObject.messagetype != MessageType.DELETE_STATUSCOMENT_BYOWNER) {
                    Log.d(TAG, "INSERT WITH CONVERSATION_KEY=" + str + ": FAIL!!!");
                    j = j2;
                } else {
                    Log.d(TAG, "DELETE WITH CONVERSATION_KEY=" + str + ": FAIL!!!");
                }
                j = j2;
            }
            query.close();
            contentValues.clear();
        }
        db.setTransactionSuccessful();
        db.endTransaction();
        Log.d(TAG, "Messages STORED");
        return true;
    }

    public boolean storeNicProfileCache(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(NIC_NIC, catfishMessageObject.recipient);
        contentValues.put(NIC_NAME, catfishMessageObject.username);
        contentValues.put(STATUSCOMMENT_TABLE_NAME, catfishMessageObject.userstatus);
        contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.object_sequence));
        checkNDeleteNicProfileCache();
        long insert = db.insert(NIC_PROFILE_CACHE_TABLE_NAME, null, contentValues);
        if (insert <= 0) {
            Log.e(TAG, "storeFizzlink download info : SLINK: " + catfishMessageObject.slink + ": FAIL");
        }
        return insert > 0;
    }

    public boolean storeObjectComment(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        long insert;
        ContentValues contentValues = new ContentValues();
        contentValues.put(SENDERPIN, catfishMessageObject.senderpin);
        contentValues.put(SENDERNAME, catfishMessageObject.sendername);
        contentValues.put(RECIPIENT, catfishMessageObject.recipient);
        contentValues.put(MESSAGETYPE, Integer.valueOf(catfishMessageObject.messagetype.ordinal()));
        contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
        contentValues.put(CONVERSATION_KEY, catfishMessageObject.conversation_key);
        contentValues.put(MESSAGE, catfishMessageObject.message);
        contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.sequence));
        contentValues.put(OBJECTSEQUENCE, Long.valueOf(catfishMessageObject.object_sequence));
        contentValues.put(OBJECTOWNERPIN, catfishMessageObject.object_owner);
        Cursor query = db.query(OBJECT_COMMENT_TABLE_NAME, null, "sequence = '" + catfishMessageObject.sequence + "' and " + SENDERPIN + " = '" + catfishMessageObject.userpin + "' and " + RECIPIENT + " = '" + catfishMessageObject.recipient + "' ", null, null, null, null);
        if (query.getCount() <= 0) {
            insert = db.insert(OBJECT_COMMENT_TABLE_NAME, null, contentValues);
            if (insert <= 0) {
                Log.e(TAG, "storeObjectComment: ADD CONV WITH KEY: " + catfishMessageObject.userpin + ":" + catfishMessageObject.recipient + ": FAIL");
            }
        } else {
            insert = 0;
        }
        query.close();
        return insert > 0;
    }

    public boolean storeOfficialMessage(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        db.beginTransaction();
        FriendListDataStorage friendListDataStorage = new FriendListDataStorage(this.mContext);
        try {
            ContentValues contentValues = new ContentValues();
            if (catfishMessageObject.type == 2) {
                contentValues.put(MESSAGETYPE, Integer.valueOf(MessageType.VIDEO_STREAMING.ordinal()));
                contentValues.put(SLINK, catfishMessageObject.slink);
            } else if (catfishMessageObject.type == 4) {
                contentValues.put(MESSAGETYPE, Integer.valueOf(MessageType.FIZZLINK_IMAGE.ordinal()));
                contentValues.put(SLINK, catfishMessageObject.slink);
            } else {
                contentValues.put(MESSAGETYPE, Integer.valueOf(catfishMessageObject.messagetype.ordinal()));
            }
            contentValues.put(SENDERPIN, catfishMessageObject.senderpin);
            contentValues.put(SENDERNAME, catfishMessageObject.sendername);
            contentValues.put(RECIPIENT, catfishMessageObject.userpin);
            contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
            String str = catfishMessageObject.conversation_key != null ? catfishMessageObject.conversation_key : catfishMessageObject.userpin + ":" + catfishMessageObject.senderpin;
            if (catfishMessageObject.stickerheight > 0) {
                contentValues.put(STICKERSIZEHEIGHT, Integer.valueOf(catfishMessageObject.stickerheight));
            }
            if (catfishMessageObject.stickerwidth > 0) {
                contentValues.put(STICKERSIZEWIDTH, Integer.valueOf(catfishMessageObject.stickerwidth));
            }
            contentValues.put(CONVERSATION_KEY, str);
            contentValues.put(MESSAGE, catfishMessageObject.message);
            contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
            contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.sequence));
            contentValues.put(IMAGETHUMB_URI, catfishMessageObject.imagethumb_uri);
            contentValues.put(IMAGEPATH, catfishMessageObject.image_path);
            contentValues.put(VOICEFILEPATH, catfishMessageObject.voicefilepath);
            contentValues.put(OBJECTSEQUENCE, Long.valueOf(catfishMessageObject.object_sequence));
            contentValues.put(OBJECTOWNERPIN, catfishMessageObject.object_owner);
            contentValues.put(DATAFILEPATH, catfishMessageObject.datafile_path);
            Cursor query = db.query(MESSAGES_TABLE_NAME, null, "sequence = '" + catfishMessageObject.sequence + "' and " + SENDERPIN + " = '" + catfishMessageObject.senderpin + "' and " + RECIPIENT + " = '" + catfishMessageObject.userpin + "' ", null, null, null, null);
            if (query.getCount() <= 0) {
                long insert = db.insert(MESSAGES_TABLE_NAME, null, contentValues);
                Log.d(TAG, "file path from catfiz lib : " + catfishMessageObject.datafile_path);
                if (!friendListDataStorage.updateLastChatActivity(catfishMessageObject.senderpin, catfishMessageObject.rcvtimestamp)) {
                    Log.d(TAG, "FAIL UPDATE LASTCHATACTIVITY: " + catfishMessageObject.senderpin + ", timestamp: " + catfishMessageObject.rcvtimestamp);
                }
                friendListDataStorage.setLastMessage(false, catfishMessageObject.senderpin, catfishMessageObject.sequence, catfishMessageObject.message, catfishMessageObject.deliverystatus.ordinal(), catfishMessageObject.messagetype.ordinal(), catfishMessageObject.datafile_path);
                friendListDataStorage.setLastMessageOfficial(catfishMessageObject.senderpin, catfishMessageObject.sequence, catfishMessageObject.message, catfishMessageObject.deliverystatus.ordinal(), catfishMessageObject.messagetype.ordinal(), catfishMessageObject.datafile_path);
                if (insert > 0) {
                    friendListDataStorage.setUnReadMessageStatus(catfishMessageObject.senderpin, 1, catfishMessageObject.rcvtimestamp);
                } else if (catfishMessageObject.messagetype != MessageType.DELETE_STATUSCOMENT_BYOWNER) {
                    Log.d(TAG, "INSERT WITH CONVERSATION_KEY=" + str + ": FAIL!!!");
                } else {
                    Log.d(TAG, "DELETE WITH CONVERSATION_KEY=" + str + ": FAIL!!!");
                }
            }
            query.close();
            contentValues.clear();
            db.setTransactionSuccessful();
            Log.d(TAG, "Messages STORED");
            return true;
        } finally {
            db.endTransaction();
        }
    }

    public boolean storeSVGCodeMessage(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(FILENAME, catfishMessageObject.filename);
        contentValues.put(CODE, catfishMessageObject.code);
        contentValues.put(REPO, catfishMessageObject.repo);
        Cursor query = db.query(SVG_CODE_TABLE_NAME, null, "filename = '" + catfishMessageObject.filename + "' and " + CODE + " = '" + catfishMessageObject.code + "' and " + REPO + " = '" + catfishMessageObject.repo + "' ", null, null, null, null);
        if (query.getCount() <= 0 && db.insert(SVG_CODE_TABLE_NAME, null, contentValues) <= 0) {
            Log.d(TAG, "INSERT CODE :" + catfishMessageObject.code + " WITH FILENAME :" + catfishMessageObject.filename + " FAIL!!!");
        }
        query.close();
        contentValues.clear();
        return true;
    }

    public boolean storeSingleMessage(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        FriendListDataStorage friendListDataStorage = new FriendListDataStorage(this.mContext);
        ContentValues contentValues = new ContentValues();
        contentValues.put(SENDERPIN, catfishMessageObject.senderpin);
        contentValues.put(SENDERNAME, catfishMessageObject.sendername);
        contentValues.put(RECIPIENT, catfishMessageObject.userpin);
        contentValues.put(MESSAGETYPE, Integer.valueOf(catfishMessageObject.messagetype.ordinal()));
        contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
        String str = catfishMessageObject.conversation_key != null ? catfishMessageObject.conversation_key : catfishMessageObject.userpin + ":" + catfishMessageObject.senderpin;
        if (catfishMessageObject.slink != null) {
            contentValues.put(SLINK, catfishMessageObject.slink);
        }
        contentValues.put(CONVERSATION_KEY, str);
        contentValues.put(MESSAGE, catfishMessageObject.message);
        contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.sequence));
        contentValues.put(IMAGETHUMB_URI, catfishMessageObject.imagethumb_uri);
        contentValues.put(IMAGEPATH, catfishMessageObject.image_path);
        contentValues.put(VOICEFILEPATH, catfishMessageObject.voicefilepath);
        contentValues.put(OBJECTSEQUENCE, Long.valueOf(catfishMessageObject.object_sequence));
        contentValues.put(OBJECTOWNERPIN, catfishMessageObject.object_owner);
        contentValues.put(DATAFILEPATH, catfishMessageObject.datafile_path);
        Cursor query = db.query(MESSAGES_TABLE_NAME, null, "sequence = '" + catfishMessageObject.sequence + "' and " + SENDERPIN + " = '" + catfishMessageObject.senderpin + "' and " + RECIPIENT + " = '" + catfishMessageObject.userpin + "' ", null, null, null, null);
        if (query.getCount() <= 0) {
            if (db.insert(MESSAGES_TABLE_NAME, null, contentValues) <= 0) {
                Log.d(TAG, "INSERT WITH CONVERSATION_KEY=" + str + ": FAIL!!!");
            } else if (!(catfishMessageObject.messagetype == MessageType.STATUSCOMMENT || catfishMessageObject.messagetype == MessageType.BCASTIMAGESTATUS || catfishMessageObject.messagetype == MessageType.LONGSTATUSCOMMENT || catfishMessageObject.messagetype == MessageType.BCASTVIDEOSTATUS || catfishMessageObject.messagetype == MessageType.NIC_MESSAGE || catfishMessageObject.messagetype == MessageType.OBJECTCOMMENT || catfishMessageObject.messagetype == MessageType.BCASTVOICESTATUS || catfishMessageObject.messagetype == MessageType.STIKER_MESSAGE_STATUS)) {
                Log.d(TAG, "INSERT WITH CONVERSATION_KEY=" + str);
                friendListDataStorage.setUnReadMessageStatus(catfishMessageObject.senderpin, 1, catfishMessageObject.rcvtimestamp);
                String str2 = null;
                if (catfishMessageObject.image_path != null && !catfishMessageObject.image_path.equals("")) {
                    str2 = catfishMessageObject.image_path;
                } else if (catfishMessageObject.voicefilepath != null && !catfishMessageObject.voicefilepath.equals("")) {
                    str2 = catfishMessageObject.voicefilepath;
                } else if (!(catfishMessageObject.datafile_path == null || catfishMessageObject.datafile_path.equals(""))) {
                    str2 = catfishMessageObject.datafile_path;
                }
                friendListDataStorage.updateLastChatActivity(catfishMessageObject.senderpin, catfishMessageObject.rcvtimestamp);
                friendListDataStorage.setLastMessage(false, catfishMessageObject.senderpin, catfishMessageObject.sequence, catfishMessageObject.message, catfishMessageObject.deliverystatus.ordinal(), catfishMessageObject.messagetype.ordinal(), str2);
            }
        }
        query.close();
        contentValues.clear();
        Log.d(TAG, "Message STORED");
        return true;
    }

    public boolean storeUserMessage(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        long j;
        boolean z;
        ContentValues contentValues = new ContentValues();
        contentValues.put(SENDERPIN, catfishMessageObject.userpin);
        contentValues.put(SENDERNAME, catfishMessageObject.username);
        contentValues.put(RECIPIENT, catfishMessageObject.recipient);
        contentValues.put(MESSAGETYPE, Integer.valueOf(catfishMessageObject.messagetype.ordinal()));
        contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
        String str = catfishMessageObject.conversation_key != null ? catfishMessageObject.conversation_key : catfishMessageObject.userpin + ":" + catfishMessageObject.recipient;
        if (catfishMessageObject.stickerheight > 0) {
            contentValues.put(STICKERSIZEHEIGHT, Integer.valueOf(catfishMessageObject.stickerheight));
        }
        if (catfishMessageObject.stickerwidth > 0) {
            contentValues.put(STICKERSIZEWIDTH, Integer.valueOf(catfishMessageObject.stickerwidth));
        }
        contentValues.put(CONVERSATION_KEY, str);
        contentValues.put(MESSAGE, catfishMessageObject.message);
        contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.sequence));
        contentValues.put(IMAGETHUMB_URI, catfishMessageObject.imagethumb_uri);
        contentValues.put(IMAGEPATH, catfishMessageObject.image_path);
        contentValues.put(VOICEFILEPATH, catfishMessageObject.voicefilepath);
        contentValues.put(OBJECTSEQUENCE, Long.valueOf(catfishMessageObject.object_sequence));
        contentValues.put(OBJECTOWNERPIN, catfishMessageObject.object_owner);
        contentValues.put(DATAFILEPATH, catfishMessageObject.datafile_path);
        Cursor query = db.query(MESSAGES_TABLE_NAME, null, "sequence = '" + catfishMessageObject.sequence + "' and " + SENDERPIN + " = '" + catfishMessageObject.userpin + "' and " + RECIPIENT + " = '" + catfishMessageObject.recipient + "' ", null, null, null, null);
        if (query.getCount() <= 0) {
            long insert = db.insert(MESSAGES_TABLE_NAME, null, contentValues);
            if (insert <= 0) {
                Log.e(TAG, "storeUserMessage: ADD CONV WITH KEY: " + str + ": FAIL");
                j = insert;
                z = false;
            } else {
                j = insert;
                z = false;
            }
        } else {
            Log.d(TAG, "message with same sequence, dont insert this");
            z = true;
            j = 0;
        }
        query.close();
        return j > 0 || z;
    }

    public boolean storeUserMessageForStatusLike(CatfishMessageObject catfishMessageObject, String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        long j;
        boolean z;
        ContentValues contentValues = new ContentValues();
        contentValues.put(SENDERPIN, catfishMessageObject.userpin);
        contentValues.put(SENDERNAME, catfishMessageObject.username);
        contentValues.put(RECIPIENT, catfishMessageObject.recipient);
        contentValues.put(MESSAGETYPE, Integer.valueOf(catfishMessageObject.messagetype.ordinal()));
        contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
        if (str != null) {
            contentValues.put(CONVERSATION_KEY, str);
        } else {
            contentValues.put(CONVERSATION_KEY, catfishMessageObject.conversation_key);
        }
        contentValues.put(MESSAGE, catfishMessageObject.message);
        contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.sequence));
        contentValues.put(IMAGETHUMB_URI, catfishMessageObject.imagethumb_uri);
        contentValues.put(IMAGEPATH, catfishMessageObject.image_path);
        contentValues.put(VOICEFILEPATH, catfishMessageObject.voicefilepath);
        contentValues.put(OBJECTSEQUENCE, Long.valueOf(catfishMessageObject.object_sequence));
        contentValues.put(OBJECTOWNERPIN, catfishMessageObject.object_owner);
        contentValues.put(DATAFILEPATH, catfishMessageObject.datafile_path);
        Cursor query = db.query(MESSAGES_TABLE_NAME, null, "sequence = '" + catfishMessageObject.sequence + "' and " + SENDERPIN + " = '" + catfishMessageObject.userpin + "' and " + RECIPIENT + " = '" + catfishMessageObject.recipient + "' ", null, null, null, null);
        if (query.getCount() <= 0) {
            long insert;
            if (catfishMessageObject.message.compareTo("1") == 0) {
                insert = db.insert(MESSAGES_TABLE_NAME, null, contentValues);
            } else {
                Log.d(TAG, "isi message:" + catfishMessageObject.message + "$");
                insert = (long) db.delete(MESSAGES_TABLE_NAME, "senderpin ='" + catfishMessageObject.userpin + "' AND " + CONVERSATION_KEY + " ='" + str + "'", null);
            }
            if (insert > 0) {
                j = insert;
                z = false;
            } else if (str != null) {
                Log.e(TAG, "storeUserMessage: ADD CONV WITH KEY: " + str + " FAIL");
                j = insert;
                z = false;
            } else {
                Log.e(TAG, "storeUserMessage: ADD CONV WITH KEY: " + catfishMessageObject.userpin + ":" + catfishMessageObject.recipient + ": FAIL");
                j = insert;
                z = false;
            }
        } else {
            z = true;
            j = 0;
        }
        query.close();
        return j > 0 || z;
    }

    public boolean storeUserMessageWConvKey(CatfishMessageObject catfishMessageObject, String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        long delete;
        ContentValues contentValues = new ContentValues();
        contentValues.put(SENDERPIN, catfishMessageObject.userpin);
        contentValues.put(SENDERNAME, catfishMessageObject.username);
        contentValues.put(RECIPIENT, catfishMessageObject.recipient);
        contentValues.put(MESSAGETYPE, Integer.valueOf(catfishMessageObject.messagetype.ordinal()));
        contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
        if (str != null) {
            contentValues.put(CONVERSATION_KEY, str);
        } else {
            contentValues.put(CONVERSATION_KEY, catfishMessageObject.conversation_key);
        }
        if (catfishMessageObject.stickerheight > 0) {
            contentValues.put(STICKERSIZEHEIGHT, Integer.valueOf(catfishMessageObject.stickerheight));
        }
        if (catfishMessageObject.stickerwidth > 0) {
            contentValues.put(STICKERSIZEWIDTH, Integer.valueOf(catfishMessageObject.stickerwidth));
        }
        contentValues.put(MESSAGE, catfishMessageObject.message);
        contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.sequence));
        contentValues.put(IMAGETHUMB_URI, catfishMessageObject.imagethumb_uri);
        contentValues.put(IMAGEPATH, catfishMessageObject.image_path);
        contentValues.put(VOICEFILEPATH, catfishMessageObject.voicefilepath);
        contentValues.put(OBJECTSEQUENCE, Long.valueOf(catfishMessageObject.object_sequence));
        contentValues.put(OBJECTOWNERPIN, catfishMessageObject.object_owner);
        contentValues.put(DATAFILEPATH, catfishMessageObject.datafile_path);
        Cursor query = db.query(MESSAGES_TABLE_NAME, null, "sequence = '" + catfishMessageObject.sequence + "' and " + SENDERPIN + " = '" + catfishMessageObject.userpin + "' and " + RECIPIENT + " = '" + catfishMessageObject.recipient + "' ", null, null, null, null);
        if (query.getCount() <= 0) {
            if (catfishMessageObject.messagetype == MessageType.DELETE_STATUSCOMENT_BYOWNER) {
                try {
                    JSONObject jSONObject = new JSONObject(catfishMessageObject.message);
                    delete = (long) db.delete(MESSAGES_TABLE_NAME, "senderpin ='" + jSONObject.getString(SENDERPIN) + "' and " + SEQUENCE + " =" + jSONObject.getString(SEQUENCE), null);
                } catch (JSONException e) {
                    e.printStackTrace();
                    delete = 0;
                }
            } else {
                delete = db.insert(MESSAGES_TABLE_NAME, null, contentValues);
            }
            if (delete <= 0) {
                if (str != null) {
                    if (catfishMessageObject.messagetype != MessageType.DELETE_STATUSCOMENT_BYOWNER) {
                        Log.e(TAG, "storeUserMessage: ADD CONV WITH KEY: " + str + ": FAIL");
                    } else {
                        Log.e(TAG, "dellUserMessage: DEL CONV WITH KEY: " + str + ": FAIL");
                    }
                } else if (catfishMessageObject.messagetype != MessageType.DELETE_STATUSCOMENT_BYOWNER) {
                    Log.e(TAG, "storeUserMessage: ADD CONV WITH KEY: " + catfishMessageObject.userpin + ":" + catfishMessageObject.recipient + ": FAIL");
                } else {
                    Log.e(TAG, "deleteUserMessage: DEL CONV WITH KEY: " + catfishMessageObject.userpin + ":" + catfishMessageObject.recipient + ": FAIL");
                }
            }
        } else {
            delete = 0;
        }
        query.close();
        if (delete <= 0) {
            return false;
        }
        Log.d(TAG, "Success simpan message:" + catfishMessageObject.sequence);
        return true;
    }

    public boolean storeUserMessageWConvKeyForResponse(CatfishMessageObject catfishMessageObject, String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        Object obj;
        long j;
        ContentValues contentValues = new ContentValues();
        contentValues.put(SENDERPIN, catfishMessageObject.userpin);
        contentValues.put(SENDERNAME, catfishMessageObject.username);
        contentValues.put(RECIPIENT, catfishMessageObject.recipient);
        contentValues.put(MESSAGETYPE, Integer.valueOf(catfishMessageObject.messagetype.ordinal()));
        contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
        if (str != null) {
            contentValues.put(CONVERSATION_KEY, str);
        } else {
            contentValues.put(CONVERSATION_KEY, catfishMessageObject.conversation_key);
        }
        contentValues.put(MESSAGE, catfishMessageObject.message);
        contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.sequence));
        contentValues.put(IMAGETHUMB_URI, catfishMessageObject.imagethumb_uri);
        contentValues.put(IMAGEPATH, catfishMessageObject.image_path);
        contentValues.put(VOICEFILEPATH, catfishMessageObject.voicefilepath);
        contentValues.put(OBJECTSEQUENCE, Long.valueOf(catfishMessageObject.object_sequence));
        contentValues.put(OBJECTOWNERPIN, catfishMessageObject.object_owner);
        contentValues.put(DATAFILEPATH, catfishMessageObject.datafile_path);
        Cursor query = db.query(MESSAGES_TABLE_NAME, null, "sequence = '" + catfishMessageObject.sequence + "' ", null, null, null, null);
        if (query.getCount() <= 0) {
            long insert = db.insert(MESSAGES_TABLE_NAME, null, contentValues);
            if (insert <= 0) {
                if (str != null) {
                    Log.e(TAG, "storeUserMessage: ADD CONV WITH KEY: " + str + ": FAIL");
                } else {
                    Log.e(TAG, "storeUserMessage: ADD CONV WITH KEY: " + catfishMessageObject.userpin + ":" + catfishMessageObject.recipient + ": FAIL");
                }
            }
            Cursor rawQuery = catfishMessageObject.messagetype == MessageType.LIKE ? db.rawQuery("SELECT count FROM messages WHERE senderpin = '" + catfishMessageObject.object_owner + "' AND " + SEQUENCE + "=" + catfishMessageObject.object_sequence, null) : catfishMessageObject.messagetype == MessageType.FLAG ? db.rawQuery("SELECT countflag FROM messages WHERE senderpin = '" + catfishMessageObject.object_owner + "' AND " + SEQUENCE + "=" + catfishMessageObject.object_sequence, null) : catfishMessageObject.messagetype == MessageType.PRET ? db.rawQuery("SELECT countpret FROM messages WHERE senderpin = '" + catfishMessageObject.object_owner + "' AND " + SEQUENCE + "=" + catfishMessageObject.object_sequence, null) : db.rawQuery("SELECT countfunny FROM messages WHERE senderpin = '" + catfishMessageObject.object_owner + "' AND " + SEQUENCE + "=" + catfishMessageObject.object_sequence, null);
            int columnIndex = catfishMessageObject.messagetype == MessageType.LIKE ? rawQuery.getColumnIndex(COUNT) : catfishMessageObject.messagetype == MessageType.FLAG ? rawQuery.getColumnIndex(COUNTFLAG) : catfishMessageObject.messagetype == MessageType.PRET ? rawQuery.getColumnIndex(COUNTPRET) : rawQuery.getColumnIndex(COUNTFUN);
            rawQuery.moveToNext();
            columnIndex = rawQuery.getInt(columnIndex) + 1;
            rawQuery.close();
            contentValues.clear();
            if (catfishMessageObject.messagetype == MessageType.LIKE) {
                contentValues.put(COUNT, Integer.valueOf(columnIndex));
                Log.e(TAG, "rcv" + catfishMessageObject.rcvtimestamp);
            } else if (catfishMessageObject.messagetype == MessageType.FLAG) {
                contentValues.put(COUNTFLAG, Integer.valueOf(columnIndex));
            } else if (catfishMessageObject.messagetype == MessageType.PRET) {
                contentValues.put(COUNTPRET, Integer.valueOf(columnIndex));
            } else {
                contentValues.put(COUNTFUN, Integer.valueOf(columnIndex));
            }
            db.update(MESSAGES_TABLE_NAME, contentValues, "senderpin='" + catfishMessageObject.object_owner + "' AND " + SEQUENCE + "='" + catfishMessageObject.object_sequence + "' ", null);
            obj = null;
            j = insert;
        } else {
            obj = 1;
            j = 0;
        }
        query.close();
        return j > 0 || obj != null;
    }

    public void updatDiscussMessage(CatfishMessageObject catfishMessageObject) {
        Log.d(TAG, "Try updated:" + catfishMessageObject.sequence + ", with:" + catfishMessageObject.message);
        SQLiteDatabase db = getDB();
        ContentValues contentValues = new ContentValues();
        long j = catfishMessageObject.sequence;
        if (catfishMessageObject.message != null) {
            contentValues.put(MESSAGE, catfishMessageObject.message);
        }
        if (db.update(MESSAGES_TABLE_NAME, contentValues, "sequence='" + j + "'", null) != 0) {
            Log.d(TAG, "" + j + " Updated");
        }
        contentValues.clear();
    }

    public boolean updateBCASTSentStatus(CatfishMessageObject catfishMessageObject) {
        int i = 0;
        if (catfishMessageObject.recipients == null || catfishMessageObject.recipients.length <= 0) {
            return false;
        }
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        db.beginTransaction();
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
            String[] strArr = catfishMessageObject.recipients;
            int length = strArr.length;
            while (i < length) {
                String str = strArr[i];
                String str2 = catfishMessageObject.userpin + ":" + str;
                if (db.update(MESSAGES_TABLE_NAME, contentValues, "convkey = '" + str2 + "' AND " + SEQUENCE + " = " + String.valueOf(catfishMessageObject.sequence) + " AND " + RECIPIENT + " = '" + str + "' AND " + MESSAGETYPE + " = " + String.valueOf(catfishMessageObject.messagetype.ordinal()), null) > 0) {
                    Log.d(TAG, "BCAST UPDATE STATUS: ConvKey: " + str2 + " , " + "Sequence: " + String.valueOf(catfishMessageObject.sequence) + ": SUCCESS");
                } else {
                    Log.d(TAG, "BCAST UPDATE STATUS: ConvKey: " + str2 + " , " + "Sequence: " + String.valueOf(catfishMessageObject.sequence) + ": FAIL");
                }
                i++;
            }
            db.setTransactionSuccessful();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            db.endTransaction();
        }
        return true;
    }

    public boolean updateBCASTSentStatusNSlinkWKey(CatfishMessageObject catfishMessageObject) {
        if (catfishMessageObject.recipient == null) {
            return false;
        }
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        String str = catfishMessageObject.conversation_key;
        ContentValues contentValues = new ContentValues();
        contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        if (catfishMessageObject.slink != null) {
            contentValues.put(SLINK, catfishMessageObject.slink);
        }
        if (catfishMessageObject.message != null && catfishMessageObject.messagetype == MessageType.SHARE_SLINK_AT_COMMENT) {
            contentValues.put(MESSAGE, catfishMessageObject.message);
        }
        if (db.update(MESSAGES_TABLE_NAME, contentValues, "convkey = '" + str + "' AND " + SEQUENCE + " = " + String.valueOf(catfishMessageObject.sequence) + " AND " + RECIPIENT + " = '" + catfishMessageObject.recipient + "' AND " + MESSAGETYPE + " = " + String.valueOf(catfishMessageObject.messagetype.ordinal()), null) > 0) {
            Log.d(TAG, "BCAST UPDATE STATUS WKey: ConvKey: " + str + " , " + "Sequence: " + String.valueOf(catfishMessageObject.sequence) + ": SUCCESS");
        } else {
            Log.d(TAG, "BCAST UPDATE STATUS WKey: ConvKey: " + str + " , " + "Sequence: " + String.valueOf(catfishMessageObject.sequence) + ": FAIL");
        }
        return true;
    }

    public boolean updateBCASTSentStatusWKey(CatfishMessageObject catfishMessageObject) {
        if (catfishMessageObject.recipient == null) {
            return false;
        }
        SQLiteDatabase db = getDB();
        String str = catfishMessageObject.conversation_key;
        if (db == null) {
            return false;
        }
        db.beginTransaction();
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
            if (db.update(MESSAGES_TABLE_NAME, contentValues, "convkey = '" + str + "' AND " + SEQUENCE + " = " + String.valueOf(catfishMessageObject.sequence) + " AND " + RECIPIENT + " = '" + catfishMessageObject.recipient + "' AND " + MESSAGETYPE + " = " + String.valueOf(catfishMessageObject.messagetype.ordinal()), null) > 0) {
                Log.d(TAG, "BCAST UPDATE STATUS WKey: ConvKey: " + str + " , " + "Sequence: " + String.valueOf(catfishMessageObject.sequence) + ": SUCCESS");
            } else {
                Log.d(TAG, "BCAST UPDATE STATUS WKey: ConvKey: " + str + " , " + "Sequence: " + String.valueOf(catfishMessageObject.sequence) + ": FAIL");
            }
            db.setTransactionSuccessful();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            db.endTransaction();
        }
        return true;
    }

    public boolean updateFizzlinkDownloaded(String str) {
        boolean z = true;
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(FIZZLINK_DOWNLOADED, Integer.valueOf(1));
        int update = db.update(MESSAGES_TABLE_NAME, contentValues, "slink='" + str + "'", null);
        Log.d(TAG, "save fizzlink info");
        if (update <= 0) {
            z = false;
        }
        return z;
    }

    public boolean updateFizzlinkMessageInfo(CatfishMessageObject catfishMessageObject) {
        int update;
        SQLiteException e;
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(FIZZLINK_DATA_SIZE, Integer.valueOf(catfishMessageObject.datasize));
        contentValues.put(FIZZLINK_FILE_NAME, catfishMessageObject.filename);
        contentValues.put(FIZZLINK_FILE_PATH, catfishMessageObject.datafile_path);
        contentValues.put(FIZZLINK_SENDER_NAME, catfishMessageObject.sendername);
        contentValues.put(FIZZLINK_SENDER_PIN, catfishMessageObject.senderpin);
        contentValues.put(FIZZLINK_DESC, catfishMessageObject.desc);
        contentValues.put(FIZZLINK_DATA_TYPE, Integer.valueOf(catfishMessageObject.datatype));
        try {
            update = db.update(MESSAGES_TABLE_NAME, contentValues, "senderpin='" + catfishMessageObject.senderpin + "' and " + SEQUENCE + "=" + catfishMessageObject.sequence, null);
            try {
                Log.d("FIZZREPORT", "save fizzlink info: " + catfishMessageObject.slink + ", senderpin: " + catfishMessageObject.senderpin + ",seq: " + catfishMessageObject.sequence + ", record updated:" + update);
            } catch (SQLiteException e2) {
                e = e2;
                e.printStackTrace();
                return update > 0;
            }
        } catch (SQLiteException e3) {
            e = e3;
            update = 0;
            e.printStackTrace();
            if (update > 0) {
            }
        }
        if (update > 0) {
        }
    }

    public boolean updateMessageDeliveryStatus(CatfishMessageObject catfishMessageObject) {
        if (!new FriendListDataStorage(this.mContext).isSenderAFriend(catfishMessageObject)) {
            return false;
        }
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        String str = catfishMessageObject.conversation_key != null ? catfishMessageObject.conversation_key : catfishMessageObject.userpin + ":" + catfishMessageObject.senderpin;
        Log.d(TAG, "ConvKey: " + str + "\n" + "Sequence: " + String.valueOf(catfishMessageObject.sequence));
        ContentValues contentValues = new ContentValues();
        contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        return db.update(MESSAGES_TABLE_NAME, contentValues, new StringBuilder().append("convkey = '").append(str).append("' AND ").append(SEQUENCE).append(" = ").append(String.valueOf(catfishMessageObject.sequence)).append(" AND ").append(RECIPIENT).append(" = '").append(catfishMessageObject.senderpin).append("' AND ").append(TIMESTAMP).append(" = ").append(String.valueOf(catfishMessageObject.sequence)).append(" AND ").append(DELIVERYSTATUS).append(" != ").append(String.valueOf(MessageDeliveryStatus.READ.ordinal())).toString(), null) > 0;
    }

    public boolean updateMessageFizzlinkDownloaded(String str, long j, String str2) {
        boolean z = true;
        SQLiteDatabase db = getDB();
        if (db == null || str2 == null || str2.isEmpty() || str == null || str.isEmpty() || j == 0) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        int fileTypeFromPath = Utils.getFileTypeFromPath(str2);
        switch (fileTypeFromPath) {
            case e.b /*1*/:
                Log.d(TAG, "save fizzlink info: IMAGE: " + str2);
                contentValues.put(VOICEFILEPATH, "");
                contentValues.put(IMAGEPATH, str2);
                contentValues.put(DATAFILEPATH, "");
                contentValues.put(DATATYPE, Integer.valueOf(fileTypeFromPath));
                break;
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                Log.d(TAG, "save fizzlink info: VOICE: " + str2);
                contentValues.put(VOICEFILEPATH, str2);
                contentValues.put(IMAGEPATH, "");
                contentValues.put(DATAFILEPATH, "");
                contentValues.put(DATATYPE, Integer.valueOf(fileTypeFromPath));
                break;
            default:
                Log.d(TAG, "save fizzlink info: DATA(" + fileTypeFromPath + "): " + str2);
                contentValues.put(VOICEFILEPATH, "");
                contentValues.put(IMAGEPATH, "");
                contentValues.put(DATAFILEPATH, str2);
                contentValues.put(DATATYPE, Integer.valueOf(fileTypeFromPath));
                break;
        }
        contentValues.put(FIZZLINK_DOWNLOADED, Integer.valueOf(1));
        int update = db.update(MESSAGES_TABLE_NAME, contentValues, "senderpin='" + str + "' AND " + SEQUENCE + "=" + j, null);
        Log.d(TAG, "save fizzlink info: done with updated records = " + update);
        if (update <= 0) {
            z = false;
        }
        return z;
    }

    public boolean updateMessageInfo(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(ATTACHMENT_FILE_SIZE, Integer.valueOf(catfishMessageObject.datasize));
        int update = db.update(MESSAGES_TABLE_NAME, contentValues, "sequence=" + catfishMessageObject.sequence, null);
        Log.d(TAG, "save fizzlink info");
        return update > 0;
    }

    public boolean updateMessageSentStatus(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        String str = catfishMessageObject.userpin + ":" + catfishMessageObject.recipient;
        if (db == null) {
            return false;
        }
        int update;
        Log.d(TAG, "ConvKey: " + str + "\n" + "Sequence: " + String.valueOf(catfishMessageObject.sequence));
        ContentValues contentValues = new ContentValues();
        contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        switch (AnonymousClass1.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus[catfishMessageObject.deliverystatus.ordinal()]) {
            case e.b /*1*/:
                update = db.update(MESSAGES_TABLE_NAME, contentValues, "convkey = '" + str + "' AND " + SEQUENCE + " = " + String.valueOf(catfishMessageObject.sequence) + " AND " + RECIPIENT + " = '" + catfishMessageObject.recipient + "' AND " + TIMESTAMP + " = " + String.valueOf(catfishMessageObject.sequence) + " AND " + DELIVERYSTATUS + " = " + String.valueOf(MessageDeliveryStatus.QUEUEING.ordinal()), null);
                break;
            default:
                update = db.update(MESSAGES_TABLE_NAME, contentValues, "convkey = '" + str + "' AND " + SEQUENCE + " = " + String.valueOf(catfishMessageObject.sequence) + " AND " + RECIPIENT + " = '" + catfishMessageObject.recipient + "' AND " + TIMESTAMP + " = " + String.valueOf(catfishMessageObject.sequence), null);
                break;
        }
        return update > 0;
    }

    public boolean updateMessageSentStatusNMessage(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        String str = catfishMessageObject.userpin + ":" + catfishMessageObject.recipient;
        if (db == null) {
            return false;
        }
        Log.d(TAG, "ConvKey: " + str + "\n" + "Sequence: " + String.valueOf(catfishMessageObject.sequence));
        ContentValues contentValues = new ContentValues();
        contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        if (catfishMessageObject.slink != null) {
            contentValues.put(SLINK, catfishMessageObject.slink);
        }
        if (catfishMessageObject.message != null) {
            contentValues.put(MESSAGE, catfishMessageObject.message);
        }
        int update = db.update(MESSAGES_TABLE_NAME, contentValues, "convkey = '" + str + "' AND " + SEQUENCE + " = " + String.valueOf(catfishMessageObject.sequence) + " AND " + RECIPIENT + " = '" + catfishMessageObject.recipient + "' AND " + TIMESTAMP + " = " + String.valueOf(catfishMessageObject.sequence), null);
        Log.d(TAG, "updateconvkey = '" + str + "' AND " + SEQUENCE + " = " + String.valueOf(catfishMessageObject.sequence) + " AND " + RECIPIENT + " = '" + catfishMessageObject.recipient + "' AND " + TIMESTAMP + " = " + String.valueOf(catfishMessageObject.sequence));
        return update > 0;
    }

    public boolean updateMessageSentStatusWConvkey(CatfishMessageObject catfishMessageObject, String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        if (str == null) {
            str = catfishMessageObject.conversation_key;
        }
        Log.d(TAG, "ConvKey: " + str + "\n" + "Sequence: " + String.valueOf(catfishMessageObject.sequence));
        ContentValues contentValues = new ContentValues();
        contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        return db.update(MESSAGES_TABLE_NAME, contentValues, new StringBuilder().append("convkey = '").append(str).append("' AND ").append(SEQUENCE).append(" = ").append(String.valueOf(catfishMessageObject.sequence)).append(" AND ").append(RECIPIENT).append(" = '").append(catfishMessageObject.recipient).append("' AND ").append(TIMESTAMP).append(" = ").append(String.valueOf(catfishMessageObject.sequence)).toString(), null) > 0;
    }

    public boolean updateMessageSentStatusWithConvkey(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        String str = catfishMessageObject.conversation_key;
        if (db == null) {
            return false;
        }
        Log.d(TAG, "ConvKey: " + str + "\n" + "Sequence: " + String.valueOf(catfishMessageObject.sequence));
        ContentValues contentValues = new ContentValues();
        contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        return db.update(MESSAGES_TABLE_NAME, contentValues, new StringBuilder().append("convkey = '").append(str).append("' AND ").append(SEQUENCE).append(" = ").append(String.valueOf(catfishMessageObject.sequence)).append(" AND ").append(RECIPIENT).append(" = '").append(catfishMessageObject.recipient).append("' AND ").append(TIMESTAMP).append(" = ").append(String.valueOf(catfishMessageObject.sequence)).toString(), null) > 0;
    }

    public boolean updateMessageToInsertSlink(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        if (catfishMessageObject.slink != null) {
            contentValues.put(SLINK, catfishMessageObject.slink);
        }
        int update = db.update(MESSAGES_TABLE_NAME, contentValues, "sequence = " + String.valueOf(catfishMessageObject.sequence) + " AND " + SENDERPIN + " = '" + catfishMessageObject.userpin + "' AND " + TIMESTAMP + " = " + String.valueOf(catfishMessageObject.sequence), null);
        Log.d(TAG, "update msg for slink");
        return update > 0;
    }

    public boolean updateObjectCommSentStatus(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        String str = catfishMessageObject.conversation_key;
        if (db == null) {
            return false;
        }
        if (str == null) {
            str = catfishMessageObject.conversation_key;
        }
        Log.d(TAG, "ConvKey: " + str + "\n" + "Sequence: " + String.valueOf(catfishMessageObject.sequence));
        ContentValues contentValues = new ContentValues();
        contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        return db.update(OBJECT_COMMENT_TABLE_NAME, contentValues, new StringBuilder().append("convkey = '").append(catfishMessageObject.conversation_key).append("' AND ").append(SEQUENCE).append(" = ").append(String.valueOf(catfishMessageObject.sequence)).append(" AND ").append(RECIPIENT).append(" = '").append(catfishMessageObject.recipient).append("' AND ").append(TIMESTAMP).append(" = ").append(String.valueOf(catfishMessageObject.sequence)).toString(), null) > 0;
    }

    public boolean updateRecipientNameBlockList(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(USERNAME, catfishMessageObject.recipientname);
        String str = "userpin='" + catfishMessageObject.recipient + "' and " + TIMESTAMP + "='" + catfishMessageObject.sequence + "'";
        Log.d(TAG, "selection " + str);
        int update = db.update(IGNORED_NIC_TABLE_NAME, contentValues, str, null);
        Log.d(TAG, "--- recipient name updated ---" + update);
        return update > 0;
    }

    public boolean updateRecipientNameNicMsg(CatfishMessageObject catfishMessageObject) {
        int update;
        JSONException e;
        Exception e2;
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        try {
            JSONObject jSONObject = new JSONObject(catfishMessageObject.message);
            jSONObject.put(RECIPIENTNAME, catfishMessageObject.recipientname);
            Log.d(TAG, "recipientname:" + catfishMessageObject.recipientname + "sender:" + catfishMessageObject.senderpin + "userpin:" + catfishMessageObject.userpin + "recipient:" + catfishMessageObject.recipient);
            ContentValues contentValues = new ContentValues();
            contentValues.put(MESSAGE, jSONObject.toString());
            String str = "senderpin='" + catfishMessageObject.senderpin + "' and " + SEQUENCE + "='" + catfishMessageObject.sequence + "'";
            Log.d(TAG, "selection " + str);
            update = db.update(MESSAGES_TABLE_NAME, contentValues, str, null);
            try {
                Log.d(TAG, "--- recipient name updated ---" + update);
            } catch (JSONException e3) {
                e = e3;
                e.printStackTrace();
                return update <= 0;
            } catch (Exception e4) {
                e2 = e4;
                e2.printStackTrace();
                if (update <= 0) {
                }
            }
        } catch (JSONException e5) {
            e = e5;
            update = 0;
            e.printStackTrace();
            if (update <= 0) {
            }
        } catch (Exception e6) {
            e2 = e6;
            update = 0;
            e2.printStackTrace();
            if (update <= 0) {
            }
        }
        if (update <= 0) {
        }
    }

    public boolean updateSendFileMessageStatus(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        String str = catfishMessageObject.userpin + ":" + catfishMessageObject.recipient;
        if (db == null) {
            return false;
        }
        Log.d(TAG, "ConvKey: " + str + "\n" + "Sequence: " + String.valueOf(catfishMessageObject.sequence));
        ContentValues contentValues = new ContentValues();
        if (catfishMessageObject.deliverystatus.ordinal() != 0) {
            contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
        }
        contentValues.put(MESSAGE, catfishMessageObject.message);
        return db.update(MESSAGES_TABLE_NAME, contentValues, new StringBuilder().append("convkey = '").append(str).append("' AND ").append(SEQUENCE).append(" = ").append(String.valueOf(catfishMessageObject.sequence)).append(" AND ").append(RECIPIENT).append(" = '").append(catfishMessageObject.recipient).append("' AND ").append(TIMESTAMP).append(" = ").append(String.valueOf(catfishMessageObject.sequence)).toString(), null) > 0;
    }

    public boolean updateSlinkMessage(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        String str = catfishMessageObject.data_json;
        ContentValues contentValues = new ContentValues();
        contentValues.put(DATAFILEPATH, catfishMessageObject.datafile_path);
        return db.update(MESSAGES_TABLE_NAME, contentValues, new StringBuilder().append("senderpin ='").append(catfishMessageObject.senderpin).append("' and ").append(SEQUENCE).append(" ='").append(catfishMessageObject.senderpin).append("'").toString(), null) > 0;
    }

    public boolean updateStatusComent(CatfishMessageObject catfishMessageObject, String str) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        String str2 = catfishMessageObject.data_json;
        ContentValues contentValues = new ContentValues();
        if (str.compareTo(AlbusModelObject.IMAGE) == 0) {
            contentValues.put(SENDERPIN, catfishMessageObject.senderpin);
            contentValues.put(SENDERNAME, catfishMessageObject.sendername);
            contentValues.put(RECIPIENT, catfishMessageObject.userpin);
            contentValues.put(MESSAGETYPE, Integer.valueOf(catfishMessageObject.messagetype.ordinal()));
            contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
            String str3 = catfishMessageObject.conversation_key != null ? catfishMessageObject.conversation_key : catfishMessageObject.userpin + ":" + catfishMessageObject.senderpin;
            if (catfishMessageObject.slink != null) {
                contentValues.put(SLINK, catfishMessageObject.slink);
            }
            contentValues.put(CONVERSATION_KEY, str3);
            contentValues.put(MESSAGE, catfishMessageObject.message);
            contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
            contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.sequence));
            contentValues.put(IMAGETHUMB_URI, catfishMessageObject.imagethumb_uri);
            contentValues.put(IMAGEPATH, catfishMessageObject.image_path);
            contentValues.put(VOICEFILEPATH, catfishMessageObject.voicefilepath);
            contentValues.put(OBJECTSEQUENCE, Long.valueOf(catfishMessageObject.object_sequence));
            contentValues.put(OBJECTOWNERPIN, catfishMessageObject.object_owner);
            contentValues.put(DATAFILEPATH, catfishMessageObject.datafile_path);
        }
        if (str.compareTo(AlbusModelObject.DATA_TYPE_VIDEO) == 0) {
            contentValues.put(SENDERPIN, catfishMessageObject.senderpin);
            contentValues.put(SENDERNAME, catfishMessageObject.sendername);
            contentValues.put(RECIPIENT, catfishMessageObject.userpin);
            contentValues.put(MESSAGETYPE, Integer.valueOf(catfishMessageObject.messagetype.ordinal()));
            contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
            str3 = catfishMessageObject.conversation_key != null ? catfishMessageObject.conversation_key : catfishMessageObject.userpin + ":" + catfishMessageObject.senderpin;
            if (catfishMessageObject.slink != null) {
                contentValues.put(SLINK, catfishMessageObject.slink);
            }
            contentValues.put(CONVERSATION_KEY, str3);
            contentValues.put(MESSAGE, catfishMessageObject.message);
            contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
            contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.sequence));
            contentValues.put(IMAGETHUMB_URI, catfishMessageObject.imagethumb_uri);
            contentValues.put(IMAGEPATH, catfishMessageObject.image_path);
            contentValues.put(VOICEFILEPATH, catfishMessageObject.voicefilepath);
            contentValues.put(OBJECTSEQUENCE, Long.valueOf(catfishMessageObject.object_sequence));
            contentValues.put(OBJECTOWNERPIN, catfishMessageObject.object_owner);
            contentValues.put(DATAFILEPATH, catfishMessageObject.datafile_path);
        } else {
            contentValues.put(SENDERPIN, catfishMessageObject.senderpin);
            contentValues.put(SENDERNAME, catfishMessageObject.sendername);
            contentValues.put(RECIPIENT, catfishMessageObject.userpin);
            contentValues.put(MESSAGETYPE, Integer.valueOf(catfishMessageObject.messagetype.ordinal()));
            contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
            contentValues.put(CONVERSATION_KEY, catfishMessageObject.conversation_key != null ? catfishMessageObject.conversation_key : catfishMessageObject.userpin + ":" + catfishMessageObject.senderpin);
            contentValues.put(MESSAGE, catfishMessageObject.message);
            contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
            contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.sequence));
            contentValues.put(IMAGETHUMB_URI, catfishMessageObject.imagethumb_uri);
            contentValues.put(IMAGEPATH, catfishMessageObject.image_path);
            contentValues.put(VOICEFILEPATH, catfishMessageObject.voicefilepath);
            contentValues.put(OBJECTSEQUENCE, Long.valueOf(catfishMessageObject.object_sequence));
            contentValues.put(OBJECTOWNERPIN, catfishMessageObject.object_owner);
            contentValues.put(DATAFILEPATH, catfishMessageObject.datafile_path);
        }
        contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
        return db.update(MESSAGES_TABLE_NAME, contentValues, new StringBuilder().append("_id ='").append(str2).append("'").toString(), null) > 0;
    }

    public boolean updateStickerAutoPlay(String str, int i) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(STICKERPLAYED, "1");
        int update = db.update(MESSAGES_TABLE_NAME, contentValues, "convkey = '" + str + "' AND " + MESSAGETYPE + " = " + String.valueOf(i) + " AND " + STICKERPLAYED + " = 0", null);
        Log.d(TAG, "update msg for auto play sticker");
        return update > 0;
    }

    public boolean updateStreamThumbnail(String str, int i) {
        SQLiteDatabase db = getDB();
        if (db == null || str == null || str.isEmpty()) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(STREAMTHUMBNAILDOWNLOAD, Integer.valueOf(i));
        int update = db.update(MESSAGES_TABLE_NAME, contentValues, "slink = '" + str + "'", null);
        Log.d(TAG, "thumbnail update :" + str + " status : " + i);
        return update > 0;
    }
}
