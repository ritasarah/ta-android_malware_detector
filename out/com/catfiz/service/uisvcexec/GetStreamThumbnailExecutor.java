package com.catfiz.service.uisvcexec;

import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.pool.PoolDataStorage;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishService;
import com.catfiz.service.IDropableRunnable;
import com.catfiz.util.Log;
import com.catfiz.util.ObjectLockManager;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

public class GetStreamThumbnailExecutor implements IDropableRunnable, Runnable {
    public static final String TAG = "GetThumbnailExecutor";
    private CatfishRESTAPI catfishRestAPI;
    private String mFizzlink;
    private long mLiveAge = 0;
    public String mLockKey = null;
    public String mLockObj = null;
    public int mScheduleNum = 0;
    public CatfishService mService = null;

    public class GetThumbnailUpdateDB implements Runnable {
        private String mFizzlink = null;
        private CatfishService mService = null;
        private int mStatus = 0;

        public GetThumbnailUpdateDB(CatfishService catfishService, String str, int i) {
            this.mStatus = i;
            Log.d(GetStreamThumbnailExecutor.TAG, "update thumbnail get : " + i);
            this.mService = catfishService;
            this.mFizzlink = str;
        }

        public void run() {
            new CatfishDataStorage(this.mService).updateStreamThumbnail(this.mFizzlink, this.mStatus);
            new PoolDataStorage(this.mService).updateStreamThumbnail(this.mFizzlink, this.mStatus);
        }
    }

    public GetStreamThumbnailExecutor(CatfishService catfishService, String str) {
        this.mService = catfishService;
        this.mFizzlink = str;
        this.mLockKey = "thumb." + str;
        this.mLockObj = String.valueOf(CatfishRESTAPI.uniqueMonotonicSequence());
        ObjectLockManager.acquireLockKey(this.mLockKey, this.mLockObj);
    }

    private void downloadComplete() {
        Log.d(TAG, "Mark fizzlink thumbnail: " + this.mFizzlink + ": downloaded");
        this.mService.postRunnableToDbThread(new GetThumbnailUpdateDB(this.mService, this.mFizzlink, 1));
    }

    private void downloadFail() {
        Log.d(TAG, "Mark fizzlink thumbnail: " + this.mFizzlink + ": fail");
        this.mService.postRunnableToDbThread(new GetThumbnailUpdateDB(this.mService, this.mFizzlink, 0));
    }

    public void dropRunnable() {
        Log.d(TAG, "TOO LONG: when download thumb: " + this.mFizzlink + ": DROP");
        ObjectLockManager.releaseLockKey(this.mLockKey);
        downloadFail();
    }

    public long getAge() {
        return this.mLiveAge;
    }

    public int getScheduleNum() {
        return this.mScheduleNum;
    }

    public void incraseScheduleNum() {
        this.mScheduleNum++;
    }

    public void run() {
        if (!ObjectLockManager.isLockKeyLocked(this.mLockKey)) {
            Log.e(TAG, "Inconsistent lock when download thumb for: " + this.mFizzlink);
        } else if (ObjectLockManager.checkLockKeyString(this.mLockKey, this.mLockObj)) {
            File downloadThumbStream = CatfishPhotoStorage.getDownloadThumbStream(this.mService, this.mFizzlink);
            if (downloadThumbStream == null) {
                Log.e(TAG, "Storage is not ready or unmounted or error ?: DROP DOWNLOAD THUMBNAIL: " + this.mFizzlink);
                downloadFail();
                ObjectLockManager.releaseLockKey(this.mLockKey);
                return;
            }
            try {
                FileOutputStream fileOutputStream = new FileOutputStream(downloadThumbStream);
                CatfishResult streamThumbnail = this.catfishRestAPI.getStreamThumbnail(CatfishService.getStreamingServer(), this.mFizzlink, "DLFIZZAPP", fileOutputStream);
                if (streamThumbnail.hasSuccess()) {
                    fileOutputStream.close();
                    downloadComplete();
                } else if (streamThumbnail.hasFailure()) {
                    Log.d(TAG, "FAILURE: when download thumb: " + this.mFizzlink + ": RESCHEDULE");
                    fileOutputStream.close();
                    this.mService.scheduleRunnableToService(this, 2);
                    streamThumbnail.cleaningup();
                    return;
                } else {
                    fileOutputStream.close();
                    downloadFail();
                }
                streamThumbnail.cleaningup();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e2) {
                e2.printStackTrace();
            }
            ObjectLockManager.releaseLockKey(this.mLockKey);
        } else {
            ObjectLockManager.releaseLockKey(this.mLockKey);
        }
    }

    public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        this.catfishRestAPI = catfishRESTAPI;
    }
}
