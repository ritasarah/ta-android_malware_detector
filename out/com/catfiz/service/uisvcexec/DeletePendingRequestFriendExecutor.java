package com.catfiz.service.uisvcexec;

import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishService;
import com.catfiz.service.ICatfishClientInterface;
import com.catfiz.service.ICatfishUIBinder;
import com.catfiz.service.IDropableRunnable;
import com.catfiz.util.Log;

public class DeletePendingRequestFriendExecutor implements IDropableRunnable, Runnable {
    public static final String TAG = "DeletePendingRequestFriendExecutor";
    private CatfishRESTAPI catfishRestAPI;
    private final String mFriendpin;
    private ICatfishUIBinder mIBinder = null;
    private ICatfishClientInterface mIfclient = null;
    private long mLiveAge = 0;
    public int mScheduleNum = 0;
    public CatfishService mService = null;
    private String mSvr = null;
    private final String mUserpin;

    public DeletePendingRequestFriendExecutor(ICatfishUIBinder iCatfishUIBinder, CatfishService catfishService, String str, ICatfishClientInterface iCatfishClientInterface, String str2, String str3) {
        this.mService = catfishService;
        this.mSvr = str;
        this.mUserpin = str2;
        this.mFriendpin = str3;
        this.mIfclient = iCatfishClientInterface;
        this.mIBinder = iCatfishUIBinder;
    }

    public void dropRunnable() {
    }

    public long getAge() {
        return this.mLiveAge;
    }

    public int getScheduleNum() {
        return this.mScheduleNum;
    }

    public void incraseScheduleNum() {
        this.mScheduleNum++;
    }

    public void run() {
        Log.d(TAG, "----DELETE PENDING REQUEST: (" + this.mFriendpin + ") profile");
        CatfishResult deletePendingFriend = this.catfishRestAPI.deletePendingFriend(this.mSvr, this.mUserpin, this.mFriendpin, CatfishRESTAPI.uniqueMonotonicSequence());
        if (!deletePendingFriend.hasSuccess()) {
            if (deletePendingFriend.hasNotFound()) {
                Log.e(TAG, "Please Check, Server tell that Photo is not FOUND");
                deletePendingFriend.cleaningup();
            } else if (deletePendingFriend.hasFailure()) {
                Log.d(TAG, "----DELETE PENDING REQUEST:" + this.mFriendpin + " FAIL: Reschedule!!!---");
                this.mSvr = CatfishService.getServerHost();
                deletePendingFriend.cleaningup();
                this.mService.scheduleRunnableToService(this);
            } else if (!deletePendingFriend.hasSuccess()) {
                Log.d(TAG, "----DELETE PENDING REQUEST:" + this.mFriendpin + " ERROR: DROP---");
                deletePendingFriend.cleaningup();
            }
        }
    }

    public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        this.catfishRestAPI = catfishRESTAPI;
    }
}
