package com.catfiz.service.uisvcexec;

import com.catfiz.service.CatfishMessageObject;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishService;
import com.catfiz.service.CatfishUIBinder.DatabaseRequestOP;
import com.catfiz.service.ICatfishClientInterface;
import com.catfiz.service.ICatfishUIBinder;
import com.catfiz.service.IDropableRunnable;
import com.catfiz.service.PPFDownloadExecutor;
import com.catfiz.service.uidbexec.CUIDatabaseRequestExecutor;
import com.catfiz.util.Log;

public class UpdateFriendExecutor implements IDropableRunnable, Runnable {
    public static final String TAG = "UpdateFriendExecutor";
    private CatfishRESTAPI catfishRestAPI;
    private final String mFriendpin;
    private ICatfishUIBinder mIBinder = null;
    private ICatfishClientInterface mIfclient = null;
    private boolean mLastUpdatePerStep = false;
    private long mLiveAge = 0;
    public int mScheduleNum = 0;
    public CatfishService mService = null;
    private String mSvr = null;
    private UpdateFriendAction mUpdateAction = null;
    private final String mUserpin;

    public enum UpdateFriendAction {
        STATUS,
        PHOTO,
        PROFILE
    }

    public UpdateFriendExecutor(ICatfishUIBinder iCatfishUIBinder, CatfishService catfishService, String str, ICatfishClientInterface iCatfishClientInterface, String str2, String str3, UpdateFriendAction updateFriendAction, boolean z) {
        this.mService = catfishService;
        this.mSvr = str;
        this.mUserpin = str2;
        this.mFriendpin = str3;
        this.mIfclient = iCatfishClientInterface;
        this.mIBinder = iCatfishUIBinder;
        this.mUpdateAction = updateFriendAction;
        this.mLastUpdatePerStep = z;
    }

    public void dropRunnable() {
    }

    public long getAge() {
        return this.mLiveAge;
    }

    public int getScheduleNum() {
        return this.mScheduleNum;
    }

    public void incraseScheduleNum() {
        this.mScheduleNum++;
    }

    public void run() {
        Log.d(TAG, "----GET FRIEND PROFILE: (" + this.mFriendpin + ") profile");
        CatfishResult userProfileInfo;
        CatfishMessageObject catfishMessageObject;
        CatfishMessageObject catfishMessageObject2;
        if (this.mUpdateAction == UpdateFriendAction.STATUS) {
            userProfileInfo = this.catfishRestAPI.getUserProfileInfo(this.mSvr, this.mUserpin, this.mFriendpin);
            if (userProfileInfo.hasSuccess()) {
                catfishMessageObject = new CatfishMessageObject();
                catfishMessageObject.recipient = this.mFriendpin;
                catfishMessageObject.object_sequence = userProfileInfo.object_sequence;
                if (userProfileInfo.username == null) {
                    Log.d(TAG, "Friend: " + this.mFriendpin + " : Username is NULL");
                } else if (userProfileInfo.username.length() > 0) {
                    catfishMessageObject.username = userProfileInfo.username;
                    catfishMessageObject.userstatus = userProfileInfo.userstatus;
                    Log.d(TAG, "Friend: " + this.mFriendpin + " : Post to update profile DB, username = " + catfishMessageObject.recipient);
                    this.mService.postToDBHandler(new CUIDatabaseRequestExecutor(this.mIBinder, this.mIfclient, catfishMessageObject, DatabaseRequestOP.UPDATE_FRIENDPROFILE));
                    if (!userProfileInfo.photoavailable) {
                        catfishMessageObject2 = new CatfishMessageObject();
                        catfishMessageObject2.updatemark = 0;
                        catfishMessageObject2.userpin = this.mFriendpin;
                        this.mService.postToDBHandler(new CUIDatabaseRequestExecutor(this.mIBinder, this.mIfclient, catfishMessageObject2, DatabaseRequestOP.UPDATE_FRIEND_PHOTOUPDATE_MARK));
                    }
                } else {
                    Log.d(TAG, "Friend: " + this.mFriendpin + " : Username is zero length");
                }
                Log.d(TAG, "Friend: " + this.mFriendpin + " : NOT AVAILABLE");
            } else if (userProfileInfo.hasNotFound()) {
                Log.e(TAG, "Please Check, Server tell that Photo is not FOUND");
                userProfileInfo.cleaningup();
            } else if (userProfileInfo.hasFailure()) {
                Log.d(TAG, "----GET FRIEND PROFILE:" + this.mFriendpin + " FAIL: Reschedule!!!---");
                this.mSvr = CatfishService.getServerHost();
                userProfileInfo.cleaningup();
                this.mService.scheduleRunnableToService(this);
            } else if (!userProfileInfo.hasSuccess()) {
                Log.d(TAG, "----GET FRIEND PROFILE:" + this.mFriendpin + " ERROR: DROP---");
                userProfileInfo.cleaningup();
            }
            this.mService.postToServiceHandler(new UpdateFriendExecutor(this.mIBinder, this.mService, this.mSvr, this.mIfclient, this.mUserpin, this.mFriendpin, UpdateFriendAction.PROFILE, this.mLastUpdatePerStep));
            catfishMessageObject2 = new CatfishMessageObject();
            catfishMessageObject2.updatemark = 0;
            catfishMessageObject2.userpin = this.mFriendpin;
            this.mService.postToDBHandler(new CUIDatabaseRequestExecutor(this.mIBinder, this.mIfclient, catfishMessageObject2, DatabaseRequestOP.UPDATE_FRIEND_STATUSUPDATE_MARK));
        } else if (this.mUpdateAction == UpdateFriendAction.PHOTO) {
            Log.d(TAG, "----Photo Available: Get The Photo");
            Log.d(TAG, "ppf download prepare to download");
            this.mService.postToServiceHandler(new PPFDownloadExecutor(this.mIfclient, this.mIBinder, this.mService, this.mSvr, this.mUserpin, this.mFriendpin, true, this.mLastUpdatePerStep), 2);
            catfishMessageObject2 = new CatfishMessageObject();
            catfishMessageObject2.updatemark = 0;
            catfishMessageObject2.userpin = this.mFriendpin;
            this.mService.postToDBHandler(new CUIDatabaseRequestExecutor(this.mIBinder, this.mIfclient, catfishMessageObject2, DatabaseRequestOP.UPDATE_FRIEND_PHOTOUPDATE_MARK));
        } else if (this.mUpdateAction == UpdateFriendAction.PROFILE) {
            userProfileInfo = this.catfishRestAPI.getUserDataProfile(this.mSvr, this.mUserpin, this.mFriendpin);
            if (userProfileInfo.hasSuccess()) {
                Log.d(TAG, "----GET USER DATA PROFILE---" + userProfileInfo.data_json + " " + userProfileInfo.toString());
                Log.e(TAG, "Saving data profile to db, friendpin:" + userProfileInfo.userpin + " data:" + userProfileInfo.data_json);
                catfishMessageObject = new CatfishMessageObject();
                catfishMessageObject.senderpin = userProfileInfo.userpin;
                catfishMessageObject.rcvtimestamp = userProfileInfo.timestamp;
                catfishMessageObject.message = userProfileInfo.data_json;
                this.mService.postToDBHandler(new CUIDatabaseRequestExecutor(this.mIBinder, this.mIfclient, catfishMessageObject, DatabaseRequestOP.SAVE_DATA_PROFILE));
            } else if (userProfileInfo.hasNotFound()) {
                Log.d(TAG, "----GET USER DATA PROFILE: " + userProfileInfo.userpin + " NOT FOUND ----");
            } else if (userProfileInfo.hasFailure()) {
                this.mSvr = CatfishService.getServerHost();
                this.mService.scheduleRunnableToService(this);
            } else {
                Log.e(TAG, "Please Check, Server tell that something wrong in our parameter");
            }
            userProfileInfo.cleaningup();
        }
        if (this.mLastUpdatePerStep && this.mUpdateAction == UpdateFriendAction.PROFILE) {
            this.mService.postToDBHandler(new CUIDatabaseRequestExecutor(this.mIBinder, this.mIfclient, DatabaseRequestOP.UPDATE_STATUS_FRIENDS));
        }
    }

    public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        this.catfishRestAPI = catfishRESTAPI;
    }
}
