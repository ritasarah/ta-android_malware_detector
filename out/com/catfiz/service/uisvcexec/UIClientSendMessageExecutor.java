package com.catfiz.service.uisvcexec;

import com.catfiz.service.CatfishMessageObject;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishService;
import com.catfiz.service.CatfishUIBinder.ServiceERRORCode;
import com.catfiz.service.ICatfishClientInterface;
import com.catfiz.service.ICatfishUIBinder;
import com.catfiz.service.uiresponse.CUIResponseErrorExecutor;
import com.catfiz.util.Log;

public class UIClientSendMessageExecutor extends CUISendMessageBase implements Runnable {
    public static final String TAG = "UIClientSendMessageExecutor";

    public UIClientSendMessageExecutor(ICatfishUIBinder iCatfishUIBinder, CatfishService catfishService, String str, ICatfishClientInterface iCatfishClientInterface, CatfishMessageObject catfishMessageObject) {
        super(iCatfishUIBinder, catfishService, str, iCatfishClientInterface, catfishMessageObject);
        Log.d(TAG, "Conv Key: " + this.mMessage.conversation_key);
    }

    public void dropRunnable() {
        deleteTaskState(String.valueOf(this.mMessage.sequence), false);
        dropExecution();
    }

    protected void onFailToSend() {
        deleteTaskState(String.valueOf(this.mMessage.sequence), false);
        postUpdateDeliveryStatus(this.mIBinder, this.mIfclient, this.mMessage, MessageDeliveryStatus.DROP);
    }

    protected void onNotifyUIClient(CatfishResult catfishResult) {
    }

    protected void onSendSuccess() {
        deleteTaskState(String.valueOf(this.mMessage.sequence), false);
        Log.d(TAG, "onSendSuccess: postUpdateDeliveryStatus");
        postUpdateDeliveryStatus(this.mIBinder, this.mIfclient, this.mMessage, MessageDeliveryStatus.SENT);
    }

    protected CatfishResult proceedSendMessage() {
        return this.catfishRestAPI.sendMessage(this.mSvr, this.mMessage.userpin, this.mMessage.recipient, this.mMessage.message, this.mMessage.sequence);
    }

    public void run() {
        if (this.mMessage == null) {
            Log.d(TAG, "----NULL MESSAGE!!!---");
            this.mService.postToMainHandler(new CUIResponseErrorExecutor(this.mIfclient, "NULL Message", ServiceERRORCode.MESSAGENULL));
            return;
        }
        Log.d(TAG, "-- sendMessage to server");
        CatfishResult proceedSendMessage = proceedSendMessage();
        Log.d(TAG, "-- sendMessage to server done, get result");
        if (proceedSendMessage.hasSuccess()) {
            onSendSuccess();
            onNotifyUIClient(proceedSendMessage);
        } else if (proceedSendMessage.hasFailure()) {
            Log.d(TAG, "----SEND MESSAGE FAIL: Reschedule!!!---");
            CatfishService catfishService = this.mService;
            this.mSvr = CatfishService.getServerHost();
            this.mService.scheduleRunnableToService(this, 1);
        } else {
            Log.d(TAG, "----SEND MESSAGE ERROR: DROP!!!---");
            onFailToSend();
        }
        proceedSendMessage.cleaningup();
    }
}
