package com.catfiz.service;

import android.app.AlarmManager;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.Signature;
import android.content.res.Resources;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.Drawable;
import android.media.RingtoneManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.net.wifi.WifiManager.WifiLock;
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.IBinder;
import android.os.Looper;
import android.os.Message;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import android.os.Vibrator;
import android.preference.PreferenceManager;
import android.support.v4.app.NotificationCompat.Builder;
import android.support.v4.content.LocalBroadcastManager;
import android.support.v4.internal.view.SupportMenu;
import android.support.v4.view.MotionEventCompat;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.telephony.TelephonyManager;
import android.webkit.MimeTypeMap;
import android.widget.Toast;
import com.albus.util.AlbusModelObject;
import com.catfiz.R;
import com.catfiz.base.Constant;
import com.catfiz.consts.CatfizMsgTypes;
import com.catfiz.crypto.SimpleCrypto;
import com.catfiz.fif.FifDataStorage;
import com.catfiz.intents.BroadcastIntents;
import com.catfiz.localstorage.ChunkStorage;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.media.RingtonePlayer;
import com.catfiz.pool.PoolDataDeleteExecutor;
import com.catfiz.pool.PoolDataStorage;
import com.catfiz.repokeys.RepoKeys;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.PinManager.PinServiceOperation;
import com.catfiz.service.uidbexec.CUIDBSetDeleteExecutor;
import com.catfiz.service.uisvcexec.CUIServiceExecutor;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.svcpersistent.TaskDataStorage;
import com.catfiz.svcpersistent.TaskDatabaseExecutor;
import com.catfiz.svcpersistent.TaskDatabaseExecutor.TaskDatabaseAction;
import com.catfiz.util.FizzlinkUtil;
import com.catfiz.util.Log;
import com.catfiz.util.ProfilePhotoPendingList;
import com.catfiz.util.Utils;
import java.io.File;
import java.lang.ref.WeakReference;
import java.lang.reflect.Array;
import java.net.URI;
import java.net.URISyntaxException;
import java.security.Key;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.apache.http.conn.params.ConnManagerParams;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.LangUtils;

public class CatfishService extends Service {
    public static final String ABOUT_CONTENT_VER = "about_content_ver";
    public static final String ADD_ACCOUNT_PROMPT_FLAG = "add_account_flag";
    public static final String ADD_FRIEND = "com.catfiz.db_ADDFRIEND";
    public static int ADJUST_TIME_ID = THREAD_CH0;
    public static final String ADS_SCREEN_SIZE = "ads_screen";
    public static final String ADS_VER_PREF = "ads_ver";
    public static final String APK_NAME = "Catfiz";
    public static final String CATFISHDEVID_PREF = "catfish_devid";
    public static final String CATFISHID_ACCSTATUS = "cfid_acc_status";
    public static final String CATFISHID_LOGINSTATE = "cfid_loginstate";
    public static final String CATFISHID_LOGINVERSION = "cfid_loginver";
    public static final String CATFISHID_NEW_PIN_TEMP = "newpin_temporary";
    public static final String CATFISHID_OLDACCOUNT = "cfid_oldacc";
    public static final String CATFISHID_PREF = "catfish_id";
    public static final String CATFISHID_REGPROFILE_COMPLETE = "cfid_profile_complete";
    public static final String CATFISHID_REGSTATUS = "cfid_reg_status";
    public static final String CATFISHID_REG_NAME = "register_name";
    public static final String CATFISHID_SEC_PREF = "ios_aux_gchar";
    public static final String CATFISHID_USER_KEY = "user_key";
    public static final String CATFISHLONGPIN_PREF = "catfish_longpin";
    public static final String CATFISHSERVICE_PREFS = "CATFISHSERVICE_PREFS";
    public static final String CATFISHSVC_SCHEDULED_URI = "catfish://com.catfiz/scheduled";
    public static final String CATFISH_ACTION_ADJUST_TIME = "com.catfiz.action.ADJUST_TIME";
    public static final String CATFISH_ACTION_BCASTRESPONSE = "com.catfiz.action.CATFISH_ACTION_BCASTRESPONSE";
    public static final String CATFISH_ACTION_BLACKLISTNICNAMEREADY = "com.catfiz.action.BLACKLISTNICNAMEREADY";
    public static final String CATFISH_ACTION_DELETEBYFRD = "com.catfiz.action.DELETEBYFRD";
    public static final String CATFISH_ACTION_DELIVERYSTATUS_UPDATED = "com.catfiz.action.DELIVERYSTATUS_UPDATED";
    public static final String CATFISH_ACTION_DEVICEIDREGISTERED = "com.catfiz.action.DEVICEIDREGISTERED";
    public static final String CATFISH_ACTION_DISPLAYMAINUI = "com.catfiz.action.DISPLAYMAINUI";
    public static final String CATFISH_ACTION_DOWNLOAD_POOL = "com.catfiz.DOWNLOAD_POOL";
    public static final String CATFISH_ACTION_DOWNLOAD_STATUS = "com.catfiz.DOWNLOAD_STATUS";
    public static final String CATFISH_ACTION_FIZZLINKDOWNLOAD = "com.catfiz.action.FIZZLINKDOWNLOAD";
    public static final String CATFISH_ACTION_FIZZLINKUPLOAD = "com.catfiz.action.FIZZLINKUPLOAD";
    public static final String CATFISH_ACTION_HASFRIENDREQUEST = "com.catfiz.action.HASFRIENDREQUEST";
    public static final String CATFISH_ACTION_HASGROUP_DELETE = "com.catfiz.action.HASGROUP_DELETE";
    public static final String CATFISH_ACTION_HASNEWFRIEND = "com.catfiz.action.HASNEWFRIEND";
    public static final String CATFISH_ACTION_HASNEWGROUPINVITATION = "com.catfiz.action.CATFISH_ACTION_HASNEWGROUPINVITATION";
    public static final String CATFISH_ACTION_HASNEWMESSAGE = "com.catfiz.action.HASNEWMESSAGE";
    public static final String CATFISH_ACTION_HASNEWNICMESSAGE = "com.catfiz.action.HASNEWNICMESSAGE";
    public static final String CATFISH_ACTION_HASNEWOBJECTCOMMENT = "com.catfiz.action.HASNEWOBJECTCOMMENT";
    public static final String CATFISH_ACTION_HASNEWTHEME = "com.catfiz.action.HASNEWTHEME";
    public static final String CATFISH_ACTION_HASONTYPINGSIGNAL = "com.catfiz.action.HASONTYPINGSIGNAL";
    public static final String CATFISH_ACTION_HASPING = "com.catfiz.action.HASPING";
    public static final String CATFISH_ACTION_HASUPDATES = "com.catfiz.action.HASUPDATES";
    public static final String CATFISH_ACTION_HASUSERACTIVITYUPDATE = "com.catfiz.action.HASUSERACTIVITYUPDATE";
    public static final String CATFISH_ACTION_NEWFRIENDADDED = "com.catfiz.action.CATFISH_ACTION_NEWFRIENDADDED";
    public static final String CATFISH_ACTION_NEWMESSAGEPOOLRECEIVE = "com.catfiz.action.NEWMESSAGEPOOLRECEIVE";
    public static final String CATFISH_ACTION_NEWSERVERMESSAGERECEIVED = "com.catfiz.action.NEWSERVERMESSAGERECEIVED";
    public static final String CATFISH_ACTION_NEWTOPICRECEIVE = "com.catfiz.action.NEWTOPICRECEIVE";
    public static final String CATFISH_ACTION_NICMSGRECIPIENTNAMEREADY = "com.catfiz.action.NICMSGRECIPIENTNAMEREADY";
    public static final String CATFISH_ACTION_POOLCOUNTNOTIF = "com.catfiz.action.POOLCOUNTNOTIF";
    public static final String CATFISH_ACTION_REGISTERDEVICEID = "com.catfiz.action.REGISTERDEVICEID";
    public static final String CATFISH_ACTION_RESPONSEPOOLMESSAGERECEIVE = "com.catfiz.action.RESPONSEPOOLMESSAGERECEIVE";
    public static final String CATFISH_ACTION_RESTOREFROMSERVER = "com.catfiz.action.RESTOREFROMSERVER";
    public static final String CATFISH_ACTION_TOPICMEMBERUPDATED = "com.catfiz.action.TOPICMEMBERUPDATED";
    public static final String CATFISH_ACTION_TOPICPOOLDELETED = "com.catfiz.action.TOPICPOOLDELETED";
    public static final String CATFISH_ACTION_UI_REGISTRATION = "com.catfiz.action.UIREGISTRATION";
    public static final String CATFISH_ACTION_UPLOAD_CHAT = "com.catfiz.UPLOAD_CHAT";
    public static final String CATFISH_ACTION_UPLOAD_FIZZLINK = "com.catfiz.UPLOAD_FIZZLINK";
    public static final String CATFISH_ACTION_UPLOAD_POOL = "com.catfiz.UPLOAD_POOL";
    public static final String CATFISH_ACTION_UPLOAD_START_SENDING = "com.catfiz.action.CATFISH_ACTION_UPLOAD_START_SENDING";
    public static final String CATFISH_ACTION_UPLOAD_STATUS = "com.catfiz.UPLOAD_STATUS";
    public static final String CATFISH_ALARM_WAKEUP = "com.catfiz.alarm.ALARM_WAKEUP";
    public static final String CATFISH_CLIENTSERVICE = "com.catfiz.service.CLIENTSERVICE";
    public static final String CATFISH_DIMSCREENOFF_ALARM = "com.catfiz.alarm.CATFISH_DIMSCREENOFF_ALARM";
    public static final String CATFISH_FETCHING_ALARM = "com.catfiz.alarm.CATFISH_FETCHING_ALARM";
    public static final String CATFISH_HOUSEKEEPING = "com.catfiz.alarm.CATFISH_HOUSEKEEPING";
    public static final String CATFISH_NETWORK_MOBILE_WAKEUP = "com.catfiz.net.NETWORK_MOBILE_WAKEUP";
    public static final String CATFISH_NETWORK_WIFI_WAKEUP = "com.catfiz.net.NETWORK_WIFI_WAKEUP";
    public static int CATFISH_NOTIFICATION_ID = THREAD_CH0;
    public static final String CATFISH_NO_CONNECTED_NETWORK = "com.catfiz.net.NO_CONNECTED_NETWORK";
    public static final String CATFISH_NO_NETWORK = "com.catfiz.net.NO_NETWORK";
    public static final String CATFISH_P2PSCHEDULED_WAKEUP = "com.catfiz.alarm.CATFISH_P2PSCHEDULED_WAKEUP";
    public static final String CATFISH_PUSHALARM_WAKEUP = "com.catfiz.alarm.PUSHALARM_WAKEUP";
    public static final String CATFISH_RADIOSTATE_WAKEUP = "com.catfiz.alarm.CATFISH_RADIOSTATE_WAKEUP";
    public static final int CATFISH_ROUNDED_CORNERS_RADIUS = 12;
    public static final String CATFISH_SCHEDULED_GETMESSAGES = "com.catfiz.alarm.CATFISH_SCHEDULED_GETMESSAGES";
    public static final String CATFISH_SCHEDULED_SVCRUNNABLE = "com.catfiz.alarm.CATFISH_SCHEDULED_SVCRUNNABLE";
    public static final String CATFISH_SHORT_RECURRENT = "com.catfiz.alarm.CATFISH_SHORT_RECURRENT";
    public static final String CATFISH_START_AT_BOOT_SERVICE = "com.catfiz.START_AT_BOOT_SERVICE";
    public static final String CATFISH_UISERVICE = "com.catfiz.service.UISERVICE";
    public static final String CATISFH_ACTION_AUDIOFILE_RECEIVED = "com.catfiz.action.CATISFH_ACTION_AUDIOFILE_RECEIVED";
    public static final String CATISFH_ACTION_DATAFILE_RECEIVED = "com.catfiz.action.CATISFH_ACTION_DATAFILE_RECEIVED";
    public static final String CATISFH_ACTION_FRDPFI_UPDATE = "com.catfiz.action.CATISFH_ACTION_FRDPFI_UPDATE";
    public static final String CATISFH_ACTION_HASCOMMENT_ONSTATUS = "com.catfiz.action.HASCOMMENT_ONSTATUS";
    public static final String CATISFH_ACTION_HASRESPONSENETRAL_ONCOMENT = "com.catfiz.action.HASRESPONSENETRAL_ONCOMENT";
    public static final String CATISFH_ACTION_HASRESPONSE_ONCOMENT = "com.catfiz.action.HASRESPONSE_ONCOMENT";
    public static final String CATISFH_ACTION_IMAGEFILE_RECEIVED = "com.catfiz.action.CATISFH_ACTION_IMAGEFILE_RECEIVED";
    public static final String CATISFH_ACTION_MAINVIEW_FRDPFI_UPDATE = "com.catfiz.action.CATISFH_ACTION_MAINVIEW_FRDPFI_UPDATE";
    public static final String CATISFH_ACTION_POOL_DATAFILE_RECEIVED = "com.catfiz.action.CATISFH_ACTION_POOL_DATAFILE_RECEIVED";
    public static final String CATISFH_ACTION_VOICECHAT_RECEIVED = "com.catfiz.action.CATISFH_ACTION_VOICECHAT_RECEIVED";
    private static final String CEKUPDATE_LASTSETTIME = "update_lastsettime";
    private static final int CFSVC_DB_ACTIVITYCOUNT = 200;
    private static final int CFSVC_DB_CHECKOUTOFDATE = 100;
    private static final String CHANGE_LOG = "change_log";
    public static final String CHAT_DIM = "enable_dim_chat";
    public static int CHAT_ID = VIEW_TYPE_GROUP;
    public static final String CHAT_RINGTONE = "select_chat_ringtone";
    public static final String CHAT_VIBRATE = "enable_chat_vibrate";
    public static final int COBRAND = 2;
    public static final String COMMON_PREFERENCE_NAME = "com.catfiz.pref";
    public static final int CONNECTION_IN_MOBILE = 200;
    public static final int CONNECTION_IN_WIFI = 100;
    private static final String CONTRIBUTORS = "contributors";
    public static final String CONVERSATION_DELETED = "com.catfiz.pool.db.DROPPED";
    private static final String COUNTACTIVITY_LASTSETTIME = "countactivity_lastsettime";
    public static final String DECY1 = "ios_aux_int";
    public static final String DECY2 = "ios_aux_float";
    public static final String DECY3 = "ios_aux_double";
    public static final String DELETE_ALL_RECENTUPDATES_KEY = "com.catfiz.db.DELETE_ALL_RECENTUPDATES_KEY";
    public static final String DELETE_FRIENDREQ_KEY = "com.catfiz.db.DELETE_FRIENDREQ";
    public static final String DELETE_PENDINGREQ_KEY = "com.catfiz.db.DELETE_PENDINGREQ";
    public static final String EWALLETMOBILE_PHONE_PREF = "ewallet_mobile";
    public static final String EWALLETNAME_PREF = "ewallet_username";
    public static final int EXCLUSIVE = 3;
    public static final String FILE_PACKAGE_NAME = "com.catfiz";
    public static final String FILE_PACKAGE_NAME_ALBUS = "com.albus";
    public static final String FILE_PACKAGE_NAME_CATFIZ = "com.catfiz";
    public static final String FILE_STACKTRACE = "catfiz.stacktrace";
    public static final String FORCE_UPDATE = "forceupdate";
    public static final String FORCE_UPDATE_COUNT = "forceupdate_count";
    public static final String FORCE_UPDATE_COUNT_LOCK = "forceupdate_count_lock";
    public static final String FRIENDLIST_TIMESTAMP = "flist_timestamp";
    public static int FRIENDREQUEST_NOTIFICATION_ID = THREAD_CH0;
    public static final int GENERAL = 1;
    public static final String GET_ALL_CONTACTS_KEY = "com.catfiz.db.GET_ALL_CONTACTS_KEY";
    public static final String GET_ALL_DATE = "com.catfiz.gallery.db.ALLDATE";
    public static final String GET_ALL_FRIENDLIST_KEY = "com.catfiz.db.FRIENDLIST";
    public static final String GET_ALL_FRIENDREQ_KEY = "com.catfiz.db.FRIENDREQLIST";
    public static final String GET_ALL_GALLERY_KEY = "com.catfiz.gallery.db.GALLERY_KEY";
    public static final String GET_ALL_GALLERY_POOL = "com.catfiz.gallery.db.ALL_POOL";
    public static final String GET_ALL_GALLERY_POOL_TIME = "com.catfiz.gallery.db.ALL_POOL_TIME";
    public static final String GET_ALL_GALLERY_POOL_TO_SELECTED = "com.catfiz.gallery.db.GALLERYPOOLTOSELECTED";
    public static final String GET_ALL_GALLERY_PRIVATE_MESSAGE = "com.catfiz.gallery.db.ALL_PRIVATE_MESSAGE";
    public static final String GET_ALL_GALLERY_PRIVATE_MESSAGE_TIME = "com.catfiz.gallery.db.ALL_PRIVATE_MESSAGE_TIME";
    public static final String GET_ALL_GALLERY_PRIVATE_MESSAGE_TO_SELECTED = "com.catfiz.gallery.db.GALLERYPRIVATEMESSAGETOSELECTED";
    public static final String GET_ALL_GALLERY_STATUS = "com.catfiz.gallery.db.ALL_STATUS";
    public static final String GET_ALL_GALLERY_STATUS_COMMENT_TO_SELECTED = "com.catfiz.gallery.db.GALLERYSTATUSCOMMENTTOSELECTED";
    public static final String GET_ALL_GALLERY_STATUS_TIME = "com.catfiz.gallery.db.ALL_STATUS_TIME";
    public static final String GET_ALL_GALLERY_TO_SELECTED = "com.catfiz.gallery.db.GALLERY";
    public static final String GET_ALL_MULTIMEDIA_POOL = "com.catfiz.pool.db.ALL_MULTIMEDIA";
    public static final String GET_ALL_NOTIFICATION_KEY = "com.catfiz.db.NOTIFICATIONLIST";
    public static final String GET_ALL_PENDINGREQ_KEY = "com.catfiz.db.PENDINGREQLIST";
    public static final String GET_ALL_RECENTUPDATES_KEY = "com.catfiz.db.GET_ALL_RECENTUPDATES_KEY";
    public static final String GET_ALL_TOPIC_CONVERSATION_KEY = "com.catfiz.pool.db.TOPIC";
    public static final String GET_ALL_UPLOADED_FIZZLINK = "com.catfiz.db.ALL_UPLOADED_FIZZLINK";
    public static final String GET_ALL_USERGROUPS_KEY = "com.catfiz.db.GET_ALL_USERGROUPS_KEY";
    public static final String GET_BLACKLISTNIC_KEY = "com.catfiz.db.GET_BLACKLISTNIC";
    public static final String GET_CHAT_MULTIMEDIA_MESSAGE = "com.catfiz.db.MULTIMEDIA_MESAGE";
    public static final String GET_CHILD_GROUP_CONTACT_LIST = "com.catfiz.db.CHILD_GROUP_CONTACT_LIST";
    public static final String GET_CONVERSATION_COUNT_KEY = "com.catfiz.db.GET_CONVERSATION_COUNT";
    public static final String GET_CONVERSATION_KEY = "com.catfiz.db.GET_CONVERSATION";
    public static final String GET_CONVERSATION_MEMBER_KEY = "com.catfiz.pool.db.CONFERENCE_MEMBER";
    public static final String GET_CONVERSATION_WITH_LIMIT_KEY = "com.catfiz.db.GET_CONVERSATION_WITHLIMIT";
    public static final String GET_DISCUSS_MESSAGE_CONVERSATION_COUNT = "com.catfiz.pool.db.DISCUSSCOUNT";
    public static final String GET_DISCUSS_MESSAGE_CONVERSATION_KEY = "com.catfiz.pool.db.DISCUSS";
    public static final String GET_DISCUSS_MESSAGE_CONVERSATION_KEY_WITH_LIMIT = "com.catfiz.pool.db.DISCUSSWITHLIMIT";
    public static final String GET_FIZZLINKDOWNLOAD_UPDATE = "com.catfiz.db.FIZZLINK_DOWNLOAD";
    public static final String GET_FIZZLINK_UPDATE = "com.catfiz.db.FIZZLINK_UPLOAD";
    public static final String GET_FRIEND_ERROR_KEY = "com.catfiz.db.GET_FRIEND_ERROR_KEY";
    public static final String GET_FRIEND_KEY = "com.catfiz.db.GET_FRIEND_KEY";
    public static final String GET_FRIEND_PROFILEINFO_DB_KEY = "com.catfiz.db.GET_FRIEND_PROFILEINFO_DB_KEY";
    public static final String GET_GALLERY_KEY = "com.catfiz.gallery.db.GALLERY_ITEM";
    public static final String GET_GROUP_CONTACT_LIST = "com.catfiz.db.GROUP_CONTACT_LIST";
    public static final String GET_GROUP_ERROR_KEY = "com.catfiz.db.GET_GROUP_ERROR_KEY";
    public static final String GET_GROUP_KEY = "com.catfiz.db.GET_GROUP_KEY";
    public static final String GET_IS_THIS_FRIEND = "com.catfiz.db.IS_THIS_FRIEND";
    public static final String GET_LAST_TIMESTAMP = "com.catfiz.db.LAST_TIMESTAMP";
    public static final String GET_NIC_MESSAGE = "com.catfiz.db.NIC_MESAGE";
    public static final String GET_NIC_MESSAGE_CONV = "com.catfiz.db.NIC_MESAGE_CONV";
    public static final String GET_NIC_PROFILE = "com.catfiz.db.GET_NIC_PROFILE";
    public static final String GET_NIC_PROFILE_CACHE = "com.catfiz.db.GET_NIC_CACHE";
    public static final String GET_OBJCOMM_CONVERSATION_KEY = "com.catfiz.db.GET_OBJCOMM_CONVERSATION_KEY";
    public static final String GET_POOL_LIKE_LIST_KEY = "com.catfiz.pool.db.POOL_LIKE_LIST";
    public static final String GET_SERVER_MESSAGE_KEY = "com.catfiz.pool.db.SERVER_MESSAGE";
    public static final String GET_SINGLE_DISCUSS = "com.catfiz.gallery.db.SINGLE_DISCUSS";
    public static final String GET_SINGLE_MESSAGE = "com.catfiz.gallery.db.SINGLE_MESAGE";
    public static final String GET_SLINKCHACE_KEY = "com.catfiz.db.GET_SLINKCHACE";
    public static final String GET_STATCOMM_CONVERSATION_KEY = "com.catfiz.db.GET_STATCOMM_CONVERSATION_KEY";
    public static final String GET_USER_CATEGORIES = "com.catfiz.db.USER_CATEGORIES";
    public static final String GET_USER_LIKE_LIST_CONVKEY = "com.catfiz.db.USER_LIKE_LIST";
    public static final String GET_USER_PROFILE = "com.catfiz.db.USER_PROFILE";
    public static final String GROUP_DIM = "enable_dim_pool";
    public static final String GROUP_RINGTONE = "select_pool_ringtone";
    public static final String GROUP_VIBRATE = "enable_pool_vibrate";
    public static final String HASSTATUSCOMMENT_PREF = "has_statuscomment";
    public static int HAS_NEW_NIC_MESSAGE_ID = THREAD_CH0;
    public static int HAS_TOPIC_DELETED_NOTIFICATION_ID = THREAD_CH0;
    public static int HAS_TOPIC_NEED_TO_NOTIF_NOTIFICATION_ID = THREAD_CH0;
    public static int INSTAL_UPDATE_NOTIFICATION_ID = THREAD_CH0;
    public static final String ISNEWUSERPENDING = "is_newuserpending";
    public static final String ISREGISTERPENDING = "is_registerpending";
    public static final String ISRESTOREPENDING = "is_restorepending";
    private static final int MAXIMUM_RUNNABLE_IN_LIST = 1024;
    public static final String MY_STATUS_DIM = "enable_dim_status";
    public static final String MY_STATUS_RINGTONE = "select_status_ringtone";
    public static final String MY_STATUS_VIBRATE = "enable_status_vibrate";
    public static int NEWFRIEND_NOTIFICATION_ID = THREAD_CH0;
    public static int NEWMESSAGE_NOTIFICATION_ID = THREAD_CH0;
    public static int NEW_SERVERMESSAGE_NOTIFICATION_ID = THREAD_CH0;
    public static int NEW_UPDATE_NOTIFICATION_ID = THREAD_CH0;
    public static final int OFFICIAL_FILE = 1;
    public static final int OFFICIAL_IMAGE = 4;
    public static final String OFFICIAL_JSON_CONTAINER = "mc";
    public static final String OFFICIAL_JSON_CONTENTLINK = "cl";
    public static final String OFFICIAL_JSON_LONGMESSAGE = "lm";
    public static final String OFFICIAL_JSON_MESSAGE = "m";
    public static final String OFFICIAL_JSON_SENDER = "sn";
    public static final String OFFICIAL_JSON_SENDERNAME = "sm";
    public static final String OFFICIAL_JSON_SEQUENCE = "sq";
    public static final String OFFICIAL_JSON_TYPE = "t";
    public static String OFFICIAL_MESSAGE = "Welcome to Catfiz Messenger";
    public static String OFFICIAL_NAME = "CATFIZ OFFICIAL";
    public static final int OFFICIAL_OTHER = 6;
    public static final String OFFICIAL_PIN = "6C3AA8342C";
    public static final int OFFICIAL_TEXT = 5;
    public static final int OFFICIAL_VIDEO = 2;
    public static final int OFFICIAL_VOICE = 3;
    private static final String ONEDAY_LASTSETTIME = "chatdelete_lastsettime";
    private static final String ONEHOUR_LASTSETTIME = "onehour_lastsettime";
    private static final int ONE_WEEK_MILISECOND = 25200000;
    private static final int PGB_DOWNLOAD_FIZZLINK = 7;
    private static final int PGB_DOWNLOAD_POOL = 5;
    private static final int PGB_DOWNLOAD_STATCOM = 4;
    private static final int PGB_UPLOAD_CHAT = 1;
    private static final int PGB_UPLOAD_FIZZLINK = 6;
    private static final int PGB_UPLOAD_POOL = 3;
    private static final int PGB_UPLOAD_STATCOM = 2;
    public static int POOL_ID = VIEW_TYPE_CHAT;
    public static int POOL_NEWMESSAGE_NOTIFICATION_ID = THREAD_CH0;
    public static final String PPF_DOWNLOAD_FRIENDPIN = "ppf_friendpin";
    public static final String PREFERENCE_CREATION_ID = "com.catfiz.preference.CREATION_ID";
    public static final String PREFERENCE_NAME = "com.catfiz.preference";
    public static final int PREMIUM = 4;
    public static final String PROGRESS_ACTION = "pgbaction";
    public static final int PROGRESS_CANCELED = 3;
    public static final int PROGRESS_COMPLETED = 2;
    public static final int PROGRESS_FAILED = 4;
    public static final String PROGRESS_ID = "idrecord";
    public static final int PROGRESS_ONPENDING = 5;
    public static final int PROGRESS_ONPROGRESS = 1;
    public static final String PROGRESS_SEQUENCE = "sequence";
    public static final String PROGRESS_STATE = "progress_state";
    public static final int PROGRESS_UNDEFINED_STATE = 0;
    public static final String PROGRESS_VALUE = "progress";
    public static final String RDCOUNTER_PREF = "rdcounter";
    public static final int RECENT_OPEN_ALL = 1;
    public static final int RECENT_OPEN_COMMENT = 2;
    public static final int RECENT_OPEN_LIKE = 3;
    public static final int RECENT_UPDATE_ACCEPT_FRIEND = 1;
    public static final String REGISTER_LASTSETTIME = "register_lastsettime";
    public static final String REMOVE_GALLERY = "com.catfiz.gallery.db.REMOVE";
    private static CatfishRESTAPI RESTAPI_CH0 = null;
    private static CatfishRESTAPI RESTAPI_CH1 = null;
    private static CatfishRESTAPI RESTAPI_CH2 = null;
    public static final String SECUREPIN_PREF = "_64f825e6b0d63a86e151d26b3709614cd7069684.01_";
    public static final String SECUREPIN_PREFERENCE_NAME = "_d5f4848956a0f10e8bfb9d038f343becd98c1109_";
    public static final String SERVER_PREF = "server";
    private static final String SET_LOG = "set_log";
    public static final String STATUSCOMMENTCOUNT_PREF = "statuscomment_count";
    public static final int STATUS_APK = 2;
    private static final String TAG = "CatfishService";
    public static int THEMEUPDATE_NOTIFICATION_ID = THREAD_CH0;
    public static final int THREAD_CH0 = 0;
    public static final int THREAD_CH1 = 1;
    public static final int THREAD_CH2 = 2;
    public static final String UPDATE_KEY = "updateKey";
    private static final String UPDATE_TOAST = "update_toast";
    public static final String UPDATE_TYPE = "updateType";
    public static final String USERNAME_PREF = "username";
    public static final String USERPIN_PREF = "userpin";
    public static final String USERSTATUS_PREF = "userstatus";
    public static final String USERSTATUS_SEQ_PREF = "userstatus_seq";
    private static final String VERSION_REVISION = "version_revision";
    public static final int VIEW_TYPE_CHAT = 2;
    public static final int VIEW_TYPE_COMMENT = 3;
    public static final int VIEW_TYPE_GROUP = 1;
    private static volatile String[] catfish_hostname = new String[10];
    private static long catfish_housekeeping_delay = 0;
    private static volatile String[] catfish_last_hostname = new String[10];
    private static volatile String[] catfish_last_port = new String[10];
    public static volatile String[] catfish_last_push_hostname = new String[10];
    public static volatile int[] catfish_last_push_port = new int[10];
    public static volatile String catfish_longpin = null;
    private static volatile String[] catfish_port = new String[10];
    public static volatile String[] catfish_push_hostname = new String[10];
    public static volatile int[] catfish_push_port = new int[10];
    private static long catfish_pushchannel_delay = 0;
    public static volatile String[] catfish_reghost = new String[VIEW_TYPE_GROUP];
    public static volatile String[] catfish_regport = new String[VIEW_TYPE_GROUP];
    private static long catfish_regular_delay = 0;
    private static long catfish_sleep_delay = 0;
    public static volatile String[] catfish_streamhost = new String[VIEW_TYPE_GROUP];
    public static volatile String[] catfish_streamport = new String[VIEW_TYPE_GROUP];
    public static volatile String catfish_unique_id = null;
    private static ArrayList checkedName = new ArrayList();
    private static boolean isCatfishServiceInitialized = false;
    public static long lastTimeStamp = 0;
    private static AlarmManager mAM = null;
    private static PendingIntent mAlarmWakeup = null;
    private static boolean mAllAlarmCanceled = false;
    private static volatile boolean mAllowProcessRunnableInService = true;
    public static volatile CatfishPreferences mCatfishPreference = null;
    private static volatile int mCatfizVersion = THREAD_CH0;
    private static long mCheckPoint = 0;
    private static HashMap mClientCallBacks = null;
    private static long mCommentStatusFetchTime = 0;
    static ConnectivityManager mConnMan = null;
    public static int mConnectionState = THREAD_CH0;
    public static HashSet mContactSelection = new HashSet();
    private static String mCurrentHostName = null;
    public static RegistrationState mCurrentRegistrationState = RegistrationState.UNDEFINED;
    private static volatile Handler mDatabaseHandler = null;
    private static PendingIntent mDimScreenOffAlarm = null;
    private static WakeLock mDimScreenOnWakeLock = null;
    private static PendingIntent mFetchingAlarm = null;
    public static HashSet mFriendOnTypingList = new HashSet();
    private static int mGCLock = THREAD_CH0;
    private static int mGetConferencePending = THREAD_CH0;
    private static int mGetLowPrioPending = THREAD_CH0;
    private static long mGetStatusCheckPoint = 0;
    private static int mGetStatusCommentPending = THREAD_CH0;
    private static CatfishMainHandler mHandler_MainThread = null;
    private static long mHostIndex = System.currentTimeMillis();
    private static long mHostPushIndex = System.currentTimeMillis();
    private static PendingIntent mHouseKeepingAlarm = null;
    public static int mIndex = THREAD_CH0;
    private static HashMap mIntentStorage = null;
    private static volatile boolean mIsStarted = false;
    private static volatile Handler mLocalStorageHandler = null;
    private static volatile Handler mLongMessageHandler = null;
    private static volatile HashMap mMapProgress = null;
    private static volatile Map mMapState = null;
    private static NotificationManager mNM = null;
    private static PendingIntent mP2PScheduledWakeup = null;
    private static final String mPK = "563a8d7c9adae5967c01c765d3a910161486894b";
    private static final String mPKH = "eeaa3dada8dd2c41c1da85e45987c597e4543ff3";
    private static PowerManager mPWR = null;
    private static ProfilePhotoPendingList mProfilePhotoPendingList = null;
    private static ProgressBarMainHandler mProgressbar_MainThread = null;
    private static PendingIntent mPushAlarmWakeup = null;
    public static volatile CatfishPushExecutor mPushExecutor = null;
    private static volatile Handler mPushHandler = null;
    private static PendingIntent mRadioStateAlarm = null;
    private static int mRadioStateHasPending = THREAD_CH0;
    private static int mRadioStateScheduled = THREAD_CH0;
    private static long mRegHostIndex = System.currentTimeMillis();
    public static int mRegIndex = THREAD_CH0;
    private static Resources mResources = null;
    private static volatile ArrayList mRunnableList = new ArrayList();
    private static volatile ArrayList mRunnableList_Ch1 = new ArrayList();
    private static volatile ArrayList mRunnableList_Ch2 = new ArrayList();
    private static PendingIntent mSceduleServiceRunnable = null;
    private static PendingIntent mScheduledGetMessages = null;
    private static int mServiceExecutorLockCount = THREAD_CH0;
    public static volatile CatfishService mServiceInstance = null;
    private static PendingIntent mShorRecurrent = null;
    private static long mStreamHostIndex = System.currentTimeMillis();
    public static int mStreamIndex = THREAD_CH0;
    private static String mUniqeCFID1 = null;
    private static String mUniqeCFID2 = null;
    private static String mUniqeCFIDKey1 = null;
    private static String mUniqeCFIDKey2 = null;
    private static final String mUniqeIDKeyInfo = "86a9178d0bd8726b1afa6ba25364a0d58d2a6114";
    private static WakeLock mWakeLock;
    private static WifiLock mWifiLock;
    private static WifiManager mWifiMan;
    private static long maxReschedulingAge = 0;
    private static ArrayList notificationMsg = new ArrayList();
    private static long p2prunnable_maxwait = 0;
    private static ArrayList poolCheckedName = new ArrayList();
    private static ArrayList poolNotificationMsg = new ArrayList();
    private static String repoServer = RepoKeys.repoSecureServerReleaseV3_ZIP;
    private static String repoUpdate = RepoKeys.repoUpdateInternalGooglePlay;
    private static Drawable tempSvgDownload = null;
    private boolean cancelStart = false;
    ArrayList mAdsList = null;
    private volatile Looper mDatabaseLooper;
    private BroadcastReceiver mDownloaderFizzLink = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            if (CatfishService.mProgressbar_MainThread != null) {
                Message obtainMessage = CatfishService.mProgressbar_MainThread.obtainMessage(CatfishService.PGB_DOWNLOAD_FIZZLINK);
                intent.getAction();
                int intExtra = intent.getIntExtra(CatfishService.PROGRESS_VALUE, CatfishService.THREAD_CH0);
                long longExtra = intent.getLongExtra(CatfishService.PROGRESS_SEQUENCE, 0);
                int intExtra2 = intent.getIntExtra(CatfishService.PROGRESS_STATE, CatfishService.THREAD_CH0);
                Bundle bundle = new Bundle();
                bundle.putInt(CatfishService.PROGRESS_VALUE, intExtra);
                bundle.putLong(CatfishService.PROGRESS_SEQUENCE, longExtra);
                bundle.putInt(CatfishService.PROGRESS_STATE, intExtra2);
                bundle.putString(CatfishService.PROGRESS_ACTION, CatfishService.CATFISH_ACTION_FIZZLINKDOWNLOAD);
                obtainMessage.setData(bundle);
                CatfishService.mProgressbar_MainThread.sendMessage(obtainMessage);
            }
        }
    };
    private BroadcastReceiver mDownloaderPoolReceiver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            if (CatfishService.mProgressbar_MainThread != null && intent != null) {
                Message obtainMessage = CatfishService.mProgressbar_MainThread.obtainMessage(CatfishService.PROGRESS_ONPENDING);
                Bundle bundle = new Bundle();
                try {
                    intent.getAction();
                    int intExtra = intent.getIntExtra(CatfishService.PROGRESS_VALUE, CatfishService.THREAD_CH0);
                    long longExtra = intent.getLongExtra(CatfishService.PROGRESS_SEQUENCE, 0);
                    int intExtra2 = intent.getIntExtra(CatfishService.PROGRESS_STATE, CatfishService.THREAD_CH0);
                    bundle.putInt(CatfishService.PROGRESS_VALUE, intExtra);
                    bundle.putLong(CatfishService.PROGRESS_SEQUENCE, longExtra);
                    bundle.putInt(CatfishService.PROGRESS_STATE, intExtra2);
                    bundle.putString(CatfishService.PROGRESS_ACTION, CatfishService.CATFISH_ACTION_DOWNLOAD_POOL);
                    obtainMessage.setData(bundle);
                    CatfishService.mProgressbar_MainThread.sendMessage(obtainMessage);
                    if (longExtra != 0) {
                    }
                } catch (NullPointerException e) {
                }
            }
        }
    };
    private BroadcastReceiver mDownloaderStatusReceiver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            if (CatfishService.mProgressbar_MainThread != null && intent != null) {
                Message obtainMessage = CatfishService.mProgressbar_MainThread.obtainMessage(CatfishService.PROGRESS_FAILED);
                Bundle bundle = new Bundle();
                try {
                    intent.getAction();
                    int intExtra = intent.getIntExtra(CatfishService.PROGRESS_VALUE, CatfishService.THREAD_CH0);
                    String stringExtra = intent.getStringExtra(CatfishService.PROGRESS_ID);
                    int intExtra2 = intent.getIntExtra(CatfishService.PROGRESS_STATE, CatfishService.THREAD_CH0);
                    if (stringExtra != null) {
                        bundle.putInt(CatfishService.PROGRESS_VALUE, intExtra);
                        bundle.putString(CatfishService.PROGRESS_ID, stringExtra);
                        bundle.putInt(CatfishService.PROGRESS_STATE, intExtra2);
                        bundle.putString(CatfishService.PROGRESS_ACTION, CatfishService.CATFISH_ACTION_DOWNLOAD_STATUS);
                        obtainMessage.setData(bundle);
                        CatfishService.mProgressbar_MainThread.sendMessage(obtainMessage);
                    }
                } catch (NullPointerException e) {
                }
            }
        }
    };
    private volatile Looper mLocalStorageLooper;
    private volatile Looper mLongMessageLooper;
    private CatfishMainHandlerDispatcher mMainHandler_Dispatcher = new CatfishMainHandlerDispatcher();
    private BroadcastReceiver mNextServerRequest = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            CatfishService.this.postToServiceHandler(new PinManager(CatfishService.mServiceInstance, PinServiceOperation.CHECK_ISDEVICEID_REGISTERED, CatfishService.mUniqeCFID1, null));
        }
    };
    private volatile Looper mPushLooper;
    private volatile HandlerThread mPushThread;
    private int mRunnableQueueAlarmScheduled = THREAD_CH0;
    private volatile Handler mServiceHandler;
    private volatile Handler mServiceHandler_Ch1;
    private volatile Handler mServiceHandler_Ch2;
    private volatile Looper mServiceLooper;
    private volatile Looper mServiceLooper_Ch1;
    private volatile Looper mServiceLooper_Ch2;
    private BroadcastReceiver mUploaderChatReceiver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            if (CatfishService.mProgressbar_MainThread != null) {
                Message obtainMessage = CatfishService.mProgressbar_MainThread.obtainMessage(CatfishService.VIEW_TYPE_GROUP);
                intent.getAction();
                int intExtra = intent.getIntExtra(CatfishService.PROGRESS_VALUE, CatfishService.THREAD_CH0);
                long longExtra = intent.getLongExtra(CatfishService.PROGRESS_SEQUENCE, 0);
                int intExtra2 = intent.getIntExtra(CatfishService.PROGRESS_STATE, CatfishService.THREAD_CH0);
                Bundle bundle = new Bundle();
                bundle.putInt(CatfishService.PROGRESS_VALUE, intExtra);
                bundle.putLong(CatfishService.PROGRESS_SEQUENCE, longExtra);
                bundle.putInt(CatfishService.PROGRESS_STATE, intExtra2);
                bundle.putString(CatfishService.PROGRESS_ACTION, CatfishService.CATFISH_ACTION_UPLOAD_CHAT);
                obtainMessage.setData(bundle);
                CatfishService.mProgressbar_MainThread.sendMessage(obtainMessage);
            }
        }
    };
    private BroadcastReceiver mUploaderFizzLink = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            if (CatfishService.mProgressbar_MainThread != null) {
                Message obtainMessage = CatfishService.mProgressbar_MainThread.obtainMessage(CatfishService.PGB_UPLOAD_FIZZLINK);
                intent.getAction();
                int intExtra = intent.getIntExtra(CatfishService.PROGRESS_VALUE, CatfishService.THREAD_CH0);
                long longExtra = intent.getLongExtra(CatfishService.PROGRESS_SEQUENCE, 0);
                int intExtra2 = intent.getIntExtra(CatfishService.PROGRESS_STATE, CatfishService.THREAD_CH0);
                Bundle bundle = new Bundle();
                bundle.putInt(CatfishService.PROGRESS_VALUE, intExtra);
                bundle.putLong(CatfishService.PROGRESS_SEQUENCE, longExtra);
                bundle.putInt(CatfishService.PROGRESS_STATE, intExtra2);
                bundle.putString(CatfishService.PROGRESS_ACTION, CatfishService.CATFISH_ACTION_FIZZLINKUPLOAD);
                obtainMessage.setData(bundle);
                CatfishService.mProgressbar_MainThread.sendMessage(obtainMessage);
            }
        }
    };
    private BroadcastReceiver mUploaderPoolReceiver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            if (CatfishService.mProgressbar_MainThread != null) {
                Message obtainMessage = CatfishService.mProgressbar_MainThread.obtainMessage(CatfishService.VIEW_TYPE_COMMENT);
                intent.getAction();
                int intExtra = intent.getIntExtra(CatfishService.PROGRESS_VALUE, CatfishService.THREAD_CH0);
                long longExtra = intent.getLongExtra(CatfishService.PROGRESS_SEQUENCE, 0);
                int intExtra2 = intent.getIntExtra(CatfishService.PROGRESS_STATE, CatfishService.THREAD_CH0);
                Bundle bundle = new Bundle();
                bundle.putInt(CatfishService.PROGRESS_VALUE, intExtra);
                bundle.putLong(CatfishService.PROGRESS_SEQUENCE, longExtra);
                bundle.putInt(CatfishService.PROGRESS_STATE, intExtra2);
                bundle.putString(CatfishService.PROGRESS_ACTION, CatfishService.CATFISH_ACTION_UPLOAD_POOL);
                obtainMessage.setData(bundle);
                CatfishService.mProgressbar_MainThread.sendMessage(obtainMessage);
            }
        }
    };
    private BroadcastReceiver mUploaderStatusReceiver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            if (CatfishService.mProgressbar_MainThread != null) {
                Message obtainMessage = CatfishService.mProgressbar_MainThread.obtainMessage(CatfishService.VIEW_TYPE_CHAT);
                intent.getAction();
                int intExtra = intent.getIntExtra(CatfishService.PROGRESS_VALUE, CatfishService.THREAD_CH0);
                long longExtra = intent.getLongExtra(CatfishService.PROGRESS_SEQUENCE, 0);
                int intExtra2 = intent.getIntExtra(CatfishService.PROGRESS_STATE, CatfishService.THREAD_CH0);
                Bundle bundle = new Bundle();
                bundle.putInt(CatfishService.PROGRESS_VALUE, intExtra);
                bundle.putLong(CatfishService.PROGRESS_SEQUENCE, longExtra);
                bundle.putInt(CatfishService.PROGRESS_STATE, intExtra2);
                bundle.putString(CatfishService.PROGRESS_ACTION, CatfishService.CATFISH_ACTION_UPLOAD_STATUS);
                obtainMessage.setData(bundle);
                CatfishService.mProgressbar_MainThread.sendMessage(obtainMessage);
            }
        }
    };
    BroadcastReceiver mUserOnTyping = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            Message message = null;
            if (CatfishService.mHandler_MainThread != null) {
                if (action.compareTo(BroadcastIntents.ACTION_USER_ONTYPING) == 0) {
                    message = CatfishService.mHandler_MainThread.obtainMessage(MessageSignalType.SENDING_ONTYPING_SIGNAL.ordinal(), new UserOnTypingExecutor(CatfishService.this, intent.getStringExtra(FriendListDataStorage.FRIENDPIN), false));
                } else if (action.compareTo(BroadcastIntents.ACTION_USER_ONTYPING_DONE) == 0) {
                    message = CatfishService.mHandler_MainThread.obtainMessage(MessageSignalType.SENDING_ONTYPING_DONE_SIGNAL.ordinal(), new UserOnTypingExecutor(CatfishService.this, intent.getStringExtra(FriendListDataStorage.FRIENDPIN), true));
                }
                if (message != null) {
                    CatfishService.mHandler_MainThread.sendMessage(message);
                }
            }
        }
    };
    private volatile HashMap mWaitingP2PReceivers = new HashMap();
    private volatile HashMap mWaitingP2PSenders = new HashMap();
    public volatile String[][] svgCode = ((String[][]) null);
    public ArrayList themesList = null;

    /* synthetic */ class AnonymousClass10 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType = new int[MessageSignalType.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.GETMESSAGECONTROL_DONE.ordinal()] = CatfishService.VIEW_TYPE_GROUP;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.GETMESSAGE_DONE_NOSCHED.ordinal()] = CatfishService.VIEW_TYPE_CHAT;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.ONTYPING_SIGNAL.ordinal()] = CatfishService.VIEW_TYPE_COMMENT;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.ONTYPING_DONE_SIGNAL.ordinal()] = CatfishService.PROGRESS_FAILED;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.HASNEWMESSAGE.ordinal()] = CatfishService.PROGRESS_ONPENDING;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.HASNEWTHEME.ordinal()] = CatfishService.PGB_UPLOAD_FIZZLINK;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.HASPING.ordinal()] = CatfishService.PGB_DOWNLOAD_FIZZLINK;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.HASNEWFRIENDREQUEST.ordinal()] = 8;
            } catch (NoSuchFieldError e8) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.HASNEWFRIEND.ordinal()] = 9;
            } catch (NoSuchFieldError e9) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.NEWFRIENDADDED.ordinal()] = 10;
            } catch (NoSuchFieldError e10) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.GET_STATUS_COMMENT_NOW.ordinal()] = 11;
            } catch (NoSuchFieldError e11) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.GET_MESSAGES_NOW.ordinal()] = CatfishService.CATFISH_ROUNDED_CORNERS_RADIUS;
            } catch (NoSuchFieldError e12) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.DELETED_BY_FRIEND.ordinal()] = 13;
            } catch (NoSuchFieldError e13) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.DELIVERYSTATUS_UPDATED.ordinal()] = 14;
            } catch (NoSuchFieldError e14) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.UPDATE_PROGRESS_UPLOAD_DOWNLOAD.ordinal()] = 15;
            } catch (NoSuchFieldError e15) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.HASFRIENDSTATUSUPDATE.ordinal()] = 16;
            } catch (NoSuchFieldError e16) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.HASFRIENDNAMEUPDATE.ordinal()] = 17;
            } catch (NoSuchFieldError e17) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.FRIEND_PROFILE_UPDATE.ordinal()] = 18;
            } catch (NoSuchFieldError e18) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.HASUSERACTIVITYUPDATE.ordinal()] = 19;
            } catch (NoSuchFieldError e19) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.UPLOAD_START_SENDING.ordinal()] = 20;
            } catch (NoSuchFieldError e20) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.IMAGE_FILE_RECEIVED.ordinal()] = 21;
            } catch (NoSuchFieldError e21) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.VOICE_CHAT_RECEIVED.ordinal()] = 22;
            } catch (NoSuchFieldError e22) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.DATAFILE_RECEIVED.ordinal()] = 23;
            } catch (NoSuchFieldError e23) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.HASCOMMENT_ONSTATUS.ordinal()] = 24;
            } catch (NoSuchFieldError e24) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.HASBCASTRESPONSE.ordinal()] = 25;
            } catch (NoSuchFieldError e25) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.NEW_TOPIC_RECEIVE.ordinal()] = 26;
            } catch (NoSuchFieldError e26) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.NEW_TOPIC_MSGUPDATED.ordinal()] = 27;
            } catch (NoSuchFieldError e27) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.NEW_POOL_MESSAGE_RECEIVE.ordinal()] = 28;
            } catch (NoSuchFieldError e28) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.RESPONSE_POOL_MESSAGE_RECEIVE.ordinal()] = 29;
            } catch (NoSuchFieldError e29) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.HASRESPONSE_ONCOMENT.ordinal()] = 30;
            } catch (NoSuchFieldError e30) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.POOL_TOPIC_DELETED.ordinal()] = 31;
            } catch (NoSuchFieldError e31) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.TOPIC_MEMBER_UPDATED.ordinal()] = 32;
            } catch (NoSuchFieldError e32) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.HASRESPONSENETRAL_ONCOMENT.ordinal()] = 33;
            } catch (NoSuchFieldError e33) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.DEVICEIDREGISTERED.ordinal()] = 34;
            } catch (NoSuchFieldError e34) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.REGISTERDEVICEID.ordinal()] = 35;
            } catch (NoSuchFieldError e35) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.RESTOREFROMSERVER.ordinal()] = 36;
            } catch (NoSuchFieldError e36) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.SERVER_MESSAGE_RECEIVED.ordinal()] = 37;
            } catch (NoSuchFieldError e37) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.FIZZLINKUPLOAD_SIGNAL.ordinal()] = 38;
            } catch (NoSuchFieldError e38) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.FIZZLINKDOWNLOAD_SIGNAL.ordinal()] = 39;
            } catch (NoSuchFieldError e39) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.BLACKLIST_NIC_NAME_READY.ordinal()] = 40;
            } catch (NoSuchFieldError e40) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.NICMSGRECIPIENTNAMEREADY.ordinal()] = 41;
            } catch (NoSuchFieldError e41) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.HASNEWOBJECTCOMMENT.ordinal()] = 42;
            } catch (NoSuchFieldError e42) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.HASNEWNICMESSAGE.ordinal()] = 43;
            } catch (NoSuchFieldError e43) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.TOAST_SIGNAL.ordinal()] = 44;
            } catch (NoSuchFieldError e44) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.HAS_TOPIC_NEED_TO_NOTIF.ordinal()] = 45;
            } catch (NoSuchFieldError e45) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.SENDING_ONTYPING_SIGNAL.ordinal()] = 46;
            } catch (NoSuchFieldError e46) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.SENDING_ONTYPING_DONE_SIGNAL.ordinal()] = 47;
            } catch (NoSuchFieldError e47) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.UPDATES_INCOMING.ordinal()] = 48;
            } catch (NoSuchFieldError e48) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.UI_REGISTER_ERROR.ordinal()] = 49;
            } catch (NoSuchFieldError e49) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.UI_REGISTER_COMPLETE.ordinal()] = 50;
            } catch (NoSuchFieldError e50) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.UI_TO_LOGIN.ordinal()] = 51;
            } catch (NoSuchFieldError e51) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.UI_TO_UPGRADE.ordinal()] = 52;
            } catch (NoSuchFieldError e52) {
            }
        }
    }

    public class AdsHelper {
        public int ads_expcount = CatfishService.THREAD_CH0;
        public int ads_id = CatfishService.THREAD_CH0;
        public String ads_img_path;
        public long ads_img_size = 0;
        public String ads_img_url;
        public int ads_pos = CatfishService.THREAD_CH0;
        public String ads_uri;
    }

    public class AppsHelper {
        public int apps_id = CatfishService.THREAD_CH0;
        public int apps_type = CatfishService.THREAD_CH0;
        public String icon_path;
        public String icon_url;
        public String name;
        public String packagename;
        public int priv = CatfishService.THREAD_CH0;
        public String ps_url;
    }

    class CatfishMainHandler extends Handler {
        private WeakReference mCatfishServiceRef = null;

        public CatfishMainHandler(CatfishService catfishService) {
            super(Looper.getMainLooper());
            this.mCatfishServiceRef = new WeakReference(catfishService);
        }

        public void handleMessage(Message message) {
            super.handleMessage(message);
            if (this.mCatfishServiceRef == null) {
                Log.e(CatfishService.TAG, "FATAL ERROR: Main Handler not initialize properly");
                return;
            }
            CatfishService catfishService = (CatfishService) this.mCatfishServiceRef.get();
            if (catfishService == null) {
                Log.d(CatfishService.TAG, "Service is already destroyed");
            } else {
                catfishService.mMainHandler_Dispatcher.handleMessage(message);
            }
        }
    }

    class CatfishMainHandlerDispatcher {
        private CatfishMainHandlerDispatcher() {
        }

        public void handleMessage(Message message) {
            Log.d(CatfishService.TAG, "CatfishMainHandlerDispatcher:" + message.what);
            ICatfishClientInterface callBack;
            String str;
            ICatfishClientInterface callBack2;
            boolean z;
            ICatfishClientInterface callBack3;
            Bundle data;
            String str2;
            Object obj;
            Bundle data2;
            Object obj2;
            Cursor cursor;
            boolean z2;
            NotificationManager notificationManager;
            switch (AnonymousClass10.$SwitchMap$com$catfiz$service$CatfishService$MessageSignalType[MessageSignalType.values()[message.what].ordinal()]) {
                case CatfishService.VIEW_TYPE_GROUP /*1*/:
                    CatfishService.this.scheduleGetMessages();
                    return;
                case CatfishService.VIEW_TYPE_CHAT /*2*/:
                    CatfishService.this.scheduleWakeupAlarm();
                    CatfishService.this.releaseAllLocks();
                    return;
                case CatfishService.VIEW_TYPE_COMMENT /*3*/:
                    callBack = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_HASONTYPINGSIGNAL);
                    Log.d(CatfishService.TAG, "ONTYPING_SIGNAL");
                    str = (String) message.obj;
                    if (str == null) {
                        Log.e(CatfishService.TAG, "ONTYPING_SIGNAL has NULL friendpin");
                        return;
                    }
                    if (!CatfishService.mFriendOnTypingList.contains(str)) {
                        CatfishService.mFriendOnTypingList.add(str);
                        CatfishService.this.shortRecurrentTimer();
                    }
                    if (callBack == null) {
                        Log.e(CatfishService.TAG, "ONTYPING_SIGNAL: UNHANDLED");
                        return;
                    } else if (callBack.isFinish()) {
                        Log.d(CatfishService.TAG, "ONTYPING_SIGNAL: UNHANDLED");
                        return;
                    } else {
                        callBack.onFriendIsTyping(str, true);
                        return;
                    }
                case CatfishService.PROGRESS_FAILED /*4*/:
                    callBack = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_HASONTYPINGSIGNAL);
                    Log.d(CatfishService.TAG, "ONTYPING_DONE_SIGNAL");
                    str = (String) message.obj;
                    if (str == null) {
                        Log.e(CatfishService.TAG, "ONTYPING_DONE_SIGNAL has NULL friendpin");
                        return;
                    }
                    if (CatfishService.mFriendOnTypingList.contains(str)) {
                        CatfishService.mFriendOnTypingList.remove(str);
                    }
                    if (callBack == null) {
                        Log.e(CatfishService.TAG, "ONTYPING_DONE_SIGNAL: UNHANDLED");
                        return;
                    } else if (callBack.isFinish()) {
                        Log.d(CatfishService.TAG, "ONTYPING_DONE_SIGNAL: UNHANDLED");
                        return;
                    } else {
                        callBack.onFriendIsTyping(str, false);
                        return;
                    }
                case CatfishService.PROGRESS_ONPENDING /*5*/:
                    callBack2 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_HASNEWMESSAGE);
                    Bundle data3 = message.getData();
                    boolean z3 = false;
                    for (String str3 : data3.keySet()) {
                        if (!str3.contains(AlbusModelObject.OWNER)) {
                            if (!(callBack2 == null || callBack2.isFinish())) {
                                z3 = callBack2.onHasNewMessage(str3, data3.getInt(str3), data3.getString(str3 + AlbusModelObject.OWNER));
                            }
                            if (!z3) {
                                if (data3.getInt(str3) == MessageType.STATUSCOMMENT.ordinal() || data3.getInt(str3) == MessageType.PROMOTECONTACT.ordinal() || data3.getInt(str3) == MessageType.BCASTIMAGESTATUS.ordinal() || data3.getInt(str3) == MessageType.BCASTVOICESTATUS.ordinal() || data3.getInt(str3) == MessageType.BCASTVIDEOSTATUS.ordinal() || data3.getInt(str3) == MessageType.SHARE_SLINK_AT_COMMENT.ordinal() || data3.getInt(str3) == MessageType.SHARE_SLINK_AT_POOL.ordinal() || data3.getInt(str3) == MessageType.LONGSTATUSCOMMENT.ordinal() || data3.getInt(str3) == MessageType.DELETE_STATUSCOMENT_BYOWNER.ordinal() || data3.getInt(str3) == MessageType.STATUSLIKE.ordinal() || data3.getInt(str3) == MessageType.STIKER_MESSAGE_STATUS.ordinal()) {
                                    RingtonePlayer.playFriendStatus(CatfishService.this.getApplicationContext());
                                } else {
                                    CatfishService.this.compatNotifyUserNow(CatfishService.CATFISH_ACTION_HASNEWMESSAGE, CatfishService.NEWMESSAGE_NOTIFICATION_ID, CatfishService.this.getNewMessageTicker(), true);
                                }
                            }
                        }
                    }
                    return;
                case CatfishService.PGB_UPLOAD_FIZZLINK /*6*/:
                    callBack2 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_HASNEWTHEME);
                    if (callBack2 != null && !callBack2.isFinish()) {
                        ArrayList arrayList = new ArrayList();
                        List arrayList2 = new ArrayList();
                        List arrayList3 = new ArrayList();
                        List applicationList = CatfishService.this.getApplicationList(CatfishService.this.getApplicationContext());
                        int size = applicationList.size();
                        Log.d("size", String.valueOf(size));
                        for (int i = CatfishService.THREAD_CH0; i < size; i += CatfishService.VIEW_TYPE_GROUP) {
                            String str4 = ((ApplicationInfo) applicationList.get(i)).packageName;
                            if (str4.contains("com.catfiz.theme")) {
                                str3 = CatfishService.this.applicationLabel(CatfishService.this.getApplicationContext(), (ApplicationInfo) applicationList.get(i)).toString();
                                Log.d("appPackage", str4);
                                arrayList2.add(str3);
                                arrayList3.add(str4);
                            }
                        }
                        String[][] strArr = (String[][]) Array.newInstance(String.class, new int[]{CatfishService.VIEW_TYPE_CHAT, arrayList2.size()});
                        strArr[CatfishService.THREAD_CH0] = (String[]) arrayList2.toArray(strArr[CatfishService.THREAD_CH0]);
                        strArr[CatfishService.VIEW_TYPE_GROUP] = (String[]) arrayList3.toArray(strArr[CatfishService.VIEW_TYPE_GROUP]);
                        callBack2.onGetThemeList(strArr);
                        return;
                    }
                    return;
                case CatfishService.PGB_DOWNLOAD_FIZZLINK /*7*/:
                    callBack = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_HASPING);
                    z = false;
                    if (!(callBack == null || callBack.isFinish())) {
                        z = callBack.onPingReceived();
                    }
                    if (!z) {
                        RingtonePlayer.vibrate(CatfishService.this.getApplicationContext());
                        return;
                    }
                    return;
                case Utils.FILE_TYPE_INSTALLER /*8*/:
                    callBack3 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_HASNEWFRIEND);
                    if (!(callBack3 == null || callBack3.isFinish())) {
                        callBack3.onNewFriendRequest();
                    }
                    CatfishService.this.notifyUserNow(CatfishService.CATFISH_ACTION_HASFRIENDREQUEST, CatfishService.FRIENDREQUEST_NOTIFICATION_ID, CatfishService.this.getNewFriendReqTicker(), CatfishService.this.getNewFriendReqTitle(), CatfishService.this.getNewFriendReqTicker(), true, true);
                    return;
                case HTTP.HT /*9*/:
                    callBack3 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_HASNEWFRIEND);
                    if (!(callBack3 == null || callBack3.isFinish())) {
                        callBack3.onNewFriendAdded();
                    }
                    data = message.getData();
                    String string = CatfishService.this.getResources().getString(R.string.newfriendticker);
                    str3 = data.getString(FriendListDataStorage.FRIENDNAME);
                    if (str3 == null) {
                        str3 = data.getString(FriendListDataStorage.FRIENDPIN);
                    }
                    String str5 = str3 + ":" + CatfishService.this.getResources().getString(R.string.newfriendtitle);
                    CatfishService.this.notifyUserNow(CatfishService.CATFISH_ACTION_HASNEWFRIEND, CatfishService.NEWFRIEND_NOTIFICATION_ID, string, str5, str5, true, true);
                    return;
                case HTTP.LF /*10*/:
                    callBack3 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_NEWFRIENDADDED);
                    if (callBack3 != null && !callBack3.isFinish()) {
                        callBack3.onNewFriendAdded();
                        return;
                    }
                    return;
                case PinManagerV2.REGCODE_HASOLDACC /*11*/:
                    if (CatfishService.mCommentStatusFetchTime == 0) {
                        try {
                            CatfishService.setCommentStatusFetchTime(Long.decode(PreferenceManager.getDefaultSharedPreferences(CatfishService.this).getString("status_receive_time", "0")).longValue());
                        } catch (Exception e) {
                            CatfishService.setCommentStatusFetchTime(0);
                        }
                    }
                    CatfishService.this.getMessagesNow();
                    return;
                case CatfishService.CATFISH_ROUNDED_CORNERS_RADIUS /*12*/:
                    CatfishService.this.getMessagesNow();
                    return;
                case HTTP.CR /*13*/:
                    callBack3 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_DELETEBYFRD);
                    if (callBack3 != null && !callBack3.isFinish()) {
                        callBack3.onDeletedByFriend(message.getData().getString(FriendListDataStorage.FRIENDPIN));
                        return;
                    }
                    return;
                case R.styleable.Toolbar_titleMarginEnd /*14*/:
                    callBack3 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_DELIVERYSTATUS_UPDATED);
                    if (callBack3 != null && !callBack3.isFinish()) {
                        callBack3.onDeliveryStatusUpdate(message.arg1);
                        return;
                    }
                    return;
                case R.styleable.Toolbar_titleMarginTop /*15*/:
                    String[] strArr2 = (String[]) message.obj;
                    if (strArr2 != null && strArr2.length == CatfishService.VIEW_TYPE_COMMENT) {
                        str2 = strArr2[CatfishService.THREAD_CH0];
                        int parseInt = Integer.parseInt(strArr2[CatfishService.VIEW_TYPE_GROUP]);
                        obj = strArr2[CatfishService.VIEW_TYPE_CHAT];
                        if (CatfishService.mClientCallBacks != null) {
                            callBack3 = (ICatfishClientInterface) CatfishService.mClientCallBacks.get(obj);
                            if (callBack3 != null && !callBack3.isFinish()) {
                                callBack3.onUpdateProgressDownloadNUpload(str2 + "", parseInt, CatfishService.VIEW_TYPE_GROUP);
                                return;
                            }
                            return;
                        }
                        return;
                    }
                    return;
                case FizzlinkUtil.S_MP3 /*16*/:
                case LangUtils.HASH_SEED /*17*/:
                case FizzlinkUtil.S_AAC /*18*/:
                    ICatfishClientInterface callBack4 = CatfishService.this.getCallBack(CatfishService.CATISFH_ACTION_FRDPFI_UPDATE);
                    callBack3 = CatfishService.this.getCallBack(CatfishService.CATISFH_ACTION_MAINVIEW_FRDPFI_UPDATE);
                    if (!(callBack3 == null || callBack3.isFinish())) {
                        callBack3.onMainViewFriendProfileUpdate(message.getData().getString(FriendListDataStorage.FRIENDPIN), message.getData().getString(FriendListDataStorage.FRIENDNAME), message.getData().getString("friendstatus"), message.getData().getLong("friendstatusseq", 0), message.getData().getBoolean("friendphoto", false));
                    }
                    if (callBack4 != null && !callBack4.isFinish()) {
                        callBack4.onFriendProfileUpdate(message.getData().getString(FriendListDataStorage.FRIENDPIN), message.getData().getString(FriendListDataStorage.FRIENDNAME), message.getData().getString("friendstatus"), message.getData().getLong("friendstatusseq", 0), message.getData().getBoolean("friendphoto", false));
                        return;
                    }
                    return;
                case FizzlinkUtil.S_FLAC /*19*/:
                    callBack3 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_HASUSERACTIVITYUPDATE);
                    if (callBack3 != null && !callBack3.isFinish()) {
                        callBack3.onHasFriendUserActivityUpdate();
                        return;
                    }
                    return;
                case ConnManagerParams.DEFAULT_MAX_TOTAL_CONNECTIONS /*20*/:
                    callBack3 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_UPLOAD_START_SENDING);
                    if (callBack3 != null && !callBack3.isFinish()) {
                        Log.d(CatfishService.TAG, "Invoke Image file sending Notification callback");
                        callBack3.onUploadStartSending();
                        return;
                    }
                    return;
                case R.styleable.Toolbar_navigationContentDescription /*21*/:
                    callBack = CatfishService.this.getCallBack(CatfishService.CATISFH_ACTION_IMAGEFILE_RECEIVED);
                    z = false;
                    if (!(callBack == null || callBack.isFinish())) {
                        z = callBack.onImageFileReceived();
                    }
                    if (!z) {
                        CatfishService.this.compatNotifyUserNow(CatfishService.CATFISH_ACTION_HASNEWMESSAGE, CatfishService.NEWMESSAGE_NOTIFICATION_ID, CatfishService.this.getNewMessageTicker(), true);
                        return;
                    }
                    return;
                case R.styleable.Toolbar_logoDescription /*22*/:
                    callBack = CatfishService.this.getCallBack(CatfishService.CATISFH_ACTION_VOICECHAT_RECEIVED);
                    data2 = message.getData();
                    z = false;
                    if (!(callBack == null || callBack.isFinish())) {
                        z = callBack.onVoiceChatReceived(data2.getString(TaskDataStorage.SENDERPIN));
                    }
                    if (!z) {
                        CatfishService.this.compatNotifyUserNow(CatfishService.CATFISH_ACTION_HASNEWMESSAGE, CatfishService.NEWMESSAGE_NOTIFICATION_ID, CatfishService.this.getNewMessageTicker(), true);
                        return;
                    }
                    return;
                case R.styleable.Toolbar_titleTextColor /*23*/:
                    callBack = CatfishService.this.getCallBack(CatfishService.CATISFH_ACTION_DATAFILE_RECEIVED);
                    data2 = message.getData();
                    z = false;
                    if (!(callBack == null || callBack.isFinish())) {
                        z = callBack.onDataFileReceived(data2.getString(TaskDataStorage.SENDERPIN));
                    }
                    callBack = CatfishService.this.getCallBack(CatfishService.CATISFH_ACTION_POOL_DATAFILE_RECEIVED);
                    if (!(callBack == null || callBack.isFinish())) {
                        z = callBack.onDataFileReceived(data2.getString(TaskDataStorage.SENDERPIN));
                    }
                    if (!z) {
                        CatfishService.this.compatNotifyUserNow(CatfishService.CATFISH_ACTION_HASNEWMESSAGE, CatfishService.NEWMESSAGE_NOTIFICATION_ID, CatfishService.this.getNewMessageTicker(), true);
                    }
                    Log.d(CatfishService.TAG, "DATAFILE_RECEIVED POOL unhadled");
                    return;
                case R.styleable.Toolbar_subtitleTextColor /*24*/:
                    callBack = CatfishService.this.getCallBack(CatfishService.CATISFH_ACTION_HASCOMMENT_ONSTATUS);
                    z = false;
                    if (!(callBack == null || callBack.isFinish())) {
                        z = callBack.onHasCommentOnStatus();
                        Log.d(CatfishService.TAG, "HAS COMMENT ON STATUS HANDLED");
                    }
                    if (!z) {
                        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
                        if (catfishPreferences.getBoolean(CatfishService.MY_STATUS_VIBRATE, false)) {
                            CatfishService.this.vibrateNotif();
                        }
                        if (catfishPreferences.getBoolean(CatfishService.MY_STATUS_DIM, false)) {
                            CatfishService.this.dimScreenOn();
                        } else if (CatfishService.mDimScreenOnWakeLock.isHeld()) {
                            CatfishService.mDimScreenOnWakeLock.release();
                        }
                        catfishPreferences.edit().putBoolean(CatfishService.HASSTATUSCOMMENT_PREF, true).commit();
                        Log.d(CatfishService.TAG, "HAS COMMENT ON STATUS HANDLED: PLAY RINGTONE");
                        RingtonePlayer.playMyStatus(CatfishService.this.getApplicationContext());
                        return;
                    }
                    return;
                case R.styleable.Theme_actionMenuTextAppearance /*25*/:
                    callBack3 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_BCASTRESPONSE);
                    if (callBack3 != null && !callBack3.isFinish()) {
                        callBack3.onBCASTResponse();
                        return;
                    }
                    return;
                case R.styleable.Theme_actionMenuTextColor /*26*/:
                    callBack2 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_NEWTOPICRECEIVE);
                    obj2 = null;
                    cursor = (Cursor) message.obj;
                    Log.d(CatfishService.TAG, "---NEW_TOPIC_RECEIVE: New Topic diterima ----");
                    if (callBack2 != null) {
                        Log.d(CatfishService.TAG, "---NEW_TOPIC_RECEIVE: Client Interface FOUND ----");
                        if (!callBack2.isFinish()) {
                            obj2 = CatfishService.VIEW_TYPE_GROUP;
                            Log.d(CatfishService.TAG, "---NEW_TOPIC_RECEIVE: Invoke onDatabaseResponse ----");
                            callBack2.onDatabaseResponse(CatfishService.GET_ALL_TOPIC_CONVERSATION_KEY, cursor, (int) CatfishService.THREAD_CH0);
                            callBack2.onNewGroupInvitation();
                        }
                    }
                    if (obj2 == null) {
                        if (cursor != null) {
                            cursor.close();
                        }
                        CatfishService.this.notifyUserNow(CatfishService.CATFISH_ACTION_NEWTOPICRECEIVE, CatfishService.POOL_NEWMESSAGE_NOTIFICATION_ID, CatfishService.this.getString(R.string.new_conference_notif), CatfishService.this.getString(R.string.new_conference_notif), CatfishService.this.getString(R.string.new_conference_notif), true, true);
                    }
                    message.obj = null;
                    return;
                case R.styleable.Theme_actionModeStyle /*27*/:
                    callBack2 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_NEWTOPICRECEIVE);
                    cursor = (Cursor) message.obj;
                    obj2 = null;
                    Log.d(CatfishService.TAG, "--- NEW TOPIC MESSAGE UPDATED----");
                    if (callBack2 != null) {
                        Log.d(CatfishService.TAG, "---NEW TOPIC MESSAGE UPDATED: Client Interface FOUND ----");
                        if (!callBack2.isFinish()) {
                            obj2 = CatfishService.VIEW_TYPE_GROUP;
                            Log.d(CatfishService.TAG, "---NEW TOPIC MESSAGE UPDATED: Invoke onDatabaseResponse ----");
                            callBack2.onDatabaseResponse(CatfishService.GET_ALL_TOPIC_CONVERSATION_KEY, cursor, (int) CatfishService.THREAD_CH0);
                        }
                    }
                    if (obj2 == null && cursor != null) {
                        cursor.close();
                        return;
                    }
                    return;
                case R.styleable.Theme_actionModeCloseButtonStyle /*28*/:
                    data = message.getData();
                    if (data != null) {
                        callBack2 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_NEWMESSAGEPOOLRECEIVE);
                        obj = null;
                        z2 = data.getBoolean(PoolDataStorage.MUTE, false);
                        str2 = data.getString("topickey");
                        if (str2 != null) {
                            if (!(callBack2 == null || callBack2.isFinish())) {
                                obj = CatfishService.VIEW_TYPE_GROUP;
                                callBack2.onHasNewPoolDiscuss(str2);
                                if (!z2) {
                                    RingtonePlayer.playPool(CatfishService.this.getApplicationContext());
                                }
                            }
                            if (obj == null) {
                                CatfishService.this.compatNotifyUserNow(CatfishService.CATFISH_ACTION_NEWMESSAGEPOOLRECEIVE, CatfishService.POOL_NEWMESSAGE_NOTIFICATION_ID, CatfishService.this.getString(R.string.new_conference_msg_notif), !z2);
                                return;
                            }
                            return;
                        }
                        return;
                    }
                    return;
                case R.styleable.Theme_actionModeBackground /*29*/:
                    data = message.getData();
                    if (data != null) {
                        callBack2 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_RESPONSEPOOLMESSAGERECEIVE);
                        obj = null;
                        z2 = data.getBoolean(PoolDataStorage.MUTE, false);
                        if (data.getString("topickey") != null) {
                            Log.d(CatfishService.TAG, "--- MESSAGE IN GROUP UPDATED----");
                            if (callBack2 != null) {
                                Log.d(CatfishService.TAG, "---MESSAGE IN GROUP UPDATED: Client Interface FOUND ----");
                                if (!callBack2.isFinish()) {
                                    obj = CatfishService.VIEW_TYPE_GROUP;
                                    Log.d(CatfishService.TAG, "---MESSAGE IN GROUP UPDATED: Invoke onDatabaseResponse ----");
                                    callBack2.onHasPoolDiscusUpdate();
                                    if (!z2) {
                                        RingtonePlayer.playPool(CatfishService.this.getApplicationContext());
                                    }
                                }
                            }
                            if (obj != null) {
                                return;
                            }
                            return;
                        }
                        return;
                    }
                    return;
                case R.styleable.Theme_actionModeSplitBackground /*30*/:
                    callBack = CatfishService.this.getCallBack(CatfishService.CATISFH_ACTION_HASRESPONSE_ONCOMENT);
                    z = false;
                    if (!(callBack == null || callBack.isFinish())) {
                        z = callBack.onHasResponseOnStatus();
                    }
                    if (!z) {
                        return;
                    }
                    return;
                case R.styleable.Theme_actionModeCloseDrawable /*31*/:
                    CharSequence charSequence = CatfishService.this.getString(R.string.pool) + " " + ((String[]) message.obj)[CatfishService.VIEW_TYPE_GROUP] + " " + CatfishService.this.getString(R.string.topic_deleted_notif2);
                    Intent intent = new Intent(CatfishService.CATFISH_ACTION_TOPICPOOLDELETED, null, CatfishService.this, CatfishService.this.getMainActivityClass());
                    intent.setFlags(67108864);
                    intent.putExtra(AlbusModelObject.NOTIFICATION_ID, CatfishService.HAS_TOPIC_DELETED_NOTIFICATION_ID);
                    intent.putExtra(PoolDataStorage.TOPIC_KEY, ((String[]) message.obj)[CatfishService.THREAD_CH0]);
                    intent.putExtra(PoolDataStorage.TITLE, ((String[]) message.obj)[CatfishService.VIEW_TYPE_GROUP]);
                    PendingIntent activity = PendingIntent.getActivity(CatfishService.this, CatfishService.THREAD_CH0, intent, 268435456);
                    notificationManager = (NotificationManager) CatfishService.this.getSystemService("notification");
                    Notification notification = new Notification(CatfishService.this.getNotificationIcon(), charSequence, System.currentTimeMillis());
                    notification.setLatestEventInfo(CatfishService.this, charSequence, charSequence, activity);
                    notification.sound = null;
                    notification.flags |= 16;
                    notification.flags |= 32;
                    notificationManager.notify(CatfishService.HAS_TOPIC_DELETED_NOTIFICATION_ID, notification);
                    CatfishService.this.postRunnableToDbThread(new CUIDBSetDeleteExecutor(null, ((String[]) message.obj)[CatfishService.THREAD_CH0]));
                    callBack3 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_HASGROUP_DELETE);
                    data = message.getData();
                    if (callBack3 != null && !callBack3.isFinish()) {
                        callBack3.onVoiceChatReceived(data.getString(TaskDataStorage.SENDERPIN));
                        return;
                    }
                    return;
                case HTTP.SP /*32*/:
                    str3 = (String) message.obj;
                    callBack = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_TOPICMEMBERUPDATED);
                    if (!(callBack == null || callBack.isFinish())) {
                        callBack.onTopicMemberUpdated(str3);
                    }
                    message.obj = null;
                    return;
                case R.styleable.Theme_actionModeCopyDrawable /*33*/:
                    callBack = CatfishService.this.getCallBack(CatfishService.CATISFH_ACTION_HASRESPONSENETRAL_ONCOMENT);
                    z = false;
                    if (!(callBack == null || callBack.isFinish())) {
                        z = callBack.onHasResponseNetralOnStatus();
                    }
                    if (!z) {
                        return;
                    }
                    return;
                case R.styleable.Theme_actionModePasteDrawable /*34*/:
                    callBack = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_DEVICEIDREGISTERED);
                    if (callBack != null && !callBack.isFinish()) {
                        callBack.onDeviceIdNPinRegistered(((Boolean) message.obj).booleanValue());
                        return;
                    }
                    return;
                case R.styleable.Theme_actionModeSelectAllDrawable /*35*/:
                    obj = null;
                    callBack = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_REGISTERDEVICEID);
                    if (!(callBack == null || callBack.isFinish())) {
                        obj = CatfishService.VIEW_TYPE_GROUP;
                        callBack.onRegisterDeviceId();
                    }
                    if (obj != null) {
                        return;
                    }
                    return;
                case R.styleable.Theme_actionModeShareDrawable /*36*/:
                    obj2 = null;
                    callBack2 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_RESTOREFROMSERVER);
                    str3 = (String) message.obj;
                    if (!(callBack2 == null || callBack2.isFinish())) {
                        obj2 = CatfishService.VIEW_TYPE_GROUP;
                        callBack2.onRestoreFromServer(str3);
                    }
                    if (obj2 != null) {
                        return;
                    }
                    return;
                case LangUtils.HASH_OFFSET /*37*/:
                    cursor = (Cursor) message.obj;
                    obj2 = null;
                    callBack2 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_NEWSERVERMESSAGERECEIVED);
                    if (!(callBack2 == null || callBack2.isFinish())) {
                        obj2 = CatfishService.VIEW_TYPE_GROUP;
                        callBack2.onDatabaseResponse(CatfishService.GET_SERVER_MESSAGE_KEY, cursor, (int) CatfishService.THREAD_CH0);
                    }
                    if (obj2 == null) {
                        if (cursor != null) {
                            cursor.close();
                        }
                        CatfishService.this.notifyUserNow(CatfishService.CATFISH_ACTION_NEWSERVERMESSAGERECEIVED, CatfishService.NEW_SERVERMESSAGE_NOTIFICATION_ID, CatfishService.this.getString(R.string.have_cf_announcement), CatfishService.this.getString(R.string.have_cf_announcement), CatfishService.this.getString(R.string.have_cf_announcement), true, true);
                    }
                    message.obj = null;
                    return;
                case R.styleable.Theme_actionModeWebSearchDrawable /*38*/:
                    Log.e(CatfishService.TAG, "has fizzlink client calback");
                    cursor = (Cursor) message.obj;
                    obj2 = null;
                    callBack2 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_FIZZLINKUPLOAD);
                    if (!(callBack2 == null || callBack2.isFinish())) {
                        obj2 = CatfishService.VIEW_TYPE_GROUP;
                        callBack2.onDatabaseResponse(CatfishService.GET_FIZZLINK_UPDATE, cursor, (int) CatfishService.THREAD_CH0);
                    }
                    if (obj2 == null) {
                        if (cursor != null) {
                            cursor.close();
                        }
                        Log.e(CatfishService.TAG, "fizzlink update not handled");
                    }
                    message.obj = null;
                    return;
                case R.styleable.Theme_actionModePopupWindowStyle /*39*/:
                    Log.e(CatfishService.TAG, "has fizzlink client calback");
                    cursor = (Cursor) message.obj;
                    obj2 = null;
                    callBack2 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_FIZZLINKDOWNLOAD);
                    if (!(callBack2 == null || callBack2.isFinish())) {
                        obj2 = CatfishService.VIEW_TYPE_GROUP;
                        callBack2.onDatabaseResponse(CatfishService.GET_FIZZLINKDOWNLOAD_UPDATE, cursor, (int) CatfishService.THREAD_CH0);
                    }
                    if (obj2 == null) {
                        if (cursor != null) {
                            cursor.close();
                        }
                        Log.e(CatfishService.TAG, "fizzlink update not handled");
                    }
                    message.obj = null;
                    return;
                case R.styleable.Theme_textAppearanceLargePopupMenu /*40*/:
                    Log.e(CatfishService.TAG, "has  recipient name ready client calback");
                    cursor = (Cursor) message.obj;
                    obj2 = null;
                    callBack2 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_BLACKLISTNICNAMEREADY);
                    if (!(callBack2 == null || callBack2.isFinish())) {
                        Log.d(CatfishService.TAG, "client interface tag action getcallback: " + callBack2.getTagAction());
                        obj2 = CatfishService.VIEW_TYPE_GROUP;
                        callBack2.onBlacklistNameReady();
                    }
                    if (obj2 == null && cursor != null) {
                        cursor.close();
                    }
                    message.obj = null;
                    return;
                case R.styleable.Theme_textAppearanceSmallPopupMenu /*41*/:
                    Log.e(CatfishService.TAG, "has nic msg recipient name ready client calback");
                    cursor = (Cursor) message.obj;
                    obj2 = null;
                    callBack2 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_NICMSGRECIPIENTNAMEREADY);
                    if (!(callBack2 == null || callBack2.isFinish())) {
                        obj2 = CatfishService.VIEW_TYPE_GROUP;
                        callBack2.onDatabaseResponse(CatfishService.GET_NIC_MESSAGE, cursor, (int) CatfishService.THREAD_CH0);
                    }
                    if (obj2 == null && cursor != null) {
                        cursor.close();
                    }
                    message.obj = null;
                    return;
                case R.styleable.Theme_dialogTheme /*42*/:
                    Log.d(CatfishService.TAG, "has new object comment client calback");
                    str3 = (String) message.obj;
                    obj2 = null;
                    callBack2 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_HASNEWOBJECTCOMMENT);
                    if (!(callBack2 == null || callBack2.isFinish())) {
                        obj2 = CatfishService.VIEW_TYPE_GROUP;
                        callBack2.onHasObjectMessage(str3);
                        RingtonePlayer.play(CatfishService.this);
                    }
                    if (obj2 == null) {
                        Log.e(CatfishService.TAG, "ignore");
                    }
                    message.obj = null;
                    return;
                case R.styleable.Theme_dialogPreferredPadding /*43*/:
                    Log.d(CatfishService.TAG, "has new nic client calback");
                    obj = null;
                    callBack = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_HASNEWNICMESSAGE);
                    if (!(callBack == null || callBack.isFinish())) {
                        obj = CatfishService.VIEW_TYPE_GROUP;
                        callBack.onHasNewNicMessage(MessageType.NIC_MESSAGE.ordinal(), CatfishService.getUserPIN());
                        RingtonePlayer.play(CatfishService.this);
                    }
                    if (obj == null) {
                        Log.e(CatfishService.TAG, "notify user");
                        CatfishService.this.compatNotifyCatfizOfficialMessage(CatfishService.CATFISH_ACTION_HASNEWNICMESSAGE, CatfishService.this.getNewMessageTicker(), true);
                        return;
                    }
                    return;
                case R.styleable.Theme_listDividerAlertDialog /*44*/:
                    Toast.makeText(CatfishService.this, (String) message.obj, CatfishService.THREAD_CH0).show();
                    return;
                case R.styleable.Theme_actionDropDownStyle /*45*/:
                    str2 = CatfishService.this.getString(R.string.topic_notif1) + " " + ((String[]) message.obj)[CatfishService.THREAD_CH0] + " " + CatfishService.this.getString(R.string.topic_notif2) + " \"" + ((String[]) message.obj)[CatfishService.VIEW_TYPE_GROUP] + "\". " + CatfishService.this.getString(R.string.topic_notif3);
                    CharSequence charSequence2 = CatfishService.this.getString(R.string.topic_notif1) + " " + ((String[]) message.obj)[CatfishService.THREAD_CH0] + " " + CatfishService.this.getString(R.string.topic_notif2) + " \"" + ((String[]) message.obj)[CatfishService.VIEW_TYPE_GROUP] + "\".";
                    CharSequence string2 = CatfishService.this.getString(R.string.topic_notif3);
                    Intent intent2 = new Intent(CatfishService.CATFISH_ACTION_POOLCOUNTNOTIF, null, CatfishService.this, CatfishService.this.getMainActivityClass());
                    intent2.setFlags(67108864);
                    intent2.putExtra(AlbusModelObject.NOTIFICATION_ID, CatfishService.HAS_TOPIC_NEED_TO_NOTIF_NOTIFICATION_ID);
                    intent2.putExtra("poolcountmessage", str2);
                    intent2.putExtra(PoolDataStorage.TOPIC_KEY, ((String[]) message.obj)[CatfishService.VIEW_TYPE_CHAT]);
                    intent2.putExtra(PoolDataStorage.TITLE, ((String[]) message.obj)[CatfishService.VIEW_TYPE_GROUP]);
                    PendingIntent activity2 = PendingIntent.getActivity(CatfishService.this, CatfishService.THREAD_CH0, intent2, 268435456);
                    notificationManager = (NotificationManager) CatfishService.this.getSystemService("notification");
                    Notification notification2 = new Notification(CatfishService.this.getNotificationIcon(), charSequence2, System.currentTimeMillis());
                    notification2.setLatestEventInfo(CatfishService.this, charSequence2, string2, activity2);
                    notification2.sound = null;
                    notification2.flags |= 16;
                    notificationManager.notify(CatfishService.HAS_TOPIC_NEED_TO_NOTIF_NOTIFICATION_ID, notification2);
                    return;
                case R.styleable.Theme_dropdownListPreferredItemHeight /*46*/:
                case R.styleable.Theme_spinnerDropDownItemStyle /*47*/:
                    CatfishService.this.postToServiceHandler((UserOnTypingExecutor) message.obj, CatfishService.VIEW_TYPE_GROUP);
                    return;
                case R.styleable.Theme_homeAsUpIndicator /*48*/:
                    callBack3 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_HASUPDATES);
                    if (callBack3 != null && !callBack3.isFinish()) {
                        data = message.getData();
                        callBack3.onUpdatesIncoming(data.getInt(CatfishService.UPDATE_TYPE), data.getString(CatfishService.UPDATE_KEY));
                        return;
                    }
                    return;
                case R.styleable.Theme_actionButtonStyle /*49*/:
                    Log.d(CatfishService.TAG, "UI_REGISTER_ERROR");
                    callBack3 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_UI_REGISTRATION);
                    if (callBack3 == null) {
                        Log.d(CatfishService.TAG, "UI_REGISTER_ERROR: UNHANDLED");
                        return;
                    } else if (!callBack3.isFinish()) {
                        Log.d(CatfishService.TAG, "signal onRegistrationError");
                        callBack3.onSignalRegistrationError();
                        return;
                    } else {
                        return;
                    }
                case R.styleable.Theme_buttonBarStyle /*50*/:
                    Log.d(CatfishService.TAG, "UI_REGISTER_COMPLETE");
                    callBack3 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_UI_REGISTRATION);
                    if (callBack3 == null) {
                        Log.d(CatfishService.TAG, "UI_REGISTER_COMPLETE: UNHANDLED");
                        return;
                    } else if (!callBack3.isFinish()) {
                        Log.d(CatfishService.TAG, "signal onRegistrationComplete");
                        callBack3.onSignalRegistrationComplete();
                        return;
                    } else {
                        return;
                    }
                case R.styleable.Theme_buttonBarButtonStyle /*51*/:
                    Log.d(CatfishService.TAG, "UI_TO_LOGIN");
                    callBack3 = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_UI_REGISTRATION);
                    if (callBack3 == null) {
                        Log.d(CatfishService.TAG, "UI_TO_LOGIN: UNHANDLED");
                        return;
                    } else if (!callBack3.isFinish()) {
                        Log.d(CatfishService.TAG, "signal onUserNeedToLogin");
                        callBack3.onSignalUserNeedToLogin();
                        return;
                    } else {
                        return;
                    }
                case R.styleable.Theme_selectableItemBackground /*52*/:
                    Log.d(CatfishService.TAG, "UI_TO_UPGRADE");
                    callBack = CatfishService.this.getCallBack(CatfishService.CATFISH_ACTION_UI_REGISTRATION);
                    if (callBack == null) {
                        Log.d(CatfishService.TAG, "UI_TO_UPGRADE: UNHANDLED");
                        return;
                    } else if (!callBack.isFinish()) {
                        Log.d(CatfishService.TAG, "signal onUserNeedToRegister");
                        callBack.onSignalUserNeedToUpgrade((String) message.obj);
                        return;
                    } else {
                        return;
                    }
                default:
                    return;
            }
        }
    }

    class DBAndFilesCleanup implements Runnable {
        private int op = CatfishService.THREAD_CH0;

        public DBAndFilesCleanup(int i) {
            this.op = i;
        }

        public void deleteDataFiles(Cursor cursor, int i) {
            cursor.moveToFirst();
            for (int i2 = CatfishService.THREAD_CH0; i2 < i; i2 += CatfishService.VIEW_TYPE_GROUP) {
                try {
                    if (cursor.getString(CatfishService.THREAD_CH0) != null) {
                        File file = new File(cursor.getString(CatfishService.THREAD_CH0));
                        if (file.exists()) {
                            file.delete();
                        }
                    }
                } catch (Exception e) {
                }
                cursor.moveToNext();
            }
            cursor.close();
        }

        public void deleteImageFiles(Cursor cursor, int i) {
            cursor.moveToFirst();
            for (int i2 = CatfishService.THREAD_CH0; i2 < i; i2 += CatfishService.VIEW_TYPE_GROUP) {
                try {
                    if (cursor.getString(CatfishService.THREAD_CH0) != null) {
                        File file = new File(cursor.getString(CatfishService.THREAD_CH0));
                        if (file.exists()) {
                            file.delete();
                        }
                    }
                } catch (Exception e) {
                }
                cursor.moveToNext();
            }
            cursor.close();
        }

        public void deleteImageThumbs(Cursor cursor, int i) {
            cursor.moveToFirst();
            for (int i2 = CatfishService.THREAD_CH0; i2 < i; i2 += CatfishService.VIEW_TYPE_GROUP) {
                try {
                    if (cursor.getString(CatfishService.THREAD_CH0) != null) {
                        File file = new File(new URI(cursor.getString(CatfishService.THREAD_CH0)));
                        if (file.exists()) {
                            file.delete();
                        }
                    }
                } catch (URISyntaxException e) {
                } catch (Exception e2) {
                }
                cursor.moveToNext();
            }
            cursor.close();
        }

        public void deleteVoiceFiles(Cursor cursor, int i) {
            cursor.moveToFirst();
            for (int i2 = CatfishService.THREAD_CH0; i2 < i; i2 += CatfishService.VIEW_TYPE_GROUP) {
                try {
                    if (cursor.getString(CatfishService.THREAD_CH0) != null) {
                        File file = new File(cursor.getString(CatfishService.THREAD_CH0));
                        if (file.exists()) {
                            file.delete();
                        }
                    }
                } catch (Exception e) {
                }
                cursor.moveToNext();
            }
            cursor.close();
        }

        public void run() {
            int i = CatfishService.THREAD_CH0;
            CatfishDataStorage catfishDataStorage = new CatfishDataStorage(CatfishService.this);
            FriendListDataStorage friendListDataStorage = new FriendListDataStorage(CatfishService.this);
            switch (this.op) {
                case CatfishService.CONNECTION_IN_WIFI /*100*/:
                    long currentTimeMillis = System.currentTimeMillis();
                    Cursor outOfDateImageThumbsInChat = catfishDataStorage.getOutOfDateImageThumbsInChat(currentTimeMillis);
                    int count = outOfDateImageThumbsInChat != null ? outOfDateImageThumbsInChat.getCount() : CatfishService.THREAD_CH0;
                    Cursor outOfDateVoiceFileInChat = catfishDataStorage.getOutOfDateVoiceFileInChat(currentTimeMillis);
                    int count2 = outOfDateVoiceFileInChat != null ? outOfDateVoiceFileInChat.getCount() : CatfishService.THREAD_CH0;
                    Cursor outOfDateImagefileInChat = catfishDataStorage.getOutOfDateImagefileInChat(currentTimeMillis);
                    int count3 = outOfDateImagefileInChat != null ? outOfDateImagefileInChat.getCount() : CatfishService.THREAD_CH0;
                    Cursor outOfDatedataFileInChat = catfishDataStorage.getOutOfDatedataFileInChat(currentTimeMillis);
                    if (outOfDatedataFileInChat != null) {
                        i = outOfDatedataFileInChat.getCount();
                    }
                    if (count > 0) {
                        deleteImageThumbs(outOfDateImageThumbsInChat, count);
                    }
                    if (count2 > 0) {
                        deleteVoiceFiles(outOfDateVoiceFileInChat, count2);
                    }
                    if (count3 > 0) {
                        deleteImageFiles(outOfDateImagefileInChat, count3);
                    }
                    if (i > 0) {
                        deleteDataFiles(outOfDatedataFileInChat, i);
                    }
                    friendListDataStorage.updateActivityCountAll(currentTimeMillis);
                    catfishDataStorage.deleteChatConversationAllOutofDate(currentTimeMillis);
                    PoolDataStorage poolDataStorage = new PoolDataStorage(CatfishService.this);
                    Cursor expiredDiscussConference = poolDataStorage.getExpiredDiscussConference();
                    if (expiredDiscussConference != null) {
                        expiredDiscussConference.getCount();
                        CatfishService.this.postToDBHandler(new PoolDataDeleteExecutor(expiredDiscussConference));
                        poolDataStorage.dropExpiredDiscussConference();
                        return;
                    }
                    return;
                default:
                    friendListDataStorage.decreaseAllCountActivity();
                    return;
            }
        }
    }

    enum MessageSignalType {
        UNDEFINED,
        GETMESSAGECONTROL_DONE,
        GETMESSAGE_DONE_NOSCHED,
        HASNEWMESSAGE,
        HASPING,
        HASNEWFRIENDREQUEST,
        HASNEWFRIEND,
        NEWFRIENDADDED,
        GET_MESSAGES_NOW,
        GET_STATUS_COMMENT_NOW,
        HASFRIENDSTATUSUPDATE,
        DELETED_BY_FRIEND,
        DELIVERYSTATUS_UPDATED,
        FRIEND_PROFILE_UPDATE,
        HASFRIENDNAMEUPDATE,
        IMAGE_FILE_RECEIVED,
        MUSIC_FILE_RECEIVED,
        UPLOAD_START_SENDING,
        HASNEWGROUPINVITATION,
        HASBCASTRESPONSE,
        VOICE_CHAT_RECEIVED,
        DATAFILE_RECEIVED,
        HASCOMMENT_ONSTATUS,
        NEW_TOPIC_RECEIVE,
        NEW_TOPIC_MSGUPDATED,
        NEW_POOL_MESSAGE_RECEIVE,
        RESPONSE_POOL_MESSAGE_RECEIVE,
        POOL_TOPIC_DELETED,
        TOPIC_MEMBER_UPDATED,
        HASRESPONSE_ONCOMENT,
        HASRESPONSENETRAL_ONCOMENT,
        SERVER_MESSAGE_RECEIVED,
        TOAST_SIGNAL,
        DEVICEIDREGISTERED,
        REGISTERDEVICEID,
        RESTOREFROMSERVER,
        HAS_TOPIC_NEED_TO_NOTIF,
        ONTYPING_SIGNAL,
        ONTYPING_DONE_SIGNAL,
        HASNEWNICMESSAGE,
        HASUSERACTIVITYUPDATE,
        UPDATE_PROGRESS_UPLOAD_DOWNLOAD,
        FIZZLINKUPLOAD_SIGNAL,
        FIZZLINKDOWNLOAD_SIGNAL,
        NICMSGRECIPIENTNAMEREADY,
        HASNEWOBJECTCOMMENT,
        BLACKLIST_NIC_NAME_READY,
        HASNEWTHEME,
        SENDING_ONTYPING_SIGNAL,
        SENDING_ONTYPING_DONE_SIGNAL,
        UPDATES_INCOMING,
        UI_REGISTER_ERROR,
        UI_REGISTER_COMPLETE,
        UI_TO_LOGIN,
        UI_TO_REGISTER,
        UI_TO_UPGRADE
    }

    class ProgressBarMainHandler extends Handler {
        public ProgressBarMainHandler() {
            super(Looper.getMainLooper());
        }

        public void handleMessage(Message message) {
            super.handleMessage(message);
            Bundle data;
            int i;
            String str;
            ICatfishClientInterface iCatfishClientInterface;
            switch (message.what) {
                case CatfishService.VIEW_TYPE_GROUP /*1*/:
                case CatfishService.VIEW_TYPE_CHAT /*2*/:
                case CatfishService.VIEW_TYPE_COMMENT /*3*/:
                case CatfishService.PROGRESS_ONPENDING /*5*/:
                case CatfishService.PGB_UPLOAD_FIZZLINK /*6*/:
                case CatfishService.PGB_DOWNLOAD_FIZZLINK /*7*/:
                    data = message.getData();
                    i = data.getInt(CatfishService.PROGRESS_VALUE);
                    long j = data.getLong(CatfishService.PROGRESS_SEQUENCE);
                    String string = data.getString(CatfishService.PROGRESS_ACTION);
                    int i2 = data.getInt(CatfishService.PROGRESS_STATE);
                    str = j + "";
                    if (CatfishService.mMapProgress == null) {
                        CatfishService.mMapProgress = new HashMap();
                    }
                    if (CatfishService.mMapState == null) {
                        CatfishService.mMapState = new HashMap();
                    }
                    switch (i2) {
                        case CatfishService.VIEW_TYPE_GROUP /*1*/:
                            CatfishService.mMapState.put(str, Integer.valueOf(i2));
                            CatfishService.mMapProgress.put(str, Integer.valueOf(i));
                            Log.d(CatfishService.TAG, "save key state " + str + " state :" + i2);
                            break;
                        default:
                            if (CatfishService.mMapProgress.containsKey(str)) {
                                CatfishService.mMapProgress.remove(str);
                            }
                            if (CatfishService.mMapState.containsKey(str)) {
                                Log.d(CatfishService.TAG, "remove key state " + str + " state :" + i2);
                                CatfishService.mMapState.remove(str);
                                break;
                            }
                            break;
                    }
                    Log.d(CatfishService.TAG, "transmission download upload progress to client : " + str + " state :" + i2 + " progress :" + i);
                    if (CatfishService.mClientCallBacks != null && CatfishService.mClientCallBacks.containsKey(string)) {
                        iCatfishClientInterface = (ICatfishClientInterface) CatfishService.mClientCallBacks.get(string);
                        if (iCatfishClientInterface != null && !iCatfishClientInterface.isFinish()) {
                            iCatfishClientInterface.onUpdateProgressDownloadNUpload(str, i, i2);
                            return;
                        }
                        return;
                    }
                    return;
                case CatfishService.PROGRESS_FAILED /*4*/:
                    data = message.getData();
                    i = data.getInt(CatfishService.PROGRESS_VALUE);
                    str = data.getString(CatfishService.PROGRESS_ID);
                    String string2 = data.getString(CatfishService.PROGRESS_ACTION);
                    int i3 = data.getInt(CatfishService.PROGRESS_STATE);
                    str = str + "";
                    if (CatfishService.mMapProgress == null) {
                        CatfishService.mMapProgress = new HashMap();
                    }
                    if (CatfishService.mMapProgress == null || !CatfishService.mMapProgress.containsKey(str) || ((Integer) CatfishService.mMapProgress.get(str)).intValue() <= i || i > CatfishService.CONNECTION_IN_WIFI || i3 != CatfishService.VIEW_TYPE_GROUP) {
                        if (i3 != CatfishService.VIEW_TYPE_GROUP) {
                            if (CatfishService.mMapProgress != null && CatfishService.mMapProgress.containsKey(str)) {
                                CatfishService.mMapProgress.remove(str);
                            }
                            if (CatfishService.mMapState != null && CatfishService.mMapState.containsKey(str)) {
                                CatfishService.mMapProgress.remove(str);
                            }
                        } else {
                            CatfishService.mMapState.put(str, Integer.valueOf(i3));
                            if (i3 == CatfishService.VIEW_TYPE_GROUP) {
                                CatfishService.mMapProgress.put(str, Integer.valueOf(i));
                                Log.d(CatfishService.TAG, "progress upload chat berubah menjadi : " + i);
                            }
                        }
                        if (CatfishService.mClientCallBacks != null && CatfishService.mClientCallBacks.containsKey(string2)) {
                            iCatfishClientInterface = (ICatfishClientInterface) CatfishService.mClientCallBacks.get(string2);
                            if (iCatfishClientInterface != null && !iCatfishClientInterface.isFinish()) {
                                Log.d(CatfishService.TAG, "transmission the download status to UI Client");
                                iCatfishClientInterface.onUpdateProgressDownloadNUpload(str, i, i3);
                                return;
                            }
                            return;
                        }
                        return;
                    }
                    return;
                default:
                    return;
            }
        }
    }

    public enum RegistrationState {
        UNDEFINED,
        NEW_REGISTER,
        RESTORE_REGISTER
    }

    public enum UpdateRecent {
        PHOTOUPDT,
        STATUSUPDT,
        USERNAMEUPDT,
        ACCEPTFRIEND,
        SELFPHOTOUPDT,
        SELFSTATUSUPDT,
        SELFUSERNAMEUPDT,
        POOLPHOTOUPDT,
        POOLDESCUPDT,
        POOLTITLEUPDT
    }

    public static synchronized void acquireGCLock() {
        synchronized (CatfishService.class) {
            mGCLock += VIEW_TYPE_GROUP;
        }
    }

    public static synchronized void acquireGetMessagesLock() {
        synchronized (CatfishService.class) {
            mServiceExecutorLockCount += VIEW_TYPE_GROUP;
        }
    }

    public static void activatePushChannel() {
        activatePushChannel(0);
    }

    public static void activatePushChannel(long j) {
        Log.d(TAG, "Activate PUSH Channel");
        if (mPushHandler == null) {
            Log.e(TAG, "FATAL: Android runtime is BAD. PushHandler is NULL (???)");
            System.exit(THREAD_CH0);
        }
        if (mPushExecutor == null) {
            Log.e(TAG, "FATAL: Android runtime is BAD. PushExecutor is NULL (???)");
            System.exit(THREAD_CH0);
        }
        if (CatfishServiceConnState.isPushExecutorRunning()) {
            Log.d(TAG, "Activate PUSH Channel: Allready Active");
        } else if (CatfishServiceConnState.isPushExecutorPosted()) {
            Log.d(TAG, "Activate PUSH Channel: Executor allready POST in queue");
        } else {
            Log.d(TAG, "Activate PUSH Channel: POST Executor in queue");
            mPushHandler.removeCallbacks(mPushExecutor);
            mPushExecutor.restartPUSHChannel();
            if (j <= 0) {
                if (mPushHandler.post(mPushExecutor)) {
                    Log.d(TAG, "Activate PUSH Channel: Executor posted NOW");
                    CatfishServiceConnState.setExecutorPosted(true);
                }
            } else if (mPushHandler.postDelayed(mPushExecutor, j)) {
                Log.d(TAG, "Activate PUSH Channel: Executor posted Delayed " + j + " msecs");
                CatfishServiceConnState.setExecutorPosted(true);
            }
        }
    }

    private void buildUniqueIDKeyInfo() {
        TelephonyManager telephonyManager = (TelephonyManager) getSystemService(Constant.PHONE);
        WifiManager wifiManager = (WifiManager) getSystemService("wifi");
        if (telephonyManager != null) {
            try {
                mUniqeCFID1 = telephonyManager.getDeviceId();
                mUniqeCFIDKey1 = getPinKeyLock(mUniqeIDKeyInfo + mUniqeCFID1);
                Intent intent;
                if (mUniqeCFID1 == null) {
                    Toast.makeText(this, getString(R.string.invalid_imei_alert), VIEW_TYPE_GROUP).show();
                    intent = new Intent(BroadcastIntents.ACTION_INVALID_DEVICE);
                    intent.putExtra("isInvalidDevice", true);
                    sendBroadcast(intent);
                    stopSelf();
                } else if (mUniqeCFID1.startsWith("000")) {
                    Toast.makeText(this, getString(R.string.invalid_device), VIEW_TYPE_GROUP).show();
                    intent = new Intent(BroadcastIntents.ACTION_INVALID_DEVICE);
                    intent.putExtra("isInvalidDevice", true);
                    sendBroadcast(intent);
                    stopSelf();
                }
            } catch (Exception e) {
            }
        }
        if (wifiManager != null) {
            try {
                WifiInfo connectionInfo = wifiManager.getConnectionInfo();
            } catch (Exception e2) {
                return;
            }
        }
        connectionInfo = null;
        if (connectionInfo != null) {
            mUniqeCFID2 = connectionInfo.getMacAddress();
            mUniqeCFIDKey2 = getPinKeyLock(mUniqeIDKeyInfo + mUniqeCFID2);
        }
    }

    public static void cancelFetching() {
        mAM.cancel(mFetchingAlarm);
    }

    public static void cancelRadioState() {
        mAM.cancel(mRadioStateAlarm);
        mRadioStateScheduled = THREAD_CH0;
        mRadioStateHasPending = THREAD_CH0;
        Log.d(TAG, "Radio State Alarm is CANCELED");
    }

    private void cancelRunnableQueueAlarm() {
        mAM.cancel(mSceduleServiceRunnable);
        this.mRunnableQueueAlarmScheduled = THREAD_CH0;
    }

    private void checkIDAndRegisteringStatus() {
        catfish_unique_id = null;
        int i = mCatfishPreference.getInt(CATFISHID_LOGINVERSION, THREAD_CH0);
        Log.d(TAG, "loginversion: " + i + ", catfishversion: " + getCatfishVersion());
        if (i != getCatfishVersion()) {
            mCatfishPreference.edit().putInt(CATFISHID_LOGINVERSION, getCatfishVersion()).commit();
        }
        i = mCatfishPreference.getInt(CATFISHID_LOGINSTATE, THREAD_CH0);
        Log.d(TAG, "Login State: " + i);
        if (i < PROGRESS_ONPENDING) {
            Log.e(TAG, "LOGIN STATE: NOT FINAL OR REGISTERED --> GO TO INIT STATE");
            clearAccountAndRegisterPref();
            Log.d(TAG, "CHECKING DEVICE: " + mUniqeCFID1);
            PinManagerV2.deviceChecking(this, CatfishRESTAPI.ORGANIZATION_ID_CATFIZ, mUniqeCFID1);
            return;
        }
        catfish_unique_id = getCatfishIDFromSecurePref();
        if (catfish_unique_id == null) {
            Log.e(TAG, "FINL STATE: INVALID USER PIN IN SECURE PREF --> BACK TO INIT STATE");
            clearAccountAndRegisterPref();
            Log.d(TAG, "CHECKING DEVICE: " + mUniqeCFID1);
            PinManagerV2.deviceChecking(this, CatfishRESTAPI.ORGANIZATION_ID_CATFIZ, mUniqeCFID1);
            return;
        }
        Log.d(TAG, "FINAL OR REGISTERED STATE: Account is valid. NIC: " + catfish_unique_id);
    }

    public static boolean checkPointRadioState() {
        long currentTimeMillis = System.currentTimeMillis() - mCheckPoint;
        Log.d(TAG, "delta=" + String.valueOf(currentTimeMillis));
        if (currentTimeMillis > 20000) {
            if (mRadioStateHasPending > 0) {
                Log.d(TAG, "RadioState Checkpoint > 20 seconds Has Pending --> Wait...");
                return false;
            }
            Log.d(TAG, "RadioState Checkpoint > 20 seconds --> Go Ahead");
            mCheckPoint = System.currentTimeMillis();
            return true;
        } else if (currentTimeMillis >= 5000 || mRadioStateHasPending != 0) {
            Log.d(TAG, "RadioState Checkpoint --> Wait...");
            mRadioStateHasPending += VIEW_TYPE_GROUP;
            scheduleRadioState();
            return false;
        } else {
            Log.d(TAG, "RadioState Checkpoint < 5 seconds. No Pending --> Go Ahead");
            return true;
        }
    }

    private void clearAccountAndRegisterPref() {
        mCatfishPreference.edit().remove(CATFISHID_LOGINSTATE).commit();
        mCatfishPreference.edit().remove(CATFISHID_ACCSTATUS).commit();
        mCatfishPreference.edit().remove(CATFISHID_REGSTATUS).commit();
        mCatfishPreference.edit().remove(CATFISHID_OLDACCOUNT).commit();
        mCatfishPreference.edit().remove(CATFISHID_REGPROFILE_COMPLETE).commit();
        mCatfishPreference.edit().remove("profile_complete").commit();
        mCatfishPreference.edit().remove("email_activation").commit();
        mCatfishPreference.edit().remove("email_register").commit();
    }

    private void compatNotifyCatfizOfficialMessage(String str, String str2, boolean z) {
        int i = HAS_NEW_NIC_MESSAGE_ID;
        Log.d(TAG, "id:" + i);
        CharSequence charSequence = "";
        String str3 = "";
        SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        Intent intent = new Intent();
        Class chatViewClass = getChatViewClass();
        if (intent != null) {
            if (defaultSharedPreferences.getBoolean("dim_screen", true)) {
                dimScreenOn();
            } else if (mDimScreenOnWakeLock.isHeld()) {
                mDimScreenOnWakeLock.release();
            }
            intent.setClass(this, chatViewClass);
            intent.putExtra(AlbusModelObject.NOTIFICATION_ID, i);
            intent.putExtra(CatfishDataStorage.NIC_NAME, OFFICIAL_NAME);
            intent.putExtra(AlbusModelObject.PAGE, VIEW_TYPE_GROUP);
            intent.putExtra(AlbusModelObject.FRIEND_ID, OFFICIAL_PIN);
            intent.putExtra(AlbusModelObject.IS_OFFICIAL, true);
            intent.putExtra(HTTP.IDENTITY_CODING, VIEW_TYPE_GROUP);
            PendingIntent activity = PendingIntent.getActivity(this, THREAD_CH0, intent, THREAD_CH0);
            Builder contentText = new Builder(this).setSmallIcon(getNotificationIconChat()).setContentTitle("My notification").setContentText("Hello World!");
            if (!z) {
                contentText.setSound(null);
            } else if (defaultSharedPreferences.getBoolean("enable_chat_ringtone", true)) {
                contentText.setSound(Uri.parse(defaultSharedPreferences.getString(CHAT_RINGTONE, "")));
            }
            contentText.setLights(SupportMenu.CATEGORY_MASK, CatfizMsgTypes.NICSUBTYPE_PUBLICANN, CatfizMsgTypes.NICSUBTYPE_PARTNER);
            CharSequence string = getResources().getString(R.string.app_name);
            String str4 = "";
            if (defaultSharedPreferences.getBoolean(CHAT_VIBRATE, false)) {
                vibrateNotif();
            }
            Bitmap decodeResource = BitmapFactory.decodeResource(getResources(), getNotificationProfileOfficial());
            notificationMsg.toArray(new String[PGB_UPLOAD_FIZZLINK]);
            if (this != null) {
                string = OFFICIAL_NAME;
            }
            int i2 = defaultSharedPreferences.getInt("chatOfficialNotificationCount", THREAD_CH0);
            contentText.setNumber(i2);
            if (i2 <= VIEW_TYPE_GROUP) {
                charSequence = i2 + " " + getResources().getString(R.string.newmessageticker);
                getResources().getString(R.string.newmessageticker);
            }
            if (i2 > VIEW_TYPE_GROUP) {
                getResources().getString(R.string.newmessagetickerplurar);
                charSequence = i2 + " " + getResources().getString(R.string.newmessagetickerplurar);
            }
            if (decodeResource != null) {
                contentText.setLargeIcon(decodeResource);
            }
            contentText.setContentTitle(string);
            contentText.setContentText(charSequence);
            contentText.setTicker(str2);
            contentText.setContentIntent(activity);
            contentText.setAutoCancel(true);
            ((NotificationManager) getSystemService("notification")).notify(i, contentText.build());
        }
    }

    private void compatNotifyUserNow(String str, int i, String str2, boolean z) {
        Log.d(TAG, "id:" + i);
        String str3 = "";
        String str4 = "";
        Character.toString('\u0007');
        SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        SharedPreferences catfishPreferences = getCatfishPreferences();
        Intent actionIntent = getActionIntent(str);
        if (actionIntent != null) {
            String string;
            CharSequence charSequence;
            actionIntent.putExtra(AlbusModelObject.NOTIFICATION_ID, i);
            PendingIntent activity = PendingIntent.getActivity(this, THREAD_CH0, actionIntent, THREAD_CH0);
            int i2 = THREAD_CH0;
            if (i == NEWMESSAGE_NOTIFICATION_ID || i == ADJUST_TIME_ID) {
                i2 = getNotificationIconChat();
            } else if (i == FRIENDREQUEST_NOTIFICATION_ID || i == NEWFRIEND_NOTIFICATION_ID) {
                i2 = getNotificationIconFriend();
            } else if (i == POOL_NEWMESSAGE_NOTIFICATION_ID) {
                i2 = getNotificationIconPool();
            }
            Builder contentText = new Builder(this).setSmallIcon(i2).setContentTitle("My notification").setContentText("Hello World!");
            if (!z) {
                contentText.setSound(null);
            } else if (i == POOL_NEWMESSAGE_NOTIFICATION_ID) {
                if (catfishPreferences.getBoolean("enable_pool_ringtone", true)) {
                    contentText.setSound(Uri.parse(catfishPreferences.getString(GROUP_RINGTONE, "")));
                }
            } else if (catfishPreferences.getBoolean("enable_chat_ringtone", true)) {
                contentText.setSound(Uri.parse(catfishPreferences.getString(CHAT_RINGTONE, "")));
            }
            contentText.setLights(SupportMenu.CATEGORY_MASK, CatfizMsgTypes.NICSUBTYPE_PUBLICANN, CatfizMsgTypes.NICSUBTYPE_PARTNER);
            int i3 = THREAD_CH0;
            int i4 = VIEW_TYPE_GROUP;
            CharSequence string2 = getResources().getString(R.string.app_name);
            String[] strArr = new String[PGB_UPLOAD_FIZZLINK];
            Bitmap bitmap = null;
            String str5 = "";
            String str6;
            if (i == NEWMESSAGE_NOTIFICATION_ID) {
                if (catfishPreferences.getBoolean(CHAT_VIBRATE, false)) {
                    vibrateNotif();
                }
                if (catfishPreferences.getBoolean(CHAT_DIM, false)) {
                    dimScreenOn();
                } else if (mDimScreenOnWakeLock.isHeld()) {
                    mDimScreenOnWakeLock.release();
                }
                String str7 = string2 + " " + getResources().getString(R.string.gallery_menu_chat);
                string = defaultSharedPreferences.getString("chatNotificationLastUser", null);
                Bitmap friendProfilePhotoBitmap = CatfishPhotoStorage.getFriendProfilePhotoBitmap(this, string);
                notificationMsg.toArray(strArr);
                if (checkedName.size() <= 0 || checkedName.get(THREAD_CH0) == null || ((String) checkedName.get(THREAD_CH0)).compareTo("") == 0) {
                    str6 = str7;
                } else {
                    str6 = (String) checkedName.get(THREAD_CH0);
                    if (this != null) {
                        FriendListDataStorage friendListDataStorage = new FriendListDataStorage(this);
                        if (friendListDataStorage != null) {
                            str6 = friendListDataStorage.getFriendAlias(string);
                            if (str6 == null || str6.isEmpty()) {
                                str6 = friendListDataStorage.getFriendname(string);
                            }
                        }
                    }
                }
                int size = checkedName.size();
                i3 = defaultSharedPreferences.getInt("chatNotificationCount", THREAD_CH0);
                Bitmap bitmap2 = friendProfilePhotoBitmap;
                i4 = size;
                string2 = str6;
                bitmap = bitmap2;
            } else if (i == POOL_NEWMESSAGE_NOTIFICATION_ID) {
                if (catfishPreferences.getBoolean(GROUP_VIBRATE, false)) {
                    vibrateNotif();
                }
                if (catfishPreferences.getBoolean(GROUP_DIM, false)) {
                    dimScreenOn();
                } else if (mDimScreenOnWakeLock.isHeld()) {
                    mDimScreenOnWakeLock.release();
                }
                poolNotificationMsg.toArray(strArr);
                if (poolCheckedName.size() <= 0 || poolCheckedName.get(THREAD_CH0) == null || ((String) poolCheckedName.get(THREAD_CH0)).compareTo("") == 0) {
                    CharSequence charSequence2 = string2;
                } else {
                    str6 = (String) poolCheckedName.get(THREAD_CH0);
                }
                i4 = poolCheckedName.size();
                i3 = defaultSharedPreferences.getInt("poolNotificationCount", THREAD_CH0);
                Object obj = str6;
                bitmap = CatfishPhotoStorage.getDownloadThumbBitmapInPool(this, defaultSharedPreferences.getString("poolNotificationLastTopic", null));
            }
            contentText.setNumber(i3);
            if (i3 <= VIEW_TYPE_GROUP) {
                str3 = i3 + " " + getResources().getString(R.string.newmessageticker);
                str4 = getResources().getString(R.string.newmessageticker);
            }
            if (i3 > VIEW_TYPE_GROUP) {
                str4 = (THREAD_CH0 != PGB_UPLOAD_FIZZLINK || i3 - 6 <= 0) ? getResources().getString(R.string.newmessagetickerplurar) : "+" + (i3 - 6) + " " + getResources().getString(R.string.newmessagetickerplurar);
                String str8 = str4;
                charSequence = i3 + " " + getResources().getString(R.string.newmessagetickerplurar);
                string = str8;
            } else {
                string = str4;
                Object obj2 = str3;
            }
            if (i4 > VIEW_TYPE_GROUP) {
                string2 = getResources().getString(R.string.app_name);
                if (i == NEWMESSAGE_NOTIFICATION_ID) {
                    str4 = charSequence + " " + getResources().getString(R.string.from) + " " + Integer.toString(i4) + " " + getResources().getString(R.string.friends);
                    string = string + " " + getResources().getString(R.string.from) + " " + i4 + " " + getResources().getString(R.string.friends);
                    string2 = string2 + " " + getResources().getString(R.string.gallery_menu_chat);
                } else if (i == POOL_NEWMESSAGE_NOTIFICATION_ID) {
                    str4 = charSequence + " " + getResources().getString(R.string.from) + " " + Integer.toString(i4) + " " + getResources().getString(R.string.conversation);
                    string = string + " " + getResources().getString(R.string.from) + " " + i4 + " " + getResources().getString(R.string.conversation);
                    string2 = string2 + " " + getResources().getString(R.string.gallery_menu_pool);
                }
                charSequence = str4.replace("\" ", "");
                string.replace("\" ", "");
            }
            if (bitmap != null && i4 <= VIEW_TYPE_GROUP) {
                contentText.setLargeIcon(bitmap);
            }
            contentText.setContentTitle(string2);
            contentText.setContentText(charSequence);
            contentText.setTicker(str2);
            contentText.setContentIntent(activity);
            contentText.setAutoCancel(true);
            ((NotificationManager) getSystemService("notification")).notify(i, contentText.build());
        }
    }

    private void decreaseCountActivity() {
        CatfishPreferences catfishPreferences = getCatfishPreferences();
        Resources resources = getResources();
        long j = catfishPreferences.getLong(COUNTACTIVITY_LASTSETTIME, 0);
        long currentTimeMillis = System.currentTimeMillis();
        if (currentTimeMillis - j > Long.parseLong(resources.getString(R.string.countactivity_decrease_time))) {
            catfishPreferences.edit().putLong(COUNTACTIVITY_LASTSETTIME, currentTimeMillis).commit();
            postToDBHandler(new DBAndFilesCleanup(CONNECTION_IN_MOBILE));
        }
    }

    private void dimScreenOn() {
        if (!mPWR.isScreenOn()) {
            if (!mDimScreenOnWakeLock.isHeld()) {
                mDimScreenOnWakeLock.acquire();
            }
            scheduleDimScreenOffAlarm();
        } else if (mDimScreenOnWakeLock.isHeld()) {
            scheduleDimScreenOffAlarm();
        }
    }

    private void executePendingTask() {
        postToDBHandler(new TaskDatabaseExecutor(TaskDatabaseAction.EXECUTE_ALL_PENDING_TASK));
    }

    private Intent getActionIntent(String str) {
        return mIntentStorage == null ? null : (Intent) mIntentStorage.get(str);
    }

    public static synchronized CatfishPreferences getCatfishPreferences() {
        CatfishPreferences catfishPreferences;
        synchronized (CatfishService.class) {
            catfishPreferences = mCatfishPreference;
        }
        return catfishPreferences;
    }

    public static int getCatfishVersion() {
        return mCatfizVersion;
    }

    private Class getChatViewClass() {
        Class cls = null;
        try {
            Log.d(TAG, " --- Main Activity Class Name --- " + getPackageName());
            String string = getPackageManager().getApplicationInfo(getPackageName(), AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS).metaData.getString("chatGroupViewActivity");
            Log.d(TAG, " --- Main Activity Class Name --- " + string);
            cls = Class.forName(string);
        } catch (NameNotFoundException e) {
            Log.d(TAG, " --- Main Activity Class Name --- " + e.getMessage());
        } catch (ClassNotFoundException e2) {
            Log.d(TAG, " --- Main Activity Class Name --- " + e2.getMessage());
        }
        return cls;
    }

    public static synchronized String getCurrentServerHost() {
        String serverHost;
        synchronized (CatfishService.class) {
            if (mCurrentHostName == null) {
                serverHost = getServerHost();
            } else {
                Log.d(TAG, "ServerHost using CURRENT SERVER: " + mCurrentHostName);
                serverHost = mCurrentHostName;
            }
        }
        return serverHost;
    }

    private long getDelayMillis() {
        return catfish_regular_delay;
    }

    public static synchronized String getLongPIN() {
        String str;
        synchronized (CatfishService.class) {
            str = catfish_longpin;
        }
        return str;
    }

    private Class getMainActivityClass() {
        Class cls = null;
        try {
            Log.d(TAG, " --- Main Activity Class Name --- " + getPackageName());
            String string = getPackageManager().getApplicationInfo(getPackageName(), AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS).metaData.getString("mainActivity");
            Log.d(TAG, " --- Main Activity Class Name --- " + string);
            cls = Class.forName(string);
        } catch (NameNotFoundException e) {
            Log.d(TAG, " --- Main Activity Class Name --- " + e.getMessage());
        } catch (ClassNotFoundException e2) {
            Log.d(TAG, " --- Main Activity Class Name --- " + e2.getMessage());
        }
        return cls;
    }

    private long getMaxReschedulingAge() {
        return maxReschedulingAge;
    }

    public static synchronized int getMessagesLockValue() {
        int i;
        synchronized (CatfishService.class) {
            i = mServiceExecutorLockCount;
        }
        return i;
    }

    public static String getMimeType(String str) {
        String fileExtensionFromUrl = MimeTypeMap.getFileExtensionFromUrl(str);
        return fileExtensionFromUrl != null ? MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtensionFromUrl) : null;
    }

    public static String getMyAPIKey(Context context) {
        String str = null;
        try {
            Signature[] signatureArr = context.getPackageManager().getPackageInfo(context.getPackageName(), 64).signatures;
            int length = signatureArr.length;
            for (int i = THREAD_CH0; i < length; i += VIEW_TYPE_GROUP) {
                Signature signature = signatureArr[i];
                str = str == null ? getRehashKey(signature.toCharsString()) : str + getRehashKey(signature.toCharsString() + str);
            }
        } catch (NameNotFoundException e) {
        } catch (Exception e2) {
        }
        return str;
    }

    private String getNewFriendReqTicker() {
        return getString(R.string.newfriendrequestticker);
    }

    private String getNewFriendReqTitle() {
        return getString(R.string.newfriendrequesttitle);
    }

    private String getNewMessageTicker() {
        return getString(R.string.newmessageticker);
    }

    private String getNewMessageTitle() {
        return getString(R.string.newmessagetitle);
    }

    private int getNotificationIcon() {
        int i = THREAD_CH0;
        try {
            i = getPackageManager().getApplicationInfo(getPackageName(), AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS).metaData.getInt("notificationIcon");
        } catch (NameNotFoundException e) {
            e.printStackTrace();
        }
        Log.d(TAG, " --- Notification, getNotificationIcon = --- " + i);
        return i;
    }

    private int getNotificationIconChat() {
        int i = THREAD_CH0;
        try {
            i = getPackageManager().getApplicationInfo(getPackageName(), AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS).metaData.getInt("notificationIconChat");
        } catch (NameNotFoundException e) {
            e.printStackTrace();
        }
        Log.d(TAG, " --- Notification, getNotificationIconChat = --- " + i);
        return i;
    }

    private int getNotificationIconFriend() {
        int i = THREAD_CH0;
        try {
            i = getPackageManager().getApplicationInfo(getPackageName(), AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS).metaData.getInt("notificationIconFriend");
        } catch (NameNotFoundException e) {
            e.printStackTrace();
        }
        Log.d(TAG, " --- Notification, getNotificationIconFriend = --- " + i);
        return i;
    }

    private int getNotificationIconPool() {
        int i = THREAD_CH0;
        try {
            i = getPackageManager().getApplicationInfo(getPackageName(), AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS).metaData.getInt("notificationIconPool");
        } catch (NameNotFoundException e) {
            e.printStackTrace();
        }
        Log.d(TAG, " --- Notification, getNotificationIconPool = --- " + i);
        return i;
    }

    private int getNotificationProfileOfficial() {
        int i = THREAD_CH0;
        try {
            i = getPackageManager().getApplicationInfo(getPackageName(), AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS).metaData.getInt("notificationProfileOfficial");
        } catch (NameNotFoundException e) {
            e.printStackTrace();
        }
        Log.d(TAG, " --- Notification, getNotificationIconChat = --- " + i);
        return i;
    }

    private synchronized String getPinKey(String str) {
        StringBuffer stringBuffer;
        Key secretKeySpec = new SecretKeySpec(mPK.getBytes(), "HmacSHA1");
        Mac instance = Mac.getInstance("HmacSHA1");
        instance.init(secretKeySpec);
        byte[] doFinal = instance.doFinal(str.getBytes());
        stringBuffer = new StringBuffer();
        for (int i = THREAD_CH0; i < doFinal.length; i += VIEW_TYPE_GROUP) {
            int i2 = doFinal[i] & MotionEventCompat.ACTION_MASK;
            if (i2 <= 15) {
                stringBuffer.append("0");
            }
            stringBuffer.append(Integer.toHexString(i2));
        }
        return stringBuffer.toString();
    }

    private synchronized String getPinKeyLock(String str) {
        StringBuffer stringBuffer;
        Key secretKeySpec = new SecretKeySpec(mPKH.getBytes(), "HmacSHA1");
        Mac instance = Mac.getInstance("HmacSHA1");
        instance.init(secretKeySpec);
        byte[] doFinal = instance.doFinal(str.getBytes());
        stringBuffer = new StringBuffer();
        for (int i = THREAD_CH0; i < doFinal.length; i += VIEW_TYPE_GROUP) {
            int i2 = doFinal[i] & MotionEventCompat.ACTION_MASK;
            if (i2 <= 15) {
                stringBuffer.append("0");
            }
            stringBuffer.append(Integer.toHexString(i2));
        }
        return stringBuffer.toString();
    }

    static long getPushChannelDelay() {
        return catfish_pushchannel_delay;
    }

    public static synchronized String getPushHost() {
        String str;
        synchronized (CatfishService.class) {
            int length = (int) (mHostPushIndex % ((long) catfish_push_hostname.length));
            mHostPushIndex = System.currentTimeMillis();
            mHostPushIndex++;
            mIndex = length;
            str = catfish_push_hostname[length];
        }
        return str;
    }

    public static synchronized int getPushPort() {
        int i;
        synchronized (CatfishService.class) {
            i = catfish_push_port[mIndex];
        }
        return i;
    }

    public static synchronized String getRegistrationServer() {
        String str;
        synchronized (CatfishService.class) {
            int length = (int) (mRegHostIndex % ((long) catfish_reghost.length));
            mRegHostIndex = System.currentTimeMillis();
            mRegHostIndex++;
            mRegIndex = length;
            str = catfish_reghost[mRegIndex] + ":" + catfish_regport[mRegIndex];
        }
        return str;
    }

    public static RegistrationState getRegistrationState() {
        return mCurrentRegistrationState;
    }

    private static String getRehashKey(String str) {
        Key secretKeySpec = new SecretKeySpec(mPK.getBytes(), "HmacSHA1");
        Mac instance = Mac.getInstance("HmacSHA1");
        instance.init(secretKeySpec);
        byte[] doFinal = instance.doFinal(str.getBytes());
        StringBuffer stringBuffer = new StringBuffer();
        for (int i = THREAD_CH0; i < doFinal.length; i += VIEW_TYPE_GROUP) {
            int i2 = doFinal[i] & MotionEventCompat.ACTION_MASK;
            if (i2 <= 15) {
                stringBuffer.append("0");
            }
            stringBuffer.append(Integer.toHexString(i2));
        }
        return stringBuffer.toString();
    }

    public static CatfishRESTAPI getRestAPI(int i) {
        switch (i) {
            case THREAD_CH0 /*0*/:
                if (RESTAPI_CH0 == null) {
                    RESTAPI_CH0 = new CatfishRESTAPI();
                }
                return RESTAPI_CH0;
            case VIEW_TYPE_GROUP /*1*/:
                if (RESTAPI_CH1 == null) {
                    RESTAPI_CH1 = new CatfishRESTAPI();
                }
                return RESTAPI_CH1;
            case VIEW_TYPE_CHAT /*2*/:
                if (RESTAPI_CH2 == null) {
                    RESTAPI_CH2 = new CatfishRESTAPI();
                }
                return RESTAPI_CH2;
            default:
                return null;
        }
    }

    public static synchronized String getServerHost() {
        String str;
        synchronized (CatfishService.class) {
            int length = (int) (mHostIndex % ((long) catfish_hostname.length));
            mHostIndex = System.currentTimeMillis();
            mHostIndex++;
            mCurrentHostName = catfish_hostname[length] + ":" + catfish_port[length];
            Log.d(TAG, "ServerHost using NEW SERVER: " + mCurrentHostName);
            str = mCurrentHostName;
        }
        return str;
    }

    public static CatfishService getServiceInstance() {
        return mServiceInstance;
    }

    private long getSleepDelayMillis() {
        return catfish_sleep_delay;
    }

    public static synchronized Drawable getStoredDrawable() {
        Drawable drawable;
        synchronized (CatfishService.class) {
            drawable = tempSvgDownload;
        }
        return drawable;
    }

    public static synchronized String getStreamingServer() {
        String str;
        synchronized (CatfishService.class) {
            int length = (int) (mStreamHostIndex % ((long) catfish_streamhost.length));
            mStreamHostIndex = System.currentTimeMillis();
            mStreamHostIndex++;
            mStreamIndex = length;
            str = catfish_streamhost[mStreamIndex] + ":" + catfish_streamport[mStreamIndex];
        }
        return str;
    }

    public static synchronized String getUserPIN() {
        String str;
        synchronized (CatfishService.class) {
            str = catfish_unique_id;
        }
        return str;
    }

    private void handleRunnableQueue() {
        this.mRunnableQueueAlarmScheduled = THREAD_CH0;
    }

    private void initInternalResourcesSettings() {
        mMapProgress = new HashMap();
        mMapState = new HashMap();
        mResources = getResources();
        OFFICIAL_MESSAGE = mResources.getString(R.string.official_message);
        OFFICIAL_NAME = mResources.getString(R.string.official_name);
        catfish_hostname[THREAD_CH0] = mResources.getString(R.string.svrhostname);
        catfish_port[THREAD_CH0] = mResources.getString(R.string.svrport);
        catfish_hostname[VIEW_TYPE_GROUP] = mResources.getString(R.string.svrhostname_2);
        catfish_port[VIEW_TYPE_GROUP] = mResources.getString(R.string.svrport_2);
        catfish_hostname[VIEW_TYPE_CHAT] = mResources.getString(R.string.svrhostname_3);
        catfish_port[VIEW_TYPE_CHAT] = mResources.getString(R.string.svrport_3);
        catfish_hostname[VIEW_TYPE_COMMENT] = mResources.getString(R.string.svrhostname_4);
        catfish_port[VIEW_TYPE_COMMENT] = mResources.getString(R.string.svrport_4);
        catfish_hostname[PROGRESS_FAILED] = mResources.getString(R.string.svrhostname_5);
        catfish_port[PROGRESS_FAILED] = mResources.getString(R.string.svrport_5);
        catfish_hostname[PROGRESS_ONPENDING] = mResources.getString(R.string.svrhostname_6);
        catfish_port[PROGRESS_ONPENDING] = mResources.getString(R.string.svrport_6);
        catfish_hostname[PGB_UPLOAD_FIZZLINK] = mResources.getString(R.string.svrhostname_7);
        catfish_port[PGB_UPLOAD_FIZZLINK] = mResources.getString(R.string.svrport_7);
        catfish_hostname[PGB_DOWNLOAD_FIZZLINK] = mResources.getString(R.string.svrhostname_8);
        catfish_port[PGB_DOWNLOAD_FIZZLINK] = mResources.getString(R.string.svrport_8);
        catfish_hostname[8] = mResources.getString(R.string.svrhostname_9);
        catfish_port[8] = mResources.getString(R.string.svrport_9);
        catfish_hostname[9] = mResources.getString(R.string.svrhostname_10);
        catfish_port[9] = mResources.getString(R.string.svrport_10);
        catfish_regular_delay = Long.parseLong(mResources.getString(R.string.regulardelay));
        catfish_sleep_delay = Long.parseLong(mResources.getString(R.string.sleepdelay));
        catfish_pushchannel_delay = Long.parseLong(mResources.getString(R.string.pushchannel_delay));
        catfish_housekeeping_delay = Long.parseLong(mResources.getString(R.string.housekeeping_delay));
        p2prunnable_maxwait = Long.parseLong(mResources.getString(R.string.p2prunnable_maxwait));
        catfish_push_hostname[THREAD_CH0] = mResources.getString(R.string.pushhostname);
        catfish_push_port[THREAD_CH0] = Integer.parseInt(mResources.getString(R.string.pushport));
        catfish_push_hostname[VIEW_TYPE_GROUP] = mResources.getString(R.string.pushhostname2);
        catfish_push_port[VIEW_TYPE_GROUP] = Integer.parseInt(mResources.getString(R.string.pushport2));
        catfish_push_hostname[VIEW_TYPE_CHAT] = mResources.getString(R.string.pushhostname3);
        catfish_push_port[VIEW_TYPE_CHAT] = Integer.parseInt(mResources.getString(R.string.pushport3));
        catfish_push_hostname[VIEW_TYPE_COMMENT] = mResources.getString(R.string.pushhostname4);
        catfish_push_port[VIEW_TYPE_COMMENT] = Integer.parseInt(mResources.getString(R.string.pushport4));
        catfish_push_hostname[PROGRESS_FAILED] = mResources.getString(R.string.pushhostname5);
        catfish_push_port[PROGRESS_FAILED] = Integer.parseInt(mResources.getString(R.string.pushport5));
        catfish_push_hostname[PROGRESS_ONPENDING] = mResources.getString(R.string.pushhostname6);
        catfish_push_port[PROGRESS_ONPENDING] = Integer.parseInt(mResources.getString(R.string.pushport6));
        catfish_push_hostname[PGB_UPLOAD_FIZZLINK] = mResources.getString(R.string.pushhostname7);
        catfish_push_port[PGB_UPLOAD_FIZZLINK] = Integer.parseInt(mResources.getString(R.string.pushport7));
        catfish_push_hostname[PGB_DOWNLOAD_FIZZLINK] = mResources.getString(R.string.pushhostname8);
        catfish_push_port[PGB_DOWNLOAD_FIZZLINK] = Integer.parseInt(mResources.getString(R.string.pushport8));
        catfish_push_hostname[8] = mResources.getString(R.string.pushhostname8);
        catfish_push_port[8] = Integer.parseInt(mResources.getString(R.string.pushport9));
        catfish_push_hostname[9] = mResources.getString(R.string.pushhostname8);
        catfish_push_port[9] = Integer.parseInt(mResources.getString(R.string.pushport10));
        catfish_streamhost[THREAD_CH0] = mResources.getString(R.string.streamhostname);
        catfish_streamport[THREAD_CH0] = mResources.getString(R.string.streamport);
        catfish_reghost[THREAD_CH0] = mResources.getString(R.string.reghostname);
        catfish_regport[THREAD_CH0] = mResources.getString(R.string.regport);
        CATFISH_NOTIFICATION_ID = R.string.notification_id;
        NEWMESSAGE_NOTIFICATION_ID = R.string.newmessage_notify_id;
        FRIENDREQUEST_NOTIFICATION_ID = R.string.newfriendrequest_notify_id;
        NEWFRIEND_NOTIFICATION_ID = R.string.newfriend_notify_id;
        POOL_NEWMESSAGE_NOTIFICATION_ID = R.string.pool_newmessage_notify_id;
        NEW_SERVERMESSAGE_NOTIFICATION_ID = R.string.new_servermessage_notify_id;
        NEW_UPDATE_NOTIFICATION_ID = R.string.new_update_notify_id;
        INSTAL_UPDATE_NOTIFICATION_ID = R.string.instal_update_notify_id;
        HAS_TOPIC_NEED_TO_NOTIF_NOTIFICATION_ID = R.string.topic_need_notify_id;
        HAS_TOPIC_DELETED_NOTIFICATION_ID = R.string.topic_deleted_notify_id;
        THEMEUPDATE_NOTIFICATION_ID = R.string.themeupdatenotify_id;
        HAS_NEW_NIC_MESSAGE_ID = R.string.new_nicmessage_notify_id;
        ADJUST_TIME_ID = R.string.adjust_time_notify_id;
        maxReschedulingAge = Long.parseLong(mResources.getString(R.string.maxreschedulingage));
        mResources = null;
        Log.d(TAG, "*** INTERNAL RESOURCE IS SET ***");
    }

    private void initNotificationsSetting() {
        Uri defaultUri = RingtoneManager.getDefaultUri(VIEW_TYPE_CHAT);
        Log.d(TAG, "init notification setting");
        mCatfishPreference.edit().putString(CHAT_RINGTONE, defaultUri.toString()).commit();
        mCatfishPreference.edit().putString(GROUP_RINGTONE, defaultUri.toString()).commit();
        mCatfishPreference.edit().putString(MY_STATUS_RINGTONE, defaultUri.toString()).commit();
        mCatfishPreference.edit().putBoolean(CHAT_VIBRATE, false).commit();
        mCatfishPreference.edit().putBoolean(GROUP_VIBRATE, false).commit();
        mCatfishPreference.edit().putBoolean(MY_STATUS_VIBRATE, false).commit();
        mCatfishPreference.edit().putBoolean(CHAT_DIM, false).commit();
        mCatfishPreference.edit().putBoolean(GROUP_DIM, false).commit();
        mCatfishPreference.edit().putBoolean(MY_STATUS_DIM, false).commit();
    }

    private void initOSSIntents() {
        Intent intent = new Intent(CATFISH_ALARM_WAKEUP);
        intent.setClass(this, CatfishService.class);
        mAlarmWakeup = PendingIntent.getService(this, THREAD_CH0, intent, THREAD_CH0);
        intent = new Intent(CATFISH_PUSHALARM_WAKEUP);
        intent.setClass(this, CatfishService.class);
        mPushAlarmWakeup = PendingIntent.getService(this, THREAD_CH0, intent, THREAD_CH0);
        intent = new Intent(CATFISH_HOUSEKEEPING);
        intent.setClass(this, CatfishService.class);
        mHouseKeepingAlarm = PendingIntent.getService(this, THREAD_CH0, intent, THREAD_CH0);
        intent = new Intent(CATFISH_SCHEDULED_GETMESSAGES);
        intent.setClass(this, CatfishService.class);
        mScheduledGetMessages = PendingIntent.getService(this, THREAD_CH0, intent, THREAD_CH0);
        intent = new Intent(CATFISH_SCHEDULED_SVCRUNNABLE);
        intent.setClass(this, CatfishService.class);
        mSceduleServiceRunnable = PendingIntent.getService(this, THREAD_CH0, intent, THREAD_CH0);
        intent = new Intent(CATFISH_DIMSCREENOFF_ALARM);
        intent.setClass(this, CatfishService.class);
        mDimScreenOffAlarm = PendingIntent.getService(this, THREAD_CH0, intent, THREAD_CH0);
        intent = new Intent(CATFISH_P2PSCHEDULED_WAKEUP);
        intent.setClass(this, CatfishService.class);
        mP2PScheduledWakeup = PendingIntent.getService(this, THREAD_CH0, intent, THREAD_CH0);
        intent = new Intent(CATFISH_RADIOSTATE_WAKEUP);
        intent.setClass(this, CatfishService.class);
        mRadioStateAlarm = PendingIntent.getService(this, THREAD_CH0, intent, THREAD_CH0);
        intent = new Intent(CATFISH_FETCHING_ALARM);
        intent.setClass(this, CatfishService.class);
        mFetchingAlarm = PendingIntent.getService(this, THREAD_CH0, intent, THREAD_CH0);
        intent = new Intent(CATFISH_SHORT_RECURRENT);
        intent.setClass(this, CatfishService.class);
        mShorRecurrent = PendingIntent.getService(this, THREAD_CH0, intent, THREAD_CH0);
    }

    private void initOSSystemService() {
        mNM = (NotificationManager) getSystemService("notification");
        mAM = (AlarmManager) getSystemService(NotificationCompatApi21.CATEGORY_ALARM);
        mPWR = (PowerManager) getSystemService("power");
        mConnMan = (ConnectivityManager) getSystemService("connectivity");
        mWifiMan = (WifiManager) getSystemService("wifi");
        mWakeLock = mPWR.newWakeLock(VIEW_TYPE_GROUP, "Catfish_SVC_PLTAG");
        mDimScreenOnWakeLock = mPWR.newWakeLock(805306374, "Catfish_SVC_DSCREENONTAG");
        mWifiLock = mWifiMan.createWifiLock("Catfish_SVC_WLTAG");
    }

    private void initPUSHChannel() {
        mPushExecutor = new CatfishPushExecutor();
    }

    private void initSecurPreferences() {
        mCatfishPreference = new CatfishPreferences(this);
        if (mCatfishPreference.isCfprefAlreadyToGo()) {
            initializeCatfishPreference();
            return;
        }
        this.cancelStart = true;
        Intent intent = new Intent(BroadcastIntents.ACTION_INVALID_DEVICE);
        intent.putExtra("isInvalidDevice", true);
        Log.d(TAG, " INVALID IMEI, STOP SERVICE ");
        sendBroadcast(intent);
        stopSelf();
        System.exit(THREAD_CH0);
    }

    private void initThreadHandlers() {
        mHandler_MainThread = new CatfishMainHandler(this);
        mProgressbar_MainThread = new ProgressBarMainHandler();
    }

    private void initializeProfilePhotoPendingList() {
        if (mProfilePhotoPendingList == null) {
            mProfilePhotoPendingList = new ProfilePhotoPendingList();
        }
    }

    public static boolean isAllowToGetStatusComment() {
        long currentTimeMillis = System.currentTimeMillis() - mGetStatusCheckPoint;
        Log.d(TAG, "GET STATUS COMMENT CHECKPOINT DELTA=" + currentTimeMillis);
        if (currentTimeMillis < mCommentStatusFetchTime) {
            return false;
        }
        Log.d(TAG, "GET STATUS ALLOWED");
        mGetStatusCheckPoint = System.currentTimeMillis();
        return true;
    }

    private boolean isEngineAllowToStart() {
        return getUserPIN() != null;
    }

    public static boolean isEngineStarted() {
        return mIsStarted;
    }

    public static boolean isInaccurateTimestamp(long j) {
        long j2 = j - 25200000;
        Calendar instance = Calendar.getInstance();
        long timeInMillis = instance.getTimeInMillis();
        instance.setTimeInMillis(j2);
        return instance.getTimeInMillis() > timeInMillis;
    }

    public static boolean isInitialized() {
        return isCatfishServiceInitialized;
    }

    private boolean isOurScreenOn() {
        return mPWR.isScreenOn();
    }

    private void loadOTAServerSettings() {
        postToServiceHandler(new SettingDownloadExecutor(this, getCurrentServerHost(), repoServer));
    }

    private boolean networkStatusCheck() {
        NetworkInfo activeNetworkInfo = mConnMan.getActiveNetworkInfo();
        if (activeNetworkInfo == null) {
            Log.d(TAG, "NO NETWORK AVAILABLE: CANCEL ALL ALARM");
            cancelAllAlarm();
            mPushExecutor.abortPUSHChannel();
            releaseAllLocks();
            return false;
        } else if (activeNetworkInfo.isConnected()) {
            return true;
        } else {
            Log.d(TAG, "NO NETWORK CONNECTED: CANCEL ALL ALARM");
            cancelAllAlarm();
            mPushExecutor.abortPUSHChannel();
            releaseAllLocks();
            return false;
        }
    }

    private void notifyUserNow(Intent intent, int i, String str, String str2, String str3) {
        SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        if (intent != null) {
            dimScreenOn();
            PendingIntent activity = PendingIntent.getActivity(this, THREAD_CH0, intent, THREAD_CH0);
            NotificationManager notificationManager = (NotificationManager) getSystemService("notification");
            Notification notification = new Notification(getNotificationIcon(), str, System.currentTimeMillis());
            notification.setLatestEventInfo(this, str2, str3, activity);
            notification.sound = Uri.parse(defaultSharedPreferences.getString(CHAT_RINGTONE, ""));
            notification.ledARGB = SupportMenu.CATEGORY_MASK;
            notification.ledOnMS = CatfizMsgTypes.NICSUBTYPE_PUBLICANN;
            notification.ledOffMS = CatfizMsgTypes.NICSUBTYPE_PARTNER;
            notification.flags |= VIEW_TYPE_GROUP;
            notification.flags |= 16;
            notificationManager.notify(i, notification);
        }
    }

    private void notifyUserNow(String str, int i, String str2, String str3, String str4, boolean z, boolean z2) {
        Log.d(TAG, "id:" + i);
        SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        Intent actionIntent = getActionIntent(str);
        if (actionIntent != null) {
            CharSequence charSequence;
            actionIntent.putExtra(AlbusModelObject.NOTIFICATION_ID, i);
            PendingIntent activity = PendingIntent.getActivity(this, THREAD_CH0, actionIntent, THREAD_CH0);
            NotificationManager notificationManager = (NotificationManager) getSystemService("notification");
            int i2 = THREAD_CH0;
            if (i == NEWMESSAGE_NOTIFICATION_ID) {
                i2 = getNotificationIconChat();
            } else if (i == FRIENDREQUEST_NOTIFICATION_ID || i == NEWFRIEND_NOTIFICATION_ID) {
                i2 = getNotificationIconFriend();
            } else if (i == POOL_NEWMESSAGE_NOTIFICATION_ID) {
                i2 = getNotificationIconPool();
            } else if (i == ADJUST_TIME_ID) {
                i2 = getNotificationIconChat();
            }
            Notification notification = new Notification(i2, str2, System.currentTimeMillis());
            notification.setLatestEventInfo(this, str3, str4, activity);
            if (!z2) {
                notification.sound = null;
            } else if (i == POOL_NEWMESSAGE_NOTIFICATION_ID) {
                if (defaultSharedPreferences.getBoolean("enable_pool_ringtone", true)) {
                    notification.sound = Uri.parse(defaultSharedPreferences.getString(GROUP_RINGTONE, ""));
                }
            } else if (defaultSharedPreferences.getBoolean("enable_chat_ringtone", true)) {
                notification.sound = Uri.parse(defaultSharedPreferences.getString(CHAT_RINGTONE, ""));
            }
            Log.d(TAG, "Notfy New Message Sound=" + notification.sound);
            notification.ledARGB = SupportMenu.CATEGORY_MASK;
            notification.ledOnMS = CatfizMsgTypes.NICSUBTYPE_PUBLICANN;
            notification.ledOffMS = CatfizMsgTypes.NICSUBTYPE_PARTNER;
            notification.flags |= VIEW_TYPE_GROUP;
            if (z) {
                Log.d(TAG, "notifcount autocancel true:" + z);
                notification.flags |= 16;
            } else {
                Log.d(TAG, "notifcount autocancel false:" + z);
                notificationManager.cancel(CATFISH_NOTIFICATION_ID);
                if (i == NEWMESSAGE_NOTIFICATION_ID) {
                    notificationManager.cancel(i);
                } else if (i == POOL_NEWMESSAGE_NOTIFICATION_ID) {
                    notificationManager.cancel(i);
                }
            }
            i2 = THREAD_CH0;
            if (i == NEWMESSAGE_NOTIFICATION_ID) {
                if (defaultSharedPreferences.getBoolean(CHAT_VIBRATE, false)) {
                    vibrateNotif();
                }
                if (defaultSharedPreferences.getBoolean(CHAT_DIM, false)) {
                    Log.d(TAG, "dimscreen on ");
                    dimScreenOn();
                } else if (mDimScreenOnWakeLock.isHeld()) {
                    mDimScreenOnWakeLock.release();
                }
                i2 = defaultSharedPreferences.getInt("chatNotificationCount", THREAD_CH0);
                Log.d(TAG, "notifcount awal:" + i2);
                i2 += VIEW_TYPE_GROUP;
                defaultSharedPreferences.edit().putInt("chatNotificationCount", i2).commit();
                Log.d(TAG, "notifcount sekarang:" + i2);
                Log.d(TAG, "notifcount sekarang di pref:" + defaultSharedPreferences.getInt("chatNotificationCount", THREAD_CH0));
                Log.d(TAG, "notifcount sekarang di pref:" + defaultSharedPreferences.getInt("chatNotificationCount", THREAD_CH0));
                Log.d(TAG, "akhir");
            } else if (i == POOL_NEWMESSAGE_NOTIFICATION_ID) {
                if (defaultSharedPreferences.getBoolean(GROUP_VIBRATE, false)) {
                    vibrateNotif();
                }
                if (defaultSharedPreferences.getBoolean(GROUP_DIM, false)) {
                    dimScreenOn();
                } else if (mDimScreenOnWakeLock.isHeld()) {
                    mDimScreenOnWakeLock.release();
                }
                i2 = defaultSharedPreferences.getInt("poolNotificationCount", THREAD_CH0) + VIEW_TYPE_GROUP;
                defaultSharedPreferences.edit().putInt("poolNotificationCount", i2).commit();
            }
            if (i2 > VIEW_TYPE_GROUP && str.compareTo(CATFISH_ACTION_NEWTOPICRECEIVE) != 0) {
                charSequence = i2 + " " + str4;
            }
            notification.setLatestEventInfo(this, str3, charSequence, activity);
            notificationManager.notify(i, notification);
        }
    }

    private void oneHourTimer() {
        CatfishPreferences catfishPreferences = getCatfishPreferences();
        getResources();
        long j = catfishPreferences.getLong(ONEHOUR_LASTSETTIME, 0);
        long currentTimeMillis = System.currentTimeMillis();
        if (currentTimeMillis - j > 3600000) {
            catfishPreferences.edit().putLong(ONEHOUR_LASTSETTIME, currentTimeMillis).commit();
            Log.d(TAG, "Regular Hourly process...");
            loadOTAServerSettings();
            getProfilePhotoPendingList().executePendingByService(this);
        }
    }

    public static void pushSignalToGetConference() {
        if (mHandler_MainThread != null) {
            if (checkPointRadioState()) {
                Log.d(TAG, "*** RECEIVE SIGNAL TO GET CONFERENCE MESSAGE ***");
                mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.GET_MESSAGES_NOW.ordinal()));
                return;
            }
            mGetConferencePending += VIEW_TYPE_GROUP;
        }
    }

    public static void pushSignalToGetControlMessages() {
        if (mHandler_MainThread != null) {
            Log.d(TAG, "*** RECEIVE SIGNAL TO GET CONTROL MESSAGE ***");
            mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.GET_MESSAGES_NOW.ordinal()));
        }
    }

    public static void pushSignalToGetLowPrio() {
        if (mHandler_MainThread != null) {
            if (checkPointRadioState()) {
                Log.d(TAG, "*** RECEIVE SIGNAL TO GET LOWPRIO MESSAGE ***");
                mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.GET_MESSAGES_NOW.ordinal()));
                return;
            }
            mGetLowPrioPending += VIEW_TYPE_GROUP;
        }
    }

    public static void pushSignalToGetMessages() {
        if (mHandler_MainThread != null) {
            Log.d(TAG, "*** RECEIVE SIGNAL TO GET MESSAGE ***");
            mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.GET_MESSAGES_NOW.ordinal()));
        }
    }

    public static void pushSignalToGetStatusComment() {
        if (mHandler_MainThread != null) {
            if (!isAllowToGetStatusComment()) {
                Log.d(TAG, "**** GET STATUS COMMENT WAIT ****");
                scheduleFetchingTimer();
            } else if (checkPointRadioState()) {
                Log.d(TAG, "*** RECEIVE SIGNAL TO GET STATUS COMMENT MESSAGE ***");
                mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.GET_STATUS_COMMENT_NOW.ordinal()));
            } else {
                mGetStatusCommentPending += VIEW_TYPE_GROUP;
            }
        }
    }

    private synchronized void putRunnableToServiceScheduleList(IDropableRunnable iDropableRunnable, int i) {
        if (iDropableRunnable != null) {
            if (System.currentTimeMillis() - iDropableRunnable.getAge() > getMaxReschedulingAge()) {
                Log.d(TAG, "----PUT RUNNABLE IN SCHEDULE LIST REJECT: EXCEED MAX AGE----");
                iDropableRunnable.dropRunnable();
            } else {
                ArrayList arrayList;
                Log.d(TAG, "----PUT RUNNABLE IN SCHEDULE LIST: CHANNEL: " + String.valueOf(i) + " ----");
                switch (i) {
                    case THREAD_CH0 /*0*/:
                        arrayList = mRunnableList;
                        break;
                    case VIEW_TYPE_GROUP /*1*/:
                        arrayList = mRunnableList_Ch1;
                        break;
                    case VIEW_TYPE_CHAT /*2*/:
                        arrayList = mRunnableList_Ch2;
                        break;
                    default:
                        arrayList = null;
                        break;
                }
                iDropableRunnable.incraseScheduleNum();
                Object obj = arrayList.size() <= 0 ? VIEW_TYPE_GROUP : THREAD_CH0;
                try {
                    if (arrayList.size() > MAXIMUM_RUNNABLE_IN_LIST) {
                        Log.d("EXCEED_MAX", "----PUT RUNNABLE IN SCHEDULE LIST REACH MAXIMUM: DROP THE TOP OF LIST----");
                        IDropableRunnable iDropableRunnable2 = (IDropableRunnable) arrayList.get(THREAD_CH0);
                        if (iDropableRunnable2 != null) {
                            iDropableRunnable2.dropRunnable();
                        }
                        arrayList.remove(THREAD_CH0);
                    }
                    arrayList.add(iDropableRunnable);
                } catch (Exception e) {
                    e.printStackTrace();
                    iDropableRunnable.dropRunnable();
                }
                if (obj != null) {
                    Log.d(TAG, "----SCHEDULE RUNNABLE: START ALARM----");
                    scheduleRunnableQueueAlarm();
                }
            }
        }
    }

    public static void reStartPushChannel() {
        if (mPushExecutor != null && !mPushExecutor.restartPUSHChannel()) {
            activatePushChannel(0);
        }
    }

    private void registerScheduler() {
        CatfishPreferences catfishPreferences = getCatfishPreferences();
        Resources resources = getResources();
        long j = catfishPreferences.getLong(REGISTER_LASTSETTIME, 0);
        long currentTimeMillis = System.currentTimeMillis();
        if (currentTimeMillis - j > Long.parseLong(resources.getString(R.string.check_register_time)) && getUserPIN() != null) {
            catfishPreferences.edit().putLong(REGISTER_LASTSETTIME, currentTimeMillis).commit();
            CatfishMessageObject catfishMessageObject;
            if (catfishPreferences.contains(CATFISHID_USER_KEY)) {
                catfishMessageObject = new CatfishMessageObject();
                catfishMessageObject.userkey = catfishPreferences.getString(CATFISHID_USER_KEY, "0");
                postToServiceHandler(new PinManager(mServiceInstance, PinServiceOperation.REGISTER_PIN_DEVICEID, getDeviceId(), getUserPIN(), catfishMessageObject));
                return;
            }
            catfishMessageObject = new CatfishMessageObject();
            catfishMessageObject.username = getUserPIN();
            catfishMessageObject.password = getDeviceId();
            postToServiceHandler(new PinManager(mServiceInstance, PinServiceOperation.REGISTER_PIN_DEVICEID, getDeviceId(), getUserPIN(), catfishMessageObject));
        }
    }

    private void registeringBroadcastReceiver() {
        LocalBroadcastManager.getInstance(this).registerReceiver(this.mNextServerRequest, new IntentFilter(BroadcastIntents.ACTION_NEXT_SERVER_REQUEST));
        LocalBroadcastManager.getInstance(this).registerReceiver(this.mUploaderChatReceiver, new IntentFilter(BroadcastIntents.ACTION_UPLOAD_CHAT));
        LocalBroadcastManager.getInstance(this).registerReceiver(this.mUploaderPoolReceiver, new IntentFilter(BroadcastIntents.ACTION_UPLOAD_POOL));
        LocalBroadcastManager.getInstance(this).registerReceiver(this.mUploaderStatusReceiver, new IntentFilter(BroadcastIntents.ACTION_UPLOAD_STATUS));
        LocalBroadcastManager.getInstance(this).registerReceiver(this.mDownloaderPoolReceiver, new IntentFilter(BroadcastIntents.ACTION_DOWNLOAD_POOL));
        LocalBroadcastManager.getInstance(this).registerReceiver(this.mDownloaderStatusReceiver, new IntentFilter(BroadcastIntents.ACTION_DOWNLOAD_STATUS));
        LocalBroadcastManager.getInstance(this).registerReceiver(this.mUploaderFizzLink, new IntentFilter(BroadcastIntents.ACTION_UPLOAD_FIZZLINK));
        LocalBroadcastManager.getInstance(this).registerReceiver(this.mDownloaderFizzLink, new IntentFilter(BroadcastIntents.ACTION_DOWNLOAD_FIZZLINK));
        IntentFilter intentFilter = new IntentFilter(BroadcastIntents.ACTION_USER_ONTYPING);
        intentFilter.addAction(BroadcastIntents.ACTION_USER_ONTYPING_DONE);
        LocalBroadcastManager.getInstance(this).registerReceiver(this.mUserOnTyping, intentFilter);
    }

    public static synchronized void releaseGCLock() {
        synchronized (CatfishService.class) {
            mGCLock--;
            if (mGCLock < 0) {
                mGCLock = THREAD_CH0;
            }
        }
    }

    public static synchronized void releaseGetMessagesLock() {
        synchronized (CatfishService.class) {
            if (mServiceExecutorLockCount > 0) {
                mServiceExecutorLockCount--;
            }
        }
    }

    private void removeAllObsoleteOrDeprecated() {
        CatfishPreferences catfishPreferences = getCatfishPreferences();
        if (catfishPreferences.contains(FORCE_UPDATE)) {
            catfishPreferences.edit().remove(FORCE_UPDATE).commit();
        }
        if (catfishPreferences.contains(FORCE_UPDATE_COUNT)) {
            catfishPreferences.edit().remove(FORCE_UPDATE_COUNT).commit();
        }
        if (catfishPreferences.contains(FORCE_UPDATE_COUNT_LOCK)) {
            catfishPreferences.edit().remove(FORCE_UPDATE_COUNT_LOCK).commit();
        }
        if (catfishPreferences.contains("lastRegisterTimemilis")) {
            catfishPreferences.edit().remove("lastRegisterTimemilis").commit();
        }
    }

    public static void resetPushChannel() {
        if (mPushExecutor != null) {
            mPushExecutor.resetPUSHChannel();
            activatePushChannel(0);
        }
    }

    public static synchronized void resetStoredDrawable() {
        synchronized (CatfishService.class) {
            tempSvgDownload = null;
        }
    }

    public static void scheduleFetchingTimer() {
        if (mGetStatusCommentPending > 0) {
            mGetStatusCommentPending += VIEW_TYPE_GROUP;
            return;
        }
        mAM.cancel(mFetchingAlarm);
        if (mCommentStatusFetchTime != 0) {
            mAM.set(THREAD_CH0, System.currentTimeMillis() + mCommentStatusFetchTime, mFetchingAlarm);
            mGetStatusCommentPending += VIEW_TYPE_GROUP;
        }
    }

    private void scheduleGetMessages() {
        if (getDelayMillis() > 0) {
            acquirePartialWakeLock();
            mAM.cancel(mScheduledGetMessages);
            mAM.set(THREAD_CH0, System.currentTimeMillis() + getDelayMillis(), mScheduledGetMessages);
            releasePartialWakeLock();
        }
    }

    public static synchronized void schedulePushChannel() {
        synchronized (CatfishService.class) {
            mWakeLock.acquire();
            mAM.cancel(mPushAlarmWakeup);
            mAM.set(THREAD_CH0, System.currentTimeMillis() + getPushChannelDelay(), mPushAlarmWakeup);
            if (mWakeLock.isHeld()) {
                mWakeLock.release();
            }
        }
    }

    public static void scheduleRadioState() {
        if (mRadioStateScheduled <= 0) {
            mRadioStateScheduled += VIEW_TYPE_GROUP;
            Log.d(TAG, "Radio State Alarm is SET");
            mAM.set(THREAD_CH0, System.currentTimeMillis() + 20000, mRadioStateAlarm);
        }
    }

    private void scheduleRunnableQueueAlarm() {
        if (this.mRunnableQueueAlarmScheduled > 0) {
            Log.d(TAG, "Runnable Queue is scheduled to running");
            return;
        }
        Log.d(TAG, "Starting scheduling Runnable Queue");
        mAM.cancel(mSceduleServiceRunnable);
        mAM.set(THREAD_CH0, System.currentTimeMillis() + getDelayMillis(), mSceduleServiceRunnable);
        this.mRunnableQueueAlarmScheduled += VIEW_TYPE_GROUP;
    }

    private void setCatfishVersion() {
        try {
            mCatfizVersion = getPackageManager().getPackageInfo(getPackageName(), THREAD_CH0).versionCode;
        } catch (NameNotFoundException e) {
            Log.d(TAG, "Version not found");
            e.printStackTrace();
        }
    }

    public static void setCommentStatusFetchTime(long j) {
        Log.d(TAG, "SET FETCH TIME=" + j);
        mCommentStatusFetchTime = j;
    }

    public static void setRegistrationState(RegistrationState registrationState) {
        mCurrentRegistrationState = registrationState;
    }

    public static synchronized void setStoredDrawable(Drawable drawable) {
        synchronized (CatfishService.class) {
            tempSvgDownload = drawable;
        }
    }

    public static void signalFizzlinkDownload(Cursor cursor) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.FIZZLINKDOWNLOAD_SIGNAL.ordinal());
            obtainMessage.obj = cursor;
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public static void signalFizzlinkUpload(Cursor cursor) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.FIZZLINKUPLOAD_SIGNAL.ordinal());
            obtainMessage.obj = cursor;
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public static void signalHasOnTyping(String str, boolean z) {
        if (mHandler_MainThread != null) {
            Message obtainMessage;
            if (z) {
                Log.d(TAG, "signalHasOnTyping: SEND ON TYPING");
                obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.ONTYPING_DONE_SIGNAL.ordinal());
                obtainMessage.obj = str;
            } else {
                Log.d(TAG, "signalHasOnTyping: SEND ON TYPING DONE");
                obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.ONTYPING_SIGNAL.ordinal());
                obtainMessage.obj = str;
            }
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public static void signalToast(String str) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.TOAST_SIGNAL.ordinal());
            obtainMessage.obj = str;
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    private void startCatfizEngine() {
        if (!mIsStarted) {
            mIsStarted = true;
            scheduleGetMessages();
            scheduleHouseKeeping();
            initPUSHChannel();
            activatePushChannel();
            getMessagesNow();
            executePendingTask();
            Log.d(TAG, "Engine is Start safe and sound.");
        }
    }

    private void startServiceThread() {
        HandlerThread handlerThread = new HandlerThread("CatfishService_Thread", 10);
        handlerThread.start();
        this.mServiceLooper = handlerThread.getLooper();
        this.mServiceHandler = new Handler(this.mServiceLooper);
        handlerThread = new HandlerThread("CatfishService_Thread_CH1", THREAD_CH0);
        handlerThread.start();
        this.mServiceLooper_Ch1 = handlerThread.getLooper();
        this.mServiceHandler_Ch1 = new Handler(this.mServiceLooper_Ch1);
        handlerThread = new HandlerThread("CatfishService_Thread_CH2", 10);
        handlerThread.start();
        this.mServiceLooper_Ch2 = handlerThread.getLooper();
        this.mServiceHandler_Ch2 = new Handler(this.mServiceLooper_Ch2);
        handlerThread = new HandlerThread("CatfishService_DBThread", THREAD_CH0);
        handlerThread.start();
        this.mDatabaseLooper = handlerThread.getLooper();
        mDatabaseHandler = new Handler(this.mDatabaseLooper);
        handlerThread = new HandlerThread("CatfishService_LongMessageThread", 10);
        handlerThread.start();
        this.mLongMessageLooper = handlerThread.getLooper();
        mLongMessageHandler = new Handler(this.mLongMessageLooper);
        handlerThread = new HandlerThread("CatfishService_LocalStorageThread", 10);
        handlerThread.start();
        this.mLocalStorageLooper = handlerThread.getLooper();
        mLocalStorageHandler = new Handler(this.mLocalStorageLooper);
        this.mPushThread = new HandlerThread("CatfishService_PUSHThread", 10);
        this.mPushThread.start();
        this.mPushLooper = this.mPushThread.getLooper();
        mPushHandler = new Handler(this.mPushLooper);
    }

    private void storeDefaultIntents() {
        Intent intent = new Intent(CATFISH_ACTION_HASFRIENDREQUEST, null, this, getMainActivityClass());
        intent.setFlags(67108864);
        storeIntent(CATFISH_ACTION_HASFRIENDREQUEST, intent);
        intent = new Intent(CATFISH_ACTION_DISPLAYMAINUI, null, this, getMainActivityClass());
        intent.setFlags(67108864);
        storeIntent(CATFISH_ACTION_DISPLAYMAINUI, intent);
        intent = new Intent(CATFISH_ACTION_HASNEWFRIEND, null, this, getMainActivityClass());
        intent.setFlags(67108864);
        storeIntent(CATFISH_ACTION_HASNEWFRIEND, intent);
        intent = new Intent(CATFISH_ACTION_HASNEWMESSAGE, null, this, getMainActivityClass());
        intent.setFlags(67108864);
        storeIntent(CATFISH_ACTION_HASNEWMESSAGE, intent);
        Intent intent2 = new Intent(CATFISH_ACTION_HASNEWNICMESSAGE, null, this, getMainActivityClass());
        intent.setFlags(67108864);
        storeIntent(CATFISH_ACTION_HASNEWNICMESSAGE, intent2);
        intent2 = new Intent(CATFISH_ACTION_HASGROUP_DELETE, null, this, getMainActivityClass());
        intent.setFlags(67108864);
        storeIntent(CATFISH_ACTION_HASGROUP_DELETE, intent2);
        intent = new Intent(CATFISH_ACTION_ADJUST_TIME, null, this, getMainActivityClass());
        intent.setFlags(67108864);
        storeIntent(CATFISH_ACTION_ADJUST_TIME, intent);
        intent = new Intent(CATFISH_ACTION_NEWMESSAGEPOOLRECEIVE, null, this, getMainActivityClass());
        intent.setFlags(67108864);
        storeIntent(CATFISH_ACTION_NEWMESSAGEPOOLRECEIVE, intent);
        intent = new Intent(CATFISH_ACTION_NEWTOPICRECEIVE, null, this, getMainActivityClass());
        intent.setFlags(67108864);
        storeIntent(CATFISH_ACTION_NEWTOPICRECEIVE, intent);
        intent = new Intent(CATFISH_ACTION_NEWSERVERMESSAGERECEIVED, null, this, getMainActivityClass());
        intent.setFlags(67108864);
        storeIntent(CATFISH_ACTION_NEWSERVERMESSAGERECEIVED, intent);
        intent = new Intent(CATFISH_ACTION_POOLCOUNTNOTIF, null, this, getMainActivityClass());
        intent.setFlags(67108864);
        storeIntent(CATFISH_ACTION_POOLCOUNTNOTIF, intent);
    }

    private void vibrateNotif() {
        ((Vibrator) getSystemService("vibrator")).vibrate(new long[]{0, (long) 500, (long) CONNECTION_IN_MOBILE, (long) CONNECTION_IN_MOBILE, (long) CONNECTION_IN_MOBILE, (long) 500, (long) CONNECTION_IN_MOBILE, (long) CONNECTION_IN_MOBILE, (long) CatfizMsgTypes.NICSUBTYPE_PARTNER}, -1);
    }

    public void InstallApplication(String str, String str2, String str3) {
    }

    public void acquirePartialWakeLock() {
        mWakeLock.acquire();
    }

    public void allowProcessRunnableInService() {
        mAllowProcessRunnableInService = true;
    }

    public String applicationLabel(Context context, ApplicationInfo applicationInfo) {
        return context.getPackageManager().getApplicationLabel(applicationInfo).toString();
    }

    public void bindCallBackToAction(String str, ICatfishClientInterface iCatfishClientInterface) {
        if (mClientCallBacks == null) {
            mClientCallBacks = new HashMap();
        }
        mClientCallBacks.remove(str);
        mClientCallBacks.put(str, iCatfishClientInterface);
        Log.d(TAG, "client interface tag action bindCallBackToAction: " + iCatfishClientInterface.getTagAction());
    }

    public void blockProcessRunnableInService() {
        mAllowProcessRunnableInService = false;
    }

    public void cancelAllAlarm() {
        mWakeLock.acquire();
        mAM.cancel(mPushAlarmWakeup);
        mAM.cancel(mAlarmWakeup);
        mAM.cancel(mHouseKeepingAlarm);
        mAM.cancel(mScheduledGetMessages);
        cancelRunnableQueueAlarm();
        mAM.cancel(mP2PScheduledWakeup);
        mAllAlarmCanceled = true;
        if (mWakeLock.isHeld()) {
            mWakeLock.release();
        }
    }

    public void cancelNotification(int i) {
        ((NotificationManager) getSystemService("notification")).cancel(i);
    }

    public synchronized void cancelWaitP2PReceiver(long j) {
        if (this.mWaitingP2PReceivers.containsKey(String.valueOf(j))) {
            this.mWaitingP2PReceivers.remove(String.valueOf(j));
        }
    }

    public synchronized void cancelWaitP2PSender(long j) {
        if (this.mWaitingP2PSenders.containsKey(String.valueOf(j))) {
            this.mWaitingP2PSenders.remove(String.valueOf(j));
        }
    }

    public synchronized void dropAllP2PWaitingRunnable() {
        for (IP2PDropableRunnable dropRunnable : this.mWaitingP2PSenders.values()) {
            dropRunnable.dropRunnable();
        }
        for (IP2PDropableRunnable dropRunnable2 : this.mWaitingP2PReceivers.values()) {
            dropRunnable2.dropRunnable();
        }
        this.mWaitingP2PSenders.clear();
        this.mWaitingP2PReceivers.clear();
    }

    public synchronized void dropP2PIfTooLongWait() {
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        for (IP2PDropableRunnable iP2PDropableRunnable : this.mWaitingP2PSenders.values()) {
            long currentTimeMillis = System.currentTimeMillis() - iP2PDropableRunnable.getAge();
            String channelId = iP2PDropableRunnable.getChannelId();
            if (currentTimeMillis > p2prunnable_maxwait) {
                Log.d(TAG, "DROP P2P Sender" + channelId);
                arrayList.add(channelId);
                iP2PDropableRunnable.dropRunnable();
            } else if (currentTimeMillis > 20000) {
                Log.d(TAG, "Try to Wakeup P2P Sender");
                if (!iP2PDropableRunnable.isInDeepWait()) {
                    arrayList.add(channelId);
                    postRunnableToService((IDropableRunnable) iP2PDropableRunnable);
                }
            } else {
                continue;
            }
        }
        Iterator it = arrayList.iterator();
        while (it.hasNext()) {
            this.mWaitingP2PSenders.remove((String) it.next());
        }
        arrayList.clear();
        for (IP2PDropableRunnable iP2PDropableRunnable2 : this.mWaitingP2PReceivers.values()) {
            currentTimeMillis = System.currentTimeMillis() - iP2PDropableRunnable2.getAge();
            String channelId2 = iP2PDropableRunnable2.getChannelId();
            if (currentTimeMillis > p2prunnable_maxwait) {
                Log.d(TAG, "DROP P2P Receiver" + channelId2);
                arrayList2.add(channelId2);
                iP2PDropableRunnable2.dropRunnable();
            } else if (currentTimeMillis > 60000) {
                Log.d(TAG, "Try to Wakeup P2P Receiver");
                arrayList2.add(channelId2);
                postRunnableToService((IDropableRunnable) iP2PDropableRunnable2);
            }
        }
        Iterator it2 = arrayList2.iterator();
        while (it2.hasNext()) {
            this.mWaitingP2PReceivers.remove((String) it2.next());
        }
        arrayList2.clear();
        if (this.mWaitingP2PSenders.size() > 0 || this.mWaitingP2PReceivers.size() > 0) {
            scheduleP2PWakeup();
        }
    }

    public ArrayList getAdsList() {
        return this.mAdsList;
    }

    public List getApplicationList(Context context) {
        return context.getPackageManager().getInstalledApplications(THREAD_CH0);
    }

    public ICatfishClientInterface getCallBack(String str) {
        return mClientCallBacks == null ? null : (ICatfishClientInterface) mClientCallBacks.get(str);
    }

    public String getCatfishIDFromSecurePref() {
        String str = null;
        CatfishPreferences catfishPreferences = getCatfishPreferences();
        String string = catfishPreferences.getString(CATFISHID_PREF, str);
        catfishPreferences.getString(CATFISHLONGPIN_PREF, str);
        boolean z = catfishPreferences.getBoolean(CATFISHID_SEC_PREF, false);
        if (string != null && z) {
            try {
                str = SimpleCrypto.decrypt(getPinKey(mPK), string);
            } catch (Exception e) {
            }
        }
        return str;
    }

    public synchronized String getDeviceId() {
        return mUniqeCFID1;
    }

    public void getMessagesNow() {
        acquirePartialWakeLock();
        if (getMessagesLockValue() > 0) {
            Log.d(TAG, "GETMESSAGENOW: Executor is Running: IGNORE");
            return;
        }
        acquireGetMessagesLock();
        IDropableRunnable catfishServiceExecutor = new CatfishServiceExecutor(this, getCurrentServerHost(), getUserPIN());
        catfishServiceExecutor.setRestAPI(getRestAPI(THREAD_CH0));
        if (this.mServiceHandler.post((Runnable) catfishServiceExecutor)) {
            Log.d(TAG, "GETMESSAGENOW: Run Executor !!!");
            releasePartialWakeLock();
            return;
        }
        Log.d(TAG, "GETMESSAGENOW: FAIL TO Run Executor !!!");
        releaseGetMessagesLock();
    }

    public ArrayList getNotificationMsgList() {
        return notificationMsg;
    }

    public ArrayList getNotificationNameList() {
        return checkedName;
    }

    public ArrayList getPoolNotificationMsgList() {
        return poolNotificationMsg;
    }

    public ArrayList getPoolNotificationNameList() {
        return poolCheckedName;
    }

    public synchronized ProfilePhotoPendingList getProfilePhotoPendingList() {
        if (mProfilePhotoPendingList == null) {
            initializeProfilePhotoPendingList();
        }
        return mProfilePhotoPendingList;
    }

    public synchronized String[][] getSvgArray() {
        return this.svgCode;
    }

    public synchronized String getUinqueKey1() {
        return mUniqeCFIDKey1;
    }

    public synchronized String getUinqueKey2() {
        return mUniqeCFIDKey2;
    }

    public synchronized IP2PDropableRunnable getWaitP2PReceiver(long j) {
        IP2PDropableRunnable iP2PDropableRunnable;
        iP2PDropableRunnable = (IP2PDropableRunnable) this.mWaitingP2PReceivers.get(String.valueOf(j));
        if (iP2PDropableRunnable != null) {
            this.mWaitingP2PReceivers.remove(String.valueOf(j));
            if (System.currentTimeMillis() - iP2PDropableRunnable.getAge() > p2prunnable_maxwait) {
                iP2PDropableRunnable.dropRunnable();
                iP2PDropableRunnable = null;
            }
        }
        return iP2PDropableRunnable;
    }

    public synchronized IP2PDropableRunnable getWaitP2PSender(long j) {
        IP2PDropableRunnable iP2PDropableRunnable;
        iP2PDropableRunnable = (IP2PDropableRunnable) this.mWaitingP2PSenders.get(String.valueOf(j));
        if (iP2PDropableRunnable != null) {
            this.mWaitingP2PSenders.remove(String.valueOf(j));
            if (System.currentTimeMillis() - iP2PDropableRunnable.getAge() > p2prunnable_maxwait) {
                iP2PDropableRunnable.dropRunnable();
                iP2PDropableRunnable = null;
            }
        }
        return iP2PDropableRunnable;
    }

    public void handleNotification(Intent intent) {
        int intExtra = intent.getIntExtra(AlbusModelObject.NOTIFICATION_ID, THREAD_CH0);
        if (intExtra != 0) {
            ((NotificationManager) getSystemService("notification")).cancel(intExtra);
        }
    }

    public boolean inSvcDBThread() {
        return Looper.myLooper() == this.mDatabaseLooper;
    }

    public void initializeCatfishPreference() {
    }

    public void instalUpdate(String str, String str2, String str3) {
    }

    public void notifyInstallFail() {
    }

    public IBinder onBind(Intent intent) {
        Log.d(TAG, "---onBind: Intent: " + intent.getAction() + " ---");
        if (intent.getAction().compareTo(CATFISH_UISERVICE) == 0) {
            return new CatfishUIBinder(this);
        }
        Log.d(TAG, "---onBind: Intent: " + intent.getAction() + " NOT ALLOWED ---");
        return null;
    }

    public void onCreate() {
        Thread.setDefaultUncaughtExceptionHandler(new CatfishUncaughtExceptionHandler());
        Log.d(TAG, "--- ON CREATE ----");
        if (catfish_hostname == null || catfish_push_hostname == null) {
            Log.e(TAG, "FATAL OS seem has seroius bug. APPEXIT");
            System.exit(THREAD_CH0);
            return;
        }
        mServiceInstance = this;
        initInternalResourcesSettings();
        CatfishPhotoStorage.startWatchingPhotoStorage(getApplicationContext());
        setCatfishVersion();
        initThreadHandlers();
        startServiceThread();
        registeringBroadcastReceiver();
        buildUniqueIDKeyInfo();
        loadOTAServerSettings();
        initializeProfilePhotoPendingList();
        initOSSystemService();
        initOSSIntents();
        storeDefaultIntents();
        initSecurPreferences();
        if (getCatfishVersion() <= 470) {
            removeAllObsoleteOrDeprecated();
            FifDataStorage fifDataStorage = new FifDataStorage(this);
        }
        checkIDAndRegisteringStatus();
        if (isEngineAllowToStart()) {
            startCatfizEngine();
        }
        isCatfishServiceInitialized = true;
        Log.d(TAG, "--- ON CREATE: DONE ----");
    }

    public void onDestroy() {
        Log.d(TAG, "--- ON DESTROY  ---");
        LocalBroadcastManager.getInstance(this).unregisterReceiver(this.mNextServerRequest);
        LocalBroadcastManager.getInstance(this).unregisterReceiver(this.mUploaderFizzLink);
        LocalBroadcastManager.getInstance(this).unregisterReceiver(this.mUploaderChatReceiver);
        LocalBroadcastManager.getInstance(this).unregisterReceiver(this.mUploaderPoolReceiver);
        LocalBroadcastManager.getInstance(this).unregisterReceiver(this.mUploaderStatusReceiver);
        LocalBroadcastManager.getInstance(this).unregisterReceiver(this.mDownloaderPoolReceiver);
        LocalBroadcastManager.getInstance(this).unregisterReceiver(this.mDownloaderStatusReceiver);
        if (this.mUserOnTyping != null) {
            LocalBroadcastManager.getInstance(this).unregisterReceiver(this.mUserOnTyping);
            this.mUserOnTyping = null;
        }
        cancelAllAlarm();
        releaseAllLocks();
        while (mWakeLock.isHeld()) {
            mWakeLock.release();
        }
        this.mServiceLooper.quit();
        this.mServiceLooper = null;
        this.mServiceHandler = null;
        this.mServiceLooper_Ch1.quit();
        this.mServiceLooper_Ch1 = null;
        this.mServiceHandler_Ch1 = null;
        this.mServiceLooper_Ch2.quit();
        this.mServiceLooper_Ch2 = null;
        this.mServiceHandler_Ch2 = null;
        this.mDatabaseLooper.quit();
        this.mDatabaseLooper = null;
        mDatabaseHandler = null;
        this.mLongMessageLooper.quit();
        this.mLongMessageLooper = null;
        mLongMessageHandler = null;
        this.mLocalStorageLooper.quit();
        this.mLocalStorageLooper = null;
        mLocalStorageHandler = null;
        this.mPushThread.quit();
        this.mPushThread = null;
        this.mPushLooper = null;
        mPushHandler = null;
        if (mClientCallBacks != null) {
            mClientCallBacks.clear();
        }
        mClientCallBacks = null;
        mHandler_MainThread = null;
        mProgressbar_MainThread = null;
        mConnMan = null;
        mNM = null;
        mAM = null;
        mPWR = null;
        mWifiMan = null;
        mPushExecutor = null;
        mWakeLock = null;
        mDimScreenOnWakeLock = null;
        mWifiLock = null;
        if (mIntentStorage != null) {
            mIntentStorage.clear();
        }
        mIntentStorage = null;
        ((NotificationManager) getSystemService("notification")).cancel(CATFISH_NOTIFICATION_ID);
        CatfishPhotoStorage.stopWatchingPhotoStorage(getApplicationContext());
        mAlarmWakeup = null;
        mPushAlarmWakeup = null;
        mHouseKeepingAlarm = null;
        mScheduledGetMessages = null;
        mSceduleServiceRunnable = null;
        mDimScreenOffAlarm = null;
        mP2PScheduledWakeup = null;
        mRadioStateAlarm = null;
        mFetchingAlarm = null;
        mShorRecurrent = null;
        if (RESTAPI_CH0 != null) {
            RESTAPI_CH0.shutdownConnectionManager();
        }
        RESTAPI_CH0 = null;
        if (RESTAPI_CH1 != null) {
            RESTAPI_CH1.shutdownConnectionManager();
        }
        RESTAPI_CH1 = null;
        if (RESTAPI_CH2 != null) {
            RESTAPI_CH2.shutdownConnectionManager();
        }
        RESTAPI_CH2 = null;
        dropAllP2PWaitingRunnable();
        mRunnableList.clear();
        mCatfishPreference = null;
        mIsStarted = false;
        catfish_hostname = null;
        catfish_port = null;
        catfish_last_hostname = null;
        catfish_last_port = null;
        catfish_push_hostname = null;
        catfish_push_port = null;
        catfish_last_push_hostname = null;
        catfish_last_push_port = null;
        if (notificationMsg != null) {
            notificationMsg.clear();
        }
        notificationMsg = null;
        if (checkedName != null) {
            checkedName.clear();
        }
        checkedName = null;
        if (poolNotificationMsg != null) {
            poolNotificationMsg.clear();
        }
        poolNotificationMsg = null;
        if (poolCheckedName != null) {
            poolCheckedName.clear();
        }
        poolCheckedName = null;
        catfish_unique_id = null;
        catfish_longpin = null;
        mResources = null;
        repoUpdate = null;
        repoServer = null;
        this.svgCode = (String[][]) null;
        if (this.themesList != null) {
            this.themesList.clear();
        }
        this.themesList = null;
        if (mMapProgress != null) {
            mMapProgress.clear();
        }
        mMapProgress = null;
        if (mMapState != null) {
            mMapState.clear();
        }
        mMapState = null;
        if (mIntentStorage != null) {
            mIntentStorage.clear();
        }
        mIntentStorage = null;
        if (mContactSelection != null) {
            mContactSelection.clear();
        }
        mContactSelection = null;
        if (mFriendOnTypingList != null) {
            mFriendOnTypingList.clear();
        }
        mFriendOnTypingList = null;
        mServiceInstance = null;
        Log.d(TAG, "--- ON DESTROY DONE  ---");
        System.exit(THREAD_CH0);
    }

    public void onRebind(Intent intent) {
        Log.d(TAG, "---onRebind ---");
    }

    public int onStartCommand(Intent intent, int i, int i2) {
        if (this.cancelStart) {
            Log.d(TAG, "---onStartCommand: Service is Canceling---");
        } else if (isEngineAllowToStart()) {
            if (!isEngineStarted()) {
                Log.d(TAG, "---onStartCommand: Engine is not started. Start now!!!");
                startCatfizEngine();
            }
            if (!networkStatusCheck()) {
                Log.d(TAG, "---onStartCommand: Network is not available---");
            } else if (intent == null) {
                Log.d(TAG, "---onStartCommand: Service is Restarting---");
            } else {
                String action = intent.getAction();
                if (action == null) {
                    Log.d(TAG, "---onStartCommand: NULL Action -> Service is Restarting---");
                } else {
                    Log.d(TAG, "---onStartCommand --> Service Start: " + action + "---");
                    if (action.compareTo(CATFISH_CLIENTSERVICE) == 0) {
                        ((NotificationManager) getSystemService("notification")).cancel(CATFISH_NOTIFICATION_ID);
                    } else if (action.compareTo(CATFISH_ALARM_WAKEUP) == 0) {
                        switch (mConnectionState) {
                            case CONNECTION_IN_WIFI /*100*/:
                                if (!mWifiLock.isHeld()) {
                                    mWifiLock.acquire();
                                    break;
                                }
                                break;
                            case CONNECTION_IN_MOBILE /*200*/:
                                if (!mWakeLock.isHeld()) {
                                    mWakeLock.acquire();
                                    break;
                                }
                                break;
                        }
                        r0 = mConnMan.getActiveNetworkInfo();
                        if (r0 == null) {
                            releaseAllLocks();
                        } else if (r0.isConnected()) {
                            getMessagesNow();
                        } else {
                            scheduleWakeupAlarm();
                            releaseAllLocks();
                        }
                    } else if (action.compareTo(CATFISH_PUSHALARM_WAKEUP) == 0) {
                        switch (mConnectionState) {
                            case CONNECTION_IN_WIFI /*100*/:
                                if (!mWifiLock.isHeld()) {
                                    mWifiLock.acquire();
                                    break;
                                }
                                break;
                            case CONNECTION_IN_MOBILE /*200*/:
                                if (!mWakeLock.isHeld()) {
                                    mWakeLock.acquire();
                                    break;
                                }
                                break;
                        }
                        r0 = mConnMan.getActiveNetworkInfo();
                        if (r0 == null) {
                            releaseAllLocks();
                        } else if (r0.isConnected()) {
                            activatePushChannel();
                        } else {
                            schedulePushChannel();
                            releaseAllLocks();
                        }
                    } else if (action.compareTo(CATFISH_P2PSCHEDULED_WAKEUP) == 0) {
                        Log.d(TAG, "---P2P WAKE UP: Check and Drop p2p pending works ---");
                        dropP2PIfTooLongWait();
                    } else if (action.compareTo(CATFISH_NETWORK_WIFI_WAKEUP) == 0) {
                        if (!mWifiLock.isHeld()) {
                            mWifiLock.acquire();
                        }
                        while (mWakeLock.isHeld()) {
                            mWakeLock.release();
                        }
                        mConnectionState = CONNECTION_IN_WIFI;
                        cancelAllAlarm();
                        allowProcessRunnableInService();
                        reStartPushChannel();
                        scheduleWakeupAlarm();
                        scheduleRunnableQueueAlarm();
                        scheduleHouseKeeping();
                        scheduleP2PWakeup();
                    } else if (action.compareTo(CATFISH_NETWORK_MOBILE_WAKEUP) == 0) {
                        if (!mWakeLock.isHeld()) {
                            mWakeLock.acquire();
                        }
                        while (mWifiLock.isHeld()) {
                            mWifiLock.release();
                        }
                        mConnectionState = CONNECTION_IN_MOBILE;
                        cancelAllAlarm();
                        allowProcessRunnableInService();
                        reStartPushChannel();
                        scheduleWakeupAlarm();
                        scheduleRunnableQueueAlarm();
                        scheduleHouseKeeping();
                        scheduleP2PWakeup();
                    } else if (action.compareTo(CATFISH_NO_NETWORK) == 0) {
                        blockProcessRunnableInService();
                        cancelAllAlarm();
                        mPushExecutor.abortPUSHChannel();
                        releaseAllLocks();
                    } else if (action.compareTo(CATFISH_NO_CONNECTED_NETWORK) == 0) {
                        blockProcessRunnableInService();
                        cancelAllAlarm();
                        mPushExecutor.abortPUSHChannel();
                        releaseAllLocks();
                    } else if (action.compareTo(CATFISH_HOUSEKEEPING) == 0) {
                        Log.d(TAG, "----HOUSE KEEPING !!!----");
                        Log.d(TAG, "----HOUSE KEEPING: NETWORK CHECKING");
                        if (mConnMan.getActiveNetworkInfo() == null) {
                            cancelAllAlarm();
                            mPushExecutor.abortPUSHChannel();
                            releaseAllLocks();
                        } else {
                            if (!CatfishServiceConnState.isPushExecutorRunning()) {
                                resetPushChannel();
                            }
                            postRunnableToService(new CheckUserProfileExecutor(this));
                            Log.d(TAG, "----HOUSE KEEPING: TIMER CHECKING");
                            oneDayTimer();
                            oneHourTimer();
                            Log.d(TAG, "----HOUSE KEEPING: ACTIVITY CHECKING");
                            decreaseCountActivity();
                            Log.d(TAG, "----HOUSE KEEPING: REGULAR CLEANINGUP");
                            mFriendOnTypingList.clear();
                            if (mGCLock == 0) {
                                System.gc();
                            }
                        }
                    } else if (action.compareTo(CATFISH_SCHEDULED_GETMESSAGES) == 0) {
                        if (networkStatusCheck()) {
                            getMessagesNow();
                        }
                    } else if (action.compareTo(CATFISH_SCHEDULED_SVCRUNNABLE) == 0) {
                        handleRunnableQueue();
                        if (networkStatusCheck()) {
                            Log.d(TAG, "----PROCESS SERVICE SCHEDULED RUNNABLE----");
                            processRunnableInService(THREAD_CH0);
                            processRunnableInService(VIEW_TYPE_GROUP);
                            processRunnableInService(VIEW_TYPE_CHAT);
                            reCheckRunnableInService();
                        }
                    } else if (action.compareTo(CATFISH_DIMSCREENOFF_ALARM) == 0) {
                        if (mDimScreenOnWakeLock.isHeld()) {
                            mDimScreenOnWakeLock.release();
                        }
                    } else if (action.compareTo(CATFISH_RADIOSTATE_WAKEUP) == 0) {
                        Log.d(TAG, "---- RADIO STATE ----");
                        cancelRadioState();
                        if (networkStatusCheck()) {
                            if (mGetStatusCommentPending > 0) {
                                pushSignalToGetStatusComment();
                            }
                            mGetStatusCommentPending = THREAD_CH0;
                            if (mGetConferencePending > 0) {
                                pushSignalToGetConference();
                            }
                            mGetConferencePending = THREAD_CH0;
                            if (mGetLowPrioPending > 0) {
                                pushSignalToGetLowPrio();
                            }
                            mGetLowPrioPending = THREAD_CH0;
                        }
                    } else if (action.compareTo(CATFISH_FETCHING_ALARM) == 0) {
                        Log.d(TAG, "---- FETCHING ----");
                        if (networkStatusCheck()) {
                            if (mGetStatusCommentPending > 0) {
                                pushSignalToGetStatusComment();
                            }
                            mGetStatusCommentPending = THREAD_CH0;
                            scheduleFetchingTimer();
                        }
                    } else if (action.compareTo(CATFISH_SHORT_RECURRENT) == 0) {
                        Log.d(TAG, "---- SHORT RECURRENT ----");
                        if (mFriendOnTypingList != null) {
                            mFriendOnTypingList.clear();
                        }
                    }
                }
            }
        } else {
            Log.d(TAG, "---onStartCommand: Engine not allowed to start ---");
        }
        return VIEW_TYPE_GROUP;
    }

    public boolean onUnbind(Intent intent) {
        Log.d(TAG, "---onUnbind ---");
        if (intent.getAction().compareTo(CATFISH_UISERVICE) == 0) {
        }
        return false;
    }

    public void oneDayTimer() {
        CatfishPreferences catfishPreferences = getCatfishPreferences();
        Resources resources = getResources();
        long j = catfishPreferences.getLong(ONEDAY_LASTSETTIME, 0);
        long currentTimeMillis = System.currentTimeMillis();
        long parseLong = Long.parseLong(resources.getString(R.string.chat_delete_time));
        Log.d(TAG, "one day timer");
        if (currentTimeMillis - j > parseLong) {
            Log.e(TAG, "one day timer - executed");
            catfishPreferences.edit().putLong(ONEDAY_LASTSETTIME, currentTimeMillis).commit();
            postToDBHandler(new DBAndFilesCleanup(CONNECTION_IN_WIFI));
        }
    }

    public void postDelayedToLocalStorageWorker(Runnable runnable, long j) {
        if (runnable == null) {
            Log.e(TAG, "---NULL RUNNABLE---");
        } else if (mLocalStorageHandler == null) {
            Log.e(TAG, "---NULL mLocalStorageWorker---");
        } else {
            mLocalStorageHandler.postDelayed(runnable, j);
        }
    }

    public void postHighPrioToDBHandler(Runnable runnable) {
        mDatabaseHandler.removeCallbacks(runnable);
        mDatabaseHandler.postAtFrontOfQueue(runnable);
    }

    public void postRunnableToDbThread(Runnable runnable) {
        if (runnable == null) {
            Log.e(TAG, "---NULL RUNNABLE---");
        }
        if (mDatabaseHandler == null) {
            Log.e(TAG, "---NULL mDatabaseHandler---");
        }
        mDatabaseHandler.removeCallbacks(runnable);
        mDatabaseHandler.post(runnable);
    }

    public void postRunnableToLongMessageThread(Runnable runnable) {
        Log.d(TAG, "*** postRunnableToLongMessageThread ***");
        if (runnable == null) {
            Log.e(TAG, "---NULL RUNNABLE---");
        } else if (mLongMessageHandler == null) {
            Log.e(TAG, "---NULL mLongMessageHandler---");
        } else {
            mLongMessageHandler.post(runnable);
        }
    }

    public void postRunnableToService(IDropableRunnable iDropableRunnable) {
        postRunnableToService(iDropableRunnable, THREAD_CH0);
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void postRunnableToService(com.catfiz.service.IDropableRunnable r4, int r5) {
        /*
        r3 = this;
        r1 = "CatfishService";
        r2 = "*** postRunnableToService: CHECK ***";
        com.catfiz.util.Log.d(r1, r2);
        r3.processRunnableInService(r5);
        r1 = getRestAPI(r5);
        r4.setRestAPI(r1);
        switch(r5) {
            case 0: goto L_0x001f;
            case 1: goto L_0x0050;
            case 2: goto L_0x0071;
            default: goto L_0x0014;
        };
    L_0x0014:
        r1 = "CatfishService";
        r2 = "*** postRunnableToService: RE-CHECK ***";
        com.catfiz.util.Log.d(r1, r2);
        r3.processRunnableInService(r5);
        return;
    L_0x001f:
        r2 = r3.mServiceHandler;	 Catch:{ Exception -> 0x0040 }
        r0 = r4;
        r0 = (java.lang.Runnable) r0;	 Catch:{ Exception -> 0x0040 }
        r1 = r0;
        r2.removeCallbacks(r1);	 Catch:{ Exception -> 0x0040 }
        r2 = r3.mServiceHandler;	 Catch:{ Exception -> 0x0040 }
        r0 = r4;
        r0 = (java.lang.Runnable) r0;	 Catch:{ Exception -> 0x0040 }
        r1 = r0;
        r1 = r2.post(r1);	 Catch:{ Exception -> 0x0040 }
        if (r1 != 0) goto L_0x0014;
    L_0x0034:
        r1 = "CatfishService";
        r2 = "----FAIL TO POST RUNNABLE: PUT IN SCHEDULE LIST CH0---- ";
        com.catfiz.util.Log.d(r1, r2);	 Catch:{ Exception -> 0x0040 }
        r1 = 0;
        r3.putRunnableToServiceScheduleList(r4, r1);	 Catch:{ Exception -> 0x0040 }
        goto L_0x0014;
    L_0x0040:
        r1 = move-exception;
        r1 = "CatfishService";
        r2 = "Error when put runnable to service handler: DROP";
        com.catfiz.util.Log.e(r1, r2);
        if (r4 == 0) goto L_0x0014;
    L_0x004a:
        r4.dropRunnable();	 Catch:{ Exception -> 0x004e }
        goto L_0x0014;
    L_0x004e:
        r1 = move-exception;
        goto L_0x0014;
    L_0x0050:
        r2 = r3.mServiceHandler_Ch1;	 Catch:{ Exception -> 0x0040 }
        r0 = r4;
        r0 = (java.lang.Runnable) r0;	 Catch:{ Exception -> 0x0040 }
        r1 = r0;
        r2.removeCallbacks(r1);	 Catch:{ Exception -> 0x0040 }
        r2 = r3.mServiceHandler_Ch1;	 Catch:{ Exception -> 0x0040 }
        r0 = r4;
        r0 = (java.lang.Runnable) r0;	 Catch:{ Exception -> 0x0040 }
        r1 = r0;
        r1 = r2.post(r1);	 Catch:{ Exception -> 0x0040 }
        if (r1 != 0) goto L_0x0014;
    L_0x0065:
        r1 = "CatfishService";
        r2 = "----FAIL TO POST RUNNABLE: PUT IN SCHEDULE LIST CH1---- ";
        com.catfiz.util.Log.d(r1, r2);	 Catch:{ Exception -> 0x0040 }
        r1 = 1;
        r3.putRunnableToServiceScheduleList(r4, r1);	 Catch:{ Exception -> 0x0040 }
        goto L_0x0014;
    L_0x0071:
        r2 = r3.mServiceHandler_Ch2;	 Catch:{ Exception -> 0x0040 }
        r0 = r4;
        r0 = (java.lang.Runnable) r0;	 Catch:{ Exception -> 0x0040 }
        r1 = r0;
        r2.removeCallbacks(r1);	 Catch:{ Exception -> 0x0040 }
        r2 = r3.mServiceHandler_Ch2;	 Catch:{ Exception -> 0x0040 }
        r0 = r4;
        r0 = (java.lang.Runnable) r0;	 Catch:{ Exception -> 0x0040 }
        r1 = r0;
        r1 = r2.post(r1);	 Catch:{ Exception -> 0x0040 }
        if (r1 != 0) goto L_0x0014;
    L_0x0086:
        r1 = "CatfishService";
        r2 = "----FAIL TO POST RUNNABLE: PUT IN SCHEDULE LIST CH2---- ";
        com.catfiz.util.Log.d(r1, r2);	 Catch:{ Exception -> 0x0040 }
        r1 = 2;
        r3.putRunnableToServiceScheduleList(r4, r1);	 Catch:{ Exception -> 0x0040 }
        goto L_0x0014;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.catfiz.service.CatfishService.postRunnableToService(com.catfiz.service.IDropableRunnable, int):void");
    }

    public boolean postToDBHandler(Runnable runnable) {
        mDatabaseHandler.removeCallbacks(runnable);
        return mDatabaseHandler.post(runnable);
    }

    public void postToLocalStorageWorker(Runnable runnable) {
        if (runnable == null) {
            Log.e(TAG, "---NULL RUNNABLE---");
        } else if (mLocalStorageHandler == null) {
            Log.e(TAG, "---NULL mLocalStorageWorker---");
        } else {
            mLocalStorageHandler.post(runnable);
        }
    }

    public void postToLongMessageHandler(Runnable runnable) {
        Log.d(TAG, "*** postToLongMessageHandler ***");
        if (runnable == null) {
            Log.e(TAG, "---NULL RUNNABLE---");
        } else if (mLongMessageHandler == null) {
            Log.e(TAG, "---NULL mLongMessageHandler---");
        } else {
            mLongMessageHandler.post(runnable);
        }
    }

    public void postToMainHandler(Runnable runnable) {
        if (mHandler_MainThread != null) {
            mHandler_MainThread.removeCallbacks(runnable);
            mHandler_MainThread.post(runnable);
        }
    }

    public void postToServiceHandler(IDropableRunnable iDropableRunnable) {
        postToServiceHandler(iDropableRunnable, THREAD_CH0);
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void postToServiceHandler(com.catfiz.service.IDropableRunnable r4, int r5) {
        /*
        r3 = this;
        r1 = "CatfishService";
        r2 = "*** postToServiceHandler: CHECK ***";
        com.catfiz.util.Log.d(r1, r2);
        r3.processRunnableInService(r5);
        r1 = getRestAPI(r5);
        r4.setRestAPI(r1);
        switch(r5) {
            case 0: goto L_0x001f;
            case 1: goto L_0x0050;
            case 2: goto L_0x0071;
            default: goto L_0x0014;
        };
    L_0x0014:
        r1 = "CatfishService";
        r2 = "*** postToServiceHandler: RE-CHECK ***";
        com.catfiz.util.Log.d(r1, r2);
        r3.processRunnableInService(r5);
        return;
    L_0x001f:
        r2 = r3.mServiceHandler;	 Catch:{ Exception -> 0x0040 }
        r0 = r4;
        r0 = (java.lang.Runnable) r0;	 Catch:{ Exception -> 0x0040 }
        r1 = r0;
        r2.removeCallbacks(r1);	 Catch:{ Exception -> 0x0040 }
        r2 = r3.mServiceHandler;	 Catch:{ Exception -> 0x0040 }
        r0 = r4;
        r0 = (java.lang.Runnable) r0;	 Catch:{ Exception -> 0x0040 }
        r1 = r0;
        r1 = r2.post(r1);	 Catch:{ Exception -> 0x0040 }
        if (r1 != 0) goto L_0x0014;
    L_0x0034:
        r1 = "CatfishService";
        r2 = "----FAIL TO POST RUNNABLE: PUT IN SCHEDULE LIST---- ";
        com.catfiz.util.Log.d(r1, r2);	 Catch:{ Exception -> 0x0040 }
        r1 = 0;
        r3.putRunnableToServiceScheduleList(r4, r1);	 Catch:{ Exception -> 0x0040 }
        goto L_0x0014;
    L_0x0040:
        r1 = move-exception;
        r1 = "CatfishService";
        r2 = "Error when put runnable to Channel 2 service: DROP";
        com.catfiz.util.Log.d(r1, r2);
        if (r4 == 0) goto L_0x0014;
    L_0x004a:
        r4.dropRunnable();	 Catch:{ Exception -> 0x004e }
        goto L_0x0014;
    L_0x004e:
        r1 = move-exception;
        goto L_0x0014;
    L_0x0050:
        r2 = r3.mServiceHandler_Ch1;	 Catch:{ Exception -> 0x0040 }
        r0 = r4;
        r0 = (java.lang.Runnable) r0;	 Catch:{ Exception -> 0x0040 }
        r1 = r0;
        r2.removeCallbacks(r1);	 Catch:{ Exception -> 0x0040 }
        r2 = r3.mServiceHandler_Ch1;	 Catch:{ Exception -> 0x0040 }
        r0 = r4;
        r0 = (java.lang.Runnable) r0;	 Catch:{ Exception -> 0x0040 }
        r1 = r0;
        r1 = r2.post(r1);	 Catch:{ Exception -> 0x0040 }
        if (r1 != 0) goto L_0x0014;
    L_0x0065:
        r1 = "CatfishService";
        r2 = "----FAIL TO POST RUNNABLE: PUT IN SCHEDULE LIST---- ";
        com.catfiz.util.Log.d(r1, r2);	 Catch:{ Exception -> 0x0040 }
        r1 = 1;
        r3.putRunnableToServiceScheduleList(r4, r1);	 Catch:{ Exception -> 0x0040 }
        goto L_0x0014;
    L_0x0071:
        r2 = r3.mServiceHandler_Ch2;	 Catch:{ Exception -> 0x0040 }
        r0 = r4;
        r0 = (java.lang.Runnable) r0;	 Catch:{ Exception -> 0x0040 }
        r1 = r0;
        r2.removeCallbacks(r1);	 Catch:{ Exception -> 0x0040 }
        r2 = r3.mServiceHandler_Ch2;	 Catch:{ Exception -> 0x0040 }
        r0 = r4;
        r0 = (java.lang.Runnable) r0;	 Catch:{ Exception -> 0x0040 }
        r1 = r0;
        r1 = r2.post(r1);	 Catch:{ Exception -> 0x0040 }
        if (r1 != 0) goto L_0x0014;
    L_0x0086:
        r1 = "CatfishService";
        r2 = "----FAIL TO POST RUNNABLE: PUT IN SCHEDULE LIST---- ";
        com.catfiz.util.Log.d(r1, r2);	 Catch:{ Exception -> 0x0040 }
        r1 = 2;
        r3.putRunnableToServiceScheduleList(r4, r1);	 Catch:{ Exception -> 0x0040 }
        goto L_0x0014;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.catfiz.service.CatfishService.postToServiceHandler(com.catfiz.service.IDropableRunnable, int):void");
    }

    public synchronized void prepareSvgCodeArray(String[][] strArr) {
        this.svgCode = strArr;
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public synchronized void processRunnableInService(int r13) {
        /*
        r12 = this;
        r2 = 0;
        monitor-enter(r12);
        r3 = mAllowProcessRunnableInService;	 Catch:{ all -> 0x0022 }
        if (r3 != 0) goto L_0x000f;
    L_0x0006:
        r2 = "CatfishService";
        r3 = "----PROCESS RUNNABLE: NOT ALLOW TO RUN: WAIT...----";
        com.catfiz.util.Log.d(r2, r3);	 Catch:{ all -> 0x0022 }
    L_0x000d:
        monitor-exit(r12);
        return;
    L_0x000f:
        r3 = 0;
        switch(r13) {
            case 0: goto L_0x0025;
            case 1: goto L_0x0029;
            case 2: goto L_0x002d;
            default: goto L_0x0013;
        };
    L_0x0013:
        r5 = r3;
    L_0x0014:
        r6 = r5.size();	 Catch:{ all -> 0x0022 }
        if (r6 != 0) goto L_0x0031;
    L_0x001a:
        r2 = "CatfishService";
        r3 = "----PROCESS RUNNABLE: EMPTY----";
        com.catfiz.util.Log.d(r2, r3);	 Catch:{ all -> 0x0022 }
        goto L_0x000d;
    L_0x0022:
        r2 = move-exception;
        monitor-exit(r12);
        throw r2;
    L_0x0025:
        r3 = mRunnableList;	 Catch:{ all -> 0x0022 }
        r5 = r3;
        goto L_0x0014;
    L_0x0029:
        r3 = mRunnableList_Ch1;	 Catch:{ all -> 0x0022 }
        r5 = r3;
        goto L_0x0014;
    L_0x002d:
        r3 = mRunnableList_Ch2;	 Catch:{ all -> 0x0022 }
        r5 = r3;
        goto L_0x0014;
    L_0x0031:
        r3 = "CatfishService";
        r4 = new java.lang.StringBuilder;	 Catch:{ all -> 0x0022 }
        r4.<init>();	 Catch:{ all -> 0x0022 }
        r7 = "----PROCESS RUNNABLE: COUNT=";
        r4 = r4.append(r7);	 Catch:{ all -> 0x0022 }
        r4 = r4.append(r6);	 Catch:{ all -> 0x0022 }
        r7 = " ----";
        r4 = r4.append(r7);	 Catch:{ all -> 0x0022 }
        r4 = r4.toString();	 Catch:{ all -> 0x0022 }
        com.catfiz.util.Log.d(r3, r4);	 Catch:{ all -> 0x0022 }
        r4 = r2;
    L_0x0050:
        if (r4 >= r6) goto L_0x000d;
    L_0x0052:
        r2 = 0;
        r2 = r5.get(r2);	 Catch:{ all -> 0x0022 }
        r2 = (com.catfiz.service.IDropableRunnable) r2;	 Catch:{ all -> 0x0022 }
        if (r2 != 0) goto L_0x006a;
    L_0x005b:
        r2 = "CatfishService";
        r3 = "----PROCESS RUNNABLE: NULL: FORCE TO REMOVE QUEUE----";
        com.catfiz.util.Log.d(r2, r3);	 Catch:{ Exception -> 0x00f6 }
        r2 = 0;
        r5.remove(r2);	 Catch:{ Exception -> 0x00f6 }
    L_0x0066:
        r2 = r4 + 1;
        r4 = r2;
        goto L_0x0050;
    L_0x006a:
        r8 = java.lang.System.currentTimeMillis();	 Catch:{ all -> 0x0022 }
        r10 = r2.getAge();	 Catch:{ all -> 0x0022 }
        r8 = r8 - r10;
        r10 = r12.getMaxReschedulingAge();	 Catch:{ all -> 0x0022 }
        r3 = (r8 > r10 ? 1 : (r8 == r10 ? 0 : -1));
        if (r3 <= 0) goto L_0x008a;
    L_0x007b:
        r3 = "CatfishService";
        r7 = "----PROCESS RUNNABLE: TOO LONG: FORCE TO DROP----";
        com.catfiz.util.Log.d(r3, r7);	 Catch:{ all -> 0x0022 }
        r3 = 0;
        r5.remove(r3);	 Catch:{ all -> 0x0022 }
        r2.dropRunnable();	 Catch:{ all -> 0x0022 }
        goto L_0x0066;
    L_0x008a:
        switch(r13) {
            case 0: goto L_0x0099;
            case 1: goto L_0x00b8;
            case 2: goto L_0x00d7;
            default: goto L_0x008d;
        };	 Catch:{ all -> 0x0022 }
    L_0x008d:
        r2 = "CatfishService";
        r3 = "----PROCESS RUNNABLE: POST SUCCESS----";
        com.catfiz.util.Log.d(r2, r3);	 Catch:{ all -> 0x0022 }
        r2 = 0;
        r5.remove(r2);	 Catch:{ all -> 0x0022 }
        goto L_0x0066;
    L_0x0099:
        r7 = r12.mServiceHandler;	 Catch:{ all -> 0x0022 }
        r0 = r2;
        r0 = (java.lang.Runnable) r0;	 Catch:{ all -> 0x0022 }
        r3 = r0;
        r7.removeCallbacks(r3);	 Catch:{ all -> 0x0022 }
        r3 = r12.mServiceHandler;	 Catch:{ all -> 0x0022 }
        r2 = (java.lang.Runnable) r2;	 Catch:{ all -> 0x0022 }
        r2 = r3.post(r2);	 Catch:{ all -> 0x0022 }
        if (r2 != 0) goto L_0x008d;
    L_0x00ac:
        r2 = "CatfishService";
        r3 = "----PROCESS RUNNABLE: FAIL TO POST: TRY NEXT TIME----";
        com.catfiz.util.Log.d(r2, r3);	 Catch:{ all -> 0x0022 }
        r12.scheduleRunnableQueueAlarm();	 Catch:{ all -> 0x0022 }
        goto L_0x000d;
    L_0x00b8:
        r7 = r12.mServiceHandler_Ch1;	 Catch:{ all -> 0x0022 }
        r0 = r2;
        r0 = (java.lang.Runnable) r0;	 Catch:{ all -> 0x0022 }
        r3 = r0;
        r7.removeCallbacks(r3);	 Catch:{ all -> 0x0022 }
        r3 = r12.mServiceHandler_Ch1;	 Catch:{ all -> 0x0022 }
        r2 = (java.lang.Runnable) r2;	 Catch:{ all -> 0x0022 }
        r2 = r3.post(r2);	 Catch:{ all -> 0x0022 }
        if (r2 != 0) goto L_0x008d;
    L_0x00cb:
        r2 = "CatfishService";
        r3 = "----PROCESS RUNNABLE: FAIL TO POST: TRY NEXT TIME----";
        com.catfiz.util.Log.d(r2, r3);	 Catch:{ all -> 0x0022 }
        r12.scheduleRunnableQueueAlarm();	 Catch:{ all -> 0x0022 }
        goto L_0x000d;
    L_0x00d7:
        r7 = r12.mServiceHandler_Ch2;	 Catch:{ all -> 0x0022 }
        r0 = r2;
        r0 = (java.lang.Runnable) r0;	 Catch:{ all -> 0x0022 }
        r3 = r0;
        r7.removeCallbacks(r3);	 Catch:{ all -> 0x0022 }
        r3 = r12.mServiceHandler_Ch2;	 Catch:{ all -> 0x0022 }
        r2 = (java.lang.Runnable) r2;	 Catch:{ all -> 0x0022 }
        r2 = r3.post(r2);	 Catch:{ all -> 0x0022 }
        if (r2 != 0) goto L_0x008d;
    L_0x00ea:
        r2 = "CatfishService";
        r3 = "----PROCESS RUNNABLE: FAIL TO POST: TRY NEXT TIME----";
        com.catfiz.util.Log.d(r2, r3);	 Catch:{ all -> 0x0022 }
        r12.scheduleRunnableQueueAlarm();	 Catch:{ all -> 0x0022 }
        goto L_0x000d;
    L_0x00f6:
        r2 = move-exception;
        goto L_0x0066;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.catfiz.service.CatfishService.processRunnableInService(int):void");
    }

    public synchronized void putWaitP2PReceiver(long j, IP2PDropableRunnable iP2PDropableRunnable) {
        scheduleP2PWakeup();
        this.mWaitingP2PReceivers.remove(String.valueOf(j));
        this.mWaitingP2PReceivers.put(String.valueOf(j), iP2PDropableRunnable);
    }

    public synchronized void putWaitP2PSender(long j, IP2PDropableRunnable iP2PDropableRunnable) {
        scheduleP2PWakeup();
        this.mWaitingP2PSenders.remove(String.valueOf(j));
        this.mWaitingP2PSenders.put(String.valueOf(j), iP2PDropableRunnable);
    }

    public synchronized void reCheckRunnableInService() {
        if (mRunnableList.size() > 0 || mRunnableList_Ch1.size() > 0 || mRunnableList_Ch2.size() > 0) {
            scheduleRunnableQueueAlarm();
        }
    }

    public synchronized void reUpdateUserPIN() {
        catfish_unique_id = getCatfishIDFromSecurePref();
        if (!isEngineStarted() && isEngineAllowToStart()) {
            Log.d(TAG, "User NIC is reupdate: Engine is not started. Start now!!!");
            startCatfizEngine();
        }
    }

    public void releaseAllLocks() {
        Log.d(TAG, "Release all Locks");
        while (mWakeLock.isHeld()) {
            mWakeLock.release();
        }
        while (mWifiLock.isHeld()) {
            mWifiLock.release();
        }
        while (mDimScreenOnWakeLock.isHeld()) {
            mDimScreenOnWakeLock.release();
        }
        Log.d(TAG, "Release all Locks: Done.");
    }

    public void releaseCallBacks() {
        if (mClientCallBacks != null) {
            mClientCallBacks.clear();
        }
    }

    public void releasePartialWakeLock() {
        if (mWakeLock.isHeld()) {
            mWakeLock.release();
        }
    }

    public void requestAllProgressUploadDownload(ICatfishClientInterface iCatfishClientInterface) {
        if (iCatfishClientInterface != null && mMapProgress != null && mMapState != null && !iCatfishClientInterface.isFinish()) {
            iCatfishClientInterface.onHasProgressUploadDownNUpload(mMapProgress, mMapState);
        }
    }

    public void rescheduleUIBinderExecutor(CUIServiceExecutor cUIServiceExecutor) {
        if (System.currentTimeMillis() - cUIServiceExecutor.getLiveAge() >= getMaxReschedulingAge()) {
            cUIServiceExecutor.dropExecution();
            cUIServiceExecutor.cleaningup();
            return;
        }
        scheduleRunnableToService(cUIServiceExecutor);
    }

    public void resetArrayForNotifChat() {
        checkedName = new ArrayList();
        notificationMsg = new ArrayList();
        SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        defaultSharedPreferences.edit().remove("chatNotificationCount").commit();
        defaultSharedPreferences.edit().remove("chatNotificationLastUser").commit();
    }

    public void resetArrayForNotifOfficialMessage() {
        PreferenceManager.getDefaultSharedPreferences(this).edit().remove("chatOfficialNotificationCount").commit();
    }

    public void resetArrayForNotifPool() {
        poolCheckedName = new ArrayList();
        poolNotificationMsg = new ArrayList();
        SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        defaultSharedPreferences.edit().remove("poolNotificationCount").commit();
        defaultSharedPreferences.edit().remove("poolNotificationLastTopic").commit();
    }

    public void scheduleDimScreenOffAlarm() {
        mAM.cancel(mDimScreenOffAlarm);
        mAM.set(THREAD_CH0, System.currentTimeMillis() + 10000, mDimScreenOffAlarm);
    }

    public void scheduleHouseKeeping() {
        mAM.cancel(mHouseKeepingAlarm);
        mAM.setRepeating(THREAD_CH0, catfish_housekeeping_delay + System.currentTimeMillis(), catfish_housekeeping_delay, mHouseKeepingAlarm);
    }

    public void scheduleP2PWakeup() {
        mAM.cancel(mP2PScheduledWakeup);
        mAM.set(THREAD_CH0, System.currentTimeMillis() + 20000, mP2PScheduledWakeup);
    }

    public void scheduleRunnableToService(IDropableRunnable iDropableRunnable) {
        scheduleRunnableToService(iDropableRunnable, THREAD_CH0);
    }

    public synchronized void scheduleRunnableToService(IDropableRunnable iDropableRunnable, int i) {
        Log.d(TAG, "----SCHEDULE RUNNABLE----, Schedule ke-" + iDropableRunnable.getScheduleNum());
        if (iDropableRunnable.getScheduleNum() < PROGRESS_ONPENDING) {
            Log.d(TAG, "----REPOST RUNNABLE: CHANNEL " + String.valueOf(i) + " ----");
            switch (i) {
                case THREAD_CH0 /*0*/:
                    postRunnableToService(iDropableRunnable);
                    break;
                default:
                    postToServiceHandler(iDropableRunnable, i);
                    break;
            }
            iDropableRunnable.incraseScheduleNum();
        } else {
            putRunnableToServiceScheduleList(iDropableRunnable, i);
        }
    }

    public void scheduleWakeupAlarm() {
        mAM.cancel(mAlarmWakeup);
        mAM.set(THREAD_CH0, System.currentTimeMillis() + getSleepDelayMillis(), mAlarmWakeup);
    }

    public synchronized void setLongPIN(String str) {
        getCatfishPreferences().edit().putString(CATFISHLONGPIN_PREF, str).commit();
        catfish_longpin = str;
    }

    public void setNotificationMsgList(ArrayList arrayList) {
        Log.d(TAG, "set notificationMsg with:" + arrayList.size());
        notificationMsg = arrayList;
    }

    public void setNotificationNameList(ArrayList arrayList) {
        Log.d(TAG, "set checkedName with:" + arrayList.size());
        checkedName = arrayList;
    }

    public void setPoolNotificationMsgList(ArrayList arrayList) {
        Log.d(TAG, "set poolNotificationMsg with:" + arrayList.size());
        poolNotificationMsg = arrayList;
    }

    public void setPoolNotificationNameList(ArrayList arrayList) {
        Log.d(TAG, "set checkedName with:" + arrayList.size());
        poolCheckedName = arrayList;
    }

    public void setRegistrationServerSetting(String[] strArr, String[] strArr2) {
        catfish_reghost = strArr;
        catfish_regport = strArr2;
    }

    public void setServerSetting(String[] strArr, String[] strArr2, String[] strArr3, int[] iArr) {
        catfish_last_hostname = catfish_hostname;
        catfish_last_port = catfish_port;
        catfish_last_push_hostname = catfish_push_hostname;
        catfish_last_push_port = catfish_push_port;
        catfish_hostname = strArr;
        catfish_port = strArr2;
        catfish_push_hostname = strArr3;
        catfish_push_port = iArr;
    }

    public void setStreamServerSetting(String[] strArr, String[] strArr2) {
        catfish_streamhost = strArr;
        catfish_streamport = strArr2;
    }

    public synchronized void setUserKey(String str) {
        getCatfishPreferences().edit().putString(CATFISHID_USER_KEY, str).commit();
    }

    public synchronized void setUserPIN(String str) {
        if (str != null) {
            String encrypt;
            CatfishPreferences catfishPreferences = getCatfishPreferences();
            try {
                encrypt = SimpleCrypto.encrypt(getPinKey(mPK), str);
            } catch (Exception e) {
                encrypt = null;
            }
            if (encrypt != null) {
                catfishPreferences.edit().putString(CATFISHID_PREF, encrypt).commit();
                catfishPreferences.edit().putBoolean(CATFISHID_SEC_PREF, true).commit();
            }
            catfish_unique_id = str;
            if (!isEngineStarted() && isEngineAllowToStart()) {
                Log.d(TAG, "User NIC is set: Engine is not started. Start now!!!");
                startCatfizEngine();
            }
        }
    }

    public synchronized void setUserProfile(String str, String str2, long j) {
        CatfishPreferences catfishPreferences = getCatfishPreferences();
        catfishPreferences.edit().putString(USERNAME_PREF, str).commit();
        catfishPreferences.edit().putString(USERSTATUS_PREF, str2).commit();
        catfishPreferences.edit().putLong(USERSTATUS_SEQ_PREF, j).commit();
    }

    public void shortRecurrentTimer() {
        Log.d(TAG, "Set Recurrent Timer");
        mAM.cancel(mShorRecurrent);
        mAM.set(THREAD_CH0, System.currentTimeMillis() + 60000, mShorRecurrent);
    }

    public void signalBlacklistNicNameReady(Cursor cursor) {
        Log.d(TAG, "signalBlacklistNicNameReady");
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.BLACKLIST_NIC_NAME_READY.ordinal());
            obtainMessage.obj = cursor;
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalDataFileReceived(String str) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.DATAFILE_RECEIVED.ordinal());
            Bundle bundle = new Bundle();
            bundle.putString(TaskDataStorage.SENDERPIN, str);
            obtainMessage.setData(bundle);
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalDeletedByFriend(String str) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.DELETED_BY_FRIEND.ordinal());
            Bundle bundle = new Bundle();
            bundle.putString(FriendListDataStorage.FRIENDPIN, str);
            obtainMessage.setData(bundle);
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalDeliveryStatusUpdated(int i) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.DELIVERYSTATUS_UPDATED.ordinal());
            obtainMessage.arg1 = i;
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalDeviceIdNPinRegistered(boolean z) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.DEVICEIDREGISTERED.ordinal());
            obtainMessage.obj = Boolean.valueOf(z);
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalFriendHasNameUpdate(String str, String str2) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.HASFRIENDNAMEUPDATE.ordinal());
            Bundle bundle = new Bundle();
            bundle.putString(FriendListDataStorage.FRIENDPIN, str);
            bundle.putString(FriendListDataStorage.FRIENDNAME, str2);
            obtainMessage.setData(bundle);
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalFriendHasStatusUpdate(String str, String str2, long j) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.HASFRIENDSTATUSUPDATE.ordinal());
            Bundle bundle = new Bundle();
            bundle.putString(FriendListDataStorage.FRIENDPIN, str);
            bundle.putString("friendstatus", str2);
            bundle.putLong("friendstatusseq", j);
            obtainMessage.setData(bundle);
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalFriendHasUserActivityUpdate(String str, String str2) {
        Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.HASUSERACTIVITYUPDATE.ordinal());
        Bundle bundle = new Bundle();
        bundle.putString(FriendListDataStorage.FRIENDPIN, str);
        bundle.putString(ChunkStorage.DATA_TABLE_NAME, str2);
        obtainMessage.setData(bundle);
        mHandler_MainThread.sendMessage(obtainMessage);
    }

    public void signalGetMessagesDone(boolean z) {
        releaseGetMessagesLock();
        Log.d(TAG, "GETMESSAGENOW: Get Message DONE.");
        if (mHandler_MainThread != null) {
            Message obtainMessage;
            if (z) {
                Log.d(TAG, "GETMESSAGENOW: Get Message Again.");
                obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.GET_MESSAGES_NOW.ordinal());
            } else {
                obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.GETMESSAGE_DONE_NOSCHED.ordinal());
            }
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalGetMessagesNow() {
        if (mHandler_MainThread != null) {
            mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.GET_MESSAGES_NOW.ordinal()));
        }
    }

    public void signalHasBCASTResponse() {
        if (mHandler_MainThread != null) {
            mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.HASBCASTRESPONSE.ordinal()));
        }
    }

    public void signalHasCommentonStatus() {
        if (mHandler_MainThread != null) {
            mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.HASCOMMENT_ONSTATUS.ordinal()));
        }
    }

    public void signalHasFriendProfileUpdate(String str) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.FRIEND_PROFILE_UPDATE.ordinal());
            Bundle bundle = new Bundle();
            bundle.putString(FriendListDataStorage.FRIENDPIN, str);
            bundle.putBoolean("friendphoto", true);
            obtainMessage.setData(bundle);
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalHasFriendRequest(int i) {
        if (mHandler_MainThread != null) {
            mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.HASNEWFRIENDREQUEST.ordinal(), i, THREAD_CH0));
        }
    }

    public void signalHasNewFriend(Bundle bundle) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.HASNEWFRIEND.ordinal());
            obtainMessage.setData(bundle);
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalHasNewGroupInvitation() {
        if (mHandler_MainThread != null) {
            mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.HASNEWGROUPINVITATION.ordinal()));
        }
    }

    public void signalHasNewMessage(int i, Bundle bundle) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.HASNEWMESSAGE.ordinal(), i, THREAD_CH0);
            obtainMessage.setData(bundle);
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalHasPing(int i) {
        if (mHandler_MainThread != null) {
            mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.HASPING.ordinal(), i, THREAD_CH0));
        }
    }

    public void signalHasResponseStatus() {
        if (mHandler_MainThread != null) {
            Log.d(TAG, "signalHasResponseStatus");
            mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.HASRESPONSE_ONCOMENT.ordinal()));
        }
    }

    public void signalHasResponseStatusNetral() {
        if (mHandler_MainThread != null) {
            Log.d(TAG, "signalHASRESPONSESTATUSNETRAL");
            mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.HASRESPONSENETRAL_ONCOMENT.ordinal()));
        }
    }

    public void signalHasTheme() {
        if (mHandler_MainThread != null) {
            mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.HASNEWTHEME.ordinal(), THREAD_CH0, THREAD_CH0));
        }
    }

    public void signalHasTopicNeedToNotif(int i, String str, String str2) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.HAS_TOPIC_NEED_TO_NOTIF.ordinal());
            Object obj = new String[VIEW_TYPE_COMMENT];
            obj[THREAD_CH0] = String.valueOf(i);
            obj[VIEW_TYPE_GROUP] = str;
            obj[VIEW_TYPE_CHAT] = str2;
            obtainMessage.obj = obj;
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalImageFileReceived(String str, String str2) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.IMAGE_FILE_RECEIVED.ordinal());
            if (str != null) {
                Bundle bundle = new Bundle();
                bundle.putString("cffilepath", str);
                if (str2 != null) {
                    bundle.putString("cfmimetype", str2);
                }
                obtainMessage.setData(bundle);
            }
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalMusicFileReceived(String str, String str2) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.MUSIC_FILE_RECEIVED.ordinal());
            if (str != null) {
                Bundle bundle = new Bundle();
                bundle.putString("cffilepath", str);
                if (str2 != null) {
                    bundle.putString("cfmimetype", str2);
                }
                obtainMessage.setData(bundle);
            }
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalNewFriendAdded() {
        if (mHandler_MainThread != null) {
            mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.NEWFRIENDADDED.ordinal()));
        }
    }

    public void signalNewPoolMessageReceived(String str) {
        if (!inSvcDBThread()) {
            throw new CatfishDBThreadException("signalNewPoolMessageReceived");
        } else if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.NEW_POOL_MESSAGE_RECEIVE.ordinal());
            boolean isMute = new PoolDataStorage(this).isMute(str);
            Log.d(TAG, "----- get message dari pool mutenya adalah : " + isMute);
            Bundle bundle = new Bundle();
            bundle.putBoolean(PoolDataStorage.MUTE, isMute);
            bundle.putString("topickey", str);
            obtainMessage.setData(bundle);
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalNewTopicMessageUpdated(Cursor cursor) {
        if (!inSvcDBThread()) {
            throw new CatfishDBThreadException("signalNewTopicMessageUpdated");
        } else if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.NEW_TOPIC_MSGUPDATED.ordinal());
            obtainMessage.obj = cursor;
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalNewTopicReceived(Cursor cursor) {
        if (!inSvcDBThread()) {
            throw new CatfishDBThreadException("signalNewTopicReceived");
        } else if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.NEW_TOPIC_RECEIVE.ordinal());
            obtainMessage.obj = cursor;
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalNicMessageReceived() {
        if (mHandler_MainThread != null) {
            mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.HASNEWNICMESSAGE.ordinal()));
        }
    }

    public void signalNicMsgRecipientNameReady(Cursor cursor) {
        Log.d(TAG, "signalNicMsgRecipientNameReady");
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.NICMSGRECIPIENTNAMEREADY.ordinal());
            obtainMessage.obj = cursor;
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalObjectCommentReceived(String str) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.HASNEWOBJECTCOMMENT.ordinal());
            obtainMessage.obj = str;
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalRegisterDeviceId() {
        if (mHandler_MainThread != null) {
            mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.REGISTERDEVICEID.ordinal()));
        }
    }

    public void signalResponsePoolMessageReceived(String str) {
        if (!inSvcDBThread()) {
            throw new CatfishDBThreadException("signalResponsePoolMessageReceived");
        } else if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.RESPONSE_POOL_MESSAGE_RECEIVE.ordinal());
            boolean isMute = new PoolDataStorage(this).isMute(str);
            Bundle bundle = new Bundle();
            bundle.putBoolean(PoolDataStorage.MUTE, isMute);
            bundle.putString("topickey", str);
            obtainMessage.setData(bundle);
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalRestoreFromServer(String str) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.RESTOREFROMSERVER.ordinal());
            obtainMessage.obj = str;
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalServerMessageReceived(Cursor cursor) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.SERVER_MESSAGE_RECEIVED.ordinal());
            obtainMessage.obj = cursor;
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalTopicConverenceDeleted(String str, String str2) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.POOL_TOPIC_DELETED.ordinal());
            Object obj = new String[VIEW_TYPE_CHAT];
            obj[THREAD_CH0] = str;
            obj[VIEW_TYPE_GROUP] = str2;
            obtainMessage.obj = obj;
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalTopicMemberUpdated(String str) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.TOPIC_MEMBER_UPDATED.ordinal());
            obtainMessage.obj = str;
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalUIRegistrationComplete() {
        if (mHandler_MainThread != null) {
            mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.UI_REGISTER_COMPLETE.ordinal()));
        }
    }

    public void signalUIRegistrationError() {
        if (mHandler_MainThread != null) {
            mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.UI_REGISTER_ERROR.ordinal()));
        }
    }

    public void signalUIToLogin() {
        if (mHandler_MainThread != null) {
            mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.UI_TO_LOGIN.ordinal()));
        }
    }

    public void signalUIToUpgrade(String str) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.UI_TO_UPGRADE.ordinal());
            obtainMessage.obj = str;
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalUpdatesIncoming(int i, String str) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.UPDATES_INCOMING.ordinal());
            Bundle bundle = new Bundle();
            bundle.putInt(UPDATE_TYPE, i);
            bundle.putString(UPDATE_KEY, str);
            obtainMessage.setData(bundle);
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalUploadStartSending() {
        if (mHandler_MainThread != null) {
            mHandler_MainThread.sendMessage(mHandler_MainThread.obtainMessage(MessageSignalType.UPLOAD_START_SENDING.ordinal()));
        }
    }

    public void signalUploadUplodDownloadProgress(String str, int i, String str2) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.UPDATE_PROGRESS_UPLOAD_DOWNLOAD.ordinal());
            Object obj = new String[VIEW_TYPE_COMMENT];
            obj[THREAD_CH0] = str;
            obj[VIEW_TYPE_GROUP] = i + "";
            obj[VIEW_TYPE_CHAT] = str2;
            obtainMessage.obj = obj;
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void signalVoiceChatReceived(String str) {
        if (mHandler_MainThread != null) {
            Message obtainMessage = mHandler_MainThread.obtainMessage(MessageSignalType.VOICE_CHAT_RECEIVED.ordinal());
            Bundle bundle = new Bundle();
            bundle.putString(TaskDataStorage.SENDERPIN, str);
            obtainMessage.setData(bundle);
            mHandler_MainThread.sendMessage(obtainMessage);
        }
    }

    public void storeIntent(String str, Intent intent) {
        if (mIntentStorage == null) {
            mIntentStorage = new HashMap();
        }
        if (mIntentStorage.containsValue(intent)) {
            mIntentStorage.remove(str);
        }
        mIntentStorage.put(str, intent);
    }

    public synchronized void storeNewUserPIN(String str) {
        CatfishPreferences catfishPreferences = getCatfishPreferences();
        if (catfishPreferences != null) {
            catfishPreferences.edit().putString(CATFISHID_NEW_PIN_TEMP, str).commit();
        }
    }

    public void unBindCallBackToAction(String str, ICatfishClientInterface iCatfishClientInterface) {
        if (mClientCallBacks != null) {
            ICatfishClientInterface callBack = getCallBack(str);
            if (callBack == iCatfishClientInterface || callBack == null) {
                mClientCallBacks.remove(str);
            }
        }
    }

    public void updateAdsList(ArrayList arrayList) {
        Log.d(TAG, "----new ads list-----");
        this.mAdsList = arrayList;
    }
}
