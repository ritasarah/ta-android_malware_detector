package com.catfiz.service;

import android.database.Cursor;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.util.Log;

public class FriendListSetExecutor implements Runnable {
    private static final String TAG = "FriendListSetExecutor";
    public static String mFriendlist;
    public static String mServer;
    public static String mUserpin;
    public CatfishRESTAPI catfishRestAPI = null;
    public ICatfishClientInterface mIfClient = null;
    public volatile CatfishService mService = null;

    class SetFriendList implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        private long mTimeStamp;
        public int scheduleNum;

        public SetFriendList() {
            this.mAge = 0;
            this.catfishRestAPI = null;
            this.scheduleNum = 0;
            this.mTimeStamp = CatfishRESTAPI.uniqueMonotonicSequence();
            this.mAge = System.currentTimeMillis();
        }

        public void dropRunnable() {
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            CatfishResult friendlistSet = this.catfishRestAPI.friendlistSet(FriendListSetExecutor.mServer, FriendListSetExecutor.mUserpin, this.mTimeStamp, FriendListSetExecutor.mFriendlist);
            if (friendlistSet.hasSuccess()) {
                Log.d(FriendListSetExecutor.TAG, "FRIENDLIST SET: Update timestamp to prefs");
                CatfishService.getCatfishPreferences().edit().putLong(CatfishService.FRIENDLIST_TIMESTAMP, this.mTimeStamp).commit();
            } else if (friendlistSet.hasFailure()) {
                FriendListSetExecutor.this.mService.scheduleRunnableToService(this, 0);
            } else {
                Log.e(FriendListSetExecutor.TAG, "FRIENDLIST SET: Error when update friendlist: DROP !!!");
            }
            friendlistSet.cleaningup();
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    public FriendListSetExecutor(ICatfishClientInterface iCatfishClientInterface, CatfishService catfishService, String str, String str2) {
        this.mIfClient = iCatfishClientInterface;
        this.mService = catfishService;
        mServer = str;
        mUserpin = str2;
    }

    public void run() {
        Cursor friendPINs = new FriendListDataStorage(this.mService).getFriendPINs();
        int columnIndex = friendPINs.getColumnIndex(FriendListDataStorage.FRIENDPIN);
        int count = friendPINs.getCount();
        mFriendlist = "";
        friendPINs.moveToFirst();
        for (int i = 0; i < count; i++) {
            if (i > 0) {
                mFriendlist += ",";
            }
            mFriendlist += friendPINs.getString(columnIndex);
            friendPINs.moveToNext();
        }
        if (mFriendlist.length() > 0) {
            Log.d(TAG, "FRIENDLIST SET: List is built: Post to service to send");
            this.mService.postRunnableToService(new SetFriendList());
        } else {
            Log.e(TAG, "FRIENDLIST SET: NO FRIEND PINS FOUND: DROP !!!");
        }
        mFriendlist = null;
        friendPINs.close();
    }
}
