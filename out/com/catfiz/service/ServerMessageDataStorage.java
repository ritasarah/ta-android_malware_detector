package com.catfiz.service;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;
import com.catfiz.util.Log;

public class ServerMessageDataStorage {
    public static final String COUNT = "count";
    public static final String DATAFILEPATH = "datafilepath";
    public static final String DELIVERYSTATUS = "deliverystatus";
    public static final String IMAGEPATH = "imagepath";
    public static final String IMAGETHUMB_URI = "imagethumburi";
    public static final String MESSAGE = "message";
    public static final String MESSAGETYPE = "messagetype";
    public static final String OBJCOMMENTCOUNT = "objcommentcount";
    public static final String OBJECTOWNERPIN = "objownerpin";
    public static final String OBJECTSEQUENCE = "objectsequence";
    public static final String RECIPIENT = "recipient";
    public static final String SENDERNAME = "sendername";
    public static final String SENDERPIN = "senderpin";
    public static final String SEQUENCE = "sequence";
    public static final String SERVERMESSAGE_TABLE_NAME = "servermessage";
    public static final String SLINK = "slink";
    public static final String STICKERPLAYED = "stickerplayed";
    public static final String STICKERSIZEHEIGHT = "stickersheight";
    public static final String STICKERSIZEWIDTH = "stickerswidth";
    private static final String TAG = "ServerMessageDataStorage";
    public static final String TIMESTAMP = "timestamp";
    public static final String USERACTIVITY = "useractivity";
    public static final String VOICEFILEPATH = "voicefilepath";
    private static SQLiteDatabase mCatfishDataStorageDB = null;
    private static DatabaseHelper mDBHelper = null;
    private Context mContext;

    class DatabaseHelper extends SQLiteOpenHelper {
        private static final String DATABASE_NAME = "servermessage.db";
        private static final int DATABASE_VERSION = 1;
        private Context mContext = null;

        public DatabaseHelper(Context context) {
            super(context, DATABASE_NAME, null, DATABASE_VERSION);
            this.mContext = context;
        }

        private void buildServerMessageTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS servermessage (_id INTEGER PRIMARY KEY,senderpin VARCHAR(10),sendername VARCHAR(255),recipient VARCHAR(10),messagetype INTEGER NOT NULL DEFAULT 0,timestamp INTEGER NOT NULL DEFAULT 0,message TEXT,deliverystatus INTEGER NOT NULL DEFAULT 0,sequence INTEGER NOT NULL DEFAULT 0,imagethumburi TEXT,imagepath TEXT,voicefilepath TEXT,datafilepath TEXT,objectsequence INTEGER NOT NULL DEFAULT 0,objownerpin VARCHAR(10),slink TEXT,objcommentcount INTEGER NOT NULL DEFAULT 0,stickerplayed INTEGER NOT NULL DEFAULT 0,stickersheight INTEGER NOT NULL DEFAULT 0,stickerswidth INTEGER NOT NULL DEFAULT 0,UNIQUE (timestamp));");
        }

        public void onCreate(SQLiteDatabase sQLiteDatabase) {
        }

        public void onUpgrade(SQLiteDatabase sQLiteDatabase, int i, int i2) {
        }
    }

    public ServerMessageDataStorage(Context context) {
        if (mDBHelper == null) {
            Log.d(TAG, "Create new DB Helper");
            mDBHelper = new DatabaseHelper(context);
        }
        this.mContext = context;
    }

    public SQLiteDatabase getDB() {
        try {
            mCatfishDataStorageDB = mDBHelper.getWritableDatabase();
            return mCatfishDataStorageDB;
        } catch (SQLiteException e) {
            e.printStackTrace();
            Log.e(TAG, "FATAL ERROR IN DB: " + e.toString());
            System.exit(0);
            return null;
        } catch (Exception e2) {
            e2.printStackTrace();
            Log.e(TAG, "FATAL ERROR IN DB: " + e2.toString());
            System.exit(0);
            return null;
        }
    }

    public Cursor getServerMessage() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(SERVERMESSAGE_TABLE_NAME, null, null, null, null, null, "timestamp DESC");
    }

    public void storeServerMessage(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            if (catfishMessageObject.senderpin != null) {
                contentValues.put(SENDERPIN, catfishMessageObject.senderpin);
            }
            if (catfishMessageObject.sendername != null) {
                contentValues.put(SENDERNAME, catfishMessageObject.sendername);
            }
            if (catfishMessageObject.recipient != null) {
                contentValues.put(RECIPIENT, catfishMessageObject.recipient);
            }
            if (catfishMessageObject.messagetype != null) {
                contentValues.put(MESSAGETYPE, Integer.valueOf(catfishMessageObject.messagetype.ordinal()));
            }
            if (catfishMessageObject.rcvtimestamp != 0) {
                contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.rcvtimestamp));
            }
            if (catfishMessageObject.message != null) {
                contentValues.put(MESSAGE, catfishMessageObject.message);
            }
            if (catfishMessageObject.deliverystatus != null) {
                contentValues.put(DELIVERYSTATUS, Integer.valueOf(catfishMessageObject.deliverystatus.ordinal()));
            }
            if (catfishMessageObject.sequence != 0) {
                contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.sequence));
            }
            if (catfishMessageObject.imagethumb_uri != null) {
                contentValues.put(IMAGETHUMB_URI, catfishMessageObject.imagethumb_uri);
            }
            if (catfishMessageObject.image_path != null) {
                contentValues.put(IMAGEPATH, catfishMessageObject.image_path);
            }
            if (catfishMessageObject.voicefilepath != null) {
                contentValues.put(VOICEFILEPATH, catfishMessageObject.voicefilepath);
            }
            if (catfishMessageObject.datafile_path != null) {
                contentValues.put(DATAFILEPATH, catfishMessageObject.datafile_path);
            }
            if (catfishMessageObject.object_sequence != 0) {
                contentValues.put(OBJECTSEQUENCE, Long.valueOf(catfishMessageObject.object_sequence));
            }
            if (catfishMessageObject.object_owner != null) {
                contentValues.put(OBJECTOWNERPIN, catfishMessageObject.object_owner);
            }
            if (catfishMessageObject.slink != null) {
                contentValues.put(SLINK, catfishMessageObject.slink);
            }
            db.insert(SERVERMESSAGE_TABLE_NAME, null, contentValues);
        }
    }
}
