package com.catfiz.service;

import android.database.Cursor;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.util.Log;

public class StatusLikeExecutor implements Runnable {
    private static final String TAG = "StatusLikeExecutor";
    private ICatfishClientInterface mClientInterface = null;
    private String mConvKey;
    private int mCount;
    private String mFriendpin;
    private long mObjectSequence;
    private long mRcvTimestamp;
    private long mSequence;
    private String mServer;
    private volatile CatfishService mService = null;
    private String mUsername;
    private String mUserpin;
    private int resultCount;

    class BcastCommentToFriendList implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        public int scheduleNum;

        private BcastCommentToFriendList() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.scheduleNum = 0;
        }

        public void dropRunnable() {
            Log.e(StatusLikeExecutor.TAG, "SEND STATUS COMMENT: SEND ERROR: DROP BY SERVICE !!!");
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            CatfishResult friendlistBcast = this.catfishRestAPI.friendlistBcast(StatusLikeExecutor.this.mServer, StatusLikeExecutor.this.mUserpin, StatusLikeExecutor.this.mUsername, MessageType.STATUSLIKE.ordinal(), StatusLikeExecutor.this.mFriendpin, Integer.toString(StatusLikeExecutor.this.mCount), StatusLikeExecutor.this.mSequence, StatusLikeExecutor.this.mObjectSequence, StatusLikeExecutor.this.mFriendpin);
            if (friendlistBcast.hasSuccess()) {
                Log.d(StatusLikeExecutor.TAG, "sukses gan ");
                if (!StatusLikeExecutor.this.mClientInterface.isFinish()) {
                    Log.d(StatusLikeExecutor.TAG, "result like count :" + StatusLikeExecutor.this.resultCount);
                    StatusLikeExecutor.this.mClientInterface.onStatusLikeResult(StatusLikeExecutor.this.resultCount);
                }
            } else if (friendlistBcast.hasFailure()) {
                StatusLikeExecutor.this.mServer = CatfishService.getServerHost();
                StatusLikeExecutor.this.mService.scheduleRunnableToService(this, 1);
            } else {
                Log.e(StatusLikeExecutor.TAG, "SEND STATUS COMMENT: SEND ERROR: DROP !!!");
                if (!StatusLikeExecutor.this.mClientInterface.isFinish()) {
                    StatusLikeExecutor.this.mClientInterface.onStatusLikeResult(StatusLikeExecutor.this.resultCount);
                }
            }
            friendlistBcast.cleaningup();
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    public StatusLikeExecutor(ICatfishClientInterface iCatfishClientInterface, CatfishService catfishService, String str, String str2, long j, int i) {
        this.mClientInterface = iCatfishClientInterface;
        this.mFriendpin = str2;
        this.mObjectSequence = j;
        this.mCount = i;
        this.mServer = str;
        this.mService = catfishService;
        CatfishService catfishService2 = this.mService;
        this.mUserpin = CatfishService.getUserPIN();
        this.mConvKey = "sl:" + this.mFriendpin + ":" + this.mObjectSequence;
        this.mSequence = CatfishRESTAPI.uniqueMonotonicSequence();
        this.mRcvTimestamp = this.mSequence;
    }

    public void run() {
        int i = 0;
        CatfishDataStorage catfishDataStorage = new CatfishDataStorage(this.mService);
        FriendListDataStorage friendListDataStorage = new FriendListDataStorage(this.mService);
        CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        this.mUsername = catfishPreferences.getString(CatfishService.USERNAME_PREF, null);
        catfishMessageObject.userpin = this.mUserpin;
        catfishMessageObject.username = this.mUsername;
        catfishMessageObject.recipient = this.mFriendpin;
        catfishMessageObject.messagetype = MessageType.STATUSLIKE;
        catfishMessageObject.rcvtimestamp = this.mRcvTimestamp;
        catfishMessageObject.conversation_key = this.mConvKey;
        catfishMessageObject.message = Integer.toString(this.mCount);
        catfishMessageObject.deliverystatus = MessageDeliveryStatus.DELIVERED;
        catfishMessageObject.sequence = this.mSequence;
        catfishMessageObject.object_sequence = this.mObjectSequence;
        catfishMessageObject.object_owner = this.mFriendpin;
        Log.d(TAG, "Check: mCount=" + String.valueOf(this.mCount));
        if (!catfishDataStorage.isUserMessageForStatusLikeExists(this.mUserpin, this.mConvKey, null) || this.mCount <= 0) {
            catfishMessageObject.senderpin = this.mFriendpin;
            catfishMessageObject.messagetype = MessageType.STATUSLIKE;
            if (Integer.parseInt(catfishMessageObject.message) == 1) {
                catfishMessageObject.isUserLike = 1;
                catfishDataStorage.addRecentupdates(catfishMessageObject);
                Log.d(TAG, "add recipient with 1");
            } else {
                catfishMessageObject.isUserLike = 2;
                Log.d(TAG, "add recipient with -1");
                catfishDataStorage.addRecentupdates(catfishMessageObject);
            }
            Log.d(TAG, "jumlah like : " + friendListDataStorage.getLIkeCount(catfishMessageObject));
            long j = catfishPreferences.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0);
            if (catfishMessageObject.object_owner != null && catfishMessageObject.object_owner.compareTo(this.mUserpin) == 0 && catfishMessageObject.object_sequence == j) {
                Log.d(TAG, "STATUSLIKE: USER STATUS");
                Log.d(TAG, "nilai like di pref" + catfishPreferences.getInt(FriendListDataStorage.LIKESTATUS, 0));
                Cursor responseLikeList = catfishDataStorage.getResponseLikeList(this.mConvKey);
                int count = responseLikeList.getCount() + Integer.parseInt(catfishMessageObject.message);
                responseLikeList.close();
                if (count >= 0) {
                    i = count;
                }
                Log.d(TAG, "nilai like ditambah message" + i);
                catfishPreferences.edit().putInt(FriendListDataStorage.LIKESTATUS, i).commit();
                if (catfishDataStorage.storeUserMessageForStatusLike(catfishMessageObject, this.mConvKey)) {
                    this.mService.postToServiceHandler(new BcastCommentToFriendList(), 1);
                    this.resultCount = friendListDataStorage.getLIkeCount(catfishMessageObject);
                    return;
                }
                catfishPreferences.edit().putInt(FriendListDataStorage.LIKESTATUS, i - 1).commit();
                catfishMessageObject.message = Integer.toString(this.mCount * -1);
                this.resultCount = friendListDataStorage.getLIkeCount(catfishMessageObject);
                if (!this.mClientInterface.isFinish()) {
                    this.mClientInterface.onStatusLikeResult(this.resultCount);
                    return;
                }
                return;
            } else if (!friendListDataStorage.updateStatusLike(catfishMessageObject, true)) {
                Log.e(TAG, "SEND STATUS COMMENT: Write to DB FAIL: DROP !!!");
                this.resultCount = friendListDataStorage.getLIkeCount(catfishMessageObject);
                if (!this.mClientInterface.isFinish()) {
                    this.mClientInterface.onStatusLikeResult(this.resultCount);
                    return;
                }
                return;
            } else if (catfishDataStorage.storeUserMessageForStatusLike(catfishMessageObject, this.mConvKey)) {
                this.mService.postToServiceHandler(new BcastCommentToFriendList(), 1);
                this.resultCount = friendListDataStorage.getLIkeCount(catfishMessageObject);
                return;
            } else {
                catfishMessageObject.message = Integer.toString(this.mCount * -1);
                friendListDataStorage.updateStatusLike(catfishMessageObject, true);
                this.resultCount = friendListDataStorage.getLIkeCount(catfishMessageObject);
                if (!this.mClientInterface.isFinish()) {
                    this.mClientInterface.onStatusLikeResult(this.resultCount);
                    return;
                }
                return;
            }
        }
        Log.e(TAG, "User send like more than once: IGNORE!!!");
        catfishMessageObject.cleaningup();
    }
}
