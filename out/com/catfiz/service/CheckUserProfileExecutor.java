package com.catfiz.service;

import android.content.res.Resources;
import com.catfiz.R;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.util.Log;
import java.io.File;

public class CheckUserProfileExecutor implements IDropableRunnable, Runnable {
    private static final String CHECKUSERPROFILE_LASTSET = "checkuserprofile_lastset";
    private static final String TAG = "CheckUserProfileExecutor";
    private CatfishRESTAPI catfishRestAPI;
    private long mAge = 0;
    private String mNotifyRecipients;
    private String mServer;
    private CatfishService mService;
    private int mTries;
    private String mUsername;
    private String mUserpin;
    private String mUserstatus;
    private long mUserstatusSeq;
    public int scheduleNum = 0;

    class CheckUserFriendList implements Runnable {
        private CheckUserFriendList() {
        }

        public void run() {
        }
    }

    public CheckUserProfileExecutor(CatfishService catfishService) {
        this.mService = catfishService;
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        this.mService.getResources();
        this.mUsername = catfishPreferences.getString(CatfishService.USERNAME_PREF, null);
        this.mUserstatus = catfishPreferences.getString(CatfishService.USERSTATUS_PREF, null);
        this.mUserstatusSeq = catfishPreferences.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0);
        this.mUserpin = CatfishService.getUserPIN();
        this.mServer = CatfishService.getCurrentServerHost();
        this.mTries = 0;
        this.mAge = System.currentTimeMillis();
    }

    public void dropRunnable() {
    }

    public long getAge() {
        return this.mAge;
    }

    public int getScheduleNum() {
        return this.scheduleNum;
    }

    public void incraseScheduleNum() {
        this.scheduleNum++;
    }

    public void run() {
        CatfishResult userProfileInfo = this.catfishRestAPI.getUserProfileInfo(this.mServer, this.mUserpin, this.mUserpin);
        if (userProfileInfo.hasSuccess()) {
            CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
            if (catfishPreferences == null) {
                Log.e(TAG, "PREFS IS NULL, RETURN");
                return;
            }
            Resources resources = this.mService.getResources();
            long j = catfishPreferences.getLong(CHECKUSERPROFILE_LASTSET, 0);
            long currentTimeMillis = System.currentTimeMillis();
            long parseLong = Long.parseLong(resources.getString(R.string.profile_maintenance_time));
            if (!userProfileInfo.photoavailable && currentTimeMillis - j > parseLong) {
                File userProfilePhotoFile = CatfishPhotoStorage.getUserProfilePhotoFile(this.mService);
                if (userProfilePhotoFile != null && userProfilePhotoFile.length() > 0) {
                    this.mService.postRunnableToService(new PPFUploadExecutor(this.mService, this.mServer, this.mUserpin, userProfilePhotoFile), 2);
                }
            }
            if (currentTimeMillis - j > parseLong) {
                catfishPreferences.edit().putLong(CHECKUSERPROFILE_LASTSET, currentTimeMillis).commit();
                Log.d(TAG, "Profile is Okay, now update friendlist");
                this.mService.postRunnableToService(new FriendListUpdateExecutor(this.mService, this.mServer, this.mUserpin, 2));
            }
        } else if (userProfileInfo.hasFailure()) {
            this.mTries++;
            if (this.mTries <= 2) {
                this.mServer = CatfishService.getServerHost();
                this.mService.scheduleRunnableToService(this, 0);
            }
        } else if (userProfileInfo.hasNotFound()) {
            this.mService.postRunnableToService(new UserProfileExecutor(this.mService));
        } else {
            Log.e(TAG, "CheckUserProfileExecutor: ERROR WHEN GET USER PROFILE: DROP !!!");
        }
    }

    public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        this.catfishRestAPI = catfishRESTAPI;
    }
}
