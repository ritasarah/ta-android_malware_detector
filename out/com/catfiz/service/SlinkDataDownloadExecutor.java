package com.catfiz.service;

import android.os.Environment;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.widget.Toast;
import com.catfiz.R;
import com.catfiz.media.MediaScanOnlyNotifier;
import com.catfiz.pool.PoolDataStorage;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.svcpersistent.DataStorageDownloadBase;
import com.catfiz.svcpersistent.DataStorageDownloadInfo.DataStorageStreamType;
import com.catfiz.util.Log;
import com.catfiz.util.ObjectLockManager;
import com.catfiz.util.Utils;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

public class SlinkDataDownloadExecutor extends DataStorageDownloadBase implements IDropableRunnable, Runnable {
    private static final String TAG = "SlinkDataDownloadExecutor";
    public static final String mParentPath = (Environment.getExternalStorageDirectory().getAbsolutePath() + "/download/");
    private final int CHAT = 1;
    private final int POOL = 2;
    private CatfishRESTAPI catfishRestAPI = null;
    private long mAge = 0;
    private int mByteend = 0;
    private int mBytestart = 0;
    private int mChunkMaxSize = AccessibilityNodeInfoCompat.ACTION_COPY;
    private byte[] mChunkbuffer = null;
    private FileOutputStream mChunkstream = null;
    private ICatfishClientInterface mClient;
    private File mDataFile = null;
    private String mDataPath = null;
    private int mDatasize = 0;
    private String mFileName = null;
    public String mLockKey = null;
    public String mLockObj = null;
    private int mOriginPlace = 0;
    private String mSenderpin = null;
    private long mSequence = 0;
    private String mServer = null;
    private CatfishService mService = null;
    private boolean mShowProgress = false;
    private String mSlink = null;
    private String mUserpin = null;
    private int mWriten = 0;
    private boolean returnToUI = false;
    public int scheduleNum = 0;

    class GetDataSlinkChunks implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        public int scheduleNum;

        private GetDataSlinkChunks() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.scheduleNum = 0;
        }

        public void dropRunnable() {
            Log.d(SlinkDataDownloadExecutor.TAG, "Slink (" + SlinkDataDownloadExecutor.this.mSlink + ") Data Download: DROP BY SERVICE");
            ObjectLockManager.releaseLockKey(SlinkDataDownloadExecutor.this.mLockKey);
            SlinkDataDownloadExecutor.this.deleteTaskState(SlinkDataDownloadExecutor.this.mSlink, false);
            try {
                SlinkDataDownloadExecutor.this.mChunkstream.flush();
                SlinkDataDownloadExecutor.this.mChunkstream.close();
            } catch (IOException e) {
            }
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            if (!ObjectLockManager.isLockKeyLocked(SlinkDataDownloadExecutor.this.mLockKey)) {
                Log.e(SlinkDataDownloadExecutor.TAG, "GetProfilePhotoChunks: INCONSISTENT LOCK!!!: DROP");
                try {
                    SlinkDataDownloadExecutor.this.mChunkstream.flush();
                    SlinkDataDownloadExecutor.this.mChunkstream.close();
                } catch (IOException e) {
                }
                SlinkDataDownloadExecutor.this.cancleNotif();
            } else if (ObjectLockManager.checkLockKeyString(SlinkDataDownloadExecutor.this.mLockKey, SlinkDataDownloadExecutor.this.mLockObj)) {
                Log.d(SlinkDataDownloadExecutor.TAG, "GetProfilePhotoChunks: WE HAVE HELD THE LOCK: Continue...");
                Log.d(SlinkDataDownloadExecutor.TAG, "Get byte range: bs=" + String.valueOf(SlinkDataDownloadExecutor.this.mBytestart) + ", " + "be=" + String.valueOf(SlinkDataDownloadExecutor.this.mByteend) + ", " + "size=" + String.valueOf(SlinkDataDownloadExecutor.this.mDatasize) + ", " + "mWriten=" + String.valueOf(SlinkDataDownloadExecutor.this.mWriten));
                CatfishResult downloadSLinkDataChunk = this.catfishRestAPI.downloadSLinkDataChunk(SlinkDataDownloadExecutor.this.mServer, SlinkDataDownloadExecutor.this.mUserpin, SlinkDataDownloadExecutor.this.mSlink, SlinkDataDownloadExecutor.this.mBytestart, SlinkDataDownloadExecutor.this.mByteend, SlinkDataDownloadExecutor.this.mChunkstream);
                int access$800 = (SlinkDataDownloadExecutor.this.mWriten * 100) / SlinkDataDownloadExecutor.this.mDatasize;
                Log.d(SlinkDataDownloadExecutor.TAG, "pesen " + access$800 + " mwrite:" + SlinkDataDownloadExecutor.this.mWriten + " mdata:" + SlinkDataDownloadExecutor.this.mDatasize);
                SlinkDataDownloadExecutor.this.invokeClientCallback(access$800, true);
                Log.d(SlinkDataDownloadExecutor.TAG, "Chunksize: " + String.valueOf(downloadSLinkDataChunk.chunksize));
                if (downloadSLinkDataChunk.hasSuccess()) {
                    this.mAge = System.currentTimeMillis();
                    if (downloadSLinkDataChunk.chunksize > 0) {
                        SlinkDataDownloadExecutor.this.mWriten = SlinkDataDownloadExecutor.this.mWriten + downloadSLinkDataChunk.chunksize;
                    }
                    if (SlinkDataDownloadExecutor.this.mWriten < SlinkDataDownloadExecutor.this.mDatasize) {
                        SlinkDataDownloadExecutor.this.mChunkMaxSize = CatfishRESTAPI.growChunkSize(SlinkDataDownloadExecutor.this.mChunkMaxSize);
                        SlinkDataDownloadExecutor.this.mBytestart = SlinkDataDownloadExecutor.this.mWriten;
                        SlinkDataDownloadExecutor.this.mByteend = (SlinkDataDownloadExecutor.this.mWriten + SlinkDataDownloadExecutor.this.mChunkMaxSize) - 1;
                        SlinkDataDownloadExecutor.this.mService.postToServiceHandler(this, 2);
                        downloadSLinkDataChunk.cleaningup();
                        return;
                    }
                    Log.d(SlinkDataDownloadExecutor.TAG, "DBCAST RECEIVE: Get Data Chunk: DONE");
                    SlinkDataDownloadExecutor.this.mService.postRunnableToDbThread(new SLinkUpdateDB());
                    ObjectLockManager.releaseLockKey(SlinkDataDownloadExecutor.this.mLockKey);
                    SlinkDataDownloadExecutor.this.deleteTaskState(SlinkDataDownloadExecutor.this.mSlink, false);
                    SlinkDataDownloadExecutor.this.invokeClientCallback(access$800, false);
                } else if (downloadSLinkDataChunk.hasFailure()) {
                    Log.d(SlinkDataDownloadExecutor.TAG, "DBCAST RECEIVE: Get Data Chunk: FAIL: Reschedule");
                    if (downloadSLinkDataChunk.chunksize > 0) {
                        this.mAge = System.currentTimeMillis();
                        SlinkDataDownloadExecutor.this.mWriten = SlinkDataDownloadExecutor.this.mWriten + downloadSLinkDataChunk.chunksize;
                        if (SlinkDataDownloadExecutor.this.mWriten < SlinkDataDownloadExecutor.this.mDatasize) {
                            SlinkDataDownloadExecutor.this.mBytestart = SlinkDataDownloadExecutor.this.mWriten;
                            SlinkDataDownloadExecutor.this.mByteend = (SlinkDataDownloadExecutor.this.mWriten + SlinkDataDownloadExecutor.this.mChunkMaxSize) - 1;
                            SlinkDataDownloadExecutor.this.mService.postToServiceHandler(this, 2);
                            downloadSLinkDataChunk.cleaningup();
                            return;
                        }
                        Log.d(SlinkDataDownloadExecutor.TAG, "DBCAST RECEIVE (In FAILURE): Get Data Chunk: DONE");
                        SlinkDataDownloadExecutor.this.mService.postRunnableToDbThread(new SLinkUpdateDB());
                        ObjectLockManager.releaseLockKey(SlinkDataDownloadExecutor.this.mLockKey);
                        SlinkDataDownloadExecutor.this.deleteTaskState(SlinkDataDownloadExecutor.this.mSlink, false);
                        SlinkDataDownloadExecutor.this.invokeClientCallback(access$800, false);
                        try {
                            SlinkDataDownloadExecutor.this.mChunkstream.flush();
                            SlinkDataDownloadExecutor.this.mChunkstream.close();
                        } catch (IOException e2) {
                        }
                        downloadSLinkDataChunk.cleaningup();
                        return;
                    }
                    SlinkDataDownloadExecutor.this.mChunkMaxSize = CatfishRESTAPI.fallbackChunkSize(SlinkDataDownloadExecutor.this.mChunkMaxSize);
                    SlinkDataDownloadExecutor.this.mByteend = (SlinkDataDownloadExecutor.this.mWriten + SlinkDataDownloadExecutor.this.mChunkMaxSize) - 1;
                    SlinkDataDownloadExecutor.this.mServer = CatfishService.getServerHost();
                    SlinkDataDownloadExecutor.this.mService.scheduleRunnableToService(this, 2);
                    downloadSLinkDataChunk.cleaningup();
                    return;
                } else {
                    Log.d(SlinkDataDownloadExecutor.TAG, "DBCAST RECEIVE: Get Data Chunk: ERROR: DROP");
                    SlinkDataDownloadExecutor.this.cancleNotif();
                    ObjectLockManager.releaseLockKey(SlinkDataDownloadExecutor.this.mLockKey);
                }
                try {
                    SlinkDataDownloadExecutor.this.mChunkstream.flush();
                    SlinkDataDownloadExecutor.this.mChunkstream.close();
                } catch (IOException e3) {
                }
                SlinkDataDownloadExecutor.this.mChunkbuffer = null;
                downloadSLinkDataChunk.cleaningup();
            } else {
                Log.d(SlinkDataDownloadExecutor.TAG, "GetProfilePhotoChunks: OOPS LOCK ITS NOT MINE: CANCEL");
                ObjectLockManager.releaseLockKey(SlinkDataDownloadExecutor.this.mLockKey);
                try {
                    SlinkDataDownloadExecutor.this.mChunkstream.flush();
                    SlinkDataDownloadExecutor.this.mChunkstream.close();
                } catch (IOException e4) {
                }
            }
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    class SLinkUpdateDB implements Runnable {
        private SLinkUpdateDB() {
        }

        public void run() {
            String extension = Utils.getExtension(SlinkDataDownloadExecutor.this.mDataFile.getAbsolutePath());
            MediaScanOnlyNotifier mediaScanOnlyNotifier = new MediaScanOnlyNotifier(SlinkDataDownloadExecutor.this.mService, SlinkDataDownloadExecutor.this.mDataFile.getAbsolutePath(), extension == null ? "*/*" : Utils.getmimetypeFromExtension(extension));
            new CatfishDataStorage(SlinkDataDownloadExecutor.this.getCatfishService()).updateFizzlinkDownloaded(SlinkDataDownloadExecutor.this.mSlink);
            new PoolDataStorage(SlinkDataDownloadExecutor.this.getCatfishService()).updateFizzlinkDownloaded(SlinkDataDownloadExecutor.this.mSlink);
            Log.d(SlinkDataDownloadExecutor.TAG, "Slink Download complete");
        }
    }

    public SlinkDataDownloadExecutor(CatfishService catfishService, String str, String str2, String str3, ICatfishClientInterface iCatfishClientInterface, int i, String str4, String str5, boolean z) {
        this.mService = catfishService;
        this.mServer = str;
        this.mUserpin = str2;
        this.mSlink = str3;
        this.mDatasize = i;
        this.mDataPath = str4;
        this.mFileName = str5;
        this.mClient = iCatfishClientInterface;
        this.mLockKey = "download:" + this.mSlink;
        this.mLockObj = String.valueOf(CatfishRESTAPI.uniqueMonotonicSequence());
        this.mShowProgress = z;
        ObjectLockManager.acquireLockKey(this.mLockKey, this.mLockObj);
        this.mAge = System.currentTimeMillis();
    }

    public SlinkDataDownloadExecutor(CatfishService catfishService, String str, String str2, String str3, ICatfishClientInterface iCatfishClientInterface, boolean z) {
        this.mService = catfishService;
        this.mServer = str;
        this.mUserpin = str2;
        this.mSlink = str3;
        this.mClient = iCatfishClientInterface;
        this.mLockKey = this.mSlink;
        this.mLockObj = String.valueOf(CatfishRESTAPI.uniqueMonotonicSequence());
        this.mShowProgress = z;
        ObjectLockManager.acquireLockKey(this.mLockKey, this.mLockObj);
        this.mAge = System.currentTimeMillis();
    }

    private void cancleNotif() {
        deleteTaskState(this.mSlink, false);
    }

    private void invokeClientCallback(int i, boolean z) {
    }

    public void dropRunnable() {
        ObjectLockManager.releaseLockKey(this.mLockKey);
    }

    public long getAge() {
        return this.mAge;
    }

    public int getScheduleNum() {
        return this.scheduleNum;
    }

    public void incraseScheduleNum() {
        this.scheduleNum++;
    }

    public void run() {
        if (!ObjectLockManager.isLockKeyLocked(this.mLockKey)) {
            Log.e(TAG, "INCONSISTENT LOCK!!!: DROP");
            cancleNotif();
        } else if (ObjectLockManager.checkLockKeyString(this.mLockKey, this.mLockObj)) {
            Log.d(TAG, "WE HAVE HELD THE LOCK: Continue...");
            this.mDataFile = new File(this.mDataPath);
            Log.d(TAG, "slink data path: " + this.mDataPath);
            String externalStorageState = Environment.getExternalStorageState();
            if (externalStorageState.equals("mounted")) {
                File parentFile = this.mDataFile.getParentFile();
                if (parentFile.exists() || parentFile.mkdirs()) {
                    this.mByteend = this.mChunkMaxSize - 1;
                    try {
                        if (isResumeProcess() && this.mDataFile.exists()) {
                            this.mChunkstream = new FileOutputStream(this.mDataFile, true);
                            this.mWriten = (int) this.mDataFile.length();
                            this.mBytestart = this.mWriten;
                            this.mByteend = (this.mBytestart + this.mChunkMaxSize) - 1;
                        } else {
                            this.mChunkstream = new FileOutputStream(this.mDataFile);
                        }
                        updateTaskState(this.mSlink, this.mDataFile.getAbsolutePath(), this.mDatasize, DataStorageStreamType.FIZZLINK_DATA.ordinal(), null, false);
                        this.mService.postToServiceHandler(new GetDataSlinkChunks(), 2);
                        return;
                    } catch (FileNotFoundException e) {
                        Log.e(TAG, "DBCAST RECEIVE: " + e.toString());
                        ObjectLockManager.releaseLockKey(this.mLockKey);
                        try {
                            this.mChunkstream.flush();
                            this.mChunkstream.close();
                            return;
                        } catch (Exception e2) {
                            return;
                        }
                    }
                }
                Log.e(TAG, "DBCAST RECEIVE: Path to file could not be created.");
                ObjectLockManager.releaseLockKey(this.mLockKey);
                return;
            }
            Log.e(TAG, "DBCAST RECEIVE: media not mounted in is state: " + externalStorageState + ":DROP !!!");
            cancleNotif();
            Toast.makeText(this.mService, this.mService.getString(R.string.media_mounted_error), 0).show();
            ObjectLockManager.releaseLockKey(this.mLockKey);
        } else {
            Log.d(TAG, "OOPS LOCK ITS NOT MINE: CANCEL");
            ObjectLockManager.releaseLockKey(this.mLockKey);
        }
    }

    public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        this.catfishRestAPI = catfishRESTAPI;
    }
}
