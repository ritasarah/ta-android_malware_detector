package com.catfiz.service;

import android.content.Context;
import android.database.Cursor;
import android.webkit.MimeTypeMap;
import com.catfiz.R;
import com.catfiz.localstorage.ChunkStorage;
import com.catfiz.objectcomment.ObjectCommentDataStorage;
import com.catfiz.pool.PoolDataStorage;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.util.FizzlinkUtil;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.io.File;
import org.json.JSONException;
import org.json.JSONObject;

public class CatfizGetSlinkExecutor implements Runnable {
    public static final int PM = 0;
    public static final int POOL = 2;
    public static final int STATUS = 1;
    private static final String TAG = "CatfizGetSlinkExecutor";
    private Cursor dataFizzlink;
    private ICatfishClientInterface mClientInterface;
    private Context mContext;
    public String mConvKey;
    File mDataFile;
    private String mDataPath;
    private String mFilename;
    private long mFizzlinkSequence;
    private String mMessage;
    CatfishMessageObject mMessageObject;
    private String mObjOwner;
    private long mObjSequence;
    public String mRecipient;
    private volatile String mServer;
    private CatfishService mService;
    private ICatfishUIBinder mServiceBinder;
    private String mSlink;
    private int mSource;
    private String mUserpin;
    private long mstatusSequence;

    class BcastCommentToFriendList implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        public int scheduleNum;

        private BcastCommentToFriendList() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.scheduleNum = CatfizGetSlinkExecutor.PM;
        }

        public void dropRunnable() {
            Log.e(CatfizGetSlinkExecutor.TAG, "SEND STATUS COMMENT: SEND ERROR: DROP BY SERVICE !!!");
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum += CatfizGetSlinkExecutor.STATUS;
        }

        public void run() {
            String string = CatfishService.getCatfishPreferences().getString(CatfishService.USERNAME_PREF, null);
            Log.d(CatfizGetSlinkExecutor.TAG, "masuk bcast status:" + CatfizGetSlinkExecutor.this.mSource);
            JSONObject jSONObject = new JSONObject();
            try {
                jSONObject.put(ServerMessageDataStorage.MESSAGE, CatfizGetSlinkExecutor.this.getSlinkFromJson(CatfizGetSlinkExecutor.this.mMessage, ServerMessageDataStorage.MESSAGE));
                jSONObject.put(ServerMessageDataStorage.SLINK, "catfiz://m.catfiz.com/" + CatfizGetSlinkExecutor.this.mSlink);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            CatfishResult friendlistBcast = this.catfishRestAPI.friendlistBcast(CatfizGetSlinkExecutor.this.mServer, CatfizGetSlinkExecutor.this.mUserpin, string, MessageType.SHARE_SLINK_AT_COMMENT.ordinal(), CatfizGetSlinkExecutor.this.mRecipient, jSONObject.toString(), CatfizGetSlinkExecutor.this.mFizzlinkSequence, CatfizGetSlinkExecutor.this.mstatusSequence, CatfizGetSlinkExecutor.this.mRecipient);
            if (friendlistBcast.hasSuccess()) {
                CatfizGetSlinkExecutor.this.mService.postRunnableToDbThread(new DataBcastDeliveryStatus(MessageDeliveryStatus.BCASTSENT));
            } else if (friendlistBcast.hasFailure()) {
                CatfizGetSlinkExecutor.this.mServer = CatfishService.getServerHost();
                CatfizGetSlinkExecutor.this.mService.scheduleRunnableToService(this, CatfizGetSlinkExecutor.PM);
            } else {
                Log.e(CatfizGetSlinkExecutor.TAG, "SEND IMAGE STATUS COMMENT: SEND ERROR: DROP !!!");
                CatfizGetSlinkExecutor.this.mService.postRunnableToDbThread(new DataBcastDeliveryStatus(MessageDeliveryStatus.BCASTFAIL));
            }
            friendlistBcast.cleaningup();
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    class ChatDeliveryStatus implements Runnable {
        private MessageDeliveryStatus mDeliveryStatus = MessageDeliveryStatus.UNDEFINED;
        private String mMessage = null;
        private String mStatus = null;

        public ChatDeliveryStatus(MessageDeliveryStatus messageDeliveryStatus) {
            this.mDeliveryStatus = messageDeliveryStatus;
        }

        public ChatDeliveryStatus(MessageDeliveryStatus messageDeliveryStatus, String str, String str2) {
            this.mDeliveryStatus = messageDeliveryStatus;
            this.mMessage = str;
            this.mStatus = str2;
        }

        public void run() {
            CatfishDataStorage catfishDataStorage = new CatfishDataStorage(CatfizGetSlinkExecutor.this.mService);
            CatfizGetSlinkExecutor.this.mMessageObject = CatfishMessageObject.obtain();
            CatfizGetSlinkExecutor.this.mMessageObject.deliverystatus = this.mDeliveryStatus;
            CatfizGetSlinkExecutor.this.mMessageObject.recipient = CatfizGetSlinkExecutor.this.mRecipient;
            CatfizGetSlinkExecutor.this.mMessageObject.userpin = CatfizGetSlinkExecutor.this.mUserpin;
            CatfizGetSlinkExecutor.this.mMessageObject.sequence = CatfizGetSlinkExecutor.this.mFizzlinkSequence;
            CatfizGetSlinkExecutor.this.mMessageObject.message = this.mMessage;
            if (!(this.mMessage == null || this.mDeliveryStatus == MessageDeliveryStatus.DROP)) {
                CatfizGetSlinkExecutor.this.mMessageObject.message = this.mMessage + " \n" + this.mStatus;
            }
            if (CatfizGetSlinkExecutor.this.mMessageObject.deliverystatus == MessageDeliveryStatus.DROP) {
                CatfizGetSlinkExecutor.this.mMessageObject.message = CatfizGetSlinkExecutor.this.mService.getString(R.string.upload_failed);
            }
            Log.e(CatfizGetSlinkExecutor.TAG, "delivery status" + this.mDeliveryStatus.ordinal());
            if (catfishDataStorage.updateMessageSentStatusNMessage(CatfizGetSlinkExecutor.this.mMessageObject)) {
                CatfishService.signalFizzlinkUpload(catfishDataStorage.getChatConversation(CatfizGetSlinkExecutor.this.mConvKey));
            } else {
                Log.e(CatfizGetSlinkExecutor.TAG, "----DCHATSHARE: FAIL TO UPDATE DELVERY STATUS IN DB");
            }
            CatfizGetSlinkExecutor.this.mMessageObject.recycle();
            CatfizGetSlinkExecutor.this.mMessageObject = null;
        }
    }

    class DataBcastDeliveryStatus implements Runnable {
        private MessageDeliveryStatus mDeliveryStatus = MessageDeliveryStatus.UNDEFINED;

        public DataBcastDeliveryStatus(MessageDeliveryStatus messageDeliveryStatus) {
            this.mDeliveryStatus = messageDeliveryStatus;
        }

        public void run() {
            CatfishDataStorage catfishDataStorage = new CatfishDataStorage(CatfizGetSlinkExecutor.this.mService);
            FriendListDataStorage friendListDataStorage = new FriendListDataStorage(CatfizGetSlinkExecutor.this.mService);
            CatfizGetSlinkExecutor.this.mMessageObject = CatfishMessageObject.obtain();
            CatfizGetSlinkExecutor.this.mMessageObject.deliverystatus = this.mDeliveryStatus;
            CatfizGetSlinkExecutor.this.mMessageObject.recipient = CatfizGetSlinkExecutor.this.mRecipient;
            CatfizGetSlinkExecutor.this.mMessageObject.conversation_key = CatfizGetSlinkExecutor.this.mConvKey;
            CatfizGetSlinkExecutor.this.mMessageObject.sequence = CatfizGetSlinkExecutor.this.mFizzlinkSequence;
            CatfizGetSlinkExecutor.this.mMessageObject.messagetype = MessageType.SHARE_SLINK_AT_COMMENT;
            if (CatfizGetSlinkExecutor.this.mSlink != null) {
                CatfizGetSlinkExecutor.this.mMessageObject.message = "{\"slink\":\"catfiz://m.catfiz.com/" + CatfizGetSlinkExecutor.this.mSlink + "\", \"imagepath\":\"" + CatfizGetSlinkExecutor.this.mDataPath + "\", \"message\":\"" + CatfizGetSlinkExecutor.this.getSlinkFromJson(CatfizGetSlinkExecutor.this.mMessage, ServerMessageDataStorage.MESSAGE) + "\"}";
            }
            friendListDataStorage.updateActivityCount(CatfizGetSlinkExecutor.this.mRecipient, 100);
            Log.e(CatfizGetSlinkExecutor.TAG, "----STATCOMM: mslink " + CatfizGetSlinkExecutor.this.mSlink);
            if (catfishDataStorage.updateBCASTSentStatusNSlinkWKey(CatfizGetSlinkExecutor.this.mMessageObject)) {
                CatfishService.signalFizzlinkUpload(catfishDataStorage.getChatConversation(CatfizGetSlinkExecutor.this.mConvKey));
            } else {
                Log.e(CatfizGetSlinkExecutor.TAG, "----STATCOMM: FAIL TO UPDATE DELVERY STATUS IN DB");
            }
            CatfizGetSlinkExecutor.this.mMessageObject.recycle();
            CatfizGetSlinkExecutor.this.mMessageObject = null;
        }
    }

    class DataForSlinkUpdate implements Runnable {
        private String mslinkForData = null;

        public DataForSlinkUpdate(String str) {
            this.mslinkForData = str;
        }

        public void run() {
            CatfishDataStorage catfishDataStorage = new CatfishDataStorage(CatfizGetSlinkExecutor.this.mService);
            CatfizGetSlinkExecutor.this.mMessageObject = CatfishMessageObject.obtain();
            CatfizGetSlinkExecutor.this.mMessageObject.userpin = CatfizGetSlinkExecutor.this.mObjOwner;
            CatfizGetSlinkExecutor.this.mMessageObject.sequence = CatfizGetSlinkExecutor.this.mObjSequence;
            CatfizGetSlinkExecutor.this.mMessageObject.slink = this.mslinkForData;
            if (!catfishDataStorage.updateMessageToInsertSlink(CatfizGetSlinkExecutor.this.mMessageObject)) {
                Log.e(CatfizGetSlinkExecutor.TAG, "----FIZZLINK: FAIL TO UPDATE SLINK FOR DATAFILE IN DB");
            }
            CatfizGetSlinkExecutor.this.mMessageObject.recycle();
            CatfizGetSlinkExecutor.this.mMessageObject = null;
        }
    }

    class GetSlinkFromServer implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI = null;
        private long mAge = System.currentTimeMillis();
        private boolean mIsSent = false;
        private String mMsg = null;
        public int scheduleNum = CatfizGetSlinkExecutor.PM;
        private boolean send = true;

        public GetSlinkFromServer(String str) {
            this.mMsg = str;
        }

        public void dropRunnable() {
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum += CatfizGetSlinkExecutor.STATUS;
        }

        public void run() {
            Log.d(CatfizGetSlinkExecutor.TAG, "Get slink");
            CatfishResult slink = this.catfishRestAPI.getSlink(CatfizGetSlinkExecutor.this.mServer, CatfizGetSlinkExecutor.this.mUserpin, CatfizGetSlinkExecutor.this.mObjOwner, CatfizGetSlinkExecutor.this.mObjSequence);
            if (slink.hasSuccess()) {
                CatfizGetSlinkExecutor.this.mSlink = slink.slink;
                Log.d(CatfizGetSlinkExecutor.TAG, "masuk slink:" + CatfizGetSlinkExecutor.this.mSource);
                if (CatfizGetSlinkExecutor.this.mSource == 0) {
                    CatfizGetSlinkExecutor.this.mService.postRunnableToService(new SendChatToFriend(this.mMsg));
                } else if (CatfizGetSlinkExecutor.this.mSource == CatfizGetSlinkExecutor.STATUS) {
                    CatfizGetSlinkExecutor.this.mService.postRunnableToService(new BcastCommentToFriendList());
                } else {
                    CatfizGetSlinkExecutor.this.mService.postRunnableToService(new ShareMessageToConv());
                }
            } else if (slink.hasFailure()) {
                Log.d(CatfizGetSlinkExecutor.TAG, "----CHAT GET SLINK: FAILURE !!!: Re Schedule");
                CatfizGetSlinkExecutor catfizGetSlinkExecutor = CatfizGetSlinkExecutor.this;
                CatfizGetSlinkExecutor.this.mService;
                catfizGetSlinkExecutor.mServer = CatfishService.getServerHost();
                CatfizGetSlinkExecutor.this.mService.scheduleRunnableToService(this, CatfizGetSlinkExecutor.PM);
            } else {
                Log.e(CatfizGetSlinkExecutor.TAG, "----CHAT GET SLINK: ERROR: DROP");
                CatfizGetSlinkExecutor.this.sendUpdateStatus(MessageDeliveryStatus.DROP);
            }
            slink.cleaningup();
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    class PoolDeliveryStatus implements Runnable {
        private MessageDeliveryStatus mDeliveryStatus = MessageDeliveryStatus.UNDEFINED;
        private String mMessage = null;
        private String mStatus = null;

        public PoolDeliveryStatus(MessageDeliveryStatus messageDeliveryStatus) {
            this.mDeliveryStatus = messageDeliveryStatus;
        }

        public PoolDeliveryStatus(MessageDeliveryStatus messageDeliveryStatus, String str, String str2) {
            this.mDeliveryStatus = messageDeliveryStatus;
            this.mMessage = str;
            this.mStatus = str2;
        }

        public void run() {
            PoolDataStorage poolDataStorage = new PoolDataStorage(CatfizGetSlinkExecutor.this.mService);
            CatfizGetSlinkExecutor.this.mMessageObject = CatfishMessageObject.obtain();
            CatfizGetSlinkExecutor.this.mMessageObject.deliverystatus = this.mDeliveryStatus;
            CatfizGetSlinkExecutor.this.mMessageObject.sequence = CatfizGetSlinkExecutor.this.mFizzlinkSequence;
            CatfizGetSlinkExecutor.this.mMessageObject.message = "{\"slink\":\"catfiz://m.catfiz.com/" + CatfizGetSlinkExecutor.this.mSlink + "\", \"imagepath\":\"" + CatfizGetSlinkExecutor.this.mDataPath + "\", \"message\":\"" + CatfizGetSlinkExecutor.this.getSlinkFromJson(this.mMessage, ServerMessageDataStorage.MESSAGE) + "\"}";
            CatfizGetSlinkExecutor.this.mMessageObject.slink = CatfizGetSlinkExecutor.this.mSlink;
            CatfizGetSlinkExecutor.this.mMessageObject.topic_key = CatfizGetSlinkExecutor.this.mConvKey;
            poolDataStorage.updateDiscussStatusToSent(CatfizGetSlinkExecutor.this.mMessageObject);
            CatfishService.signalFizzlinkUpload(poolDataStorage.getDiscuss(CatfizGetSlinkExecutor.this.mConvKey));
            CatfizGetSlinkExecutor.this.mMessageObject.recycle();
            CatfizGetSlinkExecutor.this.mMessageObject = null;
        }
    }

    class SendChatToFriend implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI = null;
        private long mAge = System.currentTimeMillis();
        private String msg = null;
        public int scheduleNum = CatfizGetSlinkExecutor.PM;

        public SendChatToFriend(String str) {
            this.msg = str;
        }

        public void dropRunnable() {
            Log.e(CatfizGetSlinkExecutor.TAG, "SEND STATUS COMMENT: SEND ERROR: DROP BY SERVICE !!!");
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum += CatfizGetSlinkExecutor.STATUS;
        }

        public void run() {
            String string = CatfishService.getCatfishPreferences().getString(CatfishService.USERNAME_PREF, null);
            JSONObject jSONObject = new JSONObject();
            try {
                File file = new File(CatfizGetSlinkExecutor.this.mDataPath);
                jSONObject.put(ServerMessageDataStorage.MESSAGE, CatfizGetSlinkExecutor.this.getSlinkFromJson(CatfizGetSlinkExecutor.this.mMessage, ServerMessageDataStorage.MESSAGE));
                jSONObject.put(CatfishDataStorage.NIC_NAME, file.getName());
                jSONObject.put(ServerMessageDataStorage.SLINK, "catfiz://m.catfiz.com/" + CatfizGetSlinkExecutor.this.mSlink);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            Log.d(CatfizGetSlinkExecutor.TAG, "sender: " + string);
            CatfishRESTAPI catfishRESTAPI = this.catfishRestAPI;
            CatfizGetSlinkExecutor.this.mService;
            CatfishResult sendMessage = catfishRESTAPI.sendMessage(CatfishService.getCurrentServerHost(), CatfizGetSlinkExecutor.this.mUserpin, CatfizGetSlinkExecutor.this.mRecipient, MessageType.SHARE_SLINK.ordinal(), jSONObject.toString(), CatfizGetSlinkExecutor.this.mFizzlinkSequence);
            if (sendMessage.hasSuccess()) {
                CatfizGetSlinkExecutor.this.mService.postRunnableToDbThread(new ChatDeliveryStatus(MessageDeliveryStatus.SENT, "{\"slink\":\"catfiz://m.catfiz.com/" + CatfizGetSlinkExecutor.this.mSlink + "\", \"imagepath\":\"" + CatfizGetSlinkExecutor.this.mDataPath + "\", \"message\":\"" + CatfizGetSlinkExecutor.this.getSlinkFromJson(this.msg, ServerMessageDataStorage.MESSAGE) + "\"}", CatfizGetSlinkExecutor.this.mService.getString(R.string.user_send_completed)));
                Log.d(CatfizGetSlinkExecutor.TAG, "sended to recipient: " + CatfizGetSlinkExecutor.this.mRecipient);
            } else if (sendMessage.hasFailure()) {
                CatfizGetSlinkExecutor.this.mServer = CatfishService.getServerHost();
                CatfizGetSlinkExecutor.this.mService.scheduleRunnableToService(this, CatfizGetSlinkExecutor.PM);
            } else {
                Log.e(CatfizGetSlinkExecutor.TAG, "SEND CHAT TO FRIEND: SEND ERROR: DROP !!!");
                CatfizGetSlinkExecutor.this.sendUpdateStatus(MessageDeliveryStatus.DROP);
            }
            sendMessage.cleaningup();
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    class SetDsName implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI = null;
        private long mAge = System.currentTimeMillis();
        private boolean mIsSent = false;
        private String mMsgsetdsname = null;
        public int scheduleNum = CatfizGetSlinkExecutor.PM;
        private boolean send = true;

        public SetDsName(String str) {
            this.mMsgsetdsname = str;
        }

        public void dropRunnable() {
        }

        public long getAge() {
            return this.mAge;
        }

        public String getMimeType(String str) {
            String fileExtensionFromUrl = MimeTypeMap.getFileExtensionFromUrl(str);
            return fileExtensionFromUrl != null ? MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtensionFromUrl) : null;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum += CatfizGetSlinkExecutor.STATUS;
        }

        public void run() {
            Log.d(CatfizGetSlinkExecutor.TAG, "Set DS name:" + CatfizGetSlinkExecutor.this.mMessage);
            String safeFileName = Utils.getSafeFileName(CatfizGetSlinkExecutor.this.mDataFile.getName());
            int fizzlinkTypeFromExtension = FizzlinkUtil.getFizzlinkTypeFromExtension(CatfizGetSlinkExecutor.this.mDataFile);
            String str = this.mMsgsetdsname;
            CatfishResult dsName = this.catfishRestAPI.setDsName(CatfizGetSlinkExecutor.this.mServer, CatfizGetSlinkExecutor.this.mUserpin, CatfizGetSlinkExecutor.this.mObjOwner, CatfizGetSlinkExecutor.this.mObjSequence, safeFileName, fizzlinkTypeFromExtension, this.mMsgsetdsname != null ? this.mMsgsetdsname : "");
            if (dsName.hasSuccess()) {
                CatfizGetSlinkExecutor.this.mService.postRunnableToService(new GetSlinkFromServer(this.mMsgsetdsname));
            } else if (dsName.hasFailure()) {
                Log.d(CatfizGetSlinkExecutor.TAG, "----STATCOMM: FAILURE !!!: Re Schedule");
                CatfizGetSlinkExecutor catfizGetSlinkExecutor = CatfizGetSlinkExecutor.this;
                CatfizGetSlinkExecutor.this.mService;
                catfizGetSlinkExecutor.mServer = CatfishService.getServerHost();
                CatfizGetSlinkExecutor.this.mService.scheduleRunnableToService(this, CatfizGetSlinkExecutor.PM);
            } else {
                Log.e(CatfizGetSlinkExecutor.TAG, "----STATCOMM: SETDSNAME ERROR: DROP");
                CatfizGetSlinkExecutor.this.sendUpdateStatus(MessageDeliveryStatus.DROP);
            }
            dsName.cleaningup();
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    class ShareMessageToConv implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        public int scheduleNum;

        private ShareMessageToConv() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.scheduleNum = CatfizGetSlinkExecutor.PM;
        }

        public void dropRunnable() {
            Log.e(CatfizGetSlinkExecutor.TAG, "SEND MESSAGE TO CONV: SEND ERROR: DROP BY SERVICE !!!");
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum += CatfizGetSlinkExecutor.STATUS;
        }

        public void run() {
            Log.d(CatfizGetSlinkExecutor.TAG, "share to conv:" + CatfizGetSlinkExecutor.this.mConvKey);
            String string = CatfishService.getCatfishPreferences().getString(CatfishService.USERNAME_PREF, null);
            JSONObject jSONObject = new JSONObject();
            try {
                File file = new File(CatfizGetSlinkExecutor.this.mDataPath);
                jSONObject.put(ServerMessageDataStorage.MESSAGE, CatfizGetSlinkExecutor.this.getSlinkFromJson(CatfizGetSlinkExecutor.this.mMessage, ServerMessageDataStorage.MESSAGE));
                jSONObject.put(CatfishDataStorage.NIC_NAME, file.getName());
                jSONObject.put(ServerMessageDataStorage.SLINK, "catfiz://m.catfiz.com/" + CatfizGetSlinkExecutor.this.mSlink);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            CatfishRESTAPI catfishRESTAPI = this.catfishRestAPI;
            CatfizGetSlinkExecutor.this.mService;
            CatfishResult conferenceSendMessage = catfishRESTAPI.conferenceSendMessage(CatfishService.getCurrentServerHost(), CatfizGetSlinkExecutor.this.mUserpin, string, CatfizGetSlinkExecutor.this.mConvKey.split(":")[CatfizGetSlinkExecutor.PM], Long.parseLong(CatfizGetSlinkExecutor.this.mConvKey.split(":")[CatfizGetSlinkExecutor.STATUS]), MessageType.SHARE_SLINK_AT_POOL.ordinal(), jSONObject.toString(), CatfizGetSlinkExecutor.this.mFizzlinkSequence);
            if (conferenceSendMessage.hasSuccess()) {
                CatfizGetSlinkExecutor.this.mService.postRunnableToDbThread(new PoolDeliveryStatus(MessageDeliveryStatus.SENT, CatfizGetSlinkExecutor.this.mMessage, CatfizGetSlinkExecutor.this.mService.getString(R.string.user_send_completed)));
            } else if (conferenceSendMessage.hasFailure()) {
                CatfizGetSlinkExecutor.this.mServer = CatfishService.getServerHost();
                CatfizGetSlinkExecutor.this.mService.scheduleRunnableToService(this, CatfizGetSlinkExecutor.PM);
            } else if (!conferenceSendMessage.hasInvalidTopic() && !conferenceSendMessage.hasInvalidMemberTopic() && !conferenceSendMessage.hasInvalidActionTopic()) {
                CatfizGetSlinkExecutor.this.mService.postRunnableToDbThread(new PoolDeliveryStatus(MessageDeliveryStatus.DROP));
            }
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    public CatfizGetSlinkExecutor(CatfishService catfishService, ICatfishClientInterface iCatfishClientInterface, Context context, String str, String str2, long j, String str3, String str4, int i, String str5, String str6, long j2, long j3) {
        this.mMessageObject = null;
        this.mSlink = null;
        this.mFizzlinkSequence = 0;
        this.mstatusSequence = 0;
        this.mUserpin = null;
        this.mObjOwner = null;
        this.mObjSequence = 0;
        this.mDataPath = null;
        this.mMessage = null;
        this.mDataFile = null;
        this.mFilename = null;
        this.mContext = null;
        this.mService = null;
        this.mServiceBinder = null;
        this.mServer = null;
        this.mClientInterface = null;
        this.mConvKey = null;
        this.mRecipient = null;
        this.dataFizzlink = null;
        this.mUserpin = CatfishService.getUserPIN();
        this.mObjOwner = str2;
        this.mObjSequence = j;
        this.mDataPath = str3;
        this.mMessage = str4;
        this.mSource = i;
        this.mContext = context;
        this.mClientInterface = iCatfishClientInterface;
        this.mService = catfishService;
        this.mServer = str;
        this.mDataFile = new File(str3);
        this.mFilename = this.mDataFile.getName();
        this.mRecipient = str5;
        Log.d(TAG, "convkey on getslink:" + str6);
        this.mConvKey = str6;
        this.mFizzlinkSequence = j2;
        this.mstatusSequence = j3;
    }

    public String getSlinkFromJson(String str, String str2) {
        try {
            JSONObject jSONObject = new JSONObject(str);
            if (str2.compareTo(ChunkStorage.DATA_TABLE_NAME) == 0) {
                return jSONObject.has(ServerMessageDataStorage.IMAGEPATH) ? jSONObject.getString(ServerMessageDataStorage.IMAGEPATH) : jSONObject.has(ObjectCommentDataStorage.DATAPATH) ? jSONObject.getString(ObjectCommentDataStorage.DATAPATH) : null;
            } else {
                if (!jSONObject.has(str2)) {
                    return null;
                }
                String string = jSONObject.getString(str2);
                Log.e(TAG, "slink:@" + str2 + "@ datae:" + string);
                return string;
            }
        } catch (Exception e) {
            Log.e(TAG, "Error: " + e.toString());
            return null;
        }
    }

    public void run() {
        Log.d(TAG, "Running get Slink");
        this.mService.postRunnableToService(new SetDsName(this.mMessage));
    }

    public void sendUpdateStatus(MessageDeliveryStatus messageDeliveryStatus) {
        if (this.mSource == 0) {
            this.mService.postRunnableToDbThread(new ChatDeliveryStatus(messageDeliveryStatus));
        }
    }
}
