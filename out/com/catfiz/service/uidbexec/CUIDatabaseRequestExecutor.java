package com.catfiz.service.uidbexec;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.support.v4.content.LocalBroadcastManager;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.widget.Toast;
import com.catfiz.R;
import com.catfiz.backup.LocalBackup;
import com.catfiz.intents.BroadcastIntents;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.notificationfront.NotificationFrontResponse;
import com.catfiz.pool.LongMessageUploadExecutor;
import com.catfiz.pool.PoolDataDeleteExecutor;
import com.catfiz.pool.PoolDataStorage;
import com.catfiz.pool.PoolDataUploadExecutor;
import com.catfiz.pool.PoolDataUploadExecutor.PoolDataType;
import com.catfiz.pool.PoolLimitedDownloadExecutor;
import com.catfiz.pool.PoolServiceExecutor;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishMessageObject;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.CatfishService;
import com.catfiz.service.CatfishUIBinder.DatabaseRequestOP;
import com.catfiz.service.CatfishUIBinder.LongMessageOperation;
import com.catfiz.service.CatfishUIBinder.ServiceERRORCode;
import com.catfiz.service.CatfishUIBinder.ServiceOP;
import com.catfiz.service.FizzlinkDataStorage;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.service.FriendListUpdateExecutor;
import com.catfiz.service.ICatfishClientInterface;
import com.catfiz.service.ICatfishUIBinder;
import com.catfiz.service.LongMessageExecutor;
import com.catfiz.service.P2PUploadExecutor;
import com.catfiz.service.PinManagerV2;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.service.uiresponse.CUIDatabaseResponse;
import com.catfiz.service.uiresponse.CUIDatabaseResponseDoubleCursor;
import com.catfiz.service.uiresponse.CUIGroupIsMuteResponse;
import com.catfiz.service.uiresponse.CUIOnHasLastTimeStamp;
import com.catfiz.service.uiresponse.CUIResponseErrorExecutor;
import com.catfiz.service.uiresponse.CUIResponseExecutor;
import com.catfiz.service.uisvcexec.CUIServiceExecutor;
import com.catfiz.service.uisvcexec.DeletePendingRequestFriendExecutor;
import com.catfiz.service.uisvcexec.GetUserDataProfileExecutor;
import com.catfiz.service.uisvcexec.UIClientSendLongMessageExecutor;
import com.catfiz.service.uisvcexec.UIClientSendMessageConvKeyExecutor;
import com.catfiz.service.uisvcexec.UIClientSendMessageWTypeExecutor;
import com.catfiz.service.uisvcexec.UpdateFriendExecutor;
import com.catfiz.service.uisvcexec.UpdateFriendExecutor.UpdateFriendAction;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.svcpersistent.CommonMessageInfo.MessageContext;
import com.catfiz.svcpersistent.TaskDataStorage;
import com.catfiz.util.FizzlinkUtil;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.HttpStatus;
import org.apache.http.conn.params.ConnManagerParams;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.LangUtils;
import org.json.JSONException;
import org.json.JSONObject;

public class CUIDatabaseRequestExecutor extends CUIDatabaseExecutorBase {
    public static final String PREFERENCE_NAME = "com.catfiz.preference";
    private static final String TAG = "CUIDatabaseRequestExecutor";
    private CatfishMessageObject message = null;

    /* synthetic */ class AnonymousClass2 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP = new int[DatabaseRequestOP.values().length];
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishUIBinder$LongMessageOperation = new int[LongMessageOperation.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$LongMessageOperation[LongMessageOperation.CONCATEJSONMESSAGE.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$LongMessageOperation[LongMessageOperation.CREATEJSONMESSAGE_POOL_SENDVIADS.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$LongMessageOperation[LongMessageOperation.CREATEJSONMESSAGE_CHAT_SENDVIADS.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$LongMessageOperation[LongMessageOperation.CREATEJSONMESSAGE_POOL.ordinal()] = 4;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$LongMessageOperation[LongMessageOperation.CREATEJSONMESSAGE_CHAT.ordinal()] = 5;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.SEND_SVGEMOTION.ordinal()] = 1;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.NOTIFYFRD_NAMEUPDATE.ordinal()] = 2;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.NOTIFYFRD_STATUSUPDATE.ordinal()] = 3;
            } catch (NoSuchFieldError e8) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.NOTIFYFRD_PROFILEUPDATE.ordinal()] = 4;
            } catch (NoSuchFieldError e9) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.NOTIFYFRD_USERACTIVITYUPDATE.ordinal()] = 5;
            } catch (NoSuchFieldError e10) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.NIC_PROFILE.ordinal()] = 6;
            } catch (NoSuchFieldError e11) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.NIC_PROFILE_UPDATE.ordinal()] = 7;
            } catch (NoSuchFieldError e12) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.STORE_NIC_PROFILE_CACHE.ordinal()] = 8;
            } catch (NoSuchFieldError e13) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_FRIEND_ALIAS.ordinal()] = 9;
            } catch (NoSuchFieldError e14) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.POOL_SET_MUTE.ordinal()] = 10;
            } catch (NoSuchFieldError e15) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.POOL_IS_MUTE.ordinal()] = 11;
            } catch (NoSuchFieldError e16) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.CEK_OUR_DATAPROFILE.ordinal()] = 12;
            } catch (NoSuchFieldError e17) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.CREATE_TOPIC_CONV.ordinal()] = 13;
            } catch (NoSuchFieldError e18) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.CHANGE_POOL_TITLE.ordinal()] = 14;
            } catch (NoSuchFieldError e19) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.CHANGE_POOL_TOPIC_MESSAGE.ordinal()] = 15;
            } catch (NoSuchFieldError e20) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.SEND_POOL_SLINK.ordinal()] = 16;
            } catch (NoSuchFieldError e21) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.SEND_CONV_MESSAGE.ordinal()] = 17;
            } catch (NoSuchFieldError e22) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_ALL_TOPICS.ordinal()] = 18;
            } catch (NoSuchFieldError e23) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_PENDING_TOPICS.ordinal()] = 19;
            } catch (NoSuchFieldError e24) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_LAST_TIMESTAMP.ordinal()] = 20;
            } catch (NoSuchFieldError e25) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_POOL_DISCUSS.ordinal()] = 21;
            } catch (NoSuchFieldError e26) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_POOL_DISCUSS_WITH_LIMIT.ordinal()] = 22;
            } catch (NoSuchFieldError e27) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_POOL_DISCUSS_COUNT.ordinal()] = 23;
            } catch (NoSuchFieldError e28) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_CONFERENCE_MEMBER.ordinal()] = 24;
            } catch (NoSuchFieldError e29) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.SEARCH_CONFERENCE_MEMBER.ordinal()] = 25;
            } catch (NoSuchFieldError e30) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_POOL_LIKE_LIST.ordinal()] = 26;
            } catch (NoSuchFieldError e31) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.UPDATEPOOLSTATUSTOSENT.ordinal()] = 27;
            } catch (NoSuchFieldError e32) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.DROP_CONFERENCE.ordinal()] = 28;
            } catch (NoSuchFieldError e33) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.ACCEPT_CONFERENCE.ordinal()] = 29;
            } catch (NoSuchFieldError e34) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.LEAVE_CONFERENCE.ordinal()] = 30;
            } catch (NoSuchFieldError e35) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.DELETE_CONFERENCE.ordinal()] = 31;
            } catch (NoSuchFieldError e36) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.DELETE_INVALID_TOPIC.ordinal()] = 32;
            } catch (NoSuchFieldError e37) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.CLEAR_CONFERENCE.ordinal()] = 33;
            } catch (NoSuchFieldError e38) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.CLEAR_ALL_CONFERENCE.ordinal()] = 34;
            } catch (NoSuchFieldError e39) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.SAVE_CONFERENCE.ordinal()] = 35;
            } catch (NoSuchFieldError e40) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.AFTERSENDLONGMESSAGE.ordinal()] = 36;
            } catch (NoSuchFieldError e41) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.DELETE_CONFERENCE_MEMBER.ordinal()] = 37;
            } catch (NoSuchFieldError e42) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.DOWNLOAD_CONFERENCE_DATA.ordinal()] = 38;
            } catch (NoSuchFieldError e43) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.PROMOTE_FRIEND_IN_CONFERENCE.ordinal()] = 39;
            } catch (NoSuchFieldError e44) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.SHARE_PHOTO_IN_CONFERENCE.ordinal()] = 40;
            } catch (NoSuchFieldError e45) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.SEND_POOL_RESPONSE.ordinal()] = 41;
            } catch (NoSuchFieldError e46) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_SERVER_MESSAGE.ordinal()] = 42;
            } catch (NoSuchFieldError e47) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.CONF_USERNAMECHAGED.ordinal()] = 43;
            } catch (NoSuchFieldError e48) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.DELETE_SINGLE_FIZZLINK.ordinal()] = 44;
            } catch (NoSuchFieldError e49) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.UPLOAD_FIZZLINK_LIST.ordinal()] = 45;
            } catch (NoSuchFieldError e50) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_MY_PROFILE.ordinal()] = 46;
            } catch (NoSuchFieldError e51) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_ALL_CONTACTS.ordinal()] = 47;
            } catch (NoSuchFieldError e52) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_CONTACTS_LIKE.ordinal()] = 48;
            } catch (NoSuchFieldError e53) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_CONTACTS_CATEGORY_LIKE.ordinal()] = 49;
            } catch (NoSuchFieldError e54) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_USER_CATEGORIES.ordinal()] = 50;
            } catch (NoSuchFieldError e55) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_ALL_PENDINGREQ.ordinal()] = 51;
            } catch (NoSuchFieldError e56) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_ALL_FRIENDREQ.ordinal()] = 52;
            } catch (NoSuchFieldError e57) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_ALL_NOTIFICATION.ordinal()] = 53;
            } catch (NoSuchFieldError e58) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.CHECK_IS_FRIEND.ordinal()] = 54;
            } catch (NoSuchFieldError e59) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.ADDPENDINGREQ.ordinal()] = 55;
            } catch (NoSuchFieldError e60) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.RESENDINGADDREQ.ordinal()] = 56;
            } catch (NoSuchFieldError e61) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.UPDATE_RECIPIENTNAME_BLACKLISTNIC.ordinal()] = 57;
            } catch (NoSuchFieldError e62) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.UPDATE_RECIPIENTNAME_NICMSG.ordinal()] = 58;
            } catch (NoSuchFieldError e63) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.UPDATE_PENDINGREQ.ordinal()] = 59;
            } catch (NoSuchFieldError e64) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.DROP_PENDINGREQ.ordinal()] = 60;
            } catch (NoSuchFieldError e65) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.DELETEPENDINGREQ.ordinal()] = 61;
            } catch (NoSuchFieldError e66) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.IGNORE_FRIEND.ordinal()] = 62;
            } catch (NoSuchFieldError e67) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.IGNORE_ALL_FRIEND.ordinal()] = 63;
            } catch (NoSuchFieldError e68) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.ACCEPT_FRIEND_PARTIAL.ordinal()] = 64;
            } catch (NoSuchFieldError e69) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.ACCEPT_ALL_FRIEND.ordinal()] = 65;
            } catch (NoSuchFieldError e70) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.ACCEPT_FRIEND_COMMIT.ordinal()] = 66;
            } catch (NoSuchFieldError e71) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_NIC_MESSAGE.ordinal()] = 67;
            } catch (NoSuchFieldError e72) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_NIC_MESSAGE_CONV.ordinal()] = 68;
            } catch (NoSuchFieldError e73) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.DELETE_NIC_MESSAGE.ordinal()] = 69;
            } catch (NoSuchFieldError e74) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.DELETE_CONVERSATION.ordinal()] = 70;
            } catch (NoSuchFieldError e75) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.DELETE_SINGGLE_MESSAGE.ordinal()] = 71;
            } catch (NoSuchFieldError e76) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.DELETE_STATCOMM_CONVERSATION.ordinal()] = 72;
            } catch (NoSuchFieldError e77) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.UPDATE_STICKER_AUTOPLAY.ordinal()] = 73;
            } catch (NoSuchFieldError e78) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.UPDATE_STICKER_AUTOPLAYPOOL.ordinal()] = 74;
            } catch (NoSuchFieldError e79) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.SETUSERSTATUS_DELETEOLDSTATUS.ordinal()] = 75;
            } catch (NoSuchFieldError e80) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.SEND_NIC_MESSAGE.ordinal()] = 76;
            } catch (NoSuchFieldError e81) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.STORE_FIZZLINK_FROM_RECIPIENT.ordinal()] = 77;
            } catch (NoSuchFieldError e82) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_UNREAD_STATUS_COMMENT_COUNT.ordinal()] = 78;
            } catch (NoSuchFieldError e83) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.DISABLE_STATUS_BUTTON.ordinal()] = 79;
            } catch (NoSuchFieldError e84) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_ALL_RECENTUPDATES.ordinal()] = 80;
            } catch (NoSuchFieldError e85) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.DELETE_ALL_RECENTUPDATES.ordinal()] = 81;
            } catch (NoSuchFieldError e86) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.DELETE_FRIEND.ordinal()] = 82;
            } catch (NoSuchFieldError e87) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.MULTIPLE_DELETE_FRIEND.ordinal()] = 83;
            } catch (NoSuchFieldError e88) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.MULTIPLE_MOVE_FRIEND.ordinal()] = 84;
            } catch (NoSuchFieldError e89) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.SET_MESSAGES_AS_READ.ordinal()] = 85;
            } catch (NoSuchFieldError e90) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.SET_STATCOMM_AS_READ.ordinal()] = 86;
            } catch (NoSuchFieldError e91) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.SAVE_DATA_PROFILE.ordinal()] = 87;
            } catch (NoSuchFieldError e92) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.SAVE_DOWNLOADED_USER_ACTIVITY.ordinal()] = 88;
            } catch (NoSuchFieldError e93) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.UPDATE_FRIENDPROFILE.ordinal()] = 89;
            } catch (NoSuchFieldError e94) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.SAVE_USER_ACTIVITY.ordinal()] = 90;
            } catch (NoSuchFieldError e95) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.SAVE_PROFILE.ordinal()] = 91;
            } catch (NoSuchFieldError e96) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.SAVE_PROFILE_BYUSER.ordinal()] = 92;
            } catch (NoSuchFieldError e97) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.SET_POOL_DISCUSS_AS_READ.ordinal()] = 93;
            } catch (NoSuchFieldError e98) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.SAVE_CHAT.ordinal()] = 94;
            } catch (NoSuchFieldError e99) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.DELETE_ALL_CHAT.ordinal()] = 95;
            } catch (NoSuchFieldError e100) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.DELETE_ALL_STATUSCOM.ordinal()] = 96;
            } catch (NoSuchFieldError e101) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_CHILD_GROUP_CONTACT.ordinal()] = 97;
            } catch (NoSuchFieldError e102) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.REFRESH_ALL_GROUP_CONTACT.ordinal()] = 98;
            } catch (NoSuchFieldError e103) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_GROUP_CONTACT.ordinal()] = 99;
            } catch (NoSuchFieldError e104) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.ADD_CATEGORY.ordinal()] = 100;
            } catch (NoSuchFieldError e105) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.MOVE_TO_CATEGORY.ordinal()] = HttpStatus.SC_SWITCHING_PROTOCOLS;
            } catch (NoSuchFieldError e106) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.REMOVE_FROM_CATEGORY.ordinal()] = HttpStatus.SC_PROCESSING;
            } catch (NoSuchFieldError e107) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.REMOVE_MULTIPLE_FROM_CATEGORY.ordinal()] = R.styleable.Theme_checkedTextViewStyle;
            } catch (NoSuchFieldError e108) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.REMOVE_FROM_MULTIPLE_CATEGORY.ordinal()] = R.styleable.Theme_editTextStyle;
            } catch (NoSuchFieldError e109) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.ADD_TO_CATEGORY.ordinal()] = R.styleable.Theme_radioButtonStyle;
            } catch (NoSuchFieldError e110) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.ADD_MULTIPLE_TO_CATEGORY.ordinal()] = R.styleable.Theme_ratingBarStyle;
            } catch (NoSuchFieldError e111) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.ADD_TO_MULTIPLE_CATEGORY.ordinal()] = R.styleable.Theme_seekBarStyle;
            } catch (NoSuchFieldError e112) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_CHAT_MULTIMEDIA.ordinal()] = R.styleable.Theme_spinnerStyle;
            } catch (NoSuchFieldError e113) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_SINGLE_DISCUSS.ordinal()] = R.styleable.Theme_switchStyle;
            } catch (NoSuchFieldError e114) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_SINGLE_MESSAGE.ordinal()] = 110;
            } catch (NoSuchFieldError e115) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.GET_ALL_MULTIMEDIA_DATA_POOL.ordinal()] = 111;
            } catch (NoSuchFieldError e116) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.DELETE_CATEGORY.ordinal()] = 112;
            } catch (NoSuchFieldError e117) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.UPDATE_FRIEND_REQUESTER_PROFILE.ordinal()] = 113;
            } catch (NoSuchFieldError e118) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.UPDATE_ALL_FRIENDS.ordinal()] = 114;
            } catch (NoSuchFieldError e119) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.UPDATE_STATUS_FRIENDS.ordinal()] = 115;
            } catch (NoSuchFieldError e120) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.UPDATE_PHOTO_FRIENDS.ordinal()] = 116;
            } catch (NoSuchFieldError e121) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.UPDATE_FRIEND_PHOTOUPDATE_MARK.ordinal()] = 117;
            } catch (NoSuchFieldError e122) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[DatabaseRequestOP.UPDATE_FRIEND_STATUSUPDATE_MARK.ordinal()] = 118;
            } catch (NoSuchFieldError e123) {
            }
        }
    }

    public class LongMessageRunnable implements Runnable {
        private LongMessageOperation lmo = null;
        private ICatfishUIBinder mIBinder = null;
        private ICatfishClientInterface mInterfaceClient = null;
        private CatfishMessageObject mMessage = null;

        public LongMessageRunnable(ICatfishUIBinder iCatfishUIBinder, ICatfishClientInterface iCatfishClientInterface, CatfishMessageObject catfishMessageObject, LongMessageOperation longMessageOperation) {
            this.mInterfaceClient = iCatfishClientInterface;
            this.mMessage = catfishMessageObject;
            this.lmo = longMessageOperation;
            this.mIBinder = iCatfishUIBinder;
        }

        private CatfishService getCatfishService() {
            return CatfishService.getServiceInstance();
        }

        public void run() {
            int i = 0;
            CatfishService catfishService;
            ICatfishUIBinder iCatfishUIBinder;
            ICatfishClientInterface iCatfishClientInterface;
            CatfishService catfishService2;
            switch (AnonymousClass2.$SwitchMap$com$catfiz$service$CatfishUIBinder$LongMessageOperation[this.lmo.ordinal()]) {
                case e.c /*2*/:
                    String saveSentLongMessageToFile = new LongMessageExecutor(this.mMessage.message, this.mMessage.sequence).saveSentLongMessageToFile();
                    catfishService = getCatfishService();
                    iCatfishUIBinder = this.mIBinder;
                    iCatfishClientInterface = this.mInterfaceClient;
                    CatfishService catfishService3 = getCatfishService();
                    getCatfishService();
                    catfishService.postToDBHandler(new LongMessageUploadExecutor(iCatfishUIBinder, iCatfishClientInterface, catfishService3, CatfishService.getCurrentServerHost(), this.mMessage.userpin, this.mMessage.username, this.mMessage.topic_key, saveSentLongMessageToFile, this.mMessage));
                    getCatfishService().postToDBHandler(new CUIDatabaseRequestExecutor(this.mIBinder, this.mInterfaceClient, this.mMessage, DatabaseRequestOP.AFTERSENDLONGMESSAGE));
                    return;
                case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                    String saveSentLongMessageToFile2 = new LongMessageExecutor(this.mMessage.message, this.mMessage.sequence).saveSentLongMessageToFile();
                    String substring = this.mMessage.message.substring(0, LongMessageExecutor.LONG_MESSAGE_CHAR_PREVIEW);
                    CatfishService catfishService4 = getCatfishService();
                    catfishService2 = getCatfishService();
                    getCatfishService();
                    catfishService4.postToServiceHandler(new P2PUploadExecutor(catfishService2, CatfishService.getCurrentServerHost(), this.mMessage.userpin, this.mMessage.recipient, this.mMessage.sequence, 6, substring, new File(saveSentLongMessageToFile2)), 2);
                    getCatfishService().postToDBHandler(new CUIDBGetChatConvExecutor(this.mInterfaceClient, this.mMessage));
                    return;
                case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                    ArrayList createJSONMessage = new LongMessageExecutor(this.mMessage.message, this.mMessage.sequence).createJSONMessage();
                    int size = createJSONMessage.size();
                    for (int i2 = 0; i2 < size; i2++) {
                        CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
                        catfishMessageObject.userpin = this.mMessage.userpin;
                        catfishMessageObject.username = this.mMessage.username;
                        catfishMessageObject.topic_key = this.mMessage.topic_key;
                        catfishMessageObject.messagetype = MessageType.LONG_MESSAGE;
                        catfishMessageObject.object_owner = this.mMessage.topic_key.split(":")[0];
                        catfishMessageObject.object_sequence = Long.parseLong(this.mMessage.topic_key.split(":")[1]);
                        catfishMessageObject.sequence = this.mMessage.sequence;
                        catfishMessageObject.rcvtimestamp = this.mMessage.sequence;
                        catfishMessageObject.message = (String) createJSONMessage.get(i2);
                        catfishService = getCatfishService();
                        iCatfishUIBinder = this.mIBinder;
                        iCatfishClientInterface = this.mInterfaceClient;
                        getCatfishService();
                        catfishService.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), catfishMessageObject, ServiceOP.SERVICEOP_UICLIENT_SEND_MESSAGE_CONV));
                    }
                    getCatfishService().postToDBHandler(new CUIDatabaseRequestExecutor(this.mIBinder, this.mInterfaceClient, this.mMessage, DatabaseRequestOP.AFTERSENDLONGMESSAGE));
                    return;
                case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                    ArrayList createJSONMessageByte = new LongMessageExecutor(this.mMessage.message, this.mMessage.sequence).createJSONMessageByte();
                    int size2 = createJSONMessageByte.size();
                    while (i < size2) {
                        CatfishMessageObject catfishMessageObject2 = new CatfishMessageObject();
                        catfishMessageObject2.userpin = this.mMessage.userpin;
                        catfishMessageObject2.messagetype = MessageType.LONG_MESSAGE;
                        catfishMessageObject2.sequence = this.mMessage.sequence;
                        catfishMessageObject2.rcvtimestamp = this.mMessage.sequence;
                        catfishMessageObject2.recipient = this.mMessage.recipient;
                        catfishMessageObject2.messagebyte = (byte[]) createJSONMessageByte.get(i);
                        CatfishService catfishService5 = getCatfishService();
                        iCatfishUIBinder = this.mIBinder;
                        catfishService2 = getCatfishService();
                        getCatfishService();
                        catfishService5.postToServiceHandler(new UIClientSendLongMessageExecutor(iCatfishUIBinder, catfishService2, CatfishService.getCurrentServerHost(), this.mInterfaceClient, catfishMessageObject2), 1);
                        i++;
                    }
                    return;
                default:
                    return;
            }
        }
    }

    public CUIDatabaseRequestExecutor(ICatfishUIBinder iCatfishUIBinder, ICatfishClientInterface iCatfishClientInterface, CatfishMessageObject catfishMessageObject, DatabaseRequestOP databaseRequestOP) {
        super(iCatfishUIBinder, iCatfishClientInterface, catfishMessageObject, databaseRequestOP);
        this.message = catfishMessageObject;
    }

    public CUIDatabaseRequestExecutor(ICatfishUIBinder iCatfishUIBinder, ICatfishClientInterface iCatfishClientInterface, DatabaseRequestOP databaseRequestOP) {
        super(iCatfishUIBinder, iCatfishClientInterface, databaseRequestOP);
    }

    public String applicationLabel(Context context, ApplicationInfo applicationInfo) {
        return context.getPackageManager().getApplicationLabel(applicationInfo).toString();
    }

    public String createActivityJson(String[][] strArr) {
        try {
            JSONObject jSONObject = new JSONObject();
            for (int i = 0; i < strArr.length; i++) {
                jSONObject.put(strArr[i][0], strArr[i][1]);
            }
            return jSONObject.toString();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public boolean deleteDataFiles(Cursor cursor, int i) {
        if (cursor.getCount() <= 0) {
            Log.e(TAG, "Deleting files but 0 files found.");
            cursor.close();
            return false;
        }
        cursor.moveToFirst();
        boolean z = false;
        for (int i2 = 0; i2 < i; i2++) {
            Log.d(TAG, "deleted datafiles:" + cursor.getString(0));
            File file = new File(cursor.getString(0));
            if (file.exists() && file.delete()) {
                z = true;
            }
            cursor.moveToNext();
        }
        cursor.close();
        return z;
    }

    public boolean deleteImageFiles(Cursor cursor, int i) {
        if (cursor.getCount() <= 0) {
            Log.e(TAG, "Deleting imagefiles but 0 files found.");
            cursor.close();
            return false;
        }
        cursor.moveToFirst();
        boolean z = false;
        for (int i2 = 0; i2 < i; i2++) {
            Log.d(TAG, "to deleted imagefile:" + cursor.getString(0));
            File file = new File(cursor.getString(0));
            if (file.exists() && file.delete()) {
                z = true;
            }
            cursor.moveToNext();
        }
        cursor.close();
        return z;
    }

    public boolean deleteImageThumbs(Cursor cursor, int i) {
        if (cursor.getCount() <= 0) {
            Log.e(TAG, "Deleting imagethumbs but 0 files found.");
            cursor.close();
            return false;
        }
        cursor.moveToFirst();
        boolean z = false;
        for (int i2 = 0; i2 < i; i2++) {
            Log.d(TAG, "Deleting: " + cursor.getString(0));
            try {
                File file = new File(new URI(cursor.getString(0)));
                if (file.exists() && file.delete()) {
                    z = true;
                }
            } catch (Exception e) {
                e.printStackTrace();
                Log.e(TAG, "Error: See the log");
            }
            cursor.moveToNext();
        }
        cursor.close();
        return z;
    }

    public boolean deleteLongMessageFiles(Cursor cursor, int i) {
        if (cursor.getCount() <= 0) {
            Log.e(TAG, "Deleting imagefiles but 0 files found.");
            cursor.close();
            return false;
        }
        cursor.moveToFirst();
        for (int i2 = 0; i2 < i; i2++) {
            Log.d(TAG, "to deleted longmessage:" + cursor.getString(0));
            LongMessageExecutor.deleteLongMessage(cursor.getLong(cursor.getColumnIndex(ServerMessageDataStorage.SEQUENCE)));
            cursor.moveToNext();
        }
        cursor.close();
        return true;
    }

    public void deletePromoteFriendImage(Cursor cursor, int i) {
        if (cursor.getCount() <= 0) {
            Log.e(TAG, "Deleting promoted friend imagefiles but 0 files found.");
            cursor.close();
            return;
        }
        cursor.moveToFirst();
        for (int i2 = 0; i2 < i; i2++) {
            File file = new File(CatfishPhotoStorage.getImageStorageDir(getCatfishService().getApplicationContext()) + "/img" + getContactPin(cursor.getString(0)) + ".jpg");
            if (file.exists()) {
                file.delete();
            }
            cursor.moveToNext();
        }
        cursor.close();
    }

    public boolean deleteVideoFiles(Cursor cursor, int i) {
        if (cursor.getCount() <= 0) {
            Log.e(TAG, "Deleting imagefiles but 0 files found.");
            cursor.close();
            return false;
        }
        cursor.moveToFirst();
        boolean z = false;
        for (int i2 = 0; i2 < i; i2++) {
            Log.d(TAG, "to deleted imagefile:" + cursor.getString(0));
            File file = new File(cursor.getString(0));
            if (file.exists() && file.delete()) {
                z = true;
            }
            cursor.moveToNext();
        }
        cursor.close();
        return z;
    }

    public boolean deleteVoiceFiles(Cursor cursor, int i) {
        if (cursor.getCount() <= 0) {
            Log.e(TAG, "Deleting voicefiles but 0 files found.");
            cursor.close();
            return false;
        }
        cursor.moveToFirst();
        boolean z = false;
        for (int i2 = 0; i2 < i; i2++) {
            Log.d(TAG, "to deleted voicefile:" + cursor.getString(0));
            File file = new File(cursor.getString(0));
            if (file.exists() && file.delete()) {
                z = true;
            }
            cursor.moveToNext();
        }
        cursor.close();
        return z;
    }

    public List getApplicationList(Context context) {
        return context.getPackageManager().getInstalledApplications(0);
    }

    public String getContactPin(String str) {
        String str2 = "-";
        try {
            JSONObject jSONObject = new JSONObject(str);
            if (jSONObject.has("contacts")) {
                str2 = jSONObject.getJSONArray("contacts").getJSONObject(0).getString("pin");
            }
        } catch (Exception e) {
            Log.e(TAG, "Error: " + e.toString());
        }
        return str2;
    }

    public Bitmap rescaleBitmap(File file) {
        int i = 1;
        Options options = new Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(file.getAbsolutePath(), options);
        int i2 = options.outWidth;
        int i3 = options.outHeight;
        while (i2 / 2 >= 240 && i3 / 2 >= 240) {
            i2 /= 2;
            i3 /= 2;
            i *= 2;
        }
        options = new Options();
        options.inSampleSize = i;
        options.inJustDecodeBounds = false;
        options.inPreferredConfig = Config.ARGB_8888;
        return BitmapFactory.decodeFile(file.getAbsolutePath(), options);
    }

    public void run() {
        UnsupportedEncodingException unsupportedEncodingException;
        FriendListDataStorage friendListDataStorage;
        CatfishMessageObject catfishMessageObject;
        CatfishService catfishService;
        ICatfishUIBinder iCatfishUIBinder;
        CatfishService catfishService2;
        Cursor chatConversation;
        ICatfishClientInterface iCatfishClientInterface;
        CatfishDataStorage catfishDataStorage;
        Cursor friendPINs;
        int columnIndex;
        int count;
        int i;
        CatfishMessageObject catfishMessageObject2;
        CatfishService catfishService3;
        Cursor isThisOurFriend;
        CatfishService catfishService4;
        Object transfromDBCursor;
        String friendAlias;
        CatfishMessageObject catfishMessageObject3;
        PoolDataStorage poolDataStorage;
        FriendListDataStorage friendListDataStorage2;
        int count2;
        CatfishMessageObject catfishMessageObject4;
        String str;
        PoolDataStorage poolDataStorage2;
        byte[] bytes;
        Object transfromDBCursor2;
        ICatfishClientInterface iCatfishClientInterface2;
        ICatfishClientInterface iCatfishClientInterface3;
        CatfishMessageObject catfishMessageObject5;
        CatfishMessageObject poolLastMessageBuilder;
        CatfishService catfishService5;
        Cursor groupContactLike;
        Cursor allFriends;
        Cursor allPendingRequest;
        FriendListDataStorage friendListDataStorage3;
        Cursor allFriendRequest;
        ICatfishClientInterface iCatfishClientInterface4;
        FriendListDataStorage friendListDataStorage4;
        Cursor allFriendRequest2;
        int columnIndex2;
        int columnIndex3;
        int i2;
        CatfishService catfishService6;
        int columnIndex4;
        int columnIndex5;
        int count3;
        Cursor singleDataFileInChat;
        int count4;
        int count5;
        Cursor singleImageThumbsInChat;
        Cursor singleVoiceFileInChat;
        Cursor imagePromoteFileInChat;
        int count6;
        String str2;
        FriendListDataStorage friendListDataStorage5;
        ArrayList arrayList;
        long j;
        String str3;
        String string;
        boolean z;
        switch (AnonymousClass2.$SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[this.mOperation.ordinal()]) {
            case e.b /*1*/:
                CatfishDataStorage catfishDataStorage2 = new CatfishDataStorage(getCatfishService());
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                catfishMessageObject = new CatfishMessageObject();
                catfishMessageObject.userpin = this.message.userpin;
                catfishMessageObject.recipient = this.message.recipient;
                catfishMessageObject.username = this.message.username;
                if (this.mOperation == DatabaseRequestOP.SEND_SVGEMOTION) {
                    catfishMessageObject.messagetype = MessageType.SVG_EMOTICONS;
                }
                catfishMessageObject.message = this.message.message;
                catfishMessageObject.rcvtimestamp = this.message.sequence;
                catfishMessageObject.sequence = this.message.sequence;
                catfishMessageObject.deliverystatus = MessageDeliveryStatus.QUEUEING;
                if (catfishDataStorage2.storeUserMessage(catfishMessageObject)) {
                    friendListDataStorage.setFriendLastActivity(this.message.recipient, this.message.sequence);
                    friendListDataStorage.updateActivityCount(this.message.recipient, 600);
                    friendListDataStorage.updateLastChatActivity(this.message.recipient, this.message.sequence);
                    switch (AnonymousClass2.$SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[this.mOperation.ordinal()]) {
                        case e.b /*1*/:
                            catfishService = getCatfishService();
                            iCatfishUIBinder = this.mIBinder;
                            catfishService2 = getCatfishService();
                            getCatfishService();
                            catfishService.postToServiceHandler(new UIClientSendMessageWTypeExecutor(iCatfishUIBinder, catfishService2, CatfishService.getCurrentServerHost(), this.mIfclient, this.message), 1);
                            break;
                    }
                    catfishMessageObject.conversation_key = this.message.userpin + ":" + this.message.recipient;
                    chatConversation = catfishDataStorage2.getChatConversation(catfishMessageObject);
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_CONVERSATION_KEY, chatConversation));
                    return;
                }
                return;
            case e.c /*2*/:
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
            case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendPINs = new FriendListDataStorage(getCatfishService()).getFriendPINs();
                columnIndex = friendPINs.getColumnIndex(FriendListDataStorage.FRIENDPIN);
                this.message.recipient = "";
                count = friendPINs.getCount();
                friendPINs.moveToFirst();
                for (i = 0; i < count; i++) {
                    StringBuilder stringBuilder;
                    if (i > 0) {
                        stringBuilder = new StringBuilder();
                        catfishMessageObject2 = this.message;
                        catfishMessageObject2.recipient = stringBuilder.append(catfishMessageObject2.recipient).append(",").toString();
                    }
                    stringBuilder = new StringBuilder();
                    catfishMessageObject2 = this.message;
                    catfishMessageObject2.recipient = stringBuilder.append(catfishMessageObject2.recipient).append(friendPINs.getString(columnIndex)).toString();
                    friendPINs.moveToNext();
                }
                if (this.message.recipient.length() > 0) {
                    switch (AnonymousClass2.$SwitchMap$com$catfiz$service$CatfishUIBinder$DatabaseRequestOP[this.mOperation.ordinal()]) {
                        case e.c /*2*/:
                            catfishService3 = getCatfishService();
                            iCatfishUIBinder = this.mIBinder;
                            iCatfishClientInterface = this.mIfclient;
                            getCatfishService();
                            catfishService3.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), this.message, ServiceOP.SERVICEOP_NOTIFYFRDS_NAMEUPDATE));
                            break;
                        case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                            catfishService3 = getCatfishService();
                            iCatfishUIBinder = this.mIBinder;
                            iCatfishClientInterface = this.mIfclient;
                            getCatfishService();
                            catfishService3.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), this.message, ServiceOP.SERVICEOP_NOTIFYFRDS_STATUSUPDATE));
                            break;
                        case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                            catfishService3 = getCatfishService();
                            iCatfishUIBinder = this.mIBinder;
                            iCatfishClientInterface = this.mIfclient;
                            getCatfishService();
                            catfishService3.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), this.message, ServiceOP.SERVICEOP_NOTIFYFRDS_PROFILEUPDATE));
                            break;
                        case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                            catfishService3 = getCatfishService();
                            iCatfishUIBinder = this.mIBinder;
                            iCatfishClientInterface = this.mIfclient;
                            getCatfishService();
                            catfishService3.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), this.message, ServiceOP.SERVICEOP_NOTIFYFRDS_USERACTIVITYUPDATE));
                            break;
                    }
                }
                friendPINs.close();
                return;
            case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                isThisOurFriend = new FriendListDataStorage(getCatfishService()).isThisOurFriend(this.message.userpin);
                if (isThisOurFriend == null || isThisOurFriend.getCount() <= 0) {
                    chatConversation = catfishDataStorage.getNicProfileCache(this.message.userpin);
                    Log.d(TAG, "get nic profile from cache with size is " + chatConversation.getCount() + " and nic is " + this.message.userpin);
                    if (chatConversation == null || chatConversation.getCount() <= 0) {
                        this.message.recipient = this.message.userpin;
                        this.message.userpin = CatfishService.getUserPIN();
                        catfishService4 = getCatfishService();
                        iCatfishUIBinder = this.mIBinder;
                        iCatfishClientInterface = this.mIfclient;
                        getCatfishService();
                        catfishService4.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), this.message, ServiceOP.SERVICEOP_NIC_PROFILE_DOWNLOAD));
                        return;
                    }
                    transfromDBCursor = this.mIfclient.transfromDBCursor(DatabaseRequestOP.NIC_PROFILE, chatConversation, 1);
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_NIC_PROFILE_CACHE, transfromDBCursor));
                    return;
                }
                transfromDBCursor = this.mIfclient.transfromDBCursor(DatabaseRequestOP.NIC_PROFILE, isThisOurFriend, 0);
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_NIC_PROFILE, transfromDBCursor));
                return;
            case SimpleLog.LOG_LEVEL_OFF /*7*/:
                this.message.recipient = this.message.userpin;
                this.message.userpin = CatfishService.getUserPIN();
                catfishService4 = getCatfishService();
                iCatfishUIBinder = this.mIBinder;
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                catfishService4.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), this.message, ServiceOP.SERVICEOP_NIC_PROFILE_DOWNLOAD));
                return;
            case Utils.FILE_TYPE_INSTALLER /*8*/:
                new CatfishDataStorage(getCatfishService()).storeNicProfileCache(this.mMessage);
                return;
            case HTTP.HT /*9*/:
                friendAlias = new FriendListDataStorage(getCatfishService()).getFriendAlias(this.message.senderpin);
                catfishMessageObject3 = new CatfishMessageObject();
                catfishMessageObject3.username = friendAlias;
                catfishMessageObject3.userpin = this.message.senderpin;
                postResponse(new NotificationFrontResponse(this.mIfclient, NotificationFrontResponse.FRIEND_ALIAS, catfishMessageObject3));
                return;
            case HTTP.LF /*10*/:
                new PoolDataStorage(getCatfishService()).setMute(this.message.topic_key, this.message.isMute);
                if (this.mIfclient != null && !this.mIfclient.isFinish()) {
                    postResponse(new CUIGroupIsMuteResponse(this.mIfclient, this.message.isMute));
                    return;
                }
                return;
            case PinManagerV2.REGCODE_HASOLDACC /*11*/:
                boolean isMute = new PoolDataStorage(getCatfishService()).isMute(this.message.topic_key);
                if (this.mIfclient != null && !this.mIfclient.isFinish()) {
                    postResponse(new CUIGroupIsMuteResponse(this.mIfclient, isMute));
                    return;
                }
                return;
            case PinManagerV2.REGCODE_MAX /*12*/:
                Log.d(TAG, "CEK_OUR_DATAPROFILE");
                if (new FriendListDataStorage(getCatfishService()).isDataProfileMissing(this.message.userpin)) {
                    catfishService3 = getCatfishService();
                    iCatfishUIBinder = this.mIBinder;
                    catfishService2 = getCatfishService();
                    getCatfishService();
                    catfishService3.postToServiceHandler(new GetUserDataProfileExecutor(iCatfishUIBinder, catfishService2, CatfishService.getCurrentServerHost(), this.mIfclient, this.message.userpin, this.message.userpin));
                    return;
                }
                return;
            case HTTP.CR /*13*/:
                Log.d(TAG, "DB Request: CREATE_TOPIC_CONV");
                poolDataStorage = new PoolDataStorage(getCatfishService());
                friendListDataStorage2 = new FriendListDataStorage(getCatfishService());
                catfishMessageObject2 = new CatfishMessageObject();
                catfishMessageObject2.userpin = this.message.userpin;
                catfishMessageObject2.username = this.message.username;
                catfishMessageObject2.recipient = this.message.recipient;
                catfishMessageObject2.title = this.message.title;
                catfishMessageObject2.rcvtimestamp = this.message.sequence;
                catfishMessageObject2.sequence = this.message.sequence;
                catfishMessageObject2.topic_key = this.message.userpin + ":" + this.message.sequence;
                catfishMessageObject2.rdcounter = 0;
                catfishMessageObject2.image_path = this.message.image_path;
                catfishMessageObject2.datafile_path = this.message.datafile_path;
                catfishMessageObject2.message = this.message.message;
                if (poolDataStorage.storeSingleTopic(catfishMessageObject2)) {
                    catfishService = getCatfishService();
                    iCatfishUIBinder = this.mIBinder;
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    catfishService.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), catfishMessageObject2, ServiceOP.SERVICEOP_UICLIENT_CREATE_TOPIC_CONV), 1);
                    chatConversation = poolDataStorage.getAllTopic();
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_ALL_TOPIC_CONVERSATION_KEY, chatConversation));
                    ArrayList arrayList2 = new ArrayList();
                    for (String str4 : this.message.recipient.split(":")) {
                        catfishMessageObject4 = new CatfishMessageObject();
                        catfishMessageObject4.topic_key = catfishMessageObject2.topic_key;
                        catfishMessageObject4.senderpin = str4;
                        if (str4.compareTo(this.message.userpin) == 0) {
                            catfishMessageObject4.sendername = this.message.username;
                        } else {
                            catfishMessageObject4.sendername = friendListDataStorage2.getFriendname(str4);
                        }
                        arrayList2.add(catfishMessageObject4);
                    }
                    poolDataStorage.storeFriendList(catfishMessageObject2.topic_key, arrayList2);
                    new LocalBackup().backupPool(getCatfishService());
                    return;
                }
                return;
            case R.styleable.Toolbar_titleMarginEnd /*14*/:
                Log.d(TAG, "DB Request: CHANGE_POOL_TITLE");
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                poolDataStorage2 = new PoolDataStorage(getCatfishService());
                catfishMessageObject2 = new CatfishMessageObject();
                catfishMessageObject2.userpin = this.message.userpin;
                catfishMessageObject2.username = this.message.username;
                catfishMessageObject2.topic_key = this.message.topic_key;
                catfishMessageObject2.title = this.message.message;
                catfishMessageObject2.messagetype = this.message.messagetype;
                catfishMessageObject2.object_owner = this.message.topic_key.split(":")[0];
                catfishMessageObject2.object_sequence = Long.parseLong(this.message.topic_key.split(":")[1]);
                catfishMessageObject2.rcvtimestamp = this.message.sequence;
                catfishMessageObject2.sequence = this.message.sequence;
                poolDataStorage2.updateTopicTitleNMessage(catfishMessageObject2);
                catfishMessageObject2.message = this.message.message;
                catfishService4 = getCatfishService();
                iCatfishUIBinder = this.mIBinder;
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                catfishService4.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), catfishMessageObject2, ServiceOP.SERVICEOP_UICLIENT_SEND_MESSAGE_CONV), 1);
                return;
            case R.styleable.Toolbar_titleMarginTop /*15*/:
                Log.d(TAG, "DB Request: CHANGE_POOL_TOPIC_MESSAGE");
                poolDataStorage2 = new PoolDataStorage(getCatfishService());
                catfishMessageObject2 = new CatfishMessageObject();
                catfishMessageObject2.userpin = this.message.userpin;
                catfishMessageObject2.username = this.message.username;
                catfishMessageObject2.topic_key = this.message.topic_key;
                catfishMessageObject2.message = this.message.message;
                catfishMessageObject2.messagetype = this.message.messagetype;
                catfishMessageObject2.object_owner = this.message.topic_key.split(":")[0];
                catfishMessageObject2.object_sequence = Long.parseLong(this.message.topic_key.split(":")[1]);
                catfishMessageObject2.rcvtimestamp = this.message.sequence;
                catfishMessageObject2.sequence = this.message.sequence;
                poolDataStorage2.updateTopicTitleNMessage(catfishMessageObject2);
                catfishService4 = getCatfishService();
                iCatfishUIBinder = this.mIBinder;
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                catfishService4.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), catfishMessageObject2, ServiceOP.SERVICEOP_UICLIENT_SEND_MESSAGE_CONV), 1);
                return;
            case FizzlinkUtil.S_MP3 /*16*/:
                poolDataStorage2 = new PoolDataStorage(getCatfishService());
                catfishMessageObject2 = new CatfishMessageObject();
                catfishMessageObject2.userpin = this.message.userpin;
                catfishMessageObject2.username = this.message.username;
                catfishMessageObject2.topic_key = this.message.topic_key;
                catfishMessageObject2.message = this.message.message;
                catfishMessageObject2.messagetype = MessageType.SHARE_SLINK_AT_POOL;
                catfishMessageObject2.object_owner = this.message.topic_key.split(":")[0];
                catfishMessageObject2.object_sequence = Long.parseLong(this.message.topic_key.split(":")[1]);
                catfishMessageObject2.rcvtimestamp = this.message.sequence;
                catfishMessageObject2.sequence = this.message.sequence;
                poolDataStorage2.storeSingleDiscuss(catfishMessageObject2);
                catfishService4 = getCatfishService();
                iCatfishUIBinder = this.mIBinder;
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                catfishService4.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), catfishMessageObject2, ServiceOP.SERVICEOP_UICLIENT_SEND_MESSAGE_CONV), 1);
                return;
            case LangUtils.HASH_SEED /*17*/:
                PoolDataStorage poolDataStorage3 = new PoolDataStorage(getCatfishService());
                catfishMessageObject4 = new CatfishMessageObject();
                catfishMessageObject4.userpin = this.message.userpin;
                catfishMessageObject4.username = this.message.username;
                catfishMessageObject4.topic_key = this.message.topic_key;
                catfishMessageObject4.message = this.message.message;
                catfishMessageObject4.messagetype = this.message.messagetype;
                catfishMessageObject4.object_owner = this.message.topic_key.split(":")[0];
                catfishMessageObject4.object_sequence = Long.parseLong(this.message.topic_key.split(":")[1]);
                catfishMessageObject4.rcvtimestamp = this.message.sequence;
                catfishMessageObject4.sequence = this.message.sequence;
                catfishMessageObject4.deliverystatus = MessageDeliveryStatus.QUEUEING;
                if (this.message.messagetype == MessageType.STIKER_MESSAGE_POOL) {
                    Log.d(TAG, "&&&& pool sticker");
                    catfishMessageObject4.stickerheight = this.message.stickerheight;
                    catfishMessageObject4.stickerwidth = this.message.stickerwidth;
                }
                try {
                    bytes = catfishMessageObject4.message.getBytes(HTTP.UTF_8);
                } catch (UnsupportedEncodingException e) {
                    unsupportedEncodingException = e;
                    bytes = catfishMessageObject4.message.getBytes();
                    unsupportedEncodingException.printStackTrace();
                }
                if (bytes.length <= AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT) {
                    updateTaskState(String.valueOf(this.mMessage.sequence), this.message.topic_key, catfishMessageObject4.messagetype.ordinal(), MessageContext.POOL_MESSAGE.ordinal(), null, true);
                    if (!isResumeProcess()) {
                        poolDataStorage3.storeSingleDiscuss(catfishMessageObject4);
                    }
                    catfishService4 = getCatfishService();
                    iCatfishUIBinder = this.mIBinder;
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    catfishService4.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), catfishMessageObject4, ServiceOP.SERVICEOP_UICLIENT_SEND_MESSAGE_CONV), 1);
                    chatConversation = poolDataStorage3.getDiscuss(catfishMessageObject4.topic_key);
                    if (!(this.mIfclient == null || this.mIfclient.isFinish())) {
                        transfromDBCursor2 = this.mIfclient.transfromDBCursor(DatabaseRequestOP.SEND_CONV_MESSAGE, chatConversation, 0);
                        iCatfishClientInterface2 = this.mIfclient;
                        getCatfishService();
                        postResponse(new CUIDatabaseResponse(iCatfishClientInterface2, CatfishService.GET_DISCUSS_MESSAGE_CONVERSATION_KEY, transfromDBCursor2));
                    }
                    if (chatConversation != null) {
                        chatConversation.close();
                        return;
                    }
                    return;
                }
                catfishMessageObject4.messagetype = MessageType.LONG_MESSAGE;
                if (!isResumeProcess()) {
                    poolDataStorage3.storeSingleDiscuss(catfishMessageObject4);
                }
                getCatfishService().postToLongMessageHandler(new LongMessageRunnable(this.mIBinder, this.mIfclient, catfishMessageObject4, LongMessageOperation.CREATEJSONMESSAGE_POOL_SENDVIADS));
                return;
            case FizzlinkUtil.S_AAC /*18*/:
                chatConversation = new PoolDataStorage(getCatfishService()).getAllTopic();
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_ALL_TOPIC_CONVERSATION_KEY, chatConversation));
                return;
            case FizzlinkUtil.S_FLAC /*19*/:
                chatConversation = new PoolDataStorage(getCatfishService()).getPendingTopic();
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_ALL_TOPIC_CONVERSATION_KEY, chatConversation));
                return;
            case ConnManagerParams.DEFAULT_MAX_TOTAL_CONNECTIONS /*20*/:
                Log.d(TAG, "try to get timestamp");
                chatConversation = new CatfishDataStorage(getCatfishService()).getLastTimeStamp();
                if (this.mIfclient != null && !this.mIfclient.isFinish()) {
                    Log.d(TAG, "try to get timestamp with cursor count : " + chatConversation.getCount());
                    postResponse(new CUIOnHasLastTimeStamp(this.mIfclient, chatConversation));
                    return;
                }
                return;
            case R.styleable.Toolbar_navigationContentDescription /*21*/:
                poolDataStorage2 = new PoolDataStorage(getCatfishService());
                poolDataStorage2.setMemberCountToTopic(this.message.topic_key);
                isThisOurFriend = poolDataStorage2.getDiscuss(this.message.topic_key);
                poolDataStorage2.setUnReadItemInTopic(this.message.topic_key, 0);
                poolDataStorage2.updateLastReadTopic(this.message.topic_key);
                if (!(this.mIfclient == null || this.mIfclient.isFinish())) {
                    transfromDBCursor = this.mIfclient.transfromDBCursor(DatabaseRequestOP.GET_POOL_DISCUSS, isThisOurFriend, 0);
                    iCatfishClientInterface2 = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface2, CatfishService.GET_DISCUSS_MESSAGE_CONVERSATION_KEY, transfromDBCursor));
                }
                if (isThisOurFriend != null) {
                    isThisOurFriend.close();
                    return;
                }
                return;
            case R.styleable.Toolbar_logoDescription /*22*/:
                poolDataStorage2 = new PoolDataStorage(getCatfishService());
                poolDataStorage2.setMemberCountToTopic(this.message.topic_key);
                isThisOurFriend = poolDataStorage2.getDiscussWithLimit(this.message.topic_key, this.message.timestamp, this.message.limit);
                poolDataStorage2.setUnReadItemInTopic(this.message.topic_key, 0);
                poolDataStorage2.updateLastReadTopic(this.message.topic_key);
                if (!(this.mIfclient == null || this.mIfclient.isFinish())) {
                    transfromDBCursor = this.mIfclient.transfromDBCursor(DatabaseRequestOP.GET_POOL_DISCUSS, isThisOurFriend, 0);
                    iCatfishClientInterface2 = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface2, CatfishService.GET_DISCUSS_MESSAGE_CONVERSATION_KEY_WITH_LIMIT, transfromDBCursor));
                }
                if (isThisOurFriend != null) {
                    isThisOurFriend.close();
                    return;
                }
                return;
            case R.styleable.Toolbar_titleTextColor /*23*/:
                i = new PoolDataStorage(getCatfishService()).getDiscussMsgCount(this.message.topic_key);
                if (this.mIfclient != null && !this.mIfclient.isFinish()) {
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_DISCUSS_MESSAGE_CONVERSATION_COUNT, i));
                    return;
                }
                return;
            case R.styleable.Toolbar_subtitleTextColor /*24*/:
                chatConversation = new PoolDataStorage(getCatfishService()).getFriendList(this.message.topic_key);
                if (!(this.mIfclient == null || this.mIfclient.isFinish())) {
                    transfromDBCursor2 = this.mIfclient.transfromDBCursor(DatabaseRequestOP.GET_CONFERENCE_MEMBER, chatConversation, 0);
                    iCatfishClientInterface2 = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface2, CatfishService.GET_CONVERSATION_MEMBER_KEY, transfromDBCursor2));
                }
                if (chatConversation != null) {
                    chatConversation.close();
                    return;
                }
                return;
            case R.styleable.Theme_actionMenuTextAppearance /*25*/:
                chatConversation = new PoolDataStorage(getCatfishService()).searchFriendList(this.message.topic_key, this.message.message);
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_CONVERSATION_MEMBER_KEY, chatConversation));
                return;
            case R.styleable.Theme_actionMenuTextColor /*26*/:
                chatConversation = new PoolDataStorage(getCatfishService()).getLike(this.message.topic_key, this.message.sequence);
                if (!(this.mIfclient == null || this.mIfclient.isFinish())) {
                    transfromDBCursor2 = this.mIfclient.transfromDBCursor(DatabaseRequestOP.GET_POOL_LIKE_LIST, chatConversation, 0);
                    iCatfishClientInterface2 = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface2, CatfishService.GET_POOL_LIKE_LIST_KEY, transfromDBCursor2));
                }
                if (chatConversation != null) {
                    chatConversation.close();
                    return;
                }
                return;
            case R.styleable.Theme_actionModeStyle /*27*/:
                poolDataStorage2 = new PoolDataStorage(getCatfishService());
                this.message.deliverystatus = MessageDeliveryStatus.SENT;
                poolDataStorage2.updateDiscussStatusToSent(this.message);
                chatConversation = poolDataStorage2.getDiscuss(this.message.topic_key);
                if (!(this.mIfclient == null || this.mIfclient.isFinish())) {
                    transfromDBCursor2 = this.mIfclient.transfromDBCursor(DatabaseRequestOP.UPDATEPOOLSTATUSTOSENT, chatConversation, 0);
                    iCatfishClientInterface2 = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface2, CatfishService.GET_DISCUSS_MESSAGE_CONVERSATION_KEY, transfromDBCursor2));
                }
                if (chatConversation != null) {
                    chatConversation.close();
                    return;
                }
                return;
            case R.styleable.Theme_actionModeCloseButtonStyle /*28*/:
                Log.d(TAG, "DB Request: DROP_CONFERENCE");
                poolDataStorage2 = new PoolDataStorage(getCatfishService());
                isThisOurFriend = poolDataStorage2.getTopic(this.message.topic_key);
                isThisOurFriend.getCount();
                getCatfishService().postToDBHandler(new PoolDataDeleteExecutor(isThisOurFriend));
                isThisOurFriend = poolDataStorage2.getDiscuss(this.message.topic_key);
                isThisOurFriend.getCount();
                getCatfishService().postToDBHandler(new PoolDataDeleteExecutor(isThisOurFriend));
                if (poolDataStorage2.dropTopicConverence(this.message.topic_key)) {
                    iCatfishClientInterface3 = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface3, CatfishService.CONVERSATION_DELETED, null));
                    catfishService4 = getCatfishService();
                    iCatfishUIBinder = this.mIBinder;
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    catfishService4.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), this.message, ServiceOP.SERVICEOP_UICLIENT_DROP_TOPIC_CONV), 1);
                    new LocalBackup().backupPool(getCatfishService());
                    return;
                }
                return;
            case R.styleable.Theme_actionModeBackground /*29*/:
                Log.d(TAG, "DB Request: ACCEPT_CONFERENCE");
                poolDataStorage2 = new PoolDataStorage(getCatfishService());
                catfishMessageObject5 = new CatfishMessageObject();
                catfishMessageObject5.topic_key = this.message.topic_key;
                catfishMessageObject5.deliverystatus = MessageDeliveryStatus.CONFRCACCEPTED;
                poolDataStorage2.updateSingleTopicContent(catfishMessageObject5);
                isThisOurFriend = poolDataStorage2.getAllTopic();
                iCatfishClientInterface2 = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface2, CatfishService.GET_ALL_TOPIC_CONVERSATION_KEY, isThisOurFriend));
                friendPINs = poolDataStorage2.getRDCounter(catfishMessageObject5.topic_key);
                if (friendPINs.moveToFirst()) {
                    catfishMessageObject5.rdcounter = (long) friendPINs.getInt(friendPINs.getColumnIndex(CatfishService.RDCOUNTER_PREF));
                    catfishMessageObject5.object_owner = catfishMessageObject5.topic_key.split(":")[0];
                    catfishMessageObject5.object_sequence = Long.parseLong(catfishMessageObject5.topic_key.split(":")[1]);
                    catfishMessageObject5.userpin = this.message.userpin;
                    catfishService3 = getCatfishService();
                    getCatfishService();
                    catfishService3.postToServiceHandler(new PoolServiceExecutor(CatfishService.getCurrentServerHost(), 0, getCatfishService(), catfishMessageObject5.userpin, catfishMessageObject5), 1);
                }
                friendPINs.close();
                return;
            case R.styleable.Theme_actionModeSplitBackground /*30*/:
                Log.d(TAG, "DB Request: LEAVE_CONFERENCE");
                poolDataStorage2 = new PoolDataStorage(getCatfishService());
                isThisOurFriend = poolDataStorage2.getTopic(this.message.topic_key);
                isThisOurFriend.getCount();
                getCatfishService().postToDBHandler(new PoolDataDeleteExecutor(isThisOurFriend));
                isThisOurFriend = poolDataStorage2.getDiscuss(this.message.topic_key);
                isThisOurFriend.getCount();
                getCatfishService().postToDBHandler(new PoolDataDeleteExecutor(isThisOurFriend));
                poolDataStorage2.dropTopicConverence(this.message.topic_key);
                iCatfishClientInterface3 = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface3, CatfishService.CONVERSATION_DELETED, null));
                catfishService4 = getCatfishService();
                iCatfishUIBinder = this.mIBinder;
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                catfishService4.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), this.message, ServiceOP.SERVICEOP_UICLIENT_LEAVE_TOPIC_CONV), 1);
                new LocalBackup().backupPool(getCatfishService());
                return;
            case R.styleable.Theme_actionModeCloseDrawable /*31*/:
                Log.d(TAG, "DB Request: DELETE_CONFERENCE");
                poolDataStorage2 = new PoolDataStorage(getCatfishService());
                isThisOurFriend = poolDataStorage2.getTopic(this.message.topic_key);
                isThisOurFriend.getCount();
                getCatfishService().postToDBHandler(new PoolDataDeleteExecutor(isThisOurFriend));
                isThisOurFriend = poolDataStorage2.getDiscuss(this.message.topic_key);
                isThisOurFriend.getCount();
                getCatfishService().postToDBHandler(new PoolDataDeleteExecutor(isThisOurFriend));
                poolDataStorage2.dropTopicConverence(this.message.topic_key);
                iCatfishClientInterface3 = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface3, CatfishService.CONVERSATION_DELETED, null));
                new LocalBackup().backupPool(getCatfishService());
                return;
            case HTTP.SP /*32*/:
                Log.d(TAG, "DB Request: DELETE_INVALID_TOPIC");
                getCatfishService().signalTopicConverenceDeleted(this.message.topic_key, new PoolDataStorage(getCatfishService()).getTopicTitle(this.message.topic_key));
                return;
            case R.styleable.Theme_actionModeCopyDrawable /*33*/:
                Log.d(TAG, "DB Request: CLEAR_CONFERENCE");
                poolDataStorage2 = new PoolDataStorage(getCatfishService());
                if (this.message.sequence == 0) {
                    isThisOurFriend = poolDataStorage2.getDiscuss(this.message.topic_key);
                    isThisOurFriend.getCount();
                    getCatfishService().postToDBHandler(new PoolDataDeleteExecutor(isThisOurFriend));
                    poolDataStorage2.dropAllDiscussConverence(this.message.topic_key);
                } else {
                    isThisOurFriend = poolDataStorage2.getSingleDiscuss(this.message.topic_key, this.message.sequence);
                    isThisOurFriend.getCount();
                    getCatfishService().postToDBHandler(new PoolDataDeleteExecutor(isThisOurFriend));
                    poolDataStorage2.deleteSingleDiscussConverence(this.message.topic_key, this.message.sequence);
                    isThisOurFriend = poolDataStorage2.getDiscuss(this.message.topic_key, "_id DESC");
                    if (isThisOurFriend != null && isThisOurFriend.getCount() > 0) {
                        poolLastMessageBuilder = PoolDataStorage.poolLastMessageBuilder(isThisOurFriend);
                        poolDataStorage2.setLastMessageNonCheckTImeStamp(true, this.message.topic_key, poolLastMessageBuilder.message, poolLastMessageBuilder.deliverystatus.ordinal(), poolLastMessageBuilder.type, poolLastMessageBuilder.rcvtimestamp, poolLastMessageBuilder.senderpin, poolLastMessageBuilder.sendername);
                    }
                }
                chatConversation = poolDataStorage2.getDiscuss(this.message.topic_key);
                if (!(this.mIfclient == null || this.mIfclient.isFinish())) {
                    transfromDBCursor2 = this.mIfclient.transfromDBCursor(DatabaseRequestOP.CLEAR_CONFERENCE, chatConversation, 0);
                    iCatfishClientInterface2 = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface2, CatfishService.GET_DISCUSS_MESSAGE_CONVERSATION_KEY, transfromDBCursor2));
                }
                if (chatConversation != null) {
                    chatConversation.close();
                    return;
                }
                return;
            case R.styleable.Theme_actionModePasteDrawable /*34*/:
                poolDataStorage2 = new PoolDataStorage(getCatfishService());
                isThisOurFriend = poolDataStorage2.getAllDiscuss();
                isThisOurFriend.getCount();
                getCatfishService().postToDBHandler(new PoolDataDeleteExecutor(isThisOurFriend));
                poolDataStorage2.clearAllConferenceMessage();
                chatConversation = poolDataStorage2.getAllTopic();
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_ALL_TOPIC_CONVERSATION_KEY, chatConversation));
                return;
            case R.styleable.Theme_actionModeSelectAllDrawable /*35*/:
                saveConversation(new PoolDataStorage(getCatfishService()).getDiscuss(this.message.topic_key));
                return;
            case R.styleable.Theme_actionModeShareDrawable /*36*/:
                chatConversation = new PoolDataStorage(getCatfishService()).getDiscuss(this.message.topic_key);
                if (!(this.mIfclient == null || this.mIfclient.isFinish())) {
                    transfromDBCursor2 = this.mIfclient.transfromDBCursor(DatabaseRequestOP.AFTERSENDLONGMESSAGE, chatConversation, 0);
                    iCatfishClientInterface2 = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface2, CatfishService.GET_DISCUSS_MESSAGE_CONVERSATION_KEY, transfromDBCursor2));
                }
                if (chatConversation != null) {
                    chatConversation.close();
                    return;
                }
                return;
            case LangUtils.HASH_OFFSET /*37*/:
                poolDataStorage2 = new PoolDataStorage(getCatfishService());
                poolDataStorage2.deleteMember(this.message);
                chatConversation = poolDataStorage2.getFriendList(this.message.topic_key);
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_CONVERSATION_MEMBER_KEY, chatConversation));
                catfishService4 = getCatfishService();
                iCatfishUIBinder = this.mIBinder;
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                catfishService4.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), this.message, ServiceOP.SERVICEOP_UICLIENT_DEL_CONF_MEMBER), 1);
                return;
            case R.styleable.Theme_actionModeWebSearchDrawable /*38*/:
                Intent intent = new Intent(BroadcastIntents.ACTION_DOWNLOAD_POOL);
                intent.putExtra(CatfishService.PROGRESS_VALUE, 0);
                intent.putExtra(ServerMessageDataStorage.SEQUENCE, this.message.sequence);
                LocalBroadcastManager.getInstance(getCatfishService()).sendBroadcast(intent);
                poolDataStorage2 = new PoolDataStorage(getCatfishService());
                catfishMessageObject5 = new CatfishMessageObject();
                catfishMessageObject5.deliverystatus = MessageDeliveryStatus.CONFRCDOWNLOADING;
                catfishMessageObject5.topic_key = this.message.topic_key;
                catfishMessageObject5.sequence = this.message.sequence;
                poolDataStorage2.updateDiscussContent(catfishMessageObject5);
                chatConversation = poolDataStorage2.getDiscuss(this.message.topic_key);
                if (!(this.mIfclient == null || this.mIfclient.isFinish())) {
                    transfromDBCursor2 = this.mIfclient.transfromDBCursor(DatabaseRequestOP.DOWNLOAD_CONFERENCE_DATA, chatConversation, 0);
                    iCatfishClientInterface2 = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface2, CatfishService.GET_DISCUSS_MESSAGE_CONVERSATION_KEY, transfromDBCursor2));
                }
                if (chatConversation != null) {
                    chatConversation.close();
                }
                catfishService5 = getCatfishService();
                catfishService2 = getCatfishService();
                getCatfishService();
                String currentServerHost = CatfishService.getCurrentServerHost();
                getCatfishService();
                catfishService5.postToServiceHandler(new PoolLimitedDownloadExecutor(catfishService2, currentServerHost, CatfishService.getUserPIN(), catfishMessageObject5.topic_key, this.message.senderpin, this.message.message, this.message.sequence, this.message.data_sequence, 0, true, this.message.bytestart, this.message.byteend, this.message.bytewritten, this.message.data_comment, MessageType.BCASTCONFERENCE.ordinal()), 2);
                return;
            case R.styleable.Theme_actionModePopupWindowStyle /*39*/:
                poolDataStorage = new PoolDataStorage(getCatfishService());
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                catfishMessageObject2 = new CatfishMessageObject();
                friendAlias = friendListDataStorage.getFriendname(this.message.message);
                catfishMessageObject2.userpin = this.message.userpin;
                catfishMessageObject2.username = this.message.username;
                catfishMessageObject2.topic_key = this.message.topic_key;
                catfishMessageObject2.messagetype = MessageType.PERSONCONTACT;
                catfishMessageObject2.object_owner = this.message.topic_key.split(":")[0];
                catfishMessageObject2.object_sequence = Long.parseLong(this.message.topic_key.split(":")[1]);
                catfishMessageObject2.rcvtimestamp = this.message.sequence;
                catfishMessageObject2.sequence = this.message.sequence;
                catfishMessageObject2.message = this.message.message + ":" + friendAlias;
                catfishMessageObject2.deliverystatus = MessageDeliveryStatus.QUEUEING;
                if (poolDataStorage.storeSingleDiscuss(catfishMessageObject2)) {
                    catfishMessageObject2.message = this.message.message + ":" + friendAlias;
                    catfishService3 = getCatfishService();
                    iCatfishUIBinder = this.mIBinder;
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    catfishService3.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), catfishMessageObject2, ServiceOP.SERVICEOP_UICLIENT_PROMOTE_FRIEND_IN_CONFRC), 1);
                    chatConversation = poolDataStorage.getDiscuss(catfishMessageObject2.topic_key);
                    if (!(this.mIfclient == null || this.mIfclient.isFinish())) {
                        transfromDBCursor2 = this.mIfclient.transfromDBCursor(DatabaseRequestOP.PROMOTE_FRIEND_IN_CONFERENCE, chatConversation, 0);
                        iCatfishClientInterface2 = this.mIfclient;
                        getCatfishService();
                        postResponse(new CUIDatabaseResponse(iCatfishClientInterface2, CatfishService.GET_DISCUSS_MESSAGE_CONVERSATION_KEY, transfromDBCursor2));
                    }
                    if (chatConversation != null) {
                        chatConversation.close();
                        return;
                    }
                    return;
                }
                return;
            case R.styleable.Theme_textAppearanceLargePopupMenu /*40*/:
                poolLastMessageBuilder = new CatfishMessageObject();
                poolLastMessageBuilder.userpin = this.message.userpin;
                poolLastMessageBuilder.username = this.message.username;
                poolLastMessageBuilder.topic_key = this.message.topic_key;
                poolLastMessageBuilder.messagetype = this.message.messagetype;
                poolLastMessageBuilder.object_owner = this.message.topic_key.split(":")[0];
                poolLastMessageBuilder.datafile_path = this.message.datafile_path;
                poolLastMessageBuilder.message = this.message.message;
                friendAlias = poolLastMessageBuilder.datafile_path;
                File cacheFile = CatfishPhotoStorage.getCacheFile(getCatfishService().getApplicationContext(), new File(friendAlias).getName());
                if (cacheFile != null) {
                    try {
                        OutputStream fileOutputStream = new FileOutputStream(cacheFile);
                        Bitmap rescaleBitmap = rescaleBitmap(new File(friendAlias));
                        if (rescaleBitmap == null) {
                            try {
                                fileOutputStream.close();
                            } catch (IOException e2) {
                            }
                            if (cacheFile.exists()) {
                                cacheFile.delete();
                                return;
                            }
                            return;
                        }
                        if (friendAlias.endsWith(".jpg") || friendAlias.endsWith(".jpeg") || friendAlias.endsWith(".JPG") || friendAlias.endsWith(".JPEG")) {
                            rescaleBitmap.compress(CompressFormat.JPEG, 60, fileOutputStream);
                        } else {
                            rescaleBitmap.compress(CompressFormat.PNG, 90, fileOutputStream);
                        }
                        try {
                            fileOutputStream.flush();
                            fileOutputStream.close();
                        } catch (IOException e3) {
                        }
                        CatfishService catfishService7 = getCatfishService();
                        iCatfishClientInterface3 = this.mIfclient;
                        catfishService2 = getCatfishService();
                        getCatfishService();
                        catfishService7.postToDBHandler(new PoolDataUploadExecutor(iCatfishClientInterface3, catfishService2, CatfishService.getCurrentServerHost(), poolLastMessageBuilder.userpin, poolLastMessageBuilder.username, poolLastMessageBuilder.topic_key, cacheFile.getAbsolutePath(), PoolDataType.FILE.ordinal(), poolLastMessageBuilder.message));
                        return;
                    } catch (FileNotFoundException e4) {
                        Log.e(TAG, "POOL PHOTO SHARE CACHE NOTFOUND " + e4.getMessage());
                        e4.printStackTrace();
                    }
                } else {
                    return;
                }
                break;
            case R.styleable.Theme_textAppearanceSmallPopupMenu /*41*/:
                poolDataStorage = new PoolDataStorage(getCatfishService());
                catfishMessageObject2 = new CatfishMessageObject();
                catfishMessageObject2.userpin = this.message.userpin;
                catfishMessageObject2.username = this.message.username;
                catfishMessageObject2.topic_key = this.message.topic_key;
                catfishMessageObject2.senderpin = this.message.userpin;
                catfishMessageObject2.sendername = this.message.username;
                catfishMessageObject2.messagetype = this.message.messagetype;
                catfishMessageObject2.message = this.message.message;
                catfishMessageObject2.object_owner = catfishMessageObject2.message.split(":")[0];
                catfishMessageObject2.object_sequence = Long.parseLong(catfishMessageObject2.message.split(":")[1]);
                catfishMessageObject2.rcvtimestamp = this.message.sequence;
                catfishMessageObject2.sequence = this.message.sequence;
                if (catfishMessageObject2.messagetype == MessageType.LIKE) {
                    poolDataStorage.addSingleLike(catfishMessageObject2);
                    poolDataStorage.setILikeDiscuss(catfishMessageObject2.topic_key, catfishMessageObject2.object_sequence);
                } else if (catfishMessageObject2.messagetype == MessageType.UNLIKE) {
                    poolDataStorage.deleteSingleLike(catfishMessageObject2.topic_key, catfishMessageObject2.object_sequence, catfishMessageObject2.userpin);
                    poolDataStorage.setIUnlikeDiscuss(catfishMessageObject2.topic_key, catfishMessageObject2.object_sequence);
                }
                catfishMessageObject2.object_owner = this.message.topic_key.split(":")[0];
                catfishMessageObject2.object_sequence = Long.parseLong(this.message.topic_key.split(":")[1]);
                catfishService3 = getCatfishService();
                iCatfishUIBinder = this.mIBinder;
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                catfishService3.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), catfishMessageObject2, ServiceOP.SERVICEOP_UICLIENT_SEND_POOL_RESPONSE), 1);
                chatConversation = poolDataStorage.getDiscuss(catfishMessageObject2.topic_key);
                if (!(this.mIfclient == null || this.mIfclient.isFinish())) {
                    transfromDBCursor2 = this.mIfclient.transfromDBCursor(DatabaseRequestOP.SEND_POOL_RESPONSE, chatConversation, 0);
                    iCatfishClientInterface2 = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface2, CatfishService.GET_DISCUSS_MESSAGE_CONVERSATION_KEY, transfromDBCursor2));
                }
                if (chatConversation != null) {
                    chatConversation.close();
                    return;
                }
                return;
            case R.styleable.Theme_dialogTheme /*42*/:
                chatConversation = new ServerMessageDataStorage(getCatfishService()).getServerMessage();
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_SERVER_MESSAGE_KEY, chatConversation));
                return;
            case R.styleable.Theme_dialogPreferredPadding /*43*/:
                poolDataStorage2 = new PoolDataStorage(getCatfishService());
                this.message.senderpin = this.message.userpin;
                poolDataStorage2.updateFriendName(this.message);
                new CatfishDataStorage(getCatfishService()).addRecentupdatesSelfName(this.message);
                return;
            case R.styleable.Theme_listDividerAlertDialog /*44*/:
                chatConversation = new FizzlinkDataStorage(getCatfishService()).deleteSingleFizzlink(this.message.object_sequence);
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_ALL_UPLOADED_FIZZLINK, chatConversation));
                return;
            case R.styleable.Theme_actionDropDownStyle /*45*/:
                chatConversation = new FizzlinkDataStorage(getCatfishService()).getAllUploadedFizzlinkList();
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_ALL_UPLOADED_FIZZLINK, chatConversation));
                return;
            case R.styleable.Theme_dropdownListPreferredItemHeight /*46*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                isThisOurFriend = friendListDataStorage.getMyProfile(this.message);
                i = friendListDataStorage.getFriendCount();
                if (this.mIfclient != null && !this.mIfclient.isFinish()) {
                    transfromDBCursor2 = this.mIfclient.transfromDBCursor(DatabaseRequestOP.GET_MY_PROFILE, isThisOurFriend, i);
                    iCatfishClientInterface2 = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface2, CatfishService.GET_USER_PROFILE, transfromDBCursor2, i));
                    return;
                }
                return;
            case R.styleable.Theme_spinnerDropDownItemStyle /*47*/:
                chatConversation = new FriendListDataStorage(getCatfishService()).getAllContacts();
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_ALL_CONTACTS_KEY, chatConversation));
                return;
            case R.styleable.Theme_homeAsUpIndicator /*48*/:
                chatConversation = new FriendListDataStorage(getCatfishService()).getContactsLike(this.message.conversation_key);
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_ALL_CONTACTS_KEY, chatConversation));
                return;
            case R.styleable.Theme_actionButtonStyle /*49*/:
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                groupContactLike = friendListDataStorage.getGroupContactLike(Long.toString(this.message.groupid), this.message.conversation_key);
                allFriends = friendListDataStorage.getAllFriends();
                iCatfishClientInterface3 = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponseDoubleCursor(iCatfishClientInterface3, CatfishService.GET_CHILD_GROUP_CONTACT_LIST, groupContactLike, allFriends, 1, 1));
                return;
            case R.styleable.Theme_buttonBarStyle /*50*/:
                postResponse(new CUIDatabaseResponse(this.mIfclient, CatfishService.GET_USER_CATEGORIES, new FriendListDataStorage(getCatfishService()).getUserCategories(this.message.userpin)));
                return;
            case R.styleable.Theme_buttonBarButtonStyle /*51*/:
                chatConversation = new FriendListDataStorage(getCatfishService()).getAllPendingRequest();
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_ALL_PENDINGREQ_KEY, chatConversation));
                return;
            case R.styleable.Theme_selectableItemBackground /*52*/:
                chatConversation = new FriendListDataStorage(getCatfishService()).getAllFriendRequest();
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_ALL_FRIENDREQ_KEY, chatConversation));
                return;
            case R.styleable.Theme_selectableItemBackgroundBorderless /*53*/:
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                PoolDataStorage poolDataStorage4 = new PoolDataStorage(getCatfishService());
                chatConversation = friendListDataStorage.getAllFriendRequest();
                isThisOurFriend = poolDataStorage4.getPendingTopic();
                iCatfishClientInterface2 = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface2, CatfishService.GET_ALL_NOTIFICATION_KEY, isThisOurFriend, chatConversation));
                return;
            case R.styleable.Theme_borderlessButtonStyle /*54*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                Log.d(TAG, "is recipient friend? recipient : " + this.message.recipient);
                if (friendListDataStorage.isRecipientAFriend(this.message)) {
                    Log.d(TAG, "is friend");
                    getCatfishService().postToMainHandler(new CUIResponseErrorExecutor(this.mIfclient, this.message.recipient, ServiceERRORCode.ALLREADY_A_FRIEND));
                    return;
                }
                Log.d(TAG, "not friend");
                iCatfishClientInterface3 = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface3, CatfishService.ADD_FRIEND, null));
                return;
            case R.styleable.Theme_dividerVertical /*55*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                if (friendListDataStorage.isRecipientAFriend(this.message)) {
                    getCatfishService().postToMainHandler(new CUIResponseErrorExecutor(this.mIfclient, this.message.recipient, ServiceERRORCode.ALLREADY_A_FRIEND));
                    return;
                }
                friendListDataStorage.addPendingRequest(this.message);
                catfishService4 = getCatfishService();
                iCatfishUIBinder = this.mIBinder;
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                catfishService4.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), this.message, ServiceOP.SERVICEOP_UICLIENT_REQUESTFRIEND_GETPROFILE));
                return;
            case R.styleable.Theme_dividerHorizontal /*56*/:
                Log.d(TAG, "resending friendrequest");
                catfishService4 = getCatfishService();
                iCatfishUIBinder = this.mIBinder;
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                catfishService4.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), this.message, ServiceOP.SERVICEOP_UICLIENT_REQUESTFRIEND_GETPROFILE));
                return;
            case R.styleable.Theme_activityChooserViewStyle /*57*/:
                if (this.message.recipientname != null && this.message.recipientname.length() > 0) {
                    catfishDataStorage = new CatfishDataStorage(getCatfishService());
                    Log.d(TAG, "sequence:" + this.message.sequence);
                    if (catfishDataStorage.updateRecipientNameBlockList(this.message)) {
                        Log.d(TAG, "Update BLOCKED NIC name: " + this.message.recipient + ", seq= " + String.valueOf(this.message.sequence) + ":SUCCESS");
                    } else {
                        Log.e(TAG, "Update BLOCKED NIC name: " + this.message.recipient + ", seq= " + String.valueOf(this.message.sequence) + ":FAIL");
                    }
                    getCatfishService().signalBlacklistNicNameReady(catfishDataStorage.getBlockedNicList());
                    return;
                }
                return;
            case R.styleable.Theme_toolbarStyle /*58*/:
                if (this.message.recipientname != null && this.message.recipientname.length() > 0) {
                    catfishDataStorage = new CatfishDataStorage(getCatfishService());
                    if (catfishDataStorage.updateRecipientNameNicMsg(this.message)) {
                        Log.d(TAG, "Update NIC Message: " + this.message.senderpin + ", objseq= " + String.valueOf(this.message.object_sequence) + ":SUCCESS");
                    } else {
                        Log.e(TAG, "Update NIC Message: " + this.message.senderpin + ", objseq= " + String.valueOf(this.message.object_sequence) + ":FAIL");
                    }
                    getCatfishService().signalNicMsgRecipientNameReady(catfishDataStorage.getNicMessageList());
                    return;
                }
                return;
            case R.styleable.Theme_toolbarNavigationButtonStyle /*59*/:
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                if (friendListDataStorage.updatePendingRequest(this.message)) {
                    chatConversation = friendListDataStorage.getAllPendingRequest();
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_ALL_PENDINGREQ_KEY, chatConversation));
                    return;
                }
                Log.e(TAG, "UPDATE PENDING REQUEST: FAIL");
                return;
            case R.styleable.Theme_popupMenuStyle /*60*/:
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                this.message.messagetype = MessageType.INVALID_REQUEST;
                if (friendListDataStorage.updateDropPendingRequest(this.message)) {
                    chatConversation = friendListDataStorage.getAllPendingRequest();
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_ALL_PENDINGREQ_KEY, chatConversation));
                    return;
                }
                Log.e(TAG, "UPDATE PENDING REQUEST: FAIL");
                return;
            case R.styleable.Theme_popupWindowStyle /*61*/:
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                if (friendListDataStorage.deletePendingRequest(this.message) > 0) {
                    allPendingRequest = friendListDataStorage.getAllPendingRequest();
                    catfishService = getCatfishService();
                    iCatfishUIBinder = this.mIBinder;
                    catfishService2 = getCatfishService();
                    getCatfishService();
                    catfishService.postRunnableToService(new DeletePendingRequestFriendExecutor(iCatfishUIBinder, catfishService2, CatfishService.getCurrentServerHost(), this.mIfclient, CatfishService.getUserPIN(), this.message.recipient));
                    iCatfishClientInterface3 = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface3, CatfishService.DELETE_PENDINGREQ_KEY, allPendingRequest));
                }
                this.message.cleaningup();
                return;
            case R.styleable.Theme_editTextColor /*62*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                if (friendListDataStorage.deleteFriendRequest(this.message) > 0) {
                    isThisOurFriend = friendListDataStorage.getAllFriendRequest();
                    iCatfishClientInterface2 = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface2, CatfishService.GET_ALL_FRIENDREQ_KEY, isThisOurFriend));
                }
                if (!friendListDataStorage.isSenderAFriend(this.message)) {
                    File friendProfilePhotoFile = CatfishPhotoStorage.getFriendProfilePhotoFile(getCatfishService().getApplicationContext(), this.message.senderpin);
                    if (friendProfilePhotoFile != null && friendProfilePhotoFile.exists()) {
                        friendProfilePhotoFile.delete();
                    }
                }
                this.message.cleaningup();
                return;
            case R.styleable.Theme_editTextBackground /*63*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage3 = new FriendListDataStorage(getCatfishService());
                allFriendRequest = friendListDataStorage3.getAllFriendRequest();
                if (friendListDataStorage3.deleteAllFriendRequest() > 0) {
                    chatConversation = friendListDataStorage3.getAllFriendRequest();
                    iCatfishClientInterface4 = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface4, CatfishService.GET_ALL_FRIENDREQ_KEY, chatConversation));
                }
                for (i = 0; i < allFriendRequest.getCount(); i++) {
                    allFriendRequest.moveToPosition(i);
                    if (!friendListDataStorage3.isPinAFriend(allFriendRequest.getString(allFriendRequest.getColumnIndex(TaskDataStorage.SENDERPIN)))) {
                        File friendProfilePhotoFile2 = CatfishPhotoStorage.getFriendProfilePhotoFile(getCatfishService().getApplicationContext(), this.message.senderpin);
                        if (friendProfilePhotoFile2 != null && friendProfilePhotoFile2.exists()) {
                            friendProfilePhotoFile2.delete();
                        }
                    }
                }
                allFriendRequest.close();
                return;
            case R.styleable.Theme_imageButtonStyle /*64*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage4 = new FriendListDataStorage(getCatfishService());
                if (friendListDataStorage4.deleteRecipientFromFriendRequest(this.message) > 0) {
                    catfishService3 = getCatfishService();
                    iCatfishUIBinder = this.mIBinder;
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    catfishService3.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), this.message, ServiceOP.SERVICEOP_UICLIENT_ACCEPTFRIEND));
                    chatConversation = friendListDataStorage4.getAllFriendRequest();
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_ALL_FRIENDREQ_KEY, chatConversation));
                    return;
                }
                return;
            case R.styleable.Theme_textAppearanceSearchResultTitle /*65*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage2 = new FriendListDataStorage(getCatfishService());
                allFriendRequest2 = friendListDataStorage2.getAllFriendRequest();
                columnIndex2 = allFriendRequest2.getColumnIndex(TaskDataStorage.SENDERPIN);
                columnIndex3 = allFriendRequest2.getColumnIndex(ServerMessageDataStorage.SEQUENCE);
                for (i2 = 0; i2 < allFriendRequest2.getCount(); i2++) {
                    catfishMessageObject2 = new CatfishMessageObject();
                    allFriendRequest2.moveToPosition(i2);
                    catfishMessageObject2.userpin = CatfishService.getUserPIN();
                    catfishMessageObject2.recipient = allFriendRequest2.getString(columnIndex2);
                    catfishMessageObject2.message = null;
                    catfishMessageObject2.sequence = allFriendRequest2.getLong(columnIndex3);
                    if (allFriendRequest2.getString(columnIndex2) != null && friendListDataStorage2.deleteRecipientFromFriendRequest(catfishMessageObject2) > 0) {
                        catfishService6 = getCatfishService();
                        iCatfishUIBinder = this.mIBinder;
                        iCatfishClientInterface = this.mIfclient;
                        getCatfishService();
                        catfishService6.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), catfishMessageObject2, ServiceOP.SERVICEOP_UICLIENT_ACCEPTFRIEND));
                    }
                }
                if (allFriendRequest2 != null) {
                    allFriendRequest2.close();
                }
                chatConversation = friendListDataStorage2.getAllFriendRequest();
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_ALL_FRIENDREQ_KEY, chatConversation));
                return;
            case R.styleable.Theme_textAppearanceSearchResultSubtitle /*66*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                if (new FriendListDataStorage(getCatfishService()).addRecipientAsNewFriend(this.message)) {
                    getCatfishService().signalNewFriendAdded();
                    long uniqueMonotonicSequence = CatfishRESTAPI.uniqueMonotonicSequence();
                    getCatfishService();
                    CatfishService.getCatfishPreferences().edit().putLong(CatfishService.FRIENDLIST_TIMESTAMP, uniqueMonotonicSequence).commit();
                    catfishService5 = getCatfishService();
                    CatfishService catfishService8 = getCatfishService();
                    getCatfishService();
                    catfishService5.postToServiceHandler(new FriendListUpdateExecutor(null, catfishService8, CatfishService.getCurrentServerHost(), this.message.userpin));
                }
                this.message.cleaningup();
                return;
            case R.styleable.Theme_textColorSearchUrl /*67*/:
                chatConversation = new CatfishDataStorage(getCatfishService()).getNicMessageList();
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_NIC_MESSAGE, chatConversation));
                return;
            case R.styleable.Theme_searchViewStyle /*68*/:
                chatConversation = new CatfishDataStorage(getCatfishService()).getNicMessageConv(this.message.conversation_key);
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_NIC_MESSAGE_CONV, chatConversation));
                return;
            case R.styleable.Theme_listPreferredItemHeight /*69*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                catfishDataStorage.deleteNicMessage(this.message);
                chatConversation = catfishDataStorage.getNicMessageList();
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_NIC_MESSAGE, chatConversation));
                return;
            case R.styleable.Theme_listPreferredItemHeightSmall /*70*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage3 = new FriendListDataStorage(getCatfishService());
                allFriendRequest = catfishDataStorage.getChatConversation(this.message);
                allFriendRequest.getCount();
                while (allFriendRequest.moveToNext()) {
                    CatfishMessageObject obtain = CatfishMessageObject.obtain();
                    columnIndex4 = allFriendRequest.getColumnIndex(CatfishDataStorage.CONVERSATION_KEY);
                    columnIndex5 = allFriendRequest.getColumnIndex(ServerMessageDataStorage.SEQUENCE);
                    obtain.conversation_key = allFriendRequest.getString(columnIndex4);
                    obtain.sequence = allFriendRequest.getLong(columnIndex5);
                    allFriends = catfishDataStorage.getSingleImageThumbsInChat(obtain);
                    columnIndex5 = allFriends.getCount();
                    friendPINs = catfishDataStorage.getSingleVoiceFileInChat(obtain);
                    count3 = friendPINs.getCount();
                    allFriendRequest2 = catfishDataStorage.getSingleImageFileInChat(obtain);
                    columnIndex2 = allFriendRequest2.getCount();
                    singleDataFileInChat = catfishDataStorage.getSingleDataFileInChat(obtain);
                    count4 = singleDataFileInChat.getCount();
                    groupContactLike = catfishDataStorage.getLongMessageFileInChatStatcom(obtain);
                    count5 = groupContactLike.getCount();
                    deleteImageThumbs(allFriends, columnIndex5);
                    deleteVoiceFiles(friendPINs, count3);
                    deleteImageFiles(allFriendRequest2, columnIndex2);
                    deleteDataFiles(singleDataFileInChat, count4);
                    deleteLongMessageFiles(groupContactLike, count5);
                }
                catfishDataStorage.deleteChatConversation(this.message);
                friendListDataStorage3.updateActivityCount(this.message.recipient, 99);
                friendListDataStorage3.updateLastChatActivity(this.mMessage.recipient, 0);
                chatConversation = catfishDataStorage.getChatConversation(this.message);
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_CONVERSATION_KEY, chatConversation));
                return;
            case R.styleable.Theme_listPreferredItemHeightLarge /*71*/:
                CatfishDataStorage catfishDataStorage3 = new CatfishDataStorage(getCatfishService());
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                singleImageThumbsInChat = catfishDataStorage3.getSingleImageThumbsInChat(this.message);
                columnIndex3 = singleImageThumbsInChat.getCount();
                singleVoiceFileInChat = catfishDataStorage3.getSingleVoiceFileInChat(this.message);
                count5 = singleVoiceFileInChat.getCount();
                Cursor singleImageFileInChat = catfishDataStorage3.getSingleImageFileInChat(this.message);
                int count7 = singleImageFileInChat.getCount();
                Cursor singleDataFileInChat2 = catfishDataStorage3.getSingleDataFileInChat(this.message);
                int count8 = singleDataFileInChat2.getCount();
                Cursor longMessageFileInChatStatcom = catfishDataStorage3.getLongMessageFileInChatStatcom(this.message);
                int count9 = longMessageFileInChatStatcom.getCount();
                catfishDataStorage3.deleteSingleChat(this.message);
                isThisOurFriend = catfishDataStorage3.getChatConversation(this.message.conversation_key, "_id DESC");
                if (isThisOurFriend != null && isThisOurFriend.getCount() > 0) {
                    catfishMessageObject = CatfishDataStorage.friendLastMessageBuilder(isThisOurFriend);
                    friendListDataStorage.setLastMessage(this.message.userpin, catfishMessageObject.sequence, catfishMessageObject.message, catfishMessageObject.deliverystatus.ordinal(), catfishMessageObject.type, catfishMessageObject.datafile_path);
                }
                chatConversation = catfishDataStorage3.getChatConversation(this.message);
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_CONVERSATION_KEY, chatConversation));
                deleteImageThumbs(singleImageThumbsInChat, columnIndex3);
                deleteVoiceFiles(singleVoiceFileInChat, count5);
                deleteImageFiles(singleImageFileInChat, count7);
                deleteDataFiles(singleDataFileInChat2, count8);
                deleteLongMessageFiles(longMessageFileInChatStatcom, count9);
                return;
            case R.styleable.Theme_listPreferredItemPaddingLeft /*72*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                Log.d(TAG, "--- DELETE STATCOM CONVERSATION ---");
                isThisOurFriend = catfishDataStorage.getVoiceFileInChat(this.message);
                count = isThisOurFriend.getCount();
                groupContactLike = catfishDataStorage.getImageFileInChat(this.message);
                columnIndex4 = groupContactLike.getCount();
                imagePromoteFileInChat = catfishDataStorage.getImagePromoteFileInChat(this.message);
                i2 = imagePromoteFileInChat.getCount();
                allPendingRequest = catfishDataStorage.getLongMessageFileInChatStatcom(this.message);
                count6 = allPendingRequest.getCount();
                deleteVoiceFiles(isThisOurFriend, count);
                deleteImageFiles(groupContactLike, columnIndex4);
                deleteLongMessageFiles(allPendingRequest, count6);
                deletePromoteFriendImage(imagePromoteFileInChat, i2);
                catfishDataStorage.deleteChatConversation(this.message);
                chatConversation = catfishDataStorage.getChatConversation(this.message);
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_STATCOMM_CONVERSATION_KEY, chatConversation));
                return;
            case R.styleable.Theme_listPreferredItemPaddingRight /*73*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                Log.d(TAG, "--- UPDATE_STICKER_AUTOPLAY ---");
                if (catfishDataStorage.updateStickerAutoPlay(this.message.conversation_key, this.message.messagetype.ordinal())) {
                    Log.d(TAG, "--- UPDATE_STICKER_AUTOPLAY for convkey " + this.message.conversation_key + " Success ---");
                    return;
                } else {
                    Log.d(TAG, "--- UPDATE_STICKER_AUTOPLAY for convkey " + this.message.conversation_key + " Fail/Nothing updated ---");
                    return;
                }
            case CatfishRESTAPI.PROTO_ERROR_PIN_ALLREADYEXISTS /*74*/:
                new PoolDataStorage(getCatfishService()).updateStickerAutoPlay(this.message.topic_key, this.message.messagetype.ordinal());
                return;
            case R.styleable.Theme_listPopupWindowStyle /*75*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                catfishDataStorage.addRecentupdatesSelfStatus(this.message);
                str2 = "sc:" + this.message.userpin + ":" + String.valueOf(this.message.object_sequence);
                this.message.conversation_key = str2;
                allFriendRequest = catfishDataStorage.getVoiceFileInChat(this.message);
                count2 = allFriendRequest.getCount();
                allFriends = catfishDataStorage.getImageFileInChat(this.message);
                columnIndex5 = allFriends.getCount();
                friendPINs = catfishDataStorage.getImagePromoteFileInChat(this.message);
                count3 = friendPINs.getCount();
                allFriendRequest2 = catfishDataStorage.getLongMessageFileInChatStatcom(this.message);
                columnIndex2 = allFriendRequest2.getCount();
                deleteVoiceFiles(allFriendRequest, count2);
                deleteImageFiles(allFriends, columnIndex5);
                deleteLongMessageFiles(allFriendRequest2, columnIndex2);
                deletePromoteFriendImage(friendPINs, count3);
                catfishDataStorage.deleteChatConversation(str2);
                catfishService4 = getCatfishService();
                iCatfishUIBinder = this.mIBinder;
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                catfishService4.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), this.message, ServiceOP.SERVICEOP_UICLIENT_SETUSERSTATUS));
                return;
            case R.styleable.Theme_textAppearanceListItem /*76*/:
                CatfishDataStorage catfishDataStorage4 = new CatfishDataStorage(getCatfishService());
                catfishMessageObject4 = new CatfishMessageObject();
                catfishMessageObject4.userpin = this.message.userpin;
                catfishMessageObject4.recipient = this.message.recipient;
                catfishMessageObject4.username = this.message.username;
                catfishMessageObject4.messagetype = MessageType.NIC_MESSAGE;
                catfishMessageObject4.message = this.message.message;
                catfishMessageObject4.rcvtimestamp = this.message.sequence;
                catfishMessageObject4.sequence = this.message.sequence;
                catfishMessageObject4.deliverystatus = MessageDeliveryStatus.QUEUEING;
                catfishMessageObject4.conversation_key = "nm:" + this.message.userpin + ":" + this.message.recipient;
                this.message.conversation_key = "nm:" + this.message.userpin + ":" + this.message.recipient;
                this.message.messagetype = MessageType.NIC_MESSAGE;
                Log.d(TAG, "----WRITE USER MESSAGE TO DB---");
                updateTaskState(String.valueOf(this.message.sequence), this.message.recipient, catfishMessageObject4.messagetype.ordinal(), MessageContext.NIC_MESSAGE.ordinal(), null, true);
                if (isResumeProcess()) {
                    catfishService4 = getCatfishService();
                    iCatfishUIBinder = this.mIBinder;
                    catfishService2 = getCatfishService();
                    getCatfishService();
                    catfishService4.postToServiceHandler(new UIClientSendMessageConvKeyExecutor(iCatfishUIBinder, catfishService2, CatfishService.getCurrentServerHost(), this.mIfclient, this.message), 1);
                    return;
                }
                if (catfishDataStorage4.storeUserMessage(catfishMessageObject4)) {
                    catfishService4 = getCatfishService();
                    iCatfishUIBinder = this.mIBinder;
                    catfishService2 = getCatfishService();
                    getCatfishService();
                    catfishService4.postToServiceHandler(new UIClientSendMessageConvKeyExecutor(iCatfishUIBinder, catfishService2, CatfishService.getCurrentServerHost(), this.mIfclient, this.message));
                    catfishMessageObject4.conversation_key = "nm:" + this.message.userpin + ":" + this.message.recipient + ":" + this.message.sequence;
                    getCatfishService().signalNicMsgRecipientNameReady(catfishDataStorage4.getNicMessageList());
                } else {
                    Log.d(TAG, "----masuk else---");
                }
                Log.d(TAG, "----get recipientname--- userpin" + catfishMessageObject4.userpin);
                transfromDBCursor = 1;
                try {
                    str2 = new JSONObject(this.message.message).getString(FriendListDataStorage.RECIPIENTNAME);
                    if (!(str2 == null || str2.compareTo("") == 0)) {
                        transfromDBCursor = null;
                    }
                } catch (JSONException e5) {
                    e5.printStackTrace();
                }
                if (transfromDBCursor != null) {
                    this.mIBinder.getFriendNameFromServer(this.mIfclient, catfishMessageObject4.userpin, catfishMessageObject4.recipient, catfishMessageObject4.sequence, catfishMessageObject4.message);
                    return;
                }
                return;
            case R.styleable.Theme_textAppearanceListItemSmall /*77*/:
                if (this.message.source < 2) {
                    CatfishDataStorage catfishDataStorage5 = new CatfishDataStorage(getCatfishService());
                    friendListDataStorage5 = new FriendListDataStorage(getCatfishService());
                    catfishMessageObject2 = new CatfishMessageObject();
                    catfishMessageObject2.userpin = this.message.userpin;
                    catfishMessageObject2.recipient = this.message.recipient;
                    catfishMessageObject2.username = this.message.username;
                    catfishMessageObject2.messagetype = this.message.messagetype;
                    catfishMessageObject2.message = this.message.message;
                    catfishMessageObject2.rcvtimestamp = this.message.sequence;
                    catfishMessageObject2.sequence = this.message.sequence;
                    catfishMessageObject2.deliverystatus = MessageDeliveryStatus.QUEUEING;
                    if (!(this.mOperation != DatabaseRequestOP.SENDMESSAGE || this.message == null || this.message.message == null)) {
                        try {
                            bytes = this.message.message.getBytes(HTTP.UTF_8);
                        } catch (UnsupportedEncodingException e6) {
                            unsupportedEncodingException = e6;
                            bytes = this.message.message.getBytes();
                            unsupportedEncodingException.printStackTrace();
                        }
                        if (bytes.length > AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT) {
                            catfishMessageObject2.messagetype = MessageType.LONG_MESSAGE;
                        }
                    }
                    if (this.message.source == 0) {
                        catfishMessageObject2.conversation_key = this.message.userpin + ":" + this.message.recipient;
                    } else if (this.message.source == 1) {
                        catfishMessageObject2.conversation_key = "sc:" + this.message.recipient + ":" + String.valueOf(this.message.object_sequence);
                    }
                    if (catfishDataStorage5.storeUserMessage(catfishMessageObject2)) {
                        friendListDataStorage5.setFriendLastActivity(this.message.recipient, this.message.sequence);
                        chatConversation = catfishDataStorage5.getChatConversation(catfishMessageObject2.conversation_key);
                        if (this.message.source == 0) {
                            friendListDataStorage5.updateActivityCount(this.message.recipient, HttpStatus.SC_MULTIPLE_CHOICES);
                        } else {
                            friendListDataStorage5.updateActivityCount(this.message.recipient, 100);
                        }
                        CatfishService.signalFizzlinkUpload(chatConversation);
                        return;
                    }
                    return;
                }
                poolDataStorage2 = new PoolDataStorage(getCatfishService());
                catfishMessageObject3 = new CatfishMessageObject();
                catfishMessageObject3.userpin = this.message.userpin;
                catfishMessageObject3.username = this.message.username;
                catfishMessageObject3.topic_key = this.message.topic_key;
                catfishMessageObject3.message = this.message.message;
                catfishMessageObject3.messagetype = MessageType.SHARE_SLINK_AT_POOL;
                catfishMessageObject3.object_owner = this.message.topic_key.split(":")[0];
                catfishMessageObject3.object_sequence = Long.parseLong(this.message.topic_key.split(":")[1]);
                catfishMessageObject3.rcvtimestamp = this.message.sequence;
                catfishMessageObject3.sequence = this.message.sequence;
                poolDataStorage2.storeSingleDiscuss(catfishMessageObject3);
                return;
            case R.styleable.Theme_panelBackground /*78*/:
                i = new CatfishDataStorage(getCatfishService()).getUnreadStatusCommentCount();
                postResponse(new CUIResponseExecutor(this.mIfclient) {
                    public void run() {
                        this.ifselfclient.onDataCount(i);
                    }
                });
                return;
            case R.styleable.Theme_panelMenuListWidth /*79*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                catfishMessageObject3 = new CatfishMessageObject();
                catfishMessageObject3.message = this.message.message;
                str2 = catfishDataStorage.setStatusDownloadFlag(catfishMessageObject3, "downloading");
                if (str2 != null) {
                    this.message.conversation_key = str2;
                    chatConversation = catfishDataStorage.getChatConversation(this.message);
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_STATCOMM_CONVERSATION_KEY, chatConversation));
                    return;
                }
                return;
            case R.styleable.Theme_panelMenuListTheme /*80*/:
                if (this.mIfclient != null && !this.mIfclient.isFinish()) {
                    transfromDBCursor = this.mIfclient.dispatchDBRequest(getCatfishService(), DatabaseRequestOP.GET_ALL_RECENTUPDATES, 0);
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_ALL_RECENTUPDATES_KEY, transfromDBCursor));
                    return;
                }
                return;
            case R.styleable.Theme_listChoiceBackgroundIndicator /*81*/:
                if (this.mIfclient != null && !this.mIfclient.isFinish()) {
                    transfromDBCursor = this.mIfclient.dispatchDBRequest(getCatfishService(), DatabaseRequestOP.DELETE_ALL_RECENTUPDATES, 0);
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.DELETE_ALL_RECENTUPDATES_KEY, transfromDBCursor));
                    return;
                }
                return;
            case R.styleable.Theme_colorPrimary /*82*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage4 = new FriendListDataStorage(getCatfishService());
                isThisOurFriend = catfishDataStorage.getImageThumbsInChat(this.message);
                deleteImageThumbs(isThisOurFriend, isThisOurFriend.getCount());
                if (!CatfishPhotoStorage.delFriendFoto(getCatfishService(), this.message.recipient)) {
                    Log.e(TAG, "fail to deleteing friend photo: ignore");
                }
                if (catfishDataStorage.deleteRecipientFromFriend(this.message)) {
                    catfishService3 = getCatfishService();
                    iCatfishUIBinder = this.mIBinder;
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    catfishService3.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), this.message, ServiceOP.SERVICEOP_DELETE_FRIEND));
                    if (this.mIfclient != null && !this.mIfclient.isFinish()) {
                        chatConversation = friendListDataStorage4.getAllFriendsForFriendlist();
                        transfromDBCursor2 = this.mIfclient.transfromDBCursor(DatabaseRequestOP.GET_ALL_FRIENDLIST, chatConversation, 0);
                        chatConversation.close();
                        iCatfishClientInterface = this.mIfclient;
                        getCatfishService();
                        postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_ALL_FRIENDLIST_KEY, transfromDBCursor2));
                        return;
                    }
                    return;
                }
                return;
            case R.styleable.Theme_colorPrimaryDark /*83*/:
                arrayList = (ArrayList) this.message.otherData;
                CatfishDataStorage catfishDataStorage6 = new CatfishDataStorage(getCatfishService());
                FriendListDataStorage friendListDataStorage6 = new FriendListDataStorage(getCatfishService());
                count = 0;
                while (count < arrayList.size()) {
                    this.message.recipient = (String) arrayList.get(count);
                    this.message.conversation_key = this.message.userpin + ":" + ((String) arrayList.get(count));
                    isThisOurFriend = catfishDataStorage6.getImageThumbsInChat(this.message);
                    deleteImageThumbs(isThisOurFriend, isThisOurFriend.getCount());
                    if (!CatfishPhotoStorage.delFriendFoto(getCatfishService().getApplicationContext(), this.message.recipient)) {
                        Log.e(TAG, "fail to deleteing friend photo: ignore");
                    }
                    count = catfishDataStorage6.deleteRecipientFromFriend(this.message) ? count + 1 : count + 1;
                }
                isThisOurFriend = friendListDataStorage6.getGroupContact(false, Long.toString(this.message.groupid));
                allFriendRequest = friendListDataStorage6.getAllFriendsWHLimit();
                if (this.message.message == null) {
                    iCatfishClientInterface4 = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponseDoubleCursor(iCatfishClientInterface4, CatfishService.GET_CHILD_GROUP_CONTACT_LIST, isThisOurFriend, allFriendRequest));
                }
                arrayList.clear();
                return;
            case R.styleable.Theme_colorAccent /*84*/:
                arrayList = (ArrayList) this.message.otherData;
                CatfishDataStorage catfishDataStorage7 = new CatfishDataStorage(getCatfishService());
                friendListDataStorage5 = new FriendListDataStorage(getCatfishService());
                for (count = 0; count < arrayList.size(); count++) {
                    this.message.recipient = (String) arrayList.get(count);
                    if (friendListDataStorage5.moveToCategory((int) this.message.groupid, (int) this.message.grouptimestamp, this.message.recipient) == -99) {
                        Toast.makeText(getCatfishService(), getCatfishService().getString(R.string.cannot_add_to_category), 1).show();
                    }
                }
                new LocalBackup().backupCategorylist(getCatfishService().getApplicationContext());
                isThisOurFriend = friendListDataStorage5.getGroupContact(false, Long.toString(this.message.groupid));
                allFriendRequest = friendListDataStorage5.getAllFriendsWHLimit();
                if (this.message.message == null) {
                    iCatfishClientInterface4 = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponseDoubleCursor(iCatfishClientInterface4, CatfishService.GET_CHILD_GROUP_CONTACT_LIST, isThisOurFriend, allFriendRequest));
                }
                arrayList.clear();
                return;
            case R.styleable.Theme_colorControlNormal /*85*/:
                new FriendListDataStorage(getCatfishService()).setUnReadMessageStatus(this.message.recipient, 0, 0);
                return;
            case R.styleable.Theme_colorControlActivated /*86*/:
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                friendListDataStorage.setUnReadStatCommStatus(this.message.object_owner, 0, 0);
                friendListDataStorage.setFollow(this.message.object_owner);
                return;
            case CatfishRESTAPI.PROTO_ERROR_DEVICEID_ALREADYREGISTERED /*87*/:
                Log.d(TAG, "----save profile for: " + this.message.senderpin);
                if (this.message.senderpin == null) {
                    Log.d(TAG, "----friendpin invalid");
                    return;
                } else if (this.message.senderpin.length() <= 0) {
                    Log.d(TAG, "----friendpin invalid");
                    return;
                } else if (this.message.message == null) {
                    Log.d(TAG, "----profile invalid");
                    return;
                } else if (this.message.message.length() <= 0) {
                    Log.d(TAG, "----profile invalid");
                    return;
                } else {
                    catfishDataStorage = new CatfishDataStorage(getCatfishService());
                    if (new FriendListDataStorage(getCatfishService()).updateFriendDataProfile(this.message)) {
                        Log.d(TAG, "----Receive Friend Profile Update: DB update success");
                        if (this.message.isAcceptFriend) {
                            getCatfishService().postToDBHandler(new CUIDBRecentUpdate(null, this.message.senderpin, 1));
                            return;
                        }
                        return;
                    }
                    Log.d(TAG, "----Receive Friend Profile Update: DB update for " + this.message.userpin + " fail");
                    return;
                }
            case R.styleable.Theme_colorButtonNormal /*88*/:
                if (this.message.senderpin != null && this.message.senderpin.length() > 0 && this.message.message != null && this.message.message.length() > 0) {
                    Log.d(TAG, "----Receive Friend USERATIVITY Update: DB update success, message:" + this.message.message + " sender:" + this.message.senderpin);
                    if (new FriendListDataStorage(getCatfishService()).updateFriendUserActivity(this.message)) {
                        Log.d(TAG, "----Receive Friend USERATIVITY Update: DB update success");
                        return;
                    } else {
                        Log.d(TAG, "----Receive Friend USERATIVITY Update: DB update for " + this.message.userpin + " fail");
                        return;
                    }
                }
                return;
            case R.styleable.Theme_colorSwitchThumbNormal /*89*/:
                if (this.message.username != null && this.message.username.length() > 0) {
                    friendListDataStorage = new FriendListDataStorage(getCatfishService());
                    this.message.senderpin = this.message.recipient;
                    if (friendListDataStorage.updateFriendProfile(this.message)) {
                        Log.d(TAG, "Update Friend Profile: " + this.message.senderpin + ", objseq= " + String.valueOf(this.message.object_sequence) + ":SUCCESS");
                    } else {
                        Log.e(TAG, "Update Friend Profile: " + this.message.senderpin + ", objseq= " + String.valueOf(this.message.object_sequence) + ":FAIL");
                    }
                    if (this.mIfclient != null && !this.mIfclient.isFinish()) {
                        chatConversation = friendListDataStorage.getAllFriendsForFriendlist();
                        iCatfishClientInterface = this.mIfclient;
                        getCatfishService();
                        postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_ALL_FRIENDLIST_KEY, chatConversation));
                        return;
                    }
                    return;
                }
                return;
            case R.styleable.Theme_controlBackground /*90*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
                String[][] strArr;
                if (catfishPreferences.getString("activity_status", null) == null) {
                    strArr = new String[1][];
                    strArr[0] = new String[]{"activity_status", catfishPreferences.getString("activity_status", null)};
                    str2 = createActivityJson(strArr);
                    this.message.data_json = str2;
                    this.message.username = catfishPreferences.getString(CatfishService.USERNAME_PREF, null);
                    Log.d(TAG, "activityJson:" + str2);
                    catfishService4 = getCatfishService();
                    iCatfishUIBinder = this.mIBinder;
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    catfishService4.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), this.message, ServiceOP.SERVICEOP_UICLIENT_USER_ACTIVITY));
                    Log.d(TAG, "notify friend for user activity update");
                    getCatfishService().postToDBHandler(new CUIDatabaseRequestExecutor(this.mIBinder, this.mIfclient, this.message, DatabaseRequestOP.NOTIFYFRD_USERACTIVITYUPDATE));
                } else {
                    strArr = new String[1][];
                    strArr[0] = new String[]{"activity_status", catfishPreferences.getString("activity_status", null)};
                    str2 = createActivityJson(strArr);
                    this.message.data_json = str2;
                    this.message.username = catfishPreferences.getString(CatfishService.USERNAME_PREF, null);
                    Log.d(TAG, "activityJson:" + str2);
                    catfishService4 = getCatfishService();
                    iCatfishUIBinder = this.mIBinder;
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    catfishService4.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), this.message, ServiceOP.SERVICEOP_UICLIENT_USER_ACTIVITY));
                    Log.d(TAG, "notify friend for user activity update");
                    getCatfishService().postToDBHandler(new CUIDatabaseRequestExecutor(this.mIBinder, this.mIfclient, this.message, DatabaseRequestOP.NOTIFYFRD_USERACTIVITYUPDATE));
                }
                return;
            case R.styleable.Theme_alertDialogStyle /*91*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                if (friendListDataStorage.isDataExist(this.message)) {
                    friendListDataStorage.setProfile(this.message);
                } else {
                    friendListDataStorage.storeProfile(this.message);
                }
                if (this.message.rdcounter == 1) {
                    Log.d(TAG, "SEND SAVED PROFILE TO SERVER");
                    catfishService4 = getCatfishService();
                    iCatfishUIBinder = this.mIBinder;
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    catfishService4.postToServiceHandler(new CUIServiceExecutor(iCatfishUIBinder, iCatfishClientInterface, CatfishService.getCurrentServerHost(), this.message, ServiceOP.SERVICEOP_UICLIENT_SETUSERPROFILE));
                    return;
                }
                return;
            case R.styleable.Theme_alertDialogButtonGroupStyle /*92*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                if (friendListDataStorage.isDataExist(this.message)) {
                    friendListDataStorage.setProfileManualByUser(this.message);
                    return;
                } else {
                    friendListDataStorage.storeProfileManualByUser(this.message);
                    return;
                }
            case R.styleable.Theme_alertDialogCenterButtons /*93*/:
                poolDataStorage2 = new PoolDataStorage(getCatfishService());
                poolDataStorage2.setUnReadItemInTopic(this.message.topic_key, 0);
                poolDataStorage2.updateLastReadTopic(this.message.topic_key);
                return;
            case R.styleable.Theme_alertDialogTheme /*94*/:
                saveChatConversation(new CatfishDataStorage(getCatfishService()).getChatConversation(this.message), this.message.sendername);
                return;
            case R.styleable.Theme_textColorAlertDialogListItem /*95*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                j = this.message.sequence;
                isThisOurFriend = catfishDataStorage.getChatImageThumbsInChat(j);
                columnIndex4 = isThisOurFriend.getCount();
                imagePromoteFileInChat = catfishDataStorage.getChatVoiceFileInChat(j);
                i2 = imagePromoteFileInChat.getCount();
                allPendingRequest = catfishDataStorage.getChatImageFileInChat(j);
                count6 = allPendingRequest.getCount();
                singleImageThumbsInChat = catfishDataStorage.getChatDataFileInChat(j);
                columnIndex3 = singleImageThumbsInChat.getCount();
                singleVoiceFileInChat = catfishDataStorage.getLongMessageFileInChatStatcom(j);
                count5 = singleVoiceFileInChat.getCount();
                deleteImageThumbs(isThisOurFriend, columnIndex4);
                deleteVoiceFiles(imagePromoteFileInChat, i2);
                deleteImageFiles(allPendingRequest, count6);
                deleteLongMessageFiles(singleVoiceFileInChat, count5);
                deleteDataFiles(singleImageThumbsInChat, columnIndex3);
                catfishDataStorage.deleteChatConversationAlls(j, "chat");
                return;
            case R.styleable.Theme_buttonBarPositiveButtonStyle /*96*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage3 = new FriendListDataStorage(getCatfishService());
                j = this.message.sequence;
                allFriends = catfishDataStorage.getStatusImageThumbsInChat(j);
                columnIndex5 = allFriends.getCount();
                friendPINs = catfishDataStorage.getStatusVoiceFileInChat(j);
                count3 = friendPINs.getCount();
                allFriendRequest2 = catfishDataStorage.getStatusImageFileInChat(j);
                columnIndex2 = allFriendRequest2.getCount();
                singleDataFileInChat = catfishDataStorage.getImagePromoteFileInChat(j);
                count4 = singleDataFileInChat.getCount();
                Cursor longMessageFileInChatStatcom2 = catfishDataStorage.getLongMessageFileInChatStatcom(j);
                int count10 = longMessageFileInChatStatcom2.getCount();
                deleteImageThumbs(allFriends, columnIndex5);
                deleteVoiceFiles(friendPINs, count3);
                deleteImageFiles(allFriendRequest2, columnIndex2);
                deleteLongMessageFiles(longMessageFileInChatStatcom2, count10);
                deletePromoteFriendImage(singleDataFileInChat, count4);
                friendListDataStorage3.updateAllFriendStatCommUnread();
                getCatfishService();
                CatfishService.getCatfishPreferences().edit().putInt(FriendListDataStorage.LIKESTATUS, 0).commit();
                catfishDataStorage.deleteChatConversationAlls(j, FriendListDataStorage.STATUS);
                if (this.mIfclient != null && !this.mIfclient.isFinish()) {
                    chatConversation = friendListDataStorage3.getAllFriends();
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_ALL_FRIENDLIST_KEY, chatConversation));
                    return;
                }
                return;
            case R.styleable.Theme_buttonBarNegativeButtonStyle /*97*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                try {
                    friendPINs = friendListDataStorage.getGroupContact(false, Long.toString(this.message.groupid));
                    allPendingRequest = friendListDataStorage.getAllFriendsCategoryWHLimit();
                    if (this.message.message == null) {
                        iCatfishClientInterface3 = this.mIfclient;
                        getCatfishService();
                        postResponse(new CUIDatabaseResponseDoubleCursor(iCatfishClientInterface3, CatfishService.GET_CHILD_GROUP_CONTACT_LIST, friendPINs, allPendingRequest));
                        return;
                    }
                    str3 = null;
                    if (this.message.datafile_path != null) {
                        str3 = this.message.datafile_path;
                    }
                    columnIndex = friendPINs.getCount();
                    String[] strArr2 = new String[columnIndex];
                    for (i = 0; i < columnIndex; i++) {
                        friendPINs.moveToPosition(i);
                        strArr2[i] = friendPINs.getString(friendPINs.getColumnIndex(FriendListDataStorage.FRIENDPIN));
                    }
                    str4 = this.message.message;
                    String userPIN = CatfishService.getUserPIN();
                    if (str3 != null) {
                        this.mIBinder.sendBroadcastVoice(this.mIfclient, userPIN, strArr2, str3, str4);
                    } else {
                        this.mIBinder.sendBroadcastMessage(this.mIfclient, userPIN, strArr2, str4);
                    }
                    friendPINs.close();
                    allPendingRequest.close();
                    return;
                } catch (Exception e7) {
                    e7.printStackTrace();
                    return;
                }
            case R.styleable.Theme_buttonBarNeutralButtonStyle /*98*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                getCatfishService().getSharedPreferences(PREFERENCE_NAME, 0);
                if (friendListDataStorage.isGroupFriendTabelEmpty()) {
                    friendListDataStorage.createFizzGroupContact();
                } else {
                    Toast.makeText(getCatfishService(), R.string.rebuild_alert, 1).show();
                    friendListDataStorage.refreshContactCategory();
                }
                chatConversation = friendListDataStorage.getGroupContact(true, null);
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_GROUP_CONTACT_LIST, chatConversation));
                return;
            case R.styleable.Theme_autoCompleteTextViewStyle /*99*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                SharedPreferences sharedPreferences = getCatfishService().getSharedPreferences(PREFERENCE_NAME, 0);
                if (friendListDataStorage.isGroupFriendTabelEmpty()) {
                    friendListDataStorage.createFizzGroupContact();
                } else if (sharedPreferences.contains(FriendListDataStorage.REBUILD_CATEGORY)) {
                    Toast.makeText(getCatfishService(), R.string.rebuild_alert, 1).show();
                    friendListDataStorage.refreshContactCategory();
                }
                chatConversation = friendListDataStorage.getGroupContact(true, null);
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_GROUP_CONTACT_LIST, chatConversation));
                return;
            case HttpStatus.SC_CONTINUE /*100*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage3 = new FriendListDataStorage(getCatfishService());
                friendListDataStorage3.addNewContactCategory(this.message.groupname, this.message.data_json.compareTo("add") == 0, this.message.groupdesc);
                chatConversation = friendListDataStorage3.getGroupContact(true, null);
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_GROUP_CONTACT_LIST, chatConversation));
                new LocalBackup().backupCategorylist(getCatfishService().getApplicationContext());
                return;
            case HttpStatus.SC_SWITCHING_PROTOCOLS /*101*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                columnIndex = friendListDataStorage.moveToCategory((int) this.message.groupid, (int) this.message.grouptimestamp, this.message.recipient);
                new LocalBackup().backupCategorylist(getCatfishService().getApplicationContext());
                if (columnIndex != -99) {
                    isThisOurFriend = friendListDataStorage.getGroupContact(false, Integer.toString(columnIndex));
                    chatConversation = friendListDataStorage.getAllFriends();
                    iCatfishClientInterface2 = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponseDoubleCursor(iCatfishClientInterface2, CatfishService.GET_CHILD_GROUP_CONTACT_LIST, isThisOurFriend, chatConversation));
                    return;
                }
                Toast.makeText(getCatfishService(), getCatfishService().getString(R.string.cannot_add_to_category), 1).show();
                return;
            case HttpStatus.SC_PROCESSING /*102*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                isThisOurFriend = friendListDataStorage.getGroupContact(false, Integer.toString(friendListDataStorage.deleteFriendFromCategory((int) this.message.groupid, this.message.userpin)));
                chatConversation = friendListDataStorage.getAllFriends();
                iCatfishClientInterface2 = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponseDoubleCursor(iCatfishClientInterface2, CatfishService.GET_CHILD_GROUP_CONTACT_LIST, isThisOurFriend, chatConversation));
                return;
            case R.styleable.Theme_checkedTextViewStyle /*103*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage3 = new FriendListDataStorage(getCatfishService());
                for (String str32 : this.message.recipients) {
                    friendListDataStorage3.deleteFriendFromCategory((int) this.message.groupid, str32);
                }
                chatConversation = friendListDataStorage3.getGroupContact(false, Integer.toString((int) this.message.groupid));
                isThisOurFriend = friendListDataStorage3.getAllFriends();
                iCatfishClientInterface2 = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponseDoubleCursor(iCatfishClientInterface2, CatfishService.GET_CHILD_GROUP_CONTACT_LIST, chatConversation, isThisOurFriend));
                return;
            case R.styleable.Theme_editTextStyle /*104*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage3 = new FriendListDataStorage(getCatfishService());
                for (int columnIndex42 : this.message.groupids) {
                    friendListDataStorage3.deleteFriendFromCategory(columnIndex42, this.message.userpin);
                }
                chatConversation = friendListDataStorage3.getGroupContact(false, Integer.toString(this.message.groupids[0]));
                isThisOurFriend = friendListDataStorage3.getAllFriends();
                iCatfishClientInterface2 = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponseDoubleCursor(iCatfishClientInterface2, CatfishService.GET_CHILD_GROUP_CONTACT_LIST, chatConversation, isThisOurFriend));
                return;
            case R.styleable.Theme_radioButtonStyle /*105*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                if (new FriendListDataStorage(getCatfishService()).addToCategory((int) this.message.groupid, this.message.recipient, this.message.recipientname)) {
                    Toast.makeText(getCatfishService(), getCatfishService().getString(R.string.friend_added), 1).show();
                    return;
                } else {
                    Toast.makeText(getCatfishService(), getCatfishService().getString(R.string.cannot_add_to_category), 1).show();
                    return;
                }
            case R.styleable.Theme_ratingBarStyle /*106*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage3 = new FriendListDataStorage(getCatfishService());
                String[] strArr3 = this.message.recipients;
                count2 = strArr3.length;
                i = 0;
                while (i < count2) {
                    i = friendListDataStorage3.addToCategory((int) this.message.groupid, strArr3[i], this.message.recipientname) ? i + 1 : i + 1;
                }
                return;
            case R.styleable.Theme_seekBarStyle /*107*/:
                catfishDataStorage = new CatfishDataStorage(getCatfishService());
                friendListDataStorage3 = new FriendListDataStorage(getCatfishService());
                int[] iArr = this.message.groupids;
                count2 = iArr.length;
                i = 0;
                while (i < count2) {
                    i = friendListDataStorage3.addToCategory(iArr[i], this.message.userpin, this.message.recipientname) ? i + 1 : i + 1;
                }
                return;
            case R.styleable.Theme_spinnerStyle /*108*/:
                chatConversation = new CatfishDataStorage(getCatfishService()).getAllMultimediaMessage();
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_CHAT_MULTIMEDIA_MESSAGE, chatConversation));
                return;
            case R.styleable.Theme_switchStyle /*109*/:
                chatConversation = new PoolDataStorage(getCatfishService()).getTopic(this.message.topic_key);
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_SINGLE_DISCUSS, chatConversation));
                return;
            case 110:
                chatConversation = new FriendListDataStorage(getCatfishService()).getFriend(this.message.conversation_key);
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_SINGLE_MESSAGE, chatConversation));
                return;
            case 111:
                chatConversation = new PoolDataStorage(getCatfishService()).getAllMultimediaDataInPool();
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_ALL_MULTIMEDIA_POOL, chatConversation));
                return;
            case 112:
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                if (friendListDataStorage.deleteCategory((int) this.message.groupid)) {
                    chatConversation = friendListDataStorage.getGroupContact(true, null);
                    iCatfishClientInterface = this.mIfclient;
                    getCatfishService();
                    postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_GROUP_CONTACT_LIST, chatConversation));
                    new LocalBackup().backupCategorylist(getCatfishService().getApplicationContext());
                    return;
                }
                Toast.makeText(getCatfishService(), getCatfishService().getString(R.string.error_del__category), 1).show();
                return;
            case 113:
                friendListDataStorage = new FriendListDataStorage(getCatfishService());
                friendListDataStorage.updateNewFriendRequest(this.message.userpin, this.message.username, 0);
                chatConversation = friendListDataStorage.getAllFriendRequest();
                iCatfishClientInterface = this.mIfclient;
                getCatfishService();
                postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_ALL_FRIENDREQ_KEY, chatConversation));
                return;
            case 114:
                new FriendListDataStorage(getCatfishService()).setUpdateAllFriendMark();
                getCatfishService().postToDBHandler(new CUIDatabaseRequestExecutor(this.mIBinder, this.mIfclient, DatabaseRequestOP.UPDATE_STATUS_FRIENDS));
                return;
            case 115:
                singleDataFileInChat = new FriendListDataStorage(getCatfishService()).getFriendListNeedStatusUpdate();
                Log.d(TAG, "Update status cursor count = " + singleDataFileInChat.getCount());
                singleDataFileInChat.moveToFirst();
                if (singleDataFileInChat.getCount() > 0) {
                    for (columnIndex2 = 0; columnIndex2 < singleDataFileInChat.getCount(); columnIndex2++) {
                        singleDataFileInChat.moveToPosition(columnIndex2);
                        string = singleDataFileInChat.getString(singleDataFileInChat.getColumnIndex(FriendListDataStorage.FRIENDPIN));
                        z = false;
                        if (columnIndex2 == singleDataFileInChat.getCount() - 1) {
                            z = true;
                        }
                        Log.d(TAG, " request update status, friendpin = " + string + " lastupdate = " + z);
                        catfishService6 = getCatfishService();
                        iCatfishUIBinder = this.mIBinder;
                        catfishService2 = getCatfishService();
                        getCatfishService();
                        catfishService6.postToServiceHandler(new UpdateFriendExecutor(iCatfishUIBinder, catfishService2, CatfishService.getCurrentServerHost(), this.mIfclient, CatfishService.getUserPIN(), string, UpdateFriendAction.STATUS, z));
                    }
                } else {
                    getCatfishService().postToDBHandler(new CUIDatabaseRequestExecutor(this.mIBinder, this.mIfclient, DatabaseRequestOP.UPDATE_PHOTO_FRIENDS));
                    Log.d(TAG, "Update status finish");
                }
                singleDataFileInChat.close();
                return;
            case 116:
                singleDataFileInChat = new FriendListDataStorage(getCatfishService()).getFriendListNeedPhotoUpdate();
                Log.d(TAG, "Update photo cursor count = " + singleDataFileInChat.getCount());
                if (singleDataFileInChat.getCount() > 0) {
                    for (columnIndex2 = 0; columnIndex2 < singleDataFileInChat.getCount(); columnIndex2++) {
                        singleDataFileInChat.moveToPosition(columnIndex2);
                        string = singleDataFileInChat.getString(singleDataFileInChat.getColumnIndex(FriendListDataStorage.FRIENDPIN));
                        z = false;
                        if (columnIndex2 == singleDataFileInChat.getCount() - 1) {
                            z = true;
                        }
                        Log.d(TAG, " request update photo, friendpin = " + string + " lastupdate = " + z);
                        Log.d(TAG, "ppf download save to db not downloaded yet");
                        catfishService6 = getCatfishService();
                        iCatfishUIBinder = this.mIBinder;
                        catfishService2 = getCatfishService();
                        getCatfishService();
                        catfishService6.postToServiceHandler(new UpdateFriendExecutor(iCatfishUIBinder, catfishService2, CatfishService.getCurrentServerHost(), this.mIfclient, CatfishService.getUserPIN(), string, UpdateFriendAction.PHOTO, z));
                    }
                } else {
                    Log.d(TAG, "Update photo finish");
                }
                singleDataFileInChat.close();
                return;
            case 117:
                new FriendListDataStorage(getCatfishService()).setUpdatePhotoMark(this.message.userpin, this.message.updatemark);
                return;
            case 118:
                new FriendListDataStorage(getCatfishService()).setUpdateStatusMark(this.message.userpin, this.message.updatemark);
                return;
            default:
                getCatfishService().postToMainHandler(new CUIResponseErrorExecutor(this.mIfclient, "NotAllowed", ServiceERRORCode.SERVICEUNKNOWN));
                return;
        }
    }

    public void saveChatConversation(Cursor cursor, String str) {
        int columnIndex = cursor.getColumnIndex(TaskDataStorage.SENDERPIN);
        int columnIndex2 = cursor.getColumnIndex(TaskDataStorage.TIMESTAMP);
        int columnIndex3 = cursor.getColumnIndex(ServerMessageDataStorage.MESSAGE);
        int columnIndex4 = cursor.getColumnIndex(TaskDataStorage.MESSAGETYPE);
        Date date = new Date(System.currentTimeMillis());
        File file = new File(this.message.datafile_path + "/" + (this.message.title.replace(" ", "_") + "_(" + (String.valueOf(date.getDate()) + "." + String.valueOf(date.getMonth() + 1) + "." + String.valueOf(date.getYear() + 1900)) + ")").replace(" ", "_") + ".txt");
        if (file.exists()) {
            file.delete();
        }
        try {
            file.createNewFile();
        } catch (IOException e) {
            e.printStackTrace();
        }
        CatfishDataStorage catfishDataStorage = new CatfishDataStorage(getCatfishService());
        while (cursor.moveToNext()) {
            if (cursor.getInt(columnIndex4) == MessageType.MESSAGE.ordinal()) {
                String str2 = "";
                str2 = cursor.getString(columnIndex).compareTo(CatfishService.getUserPIN()) == 0 ? "You" : str;
                Date date2 = new Date(cursor.getLong(columnIndex2));
                String string = cursor.getString(columnIndex3);
                if (string == null) {
                    string = " ";
                }
                String str3 = String.valueOf(date2.getDate()) + "/" + String.valueOf(date2.getMonth() + 1) + "/" + String.valueOf(date2.getYear() + 1900) + " " + String.valueOf(date2.getHours()) + ":" + String.valueOf(date2.getMinutes());
                try {
                    BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file, true));
                    bufferedWriter.append(str2 + " " + str3 + "\n" + string.replace("\n", "\\n") + "\n");
                    bufferedWriter.newLine();
                    bufferedWriter.close();
                } catch (IOException e2) {
                    e2.printStackTrace();
                }
            }
        }
    }

    public void saveConversation(Cursor cursor) {
        String encode;
        int columnIndex = cursor.getColumnIndex(ServerMessageDataStorage.SENDERNAME);
        int columnIndex2 = cursor.getColumnIndex(ServerMessageDataStorage.SEQUENCE);
        int columnIndex3 = cursor.getColumnIndex(ServerMessageDataStorage.MESSAGE);
        Calendar instance = Calendar.getInstance();
        int i = instance.get(5);
        int i2 = instance.get(2) + 1;
        int i3 = instance.get(1);
        int i4 = instance.get(11);
        int i5 = instance.get(12);
        try {
            encode = URLEncoder.encode(this.message.title, HTTP.UTF_8);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
            encode = null;
        }
        if (encode == null) {
            encode = this.message.title.replace(" ", "_").replace(":", "_").replace("/", "_").replace("\\", "_").replace("?", "_").replace("%", "_").replace("*", "_").replace("|", "_").replace("\"", "_").replace(">", "_").replace("<", "_");
        }
        File file = new File(this.message.datafile_path + "/" + encode + "_" + (String.valueOf(i) + String.valueOf(i2) + String.valueOf(i3) + "_" + String.valueOf(i4) + String.valueOf(i5)) + ".txt");
        if (file.exists()) {
            file.delete();
        }
        try {
            file.createNewFile();
            while (cursor.moveToNext()) {
                encode = cursor.getString(columnIndex);
                Date date = new Date(cursor.getLong(columnIndex2));
                String replace = cursor.getString(columnIndex3).replace("\n", "\\n");
                String str = String.valueOf(date.getDate()) + "/" + String.valueOf(date.getMonth() + 1) + "/" + String.valueOf(date.getYear() + 1900) + " " + String.valueOf(date.getHours()) + ":" + String.valueOf(date.getMinutes());
                BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file, true));
                bufferedWriter.append(encode + " " + str + "\n" + replace + "\n");
                bufferedWriter.newLine();
                bufferedWriter.close();
            }
            getCatfishService();
            CatfishService.signalToast(getCatfishService().getString(R.string.conference_saved));
        } catch (IOException e2) {
            e2.printStackTrace();
            getCatfishService();
            CatfishService.signalToast(getCatfishService().getString(R.string.save_failed));
        }
    }
}
