package com.catfiz.service.uidbexec;

import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishMessageObject;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.CatfishService;
import com.catfiz.service.CatfishUIBinder.DatabaseRequestOP;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.service.ICatfishClientInterface;
import com.catfiz.service.ICatfishUIBinder;
import com.catfiz.service.uisvcexec.UIClientSendBCASTMessageExecutor;
import com.catfiz.setting.CatfishPreferences;

public class CUIDBSendBCASTExecutor extends CUIDatabaseExecutorBase {
    private static final String TAG = "CUIDBSendMessageExecutor";

    public CUIDBSendBCASTExecutor(ICatfishUIBinder iCatfishUIBinder, ICatfishClientInterface iCatfishClientInterface, CatfishMessageObject catfishMessageObject) {
        super(iCatfishUIBinder, iCatfishClientInterface, catfishMessageObject, DatabaseRequestOP.UNKNOWN);
    }

    public void run() {
        CatfishDataStorage catfishDataStorage = new CatfishDataStorage(getCatfishService());
        FriendListDataStorage friendListDataStorage = new FriendListDataStorage(getCatfishService());
        CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        catfishMessageObject.userpin = this.mMessage.userpin;
        catfishMessageObject.username = catfishPreferences.getString(CatfishService.USERNAME_PREF, null);
        catfishMessageObject.messagetype = MessageType.BCASTMESSAGE;
        catfishMessageObject.message = this.mMessage.message;
        catfishMessageObject.sequence = this.mMessage.sequence;
        catfishMessageObject.deliverystatus = MessageDeliveryStatus.BCASTQUEUE;
        String str = new String();
        int length = this.mMessage.recipients.length;
        int i = length - 1;
        catfishDataStorage.beginTransaction();
        int i2 = 0;
        int i3 = i;
        String str2 = str;
        while (i2 < length) {
            try {
                catfishMessageObject.rcvtimestamp = this.mIBinder.getUniqueMonotonic();
                catfishMessageObject.recipient = this.mMessage.recipients[i2];
                catfishDataStorage.storeUserMessage(catfishMessageObject);
                friendListDataStorage.setFriendLastActivity(this.mMessage.recipients[i2], catfishMessageObject.rcvtimestamp);
                friendListDataStorage.updateActivityCount(this.mMessage.recipients[i2], 600);
                friendListDataStorage.updateLastChatActivity(this.mMessage.recipients[i2], catfishMessageObject.rcvtimestamp);
                friendListDataStorage.setLastMessage(true, this.mMessage.recipients[i2], this.mMessage.sequence, this.mMessage.message, this.mMessage.deliverystatus.ordinal(), this.mMessage.messagetype.ordinal(), null);
                str2 = i3 > 0 ? str2 + this.mMessage.recipients[i2] + "," : str2 + this.mMessage.recipients[i2];
                i2++;
                i3--;
            } catch (Throwable th) {
                catfishDataStorage.endTransaction();
            }
        }
        catfishDataStorage.setTransactionSuccessful();
        catfishDataStorage.endTransaction();
        this.mMessage.recipient = str2;
        CatfishService catfishService = getCatfishService();
        ICatfishUIBinder iCatfishUIBinder = this.mIBinder;
        CatfishService catfishService2 = getCatfishService();
        getCatfishService();
        catfishService.postToServiceHandler(new UIClientSendBCASTMessageExecutor(iCatfishUIBinder, catfishService2, CatfishService.getCurrentServerHost(), this.mIfclient, this.mMessage), 1);
    }
}
