package com.catfiz.service.uidbexec;

import android.database.Cursor;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishMessageObject;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.CatfishService;
import com.catfiz.service.CatfishUIBinder.DatabaseRequestOP;
import com.catfiz.service.CatfishUIBinder.LongMessageOperation;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.service.ICatfishClientInterface;
import com.catfiz.service.ICatfishUIBinder;
import com.catfiz.service.uidbexec.CUIDatabaseRequestExecutor.LongMessageRunnable;
import com.catfiz.service.uiresponse.CUIDatabaseResponse;
import com.catfiz.service.uisvcexec.UIClientSendMessageExecutor;
import com.catfiz.svcpersistent.CommonMessageInfo.MessageContext;
import com.catfiz.util.Log;
import java.io.UnsupportedEncodingException;
import org.apache.http.protocol.HTTP;

public class CUIDBSendMessageExecutor extends CUIDatabaseExecutorBase {
    private static final String TAG = "CUIDBSendMessageExecutor";
    private final int LONG_MESSAGE_SIZE = AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT;
    protected byte[] mAutf8bytes = null;

    public CUIDBSendMessageExecutor(ICatfishUIBinder iCatfishUIBinder, ICatfishClientInterface iCatfishClientInterface, CatfishMessageObject catfishMessageObject) {
        super(iCatfishUIBinder, iCatfishClientInterface, catfishMessageObject, DatabaseRequestOP.UNKNOWN);
    }

    protected MessageType doLongMessageCheck() {
        if (this.mMessage == null) {
            return MessageType.MESSAGE;
        }
        if (this.mMessage.message == null) {
            return MessageType.MESSAGE;
        }
        try {
            this.mAutf8bytes = this.mMessage.message.getBytes(HTTP.UTF_8);
        } catch (UnsupportedEncodingException e) {
            this.mAutf8bytes = this.mMessage.message.getBytes();
            e.printStackTrace();
        }
        return this.mAutf8bytes.length > AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT ? MessageType.LONG_MESSAGE : MessageType.MESSAGE;
    }

    protected void doPostProcessToNetworkThread() {
        if (this.mAutf8bytes.length <= AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT) {
            updateTaskState(String.valueOf(this.mMessage.sequence), this.mMessage.recipient, getMessageType().ordinal(), MessageContext.PRIVATE_MESSAGE.ordinal(), null, true);
            Log.d(TAG, "-- sendMessage to service executor");
            CatfishService catfishService = getCatfishService();
            ICatfishUIBinder iCatfishUIBinder = this.mIBinder;
            CatfishService catfishService2 = getCatfishService();
            getCatfishService();
            catfishService.postToServiceHandler(new UIClientSendMessageExecutor(iCatfishUIBinder, catfishService2, CatfishService.getCurrentServerHost(), this.mIfclient, this.mMessage), 1);
            return;
        }
        getCatfishService().postToLongMessageHandler(new LongMessageRunnable(this.mIBinder, this.mIfclient, this.mMessage, LongMessageOperation.CREATEJSONMESSAGE_CHAT_SENDVIADS));
    }

    protected MessageType getMessageType() {
        return MessageType.MESSAGE;
    }

    public void run() {
        CatfishDataStorage catfishDataStorage = new CatfishDataStorage(getCatfishService());
        FriendListDataStorage friendListDataStorage = new FriendListDataStorage(getCatfishService());
        CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
        catfishMessageObject.userpin = this.mMessage.userpin;
        catfishMessageObject.recipient = this.mMessage.recipient;
        catfishMessageObject.username = this.mMessage.username;
        catfishMessageObject.messagetype = getMessageType();
        catfishMessageObject.message = this.mMessage.message;
        catfishMessageObject.rcvtimestamp = this.mMessage.sequence;
        catfishMessageObject.sequence = this.mMessage.sequence;
        catfishMessageObject.deliverystatus = MessageDeliveryStatus.QUEUEING;
        catfishMessageObject.messagetype = doLongMessageCheck();
        if (getMessageType() == MessageType.STIKER_MESSAGE) {
            catfishMessageObject.stickerheight = this.mMessage.stickerheight;
            catfishMessageObject.stickerwidth = this.mMessage.stickerwidth;
        }
        if (isResumeProcess()) {
            doPostProcessToNetworkThread();
        } else if (catfishDataStorage.storeUserMessage(catfishMessageObject)) {
            friendListDataStorage.setFriendLastActivity(this.mMessage.recipient, this.mMessage.sequence);
            friendListDataStorage.updateActivityCount(this.mMessage.recipient, 600);
            friendListDataStorage.updateLastChatActivity(this.mMessage.recipient, this.mMessage.sequence);
            friendListDataStorage.setLastMessage(true, this.mMessage.recipient, this.mMessage.sequence, this.mMessage.message, this.mMessage.deliverystatus.ordinal(), catfishMessageObject.messagetype.ordinal(), null);
            doPostProcessToNetworkThread();
            catfishMessageObject.conversation_key = this.mMessage.userpin + ":" + this.mMessage.recipient;
            Cursor chatConversation = catfishDataStorage.getChatConversation(catfishMessageObject);
            ICatfishClientInterface iCatfishClientInterface = this.mIfclient;
            getCatfishService();
            postResponse(new CUIDatabaseResponse(iCatfishClientInterface, CatfishService.GET_CONVERSATION_KEY, chatConversation));
        }
    }
}
