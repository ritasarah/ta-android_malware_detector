package com.catfiz.service;

import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.util.Log;

public class UserProfileExecutor implements IDropableRunnable, Runnable {
    private static final String TAG = "UserProfileExecutor";
    private CatfishRESTAPI catfishRestAPI;
    private long mAge = 0;
    private String mNotifyRecipients;
    private String mServer;
    private CatfishService mService;
    private String mUsername;
    private String mUserpin;
    private String mUserstatus;
    private long mUserstatusSeq;
    public int scheduleNum = 0;

    class NotifyFriendsUsernameUpdated implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        public int scheduleNum;

        private NotifyFriendsUsernameUpdated() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.scheduleNum = 0;
        }

        public void dropRunnable() {
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            Log.d(UserProfileExecutor.TAG, "Notify friends: User name refresh");
            CatfishResult notifyFriendsNameUpdate = this.catfishRestAPI.notifyFriendsNameUpdate(UserProfileExecutor.this.mServer, UserProfileExecutor.this.mUserpin, UserProfileExecutor.this.mUsername);
            if (notifyFriendsNameUpdate.hasFailure()) {
                UserProfileExecutor.this.mServer = CatfishService.getServerHost();
                UserProfileExecutor.this.mService.scheduleRunnableToService(this, 0);
            } else if (!notifyFriendsNameUpdate.hasSuccess()) {
                Log.e(UserProfileExecutor.TAG, "Notify User name refresh is ERROR: DROP");
            }
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    class NotifyFriendsUserstatusUpdated implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        public int scheduleNum;

        private NotifyFriendsUserstatusUpdated() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.scheduleNum = 0;
        }

        public void dropRunnable() {
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            Log.d(UserProfileExecutor.TAG, "Notify friends: User status refresh");
            CatfishResult notifyFriendsStatusUpdateEx = this.catfishRestAPI.notifyFriendsStatusUpdateEx(UserProfileExecutor.this.mServer, UserProfileExecutor.this.mUserpin, UserProfileExecutor.this.mUsername, UserProfileExecutor.this.mUserstatus, UserProfileExecutor.this.mUserstatusSeq);
            if (notifyFriendsStatusUpdateEx.hasFailure()) {
                UserProfileExecutor.this.mServer = CatfishService.getServerHost();
                UserProfileExecutor.this.mService.scheduleRunnableToService(this, 0);
            } else if (!notifyFriendsStatusUpdateEx.hasSuccess()) {
                Log.e(UserProfileExecutor.TAG, "Notify User status refresh is ERROR: DROP");
            }
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    class UpdateUserStatus implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        public int scheduleNum;

        private UpdateUserStatus() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.scheduleNum = 0;
        }

        public void dropRunnable() {
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            CatfishResult userStatus = this.catfishRestAPI.setUserStatus(UserProfileExecutor.this.mServer, UserProfileExecutor.this.mUserpin, UserProfileExecutor.this.mUserstatus, UserProfileExecutor.this.mUserstatusSeq);
            if (userStatus.hasSuccess()) {
                Log.d(UserProfileExecutor.TAG, "User Status updated");
                UserProfileExecutor.this.mService.postRunnableToService(new PPFUploadExecutor(UserProfileExecutor.this.mService, UserProfileExecutor.this.mServer, UserProfileExecutor.this.mUserpin, CatfishPhotoStorage.getUserProfilePhotoFile(UserProfileExecutor.this.mService)), 2);
                UserProfileExecutor.this.mService.postRunnableToService(new NotifyFriendsUsernameUpdated());
                UserProfileExecutor.this.mService.postRunnableToService(new NotifyFriendsUserstatusUpdated());
                userStatus.cleaningup();
            } else if (userStatus.hasFailure()) {
                UserProfileExecutor.this.mServer = CatfishService.getServerHost();
                UserProfileExecutor.this.mService.scheduleRunnableToService(this, 0);
                userStatus.cleaningup();
            } else {
                Log.e(UserProfileExecutor.TAG, "FAIL TO SET USERSTATUS");
                userStatus.cleaningup();
                UserProfileExecutor.this.mService = null;
            }
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    public UserProfileExecutor(CatfishService catfishService) {
        this.mService = catfishService;
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        this.mService.getResources();
        this.mUsername = catfishPreferences.getString(CatfishService.USERNAME_PREF, null);
        this.mUserstatus = catfishPreferences.getString(CatfishService.USERSTATUS_PREF, null);
        this.mUserstatusSeq = catfishPreferences.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0);
        this.mUserpin = CatfishService.getUserPIN();
        this.mServer = CatfishService.getCurrentServerHost();
        this.mAge = System.currentTimeMillis();
    }

    public void dropRunnable() {
    }

    public long getAge() {
        return this.mAge;
    }

    public int getScheduleNum() {
        return this.scheduleNum;
    }

    public void incraseScheduleNum() {
        this.scheduleNum++;
    }

    public void run() {
        CatfishResult userName = this.catfishRestAPI.setUserName(this.mServer, this.mUserpin, this.mUsername);
        if (userName.hasSuccess()) {
            Log.d(TAG, "User status updated");
            this.mService.postRunnableToService(new UpdateUserStatus());
            userName.cleaningup();
        } else if (userName.hasFailure()) {
            this.mServer = CatfishService.getServerHost();
            this.mService.scheduleRunnableToService(this, 0);
            userName.cleaningup();
        } else {
            Log.e(TAG, "FAIL TO SET USERNAME");
            userName.cleaningup();
            this.mService = null;
        }
    }

    public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        this.catfishRestAPI = catfishRESTAPI;
    }
}
