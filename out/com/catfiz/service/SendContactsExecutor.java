package com.catfiz.service;

import android.database.Cursor;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.CatfishUIBinder.DatabaseRequestOP;
import com.catfiz.util.Log;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class SendContactsExecutor implements Runnable {
    private static final String TAG = "SendContactsExecutor";
    public String[] mContacts;
    public ICatfishClientInterface mIfClient = null;
    public String mMessage;
    public MessageType mMessageType = MessageType.PERSONCONTACT;
    public long mRcvTimestamp;
    public String mRecipient;
    public long mSequence;
    public String mServer;
    public volatile CatfishService mService = null;
    public String mUsername;
    public String mUserpin;

    class InvokeClientCallback implements Runnable {
        private Cursor mCursor;
        private ICatfishClientInterface mIfClient;

        public InvokeClientCallback(ICatfishClientInterface iCatfishClientInterface, Cursor cursor) {
            this.mCursor = cursor;
            this.mIfClient = iCatfishClientInterface;
        }

        public void run() {
            if (this.mIfClient != null && !this.mIfClient.isFinish()) {
                this.mIfClient.onDatabaseResponse(CatfishService.GET_CONVERSATION_KEY, this.mIfClient.transfromDBCursor(DatabaseRequestOP.SEND_CONV_MESSAGE, this.mCursor, 0), 0);
            }
        }
    }

    class SendContactToServer implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        public int scheduleNum;

        private SendContactToServer() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.scheduleNum = 0;
        }

        public void dropRunnable() {
            Log.d(SendContactsExecutor.TAG, "SEND CONTACT: ERROR: DROP BY SERVICE");
            SendContactsExecutor.this.mService.postRunnableToDbThread(new UpdateSendMessageStatusToDB(MessageDeliveryStatus.DROP));
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            CatfishResult sendMessage = this.catfishRestAPI.sendMessage(SendContactsExecutor.this.mServer, SendContactsExecutor.this.mUserpin, SendContactsExecutor.this.mRecipient, SendContactsExecutor.this.mMessageType.ordinal(), SendContactsExecutor.this.mMessage, SendContactsExecutor.this.mSequence);
            if (sendMessage.hasSuccess()) {
                Log.d(SendContactsExecutor.TAG, "SEND CONTACT: SENT");
                SendContactsExecutor.this.mService.postRunnableToDbThread(new UpdateSendMessageStatusToDB(MessageDeliveryStatus.SENT));
            } else if (sendMessage.hasFailure()) {
                Log.d(SendContactsExecutor.TAG, "SEND CONTACT: FAILURE: RESCEHDULE");
                SendContactsExecutor.this.mService.scheduleRunnableToService(this);
            } else {
                Log.d(SendContactsExecutor.TAG, "SEND CONTACT: ERROR: DROP");
                SendContactsExecutor.this.mService.postRunnableToDbThread(new UpdateSendMessageStatusToDB(MessageDeliveryStatus.DROP));
            }
            sendMessage.cleaningup();
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    class UpdateSendMessageStatusToDB implements Runnable {
        private MessageDeliveryStatus mDeliveryStatus;

        public UpdateSendMessageStatusToDB(MessageDeliveryStatus messageDeliveryStatus) {
            this.mDeliveryStatus = messageDeliveryStatus;
        }

        public void run() {
            CatfishDataStorage catfishDataStorage = new CatfishDataStorage(SendContactsExecutor.this.mService);
            FriendListDataStorage friendListDataStorage = new FriendListDataStorage(SendContactsExecutor.this.mService);
            CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
            catfishMessageObject.userpin = SendContactsExecutor.this.mUserpin;
            catfishMessageObject.recipient = SendContactsExecutor.this.mRecipient;
            catfishMessageObject.sequence = SendContactsExecutor.this.mSequence;
            catfishMessageObject.deliverystatus = this.mDeliveryStatus;
            friendListDataStorage.setLastMessageStatus(true, SendContactsExecutor.this.mRecipient, catfishMessageObject.deliverystatus.ordinal());
            if (!catfishDataStorage.updateMessageSentStatus(catfishMessageObject)) {
                Log.e(SendContactsExecutor.TAG, "SEND CONTACT: UPDATE SEND STATUS FAIL: " + String.valueOf(catfishMessageObject.deliverystatus.ordinal()));
            } else if (!(SendContactsExecutor.this.mIfClient == null || SendContactsExecutor.this.mIfClient.isFinish())) {
                SendContactsExecutor.this.mService.postToMainHandler(new InvokeClientCallback(SendContactsExecutor.this.mIfClient, catfishDataStorage.getChatConversation(SendContactsExecutor.this.mUserpin + ":" + SendContactsExecutor.this.mRecipient)));
            }
            catfishMessageObject.cleaningup();
        }
    }

    public SendContactsExecutor(ICatfishClientInterface iCatfishClientInterface, CatfishService catfishService, String str, String str2, String str3, String str4, String[] strArr) {
        this.mIfClient = iCatfishClientInterface;
        this.mService = catfishService;
        this.mServer = str;
        this.mUserpin = str2;
        this.mUsername = str3;
        this.mRecipient = str4;
        this.mContacts = strArr;
        this.mSequence = CatfishRESTAPI.uniqueMonotonicSequence();
        this.mRcvTimestamp = this.mSequence;
    }

    private void buildMessage(FriendListDataStorage friendListDataStorage) {
        Cursor contactInfoList = friendListDataStorage.getContactInfoList(this.mContacts);
        contactInfoList.moveToFirst();
        int count = contactInfoList.getCount();
        int columnIndex = contactInfoList.getColumnIndex(FriendListDataStorage.FRIENDNAME);
        int columnIndex2 = contactInfoList.getColumnIndex(FriendListDataStorage.FRIENDPIN);
        JSONObject jSONObject = new JSONObject();
        JSONArray jSONArray = new JSONArray();
        int i = 0;
        while (i < count) {
            try {
                JSONObject jSONObject2 = new JSONObject();
                jSONObject2.put("pin", contactInfoList.getString(columnIndex2));
                jSONObject2.put(CatfishDataStorage.NIC_NAME, contactInfoList.getString(columnIndex));
                jSONArray.put(jSONObject2);
                contactInfoList.moveToNext();
                i++;
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
        jSONObject.put("contacts", jSONArray);
        jSONObject.put(ServerMessageDataStorage.COUNT, String.valueOf(count));
        this.mMessage = jSONObject.toString();
        Log.d(TAG, "auto:" + jSONObject.toString());
        contactInfoList.close();
    }

    public void run() {
        CatfishDataStorage catfishDataStorage = new CatfishDataStorage(this.mService);
        FriendListDataStorage friendListDataStorage = new FriendListDataStorage(this.mService);
        CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
        buildMessage(friendListDataStorage);
        catfishMessageObject.userpin = this.mUserpin;
        catfishMessageObject.username = this.mUsername;
        catfishMessageObject.recipient = this.mRecipient;
        catfishMessageObject.messagetype = this.mMessageType;
        catfishMessageObject.rcvtimestamp = this.mRcvTimestamp;
        catfishMessageObject.message = this.mMessage;
        catfishMessageObject.deliverystatus = MessageDeliveryStatus.QUEUEING;
        catfishMessageObject.sequence = this.mSequence;
        catfishMessageObject.object_sequence = 0;
        Log.d(TAG, "MESSAGE: " + catfishMessageObject.message);
        if (!catfishDataStorage.storeUserMessage(catfishMessageObject)) {
            Log.e(TAG, "SEND CONTACT: FAIL STORE MESSAGE TO DB");
        }
        friendListDataStorage.updateLastChatActivity(catfishMessageObject.recipient, catfishMessageObject.rcvtimestamp);
        friendListDataStorage.setLastMessage(true, catfishMessageObject.recipient, catfishMessageObject.sequence, catfishMessageObject.message, catfishMessageObject.deliverystatus.ordinal(), catfishMessageObject.messagetype.ordinal(), null);
        this.mService.postToServiceHandler(new SendContactToServer());
        friendListDataStorage.updateActivityCount(catfishMessageObject.recipient, 600);
        this.mService.postToMainHandler(new InvokeClientCallback(this.mIfClient, catfishDataStorage.getChatConversation(this.mUserpin + ":" + this.mRecipient)));
    }
}
