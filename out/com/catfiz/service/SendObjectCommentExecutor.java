package com.catfiz.service;

import android.database.Cursor;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import com.catfiz.pool.PoolDataStorage;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.util.Log;
import java.io.UnsupportedEncodingException;
import org.apache.http.protocol.HTTP;
import org.json.JSONException;
import org.json.JSONObject;

public class SendObjectCommentExecutor implements Runnable {
    public static final int FROMPM = 2;
    public static final int FROMPOOL = 1;
    private static final String TAG = "SendObjectCommentExecutor";
    private String mConvKey;
    private int mFrom;
    public ICatfishClientInterface mIfClient = null;
    private String mMessage;
    private MessageType mMessageType;
    private String mObjOwner;
    private long mObjSequence;
    private long mPublisherSequence;
    private String mPublisherpin = null;
    private long mRcvTimestamp;
    private String mRecipient;
    private long mSequence;
    private String mServer;
    private volatile CatfishService mService = null;
    private String mUsername;
    private String mUserpin;

    class BcastCommentToFriendList implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        public int scheduleNum;

        private BcastCommentToFriendList() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.scheduleNum = 0;
        }

        public void dropRunnable() {
            Log.e(SendObjectCommentExecutor.TAG, "SEND STATUS COMMENT: SEND ERROR: DROP BY SERVICE !!!");
            SendObjectCommentExecutor.this.mService.postRunnableToDbThread(new UpdateSendMessageStatusToDB(MessageDeliveryStatus.DROP));
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum += SendObjectCommentExecutor.FROMPOOL;
        }

        public void run() {
            CatfishResult friendlistBcast = this.catfishRestAPI.friendlistBcast(SendObjectCommentExecutor.this.mServer, SendObjectCommentExecutor.this.mUserpin, SendObjectCommentExecutor.this.mUsername, SendObjectCommentExecutor.this.mMessageType.ordinal(), SendObjectCommentExecutor.this.mRecipient, SendObjectCommentExecutor.this.mMessage, SendObjectCommentExecutor.this.mSequence, SendObjectCommentExecutor.this.mObjSequence, SendObjectCommentExecutor.this.mObjOwner);
            if (friendlistBcast.hasSuccess()) {
                SendObjectCommentExecutor.this.mService.postRunnableToDbThread(new UpdateSendMessageStatusToDB(MessageDeliveryStatus.SENT));
                Log.e(SendObjectCommentExecutor.TAG, "object komen send:" + SendObjectCommentExecutor.this.mMessageType.ordinal());
            } else if (friendlistBcast.hasFailure()) {
                SendObjectCommentExecutor.this.mService.scheduleRunnableToService(this);
            } else {
                Log.e(SendObjectCommentExecutor.TAG, "SEND STATUS COMMENT: SEND ERROR: DROP !!!");
                SendObjectCommentExecutor.this.mService.postRunnableToDbThread(new UpdateSendMessageStatusToDB(MessageDeliveryStatus.DROP));
            }
            friendlistBcast.cleaningup();
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    class BcastCommentToPoolMember implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        public int scheduleNum;

        private BcastCommentToPoolMember() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.scheduleNum = 0;
        }

        public void dropRunnable() {
            Log.e(SendObjectCommentExecutor.TAG, "SEND Object COMMENT: SEND ERROR: DROP BY SERVICE !!!");
            SendObjectCommentExecutor.this.mService.postRunnableToDbThread(new UpdateSendMessageStatusToDB(MessageDeliveryStatus.DROP));
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum += SendObjectCommentExecutor.FROMPOOL;
        }

        public void run() {
            JSONObject jSONObject = new JSONObject();
            try {
                jSONObject.put(ServerMessageDataStorage.MESSAGE, SendObjectCommentExecutor.this.mMessage);
                jSONObject.put("objectowner", SendObjectCommentExecutor.this.mObjOwner);
                jSONObject.put(ServerMessageDataStorage.OBJECTSEQUENCE, SendObjectCommentExecutor.this.mObjSequence);
                SendObjectCommentExecutor.this.mMessage = jSONObject.toString();
            } catch (JSONException e) {
                e.printStackTrace();
            }
            CatfishResult conferenceSendMessage = this.catfishRestAPI.conferenceSendMessage(SendObjectCommentExecutor.this.mServer, SendObjectCommentExecutor.this.mUserpin, SendObjectCommentExecutor.this.mUsername, SendObjectCommentExecutor.this.mPublisherpin, SendObjectCommentExecutor.this.mPublisherSequence, SendObjectCommentExecutor.this.mMessageType.ordinal(), SendObjectCommentExecutor.this.mMessage, SendObjectCommentExecutor.this.mSequence);
            if (conferenceSendMessage.hasSuccess()) {
                SendObjectCommentExecutor.this.mService.postRunnableToDbThread(new UpdateSendMessageStatusToDB(MessageDeliveryStatus.SENT));
                Log.e(SendObjectCommentExecutor.TAG, "object komen send:" + SendObjectCommentExecutor.this.mMessageType.ordinal());
            } else if (conferenceSendMessage.hasFailure()) {
                SendObjectCommentExecutor.this.mService.scheduleRunnableToService(this);
            } else {
                Log.e(SendObjectCommentExecutor.TAG, "SEND STATUS COMMENT: SEND ERROR: DROP !!!");
                SendObjectCommentExecutor.this.mService.postRunnableToDbThread(new UpdateSendMessageStatusToDB(MessageDeliveryStatus.DROP));
            }
            conferenceSendMessage.cleaningup();
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    class InvokeClientCallback implements Runnable {
        private Cursor mCursor;
        private ICatfishClientInterface mIfClient;

        public InvokeClientCallback(ICatfishClientInterface iCatfishClientInterface, Cursor cursor) {
            this.mCursor = cursor;
            this.mIfClient = iCatfishClientInterface;
        }

        public void run() {
            if (!this.mIfClient.isFinish()) {
                this.mIfClient.onDatabaseResponse(CatfishService.GET_OBJCOMM_CONVERSATION_KEY, this.mCursor, 0);
            }
        }
    }

    public class LongMessageRunnable implements Runnable {
        private ICatfishClientInterface mInterfaceClient = null;
        private CatfishMessageObject message = null;

        public LongMessageRunnable(ICatfishClientInterface iCatfishClientInterface, CatfishMessageObject catfishMessageObject) {
            this.mInterfaceClient = iCatfishClientInterface;
            this.message = catfishMessageObject;
        }

        public void run() {
            Log.e(SendObjectCommentExecutor.TAG, "NOT DEVELOPED YET");
        }
    }

    class UpdateSendMessageStatusToDB implements Runnable {
        private MessageDeliveryStatus mDeliveryStatus;

        public UpdateSendMessageStatusToDB(MessageDeliveryStatus messageDeliveryStatus) {
            this.mDeliveryStatus = messageDeliveryStatus;
        }

        public void run() {
            CatfishDataStorage catfishDataStorage = new CatfishDataStorage(SendObjectCommentExecutor.this.mService);
            CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
            catfishMessageObject.userpin = SendObjectCommentExecutor.this.mUserpin;
            catfishMessageObject.conversation_key = SendObjectCommentExecutor.this.mConvKey;
            catfishMessageObject.sequence = SendObjectCommentExecutor.this.mSequence;
            catfishMessageObject.recipient = SendObjectCommentExecutor.this.mRecipient;
            catfishMessageObject.deliverystatus = this.mDeliveryStatus;
            if (!catfishDataStorage.updateObjectCommSentStatus(catfishMessageObject)) {
                Log.e(SendObjectCommentExecutor.TAG, "SEND STATUS COMMENT: UPDATE SEND STATUS FAIL: " + String.valueOf(catfishMessageObject.deliverystatus.ordinal()));
            } else if (!(SendObjectCommentExecutor.this.mIfClient == null || SendObjectCommentExecutor.this.mIfClient.isFinish())) {
                SendObjectCommentExecutor.this.mService.postToMainHandler(new InvokeClientCallback(SendObjectCommentExecutor.this.mIfClient, catfishDataStorage.getObjectConversation(SendObjectCommentExecutor.this.mConvKey)));
            }
            catfishMessageObject.cleaningup();
        }
    }

    public SendObjectCommentExecutor(ICatfishClientInterface iCatfishClientInterface, CatfishService catfishService, String str, String str2, String str3, String str4, String str5, long j, String str6, MessageType messageType, int i, String str7, long j2) {
        this.mIfClient = iCatfishClientInterface;
        this.mService = catfishService;
        this.mServer = str;
        this.mUserpin = str2;
        this.mUsername = str3;
        this.mRecipient = str4;
        this.mMessage = str5;
        this.mObjSequence = j;
        this.mMessageType = messageType;
        this.mObjOwner = str6;
        this.mPublisherpin = str7;
        this.mPublisherSequence = j2;
        this.mSequence = CatfishRESTAPI.uniqueMonotonicSequence();
        this.mRcvTimestamp = this.mSequence;
        this.mFrom = i;
        this.mConvKey = "oc:" + this.mObjOwner + ":" + this.mObjSequence;
    }

    public void run() {
        byte[] bytes;
        CatfishDataStorage catfishDataStorage = new CatfishDataStorage(this.mService);
        CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
        catfishMessageObject.senderpin = this.mUserpin;
        catfishMessageObject.sendername = this.mUsername;
        catfishMessageObject.recipient = this.mRecipient;
        catfishMessageObject.messagetype = this.mMessageType;
        catfishMessageObject.rcvtimestamp = this.mRcvTimestamp;
        catfishMessageObject.conversation_key = this.mConvKey;
        catfishMessageObject.deliverystatus = MessageDeliveryStatus.QUEUEING;
        catfishMessageObject.sequence = this.mSequence;
        catfishMessageObject.object_sequence = this.mObjSequence;
        catfishMessageObject.object_owner = this.mObjOwner;
        catfishMessageObject.message = this.mMessage;
        try {
            bytes = this.mMessage.getBytes(HTTP.UTF_8);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
            bytes = null;
        }
        if (bytes.length > AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT) {
            if (this.mFrom == FROMPOOL) {
                catfishMessageObject.messagetype = MessageType.LONGOBJECTCOMMENT_POOL;
            } else {
                catfishMessageObject.messagetype = MessageType.LONGOBJECTCOMMENT;
            }
        }
        if (catfishDataStorage.storeObjectComment(catfishMessageObject)) {
            if (this.mFrom == FROMPOOL) {
                new PoolDataStorage(this.mService).increaseObjCommCount(catfishMessageObject);
            } else {
                catfishDataStorage.increaseObjCommCount(catfishMessageObject);
            }
            if (!(this.mIfClient == null || this.mIfClient.isFinish())) {
                this.mService.postToMainHandler(new InvokeClientCallback(this.mIfClient, catfishDataStorage.getObjectConversation(this.mConvKey)));
            }
            if (this.mMessageType == MessageType.OBJECTCOMMENT && bytes.length > AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT && bytes.length < 10240) {
                this.mService.postToLongMessageHandler(new LongMessageRunnable(this.mIfClient, catfishMessageObject));
                return;
            } else if (this.mMessageType == MessageType.LONGOBJECTCOMMENT_POOL && bytes.length > AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT && bytes.length < 10240) {
                return;
            } else {
                if (this.mFrom == FROMPOOL) {
                    this.mService.postToServiceHandler(new BcastCommentToPoolMember());
                    return;
                } else {
                    this.mService.postToServiceHandler(new BcastCommentToFriendList());
                    return;
                }
            }
        }
        Log.e(TAG, "SEND OBJECT COMMENT: Write to DB FAIL: DROP !!!");
        if (this.mIfClient != null && !this.mIfClient.isFinish()) {
            this.mService.postToMainHandler(new InvokeClientCallback(this.mIfClient, catfishDataStorage.getObjectConversation(this.mConvKey)));
        }
    }
}
