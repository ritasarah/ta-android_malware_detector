package com.catfiz.service;

import android.preference.PreferenceManager;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.util.Log;

public class SettingDownloadExecutor implements IDropableRunnable, Runnable {
    private static final String TAG = "SettingDownloadExecutor";
    private CatfishRESTAPI catfishRestAPI = null;
    private String[] hostName = null;
    private String[] hostPort = null;
    private long mAge = 0;
    private String mRepo = null;
    private String mServer = null;
    private CatfishService mService = null;
    private String[] pushName = null;
    private int[] pushPort = null;
    public int scheduleNum = 0;

    public SettingDownloadExecutor(CatfishService catfishService, String str, String str2) {
        this.mService = catfishService;
        this.mServer = str;
        this.mRepo = str2;
        this.mAge = System.currentTimeMillis();
    }

    public void dropRunnable() {
    }

    public long getAge() {
        return this.mAge;
    }

    public int getScheduleNum() {
        return this.scheduleNum;
    }

    public void incraseScheduleNum() {
        this.scheduleNum++;
    }

    public void onDownloadSettingFail() {
    }

    public void onDownloadSettingSuccess() {
    }

    public void run() {
        PreferenceManager.getDefaultSharedPreferences(this.mService);
        CatfishResult serverSetting = this.catfishRestAPI.getServerSetting(this.mServer, this.mRepo);
        if (serverSetting.hasFailure()) {
            Log.d(TAG, "Setting Download: FAIL: Re schedule");
            this.mServer = CatfishService.getServerHost();
            this.mService.scheduleRunnableToService(this);
            serverSetting.cleaningup();
        } else if (serverSetting.hasSuccess()) {
            this.hostName = serverSetting.hostName;
            this.hostPort = serverSetting.hostPort;
            this.pushName = serverSetting.pushName;
            this.pushPort = serverSetting.pushPort;
            this.mService.setServerSetting(this.hostName, this.hostPort, this.pushName, this.pushPort);
            this.mService.setStreamServerSetting(serverSetting.streamHostName, serverSetting.streamPort);
            this.mService.setRegistrationServerSetting(serverSetting.registrationHostName, serverSetting.registrationPort);
            Log.d(TAG, "OTA Setting is loaded.");
        } else {
            Log.d(TAG, "Setting Download: ERROR: DROP");
            serverSetting.cleaningup();
        }
    }

    public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        this.catfishRestAPI = catfishRESTAPI;
    }
}
