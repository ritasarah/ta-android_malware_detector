package com.catfiz.service;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.support.v4.view.MotionEventCompat;
import catfiz.crypto.a.a;
import com.albus.util.AlbusModelObject;
import com.catfiz.crypto.SimpleCrypto;
import com.catfiz.localstorage.ChunkStorage;
import com.catfiz.localstorage.LocalStorageWorker;
import com.catfiz.localstorage.WriteChunkRunnable;
import com.catfiz.objectcomment.ObjectCommentDataStorage;
import com.catfiz.pool.PoolDataStorage;
import com.catfiz.service.CatfishService.AdsHelper;
import com.catfiz.service.CatfishService.AppsHelper;
import com.catfiz.sticker.StickerDataStorage;
import com.catfiz.sticker.StickerMessageObject;
import com.catfiz.svcpersistent.TaskDataStorage;
import com.catfiz.util.CFURLSpan;
import com.catfiz.util.Log;
import com.catfiz.util.MimeTypeParser;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.security.Key;
import java.security.KeyStore;
import java.security.NoSuchAlgorithmException;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import java.util.zip.Inflater;
import java.util.zip.InflaterInputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.apache.http.Header;
import org.apache.http.HeaderElement;
import org.apache.http.HeaderElementIterator;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.HttpVersion;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.ConnectionKeepAliveStrategy;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.cookie.ClientCookie;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.entity.InputStreamEntity;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.DefaultConnectionReuseStrategy;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;
import org.apache.http.impl.conn.DefaultHttpRoutePlanner;
import org.apache.http.impl.conn.SingleClientConnManager;
import org.apache.http.message.BasicHeaderElementIterator;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.CoreProtocolPNames;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.protocol.HTTP;
import org.apache.http.protocol.HttpContext;
import org.apache.http.util.ByteArrayBuffer;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class CatfishRESTAPI {
    private static final String CATFISHREQ_ACCEPTFRIEND = "/notify";
    private static final String CATFISHREQ_ACTIVATE_USER = "/activate";
    private static final String CATFISHREQ_ADCLICK = "/adviewclick";
    private static final String CATFISHREQ_ARENA_CHECK_TOKEN_CATEGORY = "/arena_check_token_category";
    private static final String CATFISHREQ_ARENA_CHECK_TOKEN_ITEM = "/arena_check_token_item";
    private static final String CATFISHREQ_CHECK_DEVICE_MESSAGE = "/pinman_checkdevmessage";
    private static final String CATFISHREQ_CONFERENCE_CREATE = "/cfrc_create_nojoin";
    private static final String CATFISHREQ_CONFERENCE_DELETEMEMBER = "/cfrc_delmember";
    private static final String CATFISHREQ_CONFERENCE_DROP = "/cfrc_drop";
    private static final String CATFISHREQ_CONFERENCE_GETMEMBERLIST = "/cfrc_getmemberlst";
    private static final String CATFISHREQ_CONFERENCE_GETMEMBERLISTDETAIL = "/cfrc_getmemberlstdetail";
    private static final String CATFISHREQ_CONFERENCE_GETMESSAGES = "/cfrc_getmessages";
    private static final String CATFISHREQ_CONFERENCE_GETMESSAGESZ = "/cfrc_getmessagesz";
    private static final String CATFISHREQ_CONFERENCE_GETTOPICMESSAGE = "/cfrc_gettopicmsg";
    private static final String CATFISHREQ_CONFERENCE_INVITE = "/cfrc_invite";
    private static final String CATFISHREQ_CONFERENCE_LEAVE = "/cfrc_leave";
    private static final String CATFISHREQ_CONFERENCE_SENDMESSAGE = "/cfrc_sendmessage";
    private static final String CATFISHREQ_DELETEFRIEND = "/notify";
    private static final String CATFISHREQ_DELETEPENDINGFRIEND = "/notify";
    private static final String CATFISHREQ_DEVICECHECK = "/check_device";
    private static final String CATFISHREQ_DLOADDATACHUNK = "/getusrdata";
    private static final String CATFISHREQ_EMAILREG_COBRAND = "/register_co";
    private static final String CATFISHREQ_EMAILREG_EXCLUSIVE = "/register_exco";
    private static final String CATFISHREQ_EMAILREG_GENERAL = "/register_general";
    private static final String CATFISHREQ_FIF_ADS = "/not_yet";
    private static final String CATFISHREQ_FRIENDLIST_BCAST = "/friendlistbcast";
    private static final String CATFISHREQ_FRIENDLIST_GETINFO = "/friendlistgetinfo";
    private static final String CATFISHREQ_FRIENDLIST_SET = "/friendlistset";
    private static final String CATFISHREQ_GETADVIEW = "/adviewrequest";
    private static final String CATFISHREQ_GETARENA_CATEGORIES = "/arena_getcategories";
    private static final String CATFISHREQ_GETARENA_ITEMS = "/arena_getitems";
    private static final String CATFISHREQ_GETARENA_LOGO = "/arena_getlogo";
    private static final String CATFISHREQ_GETARENA_PREVIEW = "/arena_getpreview";
    private static final String CATFISHREQ_GETDATAINFO = "/usrdatainfo";
    private static final String CATFISHREQ_GETFRIENDPIN = "/friendlistget";
    private static final String CATFISHREQ_GETMESSAGES = "/getmessages";
    private static final String CATFISHREQ_GETMESSAGES_WITHRDCOUNTER = "/getmsgtrz";
    private static final String CATFISHREQ_GETPROFILEINFO = "/getprofileinfo";
    private static final String CATFISHREQ_GETSERVERSETTING = "/serversettingget";
    private static final String CATFISHREQ_GETSLINKDATAINFO = "/getusrslinkinfo";
    private static final String CATFISHREQ_GETSLINKDATANAME = "/getdsname";
    private static final String CATFISHREQ_GETUSERACTIVITY = "/useract_get";
    private static final String CATFISHREQ_GETUSERDATAPROFILE = "/getpfitag";
    private static final String CATFISHREQ_GETUSERPHOTO = "/getuserphoto";
    private static final String CATFISHREQ_GET_DEVICE_MESSAGE = "/pinman_getdevmessage";
    private static final String CATFISHREQ_GET_REPO = "/repo_get";
    private static final String CATFISHREQ_LOGIN_ACCOUNT = "/verify";
    private static final String CATFISHREQ_NFIDELIVERED = "/notify";
    private static final String CATFISHREQ_NFINAMEUPDATE = "/sendbcast";
    private static final String CATFISHREQ_NFIPHOTOUPDATE = "/notifybcast";
    private static final String CATFISHREQ_NFIREAD = "/notify";
    private static final String CATFISHREQ_NFISTATUSUPDATE = "/sendbcast";
    private static final String CATFISHREQ_NFIWRITING = "/notify";
    private static final String CATFISHREQ_P2P_COMMITBLOCK = "/p2pcommit";
    private static final String CATFISHREQ_P2P_GETCHINFO = "/p2pchannelinfo";
    private static final String CATFISHREQ_P2P_GETDATA = "/p2pget";
    private static final String CATFISHREQ_P2P_OPENCHANNEL = "/p2popenchannel";
    private static final String CATFISHREQ_P2P_STORE = "/p2pstore";
    private static final String CATFISHREQ_PHOTODELETE = "/photodelete";
    private static final String CATFISHREQ_PINGFRIEND = "/notify";
    private static final String CATFISHREQ_PINGSERVER = "/fishping";
    private static final String CATFISHREQ_PINMAN_CHANGEUSERKEY = "/pinman_changekey";
    private static final String CATFISHREQ_PINMAN_DEVIDISREG = "/pinman_devidisreg";
    private static final String CATFISHREQ_PINMAN_GENERATEPIN = "/pingen_getpin";
    private static final String CATFISHREQ_PINMAN_GETPINDEVID = "/pinman_pinfromdev";
    private static final String CATFISHREQ_PINMAN_PINEXISTS = "/pinman_pinexists";
    private static final String CATFISHREQ_PINMAN_REGS = "/pinman_regs";
    private static final String CATFISHREQ_PRIV_CREATE = "/priv_create";
    private static final String CATFISHREQ_PRIV_DEL_ALL = "/priv_del_all";
    private static final String CATFISHREQ_PRIV_DEL_UID = "/priv_del_uid";
    private static final String CATFISHREQ_PRIV_GET_ALL_INFO = "/priv_get_info";
    private static final String CATFISHREQ_PRIV_GET_GROUP_TYPE = "/priv_get_type";
    private static final String CATFISHREQ_PRIV_GET_UID = "/priv_get_uid";
    private static final String CATFISHREQ_PRIV_SET_UID = "/priv_set_uid";
    private static final String CATFISHREQ_REGISTERPHONE = "/registerphone";
    private static final String CATFISHREQ_REGISTER_ACCOUNT = "/register_catfiz";
    private static final String CATFISHREQ_REPOINFO = "/repo_getinfo";
    private static final String CATFISHREQ_REQUESTFRIEND = "/sendmessage";
    private static final String CATFISHREQ_REQUESTPROFILE = "/notify";
    private static final String CATFISHREQ_RESEND_ACTIVATION = "/resend_activation_code";
    private static final String CATFISHREQ_RESET_PASSWORD = "/reset_userkey";
    private static final String CATFISHREQ_RESET_PASSWORD_ACTIVATION = "/update_userkey";
    private static final String CATFISHREQ_SENDBCASTMESSAGE = "/sendbcast";
    private static final String CATFISHREQ_SENDBYTE = "/sendbyte";
    private static final String CATFISHREQ_SENDMESSAGE = "/sendmessage";
    private static final String CATFISHREQ_SETDSDATANAME = "/setdsname";
    private static final String CATFISHREQ_SETPHOTOFINISH = "/photocomplete";
    private static final String CATFISHREQ_SETUSERACTIVITY = "/useract_set";
    private static final String CATFISHREQ_SETUSERDATAPROFILE = "/setpfitag";
    private static final String CATFISHREQ_SETUSERNAME = "/setusername";
    private static final String CATFISHREQ_SETUSERSTATUS = "/setuserstatus";
    private static final String CATFISHREQ_SLINK = "/getusrslink";
    private static final String CATFISHREQ_SLINK_DATA = "/getusrdataslink";
    private static final String CATFISHREQ_STICKER = "/getsticker";
    private static final String CATFISHREQ_STICKERINFO = "/getstickerinfo";
    private static final String CATFISHREQ_STICKERPACKAGE = "/getstickerpackage";
    private static final String CATFISHREQ_STICKERPACKAGEINFO = "/getstickerpackageinfo";
    private static final String CATFISHREQ_STORAGEDELETEDATA = "/delete_data";
    private static final String CATFISHREQ_STORAGEGETDATAALL = "/get_data_all";
    private static final String CATFISHREQ_STORAGEGETDATABYNUM = "/get_data_bynum";
    private static final String CATFISHREQ_STORAGEGETDATABYRANGE = "/get_data_byrange";
    private static final String CATFISHREQ_STORAGEGETDATACOUNT = "/get_data_count";
    private static final String CATFISHREQ_STORAGEINSERTDATA = "/insert_data";
    private static final String CATFISHREQ_STORAGEUPDATEDATA = "/update_data";
    private static final String CATFISHREQ_UPDATEPHOTO = "/updatephoto";
    private static final String CATFISHREQ_UPDATE_NIC = "/update_nic";
    private static final String CATFISHREQ_UPLOADDATACHUNK = "/storeusrdata";
    private static final String CATFISHREQ_USRGRP_CREATE = "/usrgrpcreate";
    private static final String CATFISHREQ_USRGRP_DELETE = "/usrgrpdelete";
    private static final String CATFISHREQ_USRGRP_GETINFO = "/usrgrpgetinfo";
    private static final String CATFISHREQ_USRGRP_INVITE = "/usrgrpinvite";
    private static final String CATFISHREQ_USRGRP_JOIN = "/usrgrpjoin";
    private static final String CATFISHREQ_USRGRP_LEAVE = "/usrgrpleave";
    private static final String CATFISHREQ_USRGRP_SENDMESSAGE = "/usrgrpsendmessage";
    private static final String CFCOMPACT_BYTEEND = "e";
    private static final String CFCOMPACT_BYTESTART = "b";
    private static final String CFCOMPACT_CATEGORY = "ca";
    public static final String CFCOMPACT_CONTEXT = "c";
    private static final String CFCOMPACT_DATASIZE = "dz";
    private static final String CFCOMPACT_DOWNLOAD_COUNT = "dc";
    public static final String CFCOMPACT_EMAIL = "email";
    private static final String CFCOMPACT_END = "en";
    private static final String CFCOMPACT_FRIENDPIN = "f";
    private static final String CFCOMPACT_IMAGETYPE = "it";
    public static final String CFCOMPACT_IMEI = "imei";
    private static final String CFCOMPACT_ITEM_ID = "it";
    private static final String CFCOMPACT_LOCALE = "lc";
    private static final String CFCOMPACT_LOGO_SIZE = "lz";
    private static final String CFCOMPACT_MESSAGE = "m";
    private static final String CFCOMPACT_MESSAGESEQ = "mq";
    private static final String CFCOMPACT_MESSAGETYPE = "mt";
    public static final String CFCOMPACT_NIC = "nic";
    private static final String CFCOMPACT_NUMBER = "nu";
    private static final String CFCOMPACT_OBJECTOWNER = "ow";
    private static final String CFCOMPACT_OBJECTSEQ = "oq";
    private static final String CFCOMPACT_PHOTOSIZE = "p";
    private static final String CFCOMPACT_PREVIEW_SIZE = "pz";
    private static final String CFCOMPACT_PUBLISHER = "pb";
    private static final String CFCOMPACT_RDCOUNTER = "dc";
    private static final String CFCOMPACT_RECIPIENT = "r";
    private static final String CFCOMPACT_RECIPIENTS = "rs";
    private static final String CFCOMPACT_REVIEW_COUNT = "rc";
    private static final String CFCOMPACT_SCREEN_SIZE = "sz";
    private static final String CFCOMPACT_SEQUENCE = "sq";
    private static final String CFCOMPACT_SLINK = "zl";
    private static final String CFCOMPACT_START = "st";
    public static final String CFCOMPACT_STICKERCOUNT = "cn";
    public static final String CFCOMPACT_STICKERFORMATTYPE = "ft";
    public static final String CFCOMPACT_STICKERFRAMECOUNT = "fc";
    public static final String CFCOMPACT_STICKERFRAMEDURATION = "fd";
    public static final String CFCOMPACT_STICKERFRAMEINDEX = "fi";
    public static final String CFCOMPACT_STICKERID = "id";
    public static final String CFCOMPACT_STICKERIDS = "is";
    public static final String CFCOMPACT_STICKERLOOPCOUNT = "lc";
    public static final String CFCOMPACT_STICKERPACKAGEDESC = "pd";
    public static final String CFCOMPACT_STICKERPACKAGEICONID = "pi";
    public static final String CFCOMPACT_STICKERPACKAGEID = "pk";
    public static final String CFCOMPACT_STICKERPACKAGENAME = "pn";
    public static final String CFCOMPACT_STICKERPACKAGEPRICE = "pr";
    public static final String CFCOMPACT_STICKERPACKAGEPUBLISHER = "pp";
    public static final String CFCOMPACT_STICKERPACKAGETYPE = "pt";
    public static final String CFCOMPACT_STICKERPACKAGEVERSION = "v";
    public static final String CFCOMPACT_STICKERTYPE = "ty";
    private static final String CFCOMPACT_STORAGEDATA = "data";
    private static final String CFCOMPACT_STORAGEDATANAME = "dataname";
    private static final String CFCOMPACT_STORAGENEWDATA = "newdata";
    private static final String CFCOMPACT_STORAGENIC = "nic";
    private static final String CFCOMPACT_STORAGEOLDDATA = "olddata";
    private static final String CFCOMPACT_SUB_CATEGORY = "sc";
    private static final String CFCOMPACT_TITLE = "ti";
    private static final String CFCOMPACT_TOKEN_RESULT = "tr";
    public static final String CFCOMPACT_USERKEY = "userkey";
    private static final String CFCOMPACT_USERNAME = "un";
    private static final String CFCOMPACT_USERPIN = "u";
    private static final String CFCOMPACT_USERSTATUS = "us";
    private static final String CFCOMPACT_USERSTATUSSEQ = "xq";
    private static final String FIZZLINK_GETSTREAM_INFO = "/fzsti";
    private static final String FIZZLINK_GETSTREAM_THUMBNAIL = "/thumb";
    private static final String FIZZLINK_SECURE_SERVICE = "/fzstream";
    private static final String FIZZLINK_SERVICE = "/dlfizzlink";
    public static final int IMAGE_TYPE_GIF = 3;
    public static final int IMAGE_TYPE_JPEG = 1;
    public static final int IMAGE_TYPE_PNG = 2;
    private static final int MAX_CHUNKSIZE_TO_GROW = 262144;
    private static final int MAX_CONN_DURATION_REUSE = 60;
    private static final int MAX_CONN_IDLE_TIME = 0;
    private static final int MIN_CHUNKSIZE_TO_FALL = 8192;
    public static final String ORGANIZATION_ID = "7F8C";
    public static final String ORGANIZATION_ID_ALBUS = "7FBF";
    public static final String ORGANIZATION_ID_CATFIZ = "7F8C";
    public static final int P2P_STREAM_AUDIO = 2;
    public static final int P2P_STREAM_DATA = 5;
    public static final int P2P_STREAM_LONGMESSAGE = 6;
    public static final int P2P_STREAM_PHOTO = 1;
    public static final int P2P_STREAM_VIDEO = 3;
    public static final int P2P_STREAM_VOICE = 4;
    public static final int PROTO_ERROR_DEVICEID_ALREADYREGISTERED = 87;
    public static final int PROTO_ERROR_NOTFOUND = 9;
    public static final int PROTO_ERROR_PIN_ALLREADYEXISTS = 74;
    private static final String TAG = "CatfishRESTAPI";
    private static final Object mKeystoreLock = new Object();
    private static final Object mWaitingLock = new Object();
    private static final String server_cert = "-----BEGIN CERTIFICATE-----\nMIICUzCCAbwCCQCQuqEZKpJfjDANBgkqhkiG9w0BAQUFADBuMQswCQYDVQQGEwJJ\nRDETMBEGA1UECBMKSmF3YSBUaW11cjERMA8GA1UEBxMIU3VyYWJheWExJjAkBgNV\nBAoTHUR1bmlhY2F0ZmlzaCBLcmVhdGlmIE1lZGlhIFBUMQ8wDQYDVQQDEwZDYXRm\naXowHhcNMTMwNTAxMjAxOTEwWhcNMTQwNTAxMjAxOTEwWjBuMQswCQYDVQQGEwJJ\nRDETMBEGA1UECBMKSmF3YSBUaW11cjERMA8GA1UEBxMIU3VyYWJheWExJjAkBgNV\nBAoTHUR1bmlhY2F0ZmlzaCBLcmVhdGlmIE1lZGlhIFBUMQ8wDQYDVQQDEwZDYXRm\naXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBANmCN9ku9v2OXNpHbGvHk9RM\nN+4MwxMlegspuX4e06NVJ7E4u5xVNvyFazLIV8//cDfS8lWgOPZSkqeJYutCv/Fe\nJtHMFo7qDwevtlzWPyI7vLA0lqranvkT7I3WP9VvI+YWzzqAEd6c8l4bHpOB0AOE\nzI6vJ1NiorQWkneNU/oNAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEANosEsR7zVjfu\nLfZs504y89IE+YBAhb7qHvZ/0ML+976PbUlJWWalLmyZpUZlrPKOG/9f3jdsCwiN\n4prIQzUbdsQQHLnngSYdDQbz5OKB9RnSM1Vk5+v3CkBpjjGYeVntzgpZlMaE1GMI\ndbzLaRw08kdYx9V+taOQ2+2ffQmUPlw=\n-----END CERTIFICATE-----\n";
    private static final String server_cert_v2 = "-----BEGIN CERTIFICATE-----\nMIICVTCCAb4CCQCfnJ2gkVu2oDANBgkqhkiG9w0BAQUFADBvMQswCQYDVQQGEwJJ\nRDETMBEGA1UECAwKSmF3YSBUaW11cjERMA8GA1UEBwwIU3VyYWJheWExJzAlBgNV\nBAoMHlBULiBEdW5pYWNhdGZpc2ggS3JlYXRpZiBNZWRpYTEPMA0GA1UEAwwGQ2F0\nZml6MB4XDTE0MDEyNzEzNDc0N1oXDTQzMDQyNTEzNDc0N1owbzELMAkGA1UEBhMC\nSUQxEzARBgNVBAgMCkphd2EgVGltdXIxETAPBgNVBAcMCFN1cmFiYXlhMScwJQYD\nVQQKDB5QVC4gRHVuaWFjYXRmaXNoIEtyZWF0aWYgTWVkaWExDzANBgNVBAMMBkNh\ndGZpejCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAuJ/IGpw7SHlSA9xZPL85\nJqX5SxAYNm97h9tcve8R2OaqrKQF3eq5U8PFUHRyQSkXj/VFwGGx4GRXyiv27wPl\nUvkZC5vUOl5/gq9csyJ/ep5zoceaejoqlyHVUwurz2XbSWS1XvrpmMV8iry4xWXL\nEDekoRgJqsZIBeGiMkjQCm8CAwEAATANBgkqhkiG9w0BAQUFAAOBgQBVl9NcCEXw\nJtqwpMbGyUQbf7VtKVTuI9y4B7LWMjUtpo14H7hXIjzI/MwZsXO+kZ2RrZi0aBSe\nXBGeAkCqs4iZ21uuESmJmuKfWDEqJY06k4WMHq5vmbr5MlgX2b8C6C9ooFdFe4Hd\nI8jgwTLDjymgvdoziiQ2qAfqIO9cR9Gh6g==\n-----END CERTIFICATE-----\n";
    private static KeyStore trusted = null;
    private static long unique_monotonic_sequence = 0;
    private DefaultHttpClient clientconn = null;

    /* synthetic */ class AnonymousClass2 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType = new int[MessageType.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.P2PENDOFDATA.ordinal()] = CatfishRESTAPI.P2P_STREAM_PHOTO;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.P2PCHANNELOPEN.ordinal()] = CatfishRESTAPI.P2P_STREAM_AUDIO;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.P2PDATADELIVERED.ordinal()] = CatfishRESTAPI.P2P_STREAM_VIDEO;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.P2PDATAREADY.ordinal()] = CatfishRESTAPI.P2P_STREAM_VOICE;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTCONFERENCE_LONGMESSAGE.ordinal()] = CatfishRESTAPI.P2P_STREAM_DATA;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTCONFERENCE_VIDEO.ordinal()] = CatfishRESTAPI.P2P_STREAM_LONGMESSAGE;
            } catch (NoSuchFieldError e6) {
            }
        }
    }

    public class CatfishResult {
        public ArrayList PackageNames = null;
        public ArrayList adsLists = null;
        public int appId = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public ArrayList appsLists = null;
        public int block_count = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public int block_num = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public ResultStatus bstatus = ResultStatus.CATFISHRESTAPI_UNDEFINED;
        public int byteend = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public int byteread = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public int bytestart = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public int chunksize = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public int code = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public int content_ver = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public String contributors = null;
        public int cur_member = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public int currentdatasize = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public int dataType = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public String data_json = null;
        public long data_sequence = 0;
        public int datasize = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public String desciption = null;
        public String fifId = null;
        public String groupdesc = null;
        public String groupid = null;
        public String groupname = null;
        public String groupowner = null;
        public int grouptype = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public String[] hostName = null;
        public String[] hostPort = null;
        public String longpin = null;
        public String message = null;
        public ArrayList messages = null;
        public String mime_type = null;
        public ArrayList name = null;
        public int number_of_member = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public long object_sequence = 0;
        public String obsolete = null;
        public String obyek_name = null;
        public int p2p_binarystream_type = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public long p2p_channelid = 0;
        public String p2p_dataname = null;
        public int p2p_datasize;
        public String p2p_senderpin = null;
        public long p2p_timestamp = 0;
        public ArrayList packageList = null;
        public boolean photoavailable = false;
        public int photocurrentsize = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public boolean photoincomplete = false;
        public int photosize = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public ArrayList preview = null;
        public String[] pushName = null;
        public int[] pushPort = null;
        public long rdcounter = 0;
        public String[] registrationHostName = null;
        public String[] registrationPort = null;
        public String release_code = null;
        public String repo_key = null;
        public ResultType resulttype = ResultType.UNDEFINED;
        public int revision = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public String slink = null;
        public int status = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public StickerMessageObject stickerObject = null;
        public String[] streamHostName = null;
        public String[] streamPort = null;
        public long timestamp = 0;
        public int total_member = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        public String userkey = null;
        public String username = null;
        public String userpin = null;
        public String userstatus = null;
        public String validity_time = null;
        public String version = "0";
        public ArrayList versionCode = null;
        public String version_code = null;

        public CatfishResult(ResultStatus resultStatus) {
            this.bstatus = resultStatus;
            this.resulttype = ResultType.STATUS;
        }

        public CatfishResult(ResultStatus resultStatus, ResultType resultType) {
            this.bstatus = resultStatus;
            this.resulttype = resultType;
        }

        public void addMessage(CatfishMessageObject catfishMessageObject) {
            if (this.messages == null) {
                this.messages = new ArrayList();
            }
            this.messages.add(catfishMessageObject);
        }

        public void cleaningup() {
            this.userpin = null;
            this.username = null;
            this.userstatus = null;
            if (this.messages != null) {
                this.messages.clear();
            }
            this.messages = null;
            this.message = null;
            this.groupname = null;
            this.groupdesc = null;
            this.groupowner = null;
            this.groupid = null;
            this.grouptype = CatfishRESTAPI.MAX_CONN_IDLE_TIME;
        }

        public int getCount() {
            return this.messages == null ? CatfishRESTAPI.MAX_CONN_IDLE_TIME : this.messages.size();
        }

        public ResultStatus getStatus() {
            return this.bstatus;
        }

        public boolean hasDeviceAlreadyRegistered() {
            return this.bstatus == ResultStatus.CATFISHRESTAPI_DEVICEID_ALREADYREGISTERED;
        }

        public boolean hasEndOfData() {
            return this.bstatus == ResultStatus.CATFISHRESTAPI_P2P_ENDOFDATA;
        }

        public boolean hasFailure() {
            return this.bstatus == ResultStatus.CATFISHRESTAPI_FAILURE;
        }

        public boolean hasInvalidActionTopic() {
            return this.bstatus == ResultStatus.CATFISHRESTAPI_INVALID_ACTION_TOPIC;
        }

        public boolean hasInvalidMemberTopic() {
            return this.bstatus == ResultStatus.CATFISHRESTAPI_INVALID_MEMBER_TOPIC;
        }

        public boolean hasInvalidTopic() {
            return this.bstatus == ResultStatus.CATFISHRESTAPI_INVALID_TOPIC;
        }

        public boolean hasNotFound() {
            return this.bstatus == ResultStatus.CATFISHRESTAPI_NOTFOUND;
        }

        public boolean hasPinAlreadyExists() {
            return this.bstatus == ResultStatus.CATFISHRESTAPI_PIN_ALLREADYEXISTS;
        }

        public boolean hasSuccess() {
            return this.bstatus == ResultStatus.CATFISHRESTAPI_SUCCESS;
        }

        public boolean hasWaitBlock() {
            return this.bstatus == ResultStatus.CATFISHRESTAPI_P2P_WAITBLOCK;
        }

        public boolean isEmpty() {
            return this.bstatus == ResultStatus.CATFISHRESTAPI_EMPTY;
        }

        public void setStatus(ResultStatus resultStatus) {
            this.bstatus = resultStatus;
        }
    }

    public enum MessageDeliveryStatus {
        UNDEFINED,
        QUEUEING,
        SENT,
        DELIVERED,
        READ,
        RECEIVED,
        DROP,
        BCASTQUEUE,
        BCASTSENT,
        BCASTRECEIVED,
        BCASTFAIL,
        CONFRCPENDINGDOWNLOAD,
        CONFRCDOWNLOADING,
        CONFRCPENDING,
        CONFRCACCEPTED,
        CONFRCFAILDOWNLOAD
    }

    public enum MessageType {
        UNDEFINED,
        MESSAGE,
        DELIVERED,
        READ,
        PING,
        REQUESTFRD,
        ACCEPTFRD,
        DELETEFRD,
        PHOTOUPDT,
        STATUSUPDT,
        WRITING,
        REQUESTPFI,
        USERNAMEUPDT,
        P2PCHANNELOPEN,
        P2PDATAREADY,
        P2PDATADELIVERED,
        P2PENDOFDATA,
        BCASTFILE,
        BCASTCONFERENCE,
        BCASTIMAGESTATUS,
        BCASTVOICESTATUS,
        BCASTCHANGEPIN,
        BCASTMESSAGE,
        BCASTVOICE,
        STATUSCOMMENT,
        PERSONCONTACT,
        CONFRC_CREATE,
        CONFRC_DROP,
        CONFRC_JOINED,
        CONFRC_LEAVE,
        CONFRC_MESSAGE,
        LIKE,
        FUNNY,
        PRET,
        FLAG,
        UNLIKE,
        CONFRC_TOPIC_DATA,
        QUOTE,
        LONGSTATUSCOMMENT,
        PHOTOSEND_WCOMMENT,
        DATASEND_WCOMMENT,
        SVG_EMOTICONS,
        BCASTCONFERENCE_VIDEO,
        BCASTVIDEOSTATUS,
        ACCOUNT,
        LONG_MESSAGE,
        SERVER_MESSAGE,
        CONFRC_INVITEDBY,
        PROMOTECONTACT,
        STATUSLIKE,
        WRITING_DONE,
        CATFISH_MESSAGETYPE_CTRLS_DEBUG,
        CATFISH_MESSAGETYPE_MESSG_DEBUG,
        CATFISH_MESSAGETYPE_STATCOMMENT_DEBUG,
        CATFISH_MESSAGETYPE_CONFERENCE_DEBUG,
        CATFISH_MESSAGETYPE_LOWPRIO_DEBUG,
        CATFISH_MESSAGETYPE_DEBUG01,
        CATFISH_MESSAGETYPE_DEBUG02,
        CATFISH_MESSAGETYPE_DEBUG03,
        CATFISH_MESSAGETYPE_DEBUG04,
        CATFISH_MESSAGETYPE_DEBUG05,
        CATFISH_MESSAGETYPE_DEBUG06,
        CATFISH_MESSAGETYPE_DEBUG07,
        CATFISH_MESSAGETYPE_DEBUG08,
        CATFISH_MESSAGETYPE_DEBUG09,
        CATFISH_MESSAGETYPE_DEBUG10,
        POOL_THUMBNAIL_DATA,
        BCASTCONFERENCE_LONGMESSAGE,
        NEW_POOL_TITLE,
        NEW_POOL_TOPIC_MESSAGE,
        DELETE_STATUSCOMENT_BYOWNER,
        NIC_MESSAGE,
        PROFILEUPDT,
        USER_ACTIVITY,
        SHARE_SLINK,
        SHARE_SLINK_AT_COMMENT,
        SHARE_SLINK_AT_POOL,
        OBJECTCOMMENT,
        LONGOBJECTCOMMENT,
        OBJECTCOMMENT_POOL,
        LONGOBJECTCOMMENT_POOL,
        STIKER_MESSAGE,
        STIKER_MESSAGE_STATUS,
        STIKER_MESSAGE_POOL,
        STIKER_MESSAGE_NIC,
        RESERVED1,
        RESERVED2,
        RESERVED3,
        RESERVED4,
        RESERVED5,
        DELETE_FRIEND_PENDING,
        VIDEO_STREAMING,
        FIZZLINK_IMAGE,
        INVALID_REQUEST,
        MAXTYPE
    }

    public enum ResultStatus {
        CATFISHRESTAPI_SUCCESS,
        CATFISHRESTAPI_UNDEFINED,
        CATFISHRESTAPI_FAILURE,
        CATFISHRESTAPI_SOMEERROR,
        CATFISHRESTAPI_EMPTY,
        CATFISHRESTAPI_NOTFOUND,
        CATFISHRESTAPI_P2P_WAITBLOCK,
        CATFISHRESTAPI_P2P_ENDOFDATA,
        CATFISHRESTAPI_INVALID_TOPIC,
        CATFISHRESTAPI_INVALID_MEMBER_TOPIC,
        CATFISHRESTAPI_INVALID_ACTION_TOPIC,
        CATFISHRESTAPI_DEVICEID_ALREADYREGISTERED,
        CATFISHRESTAPI_PIN_ALLREADYEXISTS
    }

    public enum ResultType {
        UNDEFINED,
        STATUS,
        MESSAGES
    }

    private static KeyStore ConvertCerToBKS(InputStream inputStream, String str, char[] cArr) {
        KeyStore keyStore = null;
        try {
            keyStore = KeyStore.getInstance("BKS", "BC");
            Certificate generateCertificate = CertificateFactory.getInstance("X.509", "BC").generateCertificate(inputStream);
            keyStore.load(null, null);
            keyStore.setCertificateEntry(str, generateCertificate);
            return keyStore;
        } catch (Exception e) {
            return keyStore;
        }
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    protected static java.lang.String convertResponsebodyToString(java.io.InputStream r5) {
        /*
        r0 = 0;
        r1 = new java.io.BufferedReader;
        r2 = new java.io.InputStreamReader;
        r2.<init>(r5);
        r1.<init>(r2);
        r2 = new java.lang.StringBuilder;
        r2.<init>();
    L_0x0010:
        r3 = r1.readLine();	 Catch:{ EOFException -> 0x001a, IndexOutOfBoundsException -> 0x006f, IOException -> 0x00b5 }
        if (r3 == 0) goto L_0x001f;
    L_0x0016:
        r2.append(r3);	 Catch:{ EOFException -> 0x001a, IndexOutOfBoundsException -> 0x006f, IOException -> 0x00b5 }
        goto L_0x0010;
    L_0x001a:
        r1 = move-exception;
        r5.close();	 Catch:{ IOException -> 0x004b }
    L_0x001e:
        return r0;
    L_0x001f:
        r5.close();	 Catch:{ IOException -> 0x0027 }
    L_0x0022:
        r0 = r2.toString();
        goto L_0x001e;
    L_0x0027:
        r0 = move-exception;
        r1 = "CatfishRESTAPI";
        r3 = new java.lang.StringBuilder;
        r3.<init>();
        r4 = "EXCEPTION:";
        r3 = r3.append(r4);
        r0 = r0.toString();
        r0 = r3.append(r0);
        r3 = ": IGNORE";
        r0 = r0.append(r3);
        r0 = r0.toString();
        com.catfiz.util.Log.e(r1, r0);
        goto L_0x0022;
    L_0x004b:
        r1 = move-exception;
        r2 = "CatfishRESTAPI";
        r3 = new java.lang.StringBuilder;
        r3.<init>();
        r4 = "EXCEPTION:";
        r3 = r3.append(r4);
        r1 = r1.toString();
        r1 = r3.append(r1);
        r3 = ": IGNORE";
        r1 = r1.append(r3);
        r1 = r1.toString();
        com.catfiz.util.Log.e(r2, r1);
        goto L_0x001e;
    L_0x006f:
        r1 = move-exception;
        r2 = "CatfishRESTAPI";
        r3 = new java.lang.StringBuilder;	 Catch:{ all -> 0x00fc }
        r3.<init>();	 Catch:{ all -> 0x00fc }
        r4 = "EXCEPTION:";
        r3 = r3.append(r4);	 Catch:{ all -> 0x00fc }
        r1 = r1.toString();	 Catch:{ all -> 0x00fc }
        r1 = r3.append(r1);	 Catch:{ all -> 0x00fc }
        r1 = r1.toString();	 Catch:{ all -> 0x00fc }
        com.catfiz.util.Log.e(r2, r1);	 Catch:{ all -> 0x00fc }
        r5.close();	 Catch:{ IOException -> 0x0090 }
        goto L_0x001e;
    L_0x0090:
        r1 = move-exception;
        r2 = "CatfishRESTAPI";
        r3 = new java.lang.StringBuilder;
        r3.<init>();
        r4 = "EXCEPTION:";
        r3 = r3.append(r4);
        r1 = r1.toString();
        r1 = r3.append(r1);
        r3 = ": IGNORE";
        r1 = r1.append(r3);
        r1 = r1.toString();
        com.catfiz.util.Log.e(r2, r1);
        goto L_0x001e;
    L_0x00b5:
        r1 = move-exception;
        r2 = "CatfishRESTAPI";
        r3 = new java.lang.StringBuilder;	 Catch:{ all -> 0x00fc }
        r3.<init>();	 Catch:{ all -> 0x00fc }
        r4 = "EXCEPTION:";
        r3 = r3.append(r4);	 Catch:{ all -> 0x00fc }
        r1 = r1.toString();	 Catch:{ all -> 0x00fc }
        r1 = r3.append(r1);	 Catch:{ all -> 0x00fc }
        r1 = r1.toString();	 Catch:{ all -> 0x00fc }
        com.catfiz.util.Log.e(r2, r1);	 Catch:{ all -> 0x00fc }
        r5.close();	 Catch:{ IOException -> 0x00d7 }
        goto L_0x001e;
    L_0x00d7:
        r1 = move-exception;
        r2 = "CatfishRESTAPI";
        r3 = new java.lang.StringBuilder;
        r3.<init>();
        r4 = "EXCEPTION:";
        r3 = r3.append(r4);
        r1 = r1.toString();
        r1 = r3.append(r1);
        r3 = ": IGNORE";
        r1 = r1.append(r3);
        r1 = r1.toString();
        com.catfiz.util.Log.e(r2, r1);
        goto L_0x001e;
    L_0x00fc:
        r0 = move-exception;
        r5.close();	 Catch:{ IOException -> 0x0101 }
    L_0x0100:
        throw r0;
    L_0x0101:
        r1 = move-exception;
        r2 = "CatfishRESTAPI";
        r3 = new java.lang.StringBuilder;
        r3.<init>();
        r4 = "EXCEPTION:";
        r3 = r3.append(r4);
        r1 = r1.toString();
        r1 = r3.append(r1);
        r3 = ": IGNORE";
        r1 = r1.append(r3);
        r1 = r1.toString();
        com.catfiz.util.Log.e(r2, r1);
        goto L_0x0100;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.catfiz.service.CatfishRESTAPI.convertResponsebodyToString(java.io.InputStream):java.lang.String");
    }

    private static String convertZipResponsebodyToString(InputStream inputStream) {
        try {
            InputStream zipInputStream = new ZipInputStream(inputStream);
            ZipEntry nextEntry = zipInputStream.getNextEntry();
            while (nextEntry != null && nextEntry.isDirectory()) {
                zipInputStream.closeEntry();
                nextEntry = zipInputStream.getNextEntry();
            }
            if (nextEntry != null) {
                return convertResponsebodyToString(zipInputStream);
            }
            Log.d(TAG, "FAIL TO GET FILE IN ZIP STREAM");
            zipInputStream.close();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            Log.e(TAG, "EXCEPTION:" + e.toString());
        }
    }

    private CatfishResult executeByteMessagePOST(URI uri, byte[] bArr) {
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestPOST = newRequestPOST();
            newRequestPOST.setURI(uri);
            newRequestPOST.setEntity(new ByteArrayEntity(bArr));
            HttpResponse execute = newClientConn.execute(newRequestPOST);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                Log.d(TAG, "executePOST OK: Parsing Response");
                return parsingResponse(execute);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                Log.d(TAG, "executePOST Server Error");
                HttpEntity entity = execute.getEntity();
                if (entity != null) {
                    entity.consumeContent();
                }
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
    }

    private CatfishResult executeDataChunkPOST(URI uri, byte[] bArr, int i, boolean z) {
        DefaultHttpClient newClientConn;
        if (z) {
            try {
                newClientConn = newClientConn();
            } catch (ClientProtocolException e) {
            } catch (AssertionError e2) {
                e2.printStackTrace();
            } catch (Exception e3) {
                Log.e(TAG, "EXCEPTION:" + e3.toString());
            }
        } else {
            uri = changeToNonSecureServerUri(uri);
            newClientConn = newNonSecureClientConn();
        }
        HttpUriRequest newRequestPOST = newRequestPOST();
        InputStream byteArrayInputStream = new ByteArrayInputStream(bArr, MAX_CONN_IDLE_TIME, i);
        newRequestPOST.setURI(uri);
        newRequestPOST.setEntity(new InputStreamEntity(byteArrayInputStream, (long) i));
        HttpResponse execute = newClientConn.execute(newRequestPOST);
        Log.d(TAG, "executeDataChunkPOST: " + execute.getStatusLine().getStatusCode());
        if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
            return parsingDataChunkPostResponse(execute);
        }
        if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
            HttpEntity entity = execute.getEntity();
            if (entity != null) {
                entity.consumeContent();
            }
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    private CatfishResult executeGetAdvInfoPOST(URI uri, ArrayList arrayList) {
        try {
            Log.d(TAG, "executePOST: " + arrayList.toString());
            HttpEntity urlEncodedFormEntity = new UrlEncodedFormEntity(arrayList, HTTP.UTF_8);
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestPOST = newRequestPOST();
            newRequestPOST.setURI(uri);
            newRequestPOST.setEntity(urlEncodedFormEntity);
            HttpResponse execute = newClientConn.execute(newRequestPOST);
            arrayList.clear();
            Log.d(TAG, "ps ---> " + execute.getStatusLine().getStatusCode());
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingDataStorageInfoResponse(execute);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                urlEncodedFormEntity = execute.getEntity();
                if (urlEncodedFormEntity != null) {
                    urlEncodedFormEntity.consumeContent();
                }
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
    }

    private CatfishResult executeGetDataStorageInfoPOST(URI uri, ArrayList arrayList) {
        try {
            Log.d(TAG, "executePOST: " + arrayList.toString());
            HttpEntity urlEncodedFormEntity = new UrlEncodedFormEntity(arrayList, HTTP.UTF_8);
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestPOST = newRequestPOST();
            newRequestPOST.setURI(uri);
            newRequestPOST.setEntity(urlEncodedFormEntity);
            HttpResponse execute = newClientConn.execute(newRequestPOST);
            arrayList.clear();
            Log.d(TAG, "ps ---> " + execute.getStatusLine().getStatusCode());
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingDataStorageInfoResponse(execute);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                urlEncodedFormEntity = execute.getEntity();
                if (urlEncodedFormEntity != null) {
                    urlEncodedFormEntity.consumeContent();
                }
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
    }

    private CatfishResult executeGetSLinkDataStorageInfoPOST(a aVar, URI uri, String str) {
        try {
            HttpEntity stringEntity = new StringEntity(str);
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestPOST = newRequestPOST();
            newRequestPOST.setURI(uri);
            newRequestPOST.setEntity(stringEntity);
            HttpResponse execute = newClientConn.execute(newRequestPOST);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingSlinkDataInfoResponse(aVar, execute);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                stringEntity = execute.getEntity();
                if (stringEntity != null) {
                    stringEntity.consumeContent();
                }
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
    }

    private CatfishResult executeGetSLinkDataStorageNamePOST(URI uri, ArrayList arrayList) {
        try {
            HttpEntity urlEncodedFormEntity = new UrlEncodedFormEntity(arrayList, HTTP.UTF_8);
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestPOST = newRequestPOST();
            newRequestPOST.setURI(uri);
            newRequestPOST.setEntity(urlEncodedFormEntity);
            HttpResponse execute = newClientConn.execute(newRequestPOST);
            arrayList.clear();
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingSlinkDataNameResponse(execute);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                urlEncodedFormEntity = execute.getEntity();
                if (urlEncodedFormEntity != null) {
                    urlEncodedFormEntity.consumeContent();
                }
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
    }

    private CatfishResult executeOnewayPOST(URI uri, ArrayList arrayList) {
        try {
            HttpEntity urlEncodedFormEntity = new UrlEncodedFormEntity(arrayList);
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestPOST = newRequestPOST();
            newRequestPOST.setURI(uri);
            newRequestPOST.setEntity(urlEncodedFormEntity);
            HttpResponse execute = newClientConn.execute(newRequestPOST);
            arrayList.clear();
            HttpEntity entity = execute.getEntity();
            if (entity != null) {
                entity.consumeContent();
            }
            Log.d(TAG, "ps ---> " + execute.getStatusLine().getStatusCode());
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
    }

    private CatfishResult executeP2PPOST(URI uri, ArrayList arrayList) {
        try {
            HttpEntity urlEncodedFormEntity = new UrlEncodedFormEntity(arrayList);
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestPOST = newRequestPOST();
            newRequestPOST.setURI(uri);
            newRequestPOST.setEntity(urlEncodedFormEntity);
            HttpResponse execute = newClientConn.execute(newRequestPOST);
            arrayList.clear();
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingP2PResponse(execute);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
    }

    private CatfishResult executeP2PPOST(URI uri, byte[] bArr, boolean z) {
        DefaultHttpClient newClientConn;
        if (z) {
            try {
                newClientConn = newClientConn();
            } catch (ClientProtocolException e) {
            } catch (AssertionError e2) {
                e2.printStackTrace();
            } catch (Exception e3) {
                Log.e(TAG, "EXCEPTION:" + e3.toString());
            }
        } else {
            uri = changeToNonSecureServerUri(uri);
            newClientConn = newNonSecureClientConn();
        }
        HttpUriRequest newRequestPOST = newRequestPOST();
        newRequestPOST.setURI(uri);
        newRequestPOST.setEntity(new ByteArrayEntity(bArr));
        HttpResponse execute = newClientConn.execute(newRequestPOST);
        if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
            return parsingP2PResponse(execute);
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    private CatfishResult executePOST(URI uri, ArrayList arrayList) {
        try {
            Log.d(TAG, "executePOST: " + arrayList.toString());
            HttpEntity urlEncodedFormEntity = new UrlEncodedFormEntity(arrayList, HTTP.UTF_8);
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestPOST = newRequestPOST();
            newRequestPOST.setURI(uri);
            newRequestPOST.setEntity(urlEncodedFormEntity);
            Log.d(TAG, "executePOSTURL: " + newRequestPOST.getRequestLine().getUri());
            HttpResponse execute = newClientConn.execute(newRequestPOST);
            arrayList.clear();
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                Log.d(TAG, "executePOST OK: Parsing Response");
                return parsingResponse(execute);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                Log.d(TAG, "executePOST Server Error");
                urlEncodedFormEntity = execute.getEntity();
                if (urlEncodedFormEntity != null) {
                    urlEncodedFormEntity.consumeContent();
                }
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
    }

    private CatfishResult executePOSTNotSecure(URI uri, ArrayList arrayList) {
        try {
            Log.d(TAG, "executePOST: " + arrayList.toString());
            HttpEntity urlEncodedFormEntity = new UrlEncodedFormEntity(arrayList, HTTP.UTF_8);
            DefaultHttpClient newNonSecureClientConn = newNonSecureClientConn();
            HttpUriRequest newRequestPOST = newRequestPOST();
            newRequestPOST.setURI(changeToNonSecureServerUri(uri));
            newRequestPOST.setEntity(urlEncodedFormEntity);
            Log.d(TAG, "executePOSTURL: " + newRequestPOST.getRequestLine().getUri());
            HttpResponse execute = newNonSecureClientConn.execute(newRequestPOST);
            arrayList.clear();
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                Log.d(TAG, "executePOST OK: Parsing Response");
                return parsingResponse(execute);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                Log.d(TAG, "executePOST Server Error");
                urlEncodedFormEntity = execute.getEntity();
                if (urlEncodedFormEntity != null) {
                    urlEncodedFormEntity.consumeContent();
                }
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
    }

    private CatfishResult executePhotoChunkPOST(URI uri, byte[] bArr, int i, boolean z) {
        DefaultHttpClient newClientConn;
        if (z) {
            try {
                newClientConn = newClientConn();
            } catch (ClientProtocolException e) {
            } catch (AssertionError e2) {
                e2.printStackTrace();
            } catch (Exception e3) {
                Log.e(TAG, "EXCEPTION:" + e3.toString());
            }
        } else {
            uri = changeToNonSecureServerUri(uri);
            newClientConn = newNonSecureClientConn();
        }
        HttpUriRequest newRequestPOST = newRequestPOST();
        InputStream byteArrayInputStream = new ByteArrayInputStream(bArr, MAX_CONN_IDLE_TIME, i);
        newRequestPOST.setURI(uri);
        newRequestPOST.setEntity(new InputStreamEntity(byteArrayInputStream, (long) i));
        HttpResponse execute = newClientConn.execute(newRequestPOST);
        Log.d(TAG, "RC=" + execute.getStatusLine().getStatusCode());
        if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
            Log.d(TAG, "Chunk sent. Parsing response");
            return parsingPhotoChunkPostResponse(execute);
        }
        if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
            HttpEntity entity = execute.getEntity();
            if (entity != null) {
                entity.consumeContent();
            }
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        Log.d(TAG, "Chunk fail to sent");
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public static int fallbackChunkSize(int i) {
        int i2 = i / P2P_STREAM_VOICE;
        if (i2 <= MIN_CHUNKSIZE_TO_FALL) {
            Log.d(TAG, "SHRINK CHUNKS TO (MIN)8192");
            return MIN_CHUNKSIZE_TO_FALL;
        }
        Log.d(TAG, "SHRINK CHUNKS TO " + i2);
        return i2;
    }

    public static int growChunkSize(int i) {
        if (i >= MAX_CHUNKSIZE_TO_GROW) {
            Log.d(TAG, "GROW CHUNKS TO (MAX)262144");
            return MAX_CHUNKSIZE_TO_GROW;
        }
        Log.d(TAG, "GROW CHUNKS TO " + (i * P2P_STREAM_AUDIO));
        return i * P2P_STREAM_AUDIO;
    }

    private URI newHttpServerURI(String str) {
        try {
            URI uri = new URI("http://" + str);
            Log.d(TAG, "Server: " + uri);
            return uri;
        } catch (URISyntaxException e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            return null;
        }
    }

    private URI newServerURI(String str) {
        try {
            URI uri = new URI("https://" + str);
            Log.d(TAG, "Server: " + uri);
            return uri;
        } catch (URISyntaxException e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            return null;
        }
    }

    private SSLSocketFactory newSslSocketFactory() {
        try {
            if (trusted == null) {
                synchronized (mKeystoreLock) {
                    InputStream byteArrayInputStream = new ByteArrayInputStream(server_cert_v2.getBytes());
                    trusted = ConvertCerToBKS(byteArrayInputStream, CatfishService.APK_NAME, null);
                    try {
                        byteArrayInputStream.close();
                    } catch (IOException e) {
                        Log.e(TAG, "ERROR =" + e.getMessage());
                    }
                }
            }
            SSLSocketFactory sSLSocketFactory = new SSLSocketFactory(trusted);
            sSLSocketFactory.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
            return sSLSocketFactory;
        } catch (Exception e2) {
            Log.e(TAG, "ERROR =" + e2.getMessage());
            return null;
        }
    }

    private CatfishResult parsingDataChunkPostResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString(entity.getContent()));
            if (entity != null) {
                entity.consumeContent();
            }
            Log.d(TAG, "Chunk Response:" + jSONObject.toString());
            if (jSONObject.has("success")) {
                JSONObject jSONObject2 = jSONObject.getJSONObject("success");
                CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                catfishResult.chunksize = jSONObject2.getInt(ChunkStorage.CHUNKSIZE);
                catfishResult.datasize = jSONObject2.getInt(TaskDataStorage.DATA_SIZE);
                catfishResult.bytestart = jSONObject2.getInt("bytestart");
                catfishResult.byteend = jSONObject2.getInt("byteend");
                catfishResult.object_sequence = jSONObject2.getLong(ObjectCommentDataStorage.OBJECTSEQUENCE);
                return catfishResult;
            }
            if (jSONObject.has(Extra.ERROR)) {
                JSONObject jSONObject3 = jSONObject.getJSONObject(Extra.ERROR);
                if (jSONObject3.has(FriendListDataStorage.CODE) && jSONObject3.getInt(FriendListDataStorage.CODE) == 134) {
                    return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
                }
            }
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingDataProfileResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            String convertResponsebodyToString = convertResponsebodyToString(entity.getContent());
            if (entity != null) {
                entity.consumeContent();
            }
            Log.e(TAG, "Messages DATA PROFILE:" + convertResponsebodyToString);
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString);
            if (jSONObject.has("success")) {
                JSONObject jSONObject2 = jSONObject.getJSONObject("success");
                CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                catfishResult.userpin = jSONObject2.getString("pin");
                if (jSONObject2.has(TaskDataStorage.TIMESTAMP)) {
                    catfishResult.timestamp = jSONObject2.getLong(TaskDataStorage.TIMESTAMP);
                } else {
                    catfishResult.timestamp = 0;
                }
                if (jSONObject2.has("tagdata")) {
                    catfishResult.data_json = jSONObject2.getString("tagdata");
                    return catfishResult;
                }
                catfishResult.data_json = " ";
                return catfishResult;
            } else if (jSONObject.has("notfound")) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND);
            } else {
                if (!jSONObject.has(Extra.ERROR)) {
                    return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
                }
                jSONObject = jSONObject.getJSONObject(Extra.ERROR);
                return jSONObject.has(FriendListDataStorage.CODE) ? jSONObject.getInt(FriendListDataStorage.CODE) == PROTO_ERROR_NOTFOUND ? new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND) : new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR) : new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
        } catch (Exception e) {
            Log.e(TAG, "ERROR SAAT PASRING KAH?" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingDataStorageInfoResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString(entity.getContent()));
            if (entity != null) {
                entity.consumeContent();
            }
            Log.d(TAG, "Datastorage Info Response:" + jSONObject.toString());
            if (jSONObject.has("datastorageinfo")) {
                JSONObject jSONObject2 = jSONObject.getJSONObject("datastorageinfo");
                CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                catfishResult.userpin = jSONObject2.getString(FriendListDataStorage.USERPIN);
                catfishResult.object_sequence = jSONObject2.getLong(ObjectCommentDataStorage.OBJECTSEQUENCE);
                catfishResult.datasize = jSONObject2.getInt(TaskDataStorage.DATA_SIZE);
                catfishResult.currentdatasize = jSONObject2.getInt("size");
                return catfishResult;
            }
            if (jSONObject.has(Extra.ERROR)) {
                JSONObject jSONObject3 = jSONObject.getJSONObject(Extra.ERROR);
                if (jSONObject3.has(FriendListDataStorage.CODE) && jSONObject3.getInt(FriendListDataStorage.CODE) == PROTO_ERROR_NOTFOUND) {
                    return new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND);
                }
            }
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingDeviceCheckResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            String convertResponsebodyToString = convertResponsebodyToString(entity.getContent());
            Log.d(TAG, "Device check response: " + convertResponsebodyToString);
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString);
            if (entity != null) {
                entity.consumeContent();
            }
            if (jSONObject.has("success")) {
                JSONObject jSONObject2 = jSONObject.getJSONObject("success");
                CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                catfishResult.userpin = jSONObject2.getString(CFCOMPACT_STORAGENIC);
                catfishResult.code = jSONObject2.getInt(FriendListDataStorage.CODE);
                catfishResult.status = jSONObject2.getInt(FriendListDataStorage.STATUS);
                return catfishResult;
            }
        } catch (JSONException e) {
            Log.e(TAG, "server send invalid response: " + e.toString());
        } catch (Exception e2) {
            Log.e(TAG, "exception on parsing device check: " + e2.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
    }

    private CatfishResult parsingFifAdsResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString(entity.getContent()));
            if (entity != null) {
                entity.consumeContent();
            }
            if (!jSONObject.has("ads")) {
                return jSONObject.has("ver") ? new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS, ResultType.MESSAGES) : new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            } else {
                CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS, ResultType.MESSAGES);
                JSONArray jSONArray = jSONObject.getJSONArray("ads");
                int length = jSONArray.length();
                ArrayList arrayList = new ArrayList();
                for (int i = MAX_CONN_IDLE_TIME; i < length; i += P2P_STREAM_PHOTO) {
                    JSONObject jSONObject2 = jSONArray.getJSONObject(i);
                    AdsHelper adsHelper = new AdsHelper();
                    if (jSONObject2.has(CFCOMPACT_STICKERID)) {
                        adsHelper.ads_id = jSONObject2.getInt(CFCOMPACT_STICKERID);
                    }
                    if (jSONObject2.has("pos")) {
                        adsHelper.ads_pos = jSONObject2.getInt("pos");
                    }
                    if (jSONObject2.has("uri")) {
                        adsHelper.ads_uri = jSONObject2.getString("uri");
                    }
                    if (jSONObject2.has("img-url")) {
                        adsHelper.ads_img_url = jSONObject2.getString("img-url");
                    }
                    if (jSONObject2.has("img-size")) {
                        adsHelper.ads_img_size = jSONObject2.getLong("img-size");
                    }
                    if (jSONObject2.has("exp-count")) {
                        adsHelper.ads_expcount = jSONObject2.getInt("exp-count");
                    }
                    arrayList.add(adsHelper);
                }
                catfishResult.adsLists = arrayList;
                return catfishResult;
            }
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingFifAppsResponse(HttpResponse httpResponse, int i) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString(entity.getContent()));
            if (entity != null) {
                entity.consumeContent();
            }
            CatfishResult catfishResult;
            if (jSONObject.has("apps")) {
                catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS, ResultType.MESSAGES);
                JSONArray jSONArray = jSONObject.getJSONArray("apps");
                int length = jSONArray.length();
                ArrayList arrayList = new ArrayList();
                for (int i2 = MAX_CONN_IDLE_TIME; i2 < length; i2 += P2P_STREAM_PHOTO) {
                    JSONObject jSONObject2 = jSONArray.getJSONObject(i2);
                    AppsHelper appsHelper = new AppsHelper();
                    if (jSONObject2.has(CFCOMPACT_STICKERID)) {
                        appsHelper.apps_id = jSONObject2.getInt(CFCOMPACT_STICKERID);
                    }
                    if (jSONObject2.has(CatfishDataStorage.NIC_NAME)) {
                        appsHelper.name = jSONObject2.getString(CatfishDataStorage.NIC_NAME);
                    }
                    if (jSONObject2.has("icon")) {
                        appsHelper.icon_url = jSONObject2.getString("icon");
                    }
                    if (jSONObject2.has("ps-url")) {
                        appsHelper.ps_url = jSONObject2.getString("ps-url");
                    }
                    if (jSONObject2.has("pkg-name")) {
                        appsHelper.packagename = jSONObject2.getString("pkg-name");
                    }
                    if (jSONObject2.has("priv")) {
                        appsHelper.priv = jSONObject2.getInt("priv");
                    }
                    appsHelper.apps_type = i;
                    arrayList.add(appsHelper);
                }
                catfishResult.appsLists = arrayList;
                return catfishResult;
            } else if (!jSONObject.has("return")) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            } else {
                catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS, ResultType.MESSAGES);
                if (jSONObject.getString("return").compareTo("success") == 0) {
                    catfishResult.status = P2P_STREAM_PHOTO;
                    return catfishResult;
                }
                catfishResult.status = MAX_CONN_IDLE_TIME;
                return catfishResult;
            }
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingGetFriendListResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString(entity.getContent()));
            if (entity != null) {
                entity.consumeContent();
            }
            if (!jSONObject.has(FriendListDataStorage.FRIENDLIST_TABLE_NAME)) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            JSONObject jSONObject2 = jSONObject.getJSONObject(FriendListDataStorage.FRIENDLIST_TABLE_NAME);
            CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS, ResultType.MESSAGES);
            if (!jSONObject2.has("list")) {
                return catfishResult;
            }
            String[] split = jSONObject2.getString("list").split(",");
            int length = split.length;
            for (int i = MAX_CONN_IDLE_TIME; i < length; i += P2P_STREAM_PHOTO) {
                catfishResult.addMessage(CatfishMessageObject.obtain(split[i]));
            }
            return catfishResult;
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingGetGroupPrivilegeResponse(HttpResponse httpResponse) {
        Object obj = null;
        try {
            HttpEntity entity = httpResponse.getEntity();
            String convertResponsebodyToString = convertResponsebodyToString(entity.getContent());
            if (entity != null) {
                entity.consumeContent();
            }
            Log.e(TAG, "Messages Group Privilege:" + convertResponsebodyToString);
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString);
            if (!jSONObject.has("success")) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            jSONObject = jSONObject.getJSONObject("success");
            if (jSONObject.has(FriendListDataStorage.CODE) && jSONObject.getInt(FriendListDataStorage.CODE) == 0) {
                obj = P2P_STREAM_PHOTO;
            }
            if (obj == null) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
            if (jSONObject.has("privilegekey")) {
                catfishResult.groupid = jSONObject.getString("privilegekey");
            }
            if (jSONObject.has("privilegetype")) {
                catfishResult.grouptype = jSONObject.getInt("privilegetype");
            }
            if (!jSONObject.has("membercount")) {
                return catfishResult;
            }
            catfishResult.number_of_member = jSONObject.getInt("membercount");
            return catfishResult;
        } catch (Exception e) {
            Log.e(TAG, "ERROR SAAT PASRING KAH?" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingGetMemberListResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString(entity.getContent()));
            if (entity != null) {
                entity.consumeContent();
            }
            if (!jSONObject.has("confrcmemberinfo")) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            JSONObject jSONObject2 = jSONObject.getJSONObject("confrcmemberinfo");
            JSONArray jSONArray = jSONObject2.getJSONArray("members");
            CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS, ResultType.MESSAGES);
            catfishResult.total_member = jSONObject2.getInt("totalmember");
            catfishResult.block_count = jSONObject2.getInt("blockcount");
            catfishResult.block_num = jSONObject2.getInt("blocknum");
            catfishResult.cur_member = jSONObject2.getInt("curmember");
            int length = jSONArray.length();
            for (int i = MAX_CONN_IDLE_TIME; i < length; i += P2P_STREAM_PHOTO) {
                JSONObject jSONObject3 = jSONArray.getJSONObject(i);
                String string = jSONObject3.has("pin") ? jSONObject3.getString("pin") : null;
                String string2 = jSONObject3.has(CatfishDataStorage.NIC_NAME) ? jSONObject3.getString(CatfishDataStorage.NIC_NAME) : null;
                if (string2 != null && string2.length() > P2P_STREAM_PHOTO) {
                    catfishResult.addMessage(CatfishMessageObject.obtain(string, string2));
                }
            }
            return catfishResult;
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingGetMessagesResponse(HttpResponse httpResponse, boolean z) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            if (entity == null || entity.getContentLength() > 0) {
                String convertResponsebodyToString;
                CatfishResult catfishResult;
                if (z) {
                    Log.d(TAG, " --- parsingGetMessagesResponse with zlib --- ");
                    InputStream inflaterInputStream = new InflaterInputStream(entity.getContent(), new Inflater(true));
                    try {
                        convertResponsebodyToString = convertResponsebodyToString(inflaterInputStream);
                    } catch (Exception e) {
                        Log.e(TAG, "Error decoding catfish stream");
                        entity = ResultStatus.CATFISHRESTAPI_SOMEERROR;
                        catfishResult = new CatfishResult(entity);
                        return catfishResult;
                    } finally {
                        inflaterInputStream.close();
                    }
                } else {
                    Log.d(TAG, " --- parsingGetMessagesResponse --- ");
                    convertResponsebodyToString = convertResponsebodyToString(entity.getContent());
                }
                if (entity != null) {
                    entity.consumeContent();
                }
                if (convertResponsebodyToString == null) {
                    return new CatfishResult(ResultStatus.CATFISHRESTAPI_EMPTY);
                }
                JSONObject jSONObject = new JSONObject(convertResponsebodyToString);
                Log.d(TAG, "Messages:" + jSONObject.toString());
                if (jSONObject.has(CatfishDataStorage.MESSAGES_TABLE_NAME)) {
                    JSONArray jSONArray = jSONObject.getJSONArray(CatfishDataStorage.MESSAGES_TABLE_NAME);
                    CatfishResult catfishResult2 = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS, ResultType.MESSAGES);
                    if (jSONObject.has(CatfishService.RDCOUNTER_PREF)) {
                        catfishResult2.rdcounter = jSONObject.getLong(CatfishService.RDCOUNTER_PREF);
                    }
                    int length = jSONArray.length();
                    for (int i = MAX_CONN_IDLE_TIME; i < length; i += P2P_STREAM_PHOTO) {
                        JSONObject jSONObject2 = jSONArray.getJSONObject(i);
                        long uniqueMonotonicSequence = uniqueMonotonicSequence();
                        int i2 = jSONObject2.getInt(TaskDataStorage.MESSAGETYPE);
                        int i3 = MAX_CONN_IDLE_TIME;
                        if (jSONObject2.has("stype")) {
                            i3 = jSONObject2.getInt("stype");
                        }
                        long j;
                        long j2;
                        String str;
                        String str2;
                        int i4;
                        int i5;
                        switch (AnonymousClass2.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[i2].ordinal()]) {
                            case P2P_STREAM_PHOTO /*1*/:
                            case P2P_STREAM_AUDIO /*2*/:
                            case P2P_STREAM_VIDEO /*3*/:
                            case P2P_STREAM_VOICE /*4*/:
                                catfishResult2.addMessage(CatfishMessageObject.obtain(jSONObject2.getString(AlbusModelObject.SENDER_NAME), i2, i3, jSONObject2.getLong(TaskDataStorage.CHANNELID), jSONObject2.getInt(ChunkStorage.CHUNKSIZE), jSONObject2.getInt("bytestart"), jSONObject2.getInt("byteend"), jSONObject2.getLong(ServerMessageDataStorage.SEQUENCE), uniqueMonotonicSequence));
                                break;
                            case P2P_STREAM_DATA /*5*/:
                            case P2P_STREAM_LONGMESSAGE /*6*/:
                                j = 0;
                                j2 = 0;
                                str = null;
                                str2 = null;
                                if (jSONObject2.has(ObjectCommentDataStorage.OBJECTSEQUENCE)) {
                                    j = jSONObject2.getLong(ObjectCommentDataStorage.OBJECTSEQUENCE);
                                }
                                if (jSONObject2.has("objectowner")) {
                                    str = jSONObject2.getString("objectowner");
                                }
                                if (jSONObject2.has(ServerMessageDataStorage.SENDERNAME)) {
                                    str2 = jSONObject2.getString(ServerMessageDataStorage.SENDERNAME);
                                }
                                if (jSONObject2.has(CatfishService.RDCOUNTER_PREF)) {
                                    j2 = jSONObject2.getLong(CatfishService.RDCOUNTER_PREF);
                                }
                                i4 = i2;
                                i5 = i3;
                                catfishResult2 = catfishResult2;
                                catfishResult2.addMessage(CatfishMessageObject.obtain(jSONObject2.getString(AlbusModelObject.SENDER_NAME), str2, jSONObject2.getString(ServerMessageDataStorage.MESSAGE), i4, i5, jSONObject2.getLong(ServerMessageDataStorage.SEQUENCE), j, str, uniqueMonotonicSequence, j2, jSONObject2.getLong(ServerMessageDataStorage.SEQUENCE)));
                                break;
                            default:
                                j = 0;
                                j2 = 0;
                                str = null;
                                str2 = null;
                                if (jSONObject2.has(ObjectCommentDataStorage.OBJECTSEQUENCE)) {
                                    j = jSONObject2.getLong(ObjectCommentDataStorage.OBJECTSEQUENCE);
                                }
                                if (jSONObject2.has("objectowner")) {
                                    str = jSONObject2.getString("objectowner");
                                }
                                if (jSONObject2.has(ServerMessageDataStorage.SENDERNAME)) {
                                    str2 = jSONObject2.getString(ServerMessageDataStorage.SENDERNAME);
                                }
                                if (jSONObject2.has(CatfishService.RDCOUNTER_PREF)) {
                                    j2 = jSONObject2.getLong(CatfishService.RDCOUNTER_PREF);
                                }
                                if (!jSONObject2.has("dataseq")) {
                                    catfishResult2 = catfishResult2;
                                    catfishResult2.addMessage(CatfishMessageObject.obtain(jSONObject2.getString(AlbusModelObject.SENDER_NAME), str2, jSONObject2.getString(ServerMessageDataStorage.MESSAGE), i2, i3, jSONObject2.getLong(ServerMessageDataStorage.SEQUENCE), j, str, uniqueMonotonicSequence, j2));
                                    break;
                                }
                                i4 = i2;
                                i5 = i3;
                                catfishResult2 = catfishResult2;
                                catfishResult2.addMessage(CatfishMessageObject.obtain(jSONObject2.getString(AlbusModelObject.SENDER_NAME), str2, jSONObject2.getString(ServerMessageDataStorage.MESSAGE), i4, i5, jSONObject2.getLong(ServerMessageDataStorage.SEQUENCE), j, str, uniqueMonotonicSequence, j2, jSONObject2.getLong("dataseq")));
                                break;
                        }
                    }
                    return catfishResult2;
                } else if (jSONObject.has("empty")) {
                    catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_EMPTY);
                    if (!jSONObject.has(CatfishService.RDCOUNTER_PREF)) {
                        return catfishResult;
                    }
                    catfishResult.rdcounter = jSONObject.getLong(CatfishService.RDCOUNTER_PREF);
                    return catfishResult;
                } else {
                    shutdownConnectionManager();
                    return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
                }
            }
            Log.d(TAG, " --- parsingGetMessagesResponse NULL CONTENT --- ");
            entity.consumeContent();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_EMPTY);
        } catch (Exception e2) {
            Log.e(TAG, "EXCEPTION:" + e2.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingGetPinToRestoreResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            String convertResponsebodyToString = convertResponsebodyToString(entity.getContent());
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString);
            Log.d(TAG, "Response: " + convertResponsebodyToString);
            if (entity != null) {
                entity.consumeContent();
            }
            CatfishResult catfishResult;
            JSONObject jSONObject2;
            if (jSONObject.has("success")) {
                catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                jSONObject2 = jSONObject.getJSONObject("success");
                if (jSONObject2.has(FriendListDataStorage.USERPIN)) {
                    catfishResult.userpin = jSONObject2.getString(FriendListDataStorage.USERPIN);
                }
                if (!jSONObject2.has("longpin")) {
                    return catfishResult;
                }
                catfishResult.longpin = jSONObject2.getString("longpin");
                return catfishResult;
            }
            if (jSONObject.has(Extra.ERROR)) {
                jSONObject2 = jSONObject.getJSONObject(Extra.ERROR);
                if (jSONObject2.getString(ObjectCommentDataStorage.CONTEXT).compareTo("pinmangetpinfromdev") == 0 && jSONObject2.has(FriendListDataStorage.USERPIN)) {
                    catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                    catfishResult.userpin = jSONObject2.getString(FriendListDataStorage.USERPIN);
                    return catfishResult;
                }
            } else if (jSONObject.has("exception")) {
                shutdownConnectionManager();
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingGetSlinkResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString(entity.getContent()));
            if (entity != null) {
                entity.consumeContent();
            }
            if (!jSONObject.has("success")) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            JSONObject jSONObject2 = jSONObject.getJSONObject("success");
            CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS, ResultType.MESSAGES);
            catfishResult.slink = jSONObject2.getString(ServerMessageDataStorage.SLINK);
            Log.d(TAG, "slink " + catfishResult.slink);
            return catfishResult;
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingP2PResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString(entity.getContent()));
            if (entity != null) {
                entity.consumeContent();
            }
            Log.d(TAG, "Messages:" + jSONObject.toString());
            if (jSONObject.has("success")) {
                jSONObject.getJSONObject("success");
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
            } else if (jSONObject.has("p2pchannelinfo")) {
                r1 = jSONObject.getJSONObject("p2pchannelinfo");
                r0 = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                r0.p2p_senderpin = r1.getString(AlbusModelObject.SENDER_NAME);
                r0.p2p_datasize = r1.getInt(TaskDataStorage.DATA_SIZE);
                r0.p2p_channelid = r1.getLong(TaskDataStorage.CHANNELID);
                r0.p2p_timestamp = r1.getLong(TaskDataStorage.TIMESTAMP);
                r0.p2p_dataname = r1.getString(CFCOMPACT_STORAGEDATANAME);
                r0.p2p_binarystream_type = r1.getInt("binarystream_type");
                return r0;
            } else if (!jSONObject.has("p2pwaitblock")) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            } else {
                r1 = jSONObject.getJSONObject("p2pwaitblock");
                r0 = new CatfishResult(ResultStatus.CATFISHRESTAPI_P2P_WAITBLOCK);
                r0.bytestart = r1.getInt("bytestart");
                r0.byteend = r1.getInt("lastbytestored");
                r0.byteread = r1.getInt("lastbyteread");
                r0.chunksize = MAX_CONN_IDLE_TIME;
                return r0;
            }
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingPhotoChunkPostResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString(entity.getContent()));
            if (entity != null) {
                entity.consumeContent();
            }
            Log.d(TAG, "Chunk Response:" + jSONObject.toString());
            if (jSONObject.has("success")) {
                JSONObject jSONObject2 = jSONObject.getJSONObject("success");
                CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                catfishResult.chunksize = jSONObject2.getInt(ChunkStorage.CHUNKSIZE);
                catfishResult.photosize = jSONObject2.getInt("photosize");
                catfishResult.bytestart = jSONObject2.getInt("bytestart");
                catfishResult.byteend = jSONObject2.getInt("byteend");
                return catfishResult;
            } else if (jSONObject.has(Extra.ERROR)) {
                Log.d(TAG, "Server Error");
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            } else {
                if (jSONObject.has("exception")) {
                    Log.d(TAG, "Server Exception");
                    return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
                }
                shutdownConnectionManager();
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
            }
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
        }
    }

    private CatfishResult parsingPinManagerResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString(entity.getContent()));
            if (entity != null) {
                entity.consumeContent();
            }
            if (jSONObject.has("success")) {
                JSONObject jSONObject2 = jSONObject.getJSONObject("success");
                CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                if (jSONObject2.getString(ObjectCommentDataStorage.CONTEXT).compareTo("pinmanregister") == 0) {
                    catfishResult.longpin = jSONObject2.getString("longpin");
                    return catfishResult;
                } else if (jSONObject2.getString(ObjectCommentDataStorage.CONTEXT).compareTo("pingen") == 0) {
                    catfishResult.userpin = jSONObject2.getString("pin10d");
                    return catfishResult;
                } else if (jSONObject2.getString(ObjectCommentDataStorage.CONTEXT).compareTo("pinmangetpinfromdev") == 0) {
                    String string = jSONObject2.getString(FriendListDataStorage.USERPIN);
                    String string2 = jSONObject2.getString("userlongpin");
                    catfishResult.userpin = string;
                    catfishResult.longpin = string2;
                    return catfishResult;
                } else if (jSONObject2.getString(ObjectCommentDataStorage.CONTEXT).compareTo("pinmanchangeuserkey") == 0) {
                    catfishResult.longpin = jSONObject2.getString("longpin");
                    return catfishResult;
                } else if (jSONObject2.getString(ObjectCommentDataStorage.CONTEXT).compareTo("pinmangetdevmessage") != 0 || jSONObject2.getInt(TaskDataStorage.MESSAGETYPE) != MessageType.ACCOUNT.ordinal()) {
                    return catfishResult;
                } else {
                    CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
                    catfishMessageObject.userpin = jSONObject2.getString(FriendListDataStorage.USERPIN);
                    catfishMessageObject.userkey = jSONObject2.getString(CFCOMPACT_USERKEY);
                    catfishMessageObject.longpin = jSONObject2.getString("userlongpin");
                    catfishMessageObject.messagetype = MessageType.ACCOUNT;
                    catfishResult.addMessage(catfishMessageObject);
                    return catfishResult;
                }
            } else if (jSONObject.has("notfound")) {
                shutdownConnectionManager();
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND);
            } else {
                if (jSONObject.has(Extra.ERROR)) {
                    JSONObject jSONObject3 = jSONObject.getJSONObject(Extra.ERROR);
                    if (jSONObject3.getInt(FriendListDataStorage.CODE) == PROTO_ERROR_DEVICEID_ALREADYREGISTERED) {
                        shutdownConnectionManager();
                        return new CatfishResult(ResultStatus.CATFISHRESTAPI_DEVICEID_ALREADYREGISTERED);
                    } else if (jSONObject3.getInt(FriendListDataStorage.CODE) == PROTO_ERROR_PIN_ALLREADYEXISTS) {
                        shutdownConnectionManager();
                        return new CatfishResult(ResultStatus.CATFISHRESTAPI_PIN_ALLREADYEXISTS);
                    }
                } else if (jSONObject.has("exception")) {
                    shutdownConnectionManager();
                    return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
                }
                shutdownConnectionManager();
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingPoolDataBackupResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            String convertResponsebodyToString = convertResponsebodyToString(entity.getContent());
            if (entity != null) {
                entity.consumeContent();
            }
            Log.e(TAG, "Messages DATA POOL BACKUP:" + convertResponsebodyToString);
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString);
            if (jSONObject.has("success")) {
                JSONObject jSONObject2 = jSONObject.getJSONObject("success");
                CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                catfishResult.userpin = jSONObject2.getString("pin");
                if (jSONObject2.has(TaskDataStorage.TIMESTAMP)) {
                    catfishResult.timestamp = jSONObject2.getLong(TaskDataStorage.TIMESTAMP);
                } else {
                    catfishResult.timestamp = 0;
                }
                if (jSONObject2.has(CFCOMPACT_STORAGEDATA)) {
                    catfishResult.data_json = jSONObject2.getString(CFCOMPACT_STORAGEDATA);
                } else {
                    catfishResult.data_json = "";
                }
                if (jSONObject2.has("datacount")) {
                    catfishResult.datasize = jSONObject2.getInt("datacount");
                    return catfishResult;
                }
                catfishResult.datasize = MAX_CONN_IDLE_TIME;
                return catfishResult;
            } else if (jSONObject.has("notfound")) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND);
            } else {
                if (!jSONObject.has(Extra.ERROR)) {
                    return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
                }
                jSONObject = jSONObject.getJSONObject(Extra.ERROR);
                return jSONObject.has(FriendListDataStorage.CODE) ? jSONObject.getInt(FriendListDataStorage.CODE) == PROTO_ERROR_NOTFOUND ? new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND) : new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR) : new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
        } catch (Exception e) {
            Log.e(TAG, "ERROR SAAT PASRING KAH?" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingProfileInfoResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            String convertResponsebodyToString = convertResponsebodyToString(entity.getContent());
            if (entity != null) {
                entity.consumeContent();
            }
            Log.d(TAG, "Messages ProfileInfoResponse:" + convertResponsebodyToString);
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString);
            if (jSONObject.has(FriendListDataStorage.USERPROFILE)) {
                JSONObject jSONObject2 = jSONObject.getJSONObject(FriendListDataStorage.USERPROFILE);
                CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                catfishResult.userpin = jSONObject2.getString("pin");
                if (jSONObject2.has(CatfishDataStorage.NIC_NAME)) {
                    catfishResult.username = jSONObject2.getString(CatfishDataStorage.NIC_NAME);
                } else {
                    catfishResult.username = " ";
                }
                if (jSONObject2.has(FriendListDataStorage.STATUS)) {
                    catfishResult.userstatus = jSONObject2.getString(FriendListDataStorage.STATUS);
                } else {
                    catfishResult.userstatus = " ";
                }
                catfishResult.object_sequence = jSONObject2.getLong("userstatusseq");
                catfishResult.photoavailable = false;
                if (jSONObject2.getString(AlbusModelObject.DATA_TYPE_PHOTO).compareTo("available") == 0) {
                    catfishResult.photoavailable = true;
                }
                catfishResult.photoincomplete = false;
                if (jSONObject2.getString(AlbusModelObject.DATA_TYPE_PHOTO).compareTo("incomplete") == 0) {
                    catfishResult.photoincomplete = true;
                }
                catfishResult.photosize = jSONObject2.getInt("size");
                catfishResult.photocurrentsize = jSONObject2.getInt("currsize");
                return catfishResult;
            } else if (jSONObject.has("notfound")) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND);
            } else {
                if (jSONObject.has(Extra.ERROR)) {
                    jSONObject = jSONObject.getJSONObject(Extra.ERROR);
                    if (!jSONObject.has(FriendListDataStorage.CODE)) {
                        return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
                    }
                    if (jSONObject.getInt(FriendListDataStorage.CODE) == PROTO_ERROR_NOTFOUND) {
                        return new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND);
                    }
                }
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingRegisterPhoneResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            String convertResponsebodyToString = convertResponsebodyToString(entity.getContent());
            if (entity != null) {
                entity.consumeContent();
            }
            Log.e(TAG, "Messages REGISTER PHONE:" + convertResponsebodyToString);
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString);
            if (jSONObject.has("success")) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
            }
            if (jSONObject.has("notfound")) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND);
            }
            if (!jSONObject.has(Extra.ERROR)) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            jSONObject = jSONObject.getJSONObject(Extra.ERROR);
            return jSONObject.has(FriendListDataStorage.CODE) ? jSONObject.getInt(FriendListDataStorage.CODE) == PROTO_ERROR_NOTFOUND ? new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND) : new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR) : new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        } catch (Exception e) {
            Log.e(TAG, "ERROR SAAT PASRING KAH?" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingRepoInfoResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            String convertResponsebodyToString = convertResponsebodyToString(entity.getContent());
            if (entity != null) {
                entity.consumeContent();
            }
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString);
            if (jSONObject.has("success")) {
                JSONObject jSONObject2 = jSONObject.getJSONObject("success");
                CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                if (jSONObject2.has("size")) {
                    catfishResult.datasize = jSONObject2.getInt("size");
                }
                if (jSONObject2.has("objname")) {
                    catfishResult.obyek_name = jSONObject2.getString("objname");
                }
                if (!jSONObject2.has(MimeTypeParser.ATTR_MIMETYPE)) {
                    return catfishResult;
                }
                catfishResult.mime_type = jSONObject2.getString(MimeTypeParser.ATTR_MIMETYPE);
                return catfishResult;
            } else if (jSONObject.has("notfound")) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND);
            } else {
                if (jSONObject.has(Extra.ERROR)) {
                    jSONObject = jSONObject.getJSONObject(Extra.ERROR);
                    if (!jSONObject.has(FriendListDataStorage.CODE)) {
                        return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
                    }
                    if (jSONObject.getInt(FriendListDataStorage.CODE) == PROTO_ERROR_NOTFOUND) {
                        return new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND);
                    }
                }
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            String convertResponsebodyToString = convertResponsebodyToString(entity.getContent());
            if (entity != null) {
                entity.consumeContent();
            }
            Log.d(TAG, "Messages:" + convertResponsebodyToString);
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString);
            long j = 0;
            if (jSONObject.has("success")) {
                String string;
                JSONObject jSONObject2 = jSONObject.getJSONObject("success");
                CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                if (jSONObject2.has(TaskDataStorage.TIMESTAMP)) {
                    catfishResult.timestamp = jSONObject2.getLong(TaskDataStorage.TIMESTAMP);
                }
                if (jSONObject2.has("objectowner")) {
                    string = jSONObject2.getString("objectowner");
                } else {
                    string = null;
                }
                if (jSONObject2.has(ObjectCommentDataStorage.OBJECTSEQUENCE)) {
                    j = jSONObject2.getLong(ObjectCommentDataStorage.OBJECTSEQUENCE);
                }
                if (jSONObject2.has(ServerMessageDataStorage.SEQUENCE)) {
                    j = jSONObject2.getLong(ServerMessageDataStorage.SEQUENCE);
                }
                if (jSONObject2.has(ServerMessageDataStorage.MESSAGE)) {
                    catfishResult = catfishResult;
                    catfishResult.addMessage(CatfishMessageObject.obtain(null, null, jSONObject2.getString(ServerMessageDataStorage.MESSAGE), MAX_CONN_IDLE_TIME, MAX_CONN_IDLE_TIME, 0, j, string, 0, 0));
                }
                if (jSONObject2.has(FriendListDataStorage.CODE)) {
                    catfishResult.code = jSONObject2.getInt(FriendListDataStorage.CODE);
                }
                if (jSONObject2.has(ServerMessageDataStorage.MESSAGE)) {
                    catfishResult.message = jSONObject2.getString(ServerMessageDataStorage.MESSAGE);
                }
                if (jSONObject2.has(FriendListDataStorage.STATUS)) {
                    catfishResult.status = jSONObject2.getInt(FriendListDataStorage.STATUS);
                }
                if (jSONObject2.has(CFCOMPACT_STORAGENIC)) {
                    catfishResult.userpin = jSONObject2.getString(CFCOMPACT_STORAGENIC);
                }
                return catfishResult;
            } else if (jSONObject.has("friendlistinfo")) {
                JSONObject jSONObject3 = jSONObject.getJSONObject("friendlistinfo");
                CatfishResult catfishResult2 = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                catfishResult2.userpin = jSONObject3.getString(FriendListDataStorage.USERPIN);
                catfishResult2.timestamp = jSONObject3.getLong(TaskDataStorage.TIMESTAMP);
                return catfishResult2;
            } else {
                if (jSONObject.has(Extra.ERROR)) {
                    jSONObject = jSONObject.getJSONObject(Extra.ERROR);
                    if (jSONObject.has(FriendListDataStorage.CODE)) {
                        if (jSONObject.getInt(FriendListDataStorage.CODE) == 65) {
                            return new CatfishResult(ResultStatus.CATFISHRESTAPI_INVALID_TOPIC);
                        }
                        if (jSONObject.getInt(FriendListDataStorage.CODE) == 69) {
                            return new CatfishResult(ResultStatus.CATFISHRESTAPI_INVALID_MEMBER_TOPIC);
                        }
                        if (jSONObject.getInt(FriendListDataStorage.CODE) == 70) {
                            return new CatfishResult(ResultStatus.CATFISHRESTAPI_INVALID_ACTION_TOPIC);
                        }
                    }
                }
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingServerSettingResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            String convertZipResponsebodyToString = convertZipResponsebodyToString(entity.getContent());
            JSONObject jSONObject = new JSONObject(convertZipResponsebodyToString);
            Log.d(TAG, "Settings:\n" + convertZipResponsebodyToString);
            if (entity != null) {
                entity.consumeContent();
            }
            if (!jSONObject.has("success")) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            int i;
            JSONObject jSONObject2;
            String string;
            String valueOf;
            int i2;
            int i3;
            JSONObject jSONObject3 = jSONObject.getJSONObject("success");
            JSONArray jSONArray = jSONObject3.getJSONArray("host");
            CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS, ResultType.MESSAGES);
            int length = jSONArray.length();
            ArrayList arrayList = new ArrayList();
            ArrayList arrayList2 = new ArrayList();
            for (i = MAX_CONN_IDLE_TIME; i < length; i += P2P_STREAM_PHOTO) {
                jSONObject2 = jSONArray.getJSONObject(i);
                string = jSONObject2.has("ip") ? jSONObject2.getString("ip") : null;
                valueOf = jSONObject2.has(ClientCookie.PORT_ATTR) ? String.valueOf(jSONObject2.getInt(ClientCookie.PORT_ATTR)) : null;
                i2 = jSONObject2.has("weight") ? jSONObject2.getInt("weight") : MAX_CONN_IDLE_TIME;
                if (string != null && string.length() > P2P_STREAM_PHOTO && valueOf != null && valueOf.length() > P2P_STREAM_PHOTO) {
                    for (i3 = MAX_CONN_IDLE_TIME; i3 < i2; i3 += P2P_STREAM_PHOTO) {
                        arrayList.add(string);
                        arrayList2.add(valueOf);
                    }
                }
                Log.d(TAG, "Added HOST: " + string + ":Port: " + valueOf);
            }
            catfishResult.hostName = new String[arrayList.size()];
            catfishResult.hostPort = new String[arrayList.size()];
            int size = arrayList.size();
            for (i2 = MAX_CONN_IDLE_TIME; i2 < size; i2 += P2P_STREAM_PHOTO) {
                catfishResult.hostName[i2] = (String) arrayList.get(i2);
                catfishResult.hostPort[i2] = (String) arrayList2.get(i2);
            }
            jSONArray = jSONObject3.getJSONArray("push");
            length = jSONArray.length();
            arrayList.clear();
            arrayList2.clear();
            for (i = MAX_CONN_IDLE_TIME; i < length; i += P2P_STREAM_PHOTO) {
                jSONObject2 = jSONArray.getJSONObject(i);
                string = jSONObject2.has("ip") ? jSONObject2.getString("ip") : null;
                valueOf = jSONObject2.has(ClientCookie.PORT_ATTR) ? String.valueOf(jSONObject2.getInt(ClientCookie.PORT_ATTR)) : null;
                i2 = jSONObject2.has("weight") ? jSONObject2.getInt("weight") : MAX_CONN_IDLE_TIME;
                if (string != null && string.length() > P2P_STREAM_PHOTO && valueOf != null && valueOf.length() > P2P_STREAM_PHOTO) {
                    for (i3 = MAX_CONN_IDLE_TIME; i3 < i2; i3 += P2P_STREAM_PHOTO) {
                        arrayList.add(string);
                        arrayList2.add(valueOf);
                    }
                }
                Log.d(TAG, "Added PUSHHOST: " + string + ":Port: " + valueOf);
            }
            catfishResult.pushName = new String[arrayList.size()];
            catfishResult.pushPort = new int[arrayList.size()];
            size = arrayList.size();
            for (i2 = MAX_CONN_IDLE_TIME; i2 < size; i2 += P2P_STREAM_PHOTO) {
                catfishResult.pushName[i2] = (String) arrayList.get(i2);
                catfishResult.pushPort[i2] = Integer.parseInt((String) arrayList2.get(i2));
            }
            jSONArray = jSONObject3.getJSONArray("stream");
            length = jSONArray.length();
            arrayList.clear();
            arrayList2.clear();
            for (i = MAX_CONN_IDLE_TIME; i < length; i += P2P_STREAM_PHOTO) {
                jSONObject2 = jSONArray.getJSONObject(i);
                string = jSONObject2.has("ip") ? jSONObject2.getString("ip") : null;
                valueOf = jSONObject2.has(ClientCookie.PORT_ATTR) ? String.valueOf(jSONObject2.getInt(ClientCookie.PORT_ATTR)) : null;
                i2 = jSONObject2.has("weight") ? jSONObject2.getInt("weight") : MAX_CONN_IDLE_TIME;
                if (string != null && string.length() > P2P_STREAM_PHOTO && valueOf != null && valueOf.length() > P2P_STREAM_PHOTO) {
                    for (i3 = MAX_CONN_IDLE_TIME; i3 < i2; i3 += P2P_STREAM_PHOTO) {
                        arrayList.add(string);
                        arrayList2.add(valueOf);
                    }
                }
                Log.d(TAG, "Added STREAMING_SERVER: " + string + ":Port: " + valueOf);
            }
            catfishResult.streamHostName = new String[arrayList.size()];
            catfishResult.streamPort = new String[arrayList.size()];
            size = arrayList.size();
            for (i2 = MAX_CONN_IDLE_TIME; i2 < size; i2 += P2P_STREAM_PHOTO) {
                catfishResult.streamHostName[i2] = (String) arrayList.get(i2);
                catfishResult.streamPort[i2] = (String) arrayList2.get(i2);
            }
            JSONArray jSONArray2 = jSONObject3.getJSONArray("registration");
            int length2 = jSONArray2.length();
            arrayList.clear();
            arrayList2.clear();
            for (i = MAX_CONN_IDLE_TIME; i < length2; i += P2P_STREAM_PHOTO) {
                JSONObject jSONObject4 = jSONArray2.getJSONObject(i);
                string = jSONObject4.has("ip") ? jSONObject4.getString("ip") : null;
                valueOf = jSONObject4.has(ClientCookie.PORT_ATTR) ? String.valueOf(jSONObject4.getInt(ClientCookie.PORT_ATTR)) : null;
                i2 = jSONObject4.has("weight") ? jSONObject4.getInt("weight") : MAX_CONN_IDLE_TIME;
                if (string != null && string.length() > P2P_STREAM_PHOTO && valueOf != null && valueOf.length() > P2P_STREAM_PHOTO) {
                    for (i3 = MAX_CONN_IDLE_TIME; i3 < i2; i3 += P2P_STREAM_PHOTO) {
                        arrayList.add(string);
                        arrayList2.add(valueOf);
                    }
                }
                Log.d(TAG, "Added REGISTRATION_SERVER: " + string + ":Port: " + valueOf);
            }
            catfishResult.registrationHostName = new String[arrayList.size()];
            catfishResult.registrationPort = new String[arrayList.size()];
            size = arrayList.size();
            for (i2 = MAX_CONN_IDLE_TIME; i2 < size; i2 += P2P_STREAM_PHOTO) {
                catfishResult.registrationHostName[i2] = (String) arrayList.get(i2);
                catfishResult.registrationPort[i2] = (String) arrayList2.get(i2);
            }
            arrayList.clear();
            arrayList2.clear();
            return catfishResult;
        } catch (Exception e) {
            e.printStackTrace();
            Log.e(TAG, "EXCEPTION:" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingSlinkDataInfoResponse(a aVar, HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            String convertResponsebodyToString = convertResponsebodyToString(entity.getContent());
            if (entity == null || entity.getContentLength() > 0) {
                if (entity != null) {
                    entity.consumeContent();
                }
                String str = new String(aVar.b(convertResponsebodyToString));
                Log.d(TAG, "Data Slink Info" + str);
                JSONObject jSONObject = new JSONObject(str);
                Log.d(TAG, "Datastorage Info Response:" + jSONObject.toString());
                if (!jSONObject.has("info")) {
                    return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
                }
                jSONObject = jSONObject.getJSONObject("info");
                CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                if (jSONObject.has("fname")) {
                    catfishResult.obyek_name = jSONObject.getString("fname");
                }
                if (jSONObject.has("pubid")) {
                    catfishResult.userpin = jSONObject.getString("pubid");
                }
                if (jSONObject.has("pub")) {
                    catfishResult.username = jSONObject.getString("pub");
                }
                if (jSONObject.has("dtsize")) {
                    catfishResult.datasize = jSONObject.getInt("dtsize");
                }
                if (jSONObject.has("size")) {
                    catfishResult.currentdatasize = jSONObject.getInt("size");
                }
                if (jSONObject.has("seq")) {
                    catfishResult.object_sequence = jSONObject.getLong("seq");
                }
                if (jSONObject.has("mtype")) {
                    catfishResult.mime_type = jSONObject.getString("mtype");
                }
                if (jSONObject.has(AlbusModelObject.INTENT_DESC)) {
                    catfishResult.desciption = jSONObject.getString(AlbusModelObject.INTENT_DESC);
                }
                if (jSONObject.has("dttype")) {
                    catfishResult.dataType = jSONObject.getInt("dttype");
                }
                if (jSONObject.has("fl")) {
                    catfishResult.slink = jSONObject.getString("fl");
                }
                Log.d(TAG, "fname:" + catfishResult.obyek_name + ", size:" + catfishResult.datasize);
                return catfishResult;
            }
            entity.consumeContent();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_EMPTY);
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingSlinkDataNameResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            String convertResponsebodyToString = convertResponsebodyToString(entity.getContent());
            Log.d(TAG, "Data slink name " + convertResponsebodyToString);
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString);
            if (entity != null) {
                entity.consumeContent();
            }
            if (jSONObject.has("success")) {
                JSONObject jSONObject2 = jSONObject.getJSONObject("success");
                CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                catfishResult.dataType = jSONObject2.getInt(FizzlinkDataStorage.DATATYPE);
                catfishResult.obyek_name = jSONObject2.getString(CFCOMPACT_STORAGEDATANAME);
                catfishResult.desciption = jSONObject2.getString(FizzlinkDataStorage.DESCRIPTION);
                return catfishResult;
            }
            if (jSONObject.has(Extra.ERROR)) {
                JSONObject jSONObject3 = jSONObject.getJSONObject(Extra.ERROR);
                if (jSONObject3.has(FriendListDataStorage.CODE) && jSONObject3.getInt(FriendListDataStorage.CODE) == PROTO_ERROR_NOTFOUND) {
                    return new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND);
                }
            }
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        } catch (Exception e) {
            Log.e(TAG, "exception on parsing dsname: " + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingStickerResponse(HttpResponse httpResponse) {
        int i = MAX_CONN_IDLE_TIME;
        try {
            HttpEntity entity = httpResponse.getEntity();
            String convertResponsebodyToString = convertResponsebodyToString(entity.getContent());
            if (entity != null) {
                entity.consumeContent();
            }
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString);
            if (jSONObject.has("success")) {
                JSONObject jSONObject2 = jSONObject.getJSONObject("success");
                CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                catfishResult.stickerObject = StickerMessageObject.obtain();
                if (jSONObject2.has(CFCOMPACT_STICKERCOUNT)) {
                    catfishResult.stickerObject.stickerCount = jSONObject2.getInt(CFCOMPACT_STICKERCOUNT);
                }
                if (jSONObject2.has("stickerdesc")) {
                    catfishResult.stickerObject.stickerDescription = jSONObject2.getString("stickerdesc");
                }
                if (jSONObject2.has(CFCOMPACT_STICKERID)) {
                    catfishResult.stickerObject.stickerId = jSONObject2.getString(CFCOMPACT_STICKERID);
                }
                if (jSONObject2.has(StickerDataStorage.STICKERNAME)) {
                    catfishResult.stickerObject.stickerName = jSONObject2.getString(StickerDataStorage.STICKERNAME);
                }
                if (jSONObject2.has(CFCOMPACT_STICKERPACKAGEDESC)) {
                    catfishResult.stickerObject.stickerPackageDescription = jSONObject2.getString(CFCOMPACT_STICKERPACKAGEDESC);
                }
                if (jSONObject2.has(CFCOMPACT_STICKERPACKAGEID)) {
                    catfishResult.stickerObject.stickerPackageId = jSONObject2.getString(CFCOMPACT_STICKERPACKAGEID);
                }
                if (jSONObject2.has(CFCOMPACT_STICKERPACKAGENAME)) {
                    catfishResult.stickerObject.stickerPackageName = jSONObject2.getString(CFCOMPACT_STICKERPACKAGENAME);
                }
                if (jSONObject2.has(CFCOMPACT_STICKERPACKAGEPRICE)) {
                    catfishResult.stickerObject.stickerPackagePrice = jSONObject2.getInt(CFCOMPACT_STICKERPACKAGEPRICE);
                }
                if (jSONObject2.has(CFCOMPACT_STICKERPACKAGEPUBLISHER)) {
                    catfishResult.stickerObject.stickerPackagePublisher = jSONObject2.getString(CFCOMPACT_STICKERPACKAGEPUBLISHER);
                }
                if (jSONObject2.has(CFCOMPACT_STICKERPACKAGETYPE)) {
                    catfishResult.stickerObject.stickerPackageType = jSONObject2.getInt(CFCOMPACT_STICKERPACKAGETYPE);
                }
                if (jSONObject2.has(CFCOMPACT_STICKERFORMATTYPE)) {
                    catfishResult.stickerObject.stickerFormatType = jSONObject2.getInt(CFCOMPACT_STICKERFORMATTYPE);
                }
                if (jSONObject2.has(CFCOMPACT_STICKERFRAMECOUNT)) {
                    catfishResult.stickerObject.stickerFrameCount = jSONObject2.getInt(CFCOMPACT_STICKERFRAMECOUNT);
                }
                if (jSONObject2.has(CFCOMPACT_STICKERFRAMEDURATION)) {
                    JSONArray jSONArray = jSONObject2.getJSONArray(CFCOMPACT_STICKERFRAMEDURATION);
                    catfishResult.stickerObject.stickerFrameDurationArrayStr = jSONArray.toString();
                    catfishResult.stickerObject.stickerFrameDuration = new int[jSONArray.length()];
                    for (int i2 = MAX_CONN_IDLE_TIME; i2 < jSONArray.length(); i2 += P2P_STREAM_PHOTO) {
                        catfishResult.stickerObject.stickerFrameDuration[i2] = jSONArray.getInt(i2);
                    }
                }
                if (jSONObject2.has(CFCOMPACT_STICKERTYPE)) {
                    catfishResult.stickerObject.stickerType = jSONObject2.getInt(CFCOMPACT_STICKERTYPE);
                }
                if (jSONObject2.has(CFCOMPACT_STICKERPACKAGEICONID)) {
                    catfishResult.stickerObject.stickerPackageIconId = jSONObject2.getString(CFCOMPACT_STICKERPACKAGEICONID);
                }
                if (jSONObject2.has("size")) {
                    catfishResult.datasize = jSONObject2.getInt("size");
                }
                if (jSONObject2.has(TaskDataStorage.TIMESTAMP)) {
                    catfishResult.stickerObject.timestamp = jSONObject2.getLong(TaskDataStorage.TIMESTAMP);
                }
                if (!jSONObject2.has(CFCOMPACT_STICKERIDS)) {
                    return catfishResult;
                }
                JSONArray jSONArray2 = jSONObject2.getJSONArray(CFCOMPACT_STICKERIDS);
                catfishResult.stickerObject.stickerIds = new String[jSONArray2.length()];
                catfishResult.stickerObject.stickerObjects = new StickerMessageObject[jSONArray2.length()];
                while (i < jSONArray2.length()) {
                    jSONObject2 = jSONArray2.getJSONObject(i);
                    catfishResult.stickerObject.stickerIds[i] = jSONObject2.getString(CFCOMPACT_STICKERID);
                    catfishResult.stickerObject.stickerObjects[i] = StickerMessageObject.obtain();
                    catfishResult.stickerObject.stickerObjects[i].stickerId = jSONObject2.getString(CFCOMPACT_STICKERID);
                    catfishResult.stickerObject.stickerObjects[i].stickerType = jSONObject2.getInt(CFCOMPACT_STICKERTYPE);
                    catfishResult.stickerObject.stickerObjects[i].stickerFormatType = jSONObject2.getInt(CFCOMPACT_STICKERFORMATTYPE);
                    catfishResult.stickerObject.stickerObjects[i].stickerFrameCount = jSONObject2.getInt(CFCOMPACT_STICKERFRAMECOUNT);
                    catfishResult.stickerObject.stickerObjects[i].stickerPackageId = catfishResult.stickerObject.stickerPackageId;
                    catfishResult.stickerObject.stickerObjects[i].timestamp = catfishResult.stickerObject.timestamp;
                    i += P2P_STREAM_PHOTO;
                }
                return catfishResult;
            } else if (jSONObject.has("notfound")) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND);
            } else {
                if (jSONObject.has(Extra.ERROR)) {
                    jSONObject = jSONObject.getJSONObject(Extra.ERROR);
                    if (!jSONObject.has(FriendListDataStorage.CODE)) {
                        return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
                    }
                    if (jSONObject.getInt(FriendListDataStorage.CODE) == PROTO_ERROR_NOTFOUND) {
                        return new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND);
                    }
                }
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingSvgItemResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString(entity.getContent()));
            if (entity != null) {
                entity.consumeContent();
            }
            if (!jSONObject.has("success")) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            JSONObject jSONObject2 = jSONObject.getJSONObject("success");
            CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS, ResultType.MESSAGES);
            JSONArray jSONArray = jSONObject2.getJSONArray("items");
            int length = jSONArray.length();
            ArrayList arrayList = new ArrayList();
            ArrayList arrayList2 = new ArrayList();
            ArrayList arrayList3 = new ArrayList();
            for (int i = MAX_CONN_IDLE_TIME; i < length; i += P2P_STREAM_PHOTO) {
                JSONObject jSONObject3 = jSONArray.getJSONObject(i);
                Object string = jSONObject3.has(FriendListDataStorage.FILENAME) ? jSONObject3.getString(FriendListDataStorage.FILENAME) : null;
                Object string2 = jSONObject3.has("file") ? jSONObject3.getString("file") : null;
                Object string3 = jSONObject3.has(FriendListDataStorage.CODE) ? jSONObject3.getString(FriendListDataStorage.CODE) : null;
                arrayList.add(string);
                arrayList2.add(string2);
                arrayList3.add(string3);
            }
            catfishResult.name = arrayList;
            catfishResult.preview = arrayList2;
            catfishResult.packageList = arrayList3;
            return catfishResult;
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingSvgListResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString(entity.getContent()));
            if (entity != null) {
                entity.consumeContent();
            }
            if (!jSONObject.has("success")) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            JSONObject jSONObject2 = jSONObject.getJSONObject("success");
            CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS, ResultType.MESSAGES);
            JSONArray jSONArray = jSONObject2.getJSONArray("list");
            int length = jSONArray.length();
            ArrayList arrayList = new ArrayList();
            ArrayList arrayList2 = new ArrayList();
            ArrayList arrayList3 = new ArrayList();
            ArrayList arrayList4 = new ArrayList();
            ArrayList arrayList5 = new ArrayList();
            for (int i = MAX_CONN_IDLE_TIME; i < length; i += P2P_STREAM_PHOTO) {
                JSONObject jSONObject3 = jSONArray.getJSONObject(i);
                Object string = jSONObject3.has(CatfishDataStorage.NIC_NAME) ? jSONObject3.getString(CatfishDataStorage.NIC_NAME) : null;
                Object string2 = jSONObject3.has("preview") ? jSONObject3.getString("preview") : null;
                Object string3 = jSONObject3.has("package") ? jSONObject3.getString("package") : null;
                Object string4 = jSONObject3.has("packagename") ? jSONObject3.getString("packagename") : null;
                Object string5 = jSONObject3.has("ver") ? jSONObject3.getString("ver") : null;
                arrayList.add(string);
                arrayList2.add(string2);
                arrayList3.add(string3);
                arrayList4.add(string4);
                arrayList5.add(string5);
            }
            catfishResult.name = arrayList;
            catfishResult.preview = arrayList2;
            catfishResult.packageList = arrayList3;
            catfishResult.PackageNames = arrayList4;
            catfishResult.versionCode = arrayList5;
            return catfishResult;
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingSvgPreviewResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString(entity.getContent()));
            if (entity != null) {
                entity.consumeContent();
            }
            if (!jSONObject.has("success")) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            JSONObject jSONObject2 = jSONObject.getJSONObject("success");
            CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS, ResultType.MESSAGES);
            if (!jSONObject2.has("size")) {
                return catfishResult;
            }
            catfishResult.datasize = jSONObject2.getInt("size");
            return catfishResult;
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingUpdateVersionRepoInfoResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            String convertZipResponsebodyToString = convertZipResponsebodyToString(entity.getContent());
            if (entity != null) {
                entity.consumeContent();
            }
            if (convertZipResponsebodyToString == null) {
                Log.d(TAG, "NO UPDATE VERSION REPO INFO AVAILABLE: NO CONTENT");
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            } else if (convertZipResponsebodyToString.length() <= 0) {
                Log.d(TAG, "NO UPDATE VERSION REPO INFO AVAILABLE: NULL LENGTH CONTENT");
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            } else {
                Log.d(TAG, "REPO Info Messages:" + convertZipResponsebodyToString);
                JSONObject jSONObject = new JSONObject(convertZipResponsebodyToString);
                if (jSONObject.has("obsolete")) {
                    CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                    if (jSONObject.has("obsolete")) {
                        catfishResult.obsolete = jSONObject.getString("obsolete");
                    }
                    if (jSONObject.has("content_ver")) {
                        catfishResult.content_ver = jSONObject.getInt("content_ver");
                    }
                    if (jSONObject.has("revision")) {
                        catfishResult.revision = jSONObject.getInt("revision");
                    }
                    if (jSONObject.has(ClientCookie.VERSION_ATTR)) {
                        catfishResult.version = jSONObject.getString(ClientCookie.VERSION_ATTR);
                    }
                    if (jSONObject.has("versioncode")) {
                        catfishResult.version_code = jSONObject.getString("versioncode");
                    }
                    if (jSONObject.has("releasecode")) {
                        catfishResult.release_code = jSONObject.getString("releasecode");
                    }
                    if (jSONObject.has(FizzlinkDataStorage.DESCRIPTION)) {
                        catfishResult.desciption = jSONObject.getString(FizzlinkDataStorage.DESCRIPTION);
                    }
                    if (!jSONObject.has("contributors")) {
                        return catfishResult;
                    }
                    JSONArray jSONArray = jSONObject.getJSONArray("contributors");
                    int length = jSONArray.length();
                    StringBuilder stringBuilder = new StringBuilder();
                    for (int i = MAX_CONN_IDLE_TIME; i < length; i += P2P_STREAM_PHOTO) {
                        JSONObject jSONObject2 = jSONArray.getJSONObject(i);
                        stringBuilder.append(jSONObject2.getString(CatfishDataStorage.NIC_NAME));
                        stringBuilder.append(" as ");
                        stringBuilder.append(jSONObject2.getString("contribution"));
                        stringBuilder.append("\n");
                    }
                    catfishResult.contributors = stringBuilder.toString();
                    return catfishResult;
                } else if (jSONObject.has("notfound")) {
                    return new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND);
                } else {
                    if (jSONObject.has(Extra.ERROR)) {
                        JSONObject jSONObject3 = jSONObject.getJSONObject(Extra.ERROR);
                        if (!jSONObject3.has(FriendListDataStorage.CODE)) {
                            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
                        }
                        if (jSONObject3.getInt(FriendListDataStorage.CODE) == PROTO_ERROR_NOTFOUND) {
                            return new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND);
                        }
                    }
                    return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
                }
            }
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    private CatfishResult parsingUserActivityResponse(HttpResponse httpResponse) {
        try {
            HttpEntity entity = httpResponse.getEntity();
            String convertResponsebodyToString = convertResponsebodyToString(entity.getContent());
            if (entity != null) {
                entity.consumeContent();
            }
            Log.e(TAG, "Messages USERACTIVITY:" + convertResponsebodyToString);
            JSONObject jSONObject = new JSONObject(convertResponsebodyToString);
            if (jSONObject.has("success")) {
                JSONObject jSONObject2 = jSONObject.getJSONObject("success");
                CatfishResult catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                catfishResult.userpin = jSONObject2.getString(FriendListDataStorage.USERPIN);
                if (jSONObject2.has(TaskDataStorage.TIMESTAMP)) {
                    catfishResult.timestamp = jSONObject2.getLong("ts");
                } else {
                    catfishResult.timestamp = 0;
                }
                if (jSONObject2.has(CFCOMPACT_STORAGEDATA)) {
                    catfishResult.data_json = jSONObject2.getString(CFCOMPACT_STORAGEDATA);
                    return catfishResult;
                }
                catfishResult.data_json = " ";
                return catfishResult;
            } else if (jSONObject.has("notfound")) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND);
            } else {
                if (!jSONObject.has(Extra.ERROR)) {
                    return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
                }
                jSONObject = jSONObject.getJSONObject(Extra.ERROR);
                return jSONObject.has(FriendListDataStorage.CODE) ? jSONObject.getInt(FriendListDataStorage.CODE) == PROTO_ERROR_NOTFOUND ? new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND) : new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR) : new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
        } catch (Exception e) {
            Log.e(TAG, "ERROR SAAT PASRING KAH?" + e.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    public static long uniqueMonotonicSequence() {
        long currentTimeMillis = System.currentTimeMillis();
        synchronized (mWaitingLock) {
            while (currentTimeMillis == unique_monotonic_sequence) {
                try {
                    mWaitingLock.wait(1);
                } catch (InterruptedException e) {
                }
                currentTimeMillis = System.currentTimeMillis();
            }
            unique_monotonic_sequence = currentTimeMillis;
        }
        return unique_monotonic_sequence;
    }

    public CatfishResult acceptFriend(String str, String str2, String str3, long j) {
        URI newServerURI = newServerURI(str + CATFISHREQ_REQUESTPROFILE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_RECIPIENT, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGETYPE, String.valueOf(MessageType.ACCEPTFRD.ordinal())));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_SEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        try {
            arrayList.add(new BasicNameValuePair("sec", calcHmac(str2 + str3 + String.valueOf(MessageType.ACCEPTFRD.ordinal()) + String.valueOf(j))));
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
        }
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult activateCatfizUser(String str, String str2, String str3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_ACTIVATE_USER + "?email=" + str2 + "&orgid=" + ORGANIZATION_ID_CATFIZ + "&code=" + str3 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult activateUserEmail(String str, String str2, String str3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_ACTIVATE_USER + "?email=" + str2 + "&orgid=" + ORGANIZATION_ID_CATFIZ + "&code=" + str3 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(changeToNonSecureServerUriWithSamePort(newServerURI));
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public String calcHmac(String str) {
        String str2 = "e39beb25d4956d988349efa4ae74ac6ca7f2161a";
        Key secretKeySpec = new SecretKeySpec("e39beb25d4956d988349efa4ae74ac6ca7f2161a".getBytes(), "HmacSHA1");
        Mac instance = Mac.getInstance("HmacSHA1");
        instance.init(secretKeySpec);
        byte[] doFinal = instance.doFinal(str.getBytes());
        StringBuffer stringBuffer = new StringBuffer();
        int length = doFinal.length;
        for (int i = MAX_CONN_IDLE_TIME; i < length; i += P2P_STREAM_PHOTO) {
            int i2 = doFinal[i] & MotionEventCompat.ACTION_MASK;
            if (i2 <= 15) {
                stringBuffer.append("0");
            }
            stringBuffer.append(Integer.toHexString(i2));
        }
        return stringBuffer.toString();
    }

    protected URI changeToNonSecureServerUri(URI uri) {
        URI uri2;
        URISyntaxException e;
        try {
            uri2 = new URI("http://" + uri.getHost() + ":8001" + uri.getPath() + "?" + uri.getQuery());
            try {
                Log.d(TAG, " changeToNonSecureServerUri = " + uri2.toString());
            } catch (URISyntaxException e2) {
                e = e2;
                e.printStackTrace();
                return uri2;
            }
        } catch (URISyntaxException e3) {
            URISyntaxException uRISyntaxException = e3;
            uri2 = null;
            e = uRISyntaxException;
            e.printStackTrace();
            return uri2;
        }
        return uri2;
    }

    protected URI changeToNonSecureServerUriWithSamePort(URI uri) {
        URI uri2;
        URISyntaxException e;
        try {
            uri2 = new URI("http://" + uri.getHost() + ":" + uri.getPort() + uri.getPath() + "?" + uri.getQuery());
            try {
                Log.d(TAG, " changeToNonSecureServerUri = " + uri2.toString());
            } catch (URISyntaxException e2) {
                e = e2;
                e.printStackTrace();
                return uri2;
            }
        } catch (URISyntaxException e3) {
            URISyntaxException uRISyntaxException = e3;
            uri2 = null;
            e = uRISyntaxException;
            e.printStackTrace();
            return uri2;
        }
        return uri2;
    }

    public CatfishResult changeUserKey(String str, String str2, String str3, String str4) {
        URI newServerURI = newServerURI(str + CATFISHREQ_PINMAN_CHANGEUSERKEY + "?longpin=" + str2 + "&olduserkey=" + str3 + "&newuserkey=" + str4 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingPinManagerResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult checkDeviceMessage(String str, String str2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_CHECK_DEVICE_MESSAGE + "?deviceid=" + str2 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingPinManagerResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult conferenceCreate(String str, String str2, String str3, String str4, String str5, long j, String str6) {
        URI newServerURI = newServerURI(str + CATFISHREQ_CONFERENCE_CREATE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CatfishService.USERNAME_PREF, str3));
        arrayList.add(new BasicNameValuePair("recipients", str4));
        arrayList.add(new BasicNameValuePair(PoolDataStorage.TITLE, str5));
        arrayList.add(new BasicNameValuePair(ObjectCommentDataStorage.OBJECTSEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(ServerMessageDataStorage.MESSAGE, str6));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult conferenceDeleteMember(String str, String str2, String str3, long j, String str4) {
        URI newServerURI = newServerURI(str + CATFISHREQ_CONFERENCE_DELETEMEMBER);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair("publisherpin", str3));
        arrayList.add(new BasicNameValuePair(ObjectCommentDataStorage.OBJECTSEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair("delpin", str4));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult conferenceDrop(String str, String str2, String str3, long j) {
        URI newServerURI = newServerURI(str + CATFISHREQ_CONFERENCE_DROP);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair("publisherpin", str3));
        arrayList.add(new BasicNameValuePair(ObjectCommentDataStorage.OBJECTSEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult conferenceGetMemberList(String str, String str2, String str3, long j, int i) {
        URI newServerURI = newServerURI(str + CATFISHREQ_CONFERENCE_GETMEMBERLISTDETAIL + "?userpin=" + str2 + "&publisherpin=" + str3 + "&objsequence=" + String.valueOf(j) + "&blocknum=" + String.valueOf(i) + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingGetMemberListResponse(execute);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
    }

    public CatfishResult conferenceGetMessages(String str, String str2, String str3, long j, long j2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_CONFERENCE_GETMESSAGES + "?userpin=" + str2 + "&publisherpin=" + str3 + "&objsequence=" + String.valueOf(j) + "&rdcounter=" + String.valueOf(j2) + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingGetMessagesResponse(execute, false);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
    }

    public CatfishResult conferenceGetMessagesWithZlib(String str, String str2, String str3, long j, long j2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_CONFERENCE_GETMESSAGESZ + "?userpin=" + str2 + "&publisherpin=" + str3 + "&objsequence=" + String.valueOf(j) + "&rdcounter=" + String.valueOf(j2) + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return (execute.containsHeader(HTTP.CONTENT_ENCODING) && execute.getFirstHeader(HTTP.CONTENT_ENCODING).getValue().compareTo("catfishstream") == 0) ? parsingGetMessagesResponse(execute, true) : parsingGetMessagesResponse(execute, false);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
    }

    public CatfishResult conferenceGetTopicMessage(String str, String str2, String str3, long j) {
        URI newServerURI = newServerURI(str + CATFISHREQ_CONFERENCE_GETTOPICMESSAGE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair("publisherpin", str3));
        arrayList.add(new BasicNameValuePair(ObjectCommentDataStorage.OBJECTSEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult conferenceInvite(String str, String str2, String str3, String str4, long j) {
        URI newServerURI = newServerURI(str + CATFISHREQ_CONFERENCE_INVITE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair("pintoinvite", str3));
        arrayList.add(new BasicNameValuePair("publisherpin", str4));
        arrayList.add(new BasicNameValuePair(ObjectCommentDataStorage.OBJECTSEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult conferenceLeave(String str, String str2, String str3, long j) {
        URI newServerURI = newServerURI(str + CATFISHREQ_CONFERENCE_LEAVE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair("publisherpin", str3));
        arrayList.add(new BasicNameValuePair(ObjectCommentDataStorage.OBJECTSEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult conferenceSendData(String str, String str2, String str3, String str4, long j, int i, String str5, long j2, long j3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_CONFERENCE_SENDMESSAGE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CatfishService.USERNAME_PREF, str3));
        arrayList.add(new BasicNameValuePair("publisherpin", str4));
        arrayList.add(new BasicNameValuePair(ObjectCommentDataStorage.OBJECTSEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(TaskDataStorage.MESSAGETYPE, String.valueOf(i)));
        arrayList.add(new BasicNameValuePair(ServerMessageDataStorage.MESSAGE, str5));
        arrayList.add(new BasicNameValuePair("msgsequence", String.valueOf(j2)));
        arrayList.add(new BasicNameValuePair("dataseq", String.valueOf(j3)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult conferenceSendMessage(String str, String str2, String str3, String str4, long j, int i, String str5, long j2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_CONFERENCE_SENDMESSAGE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CatfishService.USERNAME_PREF, str3));
        arrayList.add(new BasicNameValuePair("publisherpin", str4));
        arrayList.add(new BasicNameValuePair(ObjectCommentDataStorage.OBJECTSEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(TaskDataStorage.MESSAGETYPE, String.valueOf(i)));
        arrayList.add(new BasicNameValuePair(ServerMessageDataStorage.MESSAGE, str5));
        arrayList.add(new BasicNameValuePair("msgsequence", String.valueOf(j2)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult createGroupPrivilege(String str, String str2, int i) {
        URI newServerURI = newServerURI(str + CATFISHREQ_PRIV_CREATE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair("pubid", str2.split(":")[MAX_CONN_IDLE_TIME]));
        arrayList.add(new BasicNameValuePair("objseq", str2.split(":")[P2P_STREAM_PHOTO]));
        arrayList.add(new BasicNameValuePair("grouptype", String.valueOf(i)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, "1"));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult deleteFriend(String str, String str2, String str3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_REQUESTPROFILE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_RECIPIENT, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGETYPE, String.valueOf(MessageType.DELETEFRD.ordinal())));
        long uniqueMonotonicSequence = uniqueMonotonicSequence();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_SEQUENCE, String.valueOf(uniqueMonotonicSequence)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        try {
            arrayList.add(new BasicNameValuePair("sec", calcHmac(str2 + str3 + String.valueOf(MessageType.DELETEFRD.ordinal()) + String.valueOf(uniqueMonotonicSequence))));
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
        }
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult deleteGroupPrivilege(String str, String str2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_PRIV_DEL_ALL);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair("pubid", str2.split(":")[MAX_CONN_IDLE_TIME]));
        arrayList.add(new BasicNameValuePair("objseq", str2.split(":")[P2P_STREAM_PHOTO]));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, "1"));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult deleteMemberGroupPrivilege(String str, String str2, String str3, String str4) {
        URI newServerURI = newServerURI(str + CATFISHREQ_PRIV_SET_UID);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair("pubid", str2.split(":")[MAX_CONN_IDLE_TIME]));
        arrayList.add(new BasicNameValuePair("objseq", str2.split(":")[P2P_STREAM_PHOTO]));
        arrayList.add(new BasicNameValuePair("executorid", str3));
        arrayList.add(new BasicNameValuePair("userid", str4));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, "1"));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult deletePendingFriend(String str, String str2, String str3, long j) {
        URI newServerURI = newServerURI(str + CATFISHREQ_REQUESTPROFILE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_RECIPIENT, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGETYPE, String.valueOf(MessageType.DELETE_FRIEND_PENDING.ordinal())));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_SEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        try {
            arrayList.add(new BasicNameValuePair("sec", calcHmac(str2 + str3 + String.valueOf(MessageType.ACCEPTFRD.ordinal()) + String.valueOf(j))));
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
        }
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult deleteProfilePhoto(String str, String str2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_PHOTODELETE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executeOnewayPOST(newServerURI, arrayList);
    }

    public CatfishResult deviceCheck(String str, String str2, String str3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_DEVICECHECK + "?imei=" + str2 + "&orgid=" + str3);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingDeviceCheckResponse(execute);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
    }

    public CatfishResult downloadAdvChunk(String str, String str2, int i, int i2, FileOutputStream fileOutputStream) {
        Object arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_BYTESTART, String.valueOf(i)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_BYTEEND, String.valueOf(i2)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        URLEncodedUtils uRLEncodedUtils = new URLEncodedUtils();
        URI newServerURI = newServerURI(str + CATFISHREQ_DLOADDATACHUNK + ("?" + URLEncodedUtils.format(arrayList, HTTP.ISO_8859_1)));
        return newServerURI == null ? new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR) : executeDownloadGET(newServerURI, arrayList, fileOutputStream, false);
    }

    public Bitmap downloadBitmap(String str) {
        InputStream content;
        Throwable th;
        DefaultHttpClient defaultHttpClient = new DefaultHttpClient();
        Object httpGet = new HttpGet(str);
        try {
            HttpResponse execute = defaultHttpClient.execute(httpGet);
            int statusCode = execute.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                Log.w("ImageDownloader", "Error " + statusCode + " while retrieving bitmap from " + str);
                return null;
            }
            HttpEntity entity = execute.getEntity();
            if (entity == null) {
                return null;
            }
            try {
                content = entity.getContent();
                try {
                    Bitmap decodeStream = BitmapFactory.decodeStream(content);
                    if (content != null) {
                        content.close();
                    }
                    entity.consumeContent();
                    return decodeStream;
                } catch (Throwable th2) {
                    th = th2;
                    if (content != null) {
                        content.close();
                    }
                    entity.consumeContent();
                    throw th;
                }
            } catch (Throwable th3) {
                th = th3;
                content = null;
                if (content != null) {
                    content.close();
                }
                entity.consumeContent();
                throw th;
            }
        } catch (Exception e) {
            httpGet.abort();
            Log.e("ImageDownloader", "Something went wrong while retrieving bitmap from " + str + e.toString());
            return null;
        }
    }

    public CatfishResult downloadDataChunk(String str, String str2, String str3, long j, int i, int i2, FileOutputStream fileOutputStream) {
        Object arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_FRIENDPIN, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_OBJECTSEQ, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_BYTESTART, String.valueOf(i)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_BYTEEND, String.valueOf(i2)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        URLEncodedUtils uRLEncodedUtils = new URLEncodedUtils();
        URI newServerURI = newServerURI(str + CATFISHREQ_DLOADDATACHUNK + ("?" + URLEncodedUtils.format(arrayList, HTTP.ISO_8859_1)));
        return newServerURI == null ? new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR) : executeDownloadGET(newServerURI, arrayList, fileOutputStream, false);
    }

    public CatfishResult downloadDataChunkWithoutSave(String str, String str2, int i, int i2, ByteArrayOutputStream byteArrayOutputStream) {
        Object arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair("rpk", str2));
        arrayList.add(new BasicNameValuePair("bs", String.valueOf(i)));
        arrayList.add(new BasicNameValuePair("be", String.valueOf(i2)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        URLEncodedUtils uRLEncodedUtils = new URLEncodedUtils();
        URI newServerURI = newServerURI(str + CATFISHREQ_GET_REPO + ("?" + URLEncodedUtils.format(arrayList, HTTP.ISO_8859_1)));
        return newServerURI == null ? new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR) : executeDownloadGETByte(newServerURI, arrayList, byteArrayOutputStream);
    }

    public CatfishResult downloadProfilePhotoChunk(String str, String str2, String str3, int i, int i2, FileOutputStream fileOutputStream) {
        Object arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_FRIENDPIN, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_BYTESTART, String.valueOf(i)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_BYTEEND, String.valueOf(i2)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        URLEncodedUtils uRLEncodedUtils = new URLEncodedUtils();
        URI newServerURI = newServerURI(str + CATFISHREQ_GETUSERPHOTO + ("?" + URLEncodedUtils.format(arrayList, HTTP.ISO_8859_1)));
        return newServerURI == null ? new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR) : executeDownloadGET(newServerURI, arrayList, fileOutputStream, false);
    }

    public CatfishResult downloadRepoChunk(String str, String str2, long j, long j2, FileOutputStream fileOutputStream) {
        Object arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair("rpk", str2));
        arrayList.add(new BasicNameValuePair("bs", String.valueOf(j)));
        arrayList.add(new BasicNameValuePair("be", String.valueOf(j2)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        URLEncodedUtils uRLEncodedUtils = new URLEncodedUtils();
        URI newServerURI = newServerURI(str + CATFISHREQ_GET_REPO + ("?" + URLEncodedUtils.format(arrayList, HTTP.ISO_8859_1)));
        return newServerURI == null ? new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR) : executeDownloadGET(newServerURI, arrayList, fileOutputStream, false);
    }

    public CatfishResult downloadSLinkDataChunk(String str, String str2, String str3, int i, int i2, FileOutputStream fileOutputStream) {
        Object arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_SLINK, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_BYTESTART, String.valueOf(i)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_BYTEEND, String.valueOf(i2)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        URLEncodedUtils uRLEncodedUtils = new URLEncodedUtils();
        URI newServerURI = newServerURI(str + CATFISHREQ_SLINK_DATA + ("?" + URLEncodedUtils.format(arrayList, HTTP.ISO_8859_1)));
        return newServerURI == null ? new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR) : executeDownloadGET(newServerURI, arrayList, fileOutputStream, false);
    }

    public CatfishResult downloadStickerChunk(String str, String str2, long j, long j2) {
        Object arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERID, str2));
        arrayList.add(new BasicNameValuePair("bs", String.valueOf(j)));
        arrayList.add(new BasicNameValuePair("be", String.valueOf(j2)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        URLEncodedUtils uRLEncodedUtils = new URLEncodedUtils();
        URI newServerURI = newServerURI(str + CATFISHREQ_STICKER + ("?" + URLEncodedUtils.format(arrayList, HTTP.ISO_8859_1)));
        return newServerURI == null ? new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR) : executeDownloadGET(newServerURI, arrayList, str2);
    }

    public CatfishResult downloadStickerPackageChunk(String str, String str2, long j, long j2, FileOutputStream fileOutputStream) {
        Object arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEID, str2));
        arrayList.add(new BasicNameValuePair("bs", String.valueOf(j)));
        arrayList.add(new BasicNameValuePair("be", String.valueOf(j2)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        URLEncodedUtils uRLEncodedUtils = new URLEncodedUtils();
        URI newServerURI = newServerURI(str + CATFISHREQ_STICKERPACKAGE + ("?" + URLEncodedUtils.format(arrayList, HTTP.ISO_8859_1)));
        return newServerURI == null ? new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR) : executeDownloadGET(newServerURI, arrayList, fileOutputStream, false);
    }

    public CatfishResult executeDownloadGET(URI uri, ArrayList arrayList, FileOutputStream fileOutputStream, boolean z) {
        CatfishResult catfishResult;
        Object obj = null;
        try {
            DefaultHttpClient newClientConn;
            UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(arrayList);
            if (z) {
                newClientConn = newClientConn();
            } else {
                uri = changeToNonSecureServerUri(uri);
                newClientConn = newNonSecureClientConn();
            }
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(uri);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            HttpEntity entity = execute.getEntity();
            Log.d(TAG, "HSC: " + String.valueOf(execute.getStatusLine().getStatusCode()));
            Header firstHeader = execute.getFirstHeader("X-CatfishProtocol");
            if (!(firstHeader == null || firstHeader.getValue() == null || firstHeader.getValue().compareTo("p2pwaitblock") != 0)) {
                obj = P2P_STREAM_PHOTO;
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                if (execute.getEntity().getContentLength() > 0) {
                    catfishResult = obj != null ? new CatfishResult(ResultStatus.CATFISHRESTAPI_P2P_WAITBLOCK) : new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                    byte[] bArr = new byte[MIN_CHUNKSIZE_TO_FALL];
                    DataInputStream dataInputStream = new DataInputStream(execute.getEntity().getContent());
                    try {
                        catfishResult.chunksize = MAX_CONN_IDLE_TIME;
                        while (true) {
                            int read = dataInputStream.read(bArr, MAX_CONN_IDLE_TIME, MIN_CHUNKSIZE_TO_FALL);
                            if (read > 0) {
                                try {
                                    fileOutputStream.write(bArr, MAX_CONN_IDLE_TIME, read);
                                    catfishResult.chunksize = read + catfishResult.chunksize;
                                } catch (Exception e) {
                                    catfishResult.setStatus(ResultStatus.CATFISHRESTAPI_SOMEERROR);
                                    try {
                                        dataInputStream.close();
                                        if (entity != null) {
                                            entity.consumeContent();
                                        }
                                    } catch (Exception e2) {
                                    }
                                    try {
                                        dataInputStream.close();
                                        if (entity == null) {
                                            return catfishResult;
                                        }
                                        entity.consumeContent();
                                        return catfishResult;
                                    } catch (IOException e3) {
                                        e3.printStackTrace();
                                        return catfishResult;
                                    }
                                }
                            }
                            try {
                                break;
                            } catch (IOException e32) {
                                e32.printStackTrace();
                                return catfishResult;
                            }
                        }
                        dataInputStream.close();
                        if (entity == null) {
                            return catfishResult;
                        }
                        entity.consumeContent();
                        return catfishResult;
                    } catch (IOException e322) {
                        Log.e(TAG, "Error: " + e322.toString());
                        shutdownConnectionManager();
                        catfishResult.setStatus(ResultStatus.CATFISHRESTAPI_FAILURE);
                        try {
                            dataInputStream.close();
                            if (entity == null) {
                                return catfishResult;
                            }
                            entity.consumeContent();
                            return catfishResult;
                        } catch (IOException e3222) {
                            e3222.printStackTrace();
                            return catfishResult;
                        }
                    } catch (Throwable th) {
                        try {
                            dataInputStream.close();
                            if (entity != null) {
                                entity.consumeContent();
                            }
                        } catch (IOException e32222) {
                            e32222.printStackTrace();
                        }
                    }
                } else if (obj != null) {
                    Log.d(TAG, "Download: NULL Content Length (WAIT BLOCK): WAIT !!!");
                    if (entity != null) {
                        entity.consumeContent();
                    }
                    return new CatfishResult(ResultStatus.CATFISHRESTAPI_P2P_WAITBLOCK);
                } else {
                    Log.d(TAG, "Download: NULL Content Length !!!: TRY TO RESCHEDULE");
                    if (entity != null) {
                        entity.consumeContent();
                    }
                    catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
                    catfishResult.chunksize = MAX_CONN_IDLE_TIME;
                    return catfishResult;
                }
            } else if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_NO_CONTENT || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                if (entity != null) {
                    entity.consumeContent();
                }
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND);
            } else if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR) {
                if (entity != null) {
                    entity.consumeContent();
                }
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            } else {
                Header firstHeader2 = execute.getFirstHeader("X-Cferr");
                if (firstHeader2 == null || firstHeader2.getValue() == null) {
                    if (entity != null) {
                        entity.consumeContent();
                    }
                    shutdownConnectionManager();
                    return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
                }
                Log.d(TAG, "Download Error (DROP): " + firstHeader2.getValue());
                if (entity != null) {
                    entity.consumeContent();
                }
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
        } catch (ClientProtocolException e4) {
        } catch (AssertionError e5) {
            e5.printStackTrace();
        } catch (Exception e6) {
            Log.e(TAG, "EXCEPTION:" + e6.toString());
        }
    }

    public CatfishResult executeDownloadGET(URI uri, ArrayList arrayList, String str) {
        Object obj = null;
        try {
            UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(arrayList);
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(uri);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            HttpEntity entity = execute.getEntity();
            Log.d(TAG, "HSC: " + String.valueOf(execute.getStatusLine().getStatusCode()));
            Header firstHeader = execute.getFirstHeader("X-CatfishProtocol");
            if (!(firstHeader == null || firstHeader.getValue() == null || firstHeader.getValue().compareTo("p2pwaitblock") != 0)) {
                obj = P2P_STREAM_PHOTO;
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                CatfishResult catfishResult;
                if (execute.getEntity().getContentLength() > 0) {
                    catfishResult = obj != null ? new CatfishResult(ResultStatus.CATFISHRESTAPI_P2P_WAITBLOCK) : new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                    byte[] bArr = new byte[MIN_CHUNKSIZE_TO_FALL];
                    DataInputStream dataInputStream = new DataInputStream(execute.getEntity().getContent());
                    try {
                        catfishResult.chunksize = MAX_CONN_IDLE_TIME;
                        while (true) {
                            int read = dataInputStream.read(bArr, MAX_CONN_IDLE_TIME, MIN_CHUNKSIZE_TO_FALL);
                            if (read > 0) {
                                try {
                                    LocalStorageWorker.postRunnable(new WriteChunkRunnable(str, bArr, read));
                                    catfishResult.chunksize = read + catfishResult.chunksize;
                                } catch (Exception e) {
                                    catfishResult.setStatus(ResultStatus.CATFISHRESTAPI_SOMEERROR);
                                    try {
                                        dataInputStream.close();
                                        if (entity != null) {
                                            entity.consumeContent();
                                        }
                                    } catch (Exception e2) {
                                    }
                                    try {
                                        dataInputStream.close();
                                        if (entity == null) {
                                            return catfishResult;
                                        }
                                        entity.consumeContent();
                                        return catfishResult;
                                    } catch (IOException e3) {
                                        e3.printStackTrace();
                                        return catfishResult;
                                    }
                                }
                            }
                            try {
                                break;
                            } catch (IOException e32) {
                                e32.printStackTrace();
                                return catfishResult;
                            }
                        }
                        dataInputStream.close();
                        if (entity == null) {
                            return catfishResult;
                        }
                        entity.consumeContent();
                        return catfishResult;
                    } catch (IOException e322) {
                        Log.e(TAG, "Error: " + e322.toString());
                        shutdownConnectionManager();
                        catfishResult.setStatus(ResultStatus.CATFISHRESTAPI_FAILURE);
                        try {
                            dataInputStream.close();
                            if (entity == null) {
                                return catfishResult;
                            }
                            entity.consumeContent();
                            return catfishResult;
                        } catch (IOException e3222) {
                            e3222.printStackTrace();
                            return catfishResult;
                        }
                    } catch (Throwable th) {
                        try {
                            dataInputStream.close();
                            if (entity != null) {
                                entity.consumeContent();
                            }
                        } catch (IOException e32222) {
                            e32222.printStackTrace();
                        }
                    }
                } else if (obj != null) {
                    Log.d(TAG, "Download: NULL Content Length (WAIT BLOCK): WAIT !!!");
                    if (entity != null) {
                        entity.consumeContent();
                    }
                    return new CatfishResult(ResultStatus.CATFISHRESTAPI_P2P_WAITBLOCK);
                } else {
                    Log.d(TAG, "Download: NULL Content Length !!!: TRY TO PROCEED");
                    if (entity != null) {
                        entity.consumeContent();
                    }
                    catfishResult = new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
                    catfishResult.chunksize = MAX_CONN_IDLE_TIME;
                    return catfishResult;
                }
            } else if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_NO_CONTENT || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                if (entity != null) {
                    entity.consumeContent();
                }
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_NOTFOUND);
            } else {
                if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR) {
                    if (entity != null) {
                        entity.consumeContent();
                    }
                    return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
                }
                shutdownConnectionManager();
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
            }
        } catch (ClientProtocolException e4) {
        } catch (AssertionError e5) {
            e5.printStackTrace();
        } catch (Exception e6) {
            Log.e(TAG, "EXCEPTION:" + e6.toString());
        }
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public com.catfiz.service.CatfishRESTAPI.CatfishResult executeDownloadGETByte(java.net.URI r9, java.util.ArrayList r10, java.io.ByteArrayOutputStream r11) {
        /*
        r8 = this;
        r0 = 0;
        r1 = new org.apache.http.client.entity.UrlEncodedFormEntity;	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r1.<init>(r10);	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r1 = r8.newClientConn();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r2 = r8.newRequestGET();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r2.setURI(r9);	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r1 = r1.execute(r2);	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r2 = r1.getEntity();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r3 = "X-CatfishProtocol";
        r3 = r1.getFirstHeader(r3);	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        if (r3 == 0) goto L_0x0034;
    L_0x0021:
        r4 = r3.getValue();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        if (r4 == 0) goto L_0x0034;
    L_0x0027:
        r3 = r3.getValue();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r4 = "p2pwaitblock";
        r3 = r3.compareTo(r4);	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        if (r3 != 0) goto L_0x0034;
    L_0x0033:
        r0 = 1;
    L_0x0034:
        r3 = r1.getStatusLine();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r3 = r3.getStatusCode();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r4 = 200; // 0xc8 float:2.8E-43 double:9.9E-322;
        if (r3 != r4) goto L_0x0121;
    L_0x0040:
        r4 = r2.getContentLength();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r6 = 0;
        r3 = (r4 > r6 ? 1 : (r4 == r6 ? 0 : -1));
        if (r3 > 0) goto L_0x007c;
    L_0x004a:
        if (r0 == 0) goto L_0x005e;
    L_0x004c:
        r0 = "CatfishRESTAPI";
        r1 = "Download: NULL Content Length (WAIT BLOCK): WAIT !!!";
        com.catfiz.util.Log.d(r0, r1);	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r2.consumeContent();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r0 = new com.catfiz.service.CatfishRESTAPI$CatfishResult;	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r1 = com.catfiz.service.CatfishRESTAPI.ResultStatus.CATFISHRESTAPI_P2P_WAITBLOCK;	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r0.<init>(r1);	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
    L_0x005d:
        return r0;
    L_0x005e:
        r0 = "CatfishRESTAPI";
        r1 = "Download: NULL Content Length !!!: DROP";
        com.catfiz.util.Log.d(r0, r1);	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r2.consumeContent();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r0 = new com.catfiz.service.CatfishRESTAPI$CatfishResult;	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r1 = com.catfiz.service.CatfishRESTAPI.ResultStatus.CATFISHRESTAPI_SOMEERROR;	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r0.<init>(r1);	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        goto L_0x005d;
    L_0x0070:
        r0 = move-exception;
    L_0x0071:
        r8.shutdownConnectionManager();
        r0 = new com.catfiz.service.CatfishRESTAPI$CatfishResult;
        r1 = com.catfiz.service.CatfishRESTAPI.ResultStatus.CATFISHRESTAPI_FAILURE;
        r0.<init>(r1);
        goto L_0x005d;
    L_0x007c:
        if (r0 == 0) goto L_0x00c6;
    L_0x007e:
        r0 = new com.catfiz.service.CatfishRESTAPI$CatfishResult;	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r3 = com.catfiz.service.CatfishRESTAPI.ResultStatus.CATFISHRESTAPI_P2P_WAITBLOCK;	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r0.<init>(r3);	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
    L_0x0085:
        r3 = 8192; // 0x2000 float:1.14794E-41 double:4.0474E-320;
        r3 = new byte[r3];	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r4 = new java.io.DataInputStream;	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r1 = r1.getEntity();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r1 = r1.getContent();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r4.<init>(r1);	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r1 = 0;
        r0.chunksize = r1;	 Catch:{ IOException -> 0x00ac }
    L_0x0099:
        r1 = 0;
        r5 = 8192; // 0x2000 float:1.14794E-41 double:4.0474E-320;
        r1 = r4.read(r3, r1, r5);	 Catch:{ IOException -> 0x00ac }
        if (r1 <= 0) goto L_0x0106;
    L_0x00a2:
        r5 = 0;
        r11.write(r3, r5, r1);	 Catch:{ Exception -> 0x00ec }
        r5 = r0.chunksize;	 Catch:{ IOException -> 0x00ac }
        r1 = r1 + r5;
        r0.chunksize = r1;	 Catch:{ IOException -> 0x00ac }
        goto L_0x0099;
    L_0x00ac:
        r1 = move-exception;
        r8.shutdownConnectionManager();	 Catch:{ all -> 0x0114 }
        r1 = com.catfiz.service.CatfishRESTAPI.ResultStatus.CATFISHRESTAPI_FAILURE;	 Catch:{ all -> 0x0114 }
        r0.setStatus(r1);	 Catch:{ all -> 0x0114 }
        r4.close();	 Catch:{ IOException -> 0x00bc }
        r2.consumeContent();	 Catch:{ IOException -> 0x00bc }
        goto L_0x005d;
    L_0x00bc:
        r1 = move-exception;
        r1.printStackTrace();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        goto L_0x005d;
    L_0x00c1:
        r0 = move-exception;
        r0.printStackTrace();
        goto L_0x0071;
    L_0x00c6:
        r0 = new com.catfiz.service.CatfishRESTAPI$CatfishResult;	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r3 = com.catfiz.service.CatfishRESTAPI.ResultStatus.CATFISHRESTAPI_SUCCESS;	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r0.<init>(r3);	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        goto L_0x0085;
    L_0x00ce:
        r0 = move-exception;
        r1 = "CatfishRESTAPI";
        r2 = new java.lang.StringBuilder;
        r2.<init>();
        r3 = "EXCEPTION:";
        r2 = r2.append(r3);
        r0 = r0.toString();
        r0 = r2.append(r0);
        r0 = r0.toString();
        com.catfiz.util.Log.e(r1, r0);
        goto L_0x0071;
    L_0x00ec:
        r1 = move-exception;
        r1 = com.catfiz.service.CatfishRESTAPI.ResultStatus.CATFISHRESTAPI_SOMEERROR;	 Catch:{ IOException -> 0x00ac }
        r0.setStatus(r1);	 Catch:{ IOException -> 0x00ac }
        r4.close();	 Catch:{ IOException -> 0x0161 }
        r2.consumeContent();	 Catch:{ IOException -> 0x0161 }
    L_0x00f8:
        r4.close();	 Catch:{ IOException -> 0x0100 }
        r2.consumeContent();	 Catch:{ IOException -> 0x0100 }
        goto L_0x005d;
    L_0x0100:
        r1 = move-exception;
        r1.printStackTrace();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        goto L_0x005d;
    L_0x0106:
        r4.close();	 Catch:{ IOException -> 0x010e }
        r2.consumeContent();	 Catch:{ IOException -> 0x010e }
        goto L_0x005d;
    L_0x010e:
        r1 = move-exception;
        r1.printStackTrace();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        goto L_0x005d;
    L_0x0114:
        r0 = move-exception;
        r4.close();	 Catch:{ IOException -> 0x011c }
        r2.consumeContent();	 Catch:{ IOException -> 0x011c }
    L_0x011b:
        throw r0;	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
    L_0x011c:
        r1 = move-exception;
        r1.printStackTrace();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        goto L_0x011b;
    L_0x0121:
        r0 = r1.getStatusLine();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r0 = r0.getStatusCode();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r3 = 204; // 0xcc float:2.86E-43 double:1.01E-321;
        if (r0 == r3) goto L_0x0139;
    L_0x012d:
        r0 = r1.getStatusLine();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r0 = r0.getStatusCode();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r3 = 404; // 0x194 float:5.66E-43 double:1.996E-321;
        if (r0 != r3) goto L_0x0147;
    L_0x0139:
        if (r2 == 0) goto L_0x013e;
    L_0x013b:
        r2.consumeContent();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
    L_0x013e:
        r0 = new com.catfiz.service.CatfishRESTAPI$CatfishResult;	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r1 = com.catfiz.service.CatfishRESTAPI.ResultStatus.CATFISHRESTAPI_NOTFOUND;	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r0.<init>(r1);	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        goto L_0x005d;
    L_0x0147:
        r0 = r1.getStatusLine();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r0 = r0.getStatusCode();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r1 = 500; // 0x1f4 float:7.0E-43 double:2.47E-321;
        if (r0 != r1) goto L_0x0071;
    L_0x0153:
        if (r2 == 0) goto L_0x0158;
    L_0x0155:
        r2.consumeContent();	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
    L_0x0158:
        r0 = new com.catfiz.service.CatfishRESTAPI$CatfishResult;	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r1 = com.catfiz.service.CatfishRESTAPI.ResultStatus.CATFISHRESTAPI_SOMEERROR;	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        r0.<init>(r1);	 Catch:{ ClientProtocolException -> 0x0070, AssertionError -> 0x00c1, Exception -> 0x00ce }
        goto L_0x005d;
    L_0x0161:
        r1 = move-exception;
        goto L_0x00f8;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.catfiz.service.CatfishRESTAPI.executeDownloadGETByte(java.net.URI, java.util.ArrayList, java.io.ByteArrayOutputStream):com.catfiz.service.CatfishRESTAPI$CatfishResult");
    }

    protected CatfishResult executeUserDataPOST(URI uri, String str) {
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestPOST = newRequestPOST();
            newRequestPOST.setURI(uri);
            newRequestPOST.setEntity(new StringEntity(str));
            HttpResponse execute = newClientConn.execute(newRequestPOST);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                Log.d(TAG, "Data useractivity sent. response");
                return parsingResponse(execute);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                HttpEntity entity = execute.getEntity();
                if (entity != null) {
                    entity.consumeContent();
                }
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            Log.d(TAG, "Data useractivity fail to sent");
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
    }

    public CatfishResult friendlistBcast(String str, String str2, String str3, int i, String str4, String str5, long j, long j2, String str6) {
        URI newServerURI = newServerURI(str + CATFISHREQ_FRIENDLIST_BCAST);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERNAME, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGETYPE, String.valueOf(i)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_RECIPIENT, str4));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGE, str5));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_OBJECTSEQ, String.valueOf(j2)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGESEQ, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_OBJECTOWNER, str6));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult friendlistGetInfo(String str, String str2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_FRIENDLIST_GETINFO);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        long currentTimeMillis = System.currentTimeMillis();
        arrayList.add(new BasicNameValuePair("ss", String.valueOf(currentTimeMillis)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        try {
            arrayList.add(new BasicNameValuePair("sec", calcHmac(str2 + String.valueOf(currentTimeMillis))));
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
        }
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult friendlistSet(String str, String str2, long j, String str3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_FRIENDLIST_SET);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair(TaskDataStorage.TIMESTAMP, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.FRIENDLIST_TABLE_NAME, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        long currentTimeMillis = System.currentTimeMillis();
        arrayList.add(new BasicNameValuePair("ss", String.valueOf(currentTimeMillis)));
        try {
            arrayList.add(new BasicNameValuePair("sec", calcHmac(str2 + str3 + String.valueOf(j) + String.valueOf(currentTimeMillis))));
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
        }
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult generatePIN(String str) {
        URI newServerURI = newServerURI(str + CATFISHREQ_PINMAN_GENERATEPIN + "?v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingPinManagerResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult getAllMemberPrivilege(String str, String str2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_PRIV_GET_ALL_INFO + "?pubid=" + str2.split(":")[MAX_CONN_IDLE_TIME] + "&objseq=" + str2.split(":")[P2P_STREAM_PHOTO] + "&v=" + "1");
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingGetGroupPrivilegeResponse(execute);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "SOMETHING WRONG WHEN I GET ALL MEMBER PRIVILEGE" + e3.toString());
        }
    }

    public CatfishResult getDataStorageInfo(String str, String str2, String str3, long j) {
        URI newServerURI = newServerURI(str + CATFISHREQ_GETDATAINFO);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.FRIENDPIN, str3));
        arrayList.add(new BasicNameValuePair(ObjectCommentDataStorage.OBJECTSEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executeGetDataStorageInfoPOST(newServerURI, arrayList);
    }

    public CatfishResult getDeviceMessage(String str, String str2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_GET_DEVICE_MESSAGE + "?deviceid=" + str2 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingPinManagerResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult getFriendPin(String str, String str2) {
        String str3 = null;
        long currentTimeMillis = System.currentTimeMillis();
        try {
            str3 = calcHmac(str2 + String.valueOf(currentTimeMillis));
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
        }
        URI newServerURI = newServerURI(str + CATFISHREQ_GETFRIENDPIN + "?userpin=" + str2 + "&sec=" + str3 + "&ss=" + String.valueOf(currentTimeMillis) + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingGetFriendListResponse(execute);
            }
        } catch (ClientProtocolException e2) {
        } catch (AssertionError e3) {
            e3.printStackTrace();
        } catch (Exception e4) {
            Log.e(TAG, "EXCEPTION:" + e4.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult getGroupMemberPrivilege(String str, String str2, String str3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_PRIV_GET_UID + "?pubid=" + str2.split(":")[MAX_CONN_IDLE_TIME] + "&objseq=" + str2.split(":")[P2P_STREAM_PHOTO] + "&userid=" + str3 + "&v=" + "1");
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingGetGroupPrivilegeResponse(execute);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "SOMETHING WRONG WHEN I GET MEMBER PRIVILEGE" + e3.toString());
        }
    }

    public CatfishResult getGroupPrivilegeType(String str, String str2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_PRIV_GET_GROUP_TYPE + "?pubid=" + str2.split(":")[MAX_CONN_IDLE_TIME] + "&objseq=" + str2.split(":")[P2P_STREAM_PHOTO] + "&v=" + "1");
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingGetGroupPrivilegeResponse(execute);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "SOMETHING WRONG WHEN I GET GROUP TYPE" + e3.toString());
        }
    }

    public CatfishResult getMessages(String str, String str2) {
        String str3 = null;
        long currentTimeMillis = System.currentTimeMillis();
        try {
            str3 = calcHmac(str2 + String.valueOf(currentTimeMillis));
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
        }
        URI newServerURI = newServerURI(str + CATFISHREQ_GETMESSAGES + "?userpin=" + str2 + "&sec=" + str3 + "&ss=" + String.valueOf(currentTimeMillis) + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        Log.d(TAG, "Excute: " + newServerURI.toString());
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingGetMessagesResponse(execute, false);
            }
        } catch (ClientProtocolException e2) {
        } catch (AssertionError e3) {
            e3.printStackTrace();
        } catch (Exception e4) {
            Log.e(TAG, "EXCEPTION:" + e4.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult getMessagesWithRdcounter(String str, String str2, long j) {
        URI newServerURI = newServerURI(str + CATFISHREQ_GETMESSAGES_WITHRDCOUNTER + "?" + CFCOMPACT_USERPIN + "=" + str2 + "&" + CFCOMPACT_RDCOUNTER + "=" + String.valueOf(j) + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        Log.d(TAG, "Excute: " + newServerURI.toString());
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                Log.d(TAG, "OK: Parsing Response");
                return parsingGetMessagesResponse(execute, true);
            } else if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                Log.d(TAG, "Server Error: DROP");
                shutdownConnectionManager();
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            } else {
                Log.e(TAG, "Invalid server response: " + execute.getStatusLine().getStatusCode());
                shutdownConnectionManager();
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
    }

    public CatfishResult getPinFromDevId(String str, String str2, String str3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_PINMAN_GETPINDEVID + "?deviceid=" + str2 + "&userkey=" + str3 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingPinManagerResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult getPinToRestore(String str, String str2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_PINMAN_GETPINDEVID + "?deviceid=" + str2 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingGetPinToRestoreResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult getPoolBackupData(String str, String str2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_STORAGEGETDATAALL + "?nic=" + str2 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingPoolDataBackupResponse(execute);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "SOMETHING WRONG WHEN I GET DATA PROFILE" + e3.toString());
        }
    }

    public CatfishResult getRepoInfo(String str, String str2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_REPOINFO + "?rpk=" + str2 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingRepoInfoResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult getSVGStickerItem(String str, String str2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_GET_REPO + "?rpk=" + str2 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingSvgItemResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult getSVGStickerList(String str, String str2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_GET_REPO + "?rpk=" + str2 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingSvgListResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult getSVGStickerPreview(String str, String str2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_REPOINFO + "?rpk=" + str2 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingSvgPreviewResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult getServerSetting(String str, String str2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_GET_REPO + "?rpk=" + str2 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newNonSecureClientConn = newNonSecureClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(changeToNonSecureServerUri(newServerURI));
            HttpResponse execute = newNonSecureClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingServerSettingResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult getSlink(String str, String str2, String str3, long j) {
        URI newServerURI = newServerURI(str + CATFISHREQ_SLINK + "?userpin=" + str2 + "&friendpin=" + str3 + "&objsequence=" + String.valueOf(j) + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        Log.d(TAG, "getSlink Execute:" + newServerURI);
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingGetSlinkResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult getSlinkDataName(String str, String str2, long j, String str3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_GETSLINKDATANAME);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.FRIENDPIN, str3));
        arrayList.add(new BasicNameValuePair(ObjectCommentDataStorage.OBJECTSEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executeGetSLinkDataStorageNamePOST(newServerURI, arrayList);
    }

    public CatfishResult getSlinkInfo(String str, String str2) {
        URI newHttpServerURI = newHttpServerURI(CatfishService.getStreamingServer() + FIZZLINK_SECURE_SERVICE);
        if (newHttpServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        List arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str));
        arrayList.add(new BasicNameValuePair("fl", str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        URLEncodedUtils uRLEncodedUtils = new URLEncodedUtils();
        a aVar = new a();
        return executeGetSLinkDataStorageInfoPOST(aVar, newHttpServerURI, aVar.a("/fzsti?" + URLEncodedUtils.format(arrayList, HTTP.ISO_8859_1)));
    }

    public CatfishResult getSlinkInfo(String str, String str2, long j) {
        URI newHttpServerURI = newHttpServerURI(CatfishService.getStreamingServer() + FIZZLINK_SECURE_SERVICE);
        if (newHttpServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        List arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_OBJECTOWNER, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_OBJECTSEQ, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        URLEncodedUtils uRLEncodedUtils = new URLEncodedUtils();
        a aVar = new a();
        return executeGetSLinkDataStorageInfoPOST(aVar, newHttpServerURI, aVar.a("/fzsti?" + URLEncodedUtils.format(arrayList, HTTP.ISO_8859_1)));
    }

    public CatfishResult getStickerInfo(String str, String str2, String str3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_STICKERINFO + "?" + CFCOMPACT_STICKERID + "=" + str3 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingStickerResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult getStickerPackageInfo(String str, String str2, String str3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_STICKERPACKAGEINFO + "?" + CFCOMPACT_STICKERPACKAGEID + "=" + str3 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingStickerResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult getStreamThumbnail(String str, String str2, String str3, FileOutputStream fileOutputStream) {
        URI uri;
        try {
            uri = new URI("http://" + str + FIZZLINK_SECURE_SERVICE);
        } catch (URISyntaxException e) {
            e.printStackTrace();
            uri = null;
        }
        if (uri == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        List arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair("fl", str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str3));
        URLEncodedUtils uRLEncodedUtils = new URLEncodedUtils();
        String a = new a().a("/thumb?" + URLEncodedUtils.format(arrayList, HTTP.ISO_8859_1));
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest httpPost = new HttpPost();
            httpPost.setURI(uri);
            httpPost.setEntity(new StringEntity(a));
            HttpResponse execute = newClientConn.execute(httpPost);
            if (execute.getStatusLine() == null) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            int statusCode = execute.getStatusLine().getStatusCode();
            HttpEntity entity = execute.getEntity();
            switch (statusCode) {
                case HttpStatus.SC_OK /*200*/:
                    CatfishResult catfishResult = new CatfishResult();
                    catfishResult.setStatus(ResultStatus.CATFISHRESTAPI_SUCCESS);
                    byte[] bArr = new byte[MIN_CHUNKSIZE_TO_FALL];
                    DataInputStream dataInputStream = new DataInputStream(execute.getEntity().getContent());
                    while (true) {
                        int read = dataInputStream.read(bArr, MAX_CONN_IDLE_TIME, MIN_CHUNKSIZE_TO_FALL);
                        if (read > 0) {
                            try {
                                fileOutputStream.write(bArr, MAX_CONN_IDLE_TIME, read);
                            } catch (Exception e2) {
                                try {
                                    shutdownConnectionManager();
                                    catfishResult.setStatus(ResultStatus.CATFISHRESTAPI_SOMEERROR);
                                } catch (IOException e3) {
                                    Log.e(TAG, "getStreamThumbnail: " + e3.toString());
                                    catfishResult.setStatus(ResultStatus.CATFISHRESTAPI_FAILURE);
                                    try {
                                        dataInputStream.close();
                                    } catch (IOException e4) {
                                    }
                                    if (entity == null) {
                                        return catfishResult;
                                    }
                                    entity.consumeContent();
                                    return catfishResult;
                                } catch (Throwable th) {
                                    try {
                                        dataInputStream.close();
                                    } catch (IOException e5) {
                                    }
                                    if (entity != null) {
                                        entity.consumeContent();
                                    }
                                }
                            }
                        } else {
                            try {
                                dataInputStream.close();
                            } catch (IOException e6) {
                            }
                            if (entity == null) {
                                return catfishResult;
                            }
                            entity.consumeContent();
                            return catfishResult;
                        }
                    }
                case HttpStatus.SC_NOT_FOUND /*404*/:
                case HttpStatus.SC_INTERNAL_SERVER_ERROR /*500*/:
                    if (entity != null) {
                        entity.consumeContent();
                    }
                    return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
                default:
                    if (entity != null) {
                        entity.consumeContent();
                        break;
                    }
                    break;
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e7) {
        } catch (AssertionError e8) {
            e8.printStackTrace();
        } catch (Exception e9) {
            Log.e(TAG, "getStreamThumbnail: " + e9.toString());
        }
    }

    public CatfishResult getUpdateVersionRepo(String str, String str2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_GET_REPO + "?rpk=" + str2 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newNonSecureClientConn = newNonSecureClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(changeToNonSecureServerUri(newServerURI));
            HttpResponse execute = newNonSecureClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingUpdateVersionRepoInfoResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult getUserActivity(String str, String str2, String str3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_GETUSERACTIVITY + "?userpin=" + str2 + "&friendpin=" + str3 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingUserActivityResponse(execute);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
    }

    public CatfishResult getUserDataProfile(String str, String str2, String str3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_GETUSERDATAPROFILE + "?userpin=" + str2 + "&friendpin=" + str3 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingDataProfileResponse(execute);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "SOMETHING WRONG WHEN I GET DATA PROFILE" + e3.toString());
        }
    }

    public CatfishResult getUserProfileInfo(String str, String str2, String str3) {
        String str4 = null;
        long currentTimeMillis = System.currentTimeMillis();
        try {
            str4 = calcHmac(str2 + str3 + String.valueOf(currentTimeMillis));
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
        }
        URI newServerURI = newServerURI(str + CATFISHREQ_GETPROFILEINFO + "?userpin=" + str2 + "&friendpin=" + str3 + "&sec=" + str4 + "&sequence=" + String.valueOf(currentTimeMillis) + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingProfileInfoResponse(execute);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e2) {
        } catch (AssertionError e3) {
            e3.printStackTrace();
        } catch (Exception e4) {
            Log.e(TAG, "EXCEPTION:" + e4.toString());
        }
    }

    public CatfishResult isDeviceRegistered(String str, String str2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_PINMAN_DEVIDISREG + "?deviceid=" + str2 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingPinManagerResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult isUserpinExists(String str, String str2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_PINMAN_PINEXISTS + "?userpin=" + str2 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingPinManagerResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult loginCatfizAccount(String str, String str2, String str3, String str4) {
        try {
            str3 = SimpleCrypto.SHA1(str3);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e2) {
            e2.printStackTrace();
        }
        URI newServerURI = newServerURI(str + CATFISHREQ_LOGIN_ACCOUNT + "?email=" + str2 + "&userkey=" + str3 + "&imei=" + str4 + "&orgid=" + ORGANIZATION_ID_CATFIZ + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingResponse(execute);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e3) {
        } catch (AssertionError e4) {
            e4.printStackTrace();
        } catch (Exception e5) {
            Log.e(TAG, "EXCEPTION:" + e5.toString());
        }
    }

    protected DefaultHttpClient newClientConn() {
        return newHttpsClientConn();
    }

    protected DefaultHttpClient newHttpsClientConn() {
        if (this.clientconn == null) {
            Log.d(TAG, "Create connection");
            HttpParams basicHttpParams = new BasicHttpParams();
            basicHttpParams.setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);
            HttpConnectionParams.setConnectionTimeout(basicHttpParams, 20000);
            HttpConnectionParams.setSoTimeout(basicHttpParams, 15000);
            HttpConnectionParams.setStaleCheckingEnabled(basicHttpParams, false);
            HttpConnectionParams.setSocketBufferSize(basicHttpParams, MAX_CHUNKSIZE_TO_GROW);
            HttpConnectionParams.setTcpNoDelay(basicHttpParams, true);
            HttpProtocolParams.setContentCharset(basicHttpParams, HTTP.UTF_8);
            HttpProtocolParams.setUserAgent(basicHttpParams, "Catfiz/1.1");
            SchemeRegistry schemeRegistry = new SchemeRegistry();
            schemeRegistry.register(new Scheme(HttpHost.DEFAULT_SCHEME_NAME, PlainSocketFactory.getSocketFactory(), 80));
            schemeRegistry.register(new Scheme(CFURLSpan.HTTPS_SCHEME, newSslSocketFactory(), 443));
            this.clientconn = new DefaultHttpClient(new SingleClientConnManager(basicHttpParams, schemeRegistry), basicHttpParams);
            this.clientconn.setHttpRequestRetryHandler(new DefaultHttpRequestRetryHandler(P2P_STREAM_PHOTO, true));
            this.clientconn.setRoutePlanner(new DefaultHttpRoutePlanner(schemeRegistry));
            this.clientconn.setKeepAliveStrategy(new ConnectionKeepAliveStrategy() {
                public long getKeepAliveDuration(HttpResponse httpResponse, HttpContext httpContext) {
                    HeaderElementIterator basicHeaderElementIterator = new BasicHeaderElementIterator(httpResponse.headerIterator(HTTP.CONN_KEEP_ALIVE));
                    while (basicHeaderElementIterator.hasNext()) {
                        HeaderElement nextElement = basicHeaderElementIterator.nextElement();
                        String name = nextElement.getName();
                        String value = nextElement.getValue();
                        if (value != null && name.equalsIgnoreCase("timeout")) {
                            try {
                                long parseLong = Long.parseLong(value) * 1000;
                                Log.d(CatfishRESTAPI.TAG, "KeepAlive timeout: " + parseLong);
                                return parseLong;
                            } catch (NumberFormatException e) {
                            }
                        }
                    }
                    return 0;
                }
            });
            this.clientconn.setReuseStrategy(new DefaultConnectionReuseStrategy());
        } else {
            Log.d(TAG, "Reuse connection");
        }
        return this.clientconn;
    }

    protected URI newHttpsServerURI(String str) {
        try {
            URI uri = new URI("https://" + str);
            Log.d(TAG, "Server: " + uri);
            return uri;
        } catch (URISyntaxException e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
            return null;
        }
    }

    protected DefaultHttpClient newNonSecureClientConn() {
        return newClientConn();
    }

    protected HttpGet newRequestGET() {
        Log.d(TAG, "Create request: GT");
        return new HttpGet();
    }

    protected HttpPost newRequestPOST() {
        Log.d(TAG, "Create request: PS");
        return new HttpPost();
    }

    public CatfishResult notifyFriendsNameUpdate(String str, String str2, String str3) {
        return friendlistBcast(str, str2, str3, MessageType.USERNAMEUPDT.ordinal(), str2, str3, uniqueMonotonicSequence(), 0, str2);
    }

    public CatfishResult notifyFriendsPhotoUpdate(String str, String str2) {
        return friendlistBcast(str, str2, " ", MessageType.PHOTOUPDT.ordinal(), str2, " ", uniqueMonotonicSequence(), 0, str2);
    }

    public CatfishResult notifyFriendsProfileUpdateEx(String str, String str2, String str3, String str4) {
        return friendlistBcast(str, str2, str3, MessageType.PROFILEUPDT.ordinal(), str2, str4, uniqueMonotonicSequence(), 0, str2);
    }

    public CatfishResult notifyFriendsStatusUpdateEx(String str, String str2, String str3, String str4, long j) {
        return friendlistBcast(str, str2, str3, MessageType.STATUSUPDT.ordinal(), str2, str4, uniqueMonotonicSequence(), j, str2);
    }

    public CatfishResult notifyFriendsUserActivityUpdateEx(String str, String str2, String str3, String str4) {
        return friendlistBcast(str, str2, str3, MessageType.USER_ACTIVITY.ordinal(), str2, str4, uniqueMonotonicSequence(), 0, str2);
    }

    public CatfishResult notifyMessageDelivered(String str, String str2, String str3, long j) {
        URI newServerURI = newServerURI(str + CATFISHREQ_REQUESTPROFILE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_RECIPIENT, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGETYPE, String.valueOf(MessageType.DELIVERED.ordinal())));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_SEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult notifyMessagesRead(String str, String str2, String str3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_REQUESTPROFILE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_RECIPIENT, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGETYPE, String.valueOf(MessageType.READ.ordinal())));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_SEQUENCE, "0"));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult notifyWriting(String str, String str2, String str3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_REQUESTPROFILE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_RECIPIENT, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGETYPE, String.valueOf(MessageType.WRITING.ordinal())));
        Log.d(TAG, "notifyWriting: Get MONOTONIC SEQ");
        arrayList.add(new BasicNameValuePair(CFCOMPACT_SEQUENCE, String.valueOf(uniqueMonotonicSequence())));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        Log.d(TAG, "notifyWriting: Execute ONE WAY POST");
        return executeOnewayPOST(newServerURI, arrayList);
    }

    public CatfishResult notifyWritingDone(String str, String str2, String str3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_REQUESTPROFILE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_RECIPIENT, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGETYPE, String.valueOf(MessageType.WRITING_DONE.ordinal())));
        Log.d(TAG, "notifyWritingDONE: Get MONOTONIC SEQ");
        arrayList.add(new BasicNameValuePair(CFCOMPACT_SEQUENCE, String.valueOf(uniqueMonotonicSequence())));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        Log.d(TAG, "notifyWritingDONE: Execute ONE WAY POST");
        return executeOnewayPOST(newServerURI, arrayList);
    }

    public CatfishResult p2pCommitBlock(String str, String str2, String str3, int i, long j) {
        URI newServerURI = newServerURI(str + CATFISHREQ_P2P_COMMITBLOCK);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair(TaskDataStorage.SENDERPIN, str3));
        arrayList.add(new BasicNameValuePair("binarystream_type", String.valueOf(i)));
        arrayList.add(new BasicNameValuePair(TaskDataStorage.CHANNELID, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executeOnewayPOST(newServerURI, arrayList);
    }

    public CatfishResult p2pGet(String str, String str2, String str3, int i, long j, int i2, int i3, FileOutputStream fileOutputStream) {
        Object arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair(TaskDataStorage.SENDERPIN, str3));
        arrayList.add(new BasicNameValuePair("binarystream_type", String.valueOf(i)));
        arrayList.add(new BasicNameValuePair(TaskDataStorage.CHANNELID, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair("bytestart", String.valueOf(i2)));
        arrayList.add(new BasicNameValuePair("byteend", String.valueOf(i3)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        URLEncodedUtils uRLEncodedUtils = new URLEncodedUtils();
        URI newServerURI = newServerURI(str + CATFISHREQ_P2P_GETDATA + ("?" + URLEncodedUtils.format(arrayList, HTTP.ISO_8859_1)));
        return newServerURI == null ? new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR) : executeDownloadGET(newServerURI, arrayList, fileOutputStream, false);
    }

    public CatfishResult p2pGetChannelInfo(String str, String str2, String str3, long j) {
        URI newServerURI = newServerURI(str + CATFISHREQ_P2P_GETCHINFO);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair(TaskDataStorage.SENDERPIN, str3));
        arrayList.add(new BasicNameValuePair(TaskDataStorage.CHANNELID, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executeP2PPOST(newServerURI, arrayList);
    }

    public CatfishResult p2pOpenChannel(String str, String str2, String str3, int i, long j, int i2, String str4, long j2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_P2P_OPENCHANNEL);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair(TaskDataStorage.RECIPIENT, str3));
        arrayList.add(new BasicNameValuePair("binarystream_type", String.valueOf(i)));
        arrayList.add(new BasicNameValuePair(TaskDataStorage.DATA_SIZE, String.valueOf(i2)));
        arrayList.add(new BasicNameValuePair(TaskDataStorage.CHANNELID, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STORAGEDATANAME, str4));
        arrayList.add(new BasicNameValuePair(ServerMessageDataStorage.SEQUENCE, String.valueOf(j2)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executeP2PPOST(newServerURI, arrayList);
    }

    public CatfishResult p2pStore(String str, String str2, String str3, int i, long j, int i2, int i3, int i4, byte[] bArr) {
        List arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair(TaskDataStorage.RECIPIENT, str3));
        arrayList.add(new BasicNameValuePair("binarystream_type", String.valueOf(i)));
        arrayList.add(new BasicNameValuePair(TaskDataStorage.CHANNELID, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair("bytestart", String.valueOf(i2)));
        arrayList.add(new BasicNameValuePair("byteend", String.valueOf(i3)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        URLEncodedUtils uRLEncodedUtils = new URLEncodedUtils();
        URI newServerURI = newServerURI(str + CATFISHREQ_P2P_STORE + ("?" + URLEncodedUtils.format(arrayList, HTTP.ISO_8859_1)));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        if (i4 <= 0) {
            return executeP2PPOST(newServerURI, bArr, false);
        }
        ByteArrayBuffer byteArrayBuffer = new ByteArrayBuffer((i3 - i2) + P2P_STREAM_PHOTO);
        byteArrayBuffer.append(bArr, i4, (i3 - i2) + P2P_STREAM_PHOTO);
        return executeP2PPOST(newServerURI, byteArrayBuffer.buffer(), false);
    }

    public CatfishResult pingCatfishServer(String str) {
        URI newServerURI = newServerURI(str + CATFISHREQ_PINGSERVER);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        DefaultHttpClient newClientConn = newClientConn();
        HttpUriRequest newRequestGET = newRequestGET();
        newRequestGET.setURI(newServerURI);
        try {
            return parsingResponse(newClientConn.execute(newRequestGET));
        } catch (ClientProtocolException e) {
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (AssertionError e2) {
            e2.printStackTrace();
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        }
    }

    public CatfishResult pingFriend(String str, String str2, String str3, long j) {
        URI newServerURI = newServerURI(str + CATFISHREQ_REQUESTPROFILE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_RECIPIENT, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGETYPE, String.valueOf(MessageType.PING.ordinal())));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_SEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult registerCatfizAccount(String str, String str2, String str3, String str4, String str5) {
        try {
            str3 = SimpleCrypto.SHA1(str3);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e2) {
            e2.printStackTrace();
        }
        URI newServerURI = str5 != null ? newServerURI(str + CATFISHREQ_REGISTER_ACCOUNT + "?email=" + str2 + "&userkey=" + str3 + "&imei=" + str4 + "&orgid=" + ORGANIZATION_ID_CATFIZ + "&nic=" + str5 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault())) : newServerURI(str + CATFISHREQ_REGISTER_ACCOUNT + "?email=" + str2 + "&userkey=" + str3 + "&imei=" + str4 + "&orgid=" + ORGANIZATION_ID_CATFIZ + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingResponse(execute);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e3) {
        } catch (AssertionError e4) {
            e4.printStackTrace();
        } catch (Exception e5) {
            Log.e(TAG, "EXCEPTION:" + e5.toString());
        }
    }

    public CatfishResult registerDevidNPin(String str, String str2, String str3, String str4) {
        URI newServerURI = newServerURI(str + CATFISHREQ_PINMAN_REGS + "?userpin=" + str2 + "&deviceid=" + str3 + "&userkey=" + str4 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingPinManagerResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult registerEmailCobrand(String str, String str2, String str3, String str4) {
        try {
            str3 = SimpleCrypto.SHA1(str3);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e2) {
            e2.printStackTrace();
        }
        URI newServerURI = newServerURI(str + CATFISHREQ_EMAILREG_COBRAND + "?email=" + str2 + "&userkey=" + str3 + "&imei=" + str4 + "&orgid=" + ORGANIZATION_ID_CATFIZ + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(changeToNonSecureServerUriWithSamePort(newServerURI));
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingResponse(execute);
            }
        } catch (ClientProtocolException e3) {
        } catch (AssertionError e4) {
            e4.printStackTrace();
        } catch (Exception e5) {
            Log.e(TAG, "EXCEPTION:" + e5.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult registerEmailExclusive(String str, String str2, String str3, String str4) {
        try {
            str3 = SimpleCrypto.SHA1(str3);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e2) {
            e2.printStackTrace();
        }
        URI newServerURI = newServerURI(str + CATFISHREQ_EMAILREG_EXCLUSIVE + "?email=" + str2 + "&userkey=" + str3 + "&imei=" + str4 + "&orgid=" + ORGANIZATION_ID_CATFIZ + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(changeToNonSecureServerUriWithSamePort(newServerURI));
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingResponse(execute);
            }
        } catch (ClientProtocolException e3) {
        } catch (AssertionError e4) {
            e4.printStackTrace();
        } catch (Exception e5) {
            Log.e(TAG, "EXCEPTION:" + e5.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult registerEmailGeneral(String str, String str2, String str3, String str4) {
        try {
            str3 = SimpleCrypto.SHA1(str3);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e2) {
            e2.printStackTrace();
        }
        URI newServerURI = newServerURI(str + CATFISHREQ_EMAILREG_GENERAL + "?email=" + str2 + "&orgid=" + ORGANIZATION_ID_CATFIZ + "&userkey=" + str3 + "&imei=" + str4 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(changeToNonSecureServerUriWithSamePort(newServerURI));
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingResponse(execute);
            }
        } catch (ClientProtocolException e3) {
        } catch (AssertionError e4) {
            e4.printStackTrace();
        } catch (Exception e5) {
            Log.e(TAG, "EXCEPTION:" + e5.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult registerPhoneNumber(String str, String str2, String str3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_REGISTERPHONE + "?userpin=" + str2 + "&phone=" + str3);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingRegisterPhoneResponse(execute);
            }
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR || execute.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
            }
            shutdownConnectionManager();
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
    }

    public CatfishResult requestAdView(String str, String str2, String str3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_ADCLICK + "?userpin=" + str2 + "&id=" + str3);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            if (newClientConn.execute(newRequestGET).getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return new CatfishResult(ResultStatus.CATFISHRESTAPI_SUCCESS);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult requestAdView(String str, String str2, String str3, String str4) {
        URI newServerURI = newServerURI(str + CATFISHREQ_GETADVIEW);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_SCREEN_SIZE, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERLOOPCOUNT, str4));
        return executeGetAdvInfoPOST(newServerURI, arrayList);
    }

    public CatfishResult requestProfile(String str, String str2, String str3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_REQUESTPROFILE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_RECIPIENT, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGETYPE, String.valueOf(MessageType.REQUESTPFI.ordinal())));
        long uniqueMonotonicSequence = uniqueMonotonicSequence();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_SEQUENCE, String.valueOf(uniqueMonotonicSequence)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        try {
            arrayList.add(new BasicNameValuePair("sec", calcHmac(str2 + str3 + String.valueOf(MessageType.REQUESTPFI.ordinal()) + String.valueOf(uniqueMonotonicSequence))));
        } catch (Exception e) {
            Log.e(TAG, "EXCEPTION:" + e.toString());
        }
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult resendActivation(String str, String str2, String str3) {
        try {
            str3 = SimpleCrypto.SHA1(str3);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e2) {
            e2.printStackTrace();
        }
        URI newServerURI = newServerURI(str + CATFISHREQ_RESEND_ACTIVATION + "?email=" + str2 + "&orgid=" + ORGANIZATION_ID_CATFIZ + "&userkey=" + str3 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingResponse(execute);
            }
        } catch (ClientProtocolException e3) {
        } catch (AssertionError e4) {
            e4.printStackTrace();
        } catch (Exception e5) {
            Log.e(TAG, "EXCEPTION:" + e5.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult resetPassword(String str, String str2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_RESET_PASSWORD + "?email=" + str2 + "&orgid=" + ORGANIZATION_ID_CATFIZ + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingResponse(execute);
            }
        } catch (ClientProtocolException e) {
        } catch (AssertionError e2) {
            e2.printStackTrace();
        } catch (Exception e3) {
            Log.e(TAG, "EXCEPTION:" + e3.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult resetPasswordActivation(String str, String str2, String str3, String str4) {
        try {
            str3 = SimpleCrypto.SHA1(str3);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e2) {
            e2.printStackTrace();
        }
        URI newServerURI = newServerURI(str + CATFISHREQ_RESET_PASSWORD_ACTIVATION + "?email=" + str2 + "&orgid=" + ORGANIZATION_ID_CATFIZ + "&newuserkey=" + str3 + "&email_code=" + str4 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(newServerURI);
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingResponse(execute);
            }
        } catch (ClientProtocolException e3) {
        } catch (AssertionError e4) {
            e4.printStackTrace();
        } catch (Exception e5) {
            Log.e(TAG, "EXCEPTION:" + e5.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult sendBcastMessageWType(String str, String str2, String str3, int i, String str4, long j, long j2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_SENDBCASTMESSAGE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_RECIPIENTS, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGE, str4));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGETYPE, String.valueOf(i)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_SEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_OBJECTSEQ, String.valueOf(j2)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult sendBroadcast(String str, String str2, String str3, String str4, int i, long j) {
        URI newServerURI = newServerURI(str + CATFISHREQ_SENDBCASTMESSAGE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_RECIPIENTS, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGE, str4));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGETYPE, String.valueOf(i)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_SEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult sendBroadcastMessage(String str, String str2, String str3, String str4, long j) {
        URI newServerURI = newServerURI(str + CATFISHREQ_SENDBCASTMESSAGE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_RECIPIENTS, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGE, str4));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGETYPE, String.valueOf(MessageType.BCASTMESSAGE.ordinal())));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_SEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult sendByte(String str, String str2, String str3, byte[] bArr, long j) {
        List arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_RECIPIENT, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGETYPE, String.valueOf(MessageType.MESSAGE.ordinal())));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_SEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        URLEncodedUtils uRLEncodedUtils = new URLEncodedUtils();
        URI newServerURI = newServerURI(str + CATFISHREQ_SENDBYTE + ("?" + URLEncodedUtils.format(arrayList, HTTP.ISO_8859_1)));
        return newServerURI == null ? new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR) : executeByteMessagePOST(newServerURI, bArr);
    }

    public CatfishResult sendLongMessage(String str, String str2, String str3, byte[] bArr, long j) {
        List arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_RECIPIENT, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGETYPE, String.valueOf(MessageType.LONG_MESSAGE.ordinal())));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_SEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        URLEncodedUtils uRLEncodedUtils = new URLEncodedUtils();
        URI newServerURI = newServerURI(str + CATFISHREQ_SENDBYTE + ("?" + URLEncodedUtils.format(arrayList, HTTP.ISO_8859_1)));
        return newServerURI == null ? new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR) : executeByteMessagePOST(newServerURI, bArr);
    }

    public CatfishResult sendMessage(String str, String str2, String str3, int i, String str4, long j) {
        URI newServerURI = newServerURI(str + CATFISHREQ_SENDMESSAGE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_RECIPIENT, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGE, str4));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGETYPE, String.valueOf(i)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_SEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult sendMessage(String str, String str2, String str3, String str4, long j) {
        URI newServerURI = newServerURI(str + CATFISHREQ_SENDMESSAGE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_RECIPIENT, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGE, str4));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGETYPE, String.valueOf(MessageType.MESSAGE.ordinal())));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_SEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult sendRequestFriend(String str, String str2, String str3, String str4) {
        URI newServerURI = newServerURI(str + CATFISHREQ_SENDMESSAGE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_RECIPIENT, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGE, str4));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_MESSAGETYPE, String.valueOf(MessageType.REQUESTFRD.ordinal())));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_SEQUENCE, String.valueOf(uniqueMonotonicSequence())));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult setDsName(String str, String str2, String str3, long j, String str4, int i, String str5) {
        URI newServerURI = newServerURI(str + CATFISHREQ_SETDSDATANAME);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.FRIENDPIN, str3));
        arrayList.add(new BasicNameValuePair(ObjectCommentDataStorage.OBJECTSEQUENCE, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair("dtname", str4));
        arrayList.add(new BasicNameValuePair("dttype", String.valueOf(i)));
        arrayList.add(new BasicNameValuePair("dtdesc", str5));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult setMemberGroupPrivilege(String str, String str2, String str3, String str4, int i) {
        URI newServerURI = newServerURI(str + CATFISHREQ_PRIV_SET_UID);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair("pubid", str2.split(":")[MAX_CONN_IDLE_TIME]));
        arrayList.add(new BasicNameValuePair("objseq", str2.split(":")[P2P_STREAM_PHOTO]));
        arrayList.add(new BasicNameValuePair("executorid", str3));
        arrayList.add(new BasicNameValuePair("userid", str4));
        arrayList.add(new BasicNameValuePair("privilege", String.valueOf(i)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, "1"));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult setProfilePhotoAsComplete(String str, String str2) {
        URI newServerURI = newServerURI(str + CATFISHREQ_SETPHOTOFINISH);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executeOnewayPOST(newServerURI, arrayList);
    }

    public CatfishResult setUserActivity(String str, String str2, String str3) {
        List arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair("ts", String.valueOf(System.currentTimeMillis())));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        URLEncodedUtils uRLEncodedUtils = new URLEncodedUtils();
        URI newServerURI = newServerURI(str + CATFISHREQ_SETUSERACTIVITY + ("?" + URLEncodedUtils.format(arrayList, HTTP.ISO_8859_1)));
        return newServerURI == null ? new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR) : executeUserDataPOST(newServerURI, str3);
    }

    public CatfishResult setUserName(String str, String str2, String str3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_SETUSERNAME);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERNAME, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult setUserProfile(String str, String str2, String str3) {
        URI newServerURI = newServerURI(str + CATFISHREQ_SETUSERDATAPROFILE);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(FriendListDataStorage.USERPIN, str2));
        arrayList.add(new BasicNameValuePair(TaskDataStorage.TIMESTAMP, String.valueOf(System.currentTimeMillis())));
        arrayList.add(new BasicNameValuePair("tagdata", str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult setUserStatus(String str, String str2, String str3, long j) {
        URI newServerURI = newServerURI(str + CATFISHREQ_SETUSERSTATUS);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERSTATUS, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERSTATUSSEQ, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public void shutdownConnectionManager() {
        Log.d(TAG, "**** SHUTDOWN CONNECTION MANAGER ****");
        try {
            if (this.clientconn != null) {
                this.clientconn.getConnectionManager().shutdown();
            }
        } catch (AssertionError e) {
            e.printStackTrace();
        } catch (Exception e2) {
            e2.printStackTrace();
        }
        this.clientconn = null;
    }

    public CatfishResult storageDeleteData(String str, String str2, String str3, String str4) {
        URI newServerURI = newServerURI(str + CATFISHREQ_STORAGEDELETEDATA);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STORAGENIC, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STORAGEDATANAME, str4));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STORAGEDATA, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult storageGetAllData(String str, String str2, String str3, String str4) {
        URI newServerURI = newServerURI(str + CATFISHREQ_STORAGEGETDATAALL);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STORAGENIC, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STORAGEDATANAME, str4));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult storageInsertData(String str, String str2, String str3, String str4) {
        URI newServerURI = newServerURI(str + CATFISHREQ_STORAGEINSERTDATA);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STORAGENIC, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STORAGEDATANAME, str4));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STORAGEDATA, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public CatfishResult storageUpdateData(String str, String str2, String str3, String str4, String str5) {
        URI newServerURI = newServerURI(str + CATFISHREQ_STORAGEUPDATEDATA);
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STORAGENIC, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STORAGEDATANAME, str5));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STORAGEOLDDATA, str3));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STORAGENEWDATA, str4));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        return executePOST(newServerURI, arrayList);
    }

    public void tearDown() {
        Log.d(TAG, "**** TEAR DOWN ****");
        try {
            if (this.clientconn != null) {
                ClientConnectionManager connectionManager = this.clientconn.getConnectionManager();
                if (connectionManager != null) {
                    connectionManager.closeExpiredConnections();
                    connectionManager.closeIdleConnections(0, TimeUnit.SECONDS);
                }
            }
        } catch (AssertionError e) {
            e.printStackTrace();
        } catch (Exception e2) {
            e2.printStackTrace();
        }
    }

    public CatfishResult updateNicEmailRegister(String str, String str2, String str3, String str4) {
        try {
            str3 = SimpleCrypto.SHA1(str3);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e2) {
            e2.printStackTrace();
        }
        URI newServerURI = newServerURI(str + CATFISHREQ_UPDATE_NIC + "?email=" + str2 + "&orgid=" + ORGANIZATION_ID_CATFIZ + "&userkey=" + str3 + "&nic=" + str4 + "&v=" + String.valueOf(CatfishService.getCatfishVersion()) + "&lid=" + String.valueOf(Locale.getDefault()));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        try {
            DefaultHttpClient newClientConn = newClientConn();
            HttpUriRequest newRequestGET = newRequestGET();
            newRequestGET.setURI(changeToNonSecureServerUriWithSamePort(newServerURI));
            HttpResponse execute = newClientConn.execute(newRequestGET);
            if (execute.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return parsingResponse(execute);
            }
        } catch (ClientProtocolException e3) {
        } catch (AssertionError e4) {
            e4.printStackTrace();
        } catch (Exception e5) {
            Log.e(TAG, "EXCEPTION:" + e5.toString());
        }
        shutdownConnectionManager();
        return new CatfishResult(ResultStatus.CATFISHRESTAPI_FAILURE);
    }

    public CatfishResult uploadDataChunk(String str, String str2, long j, int i, int i2, int i3, byte[] bArr) {
        List arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_OBJECTSEQ, String.valueOf(j)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_DATASIZE, String.valueOf(i)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_BYTESTART, String.valueOf(i2)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_BYTEEND, String.valueOf((i2 + i3) - 1)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        URLEncodedUtils uRLEncodedUtils = new URLEncodedUtils();
        URI newServerURI = newServerURI(str + CATFISHREQ_UPLOADDATACHUNK + ("?" + URLEncodedUtils.format(arrayList, HTTP.ISO_8859_1)));
        if (newServerURI == null) {
            return new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR);
        }
        Log.d(TAG, "Upload Chunk to: " + newServerURI.toString());
        return executeDataChunkPOST(newServerURI, bArr, i3, false);
    }

    public CatfishResult uploadProfilePhotoChunk(String str, String str2, int i, int i2, int i3, int i4, byte[] bArr) {
        List arrayList = new ArrayList();
        arrayList.add(new BasicNameValuePair(CFCOMPACT_USERPIN, str2));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_ITEM_ID, String.valueOf(i)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_PHOTOSIZE, String.valueOf(i2)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_BYTESTART, String.valueOf(i3)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_BYTEEND, String.valueOf((i3 + i4) - 1)));
        arrayList.add(new BasicNameValuePair(CFCOMPACT_STICKERPACKAGEVERSION, String.valueOf(CatfishService.getCatfishVersion())));
        arrayList.add(new BasicNameValuePair("lid", String.valueOf(Locale.getDefault())));
        URLEncodedUtils uRLEncodedUtils = new URLEncodedUtils();
        URI newServerURI = newServerURI(str + CATFISHREQ_UPDATEPHOTO + ("?" + URLEncodedUtils.format(arrayList, HTTP.ISO_8859_1)));
        return newServerURI == null ? new CatfishResult(ResultStatus.CATFISHRESTAPI_SOMEERROR) : executePhotoChunkPOST(newServerURI, bArr, i4, false);
    }
}
