package com.catfiz.service;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.database.Cursor;
import android.net.Uri;
import android.support.v4.content.LocalBroadcastManager;
import com.catfiz.intents.BroadcastIntents;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.svcpersistent.DataStorageDownloadInfo.DataStorageStreamType;
import com.catfiz.svcpersistent.DataStorageUploadBase;
import com.catfiz.util.FizzlinkUtil;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import org.apache.http.HttpStatus;

public class FizzlinkUploadExecutor extends DataStorageUploadBase implements Runnable {
    private static final String TAG = "FizzlinkUploadExecutor";
    public static final int mChunkMaxSize = 262144;
    public boolean bNeedRead = true;
    private boolean cancelDownload = false;
    public int mBytestart = 0;
    private BroadcastReceiver mCancelDownloadReceiver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            long longExtra = intent.getLongExtra(ServerMessageDataStorage.SEQUENCE, 0);
            if (longExtra == 0) {
                Log.d(FizzlinkUploadExecutor.TAG, "INVALID SEQUENCE: DO NOT CANCEL");
            } else if (FizzlinkUploadExecutor.this.mObjSequence == 0 || FizzlinkUploadExecutor.this.mObjSequence != longExtra) {
                Log.d(FizzlinkUploadExecutor.TAG, "Current Object Sequence is INVALID or 0: DO NOT CANCEL");
            } else {
                Log.d(FizzlinkUploadExecutor.TAG, "-----BATALKAN DOWNLOAD ---- SEQ-NYA = " + longExtra);
                FizzlinkUploadExecutor.this.cancelDownload = true;
            }
        }
    };
    public byte[] mChunkbuffer = null;
    public int mChunksent = 0;
    public int mChunksize = 0;
    public FileInputStream mChunkstream = null;
    private ICatfishClientInterface mClientInterface = null;
    public File mDataFile = null;
    public int mDatasize = 0;
    private String mFilename = null;
    private String mFilepath = null;
    private String mMessage = null;
    CatfishMessageObject mMessageObject = null;
    private long mObjSequence = 0;
    private String mServer = null;
    private CatfishService mService = null;
    private final int mSize;
    private String mSlink = null;
    private String mUserpin = null;

    class DataBcastDeliveryStatus implements Runnable {
        private MessageDeliveryStatus mDeliveryStatus = MessageDeliveryStatus.UNDEFINED;

        public DataBcastDeliveryStatus(MessageDeliveryStatus messageDeliveryStatus) {
            this.mDeliveryStatus = messageDeliveryStatus;
        }

        public void run() {
            FizzlinkDataStorage fizzlinkDataStorage = new FizzlinkDataStorage(FizzlinkUploadExecutor.this.mService);
            FizzlinkUploadExecutor.this.mMessageObject.deliverystatus = this.mDeliveryStatus;
            FizzlinkUploadExecutor.this.mMessageObject.object_sequence = FizzlinkUploadExecutor.this.mObjSequence;
            FizzlinkUploadExecutor.this.mMessageObject.slink = FizzlinkUploadExecutor.this.mSlink;
            if (fizzlinkDataStorage.updateUploadFizzlinkStatus(FizzlinkUploadExecutor.this.mMessageObject)) {
                FizzlinkUploadExecutor.this.mService.postToMainHandler(new InvokeClientCallback(FizzlinkUploadExecutor.this.mClientInterface, fizzlinkDataStorage.getAllUploadedFizzlinkList()));
                return;
            }
            Log.e(FizzlinkUploadExecutor.TAG, "----UPLOADFIZZLINK: FAIL TO UPDATE DELVERY STATUS IN DB");
        }
    }

    class DataUploadChunk implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private volatile long mAge;
        private boolean mIsSent;
        public int scheduleNum;
        private boolean send;

        private DataUploadChunk() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.send = true;
            this.mIsSent = false;
            this.scheduleNum = 0;
        }

        public void dropRunnable() {
            LocalBroadcastManager.getInstance(FizzlinkUploadExecutor.this.mService).unregisterReceiver(FizzlinkUploadExecutor.this.mCancelDownloadReceiver);
            FizzlinkUploadExecutor.this.deleteTaskState(String.valueOf(FizzlinkUploadExecutor.this.mObjSequence), false);
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            Intent intent;
            if (FizzlinkUploadExecutor.this.cancelDownload) {
                LocalBroadcastManager.getInstance(FizzlinkUploadExecutor.this.mService).unregisterReceiver(FizzlinkUploadExecutor.this.mCancelDownloadReceiver);
                intent = new Intent(BroadcastIntents.ACTION_UPLOAD_FIZZLINK);
                intent.putExtra(CatfishService.PROGRESS_VALUE, 0);
                intent.putExtra(ServerMessageDataStorage.SEQUENCE, FizzlinkUploadExecutor.this.mObjSequence);
                intent.putExtra(CatfishService.PROGRESS_STATE, 3);
                LocalBroadcastManager.getInstance(FizzlinkUploadExecutor.this.mService).sendBroadcast(intent);
                FizzlinkUploadExecutor.this.deleteTaskState(String.valueOf(FizzlinkUploadExecutor.this.mObjSequence), false);
                FizzlinkUploadExecutor.this.mService.postRunnableToDbThread(new DataBcastDeliveryStatus(MessageDeliveryStatus.DROP));
            } else if (FizzlinkUploadExecutor.this.mChunkstream == null) {
                Log.d(FizzlinkUploadExecutor.TAG, "----UPLOADFIZZLINK: INVALID CHUNKSTREAM (NULL): CANCELED");
                LocalBroadcastManager.getInstance(FizzlinkUploadExecutor.this.mService).unregisterReceiver(FizzlinkUploadExecutor.this.mCancelDownloadReceiver);
                FizzlinkUploadExecutor.this.deleteTaskState(String.valueOf(FizzlinkUploadExecutor.this.mObjSequence), false);
                FizzlinkUploadExecutor.this.mService.postRunnableToDbThread(new DataBcastDeliveryStatus(MessageDeliveryStatus.DROP));
            } else {
                try {
                    if (FizzlinkUploadExecutor.this.bNeedRead) {
                        FizzlinkUploadExecutor.this.bNeedRead = false;
                        FizzlinkUploadExecutor.this.mChunksize = FizzlinkUploadExecutor.this.mChunkstream.read(FizzlinkUploadExecutor.this.mChunkbuffer, 0, FizzlinkUploadExecutor.mChunkMaxSize);
                        if (!this.mIsSent) {
                            this.mIsSent = true;
                        }
                    }
                    if (FizzlinkUploadExecutor.this.mChunksize <= 0) {
                        Log.d(FizzlinkUploadExecutor.TAG, "----UPLOADFIZZLINK: SENT COMPLETE");
                        Log.d(FizzlinkUploadExecutor.TAG, "----UPLOADFIZZLINK: Post To Notify Recipients");
                        FizzlinkUploadExecutor.this.mService.postToServiceHandler(new SetDsName(), 2);
                        try {
                            FizzlinkUploadExecutor.this.mChunkstream.close();
                        } catch (IOException e) {
                        }
                        FizzlinkUploadExecutor.this.mChunkbuffer = null;
                        FizzlinkUploadExecutor.this.deleteTaskState(String.valueOf(FizzlinkUploadExecutor.this.mObjSequence), false);
                        return;
                    }
                    Log.e(FizzlinkUploadExecutor.TAG, "UPLOADFIZZLINK:data upload chunck muserpin: " + FizzlinkUploadExecutor.this.mUserpin + " mobjsequence" + FizzlinkUploadExecutor.this.mObjSequence);
                    CatfishResult uploadDataChunk = this.catfishRestAPI.uploadDataChunk(FizzlinkUploadExecutor.this.mServer, FizzlinkUploadExecutor.this.mUserpin, FizzlinkUploadExecutor.this.mObjSequence, FizzlinkUploadExecutor.this.mDatasize, FizzlinkUploadExecutor.this.mBytestart, FizzlinkUploadExecutor.this.mChunksize, FizzlinkUploadExecutor.this.mChunkbuffer);
                    if (FizzlinkUploadExecutor.this.cancelDownload) {
                        LocalBroadcastManager.getInstance(FizzlinkUploadExecutor.this.mService).unregisterReceiver(FizzlinkUploadExecutor.this.mCancelDownloadReceiver);
                        intent = new Intent(BroadcastIntents.ACTION_UPLOAD_FIZZLINK);
                        intent.putExtra(CatfishService.PROGRESS_VALUE, 0);
                        intent.putExtra(ServerMessageDataStorage.SEQUENCE, FizzlinkUploadExecutor.this.mObjSequence);
                        intent.putExtra(CatfishService.PROGRESS_STATE, 3);
                        LocalBroadcastManager.getInstance(FizzlinkUploadExecutor.this.mService).sendBroadcast(intent);
                        FizzlinkUploadExecutor.this.deleteTaskState(String.valueOf(FizzlinkUploadExecutor.this.mObjSequence), false);
                        FizzlinkUploadExecutor.this.mService.postRunnableToDbThread(new DataBcastDeliveryStatus(MessageDeliveryStatus.DROP));
                        return;
                    }
                    long j;
                    Intent intent2;
                    if (uploadDataChunk.hasSuccess()) {
                        this.mAge = System.currentTimeMillis();
                        if (uploadDataChunk.byteend == 0) {
                            Log.d(FizzlinkUploadExecutor.TAG, "----UPLOADFIZZLINK:Byte End is 0: RESEND");
                            FizzlinkUploadExecutor.this.bNeedRead = false;
                            this.mAge = System.currentTimeMillis();
                            FizzlinkUploadExecutor.this.mService.postToServiceHandler(this, 2);
                            return;
                        } else if (FizzlinkUploadExecutor.this.mChunksize != (uploadDataChunk.byteend - FizzlinkUploadExecutor.this.mBytestart) + 1) {
                            Log.d(FizzlinkUploadExecutor.TAG, "----UPLOADFIZZLINK:TODO: HANDLE THIS BUFFERING PROBLEM: SERVER ACCEPT LESS THAN WE WANT TO.: DROP");
                            LocalBroadcastManager.getInstance(FizzlinkUploadExecutor.this.mService).unregisterReceiver(FizzlinkUploadExecutor.this.mCancelDownloadReceiver);
                            FizzlinkUploadExecutor.this.mChunkbuffer = null;
                            try {
                                FizzlinkUploadExecutor.this.mChunkstream.close();
                            } catch (IOException e2) {
                            }
                            FizzlinkUploadExecutor.this.deleteTaskState(String.valueOf(FizzlinkUploadExecutor.this.mObjSequence), false);
                            FizzlinkUploadExecutor.this.mService.postRunnableToDbThread(new DataBcastDeliveryStatus(MessageDeliveryStatus.DROP));
                            uploadDataChunk.cleaningup();
                            return;
                        } else {
                            Log.d(FizzlinkUploadExecutor.TAG, "UPLOADFIZZLINK:Chunk Sent: " + String.valueOf(uploadDataChunk.byteend - FizzlinkUploadExecutor.this.mBytestart) + " bytes: " + String.valueOf(FizzlinkUploadExecutor.this.mBytestart) + "-" + String.valueOf(uploadDataChunk.byteend) + ": SELF RE-POST");
                            FizzlinkUploadExecutor fizzlinkUploadExecutor = FizzlinkUploadExecutor.this;
                            fizzlinkUploadExecutor.mChunksent += (uploadDataChunk.byteend - FizzlinkUploadExecutor.this.mBytestart) + 1;
                            FizzlinkUploadExecutor.this.mBytestart = uploadDataChunk.byteend + 1;
                            j = (((long) FizzlinkUploadExecutor.this.mChunksent) * 100) / ((long) FizzlinkUploadExecutor.this.mDatasize);
                            intent2 = new Intent(BroadcastIntents.ACTION_UPLOAD_FIZZLINK);
                            intent2.putExtra(CatfishService.PROGRESS_VALUE, (int) j);
                            intent2.putExtra(ServerMessageDataStorage.SEQUENCE, FizzlinkUploadExecutor.this.mObjSequence);
                            LocalBroadcastManager.getInstance(FizzlinkUploadExecutor.this.mService).sendBroadcast(intent2);
                            Log.d(FizzlinkUploadExecutor.TAG, "progress fizzlink uploading : " + j + " data size :" + FizzlinkUploadExecutor.this.mDatasize + ", chunk sent " + FizzlinkUploadExecutor.this.mChunksent + ", with id : " + FizzlinkUploadExecutor.this.mObjSequence);
                            FizzlinkUploadExecutor.this.bNeedRead = true;
                            FizzlinkUploadExecutor.this.updateTaskState(String.valueOf(FizzlinkUploadExecutor.this.mObjSequence), FizzlinkUploadExecutor.this.mDataFile.getAbsolutePath(), FizzlinkUploadExecutor.this.mDatasize, FizzlinkUploadExecutor.this.mBytestart, DataStorageStreamType.FIZZLINK_DATA.ordinal(), null, false);
                            FizzlinkUploadExecutor.this.mService.postToServiceHandler(this, 2);
                        }
                    } else if (uploadDataChunk.hasFailure()) {
                        j = (((long) FizzlinkUploadExecutor.this.mChunksent) * 100) / ((long) FizzlinkUploadExecutor.this.mDatasize);
                        intent2 = new Intent(BroadcastIntents.ACTION_UPLOAD_FIZZLINK);
                        intent2.putExtra(CatfishService.PROGRESS_VALUE, (int) j);
                        intent2.putExtra(ServerMessageDataStorage.SEQUENCE, FizzlinkUploadExecutor.this.mObjSequence);
                        LocalBroadcastManager.getInstance(FizzlinkUploadExecutor.this.mService).sendBroadcast(intent2);
                        Log.d(FizzlinkUploadExecutor.TAG, "----UPLOADFIZZLINK: FAILURE !!!: Re Schedule");
                        FizzlinkUploadExecutor.this.bNeedRead = false;
                        FizzlinkUploadExecutor.this.mServer = CatfishService.getServerHost();
                        FizzlinkUploadExecutor.this.mService.scheduleRunnableToService(this, 2);
                    } else {
                        Log.e(FizzlinkUploadExecutor.TAG, "----UPLOADFIZZLINK: ERROR: DROP");
                        LocalBroadcastManager.getInstance(FizzlinkUploadExecutor.this.mService).unregisterReceiver(FizzlinkUploadExecutor.this.mCancelDownloadReceiver);
                        intent = new Intent(BroadcastIntents.ACTION_UPLOAD_FIZZLINK);
                        intent.putExtra(CatfishService.PROGRESS_VALUE, 0);
                        intent.putExtra(ServerMessageDataStorage.SEQUENCE, FizzlinkUploadExecutor.this.mObjSequence);
                        intent.putExtra(CatfishService.PROGRESS_STATE, 4);
                        LocalBroadcastManager.getInstance(FizzlinkUploadExecutor.this.mService).sendBroadcast(intent);
                        FizzlinkUploadExecutor.this.mChunkbuffer = null;
                        try {
                            FizzlinkUploadExecutor.this.mChunkstream.close();
                        } catch (IOException e3) {
                        }
                        FizzlinkUploadExecutor.this.deleteTaskState(String.valueOf(FizzlinkUploadExecutor.this.mObjSequence), false);
                        FizzlinkUploadExecutor.this.mService.postRunnableToDbThread(new DataBcastDeliveryStatus(MessageDeliveryStatus.DROP));
                    }
                    uploadDataChunk.cleaningup();
                } catch (IOException e4) {
                    Log.d(FizzlinkUploadExecutor.TAG, "----UPLOADFIZZLINK: FAIL TO READ STREAM: CANCELED");
                    LocalBroadcastManager.getInstance(FizzlinkUploadExecutor.this.mService).unregisterReceiver(FizzlinkUploadExecutor.this.mCancelDownloadReceiver);
                    FizzlinkUploadExecutor.this.deleteTaskState(String.valueOf(FizzlinkUploadExecutor.this.mObjSequence), false);
                    FizzlinkUploadExecutor.this.mService.postRunnableToDbThread(new DataBcastDeliveryStatus(MessageDeliveryStatus.DROP));
                }
            }
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    class GetSlinkFromServer implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        private boolean mIsSent;
        public int scheduleNum;
        private boolean send;

        private GetSlinkFromServer() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.send = true;
            this.mIsSent = false;
            this.scheduleNum = 0;
        }

        public void dropRunnable() {
            LocalBroadcastManager.getInstance(FizzlinkUploadExecutor.this.mService).unregisterReceiver(FizzlinkUploadExecutor.this.mCancelDownloadReceiver);
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            Log.e(FizzlinkUploadExecutor.TAG, "UPLOADFIZZLINK:GETLINK:data getslink muserpin: " + FizzlinkUploadExecutor.this.mUserpin + " mobjsequence" + FizzlinkUploadExecutor.this.mObjSequence);
            CatfishResult slink = this.catfishRestAPI.getSlink(FizzlinkUploadExecutor.this.mServer, FizzlinkUploadExecutor.this.mUserpin, FizzlinkUploadExecutor.this.mUserpin, FizzlinkUploadExecutor.this.mObjSequence);
            if (slink.hasSuccess()) {
                FizzlinkUploadExecutor.this.mSlink = slink.slink;
                FizzlinkUploadExecutor.this.mService.postRunnableToDbThread(new DataBcastDeliveryStatus(MessageDeliveryStatus.SENT));
                Intent intent = new Intent(BroadcastIntents.ACTION_UPLOAD_FIZZLINK);
                intent.putExtra(CatfishService.PROGRESS_VALUE, HttpStatus.SC_SWITCHING_PROTOCOLS);
                intent.putExtra(CatfishService.PROGRESS_STATE, 2);
                intent.putExtra(ServerMessageDataStorage.SEQUENCE, FizzlinkUploadExecutor.this.mObjSequence);
                LocalBroadcastManager.getInstance(FizzlinkUploadExecutor.this.mService).sendBroadcast(intent);
                LocalBroadcastManager.getInstance(FizzlinkUploadExecutor.this.mService).unregisterReceiver(FizzlinkUploadExecutor.this.mCancelDownloadReceiver);
            } else if (slink.hasFailure()) {
                Log.d(FizzlinkUploadExecutor.TAG, "----UPLOADFIZZLINK:GETLINK: FAILURE !!!: Re Schedule");
                FizzlinkUploadExecutor fizzlinkUploadExecutor = FizzlinkUploadExecutor.this;
                FizzlinkUploadExecutor.this.mService;
                fizzlinkUploadExecutor.mServer = CatfishService.getServerHost();
                FizzlinkUploadExecutor.this.mService.scheduleRunnableToService(this, 2);
            } else {
                Log.e(FizzlinkUploadExecutor.TAG, "----STATCOMM: ERROR: DROP");
                LocalBroadcastManager.getInstance(FizzlinkUploadExecutor.this.mService).unregisterReceiver(FizzlinkUploadExecutor.this.mCancelDownloadReceiver);
                FizzlinkUploadExecutor.this.deleteTaskState(String.valueOf(FizzlinkUploadExecutor.this.mObjSequence), false);
                FizzlinkUploadExecutor.this.mService.postRunnableToDbThread(new DataBcastDeliveryStatus(MessageDeliveryStatus.DROP));
            }
            slink.cleaningup();
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    class InvokeClientCallback implements Runnable {
        private Cursor mCursor;
        private ICatfishClientInterface mIfClient;

        public InvokeClientCallback(ICatfishClientInterface iCatfishClientInterface, Cursor cursor) {
            this.mCursor = cursor;
            this.mIfClient = iCatfishClientInterface;
        }

        public void run() {
            if (this.mIfClient != null && !this.mIfClient.isFinish()) {
                this.mIfClient.onDatabaseResponse(CatfishService.GET_ALL_UPLOADED_FIZZLINK, this.mCursor, 0);
            }
        }
    }

    class SetDsName implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        private boolean mIsSent;
        public int scheduleNum;
        private boolean send;

        private SetDsName() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.send = true;
            this.mIsSent = false;
            this.scheduleNum = 0;
        }

        public void dropRunnable() {
            LocalBroadcastManager.getInstance(FizzlinkUploadExecutor.this.mService).unregisterReceiver(FizzlinkUploadExecutor.this.mCancelDownloadReceiver);
        }

        public long getAge() {
            return this.mAge;
        }

        public String getMimeType(String str) {
            return Utils.getmimetype(Uri.parse(str));
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            String safeFileName = Utils.getSafeFileName(FizzlinkUploadExecutor.this.mDataFile.getName());
            int fizzlinkTypeFromExtension = FizzlinkUtil.getFizzlinkTypeFromExtension(FizzlinkUploadExecutor.this.mDataFile);
            FizzlinkUploadExecutor.this.mMessage;
            CatfishResult dsName = this.catfishRestAPI.setDsName(FizzlinkUploadExecutor.this.mServer, FizzlinkUploadExecutor.this.mUserpin, FizzlinkUploadExecutor.this.mUserpin, FizzlinkUploadExecutor.this.mObjSequence, safeFileName, fizzlinkTypeFromExtension, FizzlinkUploadExecutor.this.mMessage != null ? FizzlinkUploadExecutor.this.mMessage : "");
            if (dsName.hasSuccess()) {
                FizzlinkUploadExecutor.this.mService.postToServiceHandler(new GetSlinkFromServer(), 2);
            } else if (dsName.hasFailure()) {
                Log.d(FizzlinkUploadExecutor.TAG, "----UPLOADFIZZLINK:SETDSNAME: FAILURE !!!: Re Schedule");
                FizzlinkUploadExecutor fizzlinkUploadExecutor = FizzlinkUploadExecutor.this;
                FizzlinkUploadExecutor.this.mService;
                fizzlinkUploadExecutor.mServer = CatfishService.getServerHost();
                FizzlinkUploadExecutor.this.mService.scheduleRunnableToService(this, 2);
            } else {
                Log.e(FizzlinkUploadExecutor.TAG, "----UPLOADFIZZLINK:SETDSNAME: ERROR: DROP");
                LocalBroadcastManager.getInstance(FizzlinkUploadExecutor.this.mService).unregisterReceiver(FizzlinkUploadExecutor.this.mCancelDownloadReceiver);
                FizzlinkUploadExecutor.this.deleteTaskState(String.valueOf(FizzlinkUploadExecutor.this.mObjSequence), false);
                FizzlinkUploadExecutor.this.mService.postRunnableToDbThread(new DataBcastDeliveryStatus(MessageDeliveryStatus.DROP));
            }
            dsName.cleaningup();
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    public FizzlinkUploadExecutor(CatfishService catfishService, ICatfishClientInterface iCatfishClientInterface, String str, String str2, String str3) {
        this.mClientInterface = iCatfishClientInterface;
        this.mService = catfishService;
        this.mServer = str;
        this.mFilepath = str2;
        this.mMessage = str3;
        this.mDataFile = new File(str2);
        this.mSize = (int) this.mDataFile.length();
        this.mFilename = this.mDataFile.getName();
        this.mObjSequence = CatfishRESTAPI.uniqueMonotonicSequence();
        this.mUserpin = CatfishService.getUserPIN();
        LocalBroadcastManager.getInstance(this.mService).registerReceiver(this.mCancelDownloadReceiver, new IntentFilter(BroadcastIntents.ACTION_CANCEL_FIZZLINK_UPLOAD));
        Intent intent = new Intent(BroadcastIntents.ACTION_UPLOAD_FIZZLINK);
        intent.putExtra(CatfishService.PROGRESS_VALUE, 0);
        intent.putExtra(ServerMessageDataStorage.SEQUENCE, this.mObjSequence);
        LocalBroadcastManager.getInstance(this.mService).sendBroadcast(intent);
    }

    public void run() {
        try {
            this.mDatasize = Long.valueOf(this.mDataFile.length()).intValue();
            this.mChunkstream = new FileInputStream(this.mDataFile);
            this.mChunkbuffer = new byte[mChunkMaxSize];
            Log.d(TAG, "----UPLOAD FIZZLINK: Put Message in recipients record: " + this.mDataFile.getAbsolutePath());
            FizzlinkDataStorage fizzlinkDataStorage = new FizzlinkDataStorage(this.mService);
            if (isResumeProcess()) {
                this.mBytestart = getResumeUploadData().mBytestart;
                this.mChunksent = this.mBytestart;
                this.mObjSequence = Long.parseLong(getResumeUploadData().mKey);
            }
            this.mMessageObject = CatfishMessageObject.obtain();
            this.mMessageObject.message = this.mMessage;
            this.mMessageObject.object_sequence = this.mObjSequence;
            this.mMessageObject.rcvtimestamp = this.mObjSequence;
            this.mMessageObject.slink = "0";
            this.mMessageObject.datafile_path = this.mFilepath;
            this.mMessageObject.datasize = this.mSize;
            if (isResumeProcess()) {
                try {
                    this.mChunkstream.skip((long) this.mBytestart);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            } else {
                fizzlinkDataStorage.storeFizzlinkUploadMessage(this.mMessageObject);
                this.mService.postToMainHandler(new InvokeClientCallback(this.mClientInterface, fizzlinkDataStorage.getAllUploadedFizzlinkList()));
                Log.d(TAG, "----UPLOAD FIZZLINK: Put Message in recipients record: DONE");
            }
            Log.d(TAG, "----UPLOAD FIZZLINK: Post To Service: Upload DATA Chunks");
            updateTaskState(String.valueOf(this.mObjSequence), this.mDataFile.getAbsolutePath(), this.mDatasize, this.mBytestart, DataStorageStreamType.FIZZLINK_DATA.ordinal(), null, true);
            this.mService.postToServiceHandler(new DataUploadChunk(), 2);
            this.mMessageObject.recycle();
        } catch (FileNotFoundException e2) {
            Log.d(TAG, "----UPLOAD FIZZLINK DATA FILE: " + e2.toString());
            LocalBroadcastManager.getInstance(this.mService).unregisterReceiver(this.mCancelDownloadReceiver);
            this.mChunkstream = null;
        }
    }
}
