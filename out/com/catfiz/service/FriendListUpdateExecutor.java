package com.catfiz.service;

import android.database.Cursor;
import com.catfiz.backup.LocalBackup;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.util.Log;

public class FriendListUpdateExecutor implements IDropableRunnable, Runnable {
    private static final String TAG = "FriendListUpdateExecutor";
    public static String mServer;
    public static String mUserpin;
    public CatfishRESTAPI catfishRestAPI = null;
    private long mAge = 0;
    public ICatfishClientInterface mIfClient = null;
    public int mMaxTries;
    public volatile CatfishService mService = null;
    public int mTries;
    public int scheduleNum = 0;

    class buildFriendList implements Runnable {
        private String mFriendList;

        private buildFriendList() {
        }

        public void run() {
            Cursor friendPINs = new FriendListDataStorage(FriendListUpdateExecutor.this.mService).getFriendPINs();
            int columnIndex = friendPINs.getColumnIndex(FriendListDataStorage.FRIENDPIN);
            int count = friendPINs.getCount();
            this.mFriendList = "";
            friendPINs.moveToFirst();
            for (int i = 0; i < count; i++) {
                if (i > 0) {
                    this.mFriendList += ",";
                }
                this.mFriendList += friendPINs.getString(columnIndex);
                friendPINs.moveToNext();
            }
            if (this.mFriendList.length() > 0) {
                Log.d(FriendListUpdateExecutor.TAG, "FRIENDLIST UPDATE: List is built: Post to service to send");
                FriendListUpdateExecutor.this.mService.postRunnableToService(new updateFriendList(this.mFriendList, FriendListUpdateExecutor.this.mMaxTries));
            } else {
                Log.e(FriendListUpdateExecutor.TAG, "FRIENDLIST UPDATE: NO FRIEND PINS FOUND: DROP !!!");
            }
            this.mFriendList = null;
            friendPINs.close();
        }
    }

    class updateFriendList implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI = null;
        private long mAge = 0;
        private String mFriendList;
        private int mMaxTries;
        private long mTimeStamp;
        private int mTries;
        public int scheduleNum = 0;

        public updateFriendList(String str, int i) {
            this.mFriendList = str;
            this.mTimeStamp = CatfishRESTAPI.uniqueMonotonicSequence();
            this.mTries = 0;
            this.mMaxTries = i;
            this.mAge = System.currentTimeMillis();
        }

        public void dropRunnable() {
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            CatfishResult friendlistSet = this.catfishRestAPI.friendlistSet(FriendListUpdateExecutor.mServer, FriendListUpdateExecutor.mUserpin, this.mTimeStamp, this.mFriendList);
            if (friendlistSet.hasSuccess()) {
                Log.d(FriendListUpdateExecutor.TAG, "FRIENDLIST UPDATE: Update timestamp to prefs");
                CatfishService.getCatfishPreferences().edit().putLong(CatfishService.FRIENDLIST_TIMESTAMP, this.mTimeStamp).commit();
            } else if (friendlistSet.hasFailure()) {
                this.mTries++;
                if (this.mTries < this.mMaxTries) {
                    FriendListUpdateExecutor.mServer = CatfishService.getServerHost();
                    FriendListUpdateExecutor.this.mService.scheduleRunnableToService(this, 0);
                }
            } else {
                Log.e(FriendListUpdateExecutor.TAG, "FRIENDLIST UPDATE: Error when update friendlist: DROP !!!");
            }
            friendlistSet.cleaningup();
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    public FriendListUpdateExecutor(CatfishService catfishService, String str, String str2) {
        this.mService = catfishService;
        mServer = str;
        mUserpin = str2;
        this.mIfClient = null;
        this.mTries = 0;
        this.mMaxTries = 99;
        this.mAge = System.currentTimeMillis();
    }

    public FriendListUpdateExecutor(CatfishService catfishService, String str, String str2, int i) {
        this.mService = catfishService;
        mServer = str;
        mUserpin = str2;
        this.mIfClient = null;
        this.mTries = 0;
        this.mMaxTries = i;
        this.mAge = System.currentTimeMillis();
    }

    public FriendListUpdateExecutor(ICatfishClientInterface iCatfishClientInterface, CatfishService catfishService, String str, String str2) {
        this.mService = catfishService;
        mServer = str;
        mUserpin = str2;
        this.mIfClient = iCatfishClientInterface;
        this.mTries = 0;
        this.mMaxTries = 99;
        this.mAge = System.currentTimeMillis();
    }

    public void dropRunnable() {
    }

    public long getAge() {
        return this.mAge;
    }

    public int getScheduleNum() {
        return this.scheduleNum;
    }

    public void incraseScheduleNum() {
        this.scheduleNum++;
    }

    public void run() {
        CatfishResult friendlistGetInfo = this.catfishRestAPI.friendlistGetInfo(mServer, mUserpin);
        if (friendlistGetInfo.hasSuccess()) {
            Log.d(TAG, "FRIENDLIST UPDATE: Check timestamp");
            CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
            long j = catfishPreferences.getLong(CatfishService.FRIENDLIST_TIMESTAMP, 0);
            if (j < friendlistGetInfo.timestamp && friendlistGetInfo.timestamp != 0) {
                catfishPreferences.edit().putLong(CatfishService.FRIENDLIST_TIMESTAMP, friendlistGetInfo.timestamp).commit();
            } else if (j != friendlistGetInfo.timestamp) {
                this.mService.postRunnableToDbThread(new buildFriendList());
            }
            new LocalBackup().backupFriendlist(this.mService);
        } else if (friendlistGetInfo.hasFailure()) {
            this.mTries++;
            if (this.mTries < this.mMaxTries) {
                mServer = CatfishService.getServerHost();
                this.mService.scheduleRunnableToService(this, 0);
            }
        } else {
            this.mService.postRunnableToDbThread(new buildFriendList());
            new LocalBackup().backupFriendlist(this.mService);
        }
        friendlistGetInfo.cleaningup();
    }

    public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        this.catfishRestAPI = catfishRESTAPI;
    }
}
