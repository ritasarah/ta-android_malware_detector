package com.catfiz.service;

import android.os.Environment;
import com.catfiz.media.StorageDir;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.uidbexec.CUIDBSaveFizzlinkInfo;
import com.catfiz.util.Log;
import com.catfiz.util.ObjectLockManager;
import com.catfiz.util.Utils;
import java.io.File;

public class SlinkFileInfoExecutor implements IDropableRunnable, Runnable {
    private static final String TAG = "SlinkFileInfoExecutor";
    public static final String mParentPath = StorageDir.getMediaDir(8);
    private CatfishRESTAPI catfishRestAPI = null;
    private long mAge = 0;
    private File mDataFile = null;
    private String mDataPath = null;
    private int mDatasize = 0;
    private boolean mDownload = false;
    private String mFileName = null;
    private boolean mIsGroup = false;
    public String mLockKey = null;
    public String mLockObj = null;
    private String mSenderName = null;
    private String mSenderPin = null;
    private long mSequence = 0;
    private String mServer = null;
    private CatfishService mService = null;
    private String mSlink = null;
    private String mUserpin = null;
    public int scheduleNum = 0;

    public SlinkFileInfoExecutor(CatfishService catfishService, long j, String str, String str2, boolean z, boolean z2) {
        this.mSequence = j;
        this.mService = catfishService;
        this.mServer = str;
        this.mUserpin = "DLFIZZAPP";
        this.mSlink = str2;
        this.mDownload = z;
        this.mIsGroup = z2;
        this.mLockKey = this.mSlink;
        this.mLockObj = String.valueOf(CatfishRESTAPI.uniqueMonotonicSequence());
        ObjectLockManager.acquireLockKey(this.mLockKey, this.mLockObj);
        this.mAge = System.currentTimeMillis();
    }

    public void dropRunnable() {
        ObjectLockManager.releaseLockKey(this.mLockKey);
    }

    public long getAge() {
        return this.mAge;
    }

    public int getScheduleNum() {
        return this.scheduleNum;
    }

    public void incraseScheduleNum() {
        this.scheduleNum++;
    }

    public void run() {
        if (!ObjectLockManager.isLockKeyLocked(this.mLockKey)) {
            Log.e(TAG, "SLINKINFO: INCONSISTENT LOCK!!!: DROP");
        } else if (ObjectLockManager.checkLockKeyString(this.mLockKey, this.mLockObj)) {
            Log.d(TAG, "SLINKINFO: WE HAVE HELD THE LOCK: Continue...");
            CatfishResult slinkInfo = this.catfishRestAPI.getSlinkInfo(this.mUserpin, this.mSlink);
            if (slinkInfo.hasFailure()) {
                Log.d(TAG, "SLINKINFO: Get Slink Info FAIL: Reschedule !!!");
                this.mService.scheduleRunnableToService(this, 2);
                slinkInfo.cleaningup();
            } else if (slinkInfo.hasNotFound()) {
                Log.d(TAG, "SLINKINFO: NOT FOUND: DROP !!!");
                ObjectLockManager.releaseLockKey(this.mLockKey);
                slinkInfo.cleaningup();
            } else if (!slinkInfo.hasSuccess()) {
                Log.e(TAG, "SLINKINFO: ERROR: DROP !!!");
                ObjectLockManager.releaseLockKey(this.mLockKey);
                slinkInfo.cleaningup();
            } else if (slinkInfo.datasize != slinkInfo.currentdatasize) {
                ObjectLockManager.releaseLockKey(this.mLockKey);
                Log.e(TAG, "FIZZLINK THUMB RECEIVE: INVALID DATA SIZE: DROP !!!");
                slinkInfo.cleaningup();
            } else {
                this.mFileName = slinkInfo.obyek_name;
                if (this.mFileName == null) {
                    this.mFileName = "file_unkown";
                }
                this.mFileName = Utils.buildFileName(this.mFileName, slinkInfo.mime_type);
                this.mSenderPin = slinkInfo.userpin;
                this.mSenderName = slinkInfo.username;
                this.mDatasize = slinkInfo.datasize;
                this.mDataPath = mParentPath + this.mFileName;
                this.mDataFile = new File(this.mDataPath);
                Log.d(TAG, "slink data path: " + this.mDataPath);
                String externalStorageState = Environment.getExternalStorageState();
                if (externalStorageState.equals("mounted")) {
                    File parentFile = this.mDataFile.getParentFile();
                    if (parentFile.exists() || parentFile.mkdirs()) {
                        String[] strArr = new String[]{String.valueOf(slinkInfo.dataType), slinkInfo.desciption, this.mSenderName};
                        CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
                        catfishMessageObject.slink = this.mSlink;
                        catfishMessageObject.datafile_path = this.mDataPath;
                        catfishMessageObject.datasize = this.mDatasize;
                        catfishMessageObject.filename = this.mFileName;
                        catfishMessageObject.sendername = this.mSenderName;
                        catfishMessageObject.senderpin = this.mSenderPin;
                        catfishMessageObject.desc = slinkInfo.desciption;
                        catfishMessageObject.datatype = slinkInfo.dataType;
                        catfishMessageObject.sequence = this.mSequence;
                        catfishMessageObject.rcvtimestamp = CatfishRESTAPI.uniqueMonotonicSequence();
                        this.mService.postToDBHandler(new CUIDBSaveFizzlinkInfo(catfishMessageObject, this.mIsGroup));
                        Log.d(TAG, "save fizzlink info");
                        ObjectLockManager.releaseLockKey(this.mLockKey);
                        if (this.mDownload) {
                            CatfishService catfishService = this.mService;
                            CatfishService catfishService2 = this.mService;
                            CatfishService catfishService3 = this.mService;
                            catfishService.postRunnableToService(new SlinkDataDownloadExecutor(catfishService2, CatfishService.getCurrentServerHost(), "DLFIZZAPP", this.mSlink, null, this.mDatasize, this.mDataPath, this.mFileName, false), 2);
                            return;
                        }
                        return;
                    }
                    Log.e(TAG, "GETSLINKDNAME: Path to file could not be created.");
                    ObjectLockManager.releaseLockKey(this.mLockKey);
                    return;
                }
                Log.e(TAG, "GETSLINKDNAME: media not mounted in is state: " + externalStorageState + ":DROP !!!");
                ObjectLockManager.releaseLockKey(this.mLockKey);
            }
        } else {
            Log.d(TAG, "SLINKINFO: OOPS LOCK ITS NOT MINE: CANCEL");
            ObjectLockManager.releaseLockKey(this.mLockKey);
        }
    }

    public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
        this.catfishRestAPI = catfishRESTAPI;
    }
}
