package com.catfiz.service;

import android.database.Cursor;
import com.catfiz.service.CatfishRESTAPI.CatfishResult;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.util.Log;

public class SendStatusResponseExecutor implements Runnable {
    private static final String TAG = "SendStatusResponseExecutor";
    public boolean mCek;
    public String mComentOwner;
    public long mComentsequence;
    public String mConvKey;
    public ICatfishClientInterface mIfClient = null;
    public String mMessage;
    public MessageType mMessageType;
    public long mObjSequence;
    public String mOldConvKey;
    public long mRcvTimestamp;
    public String mRecipient;
    public long mSequence;
    public String mServer;
    public volatile CatfishService mService = null;
    public String mUsername;
    public String mUserpin;

    class BcastCommentToFriendList implements IDropableRunnable, Runnable {
        private CatfishRESTAPI catfishRestAPI;
        private long mAge;
        public int scheduleNum;

        private BcastCommentToFriendList() {
            this.mAge = System.currentTimeMillis();
            this.catfishRestAPI = null;
            this.scheduleNum = 0;
        }

        public void dropRunnable() {
            Log.e(SendStatusResponseExecutor.TAG, "SEND STATUS COMMENT: SEND ERROR: DROP BY SERVICE !!!");
            SendStatusResponseExecutor.this.mService.postRunnableToDbThread(new UpdateSendMessageStatusToDB(MessageDeliveryStatus.DROP));
        }

        public long getAge() {
            return this.mAge;
        }

        public int getScheduleNum() {
            return this.scheduleNum;
        }

        public void incraseScheduleNum() {
            this.scheduleNum++;
        }

        public void run() {
            Log.d(SendStatusResponseExecutor.TAG, "mesagetipenya :" + SendStatusResponseExecutor.this.mMessageType.ordinal());
            CatfishResult friendlistBcast = this.catfishRestAPI.friendlistBcast(SendStatusResponseExecutor.this.mServer, SendStatusResponseExecutor.this.mUserpin, SendStatusResponseExecutor.this.mUsername, SendStatusResponseExecutor.this.mMessageType.ordinal(), SendStatusResponseExecutor.this.mRecipient, SendStatusResponseExecutor.this.mRecipient + " " + " " + SendStatusResponseExecutor.this.mMessage, SendStatusResponseExecutor.this.mSequence, SendStatusResponseExecutor.this.mComentsequence, SendStatusResponseExecutor.this.mComentOwner);
            if (friendlistBcast.hasSuccess()) {
                SendStatusResponseExecutor.this.mService.postRunnableToDbThread(new UpdateSendMessageStatusToDB(MessageDeliveryStatus.SENT));
                Log.d(SendStatusResponseExecutor.TAG, "sukses gan ");
            } else if (friendlistBcast.hasFailure()) {
                SendStatusResponseExecutor.this.mServer = CatfishService.getServerHost();
                SendStatusResponseExecutor.this.mService.scheduleRunnableToService(this, 1);
            } else {
                Log.e(SendStatusResponseExecutor.TAG, "SEND STATUS COMMENT: SEND ERROR: DROP !!!");
                SendStatusResponseExecutor.this.mService.postRunnableToDbThread(new UpdateSendMessageStatusToDB(MessageDeliveryStatus.DROP));
            }
            friendlistBcast.cleaningup();
        }

        public void setRestAPI(CatfishRESTAPI catfishRESTAPI) {
            this.catfishRestAPI = catfishRESTAPI;
        }
    }

    class InvokeClientCallback implements Runnable {
        private Cursor mCursor;
        private ICatfishClientInterface mIfClient;

        public InvokeClientCallback(ICatfishClientInterface iCatfishClientInterface, Cursor cursor) {
            this.mCursor = cursor;
            this.mIfClient = iCatfishClientInterface;
        }

        public void run() {
            if (!this.mIfClient.isFinish()) {
                this.mIfClient.onDatabaseResponse(CatfishService.GET_STATCOMM_CONVERSATION_KEY, this.mCursor, 0);
            }
        }
    }

    class InvokeClientCallbackForResponse implements Runnable {
        private boolean mflag;
        private boolean mfun;
        private boolean mlike;
        private boolean mpret;

        public InvokeClientCallbackForResponse(boolean z, boolean z2, boolean z3, boolean z4) {
            this.mlike = z;
            this.mfun = z2;
            this.mflag = z3;
            this.mpret = z4;
        }

        public void run() {
            if (!SendStatusResponseExecutor.this.mIfClient.isFinish()) {
            }
        }
    }

    class UpdateSendMessageStatusToDB implements Runnable {
        private MessageDeliveryStatus mDeliveryStatus;

        public UpdateSendMessageStatusToDB(MessageDeliveryStatus messageDeliveryStatus) {
            this.mDeliveryStatus = messageDeliveryStatus;
        }

        public void run() {
            CatfishDataStorage catfishDataStorage = new CatfishDataStorage(SendStatusResponseExecutor.this.mService);
            CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
            catfishMessageObject.userpin = SendStatusResponseExecutor.this.mUserpin;
            catfishMessageObject.conversation_key = SendStatusResponseExecutor.this.mOldConvKey;
            catfishMessageObject.sequence = SendStatusResponseExecutor.this.mSequence;
            catfishMessageObject.recipient = SendStatusResponseExecutor.this.mRecipient;
            catfishMessageObject.deliverystatus = this.mDeliveryStatus;
            if (!(SendStatusResponseExecutor.this.mIfClient == null || SendStatusResponseExecutor.this.mIfClient.isFinish())) {
                SendStatusResponseExecutor.this.mService.postToMainHandler(new InvokeClientCallback(SendStatusResponseExecutor.this.mIfClient, catfishDataStorage.getChatConversation(SendStatusResponseExecutor.this.mOldConvKey)));
            }
            catfishMessageObject.cleaningup();
        }
    }

    public SendStatusResponseExecutor(ICatfishClientInterface iCatfishClientInterface, CatfishService catfishService, String str, String str2, String str3, String str4, String str5, String str6, long j, long j2, String str7, boolean z) {
        this.mIfClient = iCatfishClientInterface;
        this.mService = catfishService;
        this.mServer = str;
        this.mUserpin = str2;
        this.mUsername = str3;
        this.mRecipient = str4;
        this.mComentOwner = str7;
        if (str6.equals("like")) {
            this.mMessageType = MessageType.LIKE;
        } else if (str6.equals("funny")) {
            this.mMessageType = MessageType.FUNNY;
        } else if (str6.equals("pret")) {
            this.mMessageType = MessageType.PRET;
        } else {
            this.mMessageType = MessageType.FLAG;
        }
        this.mCek = z;
        this.mMessage = str5;
        this.mObjSequence = j;
        this.mComentsequence = j2;
        this.mSequence = CatfishRESTAPI.uniqueMonotonicSequence();
        this.mRcvTimestamp = this.mSequence;
        this.mOldConvKey = "sc:" + this.mRecipient + ":" + String.valueOf(j);
        if (str6.equals("like")) {
            this.mConvKey = "scl:" + this.mComentOwner + ":" + String.valueOf(this.mComentsequence) + ":" + this.mUserpin;
        } else if (str6.equals("funny")) {
            this.mConvKey = "scf:" + this.mComentOwner + ":" + String.valueOf(this.mComentsequence) + ":" + this.mUserpin;
        } else if (str6.equals("pret")) {
            this.mConvKey = "scp:" + this.mComentOwner + ":" + String.valueOf(this.mComentsequence) + ":" + this.mUserpin;
        } else {
            this.mConvKey = "scb:" + this.mComentOwner + ":" + String.valueOf(this.mComentsequence) + ":" + this.mUserpin;
        }
    }

    public void run() {
        CatfishDataStorage catfishDataStorage = new CatfishDataStorage(this.mService);
        CatfishMessageObject catfishMessageObject = new CatfishMessageObject();
        catfishMessageObject.userpin = this.mUserpin;
        catfishMessageObject.username = this.mUsername;
        catfishMessageObject.recipient = this.mRecipient;
        catfishMessageObject.messagetype = this.mMessageType;
        catfishMessageObject.rcvtimestamp = this.mRcvTimestamp;
        catfishMessageObject.conversation_key = this.mConvKey;
        catfishMessageObject.message = this.mMessage;
        catfishMessageObject.deliverystatus = MessageDeliveryStatus.QUEUEING;
        catfishMessageObject.sequence = this.mSequence;
        catfishMessageObject.object_sequence = this.mComentsequence;
        catfishMessageObject.object_owner = this.mComentOwner;
        if (this.mCek) {
            Log.d(TAG, "mUserpin:" + this.mUserpin + " mConvKey:" + this.mConvKey + " MessageType.LIKE.ordinal():" + MessageType.LIKE.ordinal());
            boolean isResponseAlready = catfishDataStorage.isResponseAlready(this.mUserpin, this.mConvKey, MessageType.LIKE.ordinal());
            boolean isResponseAlready2 = catfishDataStorage.isResponseAlready(this.mUserpin, this.mConvKey, MessageType.FUNNY.ordinal());
            boolean isResponseAlready3 = catfishDataStorage.isResponseAlready(this.mUserpin, this.mConvKey, MessageType.PRET.ordinal());
            boolean isResponseAlready4 = catfishDataStorage.isResponseAlready(this.mUserpin, this.mConvKey, MessageType.FLAG.ordinal());
            if (isResponseAlready) {
                Log.d(TAG, "Sudah ada like bang");
            } else {
                Log.d(TAG, "Blm ada like bang");
            }
            if (!(this.mIfClient == null || this.mIfClient.isFinish())) {
                this.mService.postToMainHandler(new InvokeClientCallbackForResponse(isResponseAlready, isResponseAlready2, isResponseAlready4, isResponseAlready3));
            }
        } else if (catfishDataStorage.isResponseAlready(this.mUserpin, this.mConvKey, this.mMessageType.ordinal())) {
            Log.d(TAG, "Sudah pernah like");
            if (catfishMessageObject.messagetype == MessageType.LIKE) {
                catfishMessageObject.messagetype = MessageType.UNLIKE;
                this.mMessageType = MessageType.UNLIKE;
            }
            if (catfishDataStorage.deleteUserMessageWConvKeyForResponse(catfishMessageObject, null)) {
                if (!(this.mIfClient == null || this.mIfClient.isFinish())) {
                    this.mService.postToMainHandler(new InvokeClientCallback(this.mIfClient, catfishDataStorage.getChatConversation(this.mOldConvKey)));
                }
                this.mService.postToServiceHandler(new BcastCommentToFriendList(), 1);
            } else {
                Log.e(TAG, "SEND STATUS COMMENT: Write to DB FAIL: DROP !!!");
                if (!(this.mIfClient == null || this.mIfClient.isFinish())) {
                    this.mService.postToMainHandler(new InvokeClientCallback(this.mIfClient, catfishDataStorage.getChatConversation(this.mOldConvKey)));
                }
            }
        } else if (catfishDataStorage.storeUserMessageWConvKeyForResponse(catfishMessageObject, null)) {
            if (!(this.mIfClient == null || this.mIfClient.isFinish())) {
                this.mService.postToMainHandler(new InvokeClientCallback(this.mIfClient, catfishDataStorage.getChatConversation(this.mOldConvKey)));
            }
            this.mService.postToServiceHandler(new BcastCommentToFriendList(), 1);
        } else {
            Log.e(TAG, "SEND STATUS COMMENT: Write to DB FAIL: DROP !!!");
            if (!(this.mIfClient == null || this.mIfClient.isFinish())) {
                this.mService.postToMainHandler(new InvokeClientCallback(this.mIfClient, catfishDataStorage.getChatConversation(this.mOldConvKey)));
            }
        }
        catfishMessageObject.cleaningup();
    }
}
