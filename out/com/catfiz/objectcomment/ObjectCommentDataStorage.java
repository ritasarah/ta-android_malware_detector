package com.catfiz.objectcomment;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;
import com.catfiz.service.CatfishMessageObject;
import com.catfiz.util.Log;

public class ObjectCommentDataStorage {
    public static final String CONTEXT = "context";
    public static final String CONVKEY = "convkey";
    public static final String DATAPATH = "datapath";
    public static final String LEAVE = "leave";
    public static final String MESSAGE = "message";
    public static final String MESSAGECOUNT = "msgcount";
    public static final String OBJECTCOMMENT_LIST_TABLE_NAME = "objectcomment_list";
    public static final String OBJECTCOMMENT_MESSAGE_TABLE_NAME = "objectcomment_message";
    public static final String OBJECTKEY = "objkey";
    public static final String OBJECTKEY_IDX = "objectkey_idx";
    public static final String OBJECTOWNER = "objowner";
    public static final String OBJECTSEQUENCE = "objsequence";
    public static final String OBJECTTYPE = "objtype";
    public static final String RDCOUNTER = "rdcounter";
    public static final String SENDERPIN = "senderpin";
    public static final String SEQUENCE = "sequence";
    private static final String TAG = "ObjectCommentDataStorage";
    public static final String TIMESTAMP = "timestamp";
    public static final String UNREAD = "unread";
    private static SQLiteDatabase mCatfishDataStorageDB = null;
    private static DatabaseHelper mDBHelper = null;
    private Context mContext;

    class DatabaseHelper extends SQLiteOpenHelper {
        private static final String DATABASE_NAME = "catfiz_objectcomment.db";
        private static final int DATABASE_VERSION = 1;
        private Context mContext = null;

        public DatabaseHelper(Context context) {
            super(context, DATABASE_NAME, null, DATABASE_VERSION);
            this.mContext = context;
        }

        private void buildObjectCommentListTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS objectcomment_list (_id INTEGER PRIMARY KEY,objkey VARCHAR(23),objowner VARCHAR(10),objsequence INTEGER NOT NULL DEFAULT 0,msgcount INTEGER NOT NULL DEFAULT 0,rdcounter INTEGER NOT NULL DEFAULT 0,objtype INTEGER NOT NULL DEFAULT 0,convkey VARCHAR(21),datapath TEXT,context INTEGER NOT NULL DEFAULT 0,message TEXT,timestamp INTEGER NOT NULL DEFAULT 0,leave INTEGER NOT NULL DEFAULT 0,unread INTEGER NOT NULL DEFAULT 0,UNIQUE (timestamp));");
        }

        private void buildObjectCommentMessageTable(SQLiteDatabase sQLiteDatabase) {
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS objectcomment_message (_id INTEGER PRIMARY KEY,objkey VARCHAR(23),objowner VARCHAR(10),objsequence INTEGER NOT NULL DEFAULT 0,senderpin INTEGER NOT NULL DEFAULT 0,sequence INTEGER NOT NULL DEFAULT 0,message INTEGER NOT NULL DEFAULT 0,convkey VARCHAR(21),rdcounter TEXT,timestamp INTEGER NOT NULL DEFAULT 0,UNIQUE (timestamp));");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS objectkey_idx ON objectcomment_message(objkey);");
        }

        public void onCreate(SQLiteDatabase sQLiteDatabase) {
            buildObjectCommentListTable(sQLiteDatabase);
            buildObjectCommentMessageTable(sQLiteDatabase);
        }

        public void onUpgrade(SQLiteDatabase sQLiteDatabase, int i, int i2) {
        }
    }

    public ObjectCommentDataStorage(Context context) {
        if (mDBHelper == null) {
            Log.d(TAG, "Create new DB Helper");
            mDBHelper = new DatabaseHelper(context);
        }
        this.mContext = context;
    }

    public Cursor getAllObjectCommentList() {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(OBJECTCOMMENT_LIST_TABLE_NAME, null, null, null, null, null, "timestamp DESC");
    }

    public SQLiteDatabase getDB() {
        try {
            mCatfishDataStorageDB = mDBHelper.getWritableDatabase();
            return mCatfishDataStorageDB;
        } catch (SQLiteException e) {
            e.printStackTrace();
            Log.e(TAG, "FATAL ERROR IN DB: " + e.toString());
            System.exit(0);
            return null;
        } catch (Exception e2) {
            e2.printStackTrace();
            Log.e(TAG, "FATAL ERROR IN DB: " + e2.toString());
            System.exit(0);
            return null;
        }
    }

    public Cursor getObjectCommentMessage(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return null;
        }
        return db.query(OBJECTCOMMENT_MESSAGE_TABLE_NAME, null, "objkey = '" + catfishMessageObject.objectKey + "'", null, null, null, "timestamp DESC");
    }

    public boolean storeSingleObjectCommentList(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(OBJECTOWNER, catfishMessageObject.object_owner);
        contentValues.put(OBJECTSEQUENCE, Long.valueOf(catfishMessageObject.object_sequence));
        contentValues.put(OBJECTTYPE, Integer.valueOf(catfishMessageObject.objectCommentType));
        contentValues.put(CONVKEY, catfishMessageObject.conversation_key);
        contentValues.put(DATAPATH, catfishMessageObject.datafile_path);
        contentValues.put(CONTEXT, Integer.valueOf(catfishMessageObject.objectCommentContext));
        contentValues.put(MESSAGE, catfishMessageObject.message);
        contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.sequence));
        return db.insert(OBJECTCOMMENT_LIST_TABLE_NAME, null, contentValues) > 0;
    }

    public boolean storeSingleObjectCommentMessage(CatfishMessageObject catfishMessageObject) {
        SQLiteDatabase db = getDB();
        if (db == null) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put(OBJECTOWNER, catfishMessageObject.object_owner);
        contentValues.put(OBJECTSEQUENCE, Long.valueOf(catfishMessageObject.object_sequence));
        contentValues.put(SENDERPIN, catfishMessageObject.senderpin);
        contentValues.put(SEQUENCE, Long.valueOf(catfishMessageObject.sequence));
        contentValues.put(MESSAGE, catfishMessageObject.message);
        contentValues.put(CONVKEY, catfishMessageObject.conversation_key);
        contentValues.put(RDCOUNTER, Long.valueOf(catfishMessageObject.rdcounter));
        contentValues.put(TIMESTAMP, Long.valueOf(catfishMessageObject.sequence));
        db.insert(OBJECTCOMMENT_MESSAGE_TABLE_NAME, null, contentValues);
        return true;
    }

    public void updateObjectCommentListLeave(CatfishMessageObject catfishMessageObject, boolean z) {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(LEAVE, Integer.valueOf(z ? 1 : 0));
            db.update(OBJECTCOMMENT_LIST_TABLE_NAME, contentValues, "objkey = '" + catfishMessageObject.objectKey + "'", null);
        }
    }

    public void updateObjectCommentListUnread(CatfishMessageObject catfishMessageObject, boolean z) {
        SQLiteDatabase db = getDB();
        if (db != null) {
            ContentValues contentValues = new ContentValues();
            contentValues.put(UNREAD, Integer.valueOf(z ? 1 : 0));
            db.update(OBJECTCOMMENT_LIST_TABLE_NAME, contentValues, "objkey = '" + catfishMessageObject.objectKey + "'", null);
        }
    }
}
