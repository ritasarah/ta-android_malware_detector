package com.catfiz.util;

import android.content.res.Resources;
import android.graphics.drawable.Animatable;
import android.graphics.drawable.Drawable;
import android.os.SystemClock;
import com.catfiz.sticker.IStickerClientInterface;
import com.catfiz.util.DrawableContainer.DrawableContainerState;
import java.lang.ref.WeakReference;

public class AnimationDrawable extends DrawableContainer implements Animatable, Runnable {
    private static final String TAG = "AnimationDrawable";
    private final AnimationState mAnimationState;
    private int mCurFrame;
    private int mCurLoop;
    private String mData;
    private int mFrameNumber;
    private int mLoopNumber;
    private boolean mMutated;
    private WeakReference stickerClientInterfaceReference;

    final class AnimationState extends DrawableContainerState {
        private int[] mDurations;
        private boolean mOneShot;

        AnimationState(AnimationState animationState, AnimationDrawable animationDrawable, Resources resources) {
            super(animationState, animationDrawable, resources);
            if (animationState != null) {
                this.mDurations = animationState.mDurations;
                this.mOneShot = animationState.mOneShot;
                return;
            }
            this.mDurations = new int[getChildren().length];
            this.mOneShot = true;
        }

        public void addFrame(Drawable drawable, int i) {
            this.mDurations[super.addChild(drawable)] = i;
        }

        public void growArray(int i, int i2) {
            super.growArray(i, i2);
            Object obj = new int[i2];
            System.arraycopy(this.mDurations, 0, obj, 0, i);
            this.mDurations = obj;
        }

        public Drawable newDrawable() {
            return new AnimationDrawable(this, null);
        }

        public Drawable newDrawable(Resources resources) {
            return new AnimationDrawable(this, resources);
        }
    }

    public AnimationDrawable() {
        this(null, null);
    }

    private AnimationDrawable(AnimationState animationState, Resources resources) {
        this.mCurFrame = -1;
        this.mCurLoop = 0;
        this.mLoopNumber = 0;
        DrawableContainerState animationState2 = new AnimationState(animationState, this, resources);
        this.mAnimationState = animationState2;
        setConstantState(animationState2);
        if (animationState != null) {
            setFrame(0, true, false);
        }
    }

    public AnimationDrawable(String str, IStickerClientInterface iStickerClientInterface, boolean z) {
        this(null, null);
        this.stickerClientInterfaceReference = new WeakReference(iStickerClientInterface);
        this.mData = str;
    }

    private void nextFrame(boolean z) {
        boolean z2 = false;
        int i = this.mCurFrame + 1;
        int childCount = this.mAnimationState.getChildCount();
        if (i >= childCount) {
            this.mCurLoop++;
            i = 0;
        }
        if (!this.mAnimationState.mOneShot || ((this.mLoopNumber > 0 && this.mCurLoop < this.mLoopNumber) || i < childCount - 1)) {
            z2 = true;
        }
        setFrame(i, z, z2);
    }

    private void setFrame(int i, boolean z, boolean z2) {
        if (i < this.mAnimationState.getChildCount()) {
            this.mCurFrame = i;
            selectDrawable(i);
            if (z) {
                unscheduleSelf(this);
            }
            if (z2) {
                scheduleSelf(this, SystemClock.uptimeMillis() + ((long) this.mAnimationState.mDurations[i]));
            }
        }
    }

    public void addFrame(Drawable drawable, int i) {
        this.mAnimationState.addFrame(drawable, i);
        if (this.mCurFrame < 0) {
            setFrame(0, true, false);
        }
    }

    public int getAllocatedFrameNumber() {
        return this.mFrameNumber;
    }

    public String getCode() {
        return this.mData;
    }

    public int getDuration(int i) {
        return this.mAnimationState.mDurations[i];
    }

    public Drawable getFrame(int i) {
        return this.mAnimationState.getChildren()[i];
    }

    public int getNumberOfFrames() {
        return this.mAnimationState.getChildCount();
    }

    public IStickerClientInterface getStickerClientInterface() {
        return (IStickerClientInterface) this.stickerClientInterfaceReference.get();
    }

    public boolean isOneShot() {
        return this.mAnimationState.mOneShot;
    }

    public boolean isRunning() {
        return this.mCurFrame > -1;
    }

    public Drawable mutate() {
        if (!this.mMutated && super.mutate() == this) {
            this.mAnimationState.mDurations = (int[]) this.mAnimationState.mDurations.clone();
            this.mMutated = true;
        }
        return this;
    }

    public void run() {
        nextFrame(false);
    }

    public void setFrameNUmber(int i) {
        this.mFrameNumber = i;
    }

    public void setLoopNumber(int i) {
        this.mLoopNumber = i;
    }

    public void setOneShot(boolean z) {
        this.mAnimationState.mOneShot = z;
    }

    public boolean setVisible(boolean z, boolean z2) {
        boolean visible = super.setVisible(z, z2);
        if (!z) {
            unscheduleSelf(this);
        } else if (visible || z2) {
            setFrame(0, true, true);
            this.mCurLoop = 0;
            Log.d(TAG, "curframe:" + getNumberOfFrames());
        }
        return visible;
    }

    public void start() {
        if (!isRunning()) {
            run();
        }
    }

    public void stop() {
        if (isRunning()) {
            unscheduleSelf(this);
        }
    }

    public void unscheduleSelf(Runnable runnable) {
        this.mCurFrame = -1;
        super.unscheduleSelf(runnable);
    }
}
