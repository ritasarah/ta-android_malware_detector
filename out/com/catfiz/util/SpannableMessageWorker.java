package com.catfiz.util;

import android.content.Context;
import android.content.res.Resources;
import android.os.AsyncTask;
import android.text.Spannable;
import android.widget.TextView;
import java.lang.ref.WeakReference;

public class SpannableMessageWorker {
    private static final String TAG = "SpannableMessageWorker";
    protected Context mContext;
    private String mDefaultMessage;
    private boolean mExitTasksEarly = false;
    private String mLoadingMessage;
    private SpannableMessageCache mLongMessageCache;
    protected LongMessageWorkerAdapter mLongMessageWorkerAdapter;

    class AsyncObject {
        private final WeakReference longMessageWorkerTaskReference;
        private String message;
        private Resources res;

        public AsyncObject(Resources resources, String str, LongMessageWorkerTask longMessageWorkerTask) {
            this.res = resources;
            this.message = str;
            this.longMessageWorkerTaskReference = new WeakReference(longMessageWorkerTask);
        }

        public LongMessageWorkerTask getLongMessageWorkerTask() {
            return (LongMessageWorkerTask) this.longMessageWorkerTaskReference.get();
        }
    }

    public abstract class LongMessageWorkerAdapter {
        public abstract Object getItem(int i);

        public abstract int getSize();
    }

    class LongMessageWorkerTask extends AsyncTask {
        private Object data;
        private String msg;
        private final WeakReference textViewReference;
        private TextView tv;

        public LongMessageWorkerTask(TextView textView, String str) {
            this.textViewReference = new WeakReference(textView);
            this.tv = textView;
            this.msg = str;
        }

        private TextView getAttachedTextView() {
            TextView textView = (TextView) this.textViewReference.get();
            return this == SpannableMessageWorker.getLongMessageWorkerTask(textView) ? textView : null;
        }

        protected Spannable doInBackground(Object... objArr) {
            this.data = objArr[0];
            String valueOf = String.valueOf(this.data);
            Spannable spannable = null;
            if (!(SpannableMessageWorker.this.mLongMessageCache == null || isCancelled() || getAttachedTextView() == null || SpannableMessageWorker.this.mExitTasksEarly)) {
                spannable = SpannableMessageWorker.this.processLongMessage(this.msg);
            }
            if (!(spannable == null || SpannableMessageWorker.this.mLongMessageCache == null)) {
                SpannableMessageWorker.this.mLongMessageCache.addMessageToCache(SpannableMessageWorker.this.getMappedKey(valueOf), spannable);
            }
            return spannable;
        }

        protected void onPostExecute(Spannable spannable) {
            if (isCancelled() || SpannableMessageWorker.this.mExitTasksEarly) {
                CharSequence charSequence = null;
            }
            TextView attachedTextView = getAttachedTextView();
            if (!(charSequence == null || attachedTextView == null)) {
                attachedTextView.setText(charSequence);
            }
            if (charSequence == null && attachedTextView != null && charSequence != null) {
                attachedTextView.setText(charSequence);
            }
        }
    }

    public SpannableMessageWorker(Context context) {
        this.mContext = context;
    }

    public static boolean cancelPotentialWork(Object obj, TextView textView) {
        LongMessageWorkerTask longMessageWorkerTask = getLongMessageWorkerTask(textView);
        if (longMessageWorkerTask == null) {
            return true;
        }
        Object access$000 = longMessageWorkerTask.data;
        if (access$000 != null && access$000.equals(obj)) {
            return false;
        }
        longMessageWorkerTask.cancel(true);
        Log.d(TAG, "cancelPotentialWork - cancelled work for " + obj);
        return true;
    }

    public static void cancelWork(TextView textView) {
        LongMessageWorkerTask longMessageWorkerTask = getLongMessageWorkerTask(textView);
        if (longMessageWorkerTask != null) {
            longMessageWorkerTask.cancel(true);
            Log.d(TAG, "cancelWork - cancelled work for " + longMessageWorkerTask.data);
        }
    }

    private static LongMessageWorkerTask getLongMessageWorkerTask(TextView textView) {
        if (textView != null) {
            Object tag = textView.getTag();
            if (tag instanceof AsyncObject) {
                return ((AsyncObject) tag).getLongMessageWorkerTask();
            }
        }
        return null;
    }

    private Spannable processLongMessage(String str) {
        return null;
    }

    public LongMessageWorkerAdapter getAdapter() {
        return this.mLongMessageWorkerAdapter;
    }

    protected String getDefaultMessage(Object obj) {
        return this.mDefaultMessage;
    }

    public SpannableMessageCache getLongMessageCache() {
        return this.mLongMessageCache;
    }

    protected String getMappedKey(String str) {
        return str;
    }

    public void loadMessage(Object obj, TextView textView, boolean z, String str) {
        CharSequence charSequence = null;
        if (this.mLongMessageCache != null) {
            charSequence = this.mLongMessageCache.getMessageFromMemCache(getMappedKey(String.valueOf(obj)));
        }
        if (charSequence != null) {
            textView.setText(charSequence);
        } else if (!cancelPotentialWork(obj, textView)) {
        } else {
            if (z) {
                LongMessageWorkerTask longMessageWorkerTask = new LongMessageWorkerTask(textView, str);
                textView.setTag(new AsyncObject(this.mContext.getResources(), this.mLoadingMessage, longMessageWorkerTask));
                textView.setText(this.mLoadingMessage);
                longMessageWorkerTask.execute(new Object[]{obj});
                return;
            }
            textView.setText(this.mLoadingMessage);
        }
    }

    public void setAdapter(LongMessageWorkerAdapter longMessageWorkerAdapter) {
        this.mLongMessageWorkerAdapter = longMessageWorkerAdapter;
    }

    public void setDefaultMessage(String str) {
        this.mDefaultMessage = str;
    }

    public void setExitTasksEarly(boolean z) {
        this.mExitTasksEarly = z;
    }

    public void setLoadingMessage(String str) {
        this.mLoadingMessage = str;
    }

    public void setLongMessageCache(SpannableMessageCache spannableMessageCache) {
        this.mLongMessageCache = spannableMessageCache;
    }
}
