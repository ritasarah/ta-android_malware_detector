package com.catfiz.util;

import android.content.res.Resources;
import android.support.v4.view.MotionEventCompat;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import java.io.ByteArrayInputStream;
import java.io.InputStreamReader;
import java.security.MessageDigest;
import java.util.HashMap;
import java.util.regex.Matcher;
import org.apache.http.protocol.HTTP;

public class StringUtil {
    protected static final byte[] Hexhars = new byte[]{(byte) 48, (byte) 49, (byte) 50, (byte) 51, (byte) 52, (byte) 53, (byte) 54, (byte) 55, (byte) 56, (byte) 57, (byte) 97, (byte) 98, (byte) 99, (byte) 100, (byte) 101, (byte) 102};
    private static HashMap htmlEntities = new HashMap();

    static {
        htmlEntities.put("&lt;", "<");
        htmlEntities.put("&gt;", ">");
        htmlEntities.put("&amp;", "&");
        htmlEntities.put("&quot;", "\"");
        htmlEntities.put("&agrave;", "\u00e0");
        htmlEntities.put("&Agrave;", "\u00c0");
        htmlEntities.put("&acirc;", "\u00e2");
        htmlEntities.put("&auml;", "\u00e4");
        htmlEntities.put("&Auml;", "\u00c4");
        htmlEntities.put("&Acirc;", "\u00c2");
        htmlEntities.put("&aring;", "\u00e5");
        htmlEntities.put("&Aring;", "\u00c5");
        htmlEntities.put("&aelig;", "\u00e6");
        htmlEntities.put("&AElig;", "\u00c6");
        htmlEntities.put("&ccedil;", "\u00e7");
        htmlEntities.put("&Ccedil;", "\u00c7");
        htmlEntities.put("&eacute;", "\u00e9");
        htmlEntities.put("&Eacute;", "\u00c9");
        htmlEntities.put("&egrave;", "\u00e8");
        htmlEntities.put("&Egrave;", "\u00c8");
        htmlEntities.put("&ecirc;", "\u00ea");
        htmlEntities.put("&Ecirc;", "\u00ca");
        htmlEntities.put("&euml;", "\u00eb");
        htmlEntities.put("&Euml;", "\u00cb");
        htmlEntities.put("&iuml;", "\u00ef");
        htmlEntities.put("&Iuml;", "\u00cf");
        htmlEntities.put("&ocirc;", "\u00f4");
        htmlEntities.put("&Ocirc;", "\u00d4");
        htmlEntities.put("&ouml;", "\u00f6");
        htmlEntities.put("&Ouml;", "\u00d6");
        htmlEntities.put("&oslash;", "\u00f8");
        htmlEntities.put("&Oslash;", "\u00d8");
        htmlEntities.put("&szlig;", "\u00df");
        htmlEntities.put("&ugrave;", "\u00f9");
        htmlEntities.put("&Ugrave;", "\u00d9");
        htmlEntities.put("&ucirc;", "\u00fb");
        htmlEntities.put("&Ucirc;", "\u00db");
        htmlEntities.put("&uuml;", "\u00fc");
        htmlEntities.put("&Uuml;", "\u00dc");
        htmlEntities.put("&nbsp;", " ");
        htmlEntities.put("&copy;", "\u00a9");
        htmlEntities.put("&reg;", "\u00ae");
        htmlEntities.put("&euro;", "\u20a0");
        htmlEntities.put("&apos;", "'");
        htmlEntities.put("&mdash;", "-");
    }

    public static String elipse(String str, int i) {
        if (str.length() < i - 3) {
            return str;
        }
        return str.substring(0, i) + "...";
    }

    public static String getSha1Hash(String str) {
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(str.getBytes(HTTP.UTF_8));
        MessageDigest instance = MessageDigest.getInstance("SHA1");
        byte[] bArr = new byte[AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT];
        while (true) {
            int read = byteArrayInputStream.read(bArr);
            if (read == -1) {
                return toHexString(instance.digest());
            }
            instance.update(bArr, 0, read);
        }
    }

    public static String loadRawResourceString(Resources resources, int i) {
        StringBuilder stringBuilder = new StringBuilder();
        InputStreamReader inputStreamReader = new InputStreamReader(resources.openRawResource(i));
        char[] cArr = new char[AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT];
        while (true) {
            int read = inputStreamReader.read(cArr);
            if (read == -1) {
                return stringBuilder.toString();
            }
            stringBuilder.append(cArr, 0, read);
        }
    }

    public static String replaceAll(String str, String str2, String str3) {
        return str.replaceAll(str2, str3 == null ? "" : Matcher.quoteReplacement(str3));
    }

    public static String toHexString(byte[] bArr) {
        StringBuilder stringBuilder = new StringBuilder(bArr.length * 2);
        for (byte b : bArr) {
            int i = b & MotionEventCompat.ACTION_MASK;
            stringBuilder.append((char) Hexhars[i >> 4]);
            stringBuilder.append((char) Hexhars[i & 15]);
        }
        return stringBuilder.toString();
    }

    public static String unescapeHTML(String str) {
        StringBuilder stringBuilder = new StringBuilder();
        int indexOf = str.indexOf(38, 0);
        int i = 0;
        while (indexOf != -1) {
            stringBuilder.append(str.substring(i, indexOf));
            int indexOf2 = str.indexOf(59, indexOf);
            if (indexOf2 != -1) {
                indexOf2++;
                String str2 = (String) htmlEntities.get(str.substring(indexOf, indexOf2));
                if (str2 != null) {
                    stringBuilder.append(str2);
                } else {
                    stringBuilder.append(str.substring(i, indexOf2));
                }
                indexOf = indexOf2;
            } else {
                stringBuilder.append(str.charAt(indexOf));
                indexOf++;
            }
            i = indexOf;
            indexOf = str.indexOf(38, indexOf);
        }
        stringBuilder.append(str.substring(i));
        return stringBuilder.toString();
    }
}
