package com.catfiz.util;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.util.DisplayMetrics;
import android.view.WindowManager;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

public class BackgroundRescalerTask extends AsyncTask {
    private static final String TAG = "BackgroundRescalerTask";
    private Context mContext = null;
    private int mScreenHeight = 0;
    private int mScreenWidth = 0;

    public BackgroundRescalerTask(Context context) {
        this.mContext = context;
        DisplayMetrics displayMetrics = new DisplayMetrics();
        ((WindowManager) this.mContext.getApplicationContext().getSystemService("window")).getDefaultDisplay().getMetrics(displayMetrics);
        this.mScreenWidth = displayMetrics.widthPixels;
        this.mScreenHeight = displayMetrics.heightPixels;
    }

    protected Bitmap doInBackground(String... strArr) {
        Bitmap decodeFile = BitmapFactory.decodeFile(strArr[0]);
        if (decodeFile == null) {
            return null;
        }
        int height = decodeFile.getHeight();
        int width = decodeFile.getWidth();
        float f = ((float) width) / ((float) height);
        if (height > this.mScreenHeight || width > ((int) (((float) this.mScreenHeight) * f))) {
            Log.d(TAG, " --- Scale Bitmap --- ");
            decodeFile = Bitmap.createScaledBitmap(decodeFile, (int) (((float) this.mScreenHeight) * f), this.mScreenHeight, true);
            try {
                OutputStream fileOutputStream = new FileOutputStream(new File(strArr[0]));
                decodeFile.compress(CompressFormat.JPEG, 80, fileOutputStream);
                fileOutputStream.close();
                return decodeFile;
            } catch (FileNotFoundException e) {
                e.printStackTrace();
                return decodeFile;
            } catch (IOException e2) {
                e2.printStackTrace();
                return decodeFile;
            }
        }
        Log.d(TAG, " --- originalBitmap.getHeight()<=mScreenHeight --- ");
        return decodeFile;
    }
}
