package com.catfiz.util;

import android.content.Context;
import android.content.res.Resources;
import android.os.AsyncTask;
import android.widget.TextView;
import com.catfiz.service.LongMessageExecutor;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.lang.ref.WeakReference;

public class LongMessageWorker {
    private static final String TAG = "LongMessageWorker";
    protected Context mContext;
    private String mDefaultMessage;
    private boolean mExitTasksEarly = false;
    private String mLoadingMessage;
    private LongMessageCache mLongMessageCache;
    protected LongMessageWorkerAdapter mLongMessageWorkerAdapter;

    class AsyncObject {
        private final WeakReference longMessageWorkerTaskReference;
        private String message;
        private Resources res;

        public AsyncObject(Resources resources, String str, LongMessageWorkerTask longMessageWorkerTask) {
            this.res = resources;
            this.message = str;
            this.longMessageWorkerTaskReference = new WeakReference(longMessageWorkerTask);
        }

        public LongMessageWorkerTask getLongMessageWorkerTask() {
            return (LongMessageWorkerTask) this.longMessageWorkerTaskReference.get();
        }
    }

    public abstract class LongMessageWorkerAdapter {
        public abstract Object getItem(int i);

        public abstract int getSize();
    }

    class LongMessageWorkerTask extends AsyncTask {
        private Object data;
        private final WeakReference textViewReference;
        private TextView tv;

        public LongMessageWorkerTask(TextView textView) {
            this.textViewReference = new WeakReference(textView);
            this.tv = textView;
        }

        private TextView getAttachedTextView() {
            TextView textView = (TextView) this.textViewReference.get();
            return this == LongMessageWorker.getLongMessageWorkerTask(textView) ? textView : null;
        }

        protected String doInBackground(Object... objArr) {
            this.data = objArr[0];
            String valueOf = String.valueOf(this.data);
            String str = null;
            if (!(LongMessageWorker.this.mLongMessageCache == null || isCancelled() || getAttachedTextView() == null || LongMessageWorker.this.mExitTasksEarly)) {
                str = LongMessageWorker.this.processLongMessage(LongMessageWorker.this.getMappedKey(valueOf));
            }
            if (!(str == null || LongMessageWorker.this.mLongMessageCache == null)) {
                LongMessageWorker.this.mLongMessageCache.addMessageToCache(LongMessageWorker.this.getMappedKey(valueOf), str);
            }
            return str;
        }

        protected void onPostExecute(String str) {
            if (!isCancelled() && !LongMessageWorker.this.mExitTasksEarly) {
                TextView attachedTextView = getAttachedTextView();
                if (str != null && attachedTextView != null && (attachedTextView.getTag() instanceof AsyncObject)) {
                    Log.d(LongMessageWorker.TAG, "setText2");
                } else if (!(str != null || attachedTextView == null || LongMessageWorker.this.getDefaultMessage(String.valueOf(this.data)) == null)) {
                    Log.d(LongMessageWorker.TAG, "setText3");
                }
                if (attachedTextView != null) {
                    CFLinkify.addLinks(attachedTextView, CFLinkify.NIC | 7);
                    attachedTextView.setTag(null);
                }
            }
        }
    }

    public LongMessageWorker(Context context) {
        this.mContext = context;
    }

    public static boolean cancelPotentialWork(Object obj, TextView textView) {
        LongMessageWorkerTask longMessageWorkerTask = getLongMessageWorkerTask(textView);
        if (longMessageWorkerTask == null) {
            return true;
        }
        Object access$000 = longMessageWorkerTask.data;
        if (access$000 != null && access$000.equals(obj)) {
            return false;
        }
        longMessageWorkerTask.cancel(true);
        Log.d(TAG, "cancelPotentialWork - cancelled work for " + obj);
        return true;
    }

    public static void cancelWork(TextView textView) {
        LongMessageWorkerTask longMessageWorkerTask = getLongMessageWorkerTask(textView);
        if (longMessageWorkerTask != null) {
            longMessageWorkerTask.cancel(true);
            Log.d(TAG, "cancelWork - cancelled work for " + longMessageWorkerTask.data);
        }
    }

    private static LongMessageWorkerTask getLongMessageWorkerTask(TextView textView) {
        if (textView != null) {
            Object tag = textView.getTag();
            if (tag instanceof AsyncObject) {
                return ((AsyncObject) tag).getLongMessageWorkerTask();
            }
        }
        return null;
    }

    private String processLongMessage(String str) {
        String str2;
        FileNotFoundException e;
        IOException e2;
        try {
            BufferedReader bufferedReader = new BufferedReader(new FileReader(LongMessageExecutor.getTextDirPath() + str));
            str2 = null;
            while (true) {
                try {
                    String readLine = bufferedReader.readLine();
                    if (readLine == null) {
                        break;
                    }
                    str2 = str2 == null ? readLine : str2 + "\n" + readLine;
                } catch (FileNotFoundException e3) {
                    e = e3;
                } catch (IOException e4) {
                    e2 = e4;
                }
            }
            bufferedReader.close();
        } catch (FileNotFoundException e5) {
            FileNotFoundException fileNotFoundException = e5;
            str2 = null;
            e = fileNotFoundException;
            e.printStackTrace();
            return str2;
        } catch (IOException e6) {
            IOException iOException = e6;
            str2 = null;
            e2 = iOException;
            e2.printStackTrace();
            return str2;
        }
        return str2;
    }

    public LongMessageWorkerAdapter getAdapter() {
        return this.mLongMessageWorkerAdapter;
    }

    protected String getDefaultMessage(Object obj) {
        return this.mDefaultMessage;
    }

    public LongMessageCache getLongMessageCache() {
        return this.mLongMessageCache;
    }

    protected String getMappedKey(String str) {
        return str;
    }

    public void loadMessage(int i, TextView textView) {
        if (this.mLongMessageWorkerAdapter != null) {
            loadMessage(this.mLongMessageWorkerAdapter.getItem(i), textView, true);
            return;
        }
        throw new NullPointerException("Data not set, must call setAdapter() first.");
    }

    public void loadMessage(Object obj, TextView textView) {
        loadMessage(obj, textView, true);
    }

    public void loadMessage(Object obj, TextView textView, boolean z) {
        String str = null;
        if (this.mLongMessageCache != null) {
            str = this.mLongMessageCache.getMessageFromMemCache(getMappedKey(String.valueOf(obj)));
        }
        if (str != null) {
            Log.d(TAG, "setText1");
            CFLinkify.addLinks(textView, CFLinkify.NIC | 7);
        } else if (!cancelPotentialWork(obj, textView)) {
        } else {
            if (z) {
                LongMessageWorkerTask longMessageWorkerTask = new LongMessageWorkerTask(textView);
                textView.setTag(new AsyncObject(this.mContext.getResources(), this.mLoadingMessage, longMessageWorkerTask));
                textView.setText(this.mLoadingMessage);
                longMessageWorkerTask.execute(new Object[]{obj});
                return;
            }
            textView.setText(this.mLoadingMessage);
        }
    }

    public void setAdapter(LongMessageWorkerAdapter longMessageWorkerAdapter) {
        this.mLongMessageWorkerAdapter = longMessageWorkerAdapter;
    }

    public void setDefaultMessage(String str) {
        this.mDefaultMessage = str;
    }

    public void setExitTasksEarly(boolean z) {
        this.mExitTasksEarly = z;
    }

    public void setLoadingMessage(String str) {
        this.mLoadingMessage = str;
    }

    public void setLongMessageCache(LongMessageCache longMessageCache) {
        this.mLongMessageCache = longMessageCache;
    }
}
