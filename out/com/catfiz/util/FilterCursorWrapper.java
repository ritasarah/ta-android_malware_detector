package com.catfiz.util;

import android.database.Cursor;
import android.database.CursorWrapper;
import java.util.Locale;

public class FilterCursorWrapper extends CursorWrapper {
    private static final String TAG = "FilterCursorWrapper";
    private int column;
    private int count = 0;
    private String filter;
    private int[] index;
    private int pos = 0;

    public FilterCursorWrapper(Cursor cursor, String str, int i) {
        int i2 = 0;
        super(cursor);
        this.filter = str.toLowerCase(Locale.getDefault());
        this.column = i;
        if (this.filter != "") {
            this.count = super.getCount();
            this.index = new int[this.count];
            for (int i3 = 0; i3 < this.count; i3++) {
                super.moveToPosition(i3);
                String string = getString(this.column);
                if (string != null && string.toLowerCase(Locale.getDefault()).contains(this.filter)) {
                    int[] iArr = this.index;
                    int i4 = this.pos;
                    this.pos = i4 + 1;
                    iArr[i4] = i3;
                }
            }
            this.count = this.pos;
            this.pos = 0;
            super.moveToFirst();
            return;
        }
        this.count = super.getCount();
        this.index = new int[this.count];
        while (i2 < this.count) {
            this.index[i2] = i2;
            i2++;
        }
    }

    public int getCount() {
        return this.count;
    }

    public int getPosition() {
        return this.pos;
    }

    public boolean move(int i) {
        return moveToPosition(this.pos + i);
    }

    public boolean moveToFirst() {
        return moveToPosition(0);
    }

    public boolean moveToLast() {
        return moveToPosition(this.count - 1);
    }

    public boolean moveToNext() {
        return moveToPosition(this.pos + 1);
    }

    public boolean moveToPosition(int i) {
        return (i >= this.count || i < 0) ? false : super.moveToPosition(this.index[i]);
    }

    public boolean moveToPrevious() {
        return moveToPosition(this.pos - 1);
    }
}
