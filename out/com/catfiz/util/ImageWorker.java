package com.catfiz.util;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.TransitionDrawable;
import android.os.AsyncTask;
import android.widget.ImageView;
import java.lang.ref.WeakReference;

public abstract class ImageWorker {
    private static final int FADE_IN_TIME = 100;
    private static final String TAG = "ImageWorker";
    protected Context mContext;
    private Bitmap mDefaultBitmap;
    private boolean mExitTasksEarly = false;
    private boolean mFadeInBitmap = false;
    private boolean mFadeInRefresh = false;
    private int mFadeInTime = FADE_IN_TIME;
    private ImageCache mImageCache = null;
    protected ImageWorkerAdapter mImageWorkerAdapter;
    private boolean mIsGroup = false;
    private Bitmap mLoadingBitmap;
    private String mLocalCacheKey = null;

    class AsyncDrawable extends BitmapDrawable {
        private final WeakReference bitmapWorkerTaskReference;

        public AsyncDrawable(Resources resources, Bitmap bitmap, BitmapWorkerTask bitmapWorkerTask) {
            super(resources, bitmap);
            this.bitmapWorkerTaskReference = new WeakReference(bitmapWorkerTask);
        }

        public BitmapWorkerTask getBitmapWorkerTask() {
            return (BitmapWorkerTask) this.bitmapWorkerTaskReference.get();
        }
    }

    class BitmapWorkerTask extends AsyncTask {
        private Object data;
        private final WeakReference imageViewReference;
        private float mScaleX = 1.0f;
        private float mScaleY = 1.0f;
        private boolean mScaled = false;

        public BitmapWorkerTask(ImageView imageView) {
            this.imageViewReference = new WeakReference(imageView);
        }

        public BitmapWorkerTask(ImageView imageView, float f, float f2, boolean z) {
            this.imageViewReference = new WeakReference(imageView);
            this.mScaleX = f;
            this.mScaleY = f2;
            this.mScaled = z;
        }

        private ImageView getAttachedImageView() {
            ImageView imageView = (ImageView) this.imageViewReference.get();
            return this == ImageWorker.getBitmapWorkerTask(imageView) ? imageView : null;
        }

        private Bitmap resizeBitmap(Bitmap bitmap) {
            if (bitmap == null) {
                return null;
            }
            Bitmap createScaledBitmap = Bitmap.createScaledBitmap(bitmap, (int) (((float) bitmap.getWidth()) * this.mScaleX), (int) (((float) bitmap.getHeight()) * this.mScaleY), false);
            bitmap.recycle();
            return createScaledBitmap;
        }

        protected Bitmap doInBackground(Object... objArr) {
            this.data = objArr[0];
            String valueOf = String.valueOf(this.data);
            Bitmap bitmap = null;
            if (!(null != null || isCancelled() || getAttachedImageView() == null || ImageWorker.this.mExitTasksEarly)) {
                bitmap = ImageWorker.this.mIsGroup ? ImageWorker.this.processBitmap(ImageWorker.this.getMappedKey(valueOf), ImageWorker.this.mIsGroup) : ImageWorker.this.processBitmap(ImageWorker.this.getMappedKey(valueOf));
                if (bitmap != null) {
                    Log.d(ImageWorker.TAG, "CREATE!!!: " + valueOf);
                    if (this.mScaled) {
                        bitmap = resizeBitmap(bitmap);
                    }
                    if (ImageWorker.this.mImageCache != null) {
                        ImageWorker.this.mImageCache.addBitmapToCache(ImageWorker.this.getMappedKey(valueOf), bitmap);
                    }
                }
            }
            return bitmap;
        }

        protected void onPostExecute(Bitmap bitmap) {
            if (!isCancelled() && !ImageWorker.this.mExitTasksEarly) {
                if (bitmap != null) {
                    ImageWorker.this.putBitmapInLocalCache(this.data, bitmap);
                }
                ImageView attachedImageView = getAttachedImageView();
                if (bitmap == null || attachedImageView == null) {
                    if (bitmap == null && attachedImageView != null) {
                        bitmap = ImageWorker.this.getDefaultBitmap(this.data);
                        if (bitmap != null) {
                            ImageWorker.this.setImageBitmap(attachedImageView, bitmap);
                            return;
                        }
                    }
                    if (bitmap == null && attachedImageView != null) {
                        Drawable defaultDrawable = ImageWorker.this.getDefaultDrawable(String.valueOf(this.data));
                        if (defaultDrawable != null && attachedImageView != null) {
                            ImageWorker.this.setImageDrawable(attachedImageView, defaultDrawable);
                            return;
                        }
                        return;
                    }
                    return;
                }
                ImageWorker.this.setImageBitmap(attachedImageView, bitmap);
            } else if (bitmap != null) {
                bitmap.recycle();
            }
        }

        protected void onProgressUpdate(Integer... numArr) {
        }
    }

    public abstract class ImageWorkerAdapter {
        public abstract Object getItem(int i);

        public abstract int getSize();
    }

    protected ImageWorker(Context context) {
        this.mContext = context;
    }

    public static boolean cancelPotentialWork(Object obj, ImageView imageView) {
        BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);
        if (bitmapWorkerTask == null) {
            return true;
        }
        Object access$000 = bitmapWorkerTask.data;
        if (access$000 != null && access$000.equals(obj)) {
            return false;
        }
        bitmapWorkerTask.cancel(true);
        Log.d(TAG, "cancelPotentialWork - cancelled work for " + obj);
        return true;
    }

    public static void cancelWork(ImageView imageView) {
        BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);
        if (bitmapWorkerTask != null) {
            bitmapWorkerTask.cancel(true);
            Log.d(TAG, "cancelWork - cancelled work for " + bitmapWorkerTask.data);
        }
    }

    private static BitmapWorkerTask getBitmapWorkerTask(ImageView imageView) {
        if (imageView != null) {
            Drawable drawable = imageView.getDrawable();
            if (drawable instanceof AsyncDrawable) {
                return ((AsyncDrawable) drawable).getBitmapWorkerTask();
            }
        }
        return null;
    }

    private Bitmap getLoadingBitmap(Object obj) {
        String valueOf = String.valueOf(obj);
        if (isInLocalCache(valueOf)) {
            Bitmap bitmapFromLocalCache = getBitmapFromLocalCache(valueOf);
            if (bitmapFromLocalCache != null) {
                return bitmapFromLocalCache;
            }
        }
        return this.mLoadingBitmap;
    }

    private void setImageBitmap(ImageView imageView, Bitmap bitmap) {
        if (this.mFadeInBitmap) {
            Drawable transitionDrawable = new TransitionDrawable(new Drawable[]{new ColorDrawable(17170445), new BitmapDrawable(this.mContext.getResources(), bitmap)});
            imageView.setImageDrawable(transitionDrawable);
            transitionDrawable.startTransition(this.mFadeInTime);
            return;
        }
        imageView.setImageBitmap(bitmap);
    }

    private void setImageDrawable(ImageView imageView, Drawable drawable) {
        if (this.mFadeInBitmap) {
            Drawable transitionDrawable = new TransitionDrawable(new Drawable[]{new ColorDrawable(17170445), drawable});
            imageView.setImageDrawable(transitionDrawable);
            transitionDrawable.startTransition(this.mFadeInTime);
            return;
        }
        imageView.setImageDrawable(drawable);
    }

    public ImageWorkerAdapter getAdapter() {
        return this.mImageWorkerAdapter;
    }

    protected Bitmap getBitmapFromLocalCache(Object obj) {
        return null;
    }

    protected Bitmap getDefaultBitmap(Object obj) {
        return this.mDefaultBitmap;
    }

    protected Drawable getDefaultDrawable(Object obj) {
        return null;
    }

    public int getFadeInTime() {
        return this.mFadeInTime;
    }

    public ImageCache getImageCache() {
        return this.mImageCache;
    }

    public String getLocalCacheKey() {
        return this.mLocalCacheKey;
    }

    protected String getMappedKey(String str) {
        return str;
    }

    public boolean isExitTasksEarly() {
        return this.mExitTasksEarly;
    }

    public boolean isInLocalCache(String str) {
        return (str == null || this.mLocalCacheKey == null) ? false : this.mLocalCacheKey.equals(str);
    }

    public void loadImage(int i, ImageView imageView) {
        if (this.mImageWorkerAdapter != null) {
            loadImage(this.mImageWorkerAdapter.getItem(i), imageView, true);
            return;
        }
        throw new NullPointerException("Data not set, must call setAdapter() first.");
    }

    public void loadImage(Object obj, ImageView imageView) {
        this.mIsGroup = false;
        loadImage(obj, imageView, true, 1.0f, 1.0f, false);
    }

    public void loadImage(Object obj, ImageView imageView, boolean z) {
        loadImage(obj, imageView, z, 1.0f, 1.0f, false);
    }

    public void loadImage(Object obj, ImageView imageView, boolean z, float f, float f2, boolean z2) {
        if (obj == null) {
            imageView.setImageBitmap(getLoadingBitmap(null));
            return;
        }
        Bitmap bitmapFromMemCache = this.mImageCache != null ? this.mImageCache.getBitmapFromMemCache(getMappedKey(String.valueOf(obj))) : null;
        if (bitmapFromMemCache == null) {
            bitmapFromMemCache = getBitmapFromLocalCache(obj);
        }
        if (bitmapFromMemCache != null) {
            Log.d(TAG, "IMAGE CACHE HIT!!!: " + String.valueOf(obj));
            if (this.mFadeInRefresh) {
                setImageBitmap(imageView, bitmapFromMemCache);
            } else {
                imageView.setImageBitmap(bitmapFromMemCache);
            }
        } else if (!cancelPotentialWork(obj, imageView)) {
        } else {
            if (z) {
                BitmapWorkerTask bitmapWorkerTask = z2 ? new BitmapWorkerTask(imageView, f, f2, z2) : new BitmapWorkerTask(imageView);
                imageView.setImageDrawable(new AsyncDrawable(this.mContext.getResources(), getLoadingBitmap(null), bitmapWorkerTask));
                if (Utils.hasHoneycomb()) {
                    bitmapWorkerTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new Object[]{obj});
                } else {
                    bitmapWorkerTask.execute(new Object[]{obj});
                }
                Log.d(TAG, "Execute: " + String.valueOf(obj));
                return;
            }
            imageView.setImageBitmap(getLoadingBitmap(obj));
        }
    }

    public void loadImage(Object obj, boolean z, ImageView imageView) {
        this.mIsGroup = z;
        loadImage(obj, imageView, true, 1.0f, 1.0f, false);
    }

    protected abstract Bitmap processBitmap(Object obj);

    protected Bitmap processBitmap(Object obj, boolean z) {
        return null;
    }

    protected void putBitmapInLocalCache(Object obj, Bitmap bitmap) {
        setLocalCacheKey(String.valueOf(obj));
    }

    public void setAdapter(ImageWorkerAdapter imageWorkerAdapter) {
        this.mImageWorkerAdapter = imageWorkerAdapter;
    }

    public void setDefaultBitmap(int i) {
        this.mDefaultBitmap = BitmapFactory.decodeResource(this.mContext.getResources(), i);
    }

    public void setDefaultBitmap(Bitmap bitmap) {
        this.mDefaultBitmap = bitmap;
    }

    public void setExitTasksEarly(boolean z) {
        this.mExitTasksEarly = z;
    }

    public void setFadeInRefresh(boolean z) {
        this.mFadeInRefresh = z;
    }

    public void setImageCache(ImageCache imageCache) {
        this.mImageCache = imageCache;
    }

    public void setImageFadeIn(boolean z) {
        this.mFadeInBitmap = z;
    }

    public void setImageFadeIn(boolean z, int i) {
        this.mFadeInBitmap = z;
        this.mFadeInTime = i;
    }

    public void setLoadingImage(int i) {
        this.mLoadingBitmap = BitmapFactory.decodeResource(this.mContext.getResources(), i);
    }

    public void setLoadingImage(Bitmap bitmap) {
        this.mLoadingBitmap = bitmap;
    }

    public void setLocalCacheKey(String str) {
        this.mLocalCacheKey = str;
    }
}
