package com.catfiz.util;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.support.v7.widget.helper.ItemTouchHelper.Callback;
import android.widget.ImageView;
import java.util.Map;

public class StikerAnimatorTask extends AsyncTask {
    public static final String TAG = "StikerAnimator";
    private static int number = 0;
    private Map mAnimatorMap = null;
    private int mClipHeight = 0;
    private int mClipWidth = 0;
    private int mDuration = 18;
    private int mFrameNumber = 0;
    private Bitmap mImage = null;
    private ImageView mImageView = null;
    private String mKey = null;
    private boolean mStop = false;
    private int mWait = Callback.DEFAULT_SWIPE_ANIMATION_DURATION;
    private int thisNumber = 0;

    public StikerAnimatorTask(ImageView imageView, Bitmap bitmap, int i, Map map, String str) {
        this.mImage = bitmap;
        this.mImageView = imageView;
        this.mFrameNumber = i;
        this.mAnimatorMap = map;
        this.mKey = str;
        if (this.mImage.getWidth() < this.mImage.getHeight()) {
            this.mClipWidth = this.mImage.getWidth();
            this.mClipHeight = this.mImage.getHeight() / this.mFrameNumber;
        } else {
            this.mClipWidth = this.mImage.getWidth() / this.mFrameNumber;
            this.mClipHeight = this.mImage.getHeight();
        }
        number++;
        this.thisNumber = number;
    }

    public StikerAnimatorTask(ImageView imageView, Bitmap bitmap, int i, Map map, String str, int i2, int i3) {
        this.mImage = bitmap;
        this.mImageView = imageView;
        this.mFrameNumber = i;
        this.mAnimatorMap = map;
        this.mKey = str;
        this.mClipWidth = i2;
        this.mClipHeight = i3;
    }

    private Bitmap getcropedBitmapFrame(int i) {
        int i2;
        int i3;
        int i4;
        int i5;
        if (this.mImage.getWidth() < this.mImage.getHeight()) {
            i2 = i * this.mClipHeight;
            i3 = this.mClipWidth;
            i4 = (this.mClipHeight * i) + this.mClipHeight;
            i5 = 0;
        } else {
            i2 = i * this.mClipWidth;
            i3 = this.mClipWidth + (this.mClipWidth * i);
            i4 = this.mClipHeight;
            i5 = i2;
            i2 = 0;
        }
        Bitmap createBitmap = Bitmap.createBitmap(this.mClipWidth, this.mClipHeight, Config.ARGB_8888);
        new Canvas(createBitmap).drawBitmap(this.mImage, new Rect(i5, i2, i3, i4), new Rect(0, 0, this.mClipWidth, this.mClipHeight), null);
        return createBitmap;
    }

    public static Bitmap getcropedBitmapFrame(Bitmap bitmap, int i) {
        int width;
        int height;
        int i2;
        int i3;
        int i4;
        int i5;
        if (bitmap.getWidth() < bitmap.getHeight()) {
            width = bitmap.getWidth();
            height = bitmap.getHeight() / i;
            i2 = 0 * height;
            i3 = (0 * height) + height;
            i4 = height;
            i5 = width;
            height = 0;
        } else {
            height = bitmap.getWidth() / i;
            i3 = bitmap.getHeight();
            width = (0 * height) + height;
            i4 = i3;
            i5 = height;
            height = 0 * height;
            i2 = 0;
        }
        Bitmap createBitmap = Bitmap.createBitmap(i5, i4, Config.ARGB_8888);
        new Canvas(createBitmap).drawBitmap(bitmap, new Rect(height, i2, width, i3), new Rect(0, 0, i5, i4), null);
        return createBitmap;
    }

    protected Bitmap doInBackground(Object... objArr) {
        Log.d(TAG, "image width+" + this.mImage.getWidth() + " image height=" + this.mImage.getHeight());
        int i = 0;
        while (i <= this.mDuration) {
            int i2 = i % this.mFrameNumber;
            Bitmap bitmap = getcropedBitmapFrame(i2);
            String str = (String) this.mImageView.getTag();
            if (this.mImageView == null || str.compareTo(this.mKey) != 0) {
                Log.d(TAG, "not update view tag:" + str + " key:" + this.mKey + " instancenumber:" + this.thisNumber);
            } else {
                publishProgress(bitmap);
                Log.d(TAG, "update view tag:" + str + " key:" + this.mKey + " instancenumber:" + this.thisNumber);
            }
            Log.d(TAG, "tag=" + str + " key=" + this.mKey + " frame=" + i2 + " tick=" + i);
            if (this.mStop) {
                return bitmap;
            }
            int i3 = i + 1;
            try {
                Thread.sleep((long) this.mWait);
                i = i3;
            } catch (InterruptedException e) {
            }
        }
        return getcropedBitmapFrame(0);
    }

    protected void onPostExecute(Bitmap bitmap) {
        this.mAnimatorMap.remove(this.mKey);
    }

    protected void onProgressUpdate(Bitmap[] bitmapArr) {
        this.mImageView.setImageBitmap(bitmapArr[0]);
    }

    public void setNewImageView(ImageView imageView) {
        this.mImageView = imageView;
    }

    public void stopAnimation() {
        this.mStop = true;
    }
}
