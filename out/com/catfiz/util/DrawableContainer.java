package com.catfiz.util;

import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.Drawable.Callback;
import android.graphics.drawable.Drawable.ConstantState;
import android.os.SystemClock;
import android.support.v4.view.MotionEventCompat;

public class DrawableContainer extends Drawable implements Callback {
    private static final boolean DEBUG = false;
    private static final boolean DEFAULT_DITHER = true;
    private static final String TAG = "DrawableContainer";
    private int mAlpha = MotionEventCompat.ACTION_MASK;
    private Runnable mAnimationRunnable;
    private ColorFilter mColorFilter;
    private int mCurIndex = -1;
    private Drawable mCurrDrawable;
    private DrawableContainerState mDrawableContainerState;
    private long mEnterAnimationEnd;
    private long mExitAnimationEnd;
    private Drawable mLastDrawable;
    private boolean mMutated;

    public abstract class DrawableContainerState extends ConstantState {
        boolean mCanConstantState;
        int mChangingConfigurations;
        boolean mCheckedConstantState;
        int mChildrenChangingConfigurations;
        boolean mComputedConstantSize = DrawableContainer.DEBUG;
        int mConstantHeight;
        int mConstantMinimumHeight;
        int mConstantMinimumWidth;
        Rect mConstantPadding = null;
        boolean mConstantSize = DrawableContainer.DEBUG;
        int mConstantWidth;
        boolean mDither = DrawableContainer.DEFAULT_DITHER;
        Drawable[] mDrawables;
        int mEnterFadeDuration;
        int mExitFadeDuration;
        boolean mHaveOpacity = DrawableContainer.DEBUG;
        boolean mHaveStateful = DrawableContainer.DEBUG;
        int mNumChildren;
        int mOpacity;
        final DrawableContainer mOwner;
        boolean mPaddingChecked = DrawableContainer.DEBUG;
        boolean mStateful;
        boolean mVariablePadding = DrawableContainer.DEBUG;

        DrawableContainerState(DrawableContainerState drawableContainerState, DrawableContainer drawableContainer, Resources resources) {
            int i = 0;
            this.mOwner = drawableContainer;
            if (drawableContainerState != null) {
                this.mChangingConfigurations = drawableContainerState.mChangingConfigurations;
                this.mChildrenChangingConfigurations = drawableContainerState.mChildrenChangingConfigurations;
                Drawable[] drawableArr = drawableContainerState.mDrawables;
                this.mDrawables = new Drawable[drawableArr.length];
                this.mNumChildren = drawableContainerState.mNumChildren;
                int i2 = this.mNumChildren;
                while (i < i2) {
                    if (resources != null) {
                        this.mDrawables[i] = drawableArr[i].getConstantState().newDrawable(resources);
                    } else {
                        this.mDrawables[i] = drawableArr[i].getConstantState().newDrawable();
                    }
                    this.mDrawables[i].setCallback(drawableContainer);
                    i++;
                }
                this.mCanConstantState = DrawableContainer.DEFAULT_DITHER;
                this.mCheckedConstantState = DrawableContainer.DEFAULT_DITHER;
                this.mVariablePadding = drawableContainerState.mVariablePadding;
                if (drawableContainerState.mConstantPadding != null) {
                    this.mConstantPadding = new Rect(drawableContainerState.mConstantPadding);
                }
                this.mConstantSize = drawableContainerState.mConstantSize;
                this.mComputedConstantSize = drawableContainerState.mComputedConstantSize;
                this.mConstantWidth = drawableContainerState.mConstantWidth;
                this.mConstantHeight = drawableContainerState.mConstantHeight;
                this.mHaveOpacity = drawableContainerState.mHaveOpacity;
                this.mOpacity = drawableContainerState.mOpacity;
                this.mHaveStateful = drawableContainerState.mHaveStateful;
                this.mStateful = drawableContainerState.mStateful;
                this.mDither = drawableContainerState.mDither;
                this.mEnterFadeDuration = drawableContainerState.mEnterFadeDuration;
                this.mExitFadeDuration = drawableContainerState.mExitFadeDuration;
                return;
            }
            this.mDrawables = new Drawable[10];
            this.mNumChildren = 0;
            this.mCanConstantState = DrawableContainer.DEBUG;
            this.mCheckedConstantState = DrawableContainer.DEBUG;
        }

        public final int addChild(Drawable drawable) {
            int i = this.mNumChildren;
            if (i >= this.mDrawables.length) {
                growArray(i, i + 10);
            }
            drawable.setVisible(DrawableContainer.DEBUG, DrawableContainer.DEFAULT_DITHER);
            drawable.setCallback(this.mOwner);
            this.mDrawables[i] = drawable;
            this.mNumChildren++;
            this.mChildrenChangingConfigurations |= drawable.getChangingConfigurations();
            this.mHaveOpacity = DrawableContainer.DEBUG;
            this.mHaveStateful = DrawableContainer.DEBUG;
            this.mConstantPadding = null;
            this.mPaddingChecked = DrawableContainer.DEBUG;
            this.mComputedConstantSize = DrawableContainer.DEBUG;
            return i;
        }

        public synchronized boolean canConstantState() {
            boolean z;
            synchronized (this) {
                if (!this.mCheckedConstantState) {
                    this.mCanConstantState = DrawableContainer.DEFAULT_DITHER;
                    int i = this.mNumChildren;
                    for (int i2 = 0; i2 < i; i2++) {
                        if (this.mDrawables[i2].getConstantState() == null) {
                            this.mCanConstantState = DrawableContainer.DEBUG;
                            break;
                        }
                    }
                    this.mCheckedConstantState = DrawableContainer.DEFAULT_DITHER;
                }
                z = this.mCanConstantState;
            }
            return z;
        }

        protected void computeConstantSize() {
            int i = 0;
            this.mComputedConstantSize = DrawableContainer.DEFAULT_DITHER;
            int childCount = getChildCount();
            Drawable[] drawableArr = this.mDrawables;
            this.mConstantHeight = -1;
            this.mConstantWidth = -1;
            this.mConstantMinimumHeight = 0;
            this.mConstantMinimumWidth = 0;
            while (i < childCount) {
                Drawable drawable = drawableArr[i];
                int intrinsicWidth = drawable.getIntrinsicWidth();
                if (intrinsicWidth > this.mConstantWidth) {
                    this.mConstantWidth = intrinsicWidth;
                }
                intrinsicWidth = drawable.getIntrinsicHeight();
                if (intrinsicWidth > this.mConstantHeight) {
                    this.mConstantHeight = intrinsicWidth;
                }
                intrinsicWidth = drawable.getMinimumWidth();
                if (intrinsicWidth > this.mConstantMinimumWidth) {
                    this.mConstantMinimumWidth = intrinsicWidth;
                }
                int minimumHeight = drawable.getMinimumHeight();
                if (minimumHeight > this.mConstantMinimumHeight) {
                    this.mConstantMinimumHeight = minimumHeight;
                }
                i++;
            }
        }

        public int getChangingConfigurations() {
            return this.mChangingConfigurations;
        }

        public final int getChildCount() {
            return this.mNumChildren;
        }

        public final Drawable[] getChildren() {
            return this.mDrawables;
        }

        public final int getConstantHeight() {
            if (!this.mComputedConstantSize) {
                computeConstantSize();
            }
            return this.mConstantHeight;
        }

        public final int getConstantMinimumHeight() {
            if (!this.mComputedConstantSize) {
                computeConstantSize();
            }
            return this.mConstantMinimumHeight;
        }

        public final int getConstantMinimumWidth() {
            if (!this.mComputedConstantSize) {
                computeConstantSize();
            }
            return this.mConstantMinimumWidth;
        }

        public final Rect getConstantPadding() {
            Rect rect = null;
            if (this.mVariablePadding) {
                return null;
            }
            if (this.mConstantPadding != null || this.mPaddingChecked) {
                return this.mConstantPadding;
            }
            Rect rect2 = new Rect();
            int childCount = getChildCount();
            Drawable[] drawableArr = this.mDrawables;
            for (int i = 0; i < childCount; i++) {
                if (drawableArr[i].getPadding(rect2)) {
                    if (rect == null) {
                        rect = new Rect(0, 0, 0, 0);
                    }
                    if (rect2.left > rect.left) {
                        rect.left = rect2.left;
                    }
                    if (rect2.top > rect.top) {
                        rect.top = rect2.top;
                    }
                    if (rect2.right > rect.right) {
                        rect.right = rect2.right;
                    }
                    if (rect2.bottom > rect.bottom) {
                        rect.bottom = rect2.bottom;
                    }
                }
            }
            this.mPaddingChecked = DrawableContainer.DEFAULT_DITHER;
            this.mConstantPadding = rect;
            return rect;
        }

        public final int getConstantWidth() {
            if (!this.mComputedConstantSize) {
                computeConstantSize();
            }
            return this.mConstantWidth;
        }

        public final int getEnterFadeDuration() {
            return this.mEnterFadeDuration;
        }

        public final int getExitFadeDuration() {
            return this.mExitFadeDuration;
        }

        public final int getOpacity() {
            if (this.mHaveOpacity) {
                return this.mOpacity;
            }
            int childCount = getChildCount();
            Drawable[] drawableArr = this.mDrawables;
            int opacity = childCount > 0 ? drawableArr[0].getOpacity() : -2;
            int i = 1;
            while (i < childCount) {
                int resolveOpacity = Drawable.resolveOpacity(opacity, drawableArr[i].getOpacity());
                i++;
                opacity = resolveOpacity;
            }
            this.mOpacity = opacity;
            this.mHaveOpacity = DrawableContainer.DEFAULT_DITHER;
            return opacity;
        }

        public void growArray(int i, int i2) {
            Object obj = new Drawable[i2];
            System.arraycopy(this.mDrawables, 0, obj, 0, i);
            this.mDrawables = obj;
        }

        public final boolean isConstantSize() {
            return this.mConstantSize;
        }

        public final boolean isStateful() {
            boolean z = DrawableContainer.DEBUG;
            if (this.mHaveStateful) {
                return this.mStateful;
            }
            int childCount = getChildCount();
            for (int i = 0; i < childCount; i++) {
                if (this.mDrawables[i].isStateful()) {
                    z = DrawableContainer.DEFAULT_DITHER;
                    break;
                }
            }
            this.mStateful = z;
            this.mHaveStateful = DrawableContainer.DEFAULT_DITHER;
            return z;
        }

        public final void setConstantSize(boolean z) {
            this.mConstantSize = z;
        }

        public final void setEnterFadeDuration(int i) {
            this.mEnterFadeDuration = i;
        }

        public final void setExitFadeDuration(int i) {
            this.mExitFadeDuration = i;
        }

        public final void setVariablePadding(boolean z) {
            this.mVariablePadding = z;
        }
    }

    void animate(boolean z) {
        boolean z2;
        long uptimeMillis = SystemClock.uptimeMillis();
        if (this.mCurrDrawable != null) {
            if (this.mEnterAnimationEnd != 0) {
                if (this.mEnterAnimationEnd <= uptimeMillis) {
                    this.mCurrDrawable.setAlpha(this.mAlpha);
                    this.mEnterAnimationEnd = 0;
                    z2 = DEBUG;
                } else {
                    this.mCurrDrawable.setAlpha(((255 - (((int) ((this.mEnterAnimationEnd - uptimeMillis) * 255)) / this.mDrawableContainerState.mEnterFadeDuration)) * this.mAlpha) / MotionEventCompat.ACTION_MASK);
                    z2 = true;
                }
            }
            z2 = DEBUG;
        } else {
            this.mEnterAnimationEnd = 0;
            z2 = DEBUG;
        }
        if (this.mLastDrawable == null) {
            this.mExitAnimationEnd = 0;
        } else if (this.mExitAnimationEnd != 0) {
            if (this.mExitAnimationEnd <= uptimeMillis) {
                this.mLastDrawable.setVisible(DEBUG, DEBUG);
                this.mLastDrawable = null;
                this.mExitAnimationEnd = 0;
            } else {
                this.mLastDrawable.setAlpha(((((int) ((this.mExitAnimationEnd - uptimeMillis) * 255)) / this.mDrawableContainerState.mExitFadeDuration) * this.mAlpha) / MotionEventCompat.ACTION_MASK);
                z2 = true;
            }
        }
        if (z && r0) {
            scheduleSelf(this.mAnimationRunnable, 16 + uptimeMillis);
        }
    }

    public void draw(Canvas canvas) {
        try {
            if (this.mCurrDrawable != null) {
                this.mCurrDrawable.draw(canvas);
            }
            if (this.mLastDrawable != null) {
                this.mLastDrawable.draw(canvas);
            }
        } catch (Exception e) {
        }
    }

    public int getChangingConfigurations() {
        return (super.getChangingConfigurations() | this.mDrawableContainerState.mChangingConfigurations) | this.mDrawableContainerState.mChildrenChangingConfigurations;
    }

    public ConstantState getConstantState() {
        if (!this.mDrawableContainerState.canConstantState()) {
            return null;
        }
        this.mDrawableContainerState.mChangingConfigurations = getChangingConfigurations();
        return this.mDrawableContainerState;
    }

    public Drawable getCurrent() {
        return this.mCurrDrawable;
    }

    public int getIntrinsicHeight() {
        return this.mDrawableContainerState.isConstantSize() ? this.mDrawableContainerState.getConstantHeight() : this.mCurrDrawable != null ? this.mCurrDrawable.getIntrinsicHeight() : -1;
    }

    public int getIntrinsicWidth() {
        return this.mDrawableContainerState.isConstantSize() ? this.mDrawableContainerState.getConstantWidth() : this.mCurrDrawable != null ? this.mCurrDrawable.getIntrinsicWidth() : -1;
    }

    public int getMinimumHeight() {
        return this.mDrawableContainerState.isConstantSize() ? this.mDrawableContainerState.getConstantMinimumHeight() : this.mCurrDrawable != null ? this.mCurrDrawable.getMinimumHeight() : 0;
    }

    public int getMinimumWidth() {
        return this.mDrawableContainerState.isConstantSize() ? this.mDrawableContainerState.getConstantMinimumWidth() : this.mCurrDrawable != null ? this.mCurrDrawable.getMinimumWidth() : 0;
    }

    public int getOpacity() {
        return (this.mCurrDrawable == null || !this.mCurrDrawable.isVisible()) ? -2 : this.mDrawableContainerState.getOpacity();
    }

    public boolean getPadding(Rect rect) {
        Rect constantPadding = this.mDrawableContainerState.getConstantPadding();
        if (constantPadding == null) {
            return this.mCurrDrawable != null ? this.mCurrDrawable.getPadding(rect) : super.getPadding(rect);
        } else {
            rect.set(constantPadding);
            return DEFAULT_DITHER;
        }
    }

    public void invalidateDrawable(Drawable drawable) {
        if (drawable == this.mCurrDrawable && getCallback() != null) {
            getCallback().invalidateDrawable(this);
        }
    }

    public boolean isStateful() {
        return this.mDrawableContainerState.isStateful();
    }

    public void jumpToCurrentState() {
        Object obj = 1;
        Object obj2 = null;
        if (this.mLastDrawable != null) {
            this.mLastDrawable.jumpToCurrentState();
            this.mLastDrawable = null;
            obj2 = 1;
        }
        if (this.mCurrDrawable != null) {
            this.mCurrDrawable.jumpToCurrentState();
            this.mCurrDrawable.setAlpha(this.mAlpha);
        }
        if (this.mExitAnimationEnd != 0) {
            this.mExitAnimationEnd = 0;
            obj2 = 1;
        }
        if (this.mEnterAnimationEnd != 0) {
            this.mEnterAnimationEnd = 0;
        } else {
            obj = obj2;
        }
        if (obj != null) {
            invalidateSelf();
        }
    }

    public Drawable mutate() {
        if (!this.mMutated && super.mutate() == this) {
            int childCount = this.mDrawableContainerState.getChildCount();
            Drawable[] children = this.mDrawableContainerState.getChildren();
            for (int i = 0; i < childCount; i++) {
                if (children[i] != null) {
                    children[i].mutate();
                }
            }
            this.mMutated = DEFAULT_DITHER;
        }
        return this;
    }

    protected void onBoundsChange(Rect rect) {
        if (this.mLastDrawable != null) {
            this.mLastDrawable.setBounds(rect);
        }
        if (this.mCurrDrawable != null) {
            this.mCurrDrawable.setBounds(rect);
        }
    }

    protected boolean onLevelChange(int i) {
        return this.mLastDrawable != null ? this.mLastDrawable.setLevel(i) : this.mCurrDrawable != null ? this.mCurrDrawable.setLevel(i) : DEBUG;
    }

    protected boolean onStateChange(int[] iArr) {
        return this.mLastDrawable != null ? this.mLastDrawable.setState(iArr) : this.mCurrDrawable != null ? this.mCurrDrawable.setState(iArr) : DEBUG;
    }

    public void scheduleDrawable(Drawable drawable, Runnable runnable, long j) {
        if (drawable == this.mCurrDrawable && getCallback() != null) {
            getCallback().scheduleDrawable(this, runnable, j);
        }
    }

    public boolean selectDrawable(int i) {
        if (i == this.mCurIndex) {
            return DEBUG;
        }
        long uptimeMillis = SystemClock.uptimeMillis();
        if (this.mDrawableContainerState.mExitFadeDuration > 0) {
            if (this.mLastDrawable != null) {
                this.mLastDrawable.setVisible(DEBUG, DEBUG);
            }
            if (this.mCurrDrawable != null) {
                this.mLastDrawable = this.mCurrDrawable;
                this.mExitAnimationEnd = ((long) this.mDrawableContainerState.mExitFadeDuration) + uptimeMillis;
            } else {
                this.mLastDrawable = null;
                this.mExitAnimationEnd = 0;
            }
        } else if (this.mCurrDrawable != null) {
            this.mCurrDrawable.setVisible(DEBUG, DEBUG);
        }
        if (i < 0 || i >= this.mDrawableContainerState.mNumChildren) {
            this.mCurrDrawable = null;
            this.mCurIndex = -1;
        } else {
            Drawable drawable = this.mDrawableContainerState.mDrawables[i];
            this.mCurrDrawable = drawable;
            this.mCurIndex = i;
            if (drawable != null) {
                if (this.mDrawableContainerState.mEnterFadeDuration > 0) {
                    this.mEnterAnimationEnd = uptimeMillis + ((long) this.mDrawableContainerState.mEnterFadeDuration);
                } else {
                    drawable.setAlpha(this.mAlpha);
                }
                drawable.setVisible(isVisible(), DEFAULT_DITHER);
                drawable.setDither(this.mDrawableContainerState.mDither);
                drawable.setColorFilter(this.mColorFilter);
                drawable.setState(getState());
                drawable.setLevel(getLevel());
                drawable.setBounds(getBounds());
            }
        }
        if (!(this.mEnterAnimationEnd == 0 && this.mExitAnimationEnd == 0)) {
            if (this.mAnimationRunnable == null) {
                this.mAnimationRunnable = new Runnable() {
                    public void run() {
                        DrawableContainer.this.animate(DrawableContainer.DEFAULT_DITHER);
                        DrawableContainer.this.invalidateSelf();
                    }
                };
            } else {
                unscheduleSelf(this.mAnimationRunnable);
            }
            animate(DEFAULT_DITHER);
        }
        invalidateSelf();
        return DEFAULT_DITHER;
    }

    public void setAlpha(int i) {
        if (this.mAlpha != i) {
            this.mAlpha = i;
            if (this.mCurrDrawable == null) {
                return;
            }
            if (this.mEnterAnimationEnd == 0) {
                this.mCurrDrawable.setAlpha(i);
            } else {
                animate(DEBUG);
            }
        }
    }

    public void setColorFilter(ColorFilter colorFilter) {
        if (this.mColorFilter != colorFilter) {
            this.mColorFilter = colorFilter;
            if (this.mCurrDrawable != null) {
                this.mCurrDrawable.setColorFilter(colorFilter);
            }
        }
    }

    protected void setConstantState(DrawableContainerState drawableContainerState) {
        this.mDrawableContainerState = drawableContainerState;
    }

    public void setDither(boolean z) {
        if (this.mDrawableContainerState.mDither != z) {
            this.mDrawableContainerState.mDither = z;
            if (this.mCurrDrawable != null) {
                this.mCurrDrawable.setDither(this.mDrawableContainerState.mDither);
            }
        }
    }

    public void setEnterFadeDuration(int i) {
        this.mDrawableContainerState.mEnterFadeDuration = i;
    }

    public void setExitFadeDuration(int i) {
        this.mDrawableContainerState.mExitFadeDuration = i;
    }

    public boolean setVisible(boolean z, boolean z2) {
        boolean visible = super.setVisible(z, z2);
        if (this.mLastDrawable != null) {
            this.mLastDrawable.setVisible(z, z2);
        }
        if (this.mCurrDrawable != null) {
            this.mCurrDrawable.setVisible(z, z2);
        }
        return visible;
    }

    public void unscheduleDrawable(Drawable drawable, Runnable runnable) {
        if (drawable == this.mCurrDrawable && getCallback() != null) {
            getCallback().unscheduleDrawable(this, runnable);
        }
    }
}
