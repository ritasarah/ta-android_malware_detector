package com.catfiz.util;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.os.Environment;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import org.apache.http.protocol.HTTP;

public class DiskLruCache {
    private static final String CACHE_FILENAME_PREFIX = "cache_";
    private static final int INITIAL_CAPACITY = 32;
    private static final float LOAD_FACTOR = 0.75f;
    private static final int MAX_REMOVALS = 4;
    private static final String TAG = "DiskLruCache";
    private static final FilenameFilter cacheFileFilter = new FilenameFilter() {
        public boolean accept(File file, String str) {
            return str.startsWith(DiskLruCache.CACHE_FILENAME_PREFIX);
        }
    };
    private int cacheByteSize = 0;
    private int cacheSize = 0;
    private final File mCacheDir;
    private CompressFormat mCompressFormat = CompressFormat.JPEG;
    private int mCompressQuality = 70;
    private final Map mLinkedHashMap = Collections.synchronizedMap(new LinkedHashMap(INITIAL_CAPACITY, LOAD_FACTOR, true));
    private long maxCacheByteSize = 5242880;
    private final int maxCacheItemSize = 64;

    private DiskLruCache(File file, long j) {
        this.mCacheDir = file;
        this.maxCacheByteSize = j;
    }

    public static void clearCache(Context context, String str) {
        File diskCacheDir = getDiskCacheDir(context, str);
        if (diskCacheDir != null) {
            clearCache(diskCacheDir);
        }
    }

    private static void clearCache(File file) {
        File[] listFiles = file.listFiles(cacheFileFilter);
        for (File delete : listFiles) {
            delete.delete();
        }
    }

    public static String createFilePath(File file, String str) {
        try {
            return file.getAbsolutePath() + File.separator + CACHE_FILENAME_PREFIX + URLEncoder.encode(str.replace("*", ""), HTTP.UTF_8);
        } catch (UnsupportedEncodingException e) {
            Log.e(TAG, "createFilePath - " + e);
            return null;
        }
    }

    private void flushCache() {
        int i = 0;
        while (i < MAX_REMOVALS) {
            if (this.cacheSize > 64 || ((long) this.cacheByteSize) > this.maxCacheByteSize) {
                Entry entry = (Entry) this.mLinkedHashMap.entrySet().iterator().next();
                File file = new File((String) entry.getValue());
                long length = file.length();
                this.mLinkedHashMap.remove(entry.getKey());
                file.delete();
                this.cacheSize = this.mLinkedHashMap.size();
                this.cacheByteSize = (int) (((long) this.cacheByteSize) - length);
                int i2 = i + 1;
                Log.d(TAG, "flushCache - Removed cache file, " + file + ", " + length);
                i = i2;
            } else {
                return;
            }
        }
    }

    public static File getDiskCacheDir(Context context, String str) {
        String path = (Environment.getExternalStorageState() == "mounted" || !Utils.isExternalStorageRemovable()) ? Utils.getExternalCacheDir(context).getPath() : context.getCacheDir().getPath();
        return new File(path + File.separator + str);
    }

    public static DiskLruCache openCache(Context context, File file, long j) {
        if (!file.exists()) {
            file.mkdir();
        }
        return (file.isDirectory() && file.canWrite() && Utils.getUsableSpace(file) > j) ? new DiskLruCache(file, j) : null;
    }

    private void put(String str, String str2) {
        this.mLinkedHashMap.put(str, str2);
        this.cacheSize = this.mLinkedHashMap.size();
        this.cacheByteSize = (int) (((long) this.cacheByteSize) + new File(str2).length());
    }

    private boolean writeBitmapToFile(Bitmap bitmap, String str) {
        OutputStream bufferedOutputStream;
        Throwable th;
        try {
            bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(str), Utils.IO_BUFFER_SIZE);
            try {
                boolean compress = bitmap.compress(this.mCompressFormat, this.mCompressQuality, bufferedOutputStream);
                if (bufferedOutputStream != null) {
                    bufferedOutputStream.close();
                }
                return compress;
            } catch (Throwable th2) {
                th = th2;
                if (bufferedOutputStream != null) {
                    bufferedOutputStream.close();
                }
                throw th;
            }
        } catch (Throwable th3) {
            th = th3;
            bufferedOutputStream = null;
            if (bufferedOutputStream != null) {
                bufferedOutputStream.close();
            }
            throw th;
        }
    }

    public void clearCache() {
        if (this.mCacheDir != null) {
            clearCache(this.mCacheDir);
        }
    }

    public boolean containsKey(String str) {
        if (this.mLinkedHashMap.containsKey(str)) {
            return true;
        }
        String createFilePath = createFilePath(this.mCacheDir, str);
        if (!new File(createFilePath).exists()) {
            return false;
        }
        put(str, createFilePath);
        return true;
    }

    public String createFilePath(String str) {
        return createFilePath(this.mCacheDir, str);
    }

    public Bitmap get(String str) {
        Bitmap decodeFile;
        synchronized (this.mLinkedHashMap) {
            String str2 = (String) this.mLinkedHashMap.get(str);
            if (str2 != null) {
                Log.d(TAG, "Disk cache hit");
                decodeFile = BitmapFactory.decodeFile(str2);
            } else {
                str2 = createFilePath(this.mCacheDir, str);
                if (new File(str2).exists()) {
                    put(str, str2);
                    Log.d(TAG, "Disk cache hit (existing file)");
                    decodeFile = BitmapFactory.decodeFile(str2);
                } else {
                    decodeFile = null;
                }
            }
        }
        return decodeFile;
    }

    public void put(String str, Bitmap bitmap) {
        synchronized (this.mLinkedHashMap) {
            if (this.mLinkedHashMap.get(str) == null) {
                try {
                    String createFilePath = createFilePath(this.mCacheDir, str);
                    if (writeBitmapToFile(bitmap, createFilePath)) {
                        put(str, createFilePath);
                        flushCache();
                    }
                } catch (FileNotFoundException e) {
                    Log.e(TAG, "Error in put: " + e.getMessage());
                } catch (IOException e2) {
                    Log.e(TAG, "Error in put: " + e2.getMessage());
                }
            }
        }
    }

    public void setCompressParams(CompressFormat compressFormat, int i) {
        this.mCompressFormat = compressFormat;
        this.mCompressQuality = i;
    }
}
