package com.catfiz.util;

import java.util.HashMap;

public class ObjectLockManager {
    private static HashMap ObjectLockMap = null;
    private static HashMap ObjectLockRefCountMap = null;
    private static final String TAG = "ObjectLockManager";

    public static synchronized void acquireLockKey(String str, Object obj) {
        synchronized (ObjectLockManager.class) {
            if (str != null) {
                checkAndCreateLockMap();
                if (ObjectLockMap.containsKey(str) && obj != null) {
                    ObjectLockMap.remove(str);
                }
                if (obj != null) {
                    ObjectLockMap.put(str, obj);
                }
                if (ObjectLockRefCountMap.containsKey(str)) {
                    Integer num = (Integer) ObjectLockRefCountMap.get(str);
                    ObjectLockRefCountMap.remove(str);
                    ObjectLockRefCountMap.put(str, Integer.valueOf(num.intValue() + 1));
                } else {
                    ObjectLockRefCountMap.put(str, Integer.valueOf(1));
                }
            }
        }
    }

    private static void checkAndCreateLockMap() {
        if (ObjectLockMap == null) {
            ObjectLockMap = new HashMap();
        }
        if (ObjectLockRefCountMap == null) {
            ObjectLockRefCountMap = new HashMap();
        }
    }

    public static synchronized boolean checkLockKeyLong(String str, long j) {
        boolean z;
        synchronized (ObjectLockManager.class) {
            if (str == null) {
                z = false;
            } else if (ObjectLockMap == null) {
                z = false;
            } else if (ObjectLockMap.containsKey(str)) {
                Long l = (Long) ObjectLockMap.get(str);
                z = l != null && l.longValue() == j;
            } else {
                z = false;
            }
        }
        return z;
    }

    public static synchronized boolean checkLockKeyString(String str, String str2) {
        boolean z;
        synchronized (ObjectLockManager.class) {
            if (str == null) {
                z = false;
            } else if (ObjectLockMap == null) {
                z = false;
            } else if (!ObjectLockMap.containsKey(str)) {
                z = false;
            } else if (str2 == null) {
                z = false;
            } else {
                String str3 = (String) ObjectLockMap.get(str);
                z = str3 != null && str3.equals(str2);
            }
        }
        return z;
    }

    public static synchronized Object getLockKeyObject(String str) {
        Object obj = null;
        synchronized (ObjectLockManager.class) {
            if (str != null) {
                if (ObjectLockMap != null && ObjectLockMap.containsKey(str)) {
                    obj = ObjectLockMap.get(str);
                }
            }
        }
        return obj;
    }

    public static synchronized boolean isLockKeyLocked(String str) {
        boolean z = false;
        synchronized (ObjectLockManager.class) {
            if (str != null) {
                if (ObjectLockRefCountMap != null) {
                    z = ObjectLockRefCountMap.containsKey(str);
                }
            }
        }
        return z;
    }

    public static synchronized void releaseLockKey(String str) {
        synchronized (ObjectLockManager.class) {
            if (str != null) {
                if (ObjectLockRefCountMap != null) {
                    if (ObjectLockRefCountMap.containsKey(str)) {
                        Integer num = (Integer) ObjectLockRefCountMap.get(str);
                        ObjectLockRefCountMap.remove(str);
                        num = Integer.valueOf(num.intValue() - 1);
                        if (num.intValue() > 0) {
                            ObjectLockRefCountMap.put(str, num);
                        } else if (ObjectLockMap.containsKey(str)) {
                            ObjectLockMap.remove(str);
                        }
                    } else if (ObjectLockMap.containsKey(str)) {
                        ObjectLockMap.remove(str);
                    }
                    if (ObjectLockRefCountMap.size() == 0) {
                        ObjectLockMap.clear();
                        ObjectLockMap = null;
                        ObjectLockRefCountMap.clear();
                        ObjectLockRefCountMap = null;
                    }
                }
            }
        }
    }
}
