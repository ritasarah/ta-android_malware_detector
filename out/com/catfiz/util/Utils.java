package com.catfiz.util;

import android.app.ActivityManager;
import android.content.Context;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Environment;
import android.os.StatFs;
import com.catfiz.pool.PoolDataUploadExecutor.PoolDataType;
import java.io.File;
import java.net.URLConnection;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.regex.Pattern;
import org.apache.http.protocol.HTTP;

public class Utils {
    public static final int FILE_TYPE_AUDIO = 2;
    public static final int FILE_TYPE_COMPRESSED = 7;
    public static final int FILE_TYPE_GENERAL = 0;
    public static final int FILE_TYPE_IMAGE = 1;
    public static final int FILE_TYPE_INSTALLER = 8;
    public static final int FILE_TYPE_OFFICE = 5;
    public static final int FILE_TYPE_PDF = 4;
    public static final int FILE_TYPE_VIDEO = 6;
    public static final int FILE_TYPE_VOICE = 3;
    public static final int IO_BUFFER_SIZE = 32768;
    private static final HashMap LocalExtensionMap = new HashMap();
    private static final HashMap LocalMimeTypeMap = new HashMap();
    private static final String TAG = "CatfizUtils";

    /* synthetic */ class AnonymousClass1 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$pool$PoolDataUploadExecutor$PoolDataType = new int[PoolDataType.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$pool$PoolDataUploadExecutor$PoolDataType[PoolDataType.FILE.ordinal()] = Utils.FILE_TYPE_IMAGE;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$pool$PoolDataUploadExecutor$PoolDataType[PoolDataType.VOICE.ordinal()] = Utils.FILE_TYPE_AUDIO;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$pool$PoolDataUploadExecutor$PoolDataType[PoolDataType.IMAGE.ordinal()] = Utils.FILE_TYPE_VOICE;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$pool$PoolDataUploadExecutor$PoolDataType[PoolDataType.TOPIC_IMAGE.ordinal()] = Utils.FILE_TYPE_PDF;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$pool$PoolDataUploadExecutor$PoolDataType[PoolDataType.TOPIC_ATTACH.ordinal()] = Utils.FILE_TYPE_OFFICE;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$pool$PoolDataUploadExecutor$PoolDataType[PoolDataType.FRIEND_PP.ordinal()] = Utils.FILE_TYPE_VIDEO;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$pool$PoolDataUploadExecutor$PoolDataType[PoolDataType.VIDEO.ordinal()] = Utils.FILE_TYPE_COMPRESSED;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$com$catfiz$pool$PoolDataUploadExecutor$PoolDataType[PoolDataType.LONG_MESSAGE.ordinal()] = Utils.FILE_TYPE_INSTALLER;
            } catch (NoSuchFieldError e8) {
            }
        }
    }

    static {
        LocalExtensionMap.put(".jpg", Integer.valueOf(FILE_TYPE_IMAGE));
        LocalExtensionMap.put(".jpeg", Integer.valueOf(FILE_TYPE_IMAGE));
        LocalExtensionMap.put(".png", Integer.valueOf(FILE_TYPE_IMAGE));
        LocalExtensionMap.put(".tiff", Integer.valueOf(FILE_TYPE_IMAGE));
        LocalExtensionMap.put(".gif", Integer.valueOf(FILE_TYPE_IMAGE));
        LocalExtensionMap.put(".webp", Integer.valueOf(FILE_TYPE_IMAGE));
        LocalExtensionMap.put(".bmp", Integer.valueOf(FILE_TYPE_IMAGE));
        LocalExtensionMap.put(".svg", Integer.valueOf(FILE_TYPE_IMAGE));
        LocalExtensionMap.put(".3ga", Integer.valueOf(FILE_TYPE_AUDIO));
        LocalExtensionMap.put(".mp3", Integer.valueOf(FILE_TYPE_AUDIO));
        LocalExtensionMap.put(".wav", Integer.valueOf(FILE_TYPE_AUDIO));
        LocalExtensionMap.put(".ogg", Integer.valueOf(FILE_TYPE_AUDIO));
        LocalExtensionMap.put(".wma", Integer.valueOf(FILE_TYPE_AUDIO));
        LocalExtensionMap.put(".mp2", Integer.valueOf(FILE_TYPE_AUDIO));
        LocalExtensionMap.put(".ogg", Integer.valueOf(FILE_TYPE_AUDIO));
        LocalExtensionMap.put(".m4a", Integer.valueOf(FILE_TYPE_AUDIO));
        LocalExtensionMap.put(".aac", Integer.valueOf(FILE_TYPE_AUDIO));
        LocalExtensionMap.put(".flac", Integer.valueOf(FILE_TYPE_AUDIO));
        LocalExtensionMap.put(".mid", Integer.valueOf(FILE_TYPE_AUDIO));
        LocalExtensionMap.put(".amr", Integer.valueOf(FILE_TYPE_VOICE));
        LocalExtensionMap.put(".pdf", Integer.valueOf(FILE_TYPE_PDF));
        LocalExtensionMap.put(".doc", Integer.valueOf(FILE_TYPE_OFFICE));
        LocalExtensionMap.put(".docx", Integer.valueOf(FILE_TYPE_OFFICE));
        LocalExtensionMap.put(".xls", Integer.valueOf(FILE_TYPE_OFFICE));
        LocalExtensionMap.put(".xlsx", Integer.valueOf(FILE_TYPE_OFFICE));
        LocalExtensionMap.put(".txt", Integer.valueOf(FILE_TYPE_OFFICE));
        LocalExtensionMap.put(".rtf", Integer.valueOf(FILE_TYPE_OFFICE));
        LocalExtensionMap.put(".ppt", Integer.valueOf(FILE_TYPE_OFFICE));
        LocalExtensionMap.put(".pptx", Integer.valueOf(FILE_TYPE_OFFICE));
        LocalExtensionMap.put(".ods", Integer.valueOf(FILE_TYPE_OFFICE));
        LocalExtensionMap.put(".odt", Integer.valueOf(FILE_TYPE_OFFICE));
        LocalExtensionMap.put(".odp", Integer.valueOf(FILE_TYPE_OFFICE));
        LocalExtensionMap.put(".3gp", Integer.valueOf(FILE_TYPE_VIDEO));
        LocalExtensionMap.put(".3gpp", Integer.valueOf(FILE_TYPE_VIDEO));
        LocalExtensionMap.put(".3gpp2", Integer.valueOf(FILE_TYPE_VIDEO));
        LocalExtensionMap.put(".mp4", Integer.valueOf(FILE_TYPE_VIDEO));
        LocalExtensionMap.put(".m4v", Integer.valueOf(FILE_TYPE_VIDEO));
        LocalExtensionMap.put(".mkv", Integer.valueOf(FILE_TYPE_VIDEO));
        LocalExtensionMap.put(".mpg", Integer.valueOf(FILE_TYPE_VIDEO));
        LocalExtensionMap.put(".mpeg", Integer.valueOf(FILE_TYPE_VIDEO));
        LocalExtensionMap.put(".wmv", Integer.valueOf(FILE_TYPE_VIDEO));
        LocalExtensionMap.put(".flv", Integer.valueOf(FILE_TYPE_VIDEO));
        LocalExtensionMap.put(".ogv", Integer.valueOf(FILE_TYPE_VIDEO));
        LocalExtensionMap.put(".avi", Integer.valueOf(FILE_TYPE_VIDEO));
        LocalExtensionMap.put(".webm", Integer.valueOf(FILE_TYPE_VIDEO));
        LocalExtensionMap.put(".wmp", Integer.valueOf(FILE_TYPE_VIDEO));
        LocalExtensionMap.put(".rar", Integer.valueOf(FILE_TYPE_COMPRESSED));
        LocalExtensionMap.put(".zip", Integer.valueOf(FILE_TYPE_COMPRESSED));
        LocalExtensionMap.put(".7z", Integer.valueOf(FILE_TYPE_COMPRESSED));
        LocalExtensionMap.put(".bz2", Integer.valueOf(FILE_TYPE_COMPRESSED));
        LocalExtensionMap.put(".gz", Integer.valueOf(FILE_TYPE_COMPRESSED));
        LocalExtensionMap.put(".gzip", Integer.valueOf(FILE_TYPE_COMPRESSED));
        LocalExtensionMap.put(".apk", Integer.valueOf(FILE_TYPE_INSTALLER));
        LocalExtensionMap.put(".stacktrace", Integer.valueOf(FILE_TYPE_OFFICE));
        LocalExtensionMap.put(".backuper", Integer.valueOf(FILE_TYPE_OFFICE));
        LocalExtensionMap.put(".vcf", Integer.valueOf(FILE_TYPE_OFFICE));
        LocalMimeTypeMap.put(".jpg", "image/jpg");
        LocalMimeTypeMap.put(".jpeg", "image/jpeg");
        LocalMimeTypeMap.put(".png", "image/png");
        LocalMimeTypeMap.put(".tiff", "image/tiff");
        LocalMimeTypeMap.put(".gif", "image/gif");
        LocalMimeTypeMap.put(".webp", "image/webp");
        LocalMimeTypeMap.put(".bmp", "image/bmp");
        LocalMimeTypeMap.put(".svg", "image/svg+xml");
        LocalMimeTypeMap.put(".3ga", "audio/3ga");
        LocalMimeTypeMap.put(".mp3", "audio/mp3");
        LocalMimeTypeMap.put(".mp2", "audio/mp2");
        LocalMimeTypeMap.put(".ogg", "audio/ogg");
        LocalMimeTypeMap.put(".amr", "audio/amr");
        LocalMimeTypeMap.put(".m4a", "audio/m4a");
        LocalMimeTypeMap.put(".aac", "audio/aac");
        LocalMimeTypeMap.put(".flac", "audio/flac");
        LocalMimeTypeMap.put(".mid", "audio/mid");
        LocalMimeTypeMap.put(".3gp", "video/3gp");
        LocalMimeTypeMap.put(".3gpp", "video/3gpp");
        LocalMimeTypeMap.put(".3gpp2", "video/3gpp2");
        LocalMimeTypeMap.put(".mp4", "video/mp4");
        LocalMimeTypeMap.put(".m4v", "video/m4v");
        LocalMimeTypeMap.put(".mkv", "video/x-matroska");
        LocalMimeTypeMap.put(".mpg", "video/mpg");
        LocalMimeTypeMap.put(".mpeg", "video/mpeg");
        LocalMimeTypeMap.put(".wmv", "video/wmv");
        LocalMimeTypeMap.put(".flv", "video/flv");
        LocalMimeTypeMap.put(".ogv", "video/ogv");
        LocalMimeTypeMap.put(".avi", "video/avi");
        LocalMimeTypeMap.put(".webm", "video/webm");
        LocalMimeTypeMap.put(".wmp", "video/x-ms-wmp");
        LocalMimeTypeMap.put(".pdf", "application/pdf");
        LocalMimeTypeMap.put(".doc", "application/msword");
        LocalMimeTypeMap.put(".docx", "application/msword");
        LocalMimeTypeMap.put(".xls", "application/vnd.ms-excel");
        LocalMimeTypeMap.put(".xlsx", "application/vnd.ms-excel");
        LocalMimeTypeMap.put(".ppt", "application/vnd.ms-powerpoint");
        LocalMimeTypeMap.put(".pptx", "application/vnd.ms-powerpoint");
        LocalMimeTypeMap.put(".odt", "application/vnd.oasis.opendocument.text");
        LocalMimeTypeMap.put(".odp", "application/vnd.oasis.opendocument.presentation");
        LocalMimeTypeMap.put(".ods", "application/vnd.oasis.opendocument.spreadsheet");
        LocalMimeTypeMap.put(".rar", "application/x-rar-compressed");
        LocalMimeTypeMap.put(".7z", "application/x-7z-compressed");
        LocalMimeTypeMap.put(".zip", "application/zip");
        LocalMimeTypeMap.put(".gz", "application/x-gzip");
        LocalMimeTypeMap.put(".gzip", "application/x-gzip");
        LocalMimeTypeMap.put(".bz2", "application/x-bzip2");
        LocalMimeTypeMap.put(".apk", "application/vnd.android.package-archive");
        LocalMimeTypeMap.put(".stacktrace", HTTP.PLAIN_TEXT_TYPE);
        LocalMimeTypeMap.put(".backuper", HTTP.PLAIN_TEXT_TYPE);
        LocalMimeTypeMap.put(".txt", HTTP.PLAIN_TEXT_TYPE);
        LocalMimeTypeMap.put(".rtf", HTTP.PLAIN_TEXT_TYPE);
        LocalMimeTypeMap.put(".vcf", "text/x-vcard");
    }

    private Utils() {
    }

    public static String buildFileName(String str, String str2) {
        if (str == null) {
            return "file_unknown";
        }
        String decode = Uri.decode(str);
        if (decode == null) {
            return "file_unknown";
        }
        if (str2 == null) {
            return decode;
        }
        Uri parse = Uri.parse(str);
        if (parse == null || getExtensionFromUri(parse) != null) {
            return decode;
        }
        String toLowerCase = str2.toLowerCase(Locale.US);
        int lastIndexOf = toLowerCase.lastIndexOf(47);
        if (lastIndexOf < 0 || lastIndexOf >= toLowerCase.length()) {
            return decode;
        }
        return decode + "." + toLowerCase.substring(lastIndexOf + FILE_TYPE_IMAGE);
    }

    public static void disableConnectionReuseIfNecessary() {
        if (hasHttpConnectionBug()) {
            System.setProperty("http.keepAlive", "false");
        }
    }

    public static int getBitmapSize(Bitmap bitmap) {
        return VERSION.SDK_INT >= 12 ? bitmap.getByteCount() : bitmap.getRowBytes() * bitmap.getHeight();
    }

    public static String getExtension(String str) {
        if (str == null) {
            return null;
        }
        String toLowerCase = str.toLowerCase(Locale.US);
        int lastIndexOf = toLowerCase.lastIndexOf(46);
        if (lastIndexOf < 0) {
            return null;
        }
        toLowerCase = toLowerCase.substring(lastIndexOf);
        return (toLowerCase == null || toLowerCase.length() == FILE_TYPE_IMAGE) ? null : toLowerCase;
    }

    public static String getExtensionFromUri(Uri uri) {
        if (uri == null) {
            return null;
        }
        String extension = getExtension(uri.toString());
        return (extension == null || extension.length() == FILE_TYPE_IMAGE) ? null : extension;
    }

    public static File getExternalCacheDir(Context context) {
        if (hasExternalCacheDir()) {
            return context.getExternalCacheDir();
        }
        return new File(Environment.getExternalStorageDirectory().getPath() + ("/Android/data/" + context.getPackageName() + "/cache/"));
    }

    public static String getFileNameFromPath(String str) {
        if (str == null) {
            return null;
        }
        String decode = Uri.decode(str);
        if (decode == null) {
            return null;
        }
        int lastIndexOf = decode.lastIndexOf(47);
        return (lastIndexOf < 0 || lastIndexOf >= decode.length()) ? decode : Uri.encode(decode.substring(lastIndexOf + FILE_TYPE_IMAGE));
    }

    public static String getFileSize(long j) {
        if (j <= 0) {
            return "0";
        }
        String[] strArr = new String[FILE_TYPE_OFFICE];
        strArr[FILE_TYPE_GENERAL] = " B";
        strArr[FILE_TYPE_IMAGE] = " kB";
        strArr[FILE_TYPE_AUDIO] = " MB";
        strArr[FILE_TYPE_VOICE] = " GB";
        strArr[FILE_TYPE_PDF] = " TB";
        int log10 = (int) (Math.log10((double) j) / Math.log10(1024.0d));
        return new DecimalFormat("#,##0.#").format(((double) j) / Math.pow(1024.0d, (double) log10)) + " " + strArr[log10];
    }

    public static int getFileTypeFromExtension(String str) {
        return (str != null && LocalExtensionMap.containsKey(str)) ? ((Integer) LocalExtensionMap.get(str)).intValue() : FILE_TYPE_GENERAL;
    }

    public static int getFileTypeFromFileName(String str) {
        String str2 = "";
        if (str == null || str.isEmpty() || !str.contains(".")) {
            Log.d(TAG, "filePath doesn't contain extension");
            return FILE_TYPE_GENERAL;
        }
        str2 = getExtension(str);
        return (str2 == null || str2.isEmpty() || !LocalExtensionMap.containsKey(str2)) ? FILE_TYPE_GENERAL : ((Integer) LocalExtensionMap.get(str2)).intValue();
    }

    public static int getFileTypeFromPath(String str) {
        return getFileTypeFromFileName(str);
    }

    public static int getMaxMemory() {
        return (int) Runtime.getRuntime().maxMemory();
    }

    public static int getMemoryClass(Context context) {
        return ((ActivityManager) context.getSystemService("activity")).getMemoryClass();
    }

    public static String getSafeFileName(String str) {
        if (str == null) {
            return "file_unknown";
        }
        String decode = Uri.decode(str);
        return decode == null ? "file_unknown" : decode.replace(" ", "_").replace("%", "_");
    }

    public static long getUsableSpace(File file) {
        if (VERSION.SDK_INT >= 9) {
            return file.getUsableSpace();
        }
        StatFs statFs = new StatFs(file.getPath());
        return ((long) statFs.getAvailableBlocks()) * ((long) statFs.getBlockSize());
    }

    public static String getmimetype(Uri uri) {
        if (uri == null) {
            return HTTP.OCTET_STREAM_TYPE;
        }
        String extensionFromUri = getExtensionFromUri(uri);
        if (extensionFromUri == null) {
            return HTTP.OCTET_STREAM_TYPE;
        }
        String str = null;
        if (LocalMimeTypeMap.containsKey(extensionFromUri)) {
            str = (String) LocalMimeTypeMap.get(extensionFromUri);
        } else {
            URLConnection.guessContentTypeFromName(uri.toString().toLowerCase(Locale.US));
        }
        return str == null ? HTTP.OCTET_STREAM_TYPE : str;
    }

    public static String getmimetypeFromExtension(String str) {
        if (str == null) {
            return HTTP.OCTET_STREAM_TYPE;
        }
        String str2 = null;
        if (LocalMimeTypeMap.containsKey(str)) {
            str2 = (String) LocalMimeTypeMap.get(str);
        }
        return str2 == null ? HTTP.OCTET_STREAM_TYPE : str2;
    }

    public static boolean hasActionBar() {
        return VERSION.SDK_INT >= 11;
    }

    public static boolean hasExternalCacheDir() {
        return VERSION.SDK_INT >= FILE_TYPE_INSTALLER;
    }

    public static boolean hasFroyo() {
        return VERSION.SDK_INT >= FILE_TYPE_INSTALLER;
    }

    public static boolean hasGingerbread() {
        return VERSION.SDK_INT >= 9;
    }

    public static boolean hasGingerbreadMR1() {
        return VERSION.SDK_INT >= 10;
    }

    public static boolean hasHoneycomb() {
        return VERSION.SDK_INT >= 11;
    }

    public static boolean hasHoneycombMR1() {
        return VERSION.SDK_INT >= 12;
    }

    public static boolean hasHoneycombMR2() {
        return VERSION.SDK_INT >= 13;
    }

    public static boolean hasHttpConnectionBug() {
        return VERSION.SDK_INT < FILE_TYPE_INSTALLER;
    }

    public static boolean hasIceCreamSandwich() {
        return VERSION.SDK_INT >= 14;
    }

    public static boolean hasIceCreamSandwichMR1() {
        return VERSION.SDK_INT >= 15;
    }

    public static boolean hasJellyBean() {
        return VERSION.SDK_INT >= 16;
    }

    public static boolean hasJellyBeanMR1() {
        return VERSION.SDK_INT >= 17;
    }

    public static boolean hasJellyBeanMR2() {
        return VERSION.SDK_INT >= 18;
    }

    public static boolean hasKitKat() {
        return VERSION.SDK_INT >= 19;
    }

    public static boolean hasKitKatWatch() {
        return VERSION.SDK_INT >= 20;
    }

    public static boolean hasLollipop() {
        return VERSION.SDK_INT >= 21;
    }

    public static boolean hasLollipopMR1() {
        return VERSION.SDK_INT >= 22;
    }

    public static boolean hasM() {
        return VERSION.SDK_INT >= 23;
    }

    public static boolean isEmailValid(String str) {
        return Pattern.compile("^(([\\w-]+\\.)+[\\w-]+|([a-zA-Z]{1}|[\\w-]{2,}))@((([0-1]?[0-9]{1,2}|25[0-5]|2[0-4][0-9])\\.([0-1]?[0-9]{1,2}|25[0-5]|2[0-4][0-9])\\.([0-1]?[0-9]{1,2}|25[0-5]|2[0-4][0-9])\\.([0-1]?[0-9]{1,2}|25[0-5]|2[0-4][0-9])){1}|([a-zA-Z]+[\\w-]+\\.)+[a-zA-Z]{2,4})$", FILE_TYPE_AUDIO).matcher(str).matches();
    }

    public static boolean isExternalStorageRemovable() {
        return VERSION.SDK_INT >= 9 ? Environment.isExternalStorageRemovable() : true;
    }

    public static int poolDataTypeToFileType(int i) {
        switch (AnonymousClass1.$SwitchMap$com$catfiz$pool$PoolDataUploadExecutor$PoolDataType[PoolDataType.values()[i].ordinal()]) {
            case FILE_TYPE_AUDIO /*2*/:
                return FILE_TYPE_VOICE;
            case FILE_TYPE_VOICE /*3*/:
                return FILE_TYPE_IMAGE;
            case FILE_TYPE_PDF /*4*/:
                return FILE_TYPE_IMAGE;
            case FILE_TYPE_VIDEO /*6*/:
                return FILE_TYPE_IMAGE;
            case FILE_TYPE_COMPRESSED /*7*/:
                return FILE_TYPE_VIDEO;
            default:
                return FILE_TYPE_GENERAL;
        }
    }
}
