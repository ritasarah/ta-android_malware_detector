package com.catfiz.gif;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Matrix;
import android.graphics.Matrix.ScaleToFit;
import android.graphics.RectF;
import android.graphics.SurfaceTexture;
import android.os.Parcelable;
import android.util.AttributeSet;
import android.util.TypedValue;
import android.view.Surface;
import android.view.TextureView;
import android.view.TextureView.SurfaceTextureListener;
import android.widget.ImageView.ScaleType;
import com.albus.view.ChatItemStreamView;
import com.catfiz.gif.InputSource.AssetSource;
import com.catfiz.gif.InputSource.ResourcesSource;
import com.catfiz.util.Utils;
import java.io.IOException;
import java.lang.ref.WeakReference;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;

public class GifTextureView extends TextureView {
    private static final ScaleType[] sScaleTypeArray = new ScaleType[]{ScaleType.MATRIX, ScaleType.FIT_XY, ScaleType.FIT_START, ScaleType.FIT_CENTER, ScaleType.FIT_END, ScaleType.CENTER, ScaleType.CENTER_CROP, ScaleType.CENTER_INSIDE};
    private boolean mFreezesAnimation;
    private InputSource mInputSource;
    private RenderThread mRenderThread;
    private ScaleType mScaleType = ScaleType.FIT_CENTER;
    private float mSpeedFactor = 1.0f;
    private final Matrix mTransform = new Matrix();

    /* synthetic */ class AnonymousClass1 {
        static final /* synthetic */ int[] $SwitchMap$android$widget$ImageView$ScaleType = new int[ScaleType.values().length];

        static {
            try {
                $SwitchMap$android$widget$ImageView$ScaleType[ScaleType.CENTER.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$android$widget$ImageView$ScaleType[ScaleType.CENTER_CROP.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$android$widget$ImageView$ScaleType[ScaleType.CENTER_INSIDE.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$android$widget$ImageView$ScaleType[ScaleType.FIT_CENTER.ordinal()] = 4;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$android$widget$ImageView$ScaleType[ScaleType.FIT_END.ordinal()] = 5;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$android$widget$ImageView$ScaleType[ScaleType.FIT_START.ordinal()] = 6;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$android$widget$ImageView$ScaleType[ScaleType.FIT_XY.ordinal()] = 7;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$android$widget$ImageView$ScaleType[ScaleType.MATRIX.ordinal()] = 8;
            } catch (NoSuchFieldError e8) {
            }
        }
    }

    class RenderThread extends Thread implements SurfaceTextureListener {
        final ConditionVariable isSurfaceValid = new ConditionVariable();
        private GifInfoHandle mGifInfoHandle = GifInfoHandle.NULL_INFO;
        private final WeakReference mGifTextureViewReference;
        private IOException mIOException;
        long[] mSavedState;

        RenderThread(GifTextureView gifTextureView) {
            super("GifRenderThread");
            this.mGifTextureViewReference = new WeakReference(gifTextureView);
        }

        void dispose(GifTextureView gifTextureView) {
            this.isSurfaceValid.close();
            gifTextureView.setSuperSurfaceTextureListener(null);
            this.mGifInfoHandle.postUnbindSurface();
            interrupt();
            boolean isInterrupted = Thread.currentThread().isInterrupted();
            if (isInterrupted) {
                interrupted();
            }
            try {
                join();
                if (isInterrupted) {
                    Thread.currentThread().interrupt();
                }
            } catch (Throwable e) {
                throw new RuntimeException(e);
            }
        }

        public void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture, int i, int i2) {
            GifTextureView gifTextureView = (GifTextureView) this.mGifTextureViewReference.get();
            if (gifTextureView != null) {
                gifTextureView.updateTextureViewSize(this.mGifInfoHandle);
            }
            this.isSurfaceValid.open();
        }

        public boolean onSurfaceTextureDestroyed(SurfaceTexture surfaceTexture) {
            this.isSurfaceValid.close();
            this.mGifInfoHandle.postUnbindSurface();
            return false;
        }

        public void onSurfaceTextureSizeChanged(SurfaceTexture surfaceTexture, int i, int i2) {
        }

        public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {
        }

        public void run() {
            try {
                GifTextureView gifTextureView = (GifTextureView) this.mGifTextureViewReference.get();
                if (gifTextureView != null) {
                    this.mGifInfoHandle = gifTextureView.mInputSource.open();
                    gifTextureView = (GifTextureView) this.mGifTextureViewReference.get();
                    if (gifTextureView == null) {
                        this.mGifInfoHandle.recycle();
                        return;
                    }
                    gifTextureView.setSuperSurfaceTextureListener(this);
                    boolean isAvailable = gifTextureView.isAvailable();
                    this.isSurfaceValid.set(isAvailable);
                    if (isAvailable) {
                        gifTextureView.post(new Runnable() {
                            public void run() {
                                gifTextureView.updateTextureViewSize(RenderThread.this.mGifInfoHandle);
                            }
                        });
                    }
                    this.mGifInfoHandle.setSpeedFactor(gifTextureView.mSpeedFactor);
                    while (!isInterrupted()) {
                        try {
                            this.isSurfaceValid.block();
                            SurfaceTexture surfaceTexture = gifTextureView.getSurfaceTexture();
                            if (surfaceTexture != null) {
                                Surface surface = new Surface(surfaceTexture);
                                try {
                                    this.mGifInfoHandle.bindSurface(surface, this.mSavedState, gifTextureView.isOpaque());
                                } finally {
                                    surface.release();
                                }
                            }
                        } catch (InterruptedException e) {
                        }
                    }
                    this.mGifInfoHandle.recycle();
                    this.mGifInfoHandle = GifInfoHandle.NULL_INFO;
                }
            } catch (IOException e2) {
                this.mIOException = e2;
            }
        }
    }

    static {
        System.loadLibrary("catfizgif_surface");
    }

    public GifTextureView(Context context) {
        super(context);
        init(null, 0, 0);
    }

    public GifTextureView(Context context, AttributeSet attributeSet) {
        super(context, attributeSet);
        init(attributeSet, 0, 0);
    }

    public GifTextureView(Context context, AttributeSet attributeSet, int i) {
        super(context, attributeSet, i);
        init(attributeSet, i, 0);
    }

    public GifTextureView(Context context, AttributeSet attributeSet, int i, int i2) {
        super(context, attributeSet, i, i2);
        init(attributeSet, i, i2);
    }

    private static InputSource findSource(TypedArray typedArray) {
        TypedValue typedValue = new TypedValue();
        if (!typedArray.getValue(R.styleable.GifTextureView_gifSource, typedValue)) {
            return null;
        }
        if (typedValue.resourceId != 0) {
            String resourceTypeName = typedArray.getResources().getResourceTypeName(typedValue.resourceId);
            if ("drawable".equals(resourceTypeName) || "raw".equals(resourceTypeName)) {
                return new ResourcesSource(typedArray.getResources(), typedValue.resourceId);
            }
            if (!"string".equals(resourceTypeName)) {
                throw new IllegalArgumentException("Expected string, drawable or raw resource, type " + resourceTypeName + " " + "cannot be converted to GIF");
            }
        }
        return new AssetSource(typedArray.getResources().getAssets(), typedValue.string.toString());
    }

    private void init(AttributeSet attributeSet, int i, int i2) {
        if (attributeSet != null) {
            int attributeIntValue = attributeSet.getAttributeIntValue(ChatItemStreamView.GLOBAL_NS, "scaleType", -1);
            if (attributeIntValue >= 0 && attributeIntValue < sScaleTypeArray.length) {
                this.mScaleType = sScaleTypeArray[attributeIntValue];
            }
            TypedArray obtainStyledAttributes = getContext().obtainStyledAttributes(attributeSet, R.styleable.GifTextureView, i, i2);
            this.mInputSource = findSource(obtainStyledAttributes);
            super.setOpaque(obtainStyledAttributes.getBoolean(R.styleable.GifTextureView_isOpaque, false));
            obtainStyledAttributes.recycle();
            this.mFreezesAnimation = GifViewUtils.isFreezingAnimation(this, attributeSet, i, i2);
        } else {
            super.setOpaque(false);
        }
        if (!isInEditMode()) {
            this.mRenderThread = new RenderThread(this);
            if (this.mInputSource != null) {
                this.mRenderThread.start();
            }
        }
    }

    private void setSuperSurfaceTextureListener(RenderThread renderThread) {
        super.setSurfaceTextureListener(renderThread);
    }

    private void updateTextureViewSize(GifInfoHandle gifInfoHandle) {
        float f = 1.0f;
        Matrix matrix = new Matrix();
        float width = (float) getWidth();
        float height = (float) getHeight();
        float f2 = ((float) gifInfoHandle.width) / width;
        float f3 = ((float) gifInfoHandle.height) / height;
        RectF rectF = new RectF(0.0f, 0.0f, (float) gifInfoHandle.width, (float) gifInfoHandle.height);
        RectF rectF2 = new RectF(0.0f, 0.0f, width, height);
        switch (AnonymousClass1.$SwitchMap$android$widget$ImageView$ScaleType[this.mScaleType.ordinal()]) {
            case e.b /*1*/:
                matrix.setScale(f2, f3, width / 2.0f, height / 2.0f);
                break;
            case e.c /*2*/:
                f = 1.0f / Math.min(f2, f3);
                matrix.setScale(f2 * f, f * f3, width / 2.0f, height / 2.0f);
                break;
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                if (((float) gifInfoHandle.width) > width || ((float) gifInfoHandle.height) > height) {
                    f = Math.min(1.0f / f2, 1.0f / f3);
                }
                matrix.setScale(f2 * f, f * f3, width / 2.0f, height / 2.0f);
                break;
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                matrix.setRectToRect(rectF, rectF2, ScaleToFit.CENTER);
                matrix.preScale(f2, f3);
                break;
            case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                matrix.setRectToRect(rectF, rectF2, ScaleToFit.END);
                matrix.preScale(f2, f3);
                break;
            case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                matrix.setRectToRect(rectF, rectF2, ScaleToFit.START);
                matrix.preScale(f2, f3);
                break;
            case SimpleLog.LOG_LEVEL_OFF /*7*/:
                return;
            case Utils.FILE_TYPE_INSTALLER /*8*/:
                matrix.set(this.mTransform);
                matrix.preScale(f2, f3);
                break;
        }
        super.setTransform(matrix);
    }

    public IOException getIOException() {
        return this.mRenderThread.mIOException != null ? this.mRenderThread.mIOException : GifIOException.fromCode(this.mRenderThread.mGifInfoHandle.getNativeErrorCode());
    }

    public ScaleType getScaleType() {
        return this.mScaleType;
    }

    public SurfaceTextureListener getSurfaceTextureListener() {
        return null;
    }

    public Matrix getTransform(Matrix matrix) {
        if (matrix == null) {
            matrix = new Matrix();
        }
        matrix.set(this.mTransform);
        return matrix;
    }

    protected void onDetachedFromWindow() {
        this.mRenderThread.dispose(this);
        super.onDetachedFromWindow();
        SurfaceTexture surfaceTexture = getSurfaceTexture();
        if (surfaceTexture != null) {
            surfaceTexture.release();
        }
    }

    public void onRestoreInstanceState(Parcelable parcelable) {
        GifViewSavedState gifViewSavedState = (GifViewSavedState) parcelable;
        super.onRestoreInstanceState(gifViewSavedState.getSuperState());
        this.mRenderThread.mSavedState = gifViewSavedState.mStates[0];
    }

    public Parcelable onSaveInstanceState() {
        this.mRenderThread.mSavedState = this.mRenderThread.mGifInfoHandle.getSavedState();
        return new GifViewSavedState(super.onSaveInstanceState(), this.mFreezesAnimation ? this.mRenderThread.mSavedState : null);
    }

    public void setFreezesAnimation(boolean z) {
        this.mFreezesAnimation = z;
    }

    public void setImageMatrix(Matrix matrix) {
        setTransform(matrix);
    }

    public synchronized void setInputSource(InputSource inputSource) {
        this.mRenderThread.dispose(this);
        this.mInputSource = inputSource;
        this.mRenderThread = new RenderThread(this);
        if (inputSource != null) {
            this.mRenderThread.start();
        }
    }

    public void setOpaque(boolean z) {
        if (z != isOpaque()) {
            super.setOpaque(z);
            setInputSource(this.mInputSource);
        }
    }

    public void setScaleType(ScaleType scaleType) {
        this.mScaleType = scaleType;
        updateTextureViewSize(this.mRenderThread.mGifInfoHandle);
    }

    public void setSpeed(float f) {
        this.mSpeedFactor = f;
        this.mRenderThread.mGifInfoHandle.setSpeedFactor(f);
    }

    public void setSurfaceTexture(SurfaceTexture surfaceTexture) {
        throw new UnsupportedOperationException("Changing SurfaceTexture is not supported");
    }

    public void setSurfaceTextureListener(SurfaceTextureListener surfaceTextureListener) {
        throw new UnsupportedOperationException("Changing SurfaceTextureListener is not supported");
    }

    public void setTransform(Matrix matrix) {
        this.mTransform.set(matrix);
        updateTextureViewSize(this.mRenderThread.mGifInfoHandle);
    }
}
