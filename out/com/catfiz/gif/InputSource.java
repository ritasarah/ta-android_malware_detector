package com.catfiz.gif;

import android.content.ContentResolver;
import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.net.Uri;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.concurrent.ScheduledThreadPoolExecutor;

public abstract class InputSource {
    private boolean mIsOpaque;

    public class AssetFileDescriptorSource extends InputSource {
        private final AssetFileDescriptor mAssetFileDescriptor;

        public AssetFileDescriptorSource(AssetFileDescriptor assetFileDescriptor) {
            this.mAssetFileDescriptor = assetFileDescriptor;
        }

        GifInfoHandle open() {
            return GifInfoHandle.openAssetFileDescriptor(this.mAssetFileDescriptor, false);
        }
    }

    public final class AssetSource extends InputSource {
        private final AssetManager mAssetManager;
        private final String mAssetName;

        public AssetSource(AssetManager assetManager, String str) {
            this.mAssetManager = assetManager;
            this.mAssetName = str;
        }

        GifInfoHandle open() {
            return GifInfoHandle.openAssetFileDescriptor(this.mAssetManager.openFd(this.mAssetName), false);
        }
    }

    public final class ByteArraySource extends InputSource {
        private final byte[] bytes;

        public ByteArraySource(byte[] bArr) {
            this.bytes = bArr;
        }

        GifInfoHandle open() {
            return GifInfoHandle.openByteArray(this.bytes, false);
        }
    }

    public final class DirectByteBufferSource extends InputSource {
        private final ByteBuffer byteBuffer;

        public DirectByteBufferSource(ByteBuffer byteBuffer) {
            this.byteBuffer = byteBuffer;
        }

        GifInfoHandle open() {
            return GifInfoHandle.openDirectByteBuffer(this.byteBuffer, false);
        }
    }

    public final class FileDescriptorSource extends InputSource {
        private final FileDescriptor mFd;

        public FileDescriptorSource(FileDescriptor fileDescriptor) {
            this.mFd = fileDescriptor;
        }

        GifInfoHandle open() {
            return GifInfoHandle.openFd(this.mFd, 0, false);
        }
    }

    public final class FileSource extends InputSource {
        private final String mPath;

        public FileSource(File file) {
            this.mPath = file.getPath();
        }

        public FileSource(String str) {
            this.mPath = str;
        }

        GifInfoHandle open() {
            return GifInfoHandle.openFile(this.mPath, false);
        }
    }

    public final class InputStreamSource extends InputSource {
        private final InputStream inputStream;

        public InputStreamSource(InputStream inputStream) {
            this.inputStream = inputStream;
        }

        GifInfoHandle open() {
            return GifInfoHandle.openMarkableInputStream(this.inputStream, false);
        }
    }

    public class ResourcesSource extends InputSource {
        private final int mResourceId;
        private final Resources mResources;

        public ResourcesSource(Resources resources, int i) {
            this.mResources = resources;
            this.mResourceId = i;
        }

        GifInfoHandle open() {
            return GifInfoHandle.openAssetFileDescriptor(this.mResources.openRawResourceFd(this.mResourceId), false);
        }
    }

    public final class UriSource extends InputSource {
        private final ContentResolver mContentResolver;
        private final Uri mUri;

        public UriSource(ContentResolver contentResolver, Uri uri) {
            this.mContentResolver = contentResolver;
            this.mUri = uri;
        }

        GifInfoHandle open() {
            return GifInfoHandle.openUri(this.mContentResolver, this.mUri, false);
        }
    }

    InputSource() {
    }

    final GifDrawable build(GifDrawable gifDrawable, ScheduledThreadPoolExecutor scheduledThreadPoolExecutor, boolean z) {
        return new GifDrawable(open(), gifDrawable, scheduledThreadPoolExecutor, z);
    }

    final boolean isOpaque() {
        return this.mIsOpaque;
    }

    abstract GifInfoHandle open();

    final InputSource setOpaque(boolean z) {
        this.mIsOpaque = z;
        return this;
    }
}
