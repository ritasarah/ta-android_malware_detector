package com.catfiz.gif;

import android.content.ContentResolver;
import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.net.Uri;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.Creator;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.Serializable;
import java.nio.ByteBuffer;
import java.util.Locale;

public class GifAnimationMetaData implements Parcelable, Serializable {
    public static final Creator CREATOR = new Creator() {
        public GifAnimationMetaData createFromParcel(Parcel parcel) {
            return new GifAnimationMetaData(parcel);
        }

        public GifAnimationMetaData[] newArray(int i) {
            return new GifAnimationMetaData[i];
        }
    };
    private static final long serialVersionUID = 5692363926580237325L;
    private final int mDuration;
    private final int mHeight;
    private final int mImageCount;
    private final int mLoopCount;
    private final int mWidth;

    public GifAnimationMetaData(ContentResolver contentResolver, Uri uri) {
        this(GifInfoHandle.openUri(contentResolver, uri, true));
    }

    public GifAnimationMetaData(AssetFileDescriptor assetFileDescriptor) {
        this(GifInfoHandle.openAssetFileDescriptor(assetFileDescriptor, true));
    }

    public GifAnimationMetaData(AssetManager assetManager, String str) {
        this(assetManager.openFd(str));
    }

    public GifAnimationMetaData(Resources resources, int i) {
        this(resources.openRawResourceFd(i));
    }

    private GifAnimationMetaData(Parcel parcel) {
        this.mLoopCount = parcel.readInt();
        this.mDuration = parcel.readInt();
        this.mHeight = parcel.readInt();
        this.mWidth = parcel.readInt();
        this.mImageCount = parcel.readInt();
    }

    private GifAnimationMetaData(GifInfoHandle gifInfoHandle) {
        this.mLoopCount = gifInfoHandle.getLoopCount();
        this.mDuration = gifInfoHandle.getDuration();
        gifInfoHandle.recycle();
        this.mWidth = gifInfoHandle.width;
        this.mHeight = gifInfoHandle.height;
        this.mImageCount = gifInfoHandle.frameCount;
    }

    public GifAnimationMetaData(File file) {
        this(GifInfoHandle.openFile(file.getPath(), true));
    }

    public GifAnimationMetaData(FileDescriptor fileDescriptor) {
        this(GifInfoHandle.openFd(fileDescriptor, 0, true));
    }

    public GifAnimationMetaData(InputStream inputStream) {
        this(GifInfoHandle.openMarkableInputStream(inputStream, true));
    }

    public GifAnimationMetaData(String str) {
        this(GifInfoHandle.openFile(str, true));
    }

    public GifAnimationMetaData(ByteBuffer byteBuffer) {
        this(GifInfoHandle.openDirectByteBuffer(byteBuffer, true));
    }

    public GifAnimationMetaData(byte[] bArr) {
        this(GifInfoHandle.openByteArray(bArr, true));
    }

    public int describeContents() {
        return 0;
    }

    public int getDuration() {
        return this.mDuration;
    }

    public int getHeight() {
        return this.mHeight;
    }

    public int getLoopCount() {
        return this.mLoopCount;
    }

    public int getNumberOfFrames() {
        return this.mImageCount;
    }

    public int getWidth() {
        return this.mWidth;
    }

    public boolean isAnimated() {
        return this.mImageCount > 1 && this.mDuration > 0;
    }

    public String toString() {
        String num = this.mLoopCount == 0 ? "Infinity" : Integer.toString(this.mLoopCount);
        num = String.format(Locale.US, "GIF: size: %dx%d, frames: %d, loops: %s, duration: %d", new Object[]{Integer.valueOf(this.mWidth), Integer.valueOf(this.mHeight), Integer.valueOf(this.mImageCount), num, Integer.valueOf(this.mDuration)});
        return isAnimated() ? "Animated " + num : num;
    }

    public void writeToParcel(Parcel parcel, int i) {
        parcel.writeInt(this.mLoopCount);
        parcel.writeInt(this.mDuration);
        parcel.writeInt(this.mHeight);
        parcel.writeInt(this.mWidth);
        parcel.writeInt(this.mImageCount);
    }
}
