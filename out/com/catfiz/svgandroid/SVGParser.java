package com.catfiz.svgandroid;

import android.content.res.AssetManager;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapShader;
import android.graphics.BlurMaskFilter;
import android.graphics.BlurMaskFilter.Blur;
import android.graphics.Canvas;
import android.graphics.DashPathEffect;
import android.graphics.LinearGradient;
import android.graphics.MaskFilter;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Paint.Cap;
import android.graphics.Paint.Join;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.Picture;
import android.graphics.RadialGradient;
import android.graphics.RectF;
import android.graphics.Region.Op;
import android.graphics.Shader;
import android.graphics.Shader.TileMode;
import android.support.v4.view.ViewCompat;
import com.catfiz.R;
import com.catfiz.consts.CatfizImageSize;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.util.Log;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.zip.GZIPInputStream;
import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.parsers.SAXParserFactory;
import org.apache.http.HttpStatus;
import org.apache.http.protocol.HTTP;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

public class SVGParser {
    static float DPI = 72.0f;
    static final String TAG = "SVGAndroid";
    static float dpi = DPI;

    class ClipPath {
        String id;
        Path p;

        private ClipPath() {
        }
    }

    class Filter {
        float height = 0.0f;
        String id = null;
        ArrayList items = new ArrayList();
        float width = 0.0f;
        float x = 0.0f;
        float y = 0.0f;

        public Filter(Filter filter) {
            if (filter != null) {
                this.id = filter.id;
                this.x = filter.x;
                this.y = filter.y;
                this.width = filter.width;
                this.height = filter.height;
                Iterator it = filter.items.iterator();
                while (it.hasNext()) {
                    this.items.add(new FilterItem((FilterItem) it.next()));
                }
            }
        }

        public void addItems(Filter filter) {
            Iterator it = filter.items.iterator();
            while (it.hasNext()) {
                this.items.add(new FilterItem((FilterItem) it.next()));
            }
        }
    }

    class FilterItem {
        static final int FE_GAUSSIANBLUR = 1;
        static final int FE_UNDEFINED = 0;
        String id = null;
        int kind = 0;
        MaskFilter maskfilter = null;
        float radius = 0.0f;

        public FilterItem(FilterItem filterItem) {
            if (filterItem != null) {
                this.id = filterItem.id;
                this.radius = filterItem.radius;
                this.kind = filterItem.kind;
                if (filterItem.maskfilter != null && this.kind == FE_GAUSSIANBLUR) {
                    this.maskfilter = new BlurMaskFilter(this.radius, Blur.NORMAL);
                }
            }
        }
    }

    class Gradient {
        ArrayList colors;
        String id;
        boolean isLinear;
        Matrix matrix;
        ArrayList positions;
        float radius;
        float x;
        float x1;
        float x2;
        String xlink;
        float y;
        float y1;
        float y2;

        private Gradient() {
            this.positions = new ArrayList();
            this.colors = new ArrayList();
            this.matrix = null;
        }

        public Gradient createChild(Gradient gradient) {
            Gradient gradient2 = new Gradient();
            gradient2.id = gradient.id;
            gradient2.xlink = this.id;
            gradient2.isLinear = gradient.isLinear;
            gradient2.x1 = gradient.x1;
            gradient2.x2 = gradient.x2;
            gradient2.y1 = gradient.y1;
            gradient2.y2 = gradient.y2;
            gradient2.x = gradient.x;
            gradient2.y = gradient.y;
            gradient2.radius = gradient.radius;
            gradient2.positions = this.positions;
            gradient2.colors = this.colors;
            gradient2.matrix = this.matrix;
            if (gradient.matrix != null) {
                if (this.matrix == null) {
                    gradient2.matrix = gradient.matrix;
                } else {
                    Matrix matrix = new Matrix(this.matrix);
                    matrix.preConcat(gradient.matrix);
                    gradient2.matrix = matrix;
                }
            }
            return gradient2;
        }
    }

    class GraphicElement {
        Path clippath = null;
        Filter filter = null;
        float opacity = 1.0f;

        public GraphicElement(GraphicElement graphicElement) {
            if (graphicElement != null) {
                this.opacity = graphicElement.opacity;
                this.filter = new Filter(graphicElement.filter);
                if (graphicElement.clippath != null) {
                    this.clippath = new Path(graphicElement.clippath);
                }
            }
        }
    }

    class NumberParse {
        private int nextCmd;
        private ArrayList numbers;

        public NumberParse(ArrayList arrayList, int i) {
            this.numbers = arrayList;
            this.nextCmd = i;
        }

        public int getNextCmd() {
            return this.nextCmd;
        }

        public float getNumber(int i) {
            return ((Float) this.numbers.get(i)).floatValue();
        }
    }

    class Pattern {
        Bitmap bitmap;
        Canvas canvas;
        float height;
        String id;
        Matrix matrix;
        Canvas parentCanvas;
        RectF rect;
        String units;
        float width;
        String xlink;

        private Pattern() {
            this.parentCanvas = null;
            this.canvas = null;
            this.bitmap = null;
            this.width = 0.0f;
            this.height = 0.0f;
            this.matrix = null;
            this.id = null;
            this.xlink = null;
            this.rect = null;
        }

        public void beginPattern(Canvas canvas) {
            this.parentCanvas = canvas;
            if (this.width == 0.0f) {
                this.width = 10.0f;
            }
            if (this.height == 0.0f) {
                this.height = 10.0f;
            }
            this.bitmap = Bitmap.createBitmap((int) this.width, (int) this.height, Config.ARGB_8888);
            this.canvas = new Canvas(this.bitmap);
            if (this.rect != null) {
                Matrix matrix = new Matrix();
                matrix.preTranslate(-this.rect.left, -this.rect.top);
                this.canvas.setMatrix(matrix);
            }
        }

        public Canvas endPattern() {
            return this.parentCanvas;
        }
    }

    class Properties {
        Attributes atts;
        StyleSet styles;

        private Properties(Attributes attributes) {
            this.styles = null;
            this.atts = attributes;
            String access$200 = SVGParser.getStringAttr("style", attributes);
            if (access$200 != null) {
                this.styles = new StyleSet(access$200);
            }
        }

        private int hex3Tohex6(int i) {
            return ((((((i & 3840) << 8) | ((i & 3840) << 12)) | ((i & 240) << 4)) | ((i & 240) << 8)) | ((i & 15) << 4)) | (i & 15);
        }

        public String getAttr(String str) {
            String str2 = null;
            if (this.styles != null) {
                str2 = this.styles.getStyle(str);
            }
            return str2 == null ? SVGParser.getStringAttr(str, this.atts) : str2;
        }

        public Integer getColorValue(String str) {
            String attr = getAttr(str);
            String trim = attr != null ? attr.trim() : attr;
            if (trim == null) {
                return null;
            }
            if (!trim.startsWith("#") || (trim.length() != 4 && trim.length() != 7)) {
                return SVGColors.mapColor(trim);
            }
            try {
                int parseInt = Integer.parseInt(trim.substring(1), 16);
                if (trim.length() == 4) {
                    parseInt = hex3Tohex6(parseInt);
                }
                return Integer.valueOf(parseInt);
            } catch (NumberFormatException e) {
                return null;
            }
        }

        public Float getFloat(String str) {
            Float f = null;
            String attr = getAttr(str);
            if (attr != null) {
                try {
                    f = Float.valueOf(Float.parseFloat(attr));
                } catch (NumberFormatException e) {
                }
            }
            return f;
        }

        public Float getFloat(String str, float f) {
            Float f2 = getFloat(str);
            return f2 == null ? Float.valueOf(f) : f2;
        }

        public Integer getHex(String str) {
            Integer num = null;
            String attr = getAttr(str);
            if (attr != null && attr.startsWith("#")) {
                try {
                    num = Integer.valueOf(Integer.parseInt(attr.substring(1), 16));
                } catch (NumberFormatException e) {
                }
            }
            return num;
        }

        public String getString(String str) {
            return getAttr(str);
        }
    }

    class SVGHandler extends DefaultHandler {
        private static final Matrix IDENTITY_MATRIX = new Matrix();
        RectF bounds;
        private boolean boundsMode;
        Canvas canvas;
        HashMap clipPathMap;
        HashMap defObjectsMap;
        Paint fillPaint;
        Stack fillPaintStack;
        boolean fillSet;
        Stack fillSetStack;
        Filter filter;
        HashMap filterMap;
        Gradient gradient;
        ArrayList gradientForwardDefs;
        HashMap gradientMap;
        HashMap gradientRefMap;
        GraphicElement graphicElement;
        Stack graphicElementStack;
        private boolean hidden;
        private int hiddenLevel;
        private boolean inDefsElement;
        ClipPath inclippath;
        Stack indefsElementContext;
        ArrayList keyQueue;
        RectF limits;
        private String localNameContext;
        Pattern pattern;
        Picture picture;
        RectF rect;
        Integer replaceColor;
        Integer searchColor;
        Paint strokePaint;
        Stack strokePaintStack;
        boolean strokeSet;
        Stack strokeSetStack;
        Float svg_fheight;
        Float svg_fwidth;
        int svg_height;
        int svg_width;
        boolean whiteMode;

        private SVGHandler(Picture picture) {
            this.strokeSet = false;
            this.strokePaintStack = new Stack();
            this.strokeSetStack = new Stack();
            this.fillSet = false;
            this.fillPaintStack = new Stack();
            this.fillSetStack = new Stack();
            this.rect = new RectF();
            this.bounds = null;
            this.limits = new RectF(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
            this.svg_width = 0;
            this.svg_height = 0;
            this.svg_fwidth = Float.valueOf(0.0f);
            this.svg_fheight = Float.valueOf(0.0f);
            this.searchColor = null;
            this.replaceColor = null;
            this.whiteMode = false;
            this.hidden = false;
            this.hiddenLevel = 0;
            this.boundsMode = false;
            this.keyQueue = new ArrayList();
            this.graphicElementStack = new Stack();
            this.graphicElement = null;
            this.gradientMap = new HashMap();
            this.gradientRefMap = new HashMap();
            this.gradientForwardDefs = new ArrayList();
            this.gradient = null;
            this.pattern = null;
            this.filterMap = new HashMap();
            this.filter = null;
            this.clipPathMap = new HashMap();
            this.inclippath = null;
            this.inDefsElement = false;
            this.defObjectsMap = new HashMap();
            this.indefsElementContext = new Stack();
            this.picture = picture;
            this.strokePaint = new Paint();
            this.strokePaint.setAntiAlias(true);
            this.strokePaint.setStyle(Style.STROKE);
            this.fillPaint = new Paint();
            this.fillPaint.setAntiAlias(true);
            this.fillPaint.setStyle(Style.FILL);
        }

        private Float convertUnits(String str, Attributes attributes, float f) {
            String access$200 = SVGParser.getStringAttr(str, attributes);
            if (access$200 == null) {
                return null;
            }
            if (access$200.endsWith("px")) {
                return Float.valueOf(Float.parseFloat(access$200.substring(0, access$200.length() - 2)));
            }
            if (access$200.endsWith(CatfishRESTAPI.CFCOMPACT_STICKERPACKAGETYPE)) {
                return Float.valueOf((Float.valueOf(access$200.substring(0, access$200.length() - 2)).floatValue() * f) / 72.0f);
            }
            if (access$200.endsWith("pc")) {
                return Float.valueOf((Float.valueOf(access$200.substring(0, access$200.length() - 2)).floatValue() * f) / 6.0f);
            }
            if (access$200.endsWith("cm")) {
                return Float.valueOf((Float.valueOf(access$200.substring(0, access$200.length() - 2)).floatValue() * f) / 2.54f);
            }
            if (access$200.endsWith("mm")) {
                return Float.valueOf((Float.valueOf(access$200.substring(0, access$200.length() - 2)).floatValue() * f) / 254.0f);
            }
            if (access$200.endsWith("in")) {
                return Float.valueOf(Float.valueOf(access$200.substring(0, access$200.length() - 2)).floatValue() * f);
            }
            if (access$200.endsWith("em")) {
                return Float.valueOf(this.fillPaint.getTextSize() * Float.valueOf(access$200.substring(0, access$200.length() - 2)).floatValue());
            }
            if (access$200.endsWith("ex")) {
                return Float.valueOf((this.fillPaint.getTextSize() * Float.valueOf(access$200.substring(0, access$200.length() - 2)).floatValue()) / 2.0f);
            }
            if (!access$200.endsWith("%")) {
                return Float.valueOf(access$200);
            }
            if (this.canvas == null) {
                return null;
            }
            Float valueOf = Float.valueOf(access$200.substring(0, access$200.length() - 1));
            float width = (str.indexOf("x") >= 0 || str.equals("width")) ? ((float) this.canvas.getWidth()) / CatfizImageSize.IMAGE_REQUIRE_SIZE_PROFILE_POOL : (str.indexOf("y") >= 0 || str.equals("height")) ? ((float) this.canvas.getHeight()) / CatfizImageSize.IMAGE_REQUIRE_SIZE_PROFILE_POOL : ((float) (this.canvas.getHeight() + this.canvas.getWidth())) / 2.0f;
            return Float.valueOf(width * valueOf.floatValue());
        }

        private void doBitmap(Canvas canvas, float f, float f2, float f3, float f4, byte[] bArr) {
            Bitmap decodeByteArray = BitmapFactory.decodeByteArray(bArr, 0, bArr.length);
            if (decodeByteArray != null) {
                decodeByteArray.prepareToDraw();
                Paint paint = new Paint(3);
                RectF rectF = new RectF(f, f2, f + f3, f2 + f4);
                canvas.clipRect(rectF, Op.REPLACE);
                canvas.drawBitmap(decodeByteArray, null, rectF, paint);
                decodeByteArray.recycle();
            }
        }

        private void doColor(Properties properties, Integer num, boolean z, Paint paint) {
            int intValue = (ViewCompat.MEASURED_SIZE_MASK & num.intValue()) | ViewCompat.MEASURED_STATE_MASK;
            if (this.searchColor != null && this.searchColor.intValue() == intValue) {
                intValue = this.replaceColor.intValue();
            }
            paint.setColor(intValue);
            Float f = properties.getFloat("opacity");
            if (f == null) {
                f = properties.getFloat(z ? "fill-opacity" : "stroke-opacity");
            }
            if (f == null) {
                paint.setAlpha(Float.valueOf(this.graphicElement.opacity * 255.0f).intValue());
            } else {
                paint.setAlpha(Float.valueOf((f.floatValue() * 255.0f) * this.graphicElement.opacity).intValue());
            }
        }

        private void doDrawPath(Path path, Paint paint, Filter filter, Path path2) {
            if (path2 != null) {
                this.canvas.clipPath(path2, Op.INTERSECT);
            }
            if (filter == null || filter.items.size() <= 0) {
                this.canvas.drawPath(path, paint);
                return;
            }
            Iterator it = filter.items.iterator();
            while (it.hasNext()) {
                paint.setMaskFilter(((FilterItem) it.next()).maskfilter);
                this.canvas.drawPath(path, paint);
                paint.setMaskFilter(null);
            }
        }

        private boolean doFill(Properties properties, HashMap hashMap) {
            boolean z = false;
            if ("none".equals(properties.getString("display"))) {
                return false;
            }
            if (this.whiteMode) {
                this.fillPaint.setShader(null);
                this.fillPaint.setColor(-1);
                return true;
            }
            String string = properties.getString("fill");
            if (string != null) {
                if (string.startsWith("url(#")) {
                    Shader shader = (Shader) hashMap.get(string.substring("url(#".length(), string.length() - 1));
                    if (shader != null) {
                        this.fillPaint.setShader(shader);
                        doOpacity(properties, true, this.fillPaint);
                        return true;
                    }
                    this.fillPaint.setShader(null);
                    doColor(properties, Integer.valueOf(ViewCompat.MEASURED_STATE_MASK), true, this.fillPaint);
                    return true;
                } else if (string.equalsIgnoreCase("none")) {
                    this.fillPaint.setShader(null);
                    this.fillPaint.setColor(0);
                    return true;
                } else {
                    this.fillPaint.setShader(null);
                    Integer colorValue = properties.getColorValue("fill");
                    if (colorValue != null) {
                        doColor(properties, colorValue, true, this.fillPaint);
                        return true;
                    }
                    doColor(properties, Integer.valueOf(ViewCompat.MEASURED_STATE_MASK), true, this.fillPaint);
                    return true;
                }
            } else if (this.fillSet) {
                if (this.fillPaint.getColor() != 0) {
                    z = true;
                }
                return z;
            } else {
                this.fillPaint.setShader(null);
                this.fillPaint.setColor(ViewCompat.MEASURED_STATE_MASK);
                this.fillPaint.setAlpha((int) (255.0f * this.graphicElement.opacity));
                return true;
            }
        }

        private Filter doFilter(Attributes attributes) {
            Filter filter = new Filter();
            filter.id = SVGParser.getStringAttr(CatfishRESTAPI.CFCOMPACT_STICKERID, attributes);
            filter.x = getFloatAttr("x", attributes, Float.valueOf(0.0f)).floatValue();
            filter.y = getFloatAttr("y", attributes, Float.valueOf(0.0f)).floatValue();
            filter.width = getFloatAttr("width", attributes, Float.valueOf(0.0f)).floatValue();
            filter.height = getFloatAttr("height", attributes, Float.valueOf(0.0f)).floatValue();
            return filter;
        }

        private Gradient doGradient(boolean z, Attributes attributes) {
            Gradient gradient = new Gradient();
            gradient.id = SVGParser.getStringAttr(CatfishRESTAPI.CFCOMPACT_STICKERID, attributes);
            gradient.isLinear = z;
            if (z) {
                gradient.x1 = getFloatAttr("x1", attributes, Float.valueOf(0.0f)).floatValue();
                gradient.x2 = getFloatAttr("x2", attributes, Float.valueOf(0.0f)).floatValue();
                gradient.y1 = getFloatAttr("y1", attributes, Float.valueOf(0.0f)).floatValue();
                gradient.y2 = getFloatAttr("y2", attributes, Float.valueOf(0.0f)).floatValue();
            } else {
                gradient.x = getFloatAttr("cx", attributes, Float.valueOf(0.0f)).floatValue();
                gradient.y = getFloatAttr("cy", attributes, Float.valueOf(0.0f)).floatValue();
                gradient.radius = getFloatAttr("r", attributes, Float.valueOf(0.0f)).floatValue();
            }
            String access$200 = SVGParser.getStringAttr("gradientTransform", attributes);
            if (access$200 != null) {
                gradient.matrix = SVGParser.parseTransform(access$200);
            }
            access$200 = SVGParser.getStringAttr("href", attributes);
            if (access$200 != null) {
                if (access$200.startsWith("#")) {
                    access$200 = access$200.substring(1);
                }
                gradient.xlink = access$200;
            }
            return gradient;
        }

        private void doLimits(float f, float f2) {
            if (f < this.limits.left) {
                this.limits.left = f;
            }
            if (f > this.limits.right) {
                this.limits.right = f;
            }
            if (f2 < this.limits.top) {
                this.limits.top = f2;
            }
            if (f2 > this.limits.bottom) {
                this.limits.bottom = f2;
            }
        }

        private void doLimits(float f, float f2, float f3, float f4) {
            doLimits(f, f2);
            doLimits(f + f3, f2 + f4);
        }

        private void doLimits(Path path) {
            path.computeBounds(this.rect, false);
            doLimits(this.rect.left, this.rect.top);
            doLimits(this.rect.right, this.rect.bottom);
        }

        private void doOpacity(Properties properties, boolean z, Paint paint) {
            Float f = properties.getFloat("opacity");
            if (f == null) {
                f = properties.getFloat(z ? "fill-opacity" : "stroke-opacity");
            }
            if (f == null) {
                paint.setAlpha(Float.valueOf(this.graphicElement.opacity * 255.0f).intValue());
            } else {
                paint.setAlpha(Float.valueOf((f.floatValue() * 255.0f) * this.graphicElement.opacity).intValue());
            }
        }

        private Pattern doPattern(Canvas canvas, Attributes attributes) {
            Pattern pattern = new Pattern();
            pattern.id = SVGParser.getStringAttr(CatfishRESTAPI.CFCOMPACT_STICKERID, attributes);
            String access$200 = SVGParser.getStringAttr("patternTransform", attributes);
            if (access$200 != null) {
                pattern.matrix = SVGParser.parseTransform(access$200);
            }
            access$200 = SVGParser.getStringAttr("viewBox", attributes);
            if (access$200 != null) {
                pattern.rect = SVGParser.parseViewbox(access$200);
            }
            pattern.units = SVGParser.getStringAttr("patternUnits", attributes);
            access$200 = SVGParser.getStringAttr("href", attributes);
            if (access$200 != null) {
                if (access$200.startsWith("#")) {
                    access$200 = access$200.substring(1);
                }
                pattern.xlink = access$200;
            }
            pattern.width = getFloatAttr("width", attributes, Float.valueOf(0.0f)).floatValue();
            pattern.height = getFloatAttr("height", attributes, Float.valueOf(0.0f)).floatValue();
            pattern.beginPattern(canvas);
            return pattern;
        }

        private boolean doStroke(Properties properties, HashMap hashMap) {
            if (this.whiteMode || "none".equals(properties.getString("display"))) {
                return false;
            }
            Float f = properties.getFloat("stroke-width");
            if (f != null) {
                this.strokePaint.setStrokeWidth(f.floatValue());
            } else {
                this.strokePaint.setStrokeWidth(1.0f);
            }
            String string = properties.getString("stroke-linecap");
            if ("round".equals(string)) {
                this.strokePaint.setStrokeCap(Cap.ROUND);
            } else if ("square".equals(string)) {
                this.strokePaint.setStrokeCap(Cap.SQUARE);
            } else if ("butt".equals(string)) {
                this.strokePaint.setStrokeCap(Cap.BUTT);
            }
            string = properties.getString("stroke-linejoin");
            if ("miter".equals(string)) {
                this.strokePaint.setStrokeJoin(Join.MITER);
            } else if ("round".equals(string)) {
                this.strokePaint.setStrokeJoin(Join.ROUND);
            } else if ("bevel".equals(string)) {
                this.strokePaint.setStrokeJoin(Join.BEVEL);
            }
            pathStyleHelper(properties.getString("stroke-dasharray"), properties.getString("stroke-dashoffset"));
            string = properties.getAttr("stroke");
            if (string != null) {
                if (string.equalsIgnoreCase("none")) {
                    this.strokePaint.setColor(0);
                    return false;
                } else if (string.startsWith("url(#")) {
                    string = string.substring("url(#".length(), string.length() - 1);
                    Shader shader = (Shader) hashMap.get(string);
                    if (shader == null) {
                        Log.e(SVGParser.TAG, "SHADER id=" + string + ": NOT FOUND!!!");
                    }
                    this.strokePaint.setShader(shader);
                    return true;
                } else {
                    Integer colorValue = properties.getColorValue("stroke");
                    if (colorValue != null) {
                        doColor(properties, colorValue, false, this.strokePaint);
                        return true;
                    }
                    this.strokePaint.setColor(0);
                    return false;
                }
            } else if (this.strokeSet) {
                return this.strokePaint.getColor() != 0;
            } else {
                this.strokePaint.setColor(0);
                return false;
            }
        }

        private void doUseObjectPath(Attributes attributes, Path path, String str) {
            if (this.inclippath != null) {
                String access$200 = SVGParser.getStringAttr("transform", attributes);
                Matrix access$500 = access$200 == null ? IDENTITY_MATRIX : SVGParser.parseTransform(access$200);
                this.inclippath.p = path;
                this.inclippath.p.transform(access$500);
                return;
            }
            pushTransform(attributes, "use");
            pushGraphicState();
            Properties properties = new Properties(attributes);
            Filter filter = getFilter(properties, this.graphicElement.filter, this.filterMap);
            Path clipPath = getClipPath(properties, this.clipPathMap);
            if (doFill(properties, this.gradientMap)) {
                doLimits(path);
                doDrawPath(path, this.fillPaint, filter, clipPath);
            }
            if (doStroke(properties, this.gradientMap)) {
                doLimits(path);
                doDrawPath(path, this.strokePaint, filter, clipPath);
            }
            popTransform("use");
            popGraphicState();
        }

        private Path getClipPath(Properties properties, HashMap hashMap) {
            String attr = properties.getAttr("clip-path");
            Log.d("CLIPPATH", "clip-path string=" + attr);
            if (attr != null && attr.startsWith("url(#")) {
                String substring = attr.substring("url(#".length(), attr.length() - 1);
                ClipPath clipPath = (ClipPath) hashMap.get(substring);
                if (clipPath != null) {
                    Log.d("CLIPPATH", "CLIPPATH FOUND id=" + substring);
                    return clipPath.p;
                }
                Log.d("CLIPPATH", "CLIPPATH NOT FOUND id=" + substring);
            }
            return null;
        }

        private Filter getFilter(Properties properties, Filter filter, HashMap hashMap) {
            String string = properties.getString("filter");
            if (string == null || !string.startsWith("url(#")) {
                return filter;
            }
            Filter filter2 = (Filter) hashMap.get(string.substring("url(#".length(), string.length() - 1));
            if (filter2 != null && filter != null) {
                filter2.addItems(filter);
            } else if (filter != null) {
                filter2 = filter;
            }
            return filter2;
        }

        private Float getFloatAttr(String str, Attributes attributes) {
            return getFloatAttr(str, attributes, null);
        }

        private Float getFloatAttr(String str, Attributes attributes, Float f) {
            Float convertUnits = convertUnits(str, attributes, SVGParser.dpi);
            return convertUnits == null ? f : convertUnits;
        }

        private void pathStyleHelper(String str, String str2) {
            int i = 0;
            float f = 0.0f;
            if (str != null) {
                if (str.equals("none")) {
                    this.strokePaint.setPathEffect(null);
                    return;
                }
                StringTokenizer stringTokenizer = new StringTokenizer(str, " ,");
                int countTokens = stringTokenizer.countTokens();
                if ((countTokens & 1) == 1) {
                    countTokens *= 2;
                }
                float[] fArr = new float[countTokens];
                float f2 = 1.0f;
                float f3 = 0.0f;
                countTokens = 0;
                while (stringTokenizer.hasMoreTokens()) {
                    int i2 = countTokens + 1;
                    f2 = toFloat(stringTokenizer.nextToken(), f2);
                    fArr[countTokens] = f2;
                    f3 += f2;
                    countTokens = i2;
                }
                while (countTokens < fArr.length) {
                    float f4 = fArr[i];
                    fArr[countTokens] = f4;
                    f3 += f4;
                    countTokens++;
                    i++;
                }
                if (str2 != null) {
                    try {
                        f = Float.parseFloat(str2) % f3;
                    } catch (NumberFormatException e) {
                    }
                }
                this.strokePaint.setPathEffect(new DashPathEffect(fArr, f));
            }
        }

        private void popGraphicState() {
            this.fillPaint = (Paint) this.fillPaintStack.pop();
            this.fillSet = ((Boolean) this.fillSetStack.pop()).booleanValue();
            this.strokePaint = (Paint) this.strokePaintStack.pop();
            this.strokeSet = ((Boolean) this.strokeSetStack.pop()).booleanValue();
            this.canvas.restore();
        }

        private void popInDefsContext() {
            this.inDefsElement = ((Boolean) this.indefsElementContext.pop()).booleanValue();
        }

        private void popTransform(String str) {
            if (this.keyQueue.size() != 0 && ((String) this.keyQueue.get(0)).equals(str)) {
                this.keyQueue.remove(0);
                this.canvas.restore();
            }
        }

        private void pushGraphicState() {
            this.fillPaintStack.push(new Paint(this.fillPaint));
            this.strokePaintStack.push(new Paint(this.strokePaint));
            this.fillSetStack.push(Boolean.valueOf(this.fillSet));
            this.strokeSetStack.push(Boolean.valueOf(this.strokeSet));
            this.canvas.save();
        }

        private void pushInDefsContext() {
            this.indefsElementContext.push(Boolean.valueOf(this.inDefsElement));
        }

        private void pushTransform(Attributes attributes, String str) {
            String access$200 = SVGParser.getStringAttr("transform", attributes);
            Matrix access$500 = access$200 == null ? IDENTITY_MATRIX : SVGParser.parseTransform(access$200);
            this.keyQueue.add(0, str);
            this.canvas.save();
            this.canvas.concat(access$500);
        }

        private static float toFloat(String str, float f) {
            try {
                f = Float.parseFloat(str);
            } catch (NumberFormatException e) {
            }
            return f;
        }

        public void characters(char[] cArr, int i, int i2) {
        }

        public void endDocument() {
        }

        public void endElement(String str, String str2, String str3) {
            Gradient gradient;
            int size;
            int i;
            int[] iArr;
            int i2;
            float[] fArr;
            LinearGradient linearGradient;
            if (str2.equals("defs")) {
                popInDefsContext();
                int size2 = this.gradientForwardDefs.size();
                int i3 = 0;
                while (i3 < size2) {
                    Iterator it = this.gradientForwardDefs.iterator();
                    while (it.hasNext()) {
                        Gradient createChild;
                        RadialGradient radialGradient;
                        gradient = (Gradient) it.next();
                        if (!(gradient.id == null || gradient.xlink == null)) {
                            Gradient gradient2 = (Gradient) this.gradientRefMap.get(gradient.xlink);
                            if (gradient2 != null) {
                                createChild = gradient2.createChild(gradient);
                                size = createChild.colors.size();
                                i = size >= 2 ? 2 : size;
                                iArr = new int[i];
                                iArr[0] = 0;
                                iArr[1] = 0;
                                for (i2 = 0; i2 < createChild.colors.size(); i2++) {
                                    iArr[i2] = ((Integer) createChild.colors.get(i2)).intValue();
                                }
                                fArr = new float[i];
                                fArr[0] = 0.0f;
                                fArr[1] = 1.0f;
                                for (i = 0; i < createChild.positions.size(); i++) {
                                    fArr[i] = ((Float) createChild.positions.get(i)).floatValue();
                                }
                                if (createChild.isLinear) {
                                    radialGradient = new RadialGradient(createChild.x, createChild.y, createChild.radius, iArr, fArr, TileMode.CLAMP);
                                    if (createChild.matrix != null) {
                                        radialGradient.setLocalMatrix(createChild.matrix);
                                    }
                                    this.gradientMap.put(createChild.id, radialGradient);
                                } else {
                                    linearGradient = new LinearGradient(createChild.x1, createChild.y1, createChild.x2, createChild.y2, iArr, fArr, TileMode.CLAMP);
                                    if (createChild.matrix != null) {
                                        linearGradient.setLocalMatrix(createChild.matrix);
                                    }
                                    this.gradientMap.put(createChild.id, linearGradient);
                                }
                            } else {
                                Log.e(SVGParser.TAG, "PARENT NOT FOUND: xlink: " + gradient.xlink);
                            }
                        }
                        createChild = gradient;
                        size = createChild.colors.size();
                        if (size >= 2) {
                        }
                        iArr = new int[i];
                        iArr[0] = 0;
                        iArr[1] = 0;
                        for (i2 = 0; i2 < createChild.colors.size(); i2++) {
                            iArr[i2] = ((Integer) createChild.colors.get(i2)).intValue();
                        }
                        fArr = new float[i];
                        fArr[0] = 0.0f;
                        fArr[1] = 1.0f;
                        for (i = 0; i < createChild.positions.size(); i++) {
                            fArr[i] = ((Float) createChild.positions.get(i)).floatValue();
                        }
                        if (createChild.isLinear) {
                            radialGradient = new RadialGradient(createChild.x, createChild.y, createChild.radius, iArr, fArr, TileMode.CLAMP);
                            if (createChild.matrix != null) {
                                radialGradient.setLocalMatrix(createChild.matrix);
                            }
                            this.gradientMap.put(createChild.id, radialGradient);
                        } else {
                            linearGradient = new LinearGradient(createChild.x1, createChild.y1, createChild.x2, createChild.y2, iArr, fArr, TileMode.CLAMP);
                            if (createChild.matrix != null) {
                                linearGradient.setLocalMatrix(createChild.matrix);
                            }
                            this.gradientMap.put(createChild.id, linearGradient);
                        }
                    }
                    if (this.gradientForwardDefs.size() > 0) {
                        i3++;
                    } else {
                        return;
                    }
                }
            } else if (str2.equals("svg")) {
                this.picture.endRecording();
                this.gradientMap.clear();
                this.defObjectsMap.clear();
            } else if (str2.equals("pattern")) {
                this.canvas = this.pattern.endPattern();
                BitmapShader bitmapShader = new BitmapShader(this.pattern.bitmap, TileMode.REPEAT, TileMode.REPEAT);
                if (this.pattern.matrix != null) {
                    bitmapShader.setLocalMatrix(this.pattern.matrix);
                }
                this.gradientMap.put(this.pattern.id, bitmapShader);
                popGraphicState();
            } else if (str2.equals("filter")) {
                if (!(this.filter == null || this.filter.id == null)) {
                    this.filterMap.put(this.filter.id, this.filter);
                }
                this.filter = null;
            } else if (str2.equals("linearGradient")) {
                if (this.gradient.id != null) {
                    if (this.gradient.xlink != null) {
                        gradient = (Gradient) this.gradientRefMap.get(this.gradient.xlink);
                        if (gradient != null) {
                            this.gradient = gradient.createChild(this.gradient);
                        } else {
                            this.gradientForwardDefs.add(0, this.gradient);
                            return;
                        }
                    }
                    size = this.gradient.colors.size();
                    i = size < 2 ? 2 : size;
                    iArr = new int[i];
                    iArr[0] = 0;
                    iArr[1] = 0;
                    for (i2 = 0; i2 < this.gradient.colors.size(); i2++) {
                        iArr[i2] = ((Integer) this.gradient.colors.get(i2)).intValue();
                    }
                    fArr = new float[i];
                    fArr[0] = 0.0f;
                    fArr[1] = 1.0f;
                    for (i = 0; i < this.gradient.positions.size(); i++) {
                        fArr[i] = ((Float) this.gradient.positions.get(i)).floatValue();
                    }
                    linearGradient = new LinearGradient(this.gradient.x1, this.gradient.y1, this.gradient.x2, this.gradient.y2, iArr, fArr, TileMode.CLAMP);
                    if (this.gradient.matrix != null) {
                        linearGradient.setLocalMatrix(this.gradient.matrix);
                    }
                    this.gradientMap.put(this.gradient.id, linearGradient);
                    this.gradientRefMap.put(this.gradient.id, this.gradient);
                }
            } else if (str2.equals("radialGradient")) {
                if (this.gradient.id != null) {
                    if (this.gradient.xlink != null) {
                        gradient = (Gradient) this.gradientRefMap.get(this.gradient.xlink);
                        if (gradient != null) {
                            this.gradient = gradient.createChild(this.gradient);
                        } else {
                            this.gradientForwardDefs.add(0, this.gradient);
                            return;
                        }
                    }
                    size = this.gradient.colors.size();
                    i = size < 2 ? 2 : size;
                    int[] iArr2 = new int[i];
                    iArr2[0] = 0;
                    iArr2[1] = 0;
                    for (i2 = 0; i2 < this.gradient.colors.size(); i2++) {
                        iArr2[i2] = ((Integer) this.gradient.colors.get(i2)).intValue();
                    }
                    float[] fArr2 = new float[i];
                    fArr2[0] = 0.0f;
                    fArr2[1] = 1.0f;
                    for (i = 0; i < this.gradient.positions.size(); i++) {
                        fArr2[i] = ((Float) this.gradient.positions.get(i)).floatValue();
                    }
                    RadialGradient radialGradient2 = new RadialGradient(this.gradient.x, this.gradient.y, this.gradient.radius, iArr2, fArr2, TileMode.CLAMP);
                    if (this.gradient.matrix != null) {
                        radialGradient2.setLocalMatrix(this.gradient.matrix);
                    }
                    this.gradientMap.put(this.gradient.id, radialGradient2);
                    this.gradientRefMap.put(this.gradient.id, this.gradient);
                }
            } else if (str2.equals("g")) {
                popInDefsContext();
                if (this.boundsMode) {
                    this.boundsMode = false;
                }
                if (this.hidden) {
                    this.hiddenLevel--;
                    if (this.hiddenLevel == 0) {
                        this.hidden = false;
                    }
                }
                popTransform("g");
                popGraphicState();
                this.graphicElement = (GraphicElement) this.graphicElementStack.pop();
                if (this.graphicElement.clippath != null) {
                    this.canvas.clipPath(this.graphicElement.clippath, Op.INTERSECT);
                }
            } else if (str2.equals("clipPath")) {
                if (((this.inclippath != null ? 1 : 0) & (this.inclippath.id != null ? 1 : 0)) != 0) {
                    this.clipPathMap.put(this.inclippath.id, this.inclippath);
                }
                this.inclippath = null;
            }
        }

        public void setColorSwap(Integer num, Integer num2) {
            this.searchColor = num;
            this.replaceColor = num2;
        }

        public void setWhiteMode(boolean z) {
            this.whiteMode = z;
        }

        public void startDocument() {
        }

        /* JADX WARNING: inconsistent code. */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        public void startElement(java.lang.String r16, java.lang.String r17, java.lang.String r18, org.xml.sax.Attributes r19) {
            /*
            r15 = this;
            r2 = r15.strokePaint;
            r3 = 255; // 0xff float:3.57E-43 double:1.26E-321;
            r2.setAlpha(r3);
            r2 = r15.fillPaint;
            r3 = 255; // 0xff float:3.57E-43 double:1.26E-321;
            r2.setAlpha(r3);
            r2 = r15.boundsMode;
            if (r2 == 0) goto L_0x006b;
        L_0x0012:
            r2 = "rect";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 == 0) goto L_0x006a;
        L_0x001c:
            r2 = "x";
            r0 = r19;
            r2 = r15.getFloatAttr(r2, r0);
            if (r2 != 0) goto L_0x002b;
        L_0x0026:
            r2 = 0;
            r2 = java.lang.Float.valueOf(r2);
        L_0x002b:
            r3 = "y";
            r0 = r19;
            r3 = r15.getFloatAttr(r3, r0);
            if (r3 != 0) goto L_0x003a;
        L_0x0035:
            r3 = 0;
            r3 = java.lang.Float.valueOf(r3);
        L_0x003a:
            r4 = "width";
            r0 = r19;
            r4 = r15.getFloatAttr(r4, r0);
            r5 = "height";
            r0 = r19;
            r15.getFloatAttr(r5, r0);
            r5 = new android.graphics.RectF;
            r6 = r2.floatValue();
            r7 = r3.floatValue();
            r2 = r2.floatValue();
            r8 = r4.floatValue();
            r2 = r2 + r8;
            r3 = r3.floatValue();
            r4 = r4.floatValue();
            r3 = r3 + r4;
            r5.<init>(r6, r7, r2, r3);
            r15.bounds = r5;
        L_0x006a:
            return;
        L_0x006b:
            r0 = r17;
            r15.localNameContext = r0;
            r2 = "svg";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 == 0) goto L_0x0139;
        L_0x0079:
            r2 = "width";
            r0 = r19;
            r2 = r15.getFloatAttr(r2, r0);
            r15.svg_fwidth = r2;
            r2 = "height";
            r0 = r19;
            r2 = r15.getFloatAttr(r2, r0);
            r15.svg_fheight = r2;
            r2 = r15.svg_fwidth;
            if (r2 != 0) goto L_0x00f7;
        L_0x0091:
            r2 = r15.svg_fheight;
            if (r2 != 0) goto L_0x00f7;
        L_0x0095:
            r2 = "viewBox";
            r0 = r19;
            r2 = com.catfiz.svgandroid.SVGParser.getStringAttr(r2, r0);
            if (r2 == 0) goto L_0x00e1;
        L_0x009f:
            r2 = com.catfiz.svgandroid.SVGParser.parseViewbox(r2);
            r15.bounds = r2;
            r2 = r15.bounds;
            if (r2 != 0) goto L_0x00b1;
        L_0x00a9:
            r2 = new org.xml.sax.SAXException;
            r3 = "Invalid viewBox at svg tag";
            r2.<init>(r3);
            throw r2;
        L_0x00b1:
            r2 = r15.bounds;
            r2 = r2.width();
            r2 = (double) r2;
            r2 = java.lang.Math.ceil(r2);
            r2 = (int) r2;
            r15.svg_width = r2;
            r2 = r15.bounds;
            r2 = r2.height();
            r2 = (double) r2;
            r2 = java.lang.Math.ceil(r2);
            r2 = (int) r2;
            r15.svg_height = r2;
        L_0x00cd:
            r2 = r15.picture;
            r3 = r15.svg_width;
            r4 = r15.svg_height;
            r2 = r2.beginRecording(r3, r4);
            r15.canvas = r2;
            r2 = new com.catfiz.svgandroid.SVGParser$GraphicElement;
            r2.<init>();
            r15.graphicElement = r2;
            goto L_0x006a;
        L_0x00e1:
            r2 = 200; // 0xc8 float:2.8E-43 double:9.9E-322;
            r15.svg_width = r2;
            r2 = 200; // 0xc8 float:2.8E-43 double:9.9E-322;
            r15.svg_height = r2;
            r2 = new android.graphics.RectF;
            r3 = 0;
            r4 = 0;
            r5 = 1128792064; // 0x43480000 float:200.0 double:5.5769738E-315;
            r6 = 1128792064; // 0x43480000 float:200.0 double:5.5769738E-315;
            r2.<init>(r3, r4, r5, r6);
            r15.bounds = r2;
            goto L_0x00cd;
        L_0x00f7:
            r2 = r15.svg_fwidth;
            if (r2 != 0) goto L_0x00ff;
        L_0x00fb:
            r2 = r15.svg_fheight;
            r15.svg_fwidth = r2;
        L_0x00ff:
            r2 = r15.svg_fheight;
            if (r2 != 0) goto L_0x0107;
        L_0x0103:
            r2 = r15.svg_fwidth;
            r15.svg_fheight = r2;
        L_0x0107:
            r2 = r15.svg_fwidth;
            r2 = r2.floatValue();
            r2 = (double) r2;
            r2 = java.lang.Math.ceil(r2);
            r2 = (int) r2;
            r15.svg_width = r2;
            r2 = r15.svg_fheight;
            r2 = r2.floatValue();
            r2 = (double) r2;
            r2 = java.lang.Math.ceil(r2);
            r2 = (int) r2;
            r15.svg_height = r2;
            r2 = new android.graphics.RectF;
            r3 = 0;
            r4 = 0;
            r5 = r15.svg_fwidth;
            r5 = r5.floatValue();
            r6 = r15.svg_fheight;
            r6 = r6.floatValue();
            r2.<init>(r3, r4, r5, r6);
            r15.bounds = r2;
            goto L_0x00cd;
        L_0x0139:
            r2 = "defs";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 == 0) goto L_0x014b;
        L_0x0143:
            r15.pushInDefsContext();
            r2 = 1;
            r15.inDefsElement = r2;
            goto L_0x006a;
        L_0x014b:
            r2 = "pattern";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 == 0) goto L_0x0170;
        L_0x0155:
            r15.pushGraphicState();
            r2 = 0;
            r15.fillSet = r2;
            r2 = 0;
            r15.strokeSet = r2;
            r2 = r15.canvas;
            r0 = r19;
            r2 = r15.doPattern(r2, r0);
            r15.pattern = r2;
            r2 = r15.pattern;
            r2 = r2.canvas;
            r15.canvas = r2;
            goto L_0x006a;
        L_0x0170:
            r2 = "filter";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 == 0) goto L_0x0184;
        L_0x017a:
            r0 = r19;
            r2 = r15.doFilter(r0);
            r15.filter = r2;
            goto L_0x006a;
        L_0x0184:
            r2 = "feGaussianBlur";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 == 0) goto L_0x01cb;
        L_0x018e:
            r2 = r15.filter;
            if (r2 == 0) goto L_0x006a;
        L_0x0192:
            r2 = new com.catfiz.svgandroid.SVGParser$FilterItem;
            r2.<init>();
            r3 = 1;
            r2.kind = r3;
            r3 = "id";
            r0 = r19;
            r3 = com.catfiz.svgandroid.SVGParser.getStringAttr(r3, r0);
            r2.id = r3;
            r3 = "stdDeviation";
            r4 = 0;
            r4 = java.lang.Float.valueOf(r4);
            r0 = r19;
            r3 = r15.getFloatAttr(r3, r0, r4);
            r3 = r3.floatValue();
            r2.radius = r3;
            r3 = new android.graphics.BlurMaskFilter;
            r4 = r2.radius;
            r5 = android.graphics.BlurMaskFilter.Blur.NORMAL;
            r3.<init>(r4, r5);
            r2.maskfilter = r3;
            r3 = r15.filter;
            r3 = r3.items;
            r3.add(r2);
            goto L_0x006a;
        L_0x01cb:
            r2 = "linearGradient";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 == 0) goto L_0x01e0;
        L_0x01d5:
            r2 = 1;
            r0 = r19;
            r2 = r15.doGradient(r2, r0);
            r15.gradient = r2;
            goto L_0x006a;
        L_0x01e0:
            r2 = "radialGradient";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 == 0) goto L_0x01f5;
        L_0x01ea:
            r2 = 0;
            r0 = r19;
            r2 = r15.doGradient(r2, r0);
            r15.gradient = r2;
            goto L_0x006a;
        L_0x01f5:
            r2 = "stop";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 == 0) goto L_0x029d;
        L_0x01ff:
            r2 = r15.gradient;
            if (r2 == 0) goto L_0x006a;
        L_0x0203:
            r2 = "offset";
            r0 = r19;
            r2 = r15.getFloatAttr(r2, r0);
            r6 = r2.floatValue();
            r2 = "style";
            r0 = r19;
            r4 = com.catfiz.svgandroid.SVGParser.getStringAttr(r2, r0);
            r2 = "stop-color";
            r0 = r19;
            r3 = com.catfiz.svgandroid.SVGParser.getStringAttr(r2, r0);
            r2 = 0;
            if (r4 == 0) goto L_0x0a97;
        L_0x0222:
            r2 = new com.catfiz.svgandroid.SVGParser$StyleSet;
            r3 = 0;
            r2.<init>(r4);
            r3 = "stop-color";
            r3 = r2.getStyle(r3);
            r5 = r2;
            r4 = r3;
        L_0x0230:
            r3 = -16777216; // 0xffffffffff000000 float:-1.7014118E38 double:NaN;
            r2 = 1;
            if (r4 == 0) goto L_0x0249;
        L_0x0235:
            r2 = 0;
            r3 = "#";
            r3 = r4.startsWith(r3);
            if (r3 == 0) goto L_0x0283;
        L_0x023e:
            r3 = 1;
            r3 = r4.substring(r3);
            r4 = 16;
            r3 = java.lang.Integer.parseInt(r3, r4);
        L_0x0249:
            r4 = "stop-opacity";
            r0 = r19;
            r4 = com.catfiz.svgandroid.SVGParser.getStringAttr(r4, r0);
            if (r5 == 0) goto L_0x0259;
        L_0x0253:
            r4 = "stop-opacity";
            r4 = r5.getStyle(r4);
        L_0x0259:
            if (r4 == 0) goto L_0x0299;
        L_0x025b:
            r4 = java.lang.Float.parseFloat(r4);
            r5 = 1132396544; // 0x437f0000 float:255.0 double:5.5947823E-315;
            r4 = r4 * r5;
            r4 = java.lang.Math.round(r4);
            if (r2 == 0) goto L_0x0295;
        L_0x0268:
            if (r4 != 0) goto L_0x0295;
        L_0x026a:
            r2 = 0;
        L_0x026b:
            r3 = r15.gradient;
            r3 = r3.positions;
            r4 = java.lang.Float.valueOf(r6);
            r3.add(r4);
            r3 = r15.gradient;
            r3 = r3.colors;
            r2 = java.lang.Integer.valueOf(r2);
            r3.add(r2);
            goto L_0x006a;
        L_0x0283:
            r3 = com.catfiz.svgandroid.SVGColors.mapColor(r4);
            if (r3 != 0) goto L_0x0290;
        L_0x0289:
            r3 = 16;
            r3 = java.lang.Integer.parseInt(r4, r3);
            goto L_0x0249;
        L_0x0290:
            r3 = r3.intValue();
            goto L_0x0249;
        L_0x0295:
            r2 = r4 << 24;
            r2 = r2 | r3;
            goto L_0x026b;
        L_0x0299:
            r2 = -16777216; // 0xffffffffff000000 float:-1.7014118E38 double:NaN;
            r2 = r2 | r3;
            goto L_0x026b;
        L_0x029d:
            r2 = "g";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 == 0) goto L_0x0378;
        L_0x02a7:
            r15.pushInDefsContext();
            r2 = 0;
            r15.inDefsElement = r2;
            r2 = "bounds";
            r3 = "id";
            r0 = r19;
            r3 = com.catfiz.svgandroid.SVGParser.getStringAttr(r3, r0);
            r2 = r2.equalsIgnoreCase(r3);
            if (r2 == 0) goto L_0x02c0;
        L_0x02bd:
            r2 = 1;
            r15.boundsMode = r2;
        L_0x02c0:
            r2 = r15.hidden;
            if (r2 == 0) goto L_0x02ca;
        L_0x02c4:
            r2 = r15.hiddenLevel;
            r2 = r2 + 1;
            r15.hiddenLevel = r2;
        L_0x02ca:
            r2 = "none";
            r3 = "display";
            r0 = r19;
            r3 = com.catfiz.svgandroid.SVGParser.getStringAttr(r3, r0);
            r2 = r2.equals(r3);
            if (r2 == 0) goto L_0x02e4;
        L_0x02da:
            r2 = r15.hidden;
            if (r2 != 0) goto L_0x02e4;
        L_0x02de:
            r2 = 1;
            r15.hidden = r2;
            r2 = 1;
            r15.hiddenLevel = r2;
        L_0x02e4:
            r3 = new com.catfiz.svgandroid.SVGParser$Properties;
            r2 = 0;
            r0 = r19;
            r3.<init>(r0);
            r2 = "none";
            r4 = "display";
            r4 = r3.getString(r4);
            r2 = r2.equals(r4);
            if (r2 == 0) goto L_0x0304;
        L_0x02fa:
            r2 = r15.hidden;
            if (r2 != 0) goto L_0x0304;
        L_0x02fe:
            r2 = 1;
            r15.hidden = r2;
            r2 = 1;
            r15.hiddenLevel = r2;
        L_0x0304:
            r2 = "g";
            r0 = r19;
            r15.pushTransform(r0, r2);
            r15.pushGraphicState();
            r2 = r15.graphicElementStack;
            r4 = new com.catfiz.svgandroid.SVGParser$GraphicElement;
            r5 = r15.graphicElement;
            r4.<init>(r5);
            r2.push(r4);
            r2 = r15.graphicElement;
            r4 = "opacity";
            r5 = 1065353216; // 0x3f800000 float:1.0 double:5.263544247E-315;
            r4 = r3.getFloat(r4, r5);
            r4 = r4.floatValue();
            r2.opacity = r4;
            r2 = r15.graphicElement;
            r4 = 0;
            r5 = r15.filterMap;
            r4 = r15.getFilter(r3, r4, r5);
            r2.filter = r4;
            r2 = r15.clipPathMap;
            r2 = r15.getClipPath(r3, r2);
            if (r2 == 0) goto L_0x034c;
        L_0x033d:
            r4 = r15.graphicElement;
            r4.clippath = r2;
            r2 = r15.canvas;
            r4 = r15.graphicElement;
            r4 = r4.clippath;
            r5 = android.graphics.Region.Op.INTERSECT;
            r2.clipPath(r4, r5);
        L_0x034c:
            r2 = r15.gradientMap;
            r15.doFill(r3, r2);
            r2 = r15.gradientMap;
            r15.doStroke(r3, r2);
            r4 = r15.fillSet;
            r2 = "fill";
            r2 = r3.getString(r2);
            if (r2 == 0) goto L_0x0374;
        L_0x0360:
            r2 = 1;
        L_0x0361:
            r2 = r2 | r4;
            r15.fillSet = r2;
            r4 = r15.strokeSet;
            r2 = "stroke";
            r2 = r3.getString(r2);
            if (r2 == 0) goto L_0x0376;
        L_0x036e:
            r2 = 1;
        L_0x036f:
            r2 = r2 | r4;
            r15.strokeSet = r2;
            goto L_0x006a;
        L_0x0374:
            r2 = 0;
            goto L_0x0361;
        L_0x0376:
            r2 = 0;
            goto L_0x036f;
        L_0x0378:
            r2 = r15.hidden;
            if (r2 != 0) goto L_0x0503;
        L_0x037c:
            r2 = "rect";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 == 0) goto L_0x0503;
        L_0x0386:
            r2 = "x";
            r0 = r19;
            r2 = r15.getFloatAttr(r2, r0);
            if (r2 != 0) goto L_0x0a94;
        L_0x0390:
            r2 = 0;
            r2 = java.lang.Float.valueOf(r2);
            r8 = r2;
        L_0x0396:
            r2 = "y";
            r0 = r19;
            r2 = r15.getFloatAttr(r2, r0);
            if (r2 != 0) goto L_0x0a91;
        L_0x03a0:
            r2 = 0;
            r2 = java.lang.Float.valueOf(r2);
            r9 = r2;
        L_0x03a6:
            r2 = "width";
            r0 = r19;
            r10 = r15.getFloatAttr(r2, r0);
            r2 = "height";
            r0 = r19;
            r11 = r15.getFloatAttr(r2, r0);
            r2 = "rx";
            r3 = 0;
            r3 = java.lang.Float.valueOf(r3);
            r0 = r19;
            r12 = r15.getFloatAttr(r2, r0, r3);
            r2 = "ry";
            r3 = 0;
            r3 = java.lang.Float.valueOf(r3);
            r0 = r19;
            r13 = r15.getFloatAttr(r2, r0, r3);
            r2 = "rect";
            r0 = r19;
            r15.pushTransform(r0, r2);
            r15.pushGraphicState();
            r14 = new com.catfiz.svgandroid.SVGParser$Properties;
            r2 = 0;
            r0 = r19;
            r14.<init>(r0);
            r2 = r15.graphicElement;
            r2 = r2.filter;
            r3 = r15.filterMap;
            r15.getFilter(r14, r2, r3);
            r2 = r15.clipPathMap;
            r2 = r15.getClipPath(r14, r2);
            if (r2 == 0) goto L_0x03fa;
        L_0x03f3:
            r3 = r15.canvas;
            r4 = android.graphics.Region.Op.INTERSECT;
            r3.clipPath(r2, r4);
        L_0x03fa:
            r2 = r15.gradientMap;
            r2 = r15.doFill(r14, r2);
            if (r2 == 0) goto L_0x0448;
        L_0x0402:
            r2 = r8.floatValue();
            r3 = r9.floatValue();
            r4 = r10.floatValue();
            r5 = r11.floatValue();
            r15.doLimits(r2, r3, r4, r5);
            r2 = r12.floatValue();
            r3 = 0;
            r2 = (r2 > r3 ? 1 : (r2 == r3 ? 0 : -1));
            if (r2 > 0) goto L_0x04a0;
        L_0x041e:
            r2 = r13.floatValue();
            r3 = 0;
            r2 = (r2 > r3 ? 1 : (r2 == r3 ? 0 : -1));
            if (r2 > 0) goto L_0x04a0;
        L_0x0427:
            r2 = r15.canvas;
            r3 = r8.floatValue();
            r4 = r9.floatValue();
            r5 = r8.floatValue();
            r6 = r10.floatValue();
            r5 = r5 + r6;
            r6 = r9.floatValue();
            r7 = r11.floatValue();
            r6 = r6 + r7;
            r7 = r15.fillPaint;
            r2.drawRect(r3, r4, r5, r6, r7);
        L_0x0448:
            r2 = r15.gradientMap;
            r2 = r15.doStroke(r14, r2);
            if (r2 == 0) goto L_0x0496;
        L_0x0450:
            r2 = r8.floatValue();
            r3 = r9.floatValue();
            r4 = r10.floatValue();
            r5 = r11.floatValue();
            r15.doLimits(r2, r3, r4, r5);
            r2 = r12.floatValue();
            r3 = 0;
            r2 = (r2 > r3 ? 1 : (r2 == r3 ? 0 : -1));
            if (r2 > 0) goto L_0x04d2;
        L_0x046c:
            r2 = r13.floatValue();
            r3 = 0;
            r2 = (r2 > r3 ? 1 : (r2 == r3 ? 0 : -1));
            if (r2 > 0) goto L_0x04d2;
        L_0x0475:
            r2 = r15.canvas;
            r3 = r8.floatValue();
            r4 = r9.floatValue();
            r5 = r8.floatValue();
            r6 = r10.floatValue();
            r5 = r5 + r6;
            r6 = r9.floatValue();
            r7 = r11.floatValue();
            r6 = r6 + r7;
            r7 = r15.strokePaint;
            r2.drawRect(r3, r4, r5, r6, r7);
        L_0x0496:
            r2 = "rect";
            r15.popTransform(r2);
            r15.popGraphicState();
            goto L_0x006a;
        L_0x04a0:
            r2 = r15.rect;
            r3 = r8.floatValue();
            r4 = r9.floatValue();
            r5 = r8.floatValue();
            r6 = r10.floatValue();
            r5 = r5 + r6;
            r6 = r9.floatValue();
            r7 = r11.floatValue();
            r6 = r6 + r7;
            r2.set(r3, r4, r5, r6);
            r2 = r15.canvas;
            r3 = r15.rect;
            r4 = r12.floatValue();
            r5 = r13.floatValue();
            r6 = r15.fillPaint;
            r2.drawRoundRect(r3, r4, r5, r6);
            goto L_0x0448;
        L_0x04d2:
            r2 = r15.rect;
            r3 = r8.floatValue();
            r4 = r9.floatValue();
            r5 = r8.floatValue();
            r6 = r10.floatValue();
            r5 = r5 + r6;
            r6 = r9.floatValue();
            r7 = r11.floatValue();
            r6 = r6 + r7;
            r2.set(r3, r4, r5, r6);
            r2 = r15.canvas;
            r3 = r15.rect;
            r4 = r12.floatValue();
            r5 = r13.floatValue();
            r6 = r15.strokePaint;
            r2.drawRoundRect(r3, r4, r5, r6);
            goto L_0x0496;
        L_0x0503:
            r2 = r15.hidden;
            if (r2 != 0) goto L_0x05ab;
        L_0x0507:
            r2 = "image";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 == 0) goto L_0x05ab;
        L_0x0511:
            r2 = "href";
            r0 = r19;
            r2 = com.catfiz.svgandroid.SVGParser.getStringAttr(r2, r0);
            r3 = "data";
            r3 = r2.startsWith(r3);
            if (r3 == 0) goto L_0x006a;
        L_0x0521:
            r3 = "base64";
            r3 = r2.indexOf(r3);
            if (r3 <= 0) goto L_0x006a;
        L_0x0529:
            r3 = ",";
            r3 = r2.indexOf(r3);
            r3 = r3 + 1;
            r2 = r2.substring(r3);
            r3 = "x";
            r4 = 0;
            r4 = java.lang.Float.valueOf(r4);
            r0 = r19;
            r4 = r15.getFloatAttr(r3, r0, r4);
            r3 = "y";
            r5 = 0;
            r5 = java.lang.Float.valueOf(r5);
            r0 = r19;
            r5 = r15.getFloatAttr(r3, r0, r5);
            r3 = "width";
            r6 = 0;
            r6 = java.lang.Float.valueOf(r6);
            r0 = r19;
            r6 = r15.getFloatAttr(r3, r0, r6);
            r3 = "height";
            r7 = 0;
            r7 = java.lang.Float.valueOf(r7);
            r0 = r19;
            r7 = r15.getFloatAttr(r3, r0, r7);
            r3 = "bmp";
            r0 = r19;
            r15.pushTransform(r0, r3);
            r15.pushGraphicState();
            r3 = r4.floatValue();
            r8 = r5.floatValue();
            r9 = r6.floatValue();
            r10 = r7.floatValue();
            r15.doLimits(r3, r8, r9, r10);
            r3 = r15.canvas;
            r4 = r4.floatValue();
            r5 = r5.floatValue();
            r6 = r6.floatValue();
            r7 = r7.floatValue();
            r8 = 0;
            r8 = android.util.Base64.decode(r2, r8);
            r2 = r15;
            r2.doBitmap(r3, r4, r5, r6, r7, r8);
            r2 = "bmp";
            r15.popTransform(r2);
            r15.popGraphicState();
            goto L_0x006a;
        L_0x05ab:
            r2 = r15.hidden;
            if (r2 != 0) goto L_0x0642;
        L_0x05af:
            r2 = "line";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 == 0) goto L_0x0642;
        L_0x05b9:
            r2 = "x1";
            r0 = r19;
            r3 = r15.getFloatAttr(r2, r0);
            r2 = "x2";
            r0 = r19;
            r5 = r15.getFloatAttr(r2, r0);
            r2 = "y1";
            r0 = r19;
            r4 = r15.getFloatAttr(r2, r0);
            r2 = "y2";
            r0 = r19;
            r6 = r15.getFloatAttr(r2, r0);
            r2 = new com.catfiz.svgandroid.SVGParser$Properties;
            r7 = 0;
            r0 = r19;
            r2.<init>(r0);
            r7 = r15.graphicElement;
            r7 = r7.filter;
            r8 = r15.filterMap;
            r15.getFilter(r2, r7, r8);
            r15.pushGraphicState();
            r7 = r15.gradientMap;
            r7 = r15.doStroke(r2, r7);
            if (r7 == 0) goto L_0x063d;
        L_0x05f5:
            r7 = "line";
            r0 = r19;
            r15.pushTransform(r0, r7);
            r7 = r15.clipPathMap;
            r2 = r15.getClipPath(r2, r7);
            if (r2 == 0) goto L_0x060b;
        L_0x0604:
            r7 = r15.canvas;
            r8 = android.graphics.Region.Op.INTERSECT;
            r7.clipPath(r2, r8);
        L_0x060b:
            r2 = r3.floatValue();
            r7 = r4.floatValue();
            r15.doLimits(r2, r7);
            r2 = r5.floatValue();
            r7 = r6.floatValue();
            r15.doLimits(r2, r7);
            r2 = r15.canvas;
            r3 = r3.floatValue();
            r4 = r4.floatValue();
            r5 = r5.floatValue();
            r6 = r6.floatValue();
            r7 = r15.strokePaint;
            r2.drawLine(r3, r4, r5, r6, r7);
            r2 = "line";
            r15.popTransform(r2);
        L_0x063d:
            r15.popGraphicState();
            goto L_0x006a;
        L_0x0642:
            r2 = r15.hidden;
            if (r2 != 0) goto L_0x072c;
        L_0x0646:
            r2 = "circle";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 == 0) goto L_0x072c;
        L_0x0650:
            r2 = "cx";
            r0 = r19;
            r2 = r15.getFloatAttr(r2, r0);
            r3 = "cy";
            r0 = r19;
            r3 = r15.getFloatAttr(r3, r0);
            r4 = "r";
            r0 = r19;
            r4 = r15.getFloatAttr(r4, r0);
            if (r2 == 0) goto L_0x006a;
        L_0x066a:
            if (r3 == 0) goto L_0x006a;
        L_0x066c:
            if (r4 == 0) goto L_0x006a;
        L_0x066e:
            r5 = "circ";
            r0 = r19;
            r15.pushTransform(r0, r5);
            r15.pushGraphicState();
            r5 = new com.catfiz.svgandroid.SVGParser$Properties;
            r6 = 0;
            r0 = r19;
            r5.<init>(r0);
            r6 = r15.graphicElement;
            r6 = r6.filter;
            r7 = r15.filterMap;
            r15.getFilter(r5, r6, r7);
            r6 = r15.clipPathMap;
            r6 = r15.getClipPath(r5, r6);
            if (r6 == 0) goto L_0x0698;
        L_0x0691:
            r7 = r15.canvas;
            r8 = android.graphics.Region.Op.INTERSECT;
            r7.clipPath(r6, r8);
        L_0x0698:
            r6 = r15.gradientMap;
            r6 = r15.doFill(r5, r6);
            if (r6 == 0) goto L_0x06dd;
        L_0x06a0:
            r6 = r2.floatValue();
            r7 = r4.floatValue();
            r6 = r6 - r7;
            r7 = r3.floatValue();
            r8 = r4.floatValue();
            r7 = r7 - r8;
            r15.doLimits(r6, r7);
            r6 = r2.floatValue();
            r7 = r4.floatValue();
            r6 = r6 + r7;
            r7 = r3.floatValue();
            r8 = r4.floatValue();
            r7 = r7 + r8;
            r15.doLimits(r6, r7);
            r6 = r15.canvas;
            r7 = r2.floatValue();
            r8 = r3.floatValue();
            r9 = r4.floatValue();
            r10 = r15.fillPaint;
            r6.drawCircle(r7, r8, r9, r10);
        L_0x06dd:
            r6 = r15.gradientMap;
            r5 = r15.doStroke(r5, r6);
            if (r5 == 0) goto L_0x0722;
        L_0x06e5:
            r5 = r2.floatValue();
            r6 = r4.floatValue();
            r5 = r5 - r6;
            r6 = r3.floatValue();
            r7 = r4.floatValue();
            r6 = r6 - r7;
            r15.doLimits(r5, r6);
            r5 = r2.floatValue();
            r6 = r4.floatValue();
            r5 = r5 + r6;
            r6 = r3.floatValue();
            r7 = r4.floatValue();
            r6 = r6 + r7;
            r15.doLimits(r5, r6);
            r5 = r15.canvas;
            r2 = r2.floatValue();
            r3 = r3.floatValue();
            r4 = r4.floatValue();
            r6 = r15.strokePaint;
            r5.drawCircle(r2, r3, r4, r6);
        L_0x0722:
            r2 = "circ";
            r15.popTransform(r2);
            r15.popGraphicState();
            goto L_0x006a;
        L_0x072c:
            r2 = r15.hidden;
            if (r2 != 0) goto L_0x0835;
        L_0x0730:
            r2 = "ellipse";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 == 0) goto L_0x0835;
        L_0x073a:
            r2 = "cx";
            r0 = r19;
            r2 = r15.getFloatAttr(r2, r0);
            r3 = "cy";
            r0 = r19;
            r3 = r15.getFloatAttr(r3, r0);
            r4 = "rx";
            r0 = r19;
            r4 = r15.getFloatAttr(r4, r0);
            r5 = "ry";
            r0 = r19;
            r5 = r15.getFloatAttr(r5, r0);
            if (r2 == 0) goto L_0x006a;
        L_0x075c:
            if (r3 == 0) goto L_0x006a;
        L_0x075e:
            if (r4 == 0) goto L_0x006a;
        L_0x0760:
            if (r5 == 0) goto L_0x006a;
        L_0x0762:
            r6 = "ell";
            r0 = r19;
            r15.pushTransform(r0, r6);
            r15.pushGraphicState();
            r6 = new com.catfiz.svgandroid.SVGParser$Properties;
            r7 = 0;
            r0 = r19;
            r6.<init>(r0);
            r7 = r15.graphicElement;
            r7 = r7.filter;
            r8 = r15.filterMap;
            r15.getFilter(r6, r7, r8);
            r7 = r15.rect;
            r8 = r2.floatValue();
            r9 = r4.floatValue();
            r8 = r8 - r9;
            r9 = r3.floatValue();
            r10 = r5.floatValue();
            r9 = r9 - r10;
            r10 = r2.floatValue();
            r11 = r4.floatValue();
            r10 = r10 + r11;
            r11 = r3.floatValue();
            r12 = r5.floatValue();
            r11 = r11 + r12;
            r7.set(r8, r9, r10, r11);
            r7 = r15.clipPathMap;
            r7 = r15.getClipPath(r6, r7);
            if (r7 == 0) goto L_0x07b5;
        L_0x07ae:
            r8 = r15.canvas;
            r9 = android.graphics.Region.Op.INTERSECT;
            r8.clipPath(r7, r9);
        L_0x07b5:
            r7 = r15.gradientMap;
            r7 = r15.doFill(r6, r7);
            if (r7 == 0) goto L_0x07f0;
        L_0x07bd:
            r7 = r2.floatValue();
            r8 = r4.floatValue();
            r7 = r7 - r8;
            r8 = r3.floatValue();
            r9 = r5.floatValue();
            r8 = r8 - r9;
            r15.doLimits(r7, r8);
            r7 = r2.floatValue();
            r8 = r4.floatValue();
            r7 = r7 + r8;
            r8 = r3.floatValue();
            r9 = r5.floatValue();
            r8 = r8 + r9;
            r15.doLimits(r7, r8);
            r7 = r15.canvas;
            r8 = r15.rect;
            r9 = r15.fillPaint;
            r7.drawOval(r8, r9);
        L_0x07f0:
            r7 = r15.gradientMap;
            r6 = r15.doStroke(r6, r7);
            if (r6 == 0) goto L_0x082b;
        L_0x07f8:
            r6 = r2.floatValue();
            r7 = r4.floatValue();
            r6 = r6 - r7;
            r7 = r3.floatValue();
            r8 = r5.floatValue();
            r7 = r7 - r8;
            r15.doLimits(r6, r7);
            r2 = r2.floatValue();
            r4 = r4.floatValue();
            r2 = r2 + r4;
            r3 = r3.floatValue();
            r4 = r5.floatValue();
            r3 = r3 + r4;
            r15.doLimits(r2, r3);
            r2 = r15.canvas;
            r3 = r15.rect;
            r4 = r15.strokePaint;
            r2.drawOval(r3, r4);
        L_0x082b:
            r2 = "ell";
            r15.popTransform(r2);
            r15.popGraphicState();
            goto L_0x006a;
        L_0x0835:
            r2 = r15.hidden;
            if (r2 != 0) goto L_0x0911;
        L_0x0839:
            r2 = "polygon";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 != 0) goto L_0x084d;
        L_0x0843:
            r2 = "polyline";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 == 0) goto L_0x0911;
        L_0x084d:
            r2 = "points";
            r0 = r19;
            r2 = com.catfiz.svgandroid.SVGParser.getNumberParseAttr(r2, r0);
            if (r2 == 0) goto L_0x006a;
        L_0x0857:
            r4 = new android.graphics.Path;
            r4.<init>();
            r5 = r2.numbers;
            r2 = r5.size();
            r3 = 1;
            if (r2 <= r3) goto L_0x006a;
        L_0x0867:
            r2 = "poly";
            r0 = r19;
            r15.pushTransform(r0, r2);
            r15.pushGraphicState();
            r6 = new com.catfiz.svgandroid.SVGParser$Properties;
            r2 = 0;
            r0 = r19;
            r6.<init>(r0);
            r2 = r15.graphicElement;
            r2 = r2.filter;
            r3 = r15.filterMap;
            r7 = r15.getFilter(r6, r2, r3);
            r2 = r15.clipPathMap;
            r8 = r15.getClipPath(r6, r2);
            r2 = 0;
            r2 = r5.get(r2);
            r2 = (java.lang.Float) r2;
            r3 = r2.floatValue();
            r2 = 1;
            r2 = r5.get(r2);
            r2 = (java.lang.Float) r2;
            r2 = r2.floatValue();
            r4.moveTo(r3, r2);
            r2 = 2;
            r3 = r2;
        L_0x08a4:
            r2 = r5.size();
            if (r3 >= r2) goto L_0x08c7;
        L_0x08aa:
            r2 = r5.get(r3);
            r2 = (java.lang.Float) r2;
            r9 = r2.floatValue();
            r2 = r3 + 1;
            r2 = r5.get(r2);
            r2 = (java.lang.Float) r2;
            r2 = r2.floatValue();
            r4.lineTo(r9, r2);
            r2 = r3 + 2;
            r3 = r2;
            goto L_0x08a4;
        L_0x08c7:
            r2 = "polygon";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 == 0) goto L_0x08e7;
        L_0x08d1:
            r4.close();
            r2 = "evenodd";
            r3 = "fill-rule";
            r3 = r6.getString(r3);
            r2 = r2.equals(r3);
            if (r2 == 0) goto L_0x08e7;
        L_0x08e2:
            r2 = android.graphics.Path.FillType.EVEN_ODD;
            r4.setFillType(r2);
        L_0x08e7:
            r2 = r15.gradientMap;
            r2 = r15.doFill(r6, r2);
            if (r2 == 0) goto L_0x08f7;
        L_0x08ef:
            r15.doLimits(r4);
            r2 = r15.fillPaint;
            r15.doDrawPath(r4, r2, r7, r8);
        L_0x08f7:
            r2 = r15.gradientMap;
            r2 = r15.doStroke(r6, r2);
            if (r2 == 0) goto L_0x0907;
        L_0x08ff:
            r15.doLimits(r4);
            r2 = r15.strokePaint;
            r15.doDrawPath(r4, r2, r7, r8);
        L_0x0907:
            r2 = "poly";
            r15.popTransform(r2);
            r15.popGraphicState();
            goto L_0x006a;
        L_0x0911:
            r2 = "clipPath";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 == 0) goto L_0x0931;
        L_0x091b:
            r2 = new com.catfiz.svgandroid.SVGParser$ClipPath;
            r3 = 0;
            r2.<init>();
            r15.inclippath = r2;
            r2 = r15.inclippath;
            r3 = "id";
            r0 = r19;
            r3 = com.catfiz.svgandroid.SVGParser.getStringAttr(r3, r0);
            r2.id = r3;
            goto L_0x006a;
        L_0x0931:
            r2 = r15.hidden;
            if (r2 != 0) goto L_0x0a1c;
        L_0x0935:
            r2 = "path";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 == 0) goto L_0x0a1c;
        L_0x093f:
            r2 = r15.inDefsElement;
            if (r2 == 0) goto L_0x097b;
        L_0x0943:
            r2 = "id";
            r0 = r19;
            r2 = com.catfiz.svgandroid.SVGParser.getStringAttr(r2, r0);
            r3 = "d";
            r0 = r19;
            r3 = com.catfiz.svgandroid.SVGParser.getStringAttr(r3, r0);
            r3 = com.catfiz.svgandroid.SVGParser.doPath(r3);
            r4 = new com.catfiz.svgandroid.SVGParser$Properties;
            r5 = 0;
            r0 = r19;
            r4.<init>(r0);
            if (r3 == 0) goto L_0x006a;
        L_0x0961:
            r5 = "evenodd";
            r6 = "fill-rule";
            r4 = r4.getString(r6);
            r4 = r5.equals(r4);
            if (r4 == 0) goto L_0x0974;
        L_0x096f:
            r4 = android.graphics.Path.FillType.EVEN_ODD;
            r3.setFillType(r4);
        L_0x0974:
            r4 = r15.defObjectsMap;
            r4.put(r2, r3);
            goto L_0x006a;
        L_0x097b:
            r2 = r15.inclippath;
            if (r2 == 0) goto L_0x09af;
        L_0x097f:
            r2 = "transform";
            r0 = r19;
            r2 = com.catfiz.svgandroid.SVGParser.getStringAttr(r2, r0);
            if (r2 != 0) goto L_0x09aa;
        L_0x0989:
            r2 = IDENTITY_MATRIX;
        L_0x098b:
            r3 = r15.inclippath;
            r4 = "d";
            r0 = r19;
            r4 = com.catfiz.svgandroid.SVGParser.getStringAttr(r4, r0);
            r4 = com.catfiz.svgandroid.SVGParser.doPath(r4);
            r3.p = r4;
            r3 = r15.inclippath;
            r3 = r3.p;
            if (r3 == 0) goto L_0x006a;
        L_0x09a1:
            r3 = r15.inclippath;
            r3 = r3.p;
            r3.transform(r2);
            goto L_0x006a;
        L_0x09aa:
            r2 = com.catfiz.svgandroid.SVGParser.parseTransform(r2);
            goto L_0x098b;
        L_0x09af:
            r2 = "d";
            r0 = r19;
            r2 = com.catfiz.svgandroid.SVGParser.getStringAttr(r2, r0);
            r2 = com.catfiz.svgandroid.SVGParser.doPath(r2);
            if (r2 == 0) goto L_0x006a;
        L_0x09bd:
            r3 = "path";
            r0 = r19;
            r15.pushTransform(r0, r3);
            r15.pushGraphicState();
            r3 = new com.catfiz.svgandroid.SVGParser$Properties;
            r4 = 0;
            r0 = r19;
            r3.<init>(r0);
            r4 = r15.graphicElement;
            r4 = r4.filter;
            r5 = r15.filterMap;
            r4 = r15.getFilter(r3, r4, r5);
            r5 = r15.clipPathMap;
            r5 = r15.getClipPath(r3, r5);
            r6 = "evenodd";
            r7 = "fill-rule";
            r7 = r3.getString(r7);
            r6 = r6.equals(r7);
            if (r6 == 0) goto L_0x09f2;
        L_0x09ed:
            r6 = android.graphics.Path.FillType.EVEN_ODD;
            r2.setFillType(r6);
        L_0x09f2:
            r6 = r15.gradientMap;
            r6 = r15.doFill(r3, r6);
            if (r6 == 0) goto L_0x0a02;
        L_0x09fa:
            r15.doLimits(r2);
            r6 = r15.fillPaint;
            r15.doDrawPath(r2, r6, r4, r5);
        L_0x0a02:
            r6 = r15.gradientMap;
            r3 = r15.doStroke(r3, r6);
            if (r3 == 0) goto L_0x0a12;
        L_0x0a0a:
            r15.doLimits(r2);
            r3 = r15.strokePaint;
            r15.doDrawPath(r2, r3, r4, r5);
        L_0x0a12:
            r2 = "path";
            r15.popTransform(r2);
            r15.popGraphicState();
            goto L_0x006a;
        L_0x0a1c:
            r2 = r15.hidden;
            if (r2 != 0) goto L_0x0a6f;
        L_0x0a20:
            r2 = "use";
            r0 = r17;
            r2 = r0.equals(r2);
            if (r2 == 0) goto L_0x0a6f;
        L_0x0a2a:
            r2 = "href";
            r0 = r19;
            r2 = com.catfiz.svgandroid.SVGParser.getStringAttr(r2, r0);
            if (r2 == 0) goto L_0x006a;
        L_0x0a34:
            r3 = "#";
            r3 = r2.startsWith(r3);
            if (r3 == 0) goto L_0x0a8f;
        L_0x0a3c:
            r3 = 1;
            r2 = r2.substring(r3);
            r3 = r2;
        L_0x0a42:
            r2 = r15.defObjectsMap;
            r2 = r2.get(r3);
            r4 = r2 instanceof android.graphics.Path;
            if (r4 == 0) goto L_0x0a55;
        L_0x0a4c:
            r2 = (android.graphics.Path) r2;
            r0 = r19;
            r15.doUseObjectPath(r0, r2, r3);
            goto L_0x006a;
        L_0x0a55:
            r2 = "SVGAndroid";
            r4 = new java.lang.StringBuilder;
            r4.<init>();
            r5 = "USE OBJECT NOT SUPPORTED id=";
            r4 = r4.append(r5);
            r3 = r4.append(r3);
            r3 = r3.toString();
            com.catfiz.util.Log.e(r2, r3);
            goto L_0x006a;
        L_0x0a6f:
            r2 = r15.hidden;
            if (r2 != 0) goto L_0x006a;
        L_0x0a73:
            r2 = "SVGAndroid";
            r3 = new java.lang.StringBuilder;
            r3.<init>();
            r4 = "UNRECOGNIZED SVG COMMAND: ";
            r3 = r3.append(r4);
            r0 = r17;
            r3 = r3.append(r0);
            r3 = r3.toString();
            com.catfiz.util.Log.d(r2, r3);
            goto L_0x006a;
        L_0x0a8f:
            r3 = r2;
            goto L_0x0a42;
        L_0x0a91:
            r9 = r2;
            goto L_0x03a6;
        L_0x0a94:
            r8 = r2;
            goto L_0x0396;
        L_0x0a97:
            r5 = r2;
            r4 = r3;
            goto L_0x0230;
            */
            throw new UnsupportedOperationException("Method not decompiled: com.catfiz.svgandroid.SVGParser.SVGHandler.startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void");
        }
    }

    class StyleSet {
        HashMap styleMap;

        private StyleSet(String str) {
            this.styleMap = new HashMap();
            for (String split : str.split(";")) {
                String[] split2 = split.split(":");
                if (split2.length == 2) {
                    this.styleMap.put(split2[0], split2[1]);
                }
            }
        }

        public String getStyle(String str) {
            return (String) this.styleMap.get(str);
        }
    }

    private static Path doPath(String str) {
        if (str == null) {
            return null;
        }
        if (str.length() == 0) {
            return null;
        }
        int length = str.length();
        ParserHelper parserHelper = new ParserHelper(str, 0);
        parserHelper.skipWhitespace();
        Path path = new Path();
        RectF rectF = new RectF();
        float f = 0.0f;
        float f2 = 0.0f;
        float f3 = 0.0f;
        char c = 'x';
        float f4 = 0.0f;
        while (parserHelper.pos < length) {
            Object obj;
            float f5;
            float f6;
            float f7;
            char charAt = str.charAt(parserHelper.pos);
            if (Character.isDigit(charAt) || charAt == '.' || charAt == '-') {
                charAt = c == 'M' ? 'L' : c == 'm' ? 'l' : c;
            } else {
                parserHelper.advance();
            }
            path.computeBounds(rectF, true);
            float nextFloat;
            float nextFloat2;
            int i;
            switch (charAt) {
                case R.styleable.Theme_textAppearanceSearchResultTitle /*65*/:
                case R.styleable.Theme_buttonBarNegativeButtonStyle /*97*/:
                    float nextFloat3 = parserHelper.nextFloat();
                    float nextFloat4 = parserHelper.nextFloat();
                    float nextFloat5 = parserHelper.nextFloat();
                    int nextFloat6 = (int) parserHelper.nextFloat();
                    int nextFloat7 = (int) parserHelper.nextFloat();
                    float nextFloat8 = parserHelper.nextFloat();
                    float nextFloat9 = parserHelper.nextFloat();
                    if (charAt == 'a') {
                        nextFloat8 += f4;
                        nextFloat9 += f3;
                    }
                    drawArc(path, (double) f4, (double) f3, (double) nextFloat8, (double) nextFloat9, (double) nextFloat3, (double) nextFloat4, (double) nextFloat5, nextFloat6 == 1, nextFloat7 == 1);
                    obj = null;
                    f4 = f;
                    f5 = f2;
                    f6 = nextFloat9;
                    f7 = nextFloat8;
                    break;
                case R.styleable.Theme_textColorSearchUrl /*67*/:
                case R.styleable.Theme_autoCompleteTextViewStyle /*99*/:
                    float nextFloat10 = parserHelper.nextFloat();
                    f5 = parserHelper.nextFloat();
                    f6 = parserHelper.nextFloat();
                    f7 = parserHelper.nextFloat();
                    nextFloat = parserHelper.nextFloat();
                    nextFloat2 = parserHelper.nextFloat();
                    if (charAt == 'c') {
                        f6 += f4;
                        nextFloat += f4;
                        f5 += f3;
                        f7 += f3;
                        nextFloat2 += f3;
                        f4 = nextFloat10 + f4;
                    } else {
                        f4 = nextFloat10;
                    }
                    path.cubicTo(f4, f5, f6, f7, nextFloat, nextFloat2);
                    f4 = f7;
                    f5 = f6;
                    f6 = nextFloat2;
                    f7 = nextFloat;
                    i = 1;
                    break;
                case R.styleable.Theme_listPreferredItemPaddingLeft /*72*/:
                case R.styleable.Theme_editTextStyle /*104*/:
                    nextFloat = parserHelper.nextFloat();
                    if (charAt != 'h') {
                        path.lineTo(nextFloat, f3);
                        f4 = f;
                        f5 = f2;
                        f6 = f3;
                        f7 = nextFloat;
                        obj = null;
                        break;
                    }
                    path.rLineTo(nextFloat, 0.0f);
                    f4 += nextFloat;
                    obj = null;
                    f5 = f2;
                    f6 = f3;
                    f7 = f4;
                    f4 = f;
                    break;
                case R.styleable.Theme_textAppearanceListItem /*76*/:
                case R.styleable.Theme_spinnerStyle /*108*/:
                    nextFloat = parserHelper.nextFloat();
                    nextFloat2 = parserHelper.nextFloat();
                    if (charAt != 'l') {
                        path.lineTo(nextFloat, nextFloat2);
                        f4 = f;
                        f5 = f2;
                        f6 = nextFloat2;
                        f7 = nextFloat;
                        obj = null;
                        break;
                    }
                    path.rLineTo(nextFloat, nextFloat2);
                    f4 += nextFloat;
                    obj = null;
                    f5 = f2;
                    f6 = f3 + nextFloat2;
                    f7 = f4;
                    f4 = f;
                    break;
                case R.styleable.Theme_textAppearanceListItemSmall /*77*/:
                case R.styleable.Theme_switchStyle /*109*/:
                    nextFloat = parserHelper.nextFloat();
                    nextFloat2 = parserHelper.nextFloat();
                    if (charAt != 'm') {
                        path.moveTo(nextFloat, nextFloat2);
                        f4 = f;
                        f5 = f2;
                        f6 = nextFloat2;
                        f7 = nextFloat;
                        obj = null;
                        break;
                    }
                    path.rMoveTo(nextFloat, nextFloat2);
                    f4 += nextFloat;
                    obj = null;
                    f5 = f2;
                    f6 = f3 + nextFloat2;
                    f7 = f4;
                    f4 = f;
                    break;
                case R.styleable.Theme_listChoiceBackgroundIndicator /*81*/:
                case 'q':
                    f6 = parserHelper.nextFloat();
                    f7 = parserHelper.nextFloat();
                    nextFloat = parserHelper.nextFloat();
                    nextFloat2 = parserHelper.nextFloat();
                    if (charAt == 'q') {
                        nextFloat += f4;
                        nextFloat2 += f3;
                        f6 += f4;
                        f7 += f3;
                    }
                    path.cubicTo(f4, f3, f6, f7, nextFloat, nextFloat2);
                    f4 = f7;
                    f5 = f6;
                    f6 = nextFloat2;
                    f7 = nextFloat;
                    i = 1;
                    break;
                case R.styleable.Theme_colorPrimaryDark /*83*/:
                case 's':
                    f6 = parserHelper.nextFloat();
                    f7 = parserHelper.nextFloat();
                    nextFloat = parserHelper.nextFloat();
                    nextFloat2 = parserHelper.nextFloat();
                    if (charAt == 's') {
                        f6 += f4;
                        nextFloat += f4;
                        f7 += f3;
                        nextFloat2 += f3;
                    }
                    path.cubicTo((f4 * 2.0f) - f2, (2.0f * f3) - f, f6, f7, nextFloat, nextFloat2);
                    f4 = f7;
                    f5 = f6;
                    f6 = nextFloat2;
                    f7 = nextFloat;
                    i = 1;
                    break;
                case R.styleable.Theme_colorAccent /*84*/:
                case 't':
                    nextFloat = parserHelper.nextFloat();
                    nextFloat2 = parserHelper.nextFloat();
                    if (charAt == 't') {
                        nextFloat += f4;
                        nextFloat2 += f3;
                    }
                    f6 = (2.0f * f4) - f2;
                    f7 = (2.0f * f3) - f;
                    path.cubicTo(f4, f3, f6, f7, nextFloat, nextFloat2);
                    f4 = f7;
                    f5 = f6;
                    f6 = nextFloat2;
                    f7 = nextFloat;
                    i = 1;
                    break;
                case R.styleable.Theme_colorControlActivated /*86*/:
                case 'v':
                    nextFloat2 = parserHelper.nextFloat();
                    if (charAt != 'v') {
                        path.lineTo(f4, nextFloat2);
                        obj = null;
                        f5 = f2;
                        f6 = nextFloat2;
                        f7 = f4;
                        f4 = f;
                        break;
                    }
                    path.rLineTo(0.0f, nextFloat2);
                    obj = null;
                    f5 = f2;
                    f6 = f3 + nextFloat2;
                    f7 = f4;
                    f4 = f;
                    break;
                case R.styleable.Theme_controlBackground /*90*/:
                case 'z':
                    path.close();
                    obj = null;
                    f5 = f2;
                    f6 = f3;
                    f7 = f4;
                    f4 = f;
                    break;
                default:
                    parserHelper.advance();
                    obj = null;
                    f5 = f2;
                    f6 = f3;
                    f7 = f4;
                    f4 = f;
                    break;
            }
            if (obj == null) {
                f4 = f6;
                f5 = f7;
            }
            parserHelper.skipWhitespace();
            f = f4;
            f2 = f5;
            f3 = f6;
            c = charAt;
            f4 = f7;
        }
        return path;
    }

    private static void drawArc(Path path, double d, double d2, double d3, double d4, double d5, double d6, double d7, boolean z, boolean z2) {
        double d8;
        double d9 = (d - d3) / 2.0d;
        double d10 = (d2 - d4) / 2.0d;
        double toRadians = Math.toRadians(d7 % 360.0d);
        double cos = Math.cos(toRadians);
        double sin = Math.sin(toRadians);
        double d11 = (cos * d9) + (sin * d10);
        double d12 = (d9 * (-sin)) + (d10 * cos);
        double abs = Math.abs(d5);
        toRadians = Math.abs(d6);
        d10 = abs * abs;
        d9 = toRadians * toRadians;
        double d13 = d11 * d11;
        double d14 = d12 * d12;
        double d15 = (d13 / d10) + (d14 / d9);
        if (d15 > 1.0d) {
            abs *= Math.sqrt(d15);
            toRadians *= Math.sqrt(d15);
            d15 = toRadians;
            d8 = abs;
            toRadians *= toRadians;
            abs *= abs;
        } else {
            d15 = toRadians;
            d8 = abs;
            toRadians = d9;
            abs = d10;
        }
        d10 = z == z2 ? -1.0d : 1.0d;
        d9 = (((abs * toRadians) - (abs * d14)) - (toRadians * d13)) / ((toRadians * d13) + (abs * d14));
        if (d9 < 0.0d) {
            d9 = 0.0d;
        }
        d9 = Math.sqrt(d9) * d10;
        d10 = ((d8 * d12) / d15) * d9;
        d9 *= -((d15 * d11) / d8);
        toRadians = ((d + d3) / 2.0d) + ((cos * d10) - (sin * d9));
        abs = ((d2 + d4) / 2.0d) + ((cos * d9) + (sin * d10));
        cos = (d11 - d10) / d8;
        sin = (d12 - d9) / d15;
        d10 = ((-d11) - d10) / d8;
        d11 = ((-d12) - d9) / d15;
        d12 = Math.toDegrees((sin < 0.0d ? -1.0d : 1.0d) * Math.acos(cos / Math.sqrt((cos * cos) + (sin * sin))));
        d9 = Math.toDegrees(((cos * d11) - (d10 * sin) < 0.0d ? -1.0d : 1.0d) * Math.acos(((sin * d11) + (cos * d10)) / Math.sqrt(((cos * cos) + (sin * sin)) * ((d10 * d10) + (d11 * d11)))));
        if (!z2 && d9 > 0.0d) {
            d9 -= 360.0d;
        } else if (z2 && d9 < 0.0d) {
            d9 += 360.0d;
        }
        path.arcTo(new RectF((float) (toRadians - d8), (float) (abs - d15), (float) (toRadians + d8), (float) (abs + d15)), (float) (d12 % 360.0d), (float) (d9 % 360.0d));
    }

    private static Integer getHexAttr(String str, Attributes attributes) {
        Integer num = null;
        String stringAttr = getStringAttr(str, attributes);
        if (stringAttr != null) {
            try {
                num = Integer.valueOf(Integer.parseInt(stringAttr.substring(1), 16));
            } catch (NumberFormatException e) {
            }
        }
        return num;
    }

    private static NumberParse getNumberParseAttr(String str, Attributes attributes) {
        int length = attributes.getLength();
        for (int i = 0; i < length; i++) {
            if (attributes.getLocalName(i).equals(str)) {
                return parseNumbers(attributes.getValue(i));
            }
        }
        return null;
    }

    public static SVG getSVGFromAsset(AssetManager assetManager, String str) {
        InputStream open = assetManager.open(str);
        SVG sVGFromInputStream = getSVGFromInputStream(open);
        open.close();
        return sVGFromInputStream;
    }

    public static SVG getSVGFromAsset(AssetManager assetManager, String str, int i, int i2) {
        InputStream open = assetManager.open(str);
        SVG sVGFromInputStream = getSVGFromInputStream(open, i, i2);
        open.close();
        return sVGFromInputStream;
    }

    public static SVG getSVGFromCompressedAsset(AssetManager assetManager, String str, int i, int i2) {
        InputStream open = assetManager.open(str);
        SVG sVGFromInputStream = getSVGFromInputStream(new GZIPInputStream(open), i, i2);
        open.close();
        return sVGFromInputStream;
    }

    public static SVG getSVGFromCompressedStream(InputStream inputStream) {
        return parse(new GZIPInputStream(inputStream), Integer.valueOf(0), Integer.valueOf(0), false);
    }

    public static SVG getSVGFromInputStream(InputStream inputStream) {
        return parse(inputStream, Integer.valueOf(0), Integer.valueOf(0), false);
    }

    public static SVG getSVGFromInputStream(InputStream inputStream, int i, int i2) {
        return parse(inputStream, Integer.valueOf(i), Integer.valueOf(i2), false);
    }

    public static SVG getSVGFromResource(Resources resources, int i) {
        return parse(resources.openRawResource(i), Integer.valueOf(0), Integer.valueOf(0), false);
    }

    public static SVG getSVGFromResource(Resources resources, int i, int i2, int i3) {
        return parse(resources.openRawResource(i), Integer.valueOf(i2), Integer.valueOf(i3), false);
    }

    public static SVG getSVGFromStickerStream(InputStream inputStream, long j) {
        try {
            byte[] bArr = new byte[16];
            byte[] bArr2 = new byte[16];
            byte[] bArr3 = new byte[16];
            byte[] bArr4 = new byte[16];
            byte[] bArr5 = new byte[(((int) j) - 65)];
            inputStream.read(new byte[1]);
            inputStream.read(bArr);
            inputStream.read(bArr2);
            inputStream.read(bArr3);
            inputStream.read(bArr4);
            inputStream.read(bArr5);
            InputStream byteArrayInputStream = new ByteArrayInputStream(bArr5);
            try {
                Cipher instance = Cipher.getInstance("AES/CBC/PKCS5Padding");
                instance.init(2, new SecretKeySpec(bArr2, "AES"), new IvParameterSpec(bArr));
                return getSVGFromCompressedStream(new CipherInputStream(byteArrayInputStream, instance));
            } catch (Exception e) {
                e.printStackTrace();
                throw new SVGParseException("Invalid stream (decode)");
            }
        } catch (Exception e2) {
            throw new SVGParseException("Invalid Stream (unpack)");
        }
    }

    public static SVG getSVGFromString(String str) {
        return parse(new ByteArrayInputStream(str.getBytes()), Integer.valueOf(0), Integer.valueOf(0), false);
    }

    public static SVG getSVGFromString(String str, int i, int i2) {
        return parse(new ByteArrayInputStream(str.getBytes()), Integer.valueOf(i), Integer.valueOf(i2), false);
    }

    private static String getStringAttr(String str, Attributes attributes) {
        int length = attributes.getLength();
        for (int i = 0; i < length; i++) {
            if (attributes.getLocalName(i).equals(str)) {
                return attributes.getValue(i);
            }
        }
        return null;
    }

    private static SVG parse(InputStream inputStream, Integer num, Integer num2, boolean z) {
        try {
            System.currentTimeMillis();
            XMLReader xMLReader = SAXParserFactory.newInstance().newSAXParser().getXMLReader();
            Picture picture = new Picture();
            SVGHandler sVGHandler = new SVGHandler(picture);
            sVGHandler.setColorSwap(num, num2);
            sVGHandler.setWhiteMode(z);
            xMLReader.setContentHandler(sVGHandler);
            xMLReader.parse(new InputSource(inputStream));
            SVG svg = new SVG(picture, sVGHandler.bounds);
            if (!Float.isInfinite(sVGHandler.limits.top)) {
                svg.setLimits(sVGHandler.limits);
            }
            return svg;
        } catch (Throwable e) {
            e.printStackTrace();
            throw new SVGParseException(e);
        }
    }

    private static NumberParse parseNumbers(String str) {
        String substring;
        int length = str.length();
        ArrayList arrayList = new ArrayList();
        Object obj = null;
        Object obj2 = null;
        int i = 0;
        for (int i2 = 1; i2 < length; i2++) {
            if (obj != null) {
                obj = null;
            } else {
                int i3;
                char charAt = str.charAt(i2);
                switch (charAt) {
                    case HTTP.HT /*9*/:
                    case HTTP.LF /*10*/:
                    case HTTP.SP /*32*/:
                    case R.styleable.Theme_listDividerAlertDialog /*44*/:
                        obj2 = null;
                        break;
                    case R.styleable.Theme_textAppearanceSmallPopupMenu /*41*/:
                    case R.styleable.Theme_textAppearanceSearchResultTitle /*65*/:
                    case R.styleable.Theme_textColorSearchUrl /*67*/:
                    case R.styleable.Theme_listPreferredItemPaddingLeft /*72*/:
                    case R.styleable.Theme_textAppearanceListItem /*76*/:
                    case R.styleable.Theme_textAppearanceListItemSmall /*77*/:
                    case R.styleable.Theme_listChoiceBackgroundIndicator /*81*/:
                    case R.styleable.Theme_colorPrimaryDark /*83*/:
                    case R.styleable.Theme_colorAccent /*84*/:
                    case R.styleable.Theme_colorControlActivated /*86*/:
                    case R.styleable.Theme_controlBackground /*90*/:
                    case R.styleable.Theme_buttonBarNegativeButtonStyle /*97*/:
                    case R.styleable.Theme_autoCompleteTextViewStyle /*99*/:
                    case R.styleable.Theme_editTextStyle /*104*/:
                    case R.styleable.Theme_spinnerStyle /*108*/:
                    case R.styleable.Theme_switchStyle /*109*/:
                    case 'q':
                    case 's':
                    case 't':
                    case 'v':
                    case 'z':
                        substring = str.substring(i, i2);
                        if (substring.trim().length() > 0) {
                            arrayList.add(Float.valueOf(Float.parseFloat(substring)));
                        }
                        return new NumberParse(arrayList, i2);
                    case R.styleable.Theme_actionDropDownStyle /*45*/:
                        break;
                    case HttpStatus.SC_SWITCHING_PROTOCOLS /*101*/:
                        i3 = 1;
                        continue;
                    default:
                        continue;
                }
                if (obj2 == null) {
                    String substring2 = str.substring(i, i2);
                    if (substring2.trim().length() > 0) {
                        arrayList.add(Float.valueOf(Float.parseFloat(substring2)));
                        if (charAt == '-') {
                            i3 = i2;
                        } else {
                            i3 = i2 + 1;
                            int i4 = 1;
                        }
                        i = i3;
                        obj2 = null;
                    } else {
                        i++;
                        obj2 = null;
                    }
                }
            }
        }
        substring = str.substring(i);
        if (substring.length() > 0) {
            try {
                arrayList.add(Float.valueOf(Float.parseFloat(substring)));
            } catch (NumberFormatException e) {
            }
            i = str.length();
        }
        return new NumberParse(arrayList, i);
    }

    public static Path parsePath(String str) {
        return doPath(str);
    }

    private static Matrix parseTransform(String str) {
        Matrix matrix = new Matrix();
        while (true) {
            parseTransformItem(str, matrix);
            int indexOf = str.indexOf(")");
            if (indexOf <= 0 || str.length() <= indexOf + 1) {
                return matrix;
            }
            str = str.substring(indexOf + 1).replaceFirst("[\\s,]*", "");
        }
        return matrix;
    }

    private static Matrix parseTransformItem(String str, Matrix matrix) {
        float f = 0.0f;
        NumberParse parseNumbers;
        if (str.startsWith("matrix(")) {
            if (parseNumbers(str.substring("matrix(".length())).numbers.size() == 6) {
                Matrix matrix2 = new Matrix();
                matrix2.setValues(new float[]{((Float) parseNumbers.numbers.get(0)).floatValue(), ((Float) parseNumbers.numbers.get(2)).floatValue(), ((Float) parseNumbers.numbers.get(4)).floatValue(), ((Float) parseNumbers.numbers.get(1)).floatValue(), ((Float) parseNumbers.numbers.get(3)).floatValue(), ((Float) parseNumbers.numbers.get(5)).floatValue(), 0.0f, 0.0f, 1.0f});
                matrix.preConcat(matrix2);
            }
        } else if (str.startsWith("translate(")) {
            parseNumbers = parseNumbers(str.substring("translate(".length()));
            if (parseNumbers.numbers.size() > 0) {
                matrix.preTranslate(((Float) parseNumbers.numbers.get(0)).floatValue(), parseNumbers.numbers.size() > 1 ? ((Float) parseNumbers.numbers.get(1)).floatValue() : 0.0f);
            }
        } else if (str.startsWith("scale(")) {
            parseNumbers = parseNumbers(str.substring("scale(".length()));
            if (parseNumbers.numbers.size() > 0) {
                f = ((Float) parseNumbers.numbers.get(0)).floatValue();
                matrix.preScale(f, parseNumbers.numbers.size() > 1 ? ((Float) parseNumbers.numbers.get(1)).floatValue() : f);
            }
        } else if (str.startsWith("skewX(")) {
            r0 = parseNumbers(str.substring("skewX(".length()));
            if (r0.numbers.size() > 0) {
                matrix.preSkew((float) Math.tan((double) ((Float) r0.numbers.get(0)).floatValue()), 0.0f);
            }
        } else if (str.startsWith("skewY(")) {
            r0 = parseNumbers(str.substring("skewY(".length()));
            if (r0.numbers.size() > 0) {
                matrix.preSkew(0.0f, (float) Math.tan((double) ((Float) r0.numbers.get(0)).floatValue()));
            }
        } else if (str.startsWith("rotate(")) {
            NumberParse parseNumbers2 = parseNumbers(str.substring("rotate(".length()));
            if (parseNumbers2.numbers.size() > 0) {
                float f2;
                float floatValue = ((Float) parseNumbers2.numbers.get(0)).floatValue();
                if (parseNumbers2.numbers.size() > 2) {
                    float floatValue2 = ((Float) parseNumbers2.numbers.get(1)).floatValue();
                    f = ((Float) parseNumbers2.numbers.get(2)).floatValue();
                    f2 = floatValue2;
                } else {
                    f2 = 0.0f;
                }
                matrix.preTranslate(f2, f);
                matrix.preRotate(floatValue);
                matrix.preTranslate(-f2, -f);
            }
        } else {
            Log.i(TAG, "Invalid transform (" + str + ")");
        }
        return matrix;
    }

    private static RectF parseViewbox(String str) {
        NumberParse parseNumbers = parseNumbers(str);
        if (parseNumbers.numbers.size() != 4) {
            return null;
        }
        float floatValue = ((Float) parseNumbers.numbers.get(0)).floatValue();
        float floatValue2 = ((Float) parseNumbers.numbers.get(1)).floatValue();
        return new RectF(floatValue, floatValue2, floatValue + ((Float) parseNumbers.numbers.get(2)).floatValue(), floatValue2 + ((Float) parseNumbers.numbers.get(3)).floatValue());
    }

    public static void setDpi(float f) {
        dpi = f;
    }
}
