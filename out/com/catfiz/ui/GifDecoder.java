package com.catfiz.ui;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.view.MotionEventCompat;
import android.support.v4.view.ViewCompat;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import com.catfiz.R;
import java.io.InputStream;
import java.util.Vector;
import org.apache.http.conn.routing.HttpRouteDirector;

public class GifDecoder {
    protected static final int MAX_STACK_SIZE = 4096;
    public static final int STATUS_FORMAT_ERROR = 1;
    public static final int STATUS_OK = 0;
    public static final int STATUS_OPEN_ERROR = 2;
    protected int[] act;
    protected int bgColor;
    protected int bgIndex;
    protected byte[] block = new byte[AccessibilityNodeInfoCompat.ACTION_NEXT_AT_MOVEMENT_GRANULARITY];
    protected int blockSize = STATUS_OK;
    protected int delay = STATUS_OK;
    protected int dispose = STATUS_OK;
    protected int frameCount;
    protected Vector frames;
    protected int[] gct;
    protected boolean gctFlag;
    protected int gctSize;
    protected int height;
    protected int ih;
    protected Bitmap image;
    protected InputStream in;
    protected boolean interlace;
    protected int iw;
    protected int ix;
    protected int iy;
    protected int lastBgColor;
    protected Bitmap lastBitmap;
    protected int lastDispose = STATUS_OK;
    protected int[] lct;
    protected boolean lctFlag;
    protected int lctSize;
    protected int loopCount = STATUS_FORMAT_ERROR;
    protected int lrh;
    protected int lrw;
    protected int lrx;
    protected int lry;
    protected int pixelAspect;
    protected byte[] pixelStack;
    protected byte[] pixels;
    protected short[] prefix;
    protected int status;
    protected byte[] suffix;
    protected int transIndex;
    protected boolean transparency = false;
    protected int width;

    class GifFrame {
        public int delay;
        public Bitmap image;

        public GifFrame(Bitmap bitmap, int i) {
            this.image = bitmap;
            this.delay = i;
        }
    }

    protected void decodeBitmapData() {
        int i;
        int i2 = this.iw * this.ih;
        if (this.pixels == null || this.pixels.length < i2) {
            this.pixels = new byte[i2];
        }
        if (this.prefix == null) {
            this.prefix = new short[MAX_STACK_SIZE];
        }
        if (this.suffix == null) {
            this.suffix = new byte[MAX_STACK_SIZE];
        }
        if (this.pixelStack == null) {
            this.pixelStack = new byte[FragmentTransaction.TRANSIT_FRAGMENT_OPEN];
        }
        int read = read();
        int i3 = STATUS_FORMAT_ERROR << read;
        int i4 = i3 + STATUS_FORMAT_ERROR;
        int i5 = i3 + STATUS_OPEN_ERROR;
        int i6 = read + STATUS_FORMAT_ERROR;
        int i7 = (STATUS_FORMAT_ERROR << i6) - 1;
        for (i = STATUS_OK; i < i3; i += STATUS_FORMAT_ERROR) {
            this.prefix[i] = (short) 0;
            this.suffix[i] = (byte) i;
        }
        int i8 = STATUS_OK;
        int i9 = STATUS_OK;
        int i10 = STATUS_OK;
        int i11 = STATUS_OK;
        int i12 = STATUS_OK;
        int i13 = STATUS_OK;
        int i14 = STATUS_OK;
        int i15 = -1;
        i = STATUS_OK;
        while (i12 < i2) {
            int i16;
            int i17;
            if (i9 == 0) {
                if (i14 >= i6) {
                    i16 = i11 & i7;
                    i11 >>= i6;
                    i14 -= i6;
                    if (i16 <= i5 && i16 != i4) {
                        if (i16 != i3) {
                            if (i15 != -1) {
                                int i18;
                                if (i16 == i5) {
                                    i18 = i9 + STATUS_FORMAT_ERROR;
                                    this.pixelStack[i9] = (byte) i10;
                                    i10 = i15;
                                } else {
                                    i18 = i9;
                                    i10 = i16;
                                }
                                while (i10 > i3) {
                                    i9 = i18 + STATUS_FORMAT_ERROR;
                                    this.pixelStack[i18] = this.suffix[i10];
                                    i10 = this.prefix[i10];
                                    i18 = i9;
                                }
                                i10 = this.suffix[i10] & MotionEventCompat.ACTION_MASK;
                                if (i5 >= MAX_STACK_SIZE) {
                                    break;
                                }
                                i9 = i18 + STATUS_FORMAT_ERROR;
                                this.pixelStack[i18] = (byte) i10;
                                this.prefix[i5] = (short) i15;
                                this.suffix[i5] = (byte) i10;
                                i15 = i5 + STATUS_FORMAT_ERROR;
                                if ((i15 & i7) == 0 && i15 < MAX_STACK_SIZE) {
                                    i6 += STATUS_FORMAT_ERROR;
                                    i7 += i15;
                                }
                                i17 = i9;
                                i9 = i11;
                                i11 = i16;
                                i16 = i7;
                                i7 = i10;
                                i10 = i14;
                                i14 = i6;
                                i6 = i17;
                            } else {
                                i10 = i9 + STATUS_FORMAT_ERROR;
                                this.pixelStack[i9] = this.suffix[i16];
                                i9 = i10;
                                i15 = i16;
                                i10 = i16;
                            }
                        } else {
                            i6 = read + STATUS_FORMAT_ERROR;
                            i7 = (STATUS_FORMAT_ERROR << i6) - 1;
                            i5 = i3 + STATUS_OPEN_ERROR;
                            i15 = -1;
                        }
                    } else {
                        break;
                    }
                }
                if (i13 == 0) {
                    i13 = readBlock();
                    if (i13 <= 0) {
                        break;
                    }
                    i = STATUS_OK;
                }
                i11 += (this.block[i] & MotionEventCompat.ACTION_MASK) << i14;
                i14 += 8;
                i += STATUS_FORMAT_ERROR;
                i13--;
            } else {
                i16 = i7;
                i7 = i10;
                i10 = i14;
                i14 = i6;
                i6 = i9;
                i9 = i11;
                i11 = i15;
                i15 = i5;
            }
            i5 = i6 - 1;
            i6 = i8 + STATUS_FORMAT_ERROR;
            this.pixels[i8] = this.pixelStack[i5];
            i12 += STATUS_FORMAT_ERROR;
            i8 = i6;
            i6 = i14;
            i14 = i10;
            i10 = i7;
            i7 = i16;
            i17 = i11;
            i11 = i9;
            i9 = i5;
            i5 = i15;
            i15 = i17;
        }
        for (i = i8; i < i2; i += STATUS_FORMAT_ERROR) {
            this.pixels[i] = (byte) 0;
        }
    }

    protected boolean err() {
        return this.status != 0;
    }

    public Bitmap getBitmap() {
        return getFrame(STATUS_OK);
    }

    public int getDelay(int i) {
        this.delay = -1;
        if (i >= 0 && i < this.frameCount) {
            this.delay = ((GifFrame) this.frames.elementAt(i)).delay;
        }
        return this.delay;
    }

    public Bitmap getFrame(int i) {
        if (this.frameCount <= 0) {
            return null;
        }
        return ((GifFrame) this.frames.elementAt(i % this.frameCount)).image;
    }

    public int getFrameCount() {
        return this.frameCount;
    }

    public int getLoopCount() {
        return this.loopCount;
    }

    protected void init() {
        this.status = STATUS_OK;
        this.frameCount = STATUS_OK;
        this.frames = new Vector();
        this.gct = null;
        this.lct = null;
    }

    protected int read() {
        int i = STATUS_OK;
        try {
            i = this.in.read();
        } catch (Exception e) {
            this.status = STATUS_FORMAT_ERROR;
        }
        return i;
    }

    public int read(InputStream inputStream) {
        init();
        if (inputStream != null) {
            this.in = inputStream;
            readHeader();
            if (!err()) {
                readContents();
                if (this.frameCount < 0) {
                    this.status = STATUS_FORMAT_ERROR;
                }
            }
        } else {
            this.status = STATUS_OPEN_ERROR;
        }
        try {
            inputStream.close();
        } catch (Exception e) {
        }
        return this.status;
    }

    protected void readBitmap() {
        int i = STATUS_OK;
        this.ix = readShort();
        this.iy = readShort();
        this.iw = readShort();
        this.ih = readShort();
        int read = read();
        this.lctFlag = (read & AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS) != 0;
        this.lctSize = (int) Math.pow(2.0d, (double) ((read & 7) + STATUS_FORMAT_ERROR));
        this.interlace = (read & 64) != 0;
        if (this.lctFlag) {
            this.lct = readColorTable(this.lctSize);
            this.act = this.lct;
        } else {
            this.act = this.gct;
            if (this.bgIndex == this.transIndex) {
                this.bgColor = STATUS_OK;
            }
        }
        if (this.transparency) {
            int i2 = this.act[this.transIndex];
            this.act[this.transIndex] = STATUS_OK;
            i = i2;
        }
        if (this.act == null) {
            this.status = STATUS_FORMAT_ERROR;
        }
        if (!err()) {
            decodeBitmapData();
            skip();
            if (!err()) {
                this.frameCount += STATUS_FORMAT_ERROR;
                this.image = Bitmap.createBitmap(this.width, this.height, Config.ARGB_4444);
                setPixels();
                this.frames.addElement(new GifFrame(this.image, this.delay));
                if (this.transparency) {
                    this.act[this.transIndex] = i;
                }
                resetFrame();
            }
        }
    }

    protected int readBlock() {
        this.blockSize = read();
        int i = STATUS_OK;
        if (this.blockSize > 0) {
            while (i < this.blockSize) {
                try {
                    int read = this.in.read(this.block, i, this.blockSize - i);
                    if (read == -1) {
                        break;
                    }
                    i += read;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (i < this.blockSize) {
                this.status = STATUS_FORMAT_ERROR;
            }
        }
        return i;
    }

    protected int[] readColorTable(int i) {
        int read;
        int i2 = STATUS_OK;
        int i3 = i * 3;
        int[] iArr = null;
        byte[] bArr = new byte[i3];
        try {
            read = this.in.read(bArr);
        } catch (Exception e) {
            e.printStackTrace();
            read = STATUS_OK;
        }
        if (read < i3) {
            this.status = STATUS_FORMAT_ERROR;
        } else {
            iArr = new int[AccessibilityNodeInfoCompat.ACTION_NEXT_AT_MOVEMENT_GRANULARITY];
            read = STATUS_OK;
            while (i2 < i) {
                i3 = read + STATUS_FORMAT_ERROR;
                int i4 = bArr[read] & MotionEventCompat.ACTION_MASK;
                int i5 = i3 + STATUS_FORMAT_ERROR;
                int i6 = bArr[i3] & MotionEventCompat.ACTION_MASK;
                read = i5 + STATUS_FORMAT_ERROR;
                i3 = i2 + STATUS_FORMAT_ERROR;
                iArr[i2] = (((i4 << 16) | ViewCompat.MEASURED_STATE_MASK) | (i6 << 8)) | (bArr[i5] & MotionEventCompat.ACTION_MASK);
                i2 = i3;
            }
        }
        return iArr;
    }

    protected void readContents() {
        int i = STATUS_OK;
        while (i == 0 && !err()) {
            switch (read()) {
                case R.styleable.Theme_actionModeCopyDrawable /*33*/:
                    switch (read()) {
                        case STATUS_FORMAT_ERROR /*1*/:
                            skip();
                            break;
                        case 249:
                            readGraphicControlExt();
                            break;
                        case 254:
                            skip();
                            break;
                        case MotionEventCompat.ACTION_MASK /*255*/:
                            readBlock();
                            String str = "";
                            for (int i2 = STATUS_OK; i2 < 11; i2 += STATUS_FORMAT_ERROR) {
                                str = str + ((char) this.block[i2]);
                            }
                            if (!str.equals("NETSCAPE2.0")) {
                                skip();
                                break;
                            } else {
                                readNetscapeExt();
                                break;
                            }
                        default:
                            skip();
                            break;
                    }
                case R.styleable.Theme_listDividerAlertDialog /*44*/:
                    readBitmap();
                    break;
                case R.styleable.Theme_toolbarNavigationButtonStyle /*59*/:
                    i = STATUS_FORMAT_ERROR;
                    break;
                default:
                    this.status = STATUS_FORMAT_ERROR;
                    break;
            }
        }
    }

    protected void readGraphicControlExt() {
        boolean z = true;
        read();
        int read = read();
        this.dispose = (read & 28) >> STATUS_OPEN_ERROR;
        if (this.dispose == 0) {
            this.dispose = STATUS_FORMAT_ERROR;
        }
        if ((read & STATUS_FORMAT_ERROR) == 0) {
            z = false;
        }
        this.transparency = z;
        this.delay = readShort() * 10;
        this.transIndex = read();
        read();
    }

    protected void readHeader() {
        String str = "";
        for (int i = STATUS_OK; i < 6; i += STATUS_FORMAT_ERROR) {
            str = str + ((char) read());
        }
        if (str.startsWith("GIF")) {
            readLSD();
            if (this.gctFlag && !err()) {
                this.gct = readColorTable(this.gctSize);
                this.bgColor = this.gct[this.bgIndex];
                return;
            }
            return;
        }
        this.status = STATUS_FORMAT_ERROR;
    }

    protected void readLSD() {
        this.width = readShort();
        this.height = readShort();
        int read = read();
        this.gctFlag = (read & AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS) != 0;
        this.gctSize = STATUS_OPEN_ERROR << (read & 7);
        this.bgIndex = read();
        this.pixelAspect = read();
    }

    protected void readNetscapeExt() {
        do {
            readBlock();
            if (this.block[STATUS_OK] == (byte) 1) {
                this.loopCount = (this.block[STATUS_FORMAT_ERROR] & MotionEventCompat.ACTION_MASK) | ((this.block[STATUS_OPEN_ERROR] & MotionEventCompat.ACTION_MASK) << 8);
            }
            if (this.blockSize <= 0) {
                return;
            }
        } while (!err());
    }

    protected int readShort() {
        return read() | (read() << 8);
    }

    protected void resetFrame() {
        this.lastDispose = this.dispose;
        this.lrx = this.ix;
        this.lry = this.iy;
        this.lrw = this.iw;
        this.lrh = this.ih;
        this.lastBitmap = this.image;
        this.lastBgColor = this.bgColor;
        this.dispose = STATUS_OK;
        this.transparency = false;
        this.delay = STATUS_OK;
        this.lct = null;
    }

    protected void setPixels() {
        int i;
        int i2;
        int i3;
        int i4;
        int i5 = STATUS_OK;
        int[] iArr = new int[(this.width * this.height)];
        if (this.lastDispose > 0) {
            if (this.lastDispose == 3) {
                i = this.frameCount - 2;
                if (i > 0) {
                    this.lastBitmap = getFrame(i - 1);
                } else {
                    this.lastBitmap = null;
                }
            }
            if (this.lastBitmap != null) {
                this.lastBitmap.getPixels(iArr, STATUS_OK, this.width, STATUS_OK, STATUS_OK, this.width, this.height);
                if (this.lastDispose == STATUS_OPEN_ERROR) {
                    i = !this.transparency ? this.lastBgColor : STATUS_OK;
                    for (i2 = STATUS_OK; i2 < this.lrh; i2 += STATUS_FORMAT_ERROR) {
                        i3 = ((this.lry + i2) * this.width) + this.lrx;
                        i4 = this.lrw + i3;
                        while (i3 < i4) {
                            iArr[i3] = i;
                            i3 += STATUS_FORMAT_ERROR;
                        }
                    }
                }
            }
        }
        i2 = 8;
        i3 = STATUS_FORMAT_ERROR;
        i = STATUS_OK;
        while (i5 < this.ih) {
            if (this.interlace) {
                if (i >= this.ih) {
                    i3 += STATUS_FORMAT_ERROR;
                    switch (i3) {
                        case STATUS_OPEN_ERROR /*2*/:
                            i = 4;
                            break;
                        case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                            i = STATUS_OPEN_ERROR;
                            i2 = 4;
                            break;
                        case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                            i = STATUS_FORMAT_ERROR;
                            i2 = STATUS_OPEN_ERROR;
                            break;
                    }
                }
                int i6 = i;
                i += i2;
                i4 = i6;
            } else {
                i4 = i5;
            }
            i4 += this.iy;
            if (i4 < this.height) {
                int i7 = this.width * i4;
                int i8 = i7 + this.ix;
                i4 = this.iw + i8;
                if (this.width + i7 < i4) {
                    i4 = this.width + i7;
                }
                i7 = this.iw * i5;
                int i9 = i8;
                while (i9 < i4) {
                    i8 = i7 + STATUS_FORMAT_ERROR;
                    i7 = this.act[this.pixels[i7] & MotionEventCompat.ACTION_MASK];
                    if (i7 != 0) {
                        iArr[i9] = i7;
                    }
                    i9 += STATUS_FORMAT_ERROR;
                    i7 = i8;
                }
            }
            i5 += STATUS_FORMAT_ERROR;
        }
        this.image = Bitmap.createBitmap(iArr, this.width, this.height, Config.ARGB_4444);
    }

    protected void skip() {
        do {
            readBlock();
            if (this.blockSize <= 0) {
                return;
            }
        } while (!err());
    }
}
