package com.catfiz.ui;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.util.AttributeSet;
import android.view.View;
import android.widget.LinearLayout.LayoutParams;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;

public class GifView extends View {
    public static final int DECODE_STATUS_DECODED = 2;
    public static final int DECODE_STATUS_DECODING = 1;
    public static final int DECODE_STATUS_UNDECODE = 0;
    public static final int IMAGE_TYPE_DYNAMIC = 2;
    public static final int IMAGE_TYPE_STATIC = 1;
    public static final int IMAGE_TYPE_UNKNOWN = 0;
    private Bitmap bitmap;
    public int decodeStatus = DECODE_STATUS_UNDECODE;
    private GifDecoder decoder;
    private String filePath;
    private int height;
    public int imageType = DECODE_STATUS_UNDECODE;
    private int index;
    private boolean playFlag = false;
    private int resId;
    private long time;
    private int width;

    public GifView(Context context) {
        super(context);
    }

    public GifView(Context context, AttributeSet attributeSet) {
        super(context, attributeSet);
    }

    private void decode() {
        release();
        this.index = DECODE_STATUS_UNDECODE;
        this.decodeStatus = IMAGE_TYPE_STATIC;
        new Thread() {
            public void run() {
                GifView.this.decoder = new GifDecoder();
                GifView.this.decoder.read(GifView.this.getInputStream());
                if (GifView.this.decoder.width == 0 || GifView.this.decoder.height == 0) {
                    GifView.this.imageType = GifView.IMAGE_TYPE_STATIC;
                } else {
                    GifView.this.imageType = GifView.IMAGE_TYPE_DYNAMIC;
                }
                GifView.this.postInvalidate();
                GifView.this.time = System.currentTimeMillis();
                GifView.this.decodeStatus = GifView.IMAGE_TYPE_DYNAMIC;
            }
        }.start();
    }

    private void decrementFrameIndex() {
        this.index--;
        if (this.index < 0) {
            this.index = this.decoder.getFrameCount() - 1;
        }
    }

    private InputStream getInputStream() {
        if (this.filePath != null) {
            try {
                return new FileInputStream(this.filePath);
            } catch (FileNotFoundException e) {
            }
        }
        return this.resId > 0 ? getContext().getResources().openRawResource(this.resId) : null;
    }

    private void incrementFrameIndex() {
        this.index += IMAGE_TYPE_STATIC;
        if (this.index >= this.decoder.getFrameCount()) {
            this.index = DECODE_STATUS_UNDECODE;
        }
    }

    public void nextFrame() {
        if (this.decodeStatus == IMAGE_TYPE_DYNAMIC) {
            incrementFrameIndex();
            invalidate();
        }
    }

    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if (this.decodeStatus == 0) {
            canvas.drawBitmap(this.bitmap, 0.0f, 0.0f, null);
            if (this.playFlag) {
                decode();
                invalidate();
            }
        } else if (this.decodeStatus == IMAGE_TYPE_STATIC) {
            canvas.drawBitmap(this.bitmap, 0.0f, 0.0f, null);
            invalidate();
        } else if (this.decodeStatus != IMAGE_TYPE_DYNAMIC) {
        } else {
            if (this.imageType == IMAGE_TYPE_STATIC) {
                canvas.drawBitmap(this.bitmap, 0.0f, 0.0f, null);
            } else if (this.imageType != IMAGE_TYPE_DYNAMIC) {
                canvas.drawBitmap(this.bitmap, 0.0f, 0.0f, null);
            } else if (this.playFlag) {
                if (this.time + ((long) this.decoder.getDelay(this.index)) < System.currentTimeMillis()) {
                    this.time += (long) this.decoder.getDelay(this.index);
                    incrementFrameIndex();
                }
                Bitmap frame = this.decoder.getFrame(this.index);
                if (frame != null) {
                    canvas.drawBitmap(frame, 0.0f, 0.0f, null);
                }
                invalidate();
            } else {
                canvas.drawBitmap(this.decoder.getFrame(this.index), 0.0f, 0.0f, null);
            }
        }
    }

    public void pause() {
        this.playFlag = false;
        invalidate();
    }

    public void play() {
        this.time = System.currentTimeMillis();
        this.playFlag = true;
        invalidate();
    }

    public void prevFrame() {
        if (this.decodeStatus == IMAGE_TYPE_DYNAMIC) {
            decrementFrameIndex();
            invalidate();
        }
    }

    public void release() {
        this.decoder = null;
    }

    public void setGif(int i) {
        setGif(i, BitmapFactory.decodeResource(getResources(), i));
    }

    public void setGif(int i, Bitmap bitmap) {
        this.filePath = null;
        this.resId = i;
        this.imageType = DECODE_STATUS_UNDECODE;
        this.decodeStatus = DECODE_STATUS_UNDECODE;
        this.playFlag = false;
        this.bitmap = bitmap;
        this.width = this.bitmap.getWidth();
        this.height = this.bitmap.getHeight();
        setLayoutParams(new LayoutParams(this.width, this.height));
    }

    public void setGif(String str) {
        setGif(str, BitmapFactory.decodeFile(str));
    }

    public void setGif(String str, Bitmap bitmap) {
        this.resId = DECODE_STATUS_UNDECODE;
        this.filePath = str;
        this.imageType = DECODE_STATUS_UNDECODE;
        this.decodeStatus = DECODE_STATUS_UNDECODE;
        this.playFlag = false;
        this.bitmap = bitmap;
        this.width = this.bitmap.getWidth();
        this.height = this.bitmap.getHeight();
        setLayoutParams(new LayoutParams(this.width, this.height));
    }

    public void stop() {
        this.playFlag = false;
        this.index = DECODE_STATUS_UNDECODE;
        invalidate();
    }
}
