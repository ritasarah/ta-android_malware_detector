package com.catfiz.backup;

import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Environment;
import android.support.v4.view.MotionEventCompat;
import android.telephony.TelephonyManager;
import android.widget.Toast;
import com.albus.util.AlbusModelObject;
import com.catfiz.R;
import com.catfiz.base.Constant;
import com.catfiz.crypto.SimpleCrypto;
import com.catfiz.intents.BroadcastIntents;
import com.catfiz.media.StorageDir;
import com.catfiz.objectcomment.ObjectCommentDataStorage;
import com.catfiz.pool.PoolDataStorage;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishService;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.service.PPFDownloadExecutor;
import com.catfiz.service.PinManager;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.svcpersistent.TaskDataStorage;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.Key;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class LocalBackup {
    private static final String TAG = "LocalBackup";

    class DoBackupCategoryInDBThread implements Runnable {
        private Context mContext;

        public DoBackupCategoryInDBThread(Context context, boolean z) {
            this.mContext = context;
        }

        public void run() {
            LocalBackup.this.backupCategoryContact(this.mContext, false);
        }
    }

    class DoBackupFriendInDBThread implements Runnable {
        private Context mContext;
        private boolean mNotify = true;

        public DoBackupFriendInDBThread(Context context, boolean z) {
            this.mContext = context;
            this.mNotify = z;
        }

        public void run() {
            LocalBackup.this.backupFriendlistContact(this.mContext, this.mNotify);
        }
    }

    class DoBackupInDBThread implements Runnable {
        private Context mContext;

        public DoBackupInDBThread(Context context) {
            this.mContext = context;
        }

        public void run() {
            LocalBackup.this.backupFriendlistContact(this.mContext, true);
            if (LocalBackup.this.backupPoolTopic(this.mContext, false)) {
                CatfishService.signalToast(this.mContext.getString(R.string.poollocalBackupSuccess));
            }
            LocalBackup.this.backupCategoryContact(this.mContext, true);
        }
    }

    class DoBackupPoolInDBThread implements Runnable {
        private final Context mContext;

        public DoBackupPoolInDBThread(Context context) {
            this.mContext = context;
        }

        public void run() {
            LocalBackup.this.backupPoolTopic(this.mContext, false);
        }
    }

    class DoRestoreInDBThread implements Runnable {
        private Context mContext;
        private FriendListDataStorage mDataStorage;
        boolean withoutfriendlist = false;

        public DoRestoreInDBThread(Context context) {
            this.mContext = context;
        }

        public DoRestoreInDBThread(Context context, boolean z) {
            this.mContext = context;
            this.withoutfriendlist = z;
        }

        private void localbackupfinish() {
        }

        private void restoreContactCategory(Context context) {
            String str = "albcategory-" + LocalBackup.this.getDeviceID(context) + ".backup";
            File file = new File(StorageDir.getMediaDir(6));
            if (!file.exists()) {
                file.mkdirs();
            }
            File file2 = new File(file, str);
            if (!file2.exists()) {
                file2 = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), str);
                if (!file2.exists()) {
                    return;
                }
            }
            StringBuilder stringBuilder = new StringBuilder();
            byte[] bArr = new byte[Utils.IO_BUFFER_SIZE];
            try {
                int read;
                GZIPInputStream gZIPInputStream = new GZIPInputStream(new FileInputStream(file2));
                while (true) {
                    read = gZIPInputStream.read(bArr, 0, Utils.IO_BUFFER_SIZE);
                    if (read <= 0) {
                        break;
                    }
                    stringBuilder.append(new String(bArr, 0, read));
                }
                gZIPInputStream.close();
                try {
                    String decrypt = SimpleCrypto.decrypt(LocalBackup.this.getHmacKey(LocalBackup.this.getDeviceID(context)), stringBuilder.toString());
                    if (decrypt == null) {
                        Toast.makeText(context, context.getString(R.string.restore_failed), 1).show();
                    }
                    JSONObject jSONObject = new JSONObject(decrypt);
                    SQLiteDatabase db = new FriendListDataStorage(context).getDB();
                    JSONArray jSONArray = jSONObject.getJSONArray("contaactname");
                    int length = jSONArray.length();
                    db.beginTransaction();
                    try {
                        int i;
                        db.delete(FriendListDataStorage.GROUP_CONTACT_TABEL_NAME, null, null);
                        for (i = 0; i < length; i++) {
                            JSONObject jSONObject2 = jSONArray.getJSONObject(i);
                            ContentValues contentValues = new ContentValues();
                            if (jSONObject2.has(FriendListDataStorage.GROUPCONTACTNAME)) {
                                contentValues.put(FriendListDataStorage.GROUPCONTACTNAME, jSONObject2.getString(FriendListDataStorage.GROUPCONTACTNAME));
                            }
                            if (jSONObject2.has(FriendListDataStorage.GROUPFRIENDCOUNT)) {
                                contentValues.put(FriendListDataStorage.GROUPFRIENDCOUNT, jSONObject2.getString(FriendListDataStorage.GROUPFRIENDCOUNT));
                            }
                            Log.d(LocalBackup.TAG, "--- INSERT GROUP_CONTACT_TABEL_NAME ---");
                            db.insert(FriendListDataStorage.GROUP_CONTACT_TABEL_NAME, null, contentValues);
                        }
                        JSONArray jSONArray2 = jSONObject.getJSONArray("memberlist");
                        read = jSONArray2.length();
                        db.delete(FriendListDataStorage.GROUP_CHILD_CONTACT_TABEL_NAME, null, null);
                        for (i = 0; i < read; i++) {
                            JSONObject jSONObject3 = jSONArray2.getJSONObject(i);
                            ContentValues contentValues2 = new ContentValues();
                            if (jSONObject3.has(FriendListDataStorage.GROUPCONTACTID)) {
                                contentValues2.put(FriendListDataStorage.GROUPCONTACTID, jSONObject3.getString(FriendListDataStorage.GROUPCONTACTID));
                            }
                            if (jSONObject3.has(FriendListDataStorage.FRIENDPIN)) {
                                contentValues2.put(FriendListDataStorage.FRIENDPIN, jSONObject3.getString(FriendListDataStorage.FRIENDPIN));
                            }
                            if (jSONObject3.has(FriendListDataStorage.FRIENDNAME)) {
                                contentValues2.put(FriendListDataStorage.FRIENDNAME, jSONObject3.getString(FriendListDataStorage.FRIENDNAME));
                            }
                            Log.d(LocalBackup.TAG, "--- INSERT GROUP_CHILD_CONTACT_TABEL_NAME ---");
                            db.insert(FriendListDataStorage.GROUP_CHILD_CONTACT_TABEL_NAME, null, contentValues2);
                        }
                        db.setTransactionSuccessful();
                    } catch (Exception e) {
                        e.printStackTrace();
                    } finally {
                        db.endTransaction();
                    }
                } catch (Exception e2) {
                    Log.e(LocalBackup.TAG, "Error: " + e2.toString());
                }
            } catch (IOException e3) {
                Log.e(LocalBackup.TAG, "Error: " + e3.toString());
            }
        }

        private void restorePoolTopic(Context context) {
            String str = "albpool-" + LocalBackup.this.getDeviceID(context) + ".backup";
            File file = new File(StorageDir.getMediaDir(6));
            if (!file.exists()) {
                file.mkdirs();
            }
            File file2 = new File(file, str);
            if (!file2.exists()) {
                file2 = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), str);
                if (!file2.exists()) {
                    return;
                }
            }
            StringBuilder stringBuilder = new StringBuilder();
            byte[] bArr = new byte[Utils.IO_BUFFER_SIZE];
            try {
                GZIPInputStream gZIPInputStream = new GZIPInputStream(new FileInputStream(file2));
                while (true) {
                    int read = gZIPInputStream.read(bArr, 0, Utils.IO_BUFFER_SIZE);
                    if (read <= 0) {
                        break;
                    }
                    stringBuilder.append(new String(bArr, 0, read));
                }
                gZIPInputStream.close();
                try {
                    String decrypt = SimpleCrypto.decrypt(LocalBackup.this.getHmacKey(LocalBackup.this.getDeviceID(context)), stringBuilder.toString());
                    if (decrypt == null) {
                        Toast.makeText(context, context.getString(R.string.restore_failed), 1).show();
                    }
                    JSONObject jSONObject = new JSONObject(decrypt);
                    PoolDataStorage poolDataStorage = new PoolDataStorage(context);
                    SQLiteDatabase db = poolDataStorage.getDB();
                    JSONArray jSONArray = jSONObject.getJSONArray("topiclist");
                    int length = jSONArray.length();
                    db.beginTransaction();
                    int i = 0;
                    while (i < length) {
                        try {
                            JSONObject jSONObject2 = jSONArray.getJSONObject(i);
                            if (!poolDataStorage.isTopicExists(jSONObject2.getString(PoolDataStorage.TOPIC_KEY))) {
                                ContentValues contentValues = new ContentValues();
                                if (jSONObject2.has(TaskDataStorage.SENDERPIN)) {
                                    contentValues.put(TaskDataStorage.SENDERPIN, jSONObject2.getString(TaskDataStorage.SENDERPIN));
                                }
                                if (jSONObject2.has(PoolDataStorage.HAVEUNREADITEM)) {
                                    contentValues.put(PoolDataStorage.HAVEUNREADITEM, jSONObject2.getString(PoolDataStorage.HAVEUNREADITEM));
                                }
                                if (jSONObject2.has(ServerMessageDataStorage.SENDERNAME)) {
                                    contentValues.put(ServerMessageDataStorage.SENDERNAME, jSONObject2.getString(ServerMessageDataStorage.SENDERNAME));
                                }
                                if (jSONObject2.has(TaskDataStorage.TIMESTAMP)) {
                                    contentValues.put(TaskDataStorage.TIMESTAMP, Long.valueOf(jSONObject2.getLong(TaskDataStorage.TIMESTAMP)));
                                }
                                if (jSONObject2.has(PoolDataStorage.TOPIC_KEY)) {
                                    contentValues.put(PoolDataStorage.TOPIC_KEY, jSONObject2.getString(PoolDataStorage.TOPIC_KEY));
                                }
                                if (jSONObject2.has(PoolDataStorage.TOPICTYPE)) {
                                    contentValues.put(PoolDataStorage.TOPICTYPE, jSONObject2.getString(PoolDataStorage.TOPICTYPE));
                                }
                                if (jSONObject2.has(ServerMessageDataStorage.MESSAGE)) {
                                    contentValues.put(ServerMessageDataStorage.MESSAGE, jSONObject2.getString(ServerMessageDataStorage.MESSAGE));
                                }
                                if (jSONObject2.has(ServerMessageDataStorage.DELIVERYSTATUS)) {
                                    contentValues.put(ServerMessageDataStorage.DELIVERYSTATUS, jSONObject2.getString(ServerMessageDataStorage.DELIVERYSTATUS));
                                }
                                if (jSONObject2.has(ServerMessageDataStorage.SEQUENCE)) {
                                    contentValues.put(ServerMessageDataStorage.SEQUENCE, Long.valueOf(jSONObject2.getLong(ServerMessageDataStorage.SEQUENCE)));
                                }
                                if (jSONObject2.has(ServerMessageDataStorage.IMAGETHUMB_URI)) {
                                    contentValues.put(ServerMessageDataStorage.IMAGETHUMB_URI, jSONObject2.getString(ServerMessageDataStorage.IMAGETHUMB_URI));
                                }
                                if (jSONObject2.has(ServerMessageDataStorage.IMAGEPATH)) {
                                    contentValues.put(ServerMessageDataStorage.IMAGEPATH, jSONObject2.getString(ServerMessageDataStorage.IMAGEPATH));
                                }
                                if (jSONObject2.has(CatfishService.RDCOUNTER_PREF)) {
                                    contentValues.put(CatfishService.RDCOUNTER_PREF, jSONObject2.getString(CatfishService.RDCOUNTER_PREF));
                                }
                                if (jSONObject2.has(ServerMessageDataStorage.VOICEFILEPATH)) {
                                    contentValues.put(ServerMessageDataStorage.VOICEFILEPATH, jSONObject2.getString(ServerMessageDataStorage.VOICEFILEPATH));
                                }
                                if (jSONObject2.has(ServerMessageDataStorage.DATAFILEPATH)) {
                                    contentValues.put(ServerMessageDataStorage.DATAFILEPATH, jSONObject2.getString(ServerMessageDataStorage.DATAFILEPATH));
                                }
                                if (jSONObject2.has(PoolDataStorage.TITLE)) {
                                    contentValues.put(PoolDataStorage.TITLE, jSONObject2.getString(PoolDataStorage.TITLE));
                                }
                                if (jSONObject2.has(PoolDataStorage.DISCUSSCOUNT)) {
                                    contentValues.put(PoolDataStorage.DISCUSSCOUNT, Integer.valueOf(jSONObject2.getInt(PoolDataStorage.DISCUSSCOUNT)));
                                }
                                if (jSONObject2.has(PoolDataStorage.MEMBERCOUNT)) {
                                    contentValues.put(PoolDataStorage.MEMBERCOUNT, Integer.valueOf(jSONObject2.getInt(PoolDataStorage.MEMBERCOUNT)));
                                }
                                if (jSONObject2.has(FriendListDataStorage.LASTACTIVITY)) {
                                    contentValues.put(FriendListDataStorage.LASTACTIVITY, Long.valueOf(jSONObject2.getLong(FriendListDataStorage.LASTACTIVITY)));
                                }
                                if (jSONObject2.has(PoolDataStorage.INVITORPIN)) {
                                    contentValues.put(PoolDataStorage.INVITORPIN, jSONObject2.getString(PoolDataStorage.INVITORPIN));
                                }
                                if (jSONObject2.has(PoolDataStorage.INVITORNAME)) {
                                    contentValues.put(PoolDataStorage.INVITORNAME, jSONObject2.getString(PoolDataStorage.INVITORNAME));
                                }
                                if (jSONObject2.has(PoolDataStorage.LIKECOUNT)) {
                                    contentValues.put(PoolDataStorage.LIKECOUNT, Integer.valueOf(jSONObject2.getInt(PoolDataStorage.LIKECOUNT)));
                                }
                                if (jSONObject2.has(PoolDataStorage.AREULIKE)) {
                                    contentValues.put(PoolDataStorage.AREULIKE, jSONObject2.getString(PoolDataStorage.AREULIKE));
                                }
                                Log.d(LocalBackup.TAG, "--- INSERT POOL TOPIC ---");
                                db.insert(PoolDataStorage.TOPIC_TABLE_NAME, null, contentValues);
                            }
                            i++;
                        } catch (Exception e) {
                            e.printStackTrace();
                            return;
                        } finally {
                            db.endTransaction();
                        }
                    }
                    if (jSONObject.has("memberlist")) {
                        JSONArray jSONArray2 = jSONObject.getJSONArray("memberlist");
                        int length2 = jSONArray2.length();
                        for (i = 0; i < length2; i++) {
                            JSONObject jSONObject3 = jSONArray2.getJSONObject(i);
                            String string = jSONObject3.getString(PoolDataStorage.TOPIC_KEY);
                            if (!poolDataStorage.isMemberExist(string, jSONObject3.getString(FriendListDataStorage.FRIENDPIN))) {
                                ContentValues contentValues2 = new ContentValues();
                                if (jSONObject3.has(FriendListDataStorage.FRIENDPIN)) {
                                    contentValues2.put(FriendListDataStorage.FRIENDPIN, jSONObject3.getString(FriendListDataStorage.FRIENDPIN));
                                }
                                if (jSONObject3.has(FriendListDataStorage.FRIENDNAME)) {
                                    contentValues2.put(FriendListDataStorage.FRIENDNAME, jSONObject3.getString(FriendListDataStorage.FRIENDNAME));
                                }
                                if (jSONObject3.has(PoolDataStorage.TOPIC_KEY)) {
                                    contentValues2.put(PoolDataStorage.TOPIC_KEY, jSONObject3.getString(PoolDataStorage.TOPIC_KEY));
                                }
                                if (jSONObject3.has(FriendListDataStorage.FRIENDALIAS)) {
                                    contentValues2.put(FriendListDataStorage.FRIENDALIAS, jSONObject3.getString(FriendListDataStorage.FRIENDALIAS));
                                }
                                if (jSONObject3.has(FriendListDataStorage.USEALIAS)) {
                                    contentValues2.put(FriendListDataStorage.USEALIAS, jSONObject3.getString(FriendListDataStorage.USEALIAS));
                                }
                                if (jSONObject3.has(FriendListDataStorage.STATUS)) {
                                    contentValues2.put(FriendListDataStorage.STATUS, jSONObject3.getString(FriendListDataStorage.STATUS));
                                }
                                if (jSONObject3.has(FriendListDataStorage.STATUSSEQ)) {
                                    contentValues2.put(FriendListDataStorage.STATUSSEQ, Long.valueOf(jSONObject3.getLong(FriendListDataStorage.STATUSSEQ)));
                                }
                                if (jSONObject3.has(FriendListDataStorage.PHOTOAVAILABLE)) {
                                    contentValues2.put(FriendListDataStorage.PHOTOAVAILABLE, jSONObject3.getString(FriendListDataStorage.PHOTOAVAILABLE));
                                }
                                if (jSONObject3.has(FriendListDataStorage.LASTACTIVITY)) {
                                    contentValues2.put(FriendListDataStorage.LASTACTIVITY, jSONObject3.getString(FriendListDataStorage.LASTACTIVITY));
                                }
                                if (jSONObject3.has(FriendListDataStorage.PHOTOFILENAME)) {
                                    contentValues2.put(FriendListDataStorage.PHOTOFILENAME, jSONObject3.getString(FriendListDataStorage.PHOTOFILENAME));
                                }
                                Log.d(LocalBackup.TAG, "--- INSERT POOL MEMBERLIST ---");
                                db.insert(PoolDataStorage.FRIENDLIST_TABLE_NAME, null, contentValues2);
                                poolDataStorage.setMemberCountToTopic(string);
                            }
                        }
                    }
                    db.setTransactionSuccessful();
                    db.endTransaction();
                } catch (Exception e2) {
                    Log.e(LocalBackup.TAG, "Error: " + e2.toString());
                }
            } catch (IOException e3) {
                Log.e(LocalBackup.TAG, "Error: " + e3.toString());
            }
        }

        public void run() {
            CatfishService.getCatfishPreferences();
            if (this.withoutfriendlist) {
                restorePoolTopic(this.mContext);
                restoreContactCategory(this.mContext);
                Log.d(LocalBackup.TAG, "-- LOCAL BACKUP POOL AND CATEGORY ONLY --");
                PinManager.isRestoringFriendlist = false;
                ((CatfishService) this.mContext).signalDeviceIdNPinRegistered(false);
                return;
            }
            Log.d(LocalBackup.TAG, "-- LOCAL BACKUP ALL --");
            String str = "alb-" + LocalBackup.this.getDeviceID(this.mContext) + ".backup";
            File file = new File(StorageDir.getMediaDir(6));
            if (!file.exists()) {
                file.mkdirs();
            }
            File file2 = new File(file, str);
            if (!file2.exists()) {
                file2 = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), str);
                if (!file2.exists()) {
                    localbackupfinish();
                    return;
                }
            }
            StringBuilder stringBuilder = new StringBuilder();
            byte[] bArr = new byte[Utils.IO_BUFFER_SIZE];
            try {
                GZIPInputStream gZIPInputStream = new GZIPInputStream(new FileInputStream(file2));
                while (true) {
                    int read = gZIPInputStream.read(bArr, 0, Utils.IO_BUFFER_SIZE);
                    if (read <= 0) {
                        break;
                    }
                    stringBuilder.append(new String(bArr, 0, read));
                }
                gZIPInputStream.close();
                try {
                    CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
                    String decrypt = SimpleCrypto.decrypt(LocalBackup.this.getHmacKey(LocalBackup.this.getDeviceID(this.mContext)), stringBuilder.toString());
                    if (decrypt == null) {
                        Toast.makeText(this.mContext, this.mContext.getString(R.string.restore_failed), 1).show();
                    }
                    JSONObject jSONObject = new JSONObject(decrypt);
                    CatfishService serviceInstance = CatfishService.getServiceInstance();
                    Intent intent = new Intent(BroadcastIntents.ACTION_RESTORE_USERPROFILE);
                    JSONObject jSONObject2 = jSONObject.getJSONObject(FriendListDataStorage.USERPROFILE);
                    if (jSONObject2.has("pin")) {
                        Log.d(LocalBackup.TAG, "pin             : " + jSONObject2.getString("pin"));
                        catfishPreferences.edit().putString(FriendListDataStorage.USERPIN, jSONObject2.getString("pin")).commit();
                    }
                    if (jSONObject2.has("fifidsec")) {
                        Log.d(LocalBackup.TAG, "fifidsec           : " + jSONObject2.getBoolean("fifidsec"));
                        catfishPreferences.edit().putBoolean(CatfishService.CATFISHID_SEC_PREF, jSONObject2.getBoolean("fifidsec")).commit();
                    }
                    if (jSONObject2.has("fifid")) {
                        Log.d(LocalBackup.TAG, "fifid            : " + jSONObject2.getString("fifid"));
                        catfishPreferences.edit().putString(CatfishService.CATFISHID_PREF, jSONObject2.getString("fifid")).commit();
                        serviceInstance.reUpdateUserPIN();
                        str = CatfishService.getUserPIN();
                    } else {
                        str = null;
                    }
                    if (jSONObject2.has(CatfishDataStorage.NIC_NAME)) {
                        Log.d(LocalBackup.TAG, "name            : " + jSONObject2.getString(CatfishDataStorage.NIC_NAME));
                        catfishPreferences.edit().putString(CatfishService.USERNAME_PREF, jSONObject2.getString(CatfishDataStorage.NIC_NAME)).commit();
                        intent.putExtra(CatfishService.USERNAME_PREF, jSONObject2.getString(CatfishDataStorage.NIC_NAME));
                    }
                    if (jSONObject2.has(FriendListDataStorage.STATUS)) {
                        Log.d(LocalBackup.TAG, "status          : " + jSONObject2.getString(FriendListDataStorage.STATUS));
                        catfishPreferences.edit().putString(CatfishService.USERSTATUS_PREF, jSONObject2.getString(FriendListDataStorage.STATUS)).commit();
                        intent.putExtra(CatfishService.USERSTATUS_PREF, jSONObject2.getString(FriendListDataStorage.STATUS));
                    }
                    if (jSONObject2.has(FriendListDataStorage.STATUSSEQ)) {
                        Log.d(LocalBackup.TAG, "statusseq       : " + String.valueOf(jSONObject2.getLong(FriendListDataStorage.STATUSSEQ)));
                        catfishPreferences.edit().putLong(CatfishService.USERSTATUS_SEQ_PREF, jSONObject2.getLong(FriendListDataStorage.STATUSSEQ)).commit();
                    }
                    if (jSONObject2.has("flisttimestamp")) {
                        Log.d(LocalBackup.TAG, "flisttimestamp  : " + String.valueOf(jSONObject2.getLong("flisttimestamp")));
                        catfishPreferences.edit().putLong(CatfishService.FRIENDLIST_TIMESTAMP, jSONObject2.getLong("flisttimestamp")).commit();
                    }
                    if (jSONObject2.has("hasstatuscomment")) {
                        Log.d(LocalBackup.TAG, "hasstatuscomment: " + String.valueOf(jSONObject2.getBoolean("hasstatuscomment")));
                        catfishPreferences.edit().putBoolean(CatfishService.HASSTATUSCOMMENT_PREF, jSONObject2.getBoolean("hasstatuscomment")).commit();
                    }
                    if (jSONObject2.has("longpin")) {
                        Log.d(LocalBackup.TAG, "longpin: " + String.valueOf(jSONObject2.getString("longpin")));
                        catfishPreferences.edit().putString(CatfishService.CATFISHLONGPIN_PREF, jSONObject2.getString("longpin")).commit();
                    }
                    if (jSONObject2.has(CatfishRESTAPI.CFCOMPACT_USERKEY)) {
                        Log.d(LocalBackup.TAG, "userkey: " + String.valueOf(jSONObject2.getString(CatfishRESTAPI.CFCOMPACT_USERKEY)));
                        catfishPreferences.edit().putString(CatfishService.CATFISHID_USER_KEY, jSONObject2.getString(CatfishRESTAPI.CFCOMPACT_USERKEY)).commit();
                    }
                    this.mContext.sendBroadcast(intent);
                    serviceInstance.postRunnableToService(new PPFDownloadExecutor(serviceInstance, CatfishService.getServerHost(), str, str), 2);
                    this.mDataStorage = new FriendListDataStorage(this.mContext);
                    SQLiteDatabase db = this.mDataStorage.getDB();
                    JSONArray jSONArray = jSONObject.getJSONArray(FriendListDataStorage.FRIENDLIST_TABLE_NAME);
                    int length = jSONArray.length();
                    for (int i = 0; i < length; i++) {
                        JSONObject jSONObject3 = jSONArray.getJSONObject(i);
                        if (jSONObject3.has("pin") && jSONObject3.has(CatfishDataStorage.NIC_NAME)) {
                            String string = jSONObject3.getString("pin");
                            String string2 = jSONObject3.getString(CatfishDataStorage.NIC_NAME);
                            if (this.mDataStorage.isPinAFriend(string)) {
                                Log.d(LocalBackup.TAG, "(EXISTS) PIN: " + string + ", NAME: " + string2);
                            } else {
                                ContentValues contentValues = new ContentValues();
                                contentValues.put(FriendListDataStorage.FRIENDPIN, string);
                                contentValues.put(FriendListDataStorage.FRIENDNAME, string2);
                                if (jSONObject3.has(AlbusModelObject.ALIAS)) {
                                    contentValues.put(FriendListDataStorage.FRIENDALIAS, jSONObject3.getString(AlbusModelObject.ALIAS));
                                }
                                if (jSONObject3.has(FriendListDataStorage.USEALIAS)) {
                                    contentValues.put(FriendListDataStorage.USEALIAS, Integer.valueOf(jSONObject3.getInt(FriendListDataStorage.USEALIAS)));
                                }
                                if (jSONObject3.has(FriendListDataStorage.STATUS)) {
                                    contentValues.put(FriendListDataStorage.STATUS, jSONObject3.getString(FriendListDataStorage.STATUS));
                                }
                                if (jSONObject3.has(FriendListDataStorage.STATUSSEQ)) {
                                    contentValues.put(FriendListDataStorage.STATUSSEQ, Long.valueOf(jSONObject3.getLong(FriendListDataStorage.STATUSSEQ)));
                                }
                                if (jSONObject3.has("photoavail")) {
                                    contentValues.put(FriendListDataStorage.PHOTOAVAILABLE, Integer.valueOf(jSONObject3.getInt("photoavail")));
                                }
                                if (jSONObject3.has("photoname")) {
                                    contentValues.put(FriendListDataStorage.PHOTOFILENAME, jSONObject3.getString("photoname"));
                                }
                                if (jSONObject3.has(ObjectCommentDataStorage.UNREAD)) {
                                    contentValues.put(FriendListDataStorage.HAVEUNREAD, Integer.valueOf(jSONObject3.getInt(ObjectCommentDataStorage.UNREAD)));
                                }
                                if (jSONObject3.has("unreadsc")) {
                                    contentValues.put(FriendListDataStorage.HAVEUNREADSTATCOMM, Integer.valueOf(jSONObject3.getInt("unreadsc")));
                                }
                                if (jSONObject3.has("lastact")) {
                                    contentValues.put(FriendListDataStorage.LASTACTIVITY, Integer.valueOf(jSONObject3.getInt("lastact")));
                                }
                                Log.d(LocalBackup.TAG, "INSERT PIN: " + string + ", NAME: " + string2);
                                db.insert(FriendListDataStorage.FRIENDLIST_TABLE_NAME, null, contentValues);
                                if (str != null) {
                                    serviceInstance.postRunnableToService(new PPFDownloadExecutor(serviceInstance, CatfishService.getServerHost(), str, string), 2);
                                }
                            }
                        }
                    }
                    if (catfishPreferences.contains(CatfishService.ISNEWUSERPENDING)) {
                        catfishPreferences.edit().remove(CatfishService.ISNEWUSERPENDING).commit();
                    }
                    if (catfishPreferences.contains(CatfishService.ISRESTOREPENDING)) {
                        catfishPreferences.edit().remove(CatfishService.ISRESTOREPENDING).commit();
                    }
                    restorePoolTopic(this.mContext);
                    restoreContactCategory(this.mContext);
                    PinManager.isRestoringFriendlist = false;
                    CatfishService.getCatfishPreferences();
                    localbackupfinish();
                } catch (Exception e) {
                    Log.e(LocalBackup.TAG, "Error: " + e.toString());
                    localbackupfinish();
                }
            } catch (IOException e2) {
                Log.e(LocalBackup.TAG, "Error: " + e2.toString());
                localbackupfinish();
            }
        }
    }

    private void backupCategoryContact(Context context, boolean z) {
        SQLiteDatabase db = new FriendListDataStorage(context).getDB();
        Cursor query = db.query(FriendListDataStorage.GROUP_CONTACT_TABEL_NAME, null, null, null, null, null, null);
        Cursor query2 = db.query(FriendListDataStorage.GROUP_CHILD_CONTACT_TABEL_NAME, null, null, null, null, null, null);
        int count = query.getCount();
        query.moveToFirst();
        int columnIndex = query.getColumnIndex(FriendListDataStorage.GROUPCONTACTNAME);
        int columnIndex2 = query.getColumnIndex(FriendListDataStorage.GROUPFRIENDCOUNT);
        query2.moveToFirst();
        int columnIndex3 = query2.getColumnIndex(FriendListDataStorage.GROUPCONTACTID);
        int columnIndex4 = query2.getColumnIndex(FriendListDataStorage.FRIENDPIN);
        int columnIndex5 = query2.getColumnIndex(FriendListDataStorage.FRIENDNAME);
        String str = "albcategory-" + getDeviceID(context) + ".backup";
        File file = new File(StorageDir.getMediaDir(6));
        if (!file.exists()) {
            file.mkdirs();
        }
        File file2 = new File(file, str);
        try {
            GZIPOutputStream gZIPOutputStream = new GZIPOutputStream(new FileOutputStream(file2));
            StringBuilder stringBuilder = new StringBuilder();
            JSONObject jSONObject = new JSONObject();
            JSONArray jSONArray = new JSONArray();
            int i = 0;
            while (i < count) {
                query.moveToPosition(i);
                try {
                    JSONObject jSONObject2 = new JSONObject();
                    jSONObject2.put(FriendListDataStorage.GROUPCONTACTNAME, query.getString(columnIndex));
                    jSONObject2.put(FriendListDataStorage.GROUPFRIENDCOUNT, query.getInt(columnIndex2));
                    jSONArray.put(jSONObject2);
                    i++;
                } catch (JSONException e) {
                    Log.e(TAG, "Error: " + e.toString());
                    closeCategoryCursor(query, query2);
                }
            }
            try {
                jSONObject.put("contaactname", jSONArray);
            } catch (JSONException e2) {
                Log.e(TAG, "Error: " + e2.toString());
                CatfishService.signalToast(context.getString(R.string.categorylocalBackupFailed));
                closeCategoryCursor(query, query2);
            }
            JSONArray jSONArray2 = new JSONArray();
            columnIndex = query2.getCount();
            i = 0;
            while (i < columnIndex) {
                query2.moveToPosition(i);
                try {
                    JSONObject jSONObject3 = new JSONObject();
                    jSONObject3.put(FriendListDataStorage.GROUPCONTACTID, query2.getString(columnIndex3));
                    jSONObject3.put(FriendListDataStorage.FRIENDPIN, query2.getString(columnIndex4));
                    jSONObject3.put(FriendListDataStorage.FRIENDNAME, query2.getString(columnIndex5));
                    jSONArray2.put(jSONObject3);
                    i++;
                } catch (JSONException e22) {
                    Log.e(TAG, "Error: " + e22.toString());
                    closeCategoryCursor(query, query2);
                }
            }
            try {
                jSONObject.put("memberlist", jSONArray2);
                stringBuilder.append(jSONObject.toString(1));
            } catch (JSONException e222) {
                Log.e(TAG, "Error: " + e222.toString());
                CatfishService.signalToast(context.getString(R.string.categorylocalBackupFailed));
                closeCategoryCursor(query, query2);
            }
            try {
                gZIPOutputStream.write(SimpleCrypto.encrypt(getHmacKey(getDeviceID(context)), stringBuilder.toString()).getBytes());
                gZIPOutputStream.close();
            } catch (IOException e3) {
                Log.e(TAG, "Error: " + e3.toString());
                file2.delete();
                CatfishService.signalToast(context.getString(R.string.categorylocalBackupFailed));
            } catch (Exception e4) {
                Log.e(TAG, "Error: " + e4.toString());
                file2.delete();
                CatfishService.signalToast(context.getString(R.string.categorylocalBackupFailed));
            } finally {
                closeCategoryCursor(query, query2);
            }
            if (z) {
                CatfishService.signalToast(context.getString(R.string.categorylocalBackupSuccess));
            }
        } catch (IOException e32) {
            Log.e(TAG, "Error: " + e32.toString());
            file2.delete();
            CatfishService.signalToast(context.getString(R.string.categorylocalBackupFailed));
            closeCategoryCursor(query, query2);
        }
    }

    private void backupFriendlistContact(Context context, boolean z) {
        Cursor query = new FriendListDataStorage(context).getDB().query(FriendListDataStorage.FRIENDLIST_TABLE_NAME, null, null, null, null, null, null);
        int count = query.getCount();
        query.moveToFirst();
        int columnIndex = query.getColumnIndex(FriendListDataStorage.FRIENDPIN);
        int columnIndex2 = query.getColumnIndex(FriendListDataStorage.FRIENDNAME);
        int columnIndex3 = query.getColumnIndex(FriendListDataStorage.FRIENDALIAS);
        int columnIndex4 = query.getColumnIndex(FriendListDataStorage.USEALIAS);
        int columnIndex5 = query.getColumnIndex(FriendListDataStorage.STATUS);
        int columnIndex6 = query.getColumnIndex(FriendListDataStorage.PHOTOAVAILABLE);
        int columnIndex7 = query.getColumnIndex(FriendListDataStorage.PHOTOFILENAME);
        int columnIndex8 = query.getColumnIndex(FriendListDataStorage.LASTACTIVITY);
        int columnIndex9 = query.getColumnIndex(FriendListDataStorage.HAVEUNREAD);
        int columnIndex10 = query.getColumnIndex(FriendListDataStorage.HAVEUNREADSTATCOMM);
        int columnIndex11 = query.getColumnIndex(FriendListDataStorage.STATUSSEQ);
        String str = "alb-" + getDeviceID(context) + ".backup";
        File file = new File(StorageDir.getMediaDir(6));
        if (!file.exists()) {
            file.mkdirs();
        }
        File file2 = new File(file, str);
        try {
            GZIPOutputStream gZIPOutputStream = new GZIPOutputStream(new FileOutputStream(file2));
            StringBuilder stringBuilder = new StringBuilder();
            JSONObject jSONObject = new JSONObject();
            JSONArray jSONArray = new JSONArray();
            CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
            try {
                JSONObject jSONObject2 = new JSONObject();
                jSONObject2.put("pin", catfishPreferences.getString(FriendListDataStorage.USERPIN, null));
                jSONObject2.put(CatfishDataStorage.NIC_NAME, catfishPreferences.getString(CatfishService.USERNAME_PREF, null));
                jSONObject2.put(FriendListDataStorage.STATUS, catfishPreferences.getString(CatfishService.USERSTATUS_PREF, null));
                jSONObject2.put(FriendListDataStorage.STATUSSEQ, catfishPreferences.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0));
                jSONObject2.put("fifid", catfishPreferences.getString(CatfishService.CATFISHID_PREF, null));
                jSONObject2.put("fifidsec", catfishPreferences.getBoolean(CatfishService.CATFISHID_SEC_PREF, false));
                jSONObject2.put("flisttimestamp", catfishPreferences.getLong(CatfishService.FRIENDLIST_TIMESTAMP, 0));
                jSONObject2.put("hasstatuscomment", catfishPreferences.getBoolean(CatfishService.HASSTATUSCOMMENT_PREF, false));
                jSONObject2.put("longpin", catfishPreferences.getString(CatfishService.CATFISHLONGPIN_PREF, null));
                jSONObject2.put(CatfishRESTAPI.CFCOMPACT_USERKEY, catfishPreferences.getString(CatfishService.CATFISHID_USER_KEY, null));
                jSONObject.put(FriendListDataStorage.USERPROFILE, jSONObject2);
                for (int i = 0; i < count; i++) {
                    query.moveToPosition(i);
                    if (query.getString(columnIndex) != null) {
                        try {
                            jSONObject2 = new JSONObject();
                            jSONObject2.put("pin", query.getString(columnIndex));
                            jSONObject2.put(CatfishDataStorage.NIC_NAME, query.getString(columnIndex2));
                            jSONObject2.put(AlbusModelObject.ALIAS, query.getString(columnIndex3));
                            jSONObject2.put(FriendListDataStorage.USEALIAS, query.getInt(columnIndex4));
                            jSONObject2.put(FriendListDataStorage.STATUS, query.getString(columnIndex5));
                            jSONObject2.put("photoavail", query.getInt(columnIndex6));
                            jSONObject2.put("photoname", query.getString(columnIndex7));
                            jSONObject2.put("lastact", query.getInt(columnIndex8));
                            jSONObject2.put(ObjectCommentDataStorage.UNREAD, query.getInt(columnIndex9));
                            jSONObject2.put("unreadsc", query.getInt(columnIndex10));
                            jSONObject2.put(FriendListDataStorage.STATUSSEQ, query.getLong(columnIndex11));
                            jSONArray.put(jSONObject2);
                        } catch (JSONException e) {
                            Log.e(TAG, "Error: " + e.toString());
                        }
                    }
                }
                try {
                    jSONObject.put(FriendListDataStorage.FRIENDLIST_TABLE_NAME, jSONArray);
                    stringBuilder.append(jSONObject.toString(1));
                } catch (JSONException e2) {
                    Log.e(TAG, "Error: " + e2.toString());
                    CatfishService.signalToast(context.getString(R.string.localBackupFailed));
                }
                try {
                    gZIPOutputStream.write(SimpleCrypto.encrypt(getHmacKey(getDeviceID(context)), stringBuilder.toString()).getBytes());
                    gZIPOutputStream.close();
                } catch (IOException e3) {
                    Log.e(TAG, "Error: " + e3.toString());
                    file2.delete();
                    CatfishService.signalToast(context.getString(R.string.localBackupFailed));
                } catch (Exception e4) {
                    Log.e(TAG, "Error: " + e4.toString());
                    file2.delete();
                    CatfishService.signalToast(context.getString(R.string.localBackupFailed));
                } finally {
                    query.close();
                }
                if (z) {
                    CatfishService.signalToast(context.getString(R.string.localBackupSuccess));
                }
            } catch (JSONException e22) {
                Log.e(TAG, "Error: " + e22.toString());
                CatfishService.signalToast(context.getString(R.string.localBackupFailed));
            }
        } catch (IOException e32) {
            Log.e(TAG, "Error: " + e32.toString());
            file2.delete();
            CatfishService.signalToast(context.getString(R.string.localBackupFailed));
        }
    }

    private boolean backupPoolTopic(android.content.Context r51, boolean r52) {
        /* JADX: method processing error */
/*
Error: jadx.core.utils.exceptions.JadxRuntimeException: Can't find immediate dominator for block B:98:? in {2, 12, 14, 16, 18, 20, 22, 24, 26, 32, 41, 49, 51, 63, 65, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 103} preds:[]
	at jadx.core.dex.visitors.blocksmaker.BlockProcessor.computeDominators(BlockProcessor.java:129)
	at jadx.core.dex.visitors.blocksmaker.BlockProcessor.processBlocksTree(BlockProcessor.java:48)
	at jadx.core.dex.visitors.blocksmaker.BlockProcessor.rerun(BlockProcessor.java:44)
	at jadx.core.dex.visitors.blocksmaker.BlockFinallyExtract.visit(BlockFinallyExtract.java:57)
	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:31)
	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:17)
	at jadx.core.ProcessClass.process(ProcessClass.java:37)
	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:59)
	at jadx.core.ProcessClass.process(ProcessClass.java:42)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:280)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler$1.run(JadxDecompiler.java:167)
*/
        /*
        r50 = this;
        r4 = new com.catfiz.pool.PoolDataStorage;
        r0 = r51;
        r4.<init>(r0);
        r4 = r4.getDB();
        r5 = "topic_list";
        r6 = 0;
        r7 = 0;
        r8 = 0;
        r9 = 0;
        r10 = 0;
        r11 = 0;
        r12 = r4.query(r5, r6, r7, r8, r9, r10, r11);
        r5 = "friend_list";
        r6 = 0;
        r7 = 0;
        r8 = 0;
        r9 = 0;
        r10 = 0;
        r11 = 0;
        r5 = r4.query(r5, r6, r7, r8, r9, r10, r11);
        r6 = r12.getCount();
        r12.moveToFirst();
        r4 = "senderpin";
        r7 = r12.getColumnIndex(r4);
        r4 = "hvunreaditem";
        r8 = r12.getColumnIndex(r4);
        r4 = "sendername";
        r9 = r12.getColumnIndex(r4);
        r4 = "timestamp";
        r10 = r12.getColumnIndex(r4);
        r4 = "topic_key";
        r11 = r12.getColumnIndex(r4);
        r4 = "sharetype";
        r13 = r12.getColumnIndex(r4);
        r4 = "message";
        r14 = r12.getColumnIndex(r4);
        r4 = "deliverystatus";
        r15 = r12.getColumnIndex(r4);
        r4 = "sequence";
        r16 = r12.getColumnIndex(r4);
        r4 = "imagethumburi";
        r17 = r12.getColumnIndex(r4);
        r4 = "imagepath";
        r18 = r12.getColumnIndex(r4);
        r4 = "rdcounter";
        r19 = r12.getColumnIndex(r4);
        r4 = "voicefilepath";
        r20 = r12.getColumnIndex(r4);
        r4 = "datafilepath";
        r21 = r12.getColumnIndex(r4);
        r4 = "title";
        r22 = r12.getColumnIndex(r4);
        r4 = "discusscount";
        r23 = r12.getColumnIndex(r4);
        r4 = "memberscount";
        r24 = r12.getColumnIndex(r4);
        r4 = "lastactivity";
        r25 = r12.getColumnIndex(r4);
        r4 = "invitorpin";
        r26 = r12.getColumnIndex(r4);
        r4 = "invitorname";
        r27 = r12.getColumnIndex(r4);
        r4 = "likecount";
        r28 = r12.getColumnIndex(r4);
        r4 = "areulike";
        r29 = r12.getColumnIndex(r4);
        r5.moveToFirst();
        r4 = "friendpin";
        r30 = r5.getColumnIndex(r4);
        r4 = "friendname";
        r31 = r5.getColumnIndex(r4);
        r4 = "topic_key";
        r32 = r5.getColumnIndex(r4);
        r4 = "friendalias";
        r33 = r5.getColumnIndex(r4);
        r4 = "usealias";
        r34 = r5.getColumnIndex(r4);
        r4 = "status";
        r35 = r5.getColumnIndex(r4);
        r4 = "statusseq";
        r36 = r5.getColumnIndex(r4);
        r4 = "photoavailable";
        r37 = r5.getColumnIndex(r4);
        r4 = "lastactivity";
        r38 = r5.getColumnIndex(r4);
        r4 = "photofilename";
        r39 = r5.getColumnIndex(r4);
        r4 = new java.lang.StringBuilder;
        r4.<init>();
        r40 = "albpool-";
        r0 = r40;
        r4 = r4.append(r0);
        r40 = r50.getDeviceID(r51);
        r0 = r40;
        r4 = r4.append(r0);
        r40 = ".backup";
        r0 = r40;
        r4 = r4.append(r0);
        r4 = r4.toString();
        r40 = new java.io.File;
        r41 = 6;
        r41 = com.catfiz.media.StorageDir.getMediaDir(r41);
        r40.<init>(r41);
        r41 = r40.exists();
        if (r41 != 0) goto L_0x0124;
    L_0x0121:
        r40.mkdirs();
    L_0x0124:
        r41 = new java.io.File;
        r0 = r41;
        r1 = r40;
        r0.<init>(r1, r4);
        r4 = new java.io.FileOutputStream;	 Catch:{ IOException -> 0x025e, Exception -> 0x0290 }
        r0 = r41;	 Catch:{ IOException -> 0x025e, Exception -> 0x0290 }
        r4.<init>(r0);	 Catch:{ IOException -> 0x025e, Exception -> 0x0290 }
        r40 = new java.util.zip.GZIPOutputStream;	 Catch:{ IOException -> 0x025e, Exception -> 0x0290 }
        r0 = r40;	 Catch:{ IOException -> 0x025e, Exception -> 0x0290 }
        r0.<init>(r4);	 Catch:{ IOException -> 0x025e, Exception -> 0x0290 }
        r42 = new java.lang.StringBuilder;
        r42.<init>();
        r43 = new org.json.JSONObject;
        r43.<init>();
        r44 = new org.json.JSONArray;
        r44.<init>();
        r4 = 0;
    L_0x014b:
        if (r4 >= r6) goto L_0x02ba;
    L_0x014d:
        r12.moveToPosition(r4);
        r45 = new org.json.JSONObject;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r45.<init>();	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r46 = "senderpin";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r47 = r12.getString(r7);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r45.put(r46, r47);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r46 = "hvunreaditem";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r47 = r12.getInt(r8);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r45.put(r46, r47);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r46 = "sendername";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r47 = r12.getString(r9);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r45.put(r46, r47);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r46 = "timestamp";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r48 = r12.getLong(r10);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r0 = r45;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r1 = r46;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r2 = r48;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r0.put(r1, r2);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r46 = "topic_key";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r47 = r12.getString(r11);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r45.put(r46, r47);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r46 = "sharetype";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r47 = r12.getInt(r13);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r45.put(r46, r47);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r46 = "message";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r47 = r12.getString(r14);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r45.put(r46, r47);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r46 = "deliverystatus";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r47 = r12.getInt(r15);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r45.put(r46, r47);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r46 = "sequence";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r0 = r16;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r48 = r12.getLong(r0);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r0 = r45;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r1 = r46;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r2 = r48;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r0.put(r1, r2);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r46 = "imagethumburi";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r0 = r17;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r47 = r12.getString(r0);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r45.put(r46, r47);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r46 = "imagepath";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r0 = r18;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r47 = r12.getString(r0);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r45.put(r46, r47);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r46 = "rdcounter";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r0 = r19;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r47 = r12.getInt(r0);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r45.put(r46, r47);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r46 = "voicefilepath";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r0 = r20;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r47 = r12.getString(r0);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r45.put(r46, r47);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r46 = "datafilepath";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r0 = r21;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r47 = r12.getString(r0);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r45.put(r46, r47);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r46 = "title";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r0 = r22;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r47 = r12.getString(r0);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r45.put(r46, r47);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        if (r23 < 0) goto L_0x0203;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
    L_0x01f8:
        r46 = "discusscount";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r0 = r23;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r47 = r12.getInt(r0);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r45.put(r46, r47);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
    L_0x0203:
        if (r24 < 0) goto L_0x0210;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
    L_0x0205:
        r46 = "memberscount";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r0 = r23;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r47 = r12.getInt(r0);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r45.put(r46, r47);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
    L_0x0210:
        if (r25 < 0) goto L_0x0223;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
    L_0x0212:
        r46 = "lastactivity";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r0 = r23;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r48 = r12.getLong(r0);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r0 = r45;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r1 = r46;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r2 = r48;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r0.put(r1, r2);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
    L_0x0223:
        if (r26 < 0) goto L_0x0230;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
    L_0x0225:
        r46 = "invitorpin";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r0 = r26;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r47 = r12.getString(r0);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r45.put(r46, r47);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
    L_0x0230:
        if (r27 < 0) goto L_0x023d;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
    L_0x0232:
        r46 = "invitorname";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r0 = r27;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r47 = r12.getString(r0);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r45.put(r46, r47);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
    L_0x023d:
        if (r28 < 0) goto L_0x024a;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
    L_0x023f:
        r46 = "likecount";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r0 = r28;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r47 = r12.getInt(r0);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r45.put(r46, r47);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
    L_0x024a:
        if (r29 < 0) goto L_0x0257;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
    L_0x024c:
        r46 = "areulike";	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r0 = r29;	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r47 = r12.getInt(r0);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
        r45.put(r46, r47);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
    L_0x0257:
        r44.put(r45);	 Catch:{ JSONException -> 0x0298, Exception -> 0x034d }
    L_0x025a:
        r4 = r4 + 1;
        goto L_0x014b;
    L_0x025e:
        r4 = move-exception;
        r6 = "LocalBackup";
        r7 = new java.lang.StringBuilder;
        r7.<init>();
        r8 = "Error: ";
        r7 = r7.append(r8);
        r4 = r4.toString();
        r4 = r7.append(r4);
        r4 = r4.toString();
        com.catfiz.util.Log.e(r6, r4);
        r41.delete();
        r4 = com.catfiz.R.string.poollocalBackupFailed;
        r0 = r51;
        r4 = r0.getString(r4);
        com.catfiz.service.CatfishService.signalToast(r4);
        r0 = r50;
        r0.closePoolCursor(r12, r5);
        r4 = 0;
    L_0x028f:
        return r4;
    L_0x0290:
        r4 = move-exception;
        r0 = r50;
        r0.closePoolCursor(r12, r5);
        r4 = 0;
        goto L_0x028f;
    L_0x0298:
        r4 = move-exception;
        r6 = "LocalBackup";
        r7 = new java.lang.StringBuilder;
        r7.<init>();
        r8 = "Error: ";
        r7 = r7.append(r8);
        r4 = r4.toString();
        r4 = r7.append(r4);
        r4 = r4.toString();
        com.catfiz.util.Log.e(r6, r4);
        r0 = r50;
        r0.closePoolCursor(r12, r5);
    L_0x02ba:
        r4 = "topiclist";	 Catch:{ JSONException -> 0x0355, Exception -> 0x0385 }
        r0 = r43;	 Catch:{ JSONException -> 0x0355, Exception -> 0x0385 }
        r1 = r44;	 Catch:{ JSONException -> 0x0355, Exception -> 0x0385 }
        r0.put(r4, r1);	 Catch:{ JSONException -> 0x0355, Exception -> 0x0385 }
        if (r52 == 0) goto L_0x0426;
    L_0x02c5:
        r6 = new org.json.JSONArray;
        r6.<init>();
        r7 = r5.getCount();
        r4 = 0;
    L_0x02cf:
        if (r4 >= r7) goto L_0x03b0;
    L_0x02d1:
        r5.moveToPosition(r4);
        r8 = new org.json.JSONObject;	 Catch:{ JSONException -> 0x038e }
        r8.<init>();	 Catch:{ JSONException -> 0x038e }
        r9 = "friendpin";	 Catch:{ JSONException -> 0x038e }
        r0 = r30;	 Catch:{ JSONException -> 0x038e }
        r10 = r5.getString(r0);	 Catch:{ JSONException -> 0x038e }
        r8.put(r9, r10);	 Catch:{ JSONException -> 0x038e }
        r9 = "friendname";	 Catch:{ JSONException -> 0x038e }
        r0 = r31;	 Catch:{ JSONException -> 0x038e }
        r10 = r5.getString(r0);	 Catch:{ JSONException -> 0x038e }
        r8.put(r9, r10);	 Catch:{ JSONException -> 0x038e }
        r9 = "topic_key";	 Catch:{ JSONException -> 0x038e }
        r0 = r32;	 Catch:{ JSONException -> 0x038e }
        r10 = r5.getString(r0);	 Catch:{ JSONException -> 0x038e }
        r8.put(r9, r10);	 Catch:{ JSONException -> 0x038e }
        r9 = "friendalias";	 Catch:{ JSONException -> 0x038e }
        r0 = r33;	 Catch:{ JSONException -> 0x038e }
        r10 = r5.getString(r0);	 Catch:{ JSONException -> 0x038e }
        r8.put(r9, r10);	 Catch:{ JSONException -> 0x038e }
        r9 = "usealias";	 Catch:{ JSONException -> 0x038e }
        r0 = r34;	 Catch:{ JSONException -> 0x038e }
        r10 = r5.getString(r0);	 Catch:{ JSONException -> 0x038e }
        r8.put(r9, r10);	 Catch:{ JSONException -> 0x038e }
        r9 = "status";	 Catch:{ JSONException -> 0x038e }
        r0 = r35;	 Catch:{ JSONException -> 0x038e }
        r10 = r5.getString(r0);	 Catch:{ JSONException -> 0x038e }
        r8.put(r9, r10);	 Catch:{ JSONException -> 0x038e }
        r9 = "statusseq";	 Catch:{ JSONException -> 0x038e }
        r0 = r36;	 Catch:{ JSONException -> 0x038e }
        r10 = r5.getLong(r0);	 Catch:{ JSONException -> 0x038e }
        r8.put(r9, r10);	 Catch:{ JSONException -> 0x038e }
        r9 = "photoavailable";	 Catch:{ JSONException -> 0x038e }
        r0 = r37;	 Catch:{ JSONException -> 0x038e }
        r10 = r5.getString(r0);	 Catch:{ JSONException -> 0x038e }
        r8.put(r9, r10);	 Catch:{ JSONException -> 0x038e }
        r9 = "lastactivity";	 Catch:{ JSONException -> 0x038e }
        r0 = r38;	 Catch:{ JSONException -> 0x038e }
        r10 = r5.getLong(r0);	 Catch:{ JSONException -> 0x038e }
        r8.put(r9, r10);	 Catch:{ JSONException -> 0x038e }
        r9 = "photofilename";	 Catch:{ JSONException -> 0x038e }
        r0 = r39;	 Catch:{ JSONException -> 0x038e }
        r10 = r5.getString(r0);	 Catch:{ JSONException -> 0x038e }
        r8.put(r9, r10);	 Catch:{ JSONException -> 0x038e }
        r6.put(r8);	 Catch:{ JSONException -> 0x038e }
        r4 = r4 + 1;
        goto L_0x02cf;
    L_0x034d:
        r45 = move-exception;
        r0 = r50;
        r0.closePoolCursor(r12, r5);
        goto L_0x025a;
    L_0x0355:
        r4 = move-exception;
        r6 = "LocalBackup";
        r7 = new java.lang.StringBuilder;
        r7.<init>();
        r8 = "Error: ";
        r7 = r7.append(r8);
        r4 = r4.toString();
        r4 = r7.append(r4);
        r4 = r4.toString();
        com.catfiz.util.Log.e(r6, r4);
        r4 = com.catfiz.R.string.poollocalBackupFailed;
        r0 = r51;
        r4 = r0.getString(r4);
        com.catfiz.service.CatfishService.signalToast(r4);
        r0 = r50;
        r0.closePoolCursor(r12, r5);
        r4 = 0;
        goto L_0x028f;
    L_0x0385:
        r4 = move-exception;
        r0 = r50;
        r0.closePoolCursor(r12, r5);
        r4 = 0;
        goto L_0x028f;
    L_0x038e:
        r4 = move-exception;
        r7 = "LocalBackup";
        r8 = new java.lang.StringBuilder;
        r8.<init>();
        r9 = "Error: ";
        r8 = r8.append(r9);
        r4 = r4.toString();
        r4 = r8.append(r4);
        r4 = r4.toString();
        com.catfiz.util.Log.e(r7, r4);
        r0 = r50;
        r0.closePoolCursor(r12, r5);
    L_0x03b0:
        r4 = "memberlist";	 Catch:{ JSONException -> 0x03e9, Exception -> 0x0419, OutOfMemoryError -> 0x0422 }
        r0 = r43;	 Catch:{ JSONException -> 0x03e9, Exception -> 0x0419, OutOfMemoryError -> 0x0422 }
        r0.put(r4, r6);	 Catch:{ JSONException -> 0x03e9, Exception -> 0x0419, OutOfMemoryError -> 0x0422 }
        r4 = 1;	 Catch:{ JSONException -> 0x03e9, Exception -> 0x0419, OutOfMemoryError -> 0x0422 }
        r0 = r43;	 Catch:{ JSONException -> 0x03e9, Exception -> 0x0419, OutOfMemoryError -> 0x0422 }
        r4 = r0.toString(r4);	 Catch:{ JSONException -> 0x03e9, Exception -> 0x0419, OutOfMemoryError -> 0x0422 }
        r0 = r42;	 Catch:{ JSONException -> 0x03e9, Exception -> 0x0419, OutOfMemoryError -> 0x0422 }
        r0.append(r4);	 Catch:{ JSONException -> 0x03e9, Exception -> 0x0419, OutOfMemoryError -> 0x0422 }
    L_0x03c3:
        r4 = r50.getDeviceID(r51);	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r0 = r50;	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r4 = r0.getHmacKey(r4);	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r6 = r42.toString();	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r4 = com.catfiz.crypto.SimpleCrypto.encrypt(r4, r6);	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r4 = r4.getBytes();	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r0 = r40;	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r0.write(r4);	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r40.close();	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r0 = r50;
        r0.closePoolCursor(r12, r5);
        r4 = 1;
        goto L_0x028f;
    L_0x03e9:
        r4 = move-exception;
        r6 = "LocalBackup";
        r7 = new java.lang.StringBuilder;
        r7.<init>();
        r8 = "Error: ";
        r7 = r7.append(r8);
        r4 = r4.toString();
        r4 = r7.append(r4);
        r4 = r4.toString();
        com.catfiz.util.Log.e(r6, r4);
        r4 = com.catfiz.R.string.poollocalBackupFailed;
        r0 = r51;
        r4 = r0.getString(r4);
        com.catfiz.service.CatfishService.signalToast(r4);
        r0 = r50;
        r0.closePoolCursor(r12, r5);
        r4 = 0;
        goto L_0x028f;
    L_0x0419:
        r4 = move-exception;
        r0 = r50;
        r0.closePoolCursor(r12, r5);
        r4 = 0;
        goto L_0x028f;
    L_0x0422:
        r4 = move-exception;
        r4 = 0;
        goto L_0x028f;
    L_0x0426:
        r4 = 1;
        r0 = r43;	 Catch:{ JSONException -> 0x0433, OutOfMemoryError -> 0x043d }
        r4 = r0.toString(r4);	 Catch:{ JSONException -> 0x0433, OutOfMemoryError -> 0x043d }
        r0 = r42;	 Catch:{ JSONException -> 0x0433, OutOfMemoryError -> 0x043d }
        r0.append(r4);	 Catch:{ JSONException -> 0x0433, OutOfMemoryError -> 0x043d }
        goto L_0x03c3;
    L_0x0433:
        r4 = move-exception;
        r4.printStackTrace();
        r0 = r50;
        r0.closePoolCursor(r12, r5);
        goto L_0x03c3;
    L_0x043d:
        r4 = move-exception;
        r4 = 0;
        goto L_0x028f;
    L_0x0441:
        r4 = move-exception;
        r6 = "LocalBackup";	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r7 = new java.lang.StringBuilder;	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r7.<init>();	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r8 = "Error: ";	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r7 = r7.append(r8);	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r4 = r4.toString();	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r4 = r7.append(r4);	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r4 = r4.toString();	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        com.catfiz.util.Log.e(r6, r4);	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r41.delete();	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r4 = com.catfiz.R.string.poollocalBackupFailed;	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r0 = r51;	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r4 = r0.getString(r4);	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        com.catfiz.service.CatfishService.signalToast(r4);	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r4 = 0;
        r0 = r50;
        r0.closePoolCursor(r12, r5);
        goto L_0x028f;
    L_0x0474:
        r4 = move-exception;
        r4 = 0;
        r0 = r50;
        r0.closePoolCursor(r12, r5);
        goto L_0x028f;
    L_0x047d:
        r4 = move-exception;
        r6 = "LocalBackup";	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r7 = new java.lang.StringBuilder;	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r7.<init>();	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r8 = "Error: ";	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r7 = r7.append(r8);	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r4 = r4.toString();	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r4 = r7.append(r4);	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r4 = r4.toString();	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        com.catfiz.util.Log.e(r6, r4);	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r41.delete();	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r4 = com.catfiz.R.string.poollocalBackupFailed;	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r0 = r51;	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r4 = r0.getString(r4);	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        com.catfiz.service.CatfishService.signalToast(r4);	 Catch:{ IOException -> 0x0441, OutOfMemoryError -> 0x0474, Exception -> 0x047d, all -> 0x04b0 }
        r4 = 0;
        r0 = r50;
        r0.closePoolCursor(r12, r5);
        goto L_0x028f;
    L_0x04b0:
        r4 = move-exception;
        r0 = r50;
        r0.closePoolCursor(r12, r5);
        throw r4;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.catfiz.backup.LocalBackup.backupPoolTopic(android.content.Context, boolean):boolean");
    }

    private synchronized String getDeviceID(Context context) {
        return ((TelephonyManager) context.getSystemService(Constant.PHONE)).getDeviceId();
    }

    public static boolean isBackupExists(Context context) {
        String str = "alb-" + ((TelephonyManager) context.getSystemService(Constant.PHONE)).getDeviceId() + ".backup";
        File file = new File(StorageDir.getMediaDir(6));
        if (!file.exists()) {
            file.mkdirs();
        }
        boolean exists = new File(file, str).exists();
        return !exists ? new File(Environment.getExternalStorageDirectory().getAbsolutePath(), str).exists() : exists;
    }

    public static boolean isPoolNCategoryBackupExists(Context context) {
        String str = "albpool-" + ((TelephonyManager) context.getSystemService(Constant.PHONE)).getDeviceId() + ".backup";
        File file = new File(StorageDir.getMediaDir(6));
        if (!file.exists()) {
            file.mkdirs();
        }
        boolean exists = new File(file, str).exists();
        return !exists ? new File(Environment.getExternalStorageDirectory().getAbsolutePath(), str).exists() : exists;
    }

    public static boolean removeAllBackupFile(Context context) {
        String deviceId = ((TelephonyManager) context.getSystemService(Constant.PHONE)).getDeviceId();
        String str = "alb-" + deviceId + ".backup";
        String str2 = "albpool-" + deviceId + ".backup";
        deviceId = "albcategory-" + deviceId + ".backup";
        File file = new File(StorageDir.getMediaDir(6));
        if (!file.exists()) {
            file.mkdirs();
        }
        return (new File(file, str).delete() && new File(file, str2).delete()) ? new File(file, deviceId).delete() : false;
    }

    public void backup(Context context) {
        if (!PinManager.isRestoringFriendlist) {
            CatfishService.getServiceInstance().postRunnableToDbThread(new DoBackupInDBThread(context));
        }
    }

    public void backupCategorylist(Context context) {
        if (!PinManager.isRestoringFriendlist) {
            CatfishService.getServiceInstance().postRunnableToDbThread(new DoBackupCategoryInDBThread(context, false));
        }
    }

    public void backupFriendlist(Context context) {
        if (!PinManager.isRestoringFriendlist) {
            CatfishService.getServiceInstance().postRunnableToDbThread(new DoBackupFriendInDBThread(context, false));
        }
    }

    public void backupPool(Context context) {
        if (!PinManager.isRestoringFriendlist) {
            CatfishService.getServiceInstance().postRunnableToDbThread(new DoBackupPoolInDBThread(context));
        }
    }

    public void closeCategoryCursor(Cursor cursor, Cursor cursor2) {
        if (cursor != null) {
            cursor.close();
        }
        if (cursor2 != null) {
            cursor2.close();
        }
    }

    public void closePoolCursor(Cursor cursor, Cursor cursor2) {
        if (cursor != null) {
            cursor.close();
        }
        if (cursor2 != null) {
            cursor2.close();
        }
    }

    public synchronized String getHmacKey(String str) {
        StringBuffer stringBuffer;
        Key secretKeySpec = new SecretKeySpec("e39beb25d4956d988349efa4ae74ac6ca7f2161a".getBytes(), "HmacSHA1");
        Mac instance = Mac.getInstance("HmacSHA1");
        instance.init(secretKeySpec);
        byte[] doFinal = instance.doFinal(str.getBytes());
        stringBuffer = new StringBuffer();
        for (byte b : doFinal) {
            int i = b & MotionEventCompat.ACTION_MASK;
            if (i <= 15) {
                stringBuffer.append("0");
            }
            stringBuffer.append(Integer.toHexString(i));
        }
        return stringBuffer.toString();
    }

    public void restore(Context context) {
        CatfishService.getServiceInstance().postRunnableToDbThread(new DoRestoreInDBThread(context));
    }

    public void restoreWithoutFriendlist(Context context) {
        CatfishService.getServiceInstance().postRunnableToDbThread(new DoRestoreInDBThread(context, true));
    }
}
