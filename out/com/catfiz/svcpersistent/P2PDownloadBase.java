package com.catfiz.svcpersistent;

import com.catfiz.service.CatfishService;
import com.catfiz.svcpersistent.TaskDatabaseExecutor.TaskDatabaseOperation;

public class P2PDownloadBase {
    private boolean mIsResumeProcess = false;
    private P2PDownloadInfo mResumeDownloadData = null;

    protected void deleteTaskState(String str, boolean z) {
        P2PDownloadInfo obtain = P2PDownloadInfo.obtain();
        obtain.mKey = str;
        Runnable taskDatabaseExecutor = new TaskDatabaseExecutor(obtain, TaskDatabaseOperation.DELETE);
        if (z) {
            taskDatabaseExecutor.run();
        } else {
            getCatfishService().postToDBHandler(taskDatabaseExecutor);
        }
    }

    protected CatfishService getCatfishService() {
        return CatfishService.getServiceInstance();
    }

    protected boolean isResumeProcess() {
        return this.mIsResumeProcess;
    }

    public void setResumeDownloadProcess(boolean z, P2PDownloadInfo p2PDownloadInfo) {
        this.mIsResumeProcess = z;
        this.mResumeDownloadData = p2PDownloadInfo;
    }

    protected void updateTaskState(String str, String str2, int i, int i2, String str3, String str4, boolean z) {
        P2PDownloadInfo obtain = P2PDownloadInfo.obtain();
        if (this.mIsResumeProcess) {
            obtain.mTimeStamp = this.mResumeDownloadData.mTimeStamp;
        } else {
            obtain.mTimeStamp = System.currentTimeMillis();
        }
        obtain.mKey = str;
        obtain.mFilePath = str2;
        obtain.mDataSize = i;
        obtain.mStreamType = i2;
        obtain.mChannelID = str3;
        obtain.mSenderpin = str4;
        Runnable taskDatabaseExecutor = new TaskDatabaseExecutor(obtain, TaskDatabaseOperation.STORE);
        if (z) {
            taskDatabaseExecutor.run();
        } else {
            getCatfishService().postToDBHandler(taskDatabaseExecutor);
        }
    }
}
