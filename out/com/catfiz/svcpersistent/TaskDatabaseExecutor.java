package com.catfiz.svcpersistent;

import android.content.Context;
import android.database.Cursor;
import com.catfiz.objectcomment.ObjectCommentDataStorage;
import com.catfiz.pool.PoolDataStorage;
import com.catfiz.pool.PoolDataUploadExecutor;
import com.catfiz.pool.PoolLimitedDownloadExecutor;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishMessageObject;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.CatfishService;
import com.catfiz.service.CatfishUIBinder;
import com.catfiz.service.CatfishUIBinder.DatabaseRequestOP;
import com.catfiz.service.ChatDataDLoadExecutor;
import com.catfiz.service.ChatDataUploadExecutor;
import com.catfiz.service.FizzlinkDataStorage;
import com.catfiz.service.FizzlinkUploadExecutor;
import com.catfiz.service.IDropableRunnable;
import com.catfiz.service.P2PDownloadExecutor;
import com.catfiz.service.P2PUploadExecutor;
import com.catfiz.service.SendStatusCommentExecutor;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.service.SlinkDataDownloadExecutor;
import com.catfiz.service.uidbexec.CUIDBSendMessageWTypeExecutor;
import com.catfiz.service.uidbexec.CUIDatabaseRequestExecutor;
import com.catfiz.svcpersistent.CommonMessageInfo.MessageContext;
import com.catfiz.svcpersistent.DataStorageDownloadInfo.DataStorageStreamType;
import com.catfiz.util.Log;
import com.catfiz.util.MimeTypeParser;
import java.io.File;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.json.JSONException;
import org.json.JSONObject;

public class TaskDatabaseExecutor implements Runnable {
    private static final String TAG = TaskDatabaseExecutor.class.getName();
    private static final int TASK_EXPIRED_PERIODE = 18000000;
    private CommonMessageInfo mCommonMessageInfo = null;
    private DataStorageDownloadInfo mDataStorageDownloadInfo = null;
    private DataStorageUploadInfo mDataStorageUploadInfo = null;
    private TaskDatabaseAction mDatabaseAction = null;
    private TaskDatabaseOperation mDatabaseOperation = null;
    private P2PDownloadInfo mP2PDownloadInfo = null;
    private P2PUploadInfo mP2pUploadInfo = null;

    /* synthetic */ class AnonymousClass1 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$svcpersistent$CommonMessageInfo$MessageContext = new int[MessageContext.values().length];
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$svcpersistent$DataStorageDownloadInfo$DataStorageStreamType = new int[DataStorageStreamType.values().length];
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$svcpersistent$TaskDatabaseExecutor$TaskDatabaseAction = new int[TaskDatabaseAction.values().length];
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$svcpersistent$TaskDatabaseExecutor$TaskDatabaseOperation = new int[TaskDatabaseOperation.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$svcpersistent$CommonMessageInfo$MessageContext[MessageContext.PRIVATE_MESSAGE.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$svcpersistent$CommonMessageInfo$MessageContext[MessageContext.POOL_MESSAGE.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$svcpersistent$CommonMessageInfo$MessageContext[MessageContext.STATUS_COMMENT_MESSAGE.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$svcpersistent$CommonMessageInfo$MessageContext[MessageContext.NIC_MESSAGE.ordinal()] = 4;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$svcpersistent$DataStorageDownloadInfo$DataStorageStreamType[DataStorageStreamType.FIZZLINK_DATA.ordinal()] = 1;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$svcpersistent$DataStorageDownloadInfo$DataStorageStreamType[DataStorageStreamType.POOL_DATA.ordinal()] = 2;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$svcpersistent$DataStorageDownloadInfo$DataStorageStreamType[DataStorageStreamType.CHAT_DATA.ordinal()] = 3;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$com$catfiz$svcpersistent$TaskDatabaseExecutor$TaskDatabaseAction[TaskDatabaseAction.EXECUTE_ALL_PENDING_TASK.ordinal()] = 1;
            } catch (NoSuchFieldError e8) {
            }
            try {
                $SwitchMap$com$catfiz$svcpersistent$TaskDatabaseExecutor$TaskDatabaseAction[TaskDatabaseAction.DATASTORAGE_DOWNLOAD.ordinal()] = 2;
            } catch (NoSuchFieldError e9) {
            }
            try {
                $SwitchMap$com$catfiz$svcpersistent$TaskDatabaseExecutor$TaskDatabaseAction[TaskDatabaseAction.DATASTORAGE_UPLOAD.ordinal()] = 3;
            } catch (NoSuchFieldError e10) {
            }
            try {
                $SwitchMap$com$catfiz$svcpersistent$TaskDatabaseExecutor$TaskDatabaseAction[TaskDatabaseAction.P2P_UPLOAD.ordinal()] = 4;
            } catch (NoSuchFieldError e11) {
            }
            try {
                $SwitchMap$com$catfiz$svcpersistent$TaskDatabaseExecutor$TaskDatabaseAction[TaskDatabaseAction.P2P_DOWNLOAD.ordinal()] = 5;
            } catch (NoSuchFieldError e12) {
            }
            try {
                $SwitchMap$com$catfiz$svcpersistent$TaskDatabaseExecutor$TaskDatabaseAction[TaskDatabaseAction.COMMON_MESSAGE.ordinal()] = 6;
            } catch (NoSuchFieldError e13) {
            }
            try {
                $SwitchMap$com$catfiz$svcpersistent$TaskDatabaseExecutor$TaskDatabaseOperation[TaskDatabaseOperation.STORE.ordinal()] = 1;
            } catch (NoSuchFieldError e14) {
            }
            try {
                $SwitchMap$com$catfiz$svcpersistent$TaskDatabaseExecutor$TaskDatabaseOperation[TaskDatabaseOperation.DELETE.ordinal()] = 2;
            } catch (NoSuchFieldError e15) {
            }
        }
    }

    public enum TaskDatabaseAction {
        EXECUTE_ALL_PENDING_TASK,
        P2P_UPLOAD,
        P2P_DOWNLOAD,
        DATASTORAGE_UPLOAD,
        DATASTORAGE_DOWNLOAD,
        COMMON_MESSAGE
    }

    public enum TaskDatabaseOperation {
        STORE,
        DELETE
    }

    public TaskDatabaseExecutor(CommonMessageInfo commonMessageInfo, TaskDatabaseOperation taskDatabaseOperation) {
        this.mCommonMessageInfo = commonMessageInfo;
        this.mDatabaseAction = TaskDatabaseAction.COMMON_MESSAGE;
        this.mDatabaseOperation = taskDatabaseOperation;
    }

    public TaskDatabaseExecutor(DataStorageDownloadInfo dataStorageDownloadInfo, TaskDatabaseOperation taskDatabaseOperation) {
        this.mDataStorageDownloadInfo = dataStorageDownloadInfo;
        this.mDatabaseAction = TaskDatabaseAction.DATASTORAGE_DOWNLOAD;
        this.mDatabaseOperation = taskDatabaseOperation;
    }

    public TaskDatabaseExecutor(DataStorageUploadInfo dataStorageUploadInfo, TaskDatabaseOperation taskDatabaseOperation) {
        this.mDataStorageUploadInfo = dataStorageUploadInfo;
        this.mDatabaseAction = TaskDatabaseAction.DATASTORAGE_UPLOAD;
        this.mDatabaseOperation = taskDatabaseOperation;
    }

    public TaskDatabaseExecutor(P2PDownloadInfo p2PDownloadInfo, TaskDatabaseOperation taskDatabaseOperation) {
        this.mP2PDownloadInfo = p2PDownloadInfo;
        this.mDatabaseAction = TaskDatabaseAction.P2P_DOWNLOAD;
        this.mDatabaseOperation = taskDatabaseOperation;
    }

    public TaskDatabaseExecutor(P2PUploadInfo p2PUploadInfo, TaskDatabaseOperation taskDatabaseOperation) {
        this.mP2pUploadInfo = p2PUploadInfo;
        this.mDatabaseAction = TaskDatabaseAction.P2P_UPLOAD;
        this.mDatabaseOperation = taskDatabaseOperation;
    }

    public TaskDatabaseExecutor(TaskDatabaseAction taskDatabaseAction) {
        this.mDatabaseAction = taskDatabaseAction;
    }

    private void executeCommonMessage(CommonMessageInfo[] commonMessageInfoArr) {
        long currentTimeMillis = System.currentTimeMillis();
        CatfishUIBinder catfishUIBinder = new CatfishUIBinder(getCatfishService());
        for (CommonMessageInfo commonMessageInfo : commonMessageInfoArr) {
            if (currentTimeMillis - commonMessageInfo.mTimeStamp <= 18000000) {
                Cursor singleChatConversation;
                int columnIndex;
                int columnIndex2;
                CatfishMessageObject obtain;
                JSONObject jSONObject;
                Runnable cUIDBSendMessageWTypeExecutor;
                switch (AnonymousClass1.$SwitchMap$com$catfiz$svcpersistent$CommonMessageInfo$MessageContext[MessageContext.values()[commonMessageInfo.mMessageContext].ordinal()]) {
                    case e.b /*1*/:
                        singleChatConversation = new CatfishDataStorage(getCatfishService()).getSingleChatConversation(Long.parseLong(commonMessageInfo.mKey));
                        if (singleChatConversation.moveToFirst()) {
                            columnIndex = singleChatConversation.getColumnIndex(ServerMessageDataStorage.MESSAGE);
                            columnIndex2 = singleChatConversation.getColumnIndex(ServerMessageDataStorage.SENDERNAME);
                            obtain = CatfishMessageObject.obtain();
                            getCatfishService();
                            obtain.userpin = CatfishService.getUserPIN();
                            obtain.recipient = commonMessageInfo.mRecipient;
                            obtain.message = singleChatConversation.getString(columnIndex);
                            obtain.sequence = Long.parseLong(commonMessageInfo.mKey);
                            obtain.username = singleChatConversation.getString(columnIndex2);
                            obtain.messagetype = MessageType.values()[commonMessageInfo.mMessageType];
                            if (obtain.messagetype == MessageType.STIKER_MESSAGE) {
                                try {
                                    jSONObject = new JSONObject(obtain.message);
                                    obtain.stickerheight = Integer.parseInt(jSONObject.remove("stickerHeight").toString());
                                    obtain.stickerwidth = Integer.parseInt(jSONObject.remove("stickerWidth").toString());
                                    obtain.message = jSONObject.toString();
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                            singleChatConversation.close();
                            cUIDBSendMessageWTypeExecutor = new CUIDBSendMessageWTypeExecutor(catfishUIBinder, null, obtain);
                            cUIDBSendMessageWTypeExecutor.setResumeDownloadProcess(true, commonMessageInfo);
                            getCatfishService().postRunnableToDbThread(cUIDBSendMessageWTypeExecutor);
                            break;
                        }
                        return;
                    case e.c /*2*/:
                        singleChatConversation = new PoolDataStorage(getCatfishService()).getSingleDiscuss(Long.parseLong(commonMessageInfo.mKey));
                        if (singleChatConversation.moveToFirst()) {
                            CatfishMessageObject obtain2 = CatfishMessageObject.obtain();
                            columnIndex = singleChatConversation.getColumnIndex(PoolDataStorage.TOPIC_KEY);
                            singleChatConversation.getColumnIndex(TaskDataStorage.SENDERPIN);
                            int columnIndex3 = singleChatConversation.getColumnIndex(ServerMessageDataStorage.SENDERNAME);
                            int columnIndex4 = singleChatConversation.getColumnIndex(ServerMessageDataStorage.MESSAGE);
                            singleChatConversation.getColumnIndex(ServerMessageDataStorage.SEQUENCE);
                            singleChatConversation.getColumnIndex(ServerMessageDataStorage.DATAFILEPATH);
                            getCatfishService();
                            obtain2.userpin = CatfishService.getUserPIN();
                            obtain2.username = singleChatConversation.getString(columnIndex3);
                            obtain2.topic_key = singleChatConversation.getString(columnIndex);
                            obtain2.sequence = Long.parseLong(commonMessageInfo.mKey);
                            obtain2.message = singleChatConversation.getString(columnIndex4);
                            obtain2.messagetype = MessageType.values()[commonMessageInfo.mMessageType];
                            if (obtain2.messagetype == MessageType.STIKER_MESSAGE_POOL) {
                                try {
                                    jSONObject = new JSONObject(obtain2.message);
                                    obtain2.stickerheight = Integer.parseInt(jSONObject.remove("stickerHeight").toString());
                                    obtain2.stickerwidth = Integer.parseInt(jSONObject.remove("stickerWidth").toString());
                                    obtain2.message = jSONObject.toString();
                                } catch (Exception e2) {
                                    e2.printStackTrace();
                                }
                            }
                            singleChatConversation.close();
                            cUIDBSendMessageWTypeExecutor = new CUIDatabaseRequestExecutor(catfishUIBinder, null, obtain2, DatabaseRequestOP.SEND_CONV_MESSAGE);
                            cUIDBSendMessageWTypeExecutor.setResumeDownloadProcess(true, commonMessageInfo);
                            getCatfishService().postToDBHandler(cUIDBSendMessageWTypeExecutor);
                            break;
                        }
                        return;
                    case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                        Cursor singleChatConversation2 = new CatfishDataStorage(getCatfishService()).getSingleChatConversation(Long.parseLong(commonMessageInfo.mKey));
                        if (singleChatConversation2.moveToFirst()) {
                            int columnIndex5 = singleChatConversation2.getColumnIndex(ServerMessageDataStorage.MESSAGE);
                            int columnIndex6 = singleChatConversation2.getColumnIndex(ServerMessageDataStorage.SENDERNAME);
                            int columnIndex7 = singleChatConversation2.getColumnIndex(ServerMessageDataStorage.OBJECTSEQUENCE);
                            CatfishService catfishService = getCatfishService();
                            getCatfishService();
                            String currentServerHost = CatfishService.getCurrentServerHost();
                            getCatfishService();
                            cUIDBSendMessageWTypeExecutor = new SendStatusCommentExecutor(null, catfishService, currentServerHost, CatfishService.getUserPIN(), singleChatConversation2.getString(columnIndex6), commonMessageInfo.mRecipient, singleChatConversation2.getString(columnIndex5), singleChatConversation2.getLong(columnIndex7), MessageType.values()[commonMessageInfo.mMessageType]);
                            cUIDBSendMessageWTypeExecutor.setResumeDownloadProcess(true, commonMessageInfo);
                            singleChatConversation2.close();
                            getCatfishService().postToDBHandler(cUIDBSendMessageWTypeExecutor);
                            break;
                        }
                        return;
                    case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                        Cursor singleChatConversation3 = new CatfishDataStorage(getCatfishService()).getSingleChatConversation(Long.parseLong(commonMessageInfo.mKey));
                        if (singleChatConversation3.moveToFirst()) {
                            int columnIndex8 = singleChatConversation3.getColumnIndex(ServerMessageDataStorage.MESSAGE);
                            columnIndex2 = singleChatConversation3.getColumnIndex(ServerMessageDataStorage.SENDERNAME);
                            obtain = CatfishMessageObject.obtain();
                            getCatfishService();
                            obtain.userpin = CatfishService.getUserPIN();
                            obtain.recipient = commonMessageInfo.mRecipient;
                            obtain.message = singleChatConversation3.getString(columnIndex8);
                            obtain.sequence = Long.parseLong(commonMessageInfo.mKey);
                            obtain.username = singleChatConversation3.getString(columnIndex2);
                            singleChatConversation3.close();
                            cUIDBSendMessageWTypeExecutor = new CUIDatabaseRequestExecutor(catfishUIBinder, null, obtain, DatabaseRequestOP.SEND_NIC_MESSAGE);
                            cUIDBSendMessageWTypeExecutor.setResumeDownloadProcess(true, commonMessageInfo);
                            getCatfishService().postToDBHandler(cUIDBSendMessageWTypeExecutor);
                            break;
                        }
                        return;
                    default:
                        break;
                }
            }
        }
    }

    private void executeDataStorageDownload(DataStorageDownloadInfo[] dataStorageDownloadInfoArr) {
        long currentTimeMillis = System.currentTimeMillis();
        for (DataStorageDownloadInfo dataStorageDownloadInfo : dataStorageDownloadInfoArr) {
            if (currentTimeMillis - dataStorageDownloadInfo.mTimeStamp <= 18000000) {
                CatfishService catfishService;
                String currentServerHost;
                IDropableRunnable poolLimitedDownloadExecutor;
                switch (AnonymousClass1.$SwitchMap$com$catfiz$svcpersistent$DataStorageDownloadInfo$DataStorageStreamType[DataStorageStreamType.values()[dataStorageDownloadInfo.mStreamType].ordinal()]) {
                    case e.b /*1*/:
                        CatfishService catfishService2 = getCatfishService();
                        getCatfishService();
                        String currentServerHost2 = CatfishService.getCurrentServerHost();
                        getCatfishService();
                        IDropableRunnable slinkDataDownloadExecutor = new SlinkDataDownloadExecutor(catfishService2, currentServerHost2, CatfishService.getUserPIN(), dataStorageDownloadInfo.mKey, null, dataStorageDownloadInfo.mDataSize, dataStorageDownloadInfo.mFilePath, new File(dataStorageDownloadInfo.mFilePath).getName(), true);
                        slinkDataDownloadExecutor.setResumeDownloadProcess(true, dataStorageDownloadInfo);
                        getCatfishService().postRunnableToService(slinkDataDownloadExecutor, 2);
                        break;
                    case e.c /*2*/:
                        Cursor singleDiscuss = new PoolDataStorage(getCatfishService()).getSingleDiscuss(Long.parseLong(dataStorageDownloadInfo.mKey));
                        if (singleDiscuss.moveToFirst()) {
                            int columnIndex = singleDiscuss.getColumnIndex(PoolDataStorage.TOPIC_KEY);
                            int columnIndex2 = singleDiscuss.getColumnIndex(TaskDataStorage.SENDERPIN);
                            int columnIndex3 = singleDiscuss.getColumnIndex(ServerMessageDataStorage.MESSAGE);
                            int columnIndex4 = singleDiscuss.getColumnIndex(ServerMessageDataStorage.SEQUENCE);
                            String string = singleDiscuss.getString(singleDiscuss.getColumnIndex(ServerMessageDataStorage.DATAFILEPATH));
                            long j = 0;
                            String str = null;
                            if (string != null && string.contains(":")) {
                                j = Long.parseLong(string.split(":")[0]);
                                if (string.split(":").length > 4) {
                                    str = string.split(":")[4];
                                }
                            } else if (string != null) {
                                j = Long.parseLong(string);
                            }
                            if (j != 0) {
                                catfishService = getCatfishService();
                                getCatfishService();
                                currentServerHost = CatfishService.getCurrentServerHost();
                                getCatfishService();
                                poolLimitedDownloadExecutor = new PoolLimitedDownloadExecutor(catfishService, currentServerHost, CatfishService.getUserPIN(), singleDiscuss.getString(columnIndex), singleDiscuss.getString(columnIndex2), singleDiscuss.getString(columnIndex3), singleDiscuss.getLong(columnIndex4), j, 0, true, 0, 0, 0, str, MessageType.BCASTCONFERENCE.ordinal());
                                poolLimitedDownloadExecutor.setResumeDownloadProcess(true, dataStorageDownloadInfo);
                                getCatfishService().postRunnableToService(poolLimitedDownloadExecutor, 2);
                                singleDiscuss.close();
                                break;
                            }
                            return;
                        }
                        return;
                    case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                        try {
                            JSONObject jSONObject = new JSONObject(dataStorageDownloadInfo.mAdditionalData);
                            catfishService = getCatfishService();
                            getCatfishService();
                            currentServerHost = CatfishService.getCurrentServerHost();
                            getCatfishService();
                            poolLimitedDownloadExecutor = new ChatDataDLoadExecutor(catfishService, currentServerHost, CatfishService.getUserPIN(), jSONObject.getString(TaskDataStorage.SENDERPIN), jSONObject.getString(ServerMessageDataStorage.MESSAGE), jSONObject.getString(ServerMessageDataStorage.SENDERNAME), jSONObject.getLong(ServerMessageDataStorage.SEQUENCE), jSONObject.getLong(ObjectCommentDataStorage.OBJECTSEQUENCE), jSONObject.getString(ObjectCommentDataStorage.OBJECTOWNER));
                            poolLimitedDownloadExecutor.setResumeDownloadProcess(true, dataStorageDownloadInfo);
                            getCatfishService().postRunnableToService(poolLimitedDownloadExecutor, 2);
                            break;
                        } catch (JSONException e) {
                            e.printStackTrace();
                            break;
                        }
                    default:
                        break;
                }
            }
        }
    }

    private void executeDataStorageUpload(DataStorageUploadInfo[] dataStorageUploadInfoArr) {
        long currentTimeMillis = System.currentTimeMillis();
        for (DataStorageUploadInfo dataStorageUploadInfo : dataStorageUploadInfoArr) {
            if (currentTimeMillis - dataStorageUploadInfo.mTimeStamp <= 18000000) {
                int columnIndex;
                CatfishService catfishService;
                Runnable fizzlinkUploadExecutor;
                int columnIndex2;
                int columnIndex3;
                switch (AnonymousClass1.$SwitchMap$com$catfiz$svcpersistent$DataStorageDownloadInfo$DataStorageStreamType[DataStorageStreamType.values()[dataStorageUploadInfo.mStreamType].ordinal()]) {
                    case e.b /*1*/:
                        Cursor singleFizzlinkUpload = new FizzlinkDataStorage(getCatfishService()).getSingleFizzlinkUpload(Long.parseLong(dataStorageUploadInfo.mKey));
                        if (singleFizzlinkUpload.moveToFirst()) {
                            columnIndex = singleFizzlinkUpload.getColumnIndex(ServerMessageDataStorage.MESSAGE);
                            catfishService = getCatfishService();
                            getCatfishService();
                            fizzlinkUploadExecutor = new FizzlinkUploadExecutor(catfishService, null, CatfishService.getCurrentServerHost(), dataStorageUploadInfo.mFilePath, singleFizzlinkUpload.getString(columnIndex));
                            fizzlinkUploadExecutor.setResumeUploadProcess(true, dataStorageUploadInfo);
                            getCatfishService().postRunnableToDbThread(fizzlinkUploadExecutor);
                            singleFizzlinkUpload.close();
                            break;
                        }
                        return;
                    case e.c /*2*/:
                        Cursor singleDiscuss = new PoolDataStorage(getCatfishService()).getSingleDiscuss(Long.parseLong(dataStorageUploadInfo.mKey));
                        if (singleDiscuss.moveToFirst()) {
                            columnIndex2 = singleDiscuss.getColumnIndex(PoolDataStorage.TOPIC_KEY);
                            singleDiscuss.getColumnIndex(TaskDataStorage.SENDERPIN);
                            columnIndex = singleDiscuss.getColumnIndex(ServerMessageDataStorage.SENDERNAME);
                            singleDiscuss.getColumnIndex(ServerMessageDataStorage.MESSAGE);
                            singleDiscuss.getColumnIndex(ServerMessageDataStorage.SEQUENCE);
                            columnIndex3 = singleDiscuss.getColumnIndex(ServerMessageDataStorage.DATAFILEPATH);
                            try {
                                JSONObject jSONObject = new JSONObject(dataStorageUploadInfo.mAdditionalData);
                                CatfishService catfishService2 = getCatfishService();
                                getCatfishService();
                                String currentServerHost = CatfishService.getCurrentServerHost();
                                getCatfishService();
                                fizzlinkUploadExecutor = new PoolDataUploadExecutor(null, catfishService2, currentServerHost, CatfishService.getUserPIN(), singleDiscuss.getString(columnIndex), singleDiscuss.getString(columnIndex2), singleDiscuss.getString(columnIndex3), jSONObject.getInt("dataType"), jSONObject.getString(ServerMessageDataStorage.MESSAGE));
                                fizzlinkUploadExecutor.setResumeUploadProcess(true, dataStorageUploadInfo);
                                getCatfishService().postRunnableToDbThread(fizzlinkUploadExecutor);
                            } catch (Exception e) {
                            }
                            singleDiscuss.close();
                            break;
                        }
                        return;
                    case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                        Log.d(TAG, " Execute pending chat_data process ");
                        Cursor singleChatConversation = new CatfishDataStorage(getCatfishService()).getSingleChatConversation(Long.parseLong(dataStorageUploadInfo.mKey));
                        if (singleChatConversation.moveToFirst()) {
                            columnIndex2 = singleChatConversation.getColumnIndex(TaskDataStorage.RECIPIENT);
                            columnIndex3 = singleChatConversation.getColumnIndex(ServerMessageDataStorage.DATAFILEPATH);
                            int columnIndex4 = singleChatConversation.getColumnIndex(ServerMessageDataStorage.MESSAGE);
                            try {
                                JSONObject jSONObject2 = new JSONObject(dataStorageUploadInfo.mAdditionalData);
                                catfishService = getCatfishService();
                                Context catfishService3 = getCatfishService();
                                getCatfishService();
                                String currentServerHost2 = CatfishService.getCurrentServerHost();
                                getCatfishService();
                                fizzlinkUploadExecutor = new ChatDataUploadExecutor(catfishService, null, catfishService3, currentServerHost2, CatfishService.getUserPIN(), singleChatConversation.getString(columnIndex2), singleChatConversation.getString(columnIndex3), singleChatConversation.getString(columnIndex4), null, jSONObject2.getString(MimeTypeParser.TAG_TYPE));
                                Log.d(TAG, " Execute pending chat_data process ");
                                fizzlinkUploadExecutor.setResumeUploadProcess(true, dataStorageUploadInfo);
                                getCatfishService().postRunnableToDbThread(fizzlinkUploadExecutor);
                            } catch (Exception e2) {
                            }
                            singleChatConversation.close();
                            break;
                        }
                        return;
                    default:
                        break;
                }
            }
        }
    }

    private void executeP2PDownload(P2PDownloadInfo[] p2PDownloadInfoArr) {
        long currentTimeMillis = System.currentTimeMillis();
        for (P2PDownloadInfo p2PDownloadInfo : p2PDownloadInfoArr) {
            if (currentTimeMillis - p2PDownloadInfo.mTimeStamp <= 18000000) {
                CatfishService catfishService = getCatfishService();
                getCatfishService();
                String currentServerHost = CatfishService.getCurrentServerHost();
                getCatfishService();
                IDropableRunnable p2PDownloadExecutor = new P2PDownloadExecutor(catfishService, currentServerHost, CatfishService.getUserPIN(), p2PDownloadInfo.mSenderpin, Long.parseLong(p2PDownloadInfo.mChannelID), Long.parseLong(p2PDownloadInfo.mKey));
                Log.d(TAG, " Resume Pending P2P Download ");
                p2PDownloadExecutor.setResumeDownloadProcess(true, p2PDownloadInfo);
                getCatfishService().postRunnableToService(p2PDownloadExecutor, 2);
            }
        }
    }

    private void executeP2PUpload(P2PUploadInfo[] p2PUploadInfoArr) {
        long currentTimeMillis = System.currentTimeMillis();
        for (P2PUploadInfo p2PUploadInfo : p2PUploadInfoArr) {
            if (currentTimeMillis - p2PUploadInfo.mTimeStamp <= 18000000) {
                IDropableRunnable iDropableRunnable = null;
                CatfishService catfishService;
                String currentServerHost;
                if (p2PUploadInfo.mStreamType == 1) {
                    boolean z = false;
                    try {
                        z = new JSONObject(p2PUploadInfo.mAdditionalData).getBoolean("transparent");
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    catfishService = getCatfishService();
                    getCatfishService();
                    currentServerHost = CatfishService.getCurrentServerHost();
                    getCatfishService();
                    iDropableRunnable = new P2PUploadExecutor(catfishService, currentServerHost, CatfishService.getUserPIN(), p2PUploadInfo.mRecipient, p2PUploadInfo.mStreamType, new File(p2PUploadInfo.mFilePath), z);
                } else if (p2PUploadInfo.mStreamType == 5 || p2PUploadInfo.mStreamType == 3) {
                    catfishService = getCatfishService();
                    getCatfishService();
                    currentServerHost = CatfishService.getCurrentServerHost();
                    getCatfishService();
                    iDropableRunnable = new P2PUploadExecutor(catfishService, currentServerHost, CatfishService.getUserPIN(), p2PUploadInfo.mRecipient, p2PUploadInfo.mStreamType, new File(p2PUploadInfo.mFilePath));
                }
                if (iDropableRunnable != null) {
                    iDropableRunnable.setResumeUploadProcess(true, p2PUploadInfo);
                    getCatfishService().postRunnableToService(iDropableRunnable, 2);
                }
            }
        }
    }

    protected CatfishService getCatfishService() {
        return CatfishService.getServiceInstance();
    }

    public void run() {
        if (this.mDatabaseAction != null) {
            TaskDataStorage taskDataStorage = new TaskDataStorage(getCatfishService());
            switch (AnonymousClass1.$SwitchMap$com$catfiz$svcpersistent$TaskDatabaseExecutor$TaskDatabaseAction[this.mDatabaseAction.ordinal()]) {
                case e.b /*1*/:
                    try {
                        P2PUploadInfo[] allP2PUploadInfo = taskDataStorage.getAllP2PUploadInfo();
                        taskDataStorage.deleteAllP2PUploadInfo();
                        P2PDownloadInfo[] allP2PDownloadInfo = taskDataStorage.getAllP2PDownloadInfo();
                        taskDataStorage.deleteAllP2PDownloadInfo();
                        DataStorageDownloadInfo[] allDataStorageDownloadInfo = taskDataStorage.getAllDataStorageDownloadInfo();
                        taskDataStorage.deleteAllDataStorageDownloadInfo();
                        DataStorageUploadInfo[] allDataStorageUploadInfo = taskDataStorage.getAllDataStorageUploadInfo();
                        taskDataStorage.deleteAllDataStorageUploadInfo();
                        CommonMessageInfo[] allCommonMessageInfo = taskDataStorage.getAllCommonMessageInfo();
                        taskDataStorage.deleteAllCommonMessageInfo();
                        if (allP2PUploadInfo != null) {
                            executeP2PUpload(allP2PUploadInfo);
                        }
                        if (allP2PDownloadInfo != null) {
                            executeP2PDownload(allP2PDownloadInfo);
                        }
                        if (allDataStorageDownloadInfo != null) {
                            executeDataStorageDownload(allDataStorageDownloadInfo);
                        }
                        if (allDataStorageUploadInfo != null) {
                            executeDataStorageUpload(allDataStorageUploadInfo);
                        }
                        if (allCommonMessageInfo != null) {
                            executeCommonMessage(allCommonMessageInfo);
                            return;
                        }
                        return;
                    } catch (Exception e) {
                        return;
                    }
                case e.c /*2*/:
                    switch (AnonymousClass1.$SwitchMap$com$catfiz$svcpersistent$TaskDatabaseExecutor$TaskDatabaseOperation[this.mDatabaseOperation.ordinal()]) {
                        case e.b /*1*/:
                            taskDataStorage.storeDataStorageDownloadInfo(this.mDataStorageDownloadInfo);
                            return;
                        case e.c /*2*/:
                            taskDataStorage.deleteDataStorageDownloadInfo(this.mDataStorageDownloadInfo);
                            return;
                        default:
                            return;
                    }
                case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                    switch (AnonymousClass1.$SwitchMap$com$catfiz$svcpersistent$TaskDatabaseExecutor$TaskDatabaseOperation[this.mDatabaseOperation.ordinal()]) {
                        case e.b /*1*/:
                            taskDataStorage.storeDataStorageUploadInfo(this.mDataStorageUploadInfo);
                            return;
                        case e.c /*2*/:
                            taskDataStorage.deleteDataStorageUploadInfo(this.mDataStorageUploadInfo);
                            return;
                        default:
                            return;
                    }
                case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                    switch (AnonymousClass1.$SwitchMap$com$catfiz$svcpersistent$TaskDatabaseExecutor$TaskDatabaseOperation[this.mDatabaseOperation.ordinal()]) {
                        case e.b /*1*/:
                            taskDataStorage.storeP2PUploadInfo(this.mP2pUploadInfo);
                            return;
                        case e.c /*2*/:
                            taskDataStorage.deleteP2PUploadInfo(this.mP2pUploadInfo);
                            return;
                        default:
                            return;
                    }
                case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                    switch (AnonymousClass1.$SwitchMap$com$catfiz$svcpersistent$TaskDatabaseExecutor$TaskDatabaseOperation[this.mDatabaseOperation.ordinal()]) {
                        case e.b /*1*/:
                            taskDataStorage.storeP2PDownloadInfo(this.mP2PDownloadInfo);
                            return;
                        case e.c /*2*/:
                            taskDataStorage.deleteP2PDownloadInfo(this.mP2PDownloadInfo);
                            return;
                        default:
                            return;
                    }
                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                    switch (AnonymousClass1.$SwitchMap$com$catfiz$svcpersistent$TaskDatabaseExecutor$TaskDatabaseOperation[this.mDatabaseOperation.ordinal()]) {
                        case e.b /*1*/:
                            taskDataStorage.storeCommonMessageInfo(this.mCommonMessageInfo);
                            return;
                        case e.c /*2*/:
                            taskDataStorage.deleteCommonMessageInfo(this.mCommonMessageInfo);
                            return;
                        default:
                            return;
                    }
                default:
                    return;
            }
        }
    }
}
