package com.b.a.i.b;

import com.albus.util.AlbusModelObject;
import com.b.a.c.b;
import com.b.a.n;
import com.b.a.u;
import com.b.a.v;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public class e {
    protected static final int a = 3;
    protected static final int b = 57;
    private static final int c = 2;
    private static final int d = 8;
    private final b e;
    private final List f;
    private boolean g;
    private final int[] h;
    private final v i;

    public e(b bVar) {
        this(bVar, null);
    }

    public e(b bVar, v vVar) {
        this.e = bVar;
        this.f = new ArrayList();
        this.h = new int[5];
        this.i = vVar;
    }

    private float a(int i, int i2, int i3, int i4) {
        b bVar = this.e;
        int f = bVar.f();
        int[] c = c();
        int i5 = i;
        while (i5 >= 0 && bVar.a(i2, i5)) {
            c[c] = c[c] + 1;
            i5--;
        }
        if (i5 < 0) {
            return Float.NaN;
        }
        while (i5 >= 0 && !bVar.a(i2, i5) && c[1] <= i3) {
            c[1] = c[1] + 1;
            i5--;
        }
        if (i5 < 0 || c[1] > i3) {
            return Float.NaN;
        }
        while (i5 >= 0 && bVar.a(i2, i5) && c[0] <= i3) {
            c[0] = c[0] + 1;
            i5--;
        }
        if (c[0] > i3) {
            return Float.NaN;
        }
        i5 = i + 1;
        while (i5 < f && bVar.a(i2, i5)) {
            c[c] = c[c] + 1;
            i5++;
        }
        if (i5 == f) {
            return Float.NaN;
        }
        while (i5 < f && !bVar.a(i2, i5) && c[a] < i3) {
            c[a] = c[a] + 1;
            i5++;
        }
        if (i5 == f || c[a] >= i3) {
            return Float.NaN;
        }
        while (i5 < f && bVar.a(i2, i5) && c[4] < i3) {
            c[4] = c[4] + 1;
            i5++;
        }
        return (c[4] >= i3 || Math.abs(((((c[0] + c[1]) + c[c]) + c[a]) + c[4]) - i4) * 5 >= i4 * c || !a(c)) ? Float.NaN : a(c, i5);
    }

    private static float a(int[] iArr, int i) {
        return ((float) ((i - iArr[4]) - iArr[a])) - (((float) iArr[c]) / 2.0f);
    }

    protected static boolean a(int[] iArr) {
        int i;
        boolean z = true;
        int i2 = 0;
        for (i = 0; i < 5; i++) {
            int i3 = iArr[i];
            if (i3 == 0) {
                return false;
            }
            i2 += i3;
        }
        if (i2 < 7) {
            return false;
        }
        i = (i2 << d) / 7;
        i2 = i / c;
        if (Math.abs(i - (iArr[0] << d)) >= i2 || Math.abs(i - (iArr[1] << d)) >= i2 || Math.abs((i * a) - (iArr[c] << d)) >= i2 * a || Math.abs(i - (iArr[a] << d)) >= i2 || Math.abs(i - (iArr[4] << d)) >= i2) {
            z = false;
        }
        return z;
    }

    private float b(int i, int i2, int i3, int i4) {
        b bVar = this.e;
        int e = bVar.e();
        int[] c = c();
        int i5 = i;
        while (i5 >= 0 && bVar.a(i5, i2)) {
            c[c] = c[c] + 1;
            i5--;
        }
        if (i5 < 0) {
            return Float.NaN;
        }
        while (i5 >= 0 && !bVar.a(i5, i2) && c[1] <= i3) {
            c[1] = c[1] + 1;
            i5--;
        }
        if (i5 < 0 || c[1] > i3) {
            return Float.NaN;
        }
        while (i5 >= 0 && bVar.a(i5, i2) && c[0] <= i3) {
            c[0] = c[0] + 1;
            i5--;
        }
        if (c[0] > i3) {
            return Float.NaN;
        }
        i5 = i + 1;
        while (i5 < e && bVar.a(i5, i2)) {
            c[c] = c[c] + 1;
            i5++;
        }
        if (i5 == e) {
            return Float.NaN;
        }
        while (i5 < e && !bVar.a(i5, i2) && c[a] < i3) {
            c[a] = c[a] + 1;
            i5++;
        }
        if (i5 == e || c[a] >= i3) {
            return Float.NaN;
        }
        while (i5 < e && bVar.a(i5, i2) && c[4] < i3) {
            c[4] = c[4] + 1;
            i5++;
        }
        return (c[4] >= i3 || Math.abs(((((c[0] + c[1]) + c[c]) + c[a]) + c[4]) - i4) * 5 >= i4 || !a(c)) ? Float.NaN : a(c, i5);
    }

    private int[] c() {
        this.h[0] = 0;
        this.h[1] = 0;
        this.h[c] = 0;
        this.h[a] = 0;
        this.h[4] = 0;
        return this.h;
    }

    private int d() {
        if (this.f.size() <= 1) {
            return 0;
        }
        u uVar = null;
        for (u uVar2 : this.f) {
            u uVar22;
            if (uVar22.b() < c) {
                uVar22 = uVar;
            } else if (uVar != null) {
                this.g = true;
                return ((int) (Math.abs(uVar.getX() - uVar22.getX()) - Math.abs(uVar.getY() - uVar22.getY()))) / c;
            }
            uVar = uVar22;
        }
        return 0;
    }

    private boolean e() {
        float f = 0.0f;
        int size = this.f.size();
        float f2 = 0.0f;
        int i = 0;
        for (d dVar : this.f) {
            float a;
            int i2;
            if (dVar.b() >= c) {
                a = dVar.a() + f2;
                i2 = i + 1;
            } else {
                a = f2;
                i2 = i;
            }
            i = i2;
            f2 = a;
        }
        if (i < a) {
            return false;
        }
        float f3 = f2 / ((float) size);
        for (d dVar2 : this.f) {
            f += Math.abs(dVar2.a() - f3);
        }
        return f <= 0.05f * f2;
    }

    private d[] f() {
        float f = 0.0f;
        int size = this.f.size();
        if (size < a) {
            throw n.a();
        }
        if (size > a) {
            float a;
            float f2 = 0.0f;
            float f3 = 0.0f;
            for (d a2 : this.f) {
                a = a2.a();
                f3 += a;
                f2 = (a * a) + f2;
            }
            f3 /= (float) size;
            a = (float) Math.sqrt((double) ((f2 / ((float) size)) - (f3 * f3)));
            Collections.sort(this.f, new h(f3, null));
            float max = Math.max(AlbusModelObject.PROBABLY_SOFT_KEYBOARD_HEIGHT_RATIO * f3, a);
            int i = 0;
            while (i < this.f.size() && this.f.size() > a) {
                if (Math.abs(((d) this.f.get(i)).a() - f3) > max) {
                    this.f.remove(i);
                    i--;
                }
                i++;
            }
        }
        if (this.f.size() > a) {
            for (d a22 : this.f) {
                f += a22.a();
            }
            Collections.sort(this.f, new g(f / ((float) this.f.size()), null));
            this.f.subList(a, this.f.size()).clear();
        }
        d[] dVarArr = new d[a];
        dVarArr[0] = (d) this.f.get(0);
        dVarArr[1] = (d) this.f.get(1);
        dVarArr[c] = (d) this.f.get(c);
        return dVarArr;
    }

    protected final b a() {
        return this.e;
    }

    protected final boolean a(int[] iArr, int i, int i2) {
        boolean z = false;
        int i3 = (((iArr[0] + iArr[1]) + iArr[c]) + iArr[a]) + iArr[4];
        float a = a(iArr, i2);
        float a2 = a(i, (int) a, iArr[c], i3);
        if (Float.isNaN(a2)) {
            return false;
        }
        float b = b((int) a, (int) a2, iArr[c], i3);
        if (Float.isNaN(b)) {
            return false;
        }
        float f = ((float) i3) / 7.0f;
        for (int i4 = 0; i4 < this.f.size(); i4++) {
            d dVar = (d) this.f.get(i4);
            if (dVar.a(f, a2, b)) {
                this.f.set(i4, dVar.b(a2, b, f));
                z = true;
                break;
            }
        }
        if (!z) {
            u dVar2 = new d(b, a2, f);
            this.f.add(dVar2);
            if (this.i != null) {
                this.i.foundPossibleResultPoint(dVar2);
            }
        }
        return true;
    }

    final i b(Map map) {
        int i = (map == null || !map.containsKey(com.b.a.e.TRY_HARDER)) ? 0 : 1;
        int f = this.e.f();
        int e = this.e.e();
        int i2 = (f * a) / 228;
        i = (i2 < a || i != 0) ? a : i2;
        int[] iArr = new int[5];
        int i3 = i - 1;
        boolean z = false;
        int i4 = i;
        while (i3 < f && !r6) {
            iArr[0] = 0;
            iArr[1] = 0;
            iArr[c] = 0;
            iArr[a] = 0;
            iArr[4] = 0;
            i2 = 0;
            i = 0;
            while (i2 < e) {
                if (this.e.a(i2, i3)) {
                    if ((i & 1) == 1) {
                        i++;
                    }
                    iArr[i] = iArr[i] + 1;
                } else if ((i & 1) != 0) {
                    iArr[i] = iArr[i] + 1;
                } else if (i != 4) {
                    i++;
                    iArr[i] = iArr[i] + 1;
                } else if (!a(iArr)) {
                    iArr[0] = iArr[c];
                    iArr[1] = iArr[a];
                    iArr[c] = iArr[4];
                    iArr[a] = 1;
                    iArr[4] = 0;
                    i = a;
                } else if (a(iArr, i3, i2)) {
                    boolean e2;
                    if (this.g) {
                        e2 = e();
                    } else {
                        i = d();
                        if (i > iArr[c]) {
                            i2 = i3 + ((i - iArr[c]) - c);
                            i = e - 1;
                        } else {
                            i = i2;
                            i2 = i3;
                        }
                        i3 = i2;
                        i2 = i;
                        e2 = z;
                    }
                    iArr[0] = 0;
                    iArr[1] = 0;
                    iArr[c] = 0;
                    iArr[a] = 0;
                    iArr[4] = 0;
                    z = e2;
                    i4 = c;
                    i = 0;
                } else {
                    iArr[0] = iArr[c];
                    iArr[1] = iArr[a];
                    iArr[c] = iArr[4];
                    iArr[a] = 1;
                    iArr[4] = 0;
                    i = a;
                }
                i2++;
            }
            if (a(iArr) && a(iArr, i3, e)) {
                i4 = iArr[0];
                if (this.g) {
                    z = e();
                }
            }
            i3 += i4;
        }
        u[] f2 = f();
        u.orderBestPatterns(f2);
        return new i(f2);
    }

    protected final List b() {
        return this.f;
    }
}
