package com.b.a;

import com.b.a.c.a.a;

public class u {
    private final float x;
    private final float y;

    public u(float f, float f2) {
        this.x = f;
        this.y = f2;
    }

    private static float crossProductZ(u uVar, u uVar2, u uVar3) {
        float f = uVar2.x;
        float f2 = uVar2.y;
        return ((uVar3.x - f) * (uVar.y - f2)) - ((uVar.x - f) * (uVar3.y - f2));
    }

    public static float distance(u uVar, u uVar2) {
        return a.a(uVar.x, uVar.y, uVar2.x, uVar2.y);
    }

    public static void orderBestPatterns(u[] uVarArr) {
        u uVar;
        u uVar2;
        u uVar3;
        float distance = distance(uVarArr[0], uVarArr[1]);
        float distance2 = distance(uVarArr[1], uVarArr[2]);
        float distance3 = distance(uVarArr[0], uVarArr[2]);
        if (distance2 >= distance && distance2 >= distance3) {
            uVar = uVarArr[0];
            uVar2 = uVarArr[1];
            uVar3 = uVarArr[2];
        } else if (distance3 < distance2 || distance3 < distance) {
            uVar = uVarArr[2];
            uVar2 = uVarArr[0];
            uVar3 = uVarArr[1];
        } else {
            uVar = uVarArr[1];
            uVar2 = uVarArr[0];
            uVar3 = uVarArr[2];
        }
        if (crossProductZ(uVar2, uVar, uVar3) >= 0.0f) {
            u uVar4 = uVar3;
            uVar3 = uVar2;
            uVar2 = uVar4;
        }
        uVarArr[0] = uVar3;
        uVarArr[1] = uVar;
        uVarArr[2] = uVar2;
    }

    public final boolean equals(Object obj) {
        if (!(obj instanceof u)) {
            return false;
        }
        u uVar = (u) obj;
        return this.x == uVar.x && this.y == uVar.y;
    }

    public final float getX() {
        return this.x;
    }

    public final float getY() {
        return this.y;
    }

    public final int hashCode() {
        return (Float.floatToIntBits(this.x) * 31) + Float.floatToIntBits(this.y);
    }

    public final String toString() {
        StringBuilder stringBuilder = new StringBuilder(25);
        stringBuilder.append('(');
        stringBuilder.append(this.x);
        stringBuilder.append(',');
        stringBuilder.append(this.y);
        stringBuilder.append(')');
        return stringBuilder.toString();
    }
}
