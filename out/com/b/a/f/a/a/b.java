package com.b.a.f.a.a;

import com.b.a.i.b.d;
import com.b.a.i.b.e;
import com.b.a.i.b.i;
import com.b.a.n;
import com.b.a.u;
import com.b.a.v;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

final class b extends e {
    private static final i[] c = new i[0];
    private static final float d = 180.0f;
    private static final float e = 9.0f;
    private static final float f = 0.05f;
    private static final float g = 0.5f;

    b(com.b.a.c.b bVar) {
        super(bVar);
    }

    b(com.b.a.c.b bVar, v vVar) {
        super(bVar, vVar);
    }

    private d[][] c() {
        List b = b();
        int size = b.size();
        if (size < 3) {
            throw n.a();
        } else if (size == 3) {
            d[][] dVarArr = new d[1][];
            dVarArr[0] = new d[]{(d) b.get(0), (d) b.get(1), (d) b.get(2)};
            return dVarArr;
        } else {
            Collections.sort(b, new d());
            List arrayList = new ArrayList();
            for (int i = 0; i < size - 2; i++) {
                d dVar = (d) b.get(i);
                if (dVar != null) {
                    for (int i2 = i + 1; i2 < size - 1; i2++) {
                        d dVar2 = (d) b.get(i2);
                        if (dVar2 != null) {
                            float a = (dVar.a() - dVar2.a()) / Math.min(dVar.a(), dVar2.a());
                            if (Math.abs(dVar.a() - dVar2.a()) > g && a >= f) {
                                break;
                            }
                            for (int i3 = i2 + 1; i3 < size; i3++) {
                                d dVar3 = (d) b.get(i3);
                                if (dVar3 != null) {
                                    float a2 = (dVar2.a() - dVar3.a()) / Math.min(dVar2.a(), dVar3.a());
                                    if (Math.abs(dVar2.a() - dVar3.a()) > g && a2 >= f) {
                                        break;
                                    }
                                    Object obj = new d[]{dVar, dVar2, dVar3};
                                    u.orderBestPatterns(obj);
                                    i iVar = new i(obj);
                                    float distance = u.distance(iVar.b(), iVar.a());
                                    float distance2 = u.distance(iVar.c(), iVar.a());
                                    a = u.distance(iVar.b(), iVar.c());
                                    float a3 = (distance + a) / (dVar.a() * 2.0f);
                                    if (a3 <= d && a3 >= e && Math.abs((distance - a) / Math.min(distance, a)) < 0.1f) {
                                        a = (float) Math.sqrt((double) ((a * a) + (distance * distance)));
                                        if (Math.abs((distance2 - a) / Math.min(distance2, a)) < 0.1f) {
                                            arrayList.add(obj);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!arrayList.isEmpty()) {
                return (d[][]) arrayList.toArray(new d[arrayList.size()][]);
            }
            throw n.a();
        }
    }

    public i[] a(Map map) {
        int i = 0;
        int i2 = (map == null || !map.containsKey(com.b.a.e.TRY_HARDER)) ? 0 : 1;
        com.b.a.c.b a = a();
        int f = a.f();
        int e = a.e();
        int i3 = (int) ((((float) f) / 228.0f) * 3.0f);
        i2 = (i3 < 3 || i2 != 0) ? 3 : i3;
        int[] iArr = new int[5];
        int i4 = i2 - 1;
        while (i4 < f) {
            iArr[0] = 0;
            iArr[1] = 0;
            iArr[2] = 0;
            iArr[3] = 0;
            iArr[4] = 0;
            int i5 = 0;
            i3 = 0;
            while (i5 < e) {
                if (a.a(i5, i4)) {
                    if ((i3 & 1) == 1) {
                        i3++;
                    }
                    iArr[i3] = iArr[i3] + 1;
                } else if ((i3 & 1) != 0) {
                    iArr[i3] = iArr[i3] + 1;
                } else if (i3 != 4) {
                    i3++;
                    iArr[i3] = iArr[i3] + 1;
                } else if (e.a(iArr) && a(iArr, i4, i5)) {
                    iArr[0] = 0;
                    iArr[1] = 0;
                    iArr[2] = 0;
                    iArr[3] = 0;
                    iArr[4] = 0;
                    i3 = 0;
                } else {
                    iArr[0] = iArr[2];
                    iArr[1] = iArr[3];
                    iArr[2] = iArr[4];
                    iArr[3] = 1;
                    iArr[4] = 0;
                    i3 = 3;
                }
                i5++;
            }
            if (e.a(iArr)) {
                a(iArr, i4, e);
            }
            i4 += i2;
        }
        d[][] c = c();
        List arrayList = new ArrayList();
        i3 = c.length;
        while (i < i3) {
            u[] uVarArr = c[i];
            u.orderBestPatterns(uVarArr);
            arrayList.add(new i(uVarArr));
            i++;
        }
        return arrayList.isEmpty() ? c : (i[]) arrayList.toArray(new i[arrayList.size()]);
    }
}
