package com.albus.view.draggablepanel.transformer;

import android.view.View;
import android.widget.RelativeLayout.LayoutParams;

class ResizeTransformer extends Transformer {
    private final LayoutParams layoutParams;

    ResizeTransformer(View view, View view2) {
        super(view, view2);
        this.layoutParams = (LayoutParams) view.getLayoutParams();
    }

    private int getViewRightPosition(float f) {
        return (int) (((float) getOriginalWidth()) - (((float) getMarginRight()) * f));
    }

    public int getMinHeightPlusMargin() {
        return (int) ((((float) getOriginalHeight()) * (1.0f - (1.0f / getYScaleFactor()))) + ((float) getMarginBottom()));
    }

    public int getMinWidthPlusMarginRight() {
        return (int) ((((float) getOriginalWidth()) * (1.0f - (1.0f / getXScaleFactor()))) + ((float) getMarginRight()));
    }

    public boolean isNextToLeftBound() {
        return ((double) (getView().getLeft() - getMarginRight())) < ((double) getParentView().getWidth()) * 0.05d;
    }

    public boolean isNextToRightBound() {
        return ((double) (getView().getLeft() - getMarginRight())) > ((double) getParentView().getWidth()) * 0.75d;
    }

    public boolean isViewAtBottom() {
        return getView().getBottom() + getMarginBottom() == getParentView().getHeight();
    }

    public boolean isViewAtRight() {
        return getView().getRight() + getMarginRight() == getParentView().getWidth();
    }

    public void updatePosition(float f) {
        int viewRightPosition = getViewRightPosition(f);
        int i = viewRightPosition - this.layoutParams.width;
        int top = getView().getTop();
        getView().layout(i, top, viewRightPosition, this.layoutParams.height + top);
    }

    public void updateScale(float f) {
        this.layoutParams.width = (int) (((float) getOriginalWidth()) * (1.0f - (f / getXScaleFactor())));
        this.layoutParams.height = (int) (((float) getOriginalHeight()) * (1.0f - (f / getYScaleFactor())));
        getView().setLayoutParams(this.layoutParams);
    }
}
