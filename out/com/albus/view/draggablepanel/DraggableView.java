package com.albus.view.draggablepanel;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.drawable.Drawable;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.view.MotionEventCompat;
import android.support.v4.view.ViewCompat;
import android.support.v4.widget.ViewDragHelper;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.widget.RelativeLayout;
import com.albus.view.draggablepanel.transformer.Transformer;
import com.albus.view.draggablepanel.transformer.TransformerFactory;
import com.catfiz.R;
import com.catfiz.consts.CatfizImageSize;
import org.apache.http.conn.routing.HttpRouteDirector;

public class DraggableView extends RelativeLayout {
    private static final boolean DEFAULT_ENABLE_CLICK_TO_MAXIMIZE = false;
    private static final boolean DEFAULT_ENABLE_CLICK_TO_MINIMIZE = false;
    private static final boolean DEFAULT_ENABLE_HORIZONTAL_ALPHA_EFFECT = true;
    private static final boolean DEFAULT_ENABLE_TOUCH_LISTENER = true;
    private static final int DEFAULT_SCALE_FACTOR = 2;
    private static final int DEFAULT_TOP_VIEW_HEIGHT = -1;
    private static final int DEFAULT_TOP_VIEW_MARGIN = 30;
    private static final boolean DEFAULT_TOP_VIEW_RESIZE = false;
    private static final int INVALID_POINTER = -1;
    private static final float MIN_SLIDE_OFFSET = 0.1f;
    private static final int MIN_SLIDING_DISTANCE_ON_CLICK = 10;
    private static final int ONE_HUNDRED = 100;
    private static final float SENSITIVITY = 1.0f;
    private static final float SLIDE_BOTTOM = 1.0f;
    private static final float SLIDE_TOP = 0.0f;
    private int activePointerId = INVALID_POINTER;
    private TypedArray attributes;
    private View dragView;
    private boolean enableClickToMaximize;
    private boolean enableClickToMinimize;
    private boolean enableHorizontalAlphaEffect;
    private FragmentManager fragmentManager;
    private float lastTouchActionDownXPosition;
    private DraggableListener listener;
    private View secondView;
    private boolean topViewResize;
    private boolean touchEnabled;
    private Transformer transformer;
    private ViewDragHelper viewDragHelper;

    public DraggableView(Context context) {
        super(context);
    }

    public DraggableView(Context context, AttributeSet attributeSet) {
        super(context, attributeSet);
        initializeAttributes(attributeSet);
    }

    public DraggableView(Context context, AttributeSet attributeSet, int i) {
        super(context, attributeSet, i);
        initializeAttributes(attributeSet);
    }

    private void addFragmentToView(int i, Fragment fragment) {
        this.fragmentManager.beginTransaction().replace(i, fragment).commit();
    }

    private void analyzeTouchToMaximizeIfNeeded(MotionEvent motionEvent, boolean z) {
        switch (motionEvent.getAction()) {
            case e.a /*0*/:
                this.lastTouchActionDownXPosition = motionEvent.getX();
                return;
            case e.b /*1*/:
                if (!shouldMaximizeOnClick(motionEvent, motionEvent.getX() - this.lastTouchActionDownXPosition, z)) {
                    return;
                }
                if (isMinimized() && isClickToMaximizeEnabled()) {
                    maximize();
                    return;
                } else if (isMaximized() && isClickToMinimizeEnabled()) {
                    minimize();
                    return;
                } else {
                    return;
                }
            default:
                return;
        }
    }

    private MotionEvent cloneMotionEventWithAction(MotionEvent motionEvent, int i) {
        return MotionEvent.obtain(motionEvent.getDownTime(), motionEvent.getEventTime(), i, motionEvent.getX(), motionEvent.getY(), motionEvent.getMetaState());
    }

    private int getDragViewMarginBottom() {
        return this.transformer.getMarginBottom();
    }

    private int getDragViewMarginRight() {
        return this.transformer.getMarginRight();
    }

    private float getHorizontalDragOffset() {
        return ((float) Math.abs(this.dragView.getLeft())) / ((float) getWidth());
    }

    private float getVerticalDragOffset() {
        return ((float) this.dragView.getTop()) / getVerticalDragRange();
    }

    private float getVerticalDragRange() {
        return (float) (getHeight() - this.transformer.getMinHeightPlusMargin());
    }

    private void initializeAttributes(AttributeSet attributeSet) {
        TypedArray obtainStyledAttributes = getContext().obtainStyledAttributes(attributeSet, R.styleable.draggable_view);
        this.enableHorizontalAlphaEffect = obtainStyledAttributes.getBoolean(7, DEFAULT_ENABLE_TOUCH_LISTENER);
        this.enableClickToMaximize = obtainStyledAttributes.getBoolean(8, DEFAULT_TOP_VIEW_RESIZE);
        this.enableClickToMinimize = obtainStyledAttributes.getBoolean(9, DEFAULT_TOP_VIEW_RESIZE);
        this.attributes = obtainStyledAttributes;
    }

    private void initializeTransformer(TypedArray typedArray) {
        this.topViewResize = typedArray.getBoolean(MIN_SLIDING_DISTANCE_ON_CLICK, DEFAULT_TOP_VIEW_RESIZE);
        this.transformer = new TransformerFactory().getTransformer(this.topViewResize, this.dragView, this);
        this.transformer.setViewHeight(typedArray.getDimensionPixelSize(DEFAULT_SCALE_FACTOR, INVALID_POINTER));
        this.transformer.setXScaleFactor(typedArray.getFloat(3, 2.0f));
        this.transformer.setYScaleFactor(typedArray.getFloat(4, 2.0f));
        this.transformer.setMarginRight(typedArray.getDimensionPixelSize(5, DEFAULT_TOP_VIEW_MARGIN));
        this.transformer.setMarginBottom(typedArray.getDimensionPixelSize(6, DEFAULT_TOP_VIEW_MARGIN));
    }

    private void initializeViewDragHelper() {
        this.viewDragHelper = ViewDragHelper.create(this, SLIDE_BOTTOM, new DraggableViewCallback(this, this.dragView));
    }

    private boolean isTouchEnabled() {
        return this.touchEnabled;
    }

    private boolean isViewHit(View view, int i, int i2) {
        int[] iArr = new int[DEFAULT_SCALE_FACTOR];
        view.getLocationOnScreen(iArr);
        int[] iArr2 = new int[DEFAULT_SCALE_FACTOR];
        getLocationOnScreen(iArr2);
        int i3 = iArr2[0] + i;
        int i4 = iArr2[1] + i2;
        return (i3 < iArr[0] || i3 >= iArr[0] + view.getWidth() || i4 < iArr[1] || i4 >= iArr[1] + view.getHeight()) ? DEFAULT_TOP_VIEW_RESIZE : DEFAULT_ENABLE_TOUCH_LISTENER;
    }

    private void mapGUI(TypedArray typedArray) {
        int resourceId = typedArray.getResourceId(0, R.id.drag_view);
        int resourceId2 = typedArray.getResourceId(1, R.id.second_view);
        this.dragView = findViewById(resourceId);
        this.secondView = findViewById(resourceId2);
    }

    private void notifyCloseToLeftListener() {
        if (this.listener != null) {
            this.listener.onClosedToLeft();
        }
    }

    private void notifyCloseToRightListener() {
        if (this.listener != null) {
            this.listener.onClosedToRight();
        }
    }

    private void notifyMaximizeToListener() {
        if (this.listener != null) {
            this.listener.onMaximized();
        }
    }

    private void notifyMinimizeToListener() {
        if (this.listener != null) {
            this.listener.onMinimized();
        }
    }

    private boolean smoothSlideTo(float f) {
        if (!this.viewDragHelper.smoothSlideViewTo(this.dragView, (int) (((float) (getWidth() - this.transformer.getMinWidthPlusMarginRight())) * f), (int) (((float) getPaddingTop()) + (getVerticalDragRange() * f)))) {
            return DEFAULT_TOP_VIEW_RESIZE;
        }
        ViewCompat.postInvalidateOnAnimation(this);
        return DEFAULT_ENABLE_TOUCH_LISTENER;
    }

    void attachBottomFragment(Fragment fragment) {
        addFragmentToView(R.id.second_view, fragment);
    }

    void attachTopFragment(Fragment fragment) {
        addFragmentToView(R.id.drag_view, fragment);
    }

    void changeBackgroundAlpha() {
        Drawable background = getBackground();
        if (background != null) {
            background.setAlpha((int) (CatfizImageSize.IMAGE_REQUIRE_SIZE_PROFILE_POOL * (SLIDE_BOTTOM - getVerticalDragOffset())));
        }
    }

    void changeDragViewPosition() {
        this.transformer.updatePosition(getVerticalDragOffset());
    }

    void changeDragViewScale() {
        this.transformer.updateScale(getVerticalDragOffset());
    }

    void changeDragViewViewAlpha() {
        float f = SLIDE_BOTTOM;
        if (this.enableHorizontalAlphaEffect) {
            float horizontalDragOffset = SLIDE_BOTTOM - getHorizontalDragOffset();
            if (horizontalDragOffset != 0.0f) {
                f = horizontalDragOffset;
            }
            ViewHelper.setAlpha(this.dragView, f);
        }
    }

    void changeSecondViewAlpha() {
        ViewHelper.setAlpha(this.secondView, SLIDE_BOTTOM - getVerticalDragOffset());
    }

    void changeSecondViewPosition() {
        ViewHelper.setY(this.secondView, (float) this.dragView.getBottom());
    }

    public void closeToLeft() {
        if (this.viewDragHelper.smoothSlideViewTo(this.dragView, -this.transformer.getOriginalWidth(), getHeight() - this.transformer.getMinHeightPlusMargin())) {
            ViewCompat.postInvalidateOnAnimation(this);
            notifyCloseToLeftListener();
        }
    }

    public void closeToRight() {
        if (this.viewDragHelper.smoothSlideViewTo(this.dragView, this.transformer.getOriginalWidth(), getHeight() - this.transformer.getMinHeightPlusMargin())) {
            ViewCompat.postInvalidateOnAnimation(this);
            notifyCloseToRightListener();
        }
    }

    public void computeScroll() {
        if (!isInEditMode() && this.viewDragHelper.continueSettling(DEFAULT_ENABLE_TOUCH_LISTENER)) {
            ViewCompat.postInvalidateOnAnimation(this);
        }
    }

    public int getDraggedViewHeightPlusMarginTop() {
        return this.transformer.getMinHeightPlusMargin();
    }

    public boolean isClickToMaximizeEnabled() {
        return this.enableClickToMaximize;
    }

    public boolean isClickToMinimizeEnabled() {
        return this.enableClickToMinimize;
    }

    public boolean isClosed() {
        return (isClosedAtLeft() || isClosedAtRight()) ? DEFAULT_ENABLE_TOUCH_LISTENER : DEFAULT_TOP_VIEW_RESIZE;
    }

    public boolean isClosedAtLeft() {
        return this.dragView.getRight() <= 0 ? DEFAULT_ENABLE_TOUCH_LISTENER : DEFAULT_TOP_VIEW_RESIZE;
    }

    public boolean isClosedAtRight() {
        return this.dragView.getLeft() >= getWidth() ? DEFAULT_ENABLE_TOUCH_LISTENER : DEFAULT_TOP_VIEW_RESIZE;
    }

    boolean isDragViewAboveTheMiddle() {
        return this.transformer.isAboveTheMiddle();
    }

    boolean isDragViewAtBottom() {
        return this.transformer.isViewAtBottom();
    }

    boolean isDragViewAtRight() {
        return this.transformer.isViewAtRight();
    }

    boolean isDragViewAtTop() {
        return this.transformer.isViewAtTop();
    }

    public boolean isMaximized() {
        return isDragViewAtTop();
    }

    public boolean isMinimized() {
        return (isDragViewAtBottom() && isDragViewAtRight()) ? DEFAULT_ENABLE_TOUCH_LISTENER : DEFAULT_TOP_VIEW_RESIZE;
    }

    boolean isNextToLeftBound() {
        return this.transformer.isNextToLeftBound();
    }

    boolean isNextToRightBound() {
        return this.transformer.isNextToRightBound();
    }

    public void maximize() {
        smoothSlideTo(0.0f);
        notifyMaximizeToListener();
    }

    public void minimize() {
        smoothSlideTo(SLIDE_BOTTOM);
        notifyMinimizeToListener();
    }

    protected void onFinishInflate() {
        super.onFinishInflate();
        if (!isInEditMode()) {
            mapGUI(this.attributes);
            initializeTransformer(this.attributes);
            this.attributes.recycle();
            initializeViewDragHelper();
        }
    }

    public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
        if (!isEnabled()) {
            return DEFAULT_TOP_VIEW_RESIZE;
        }
        switch (MotionEventCompat.getActionMasked(motionEvent) & MotionEventCompat.ACTION_MASK) {
            case e.a /*0*/:
                this.activePointerId = MotionEventCompat.getPointerId(motionEvent, MotionEventCompat.getActionIndex(motionEvent));
                if (this.activePointerId == INVALID_POINTER) {
                    return DEFAULT_TOP_VIEW_RESIZE;
                }
                break;
            case e.b /*1*/:
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                this.viewDragHelper.cancel();
                return DEFAULT_TOP_VIEW_RESIZE;
        }
        return (this.viewDragHelper.shouldInterceptTouchEvent(motionEvent) || this.viewDragHelper.isViewUnder(this.dragView, (int) motionEvent.getX(), (int) motionEvent.getY())) ? DEFAULT_ENABLE_TOUCH_LISTENER : DEFAULT_TOP_VIEW_RESIZE;
    }

    protected void onLayout(boolean z, int i, int i2, int i3, int i4) {
        if (isInEditMode()) {
            super.onLayout(z, i, i2, i3, i4);
        } else if (isDragViewAtTop()) {
            this.dragView.layout(i, i2, i3, this.transformer.getOriginalHeight());
            this.secondView.layout(i, this.transformer.getOriginalHeight(), i3, i4);
            ViewHelper.setY(this.dragView, (float) i2);
            ViewHelper.setY(this.secondView, (float) this.transformer.getOriginalHeight());
        } else {
            this.secondView.layout(i, this.transformer.getOriginalHeight(), i3, i4);
        }
    }

    public boolean onTouchEvent(MotionEvent motionEvent) {
        int actionMasked = MotionEventCompat.getActionMasked(motionEvent);
        if ((actionMasked & MotionEventCompat.ACTION_MASK) == 0) {
            this.activePointerId = MotionEventCompat.getPointerId(motionEvent, actionMasked);
        }
        if (this.activePointerId == INVALID_POINTER) {
            return DEFAULT_TOP_VIEW_RESIZE;
        }
        this.viewDragHelper.processTouchEvent(motionEvent);
        if (isClosed()) {
            return DEFAULT_TOP_VIEW_RESIZE;
        }
        boolean isViewHit = isViewHit(this.dragView, (int) motionEvent.getX(), (int) motionEvent.getY());
        boolean isViewHit2 = isViewHit(this.secondView, (int) motionEvent.getX(), (int) motionEvent.getY());
        analyzeTouchToMaximizeIfNeeded(motionEvent, isViewHit);
        if (isMaximized()) {
            this.dragView.dispatchTouchEvent(motionEvent);
        } else {
            this.dragView.dispatchTouchEvent(cloneMotionEventWithAction(motionEvent, 3));
        }
        return (isViewHit || isViewHit2) ? DEFAULT_ENABLE_TOUCH_LISTENER : DEFAULT_TOP_VIEW_RESIZE;
    }

    void restoreAlpha() {
        if (this.enableHorizontalAlphaEffect && ViewHelper.getAlpha(this.dragView) < SLIDE_BOTTOM) {
            ViewHelper.setAlpha(this.dragView, SLIDE_BOTTOM);
        }
    }

    public void setClickToMaximizeEnabled(boolean z) {
        this.enableClickToMaximize = z;
    }

    public void setClickToMinimizeEnabled(boolean z) {
        this.enableClickToMinimize = z;
    }

    public void setDraggableListener(DraggableListener draggableListener) {
        this.listener = draggableListener;
    }

    void setFragmentManager(FragmentManager fragmentManager) {
        this.fragmentManager = fragmentManager;
    }

    public void setHorizontalAlphaEffectEnabled(boolean z) {
        this.enableHorizontalAlphaEffect = z;
    }

    public void setTopViewHeight(int i) {
        this.transformer.setViewHeight(i);
    }

    public void setTopViewMarginBottom(int i) {
        this.transformer.setMarginBottom(i);
    }

    public void setTopViewMarginRight(int i) {
        this.transformer.setMarginRight(i);
    }

    public void setTopViewResize(boolean z) {
        this.topViewResize = z;
    }

    public void setTouchEnabled(boolean z) {
        this.touchEnabled = z;
    }

    public void setXTopViewScaleFactor(float f) {
        this.transformer.setXScaleFactor(f);
    }

    public void setYTopViewScaleFactor(float f) {
        this.transformer.setYScaleFactor(f);
    }

    public boolean shouldMaximizeOnClick(MotionEvent motionEvent, float f, boolean z) {
        return (Math.abs(f) >= 10.0f || motionEvent.getAction() == DEFAULT_SCALE_FACTOR || !z) ? DEFAULT_TOP_VIEW_RESIZE : DEFAULT_ENABLE_TOUCH_LISTENER;
    }

    public void slideHorizontally(float f, float f2, int i) {
        if (f > MIN_SLIDE_OFFSET && !isClosed() && isMaximized()) {
            minimize();
        }
        setTouchEnabled(f <= MIN_SLIDE_OFFSET ? DEFAULT_ENABLE_TOUCH_LISTENER : DEFAULT_TOP_VIEW_RESIZE);
        ViewHelper.setX(this, ((float) i) - Math.abs(f2));
    }
}
