package com.albus.view.draggablepanel;

import android.support.v4.widget.ViewDragHelper.Callback;
import android.view.View;

class DraggableViewCallback extends Callback {
    private static final int MINIMUM_DX_FOR_HORIZONTAL_DRAG = 5;
    private static final int MINIMUM_DY_FOR_VERTICAL_DRAG = 15;
    private static final float X_MIN_VELOCITY = 1500.0f;
    private static final float Y_MIN_VELOCITY = 1000.0f;
    private DraggableView draggableView;
    private View draggedView;

    public DraggableViewCallback(DraggableView draggableView, View view) {
        this.draggableView = draggableView;
        this.draggedView = view;
    }

    private void triggerOnReleaseActionsWhileHorizontalDrag(float f) {
        if (f < 0.0f && f <= -1500.0f) {
            this.draggableView.closeToLeft();
        } else if (f > 0.0f && f >= X_MIN_VELOCITY) {
            this.draggableView.closeToRight();
        } else if (this.draggableView.isNextToLeftBound()) {
            this.draggableView.closeToLeft();
        } else if (this.draggableView.isNextToRightBound()) {
            this.draggableView.closeToRight();
        } else {
            this.draggableView.minimize();
        }
    }

    private void triggerOnReleaseActionsWhileVerticalDrag(float f) {
        if (f < 0.0f && f <= -1000.0f) {
            this.draggableView.maximize();
        } else if (f > 0.0f && f >= Y_MIN_VELOCITY) {
            this.draggableView.minimize();
        } else if (this.draggableView.isDragViewAboveTheMiddle()) {
            this.draggableView.maximize();
        } else {
            this.draggableView.minimize();
        }
    }

    public int clampViewPositionHorizontal(View view, int i, int i2) {
        return (!this.draggableView.isMinimized() || Math.abs(i2) <= MINIMUM_DX_FOR_HORIZONTAL_DRAG) ? (!this.draggableView.isDragViewAtBottom() || this.draggableView.isDragViewAtRight()) ? this.draggedView.getLeft() : i : i;
    }

    public int clampViewPositionVertical(View view, int i, int i2) {
        int height = this.draggableView.getHeight() - this.draggableView.getDraggedViewHeightPlusMarginTop();
        if ((!this.draggableView.isMinimized() || Math.abs(i2) < MINIMUM_DY_FOR_VERTICAL_DRAG) && (this.draggableView.isMinimized() || this.draggableView.isDragViewAtBottom())) {
            return height;
        }
        return Math.min(Math.max(i, this.draggableView.getPaddingTop()), (this.draggableView.getHeight() - this.draggableView.getDraggedViewHeightPlusMarginTop()) - this.draggedView.getPaddingBottom());
    }

    public void onViewPositionChanged(View view, int i, int i2, int i3, int i4) {
        if (this.draggableView.isDragViewAtBottom()) {
            this.draggableView.changeDragViewViewAlpha();
            return;
        }
        this.draggableView.restoreAlpha();
        this.draggableView.changeDragViewScale();
        this.draggableView.changeDragViewPosition();
        this.draggableView.changeSecondViewAlpha();
        this.draggableView.changeSecondViewPosition();
        this.draggableView.changeBackgroundAlpha();
    }

    public void onViewReleased(View view, float f, float f2) {
        super.onViewReleased(view, f, f2);
        if (!this.draggableView.isDragViewAtBottom() || this.draggableView.isDragViewAtRight()) {
            triggerOnReleaseActionsWhileVerticalDrag(f2);
        } else {
            triggerOnReleaseActionsWhileHorizontalDrag(f);
        }
    }

    public boolean tryCaptureView(View view, int i) {
        return view.equals(this.draggedView);
    }
}
