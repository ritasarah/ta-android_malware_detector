package com.albus.view;

import android.app.Activity;
import android.content.Context;
import android.graphics.Canvas;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.View.MeasureSpec;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.GridView;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.ListView.FixedViewInfo;
import java.util.ArrayList;
import java.util.Iterator;

public class HeaderGridView extends GridView implements OnScrollListener {
    private int initialTopPadding;
    private ListAdapter mAdapter;
    private Context mContext;
    private int mDisplayWidth = 0;
    private ArrayList mFooterViewInfos = new ArrayList();
    private ArrayList mHeaderViewInfos = new ArrayList();
    private int mScrollOfsset;
    private boolean mShowHeader = false;

    public HeaderGridView(Context context) {
        super(context);
        init(context);
    }

    public HeaderGridView(Context context, AttributeSet attributeSet) {
        super(context, attributeSet);
        init(context);
    }

    public HeaderGridView(Context context, AttributeSet attributeSet, int i) {
        super(context, attributeSet, i);
        init(context);
    }

    private void drawHeaders(Canvas canvas) {
        int i = -this.mScrollOfsset;
        int save = canvas.save();
        Iterator it = this.mHeaderViewInfos.iterator();
        int i2 = i;
        while (it.hasNext()) {
            View view = ((FixedViewInfo) it.next()).view;
            canvas.translate(0.0f, (float) i2);
            i = view.getMeasuredHeight();
            view.draw(canvas);
            i2 = i;
        }
        canvas.restoreToCount(save);
    }

    private int getTotalHeaderHeight() {
        Iterator it = this.mHeaderViewInfos.iterator();
        int i = 0;
        while (it.hasNext()) {
            i = ((FixedViewInfo) it.next()).view.getMeasuredHeight() + i;
        }
        return i;
    }

    private void init(Context context) {
        this.mContext = context;
        super.setOnScrollListener(this);
    }

    private void invalidateIfAnimating() {
        invalidate();
    }

    private void notifiyChanged() {
        requestLayout();
        invalidate();
    }

    private boolean removeFixedViewInfo(View view, ArrayList arrayList) {
        Object obj;
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            if (((FixedViewInfo) arrayList.get(i)).view == view) {
                setPadding(getPaddingLeft(), getPaddingTop() - view.getMeasuredHeight(), getPaddingRight(), getPaddingBottom());
                arrayList.remove(i);
                obj = 1;
                break;
            }
        }
        obj = null;
        return obj > null;
    }

    private void setupView(View view) {
        int i = (view.getRight() == 0 && view.getLeft() == 0 && view.getTop() == 0 && view.getBottom() == 0) ? 0 : 1;
        if (view.getMeasuredHeight() == 0 || i == 0) {
            if (this.mDisplayWidth == 0) {
                DisplayMetrics displayMetrics = new DisplayMetrics();
                ((Activity) getContext()).getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
                this.mDisplayWidth = displayMetrics.widthPixels;
            }
            view.measure(MeasureSpec.makeMeasureSpec(this.mDisplayWidth, RtlSpacingHelper.UNDEFINED), MeasureSpec.makeMeasureSpec(0, 0));
            view.layout(0, getTotalHeaderHeight(), view.getMeasuredWidth(), getTotalHeaderHeight() + view.getMeasuredHeight());
        }
    }

    public void addHeaderView(View view) {
        addHeaderView(view, null, false);
    }

    public void addHeaderView(View view, Object obj, boolean z) {
        ListView listView = new ListView(getContext());
        listView.getClass();
        FixedViewInfo fixedViewInfo = new FixedViewInfo(listView);
        fixedViewInfo.view = view;
        fixedViewInfo.data = obj;
        fixedViewInfo.isSelectable = z;
        this.mHeaderViewInfos.add(fixedViewInfo);
        setupView(view);
        int paddingTop = getPaddingTop();
        if (this.initialTopPadding == 0) {
            this.initialTopPadding = paddingTop;
        }
        setPadding(getPaddingLeft(), paddingTop + view.getMeasuredHeight(), getPaddingRight(), getPaddingBottom());
        notifiyChanged();
    }

    protected void dispatchDraw(Canvas canvas) {
        super.dispatchDraw(canvas);
        drawHeaders(canvas);
    }

    public int getHeaderViewCount() {
        return this.mHeaderViewInfos.size();
    }

    public void onScroll(AbsListView absListView, int i, int i2, int i3) {
        if (getAdapter() != null) {
            int childCount = getChildCount();
            int totalHeaderHeight = getTotalHeaderHeight();
            if (childCount <= 0 || i != 0) {
                this.mShowHeader = false;
            } else {
                View childAt = getChildAt(0);
                this.mScrollOfsset = (totalHeaderHeight - childAt.getTop()) + this.initialTopPadding;
                if (childAt.getTop() >= 0) {
                    this.mShowHeader = true;
                } else {
                    this.mShowHeader = false;
                }
            }
            if (this.mShowHeader) {
                invalidateIfAnimating();
            }
        }
    }

    public void onScrollStateChanged(AbsListView absListView, int i) {
    }

    public boolean removeHeaderView(View view) {
        return this.mHeaderViewInfos.size() > 0 ? removeFixedViewInfo(view, this.mHeaderViewInfos) : false;
    }
}
