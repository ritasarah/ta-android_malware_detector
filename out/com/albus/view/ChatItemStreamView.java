package com.albus.view;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.albus.activity.ChatGroupConvActivity;
import com.albus.activity.VideoPlayerActivity;
import com.albus.media.ThumbnailLoader;
import com.albus.util.AlbusModelObject;
import com.catfiz.R;
import com.catfiz.model.Message;
import com.catfiz.service.CatfishService;
import com.catfiz.util.Log;
import java.lang.ref.WeakReference;

public class ChatItemStreamView extends RelativeLayout {
    public static final String GLOBAL_NS = "http://schemas.android.com/apk/res/android";
    public static final String STREAM_FL = "fl=";
    public static final String STREAM_USER = "user=DLFIZZAPP";
    private static final String TAG = "ChatItemVideoPlayerView";
    private boolean isFromFile = false;
    private Button mBtnCancel = null;
    private Activity mContext = null;
    private int mCurrentPos = 0;
    private String mDesc = null;
    private DownloadVideo mDlVideo;
    private Drawable mDrawable = null;
    private String mFileName = null;
    private String mFizzlink = null;
    private String mFlPath = null;
    private long mIdSequence = 0;
    private boolean mIsFullScreen;
    private ImageView mIvThumb = null;
    private LinearLayout mLlContainer = null;
    private LinearLayout mLlDownload = null;
    private LinearLayout mLlPlayFile = null;
    private LinearLayout mLlProgress = null;
    private LinearLayout mLlSizeDl;
    private LinearLayout mLlStream = null;
    private LocalThumbnailLoader mLocalThumbLoader;
    private Message mMessage = null;
    private ProgressBar mProgressbar = null;
    private String mRoom = null;
    private String mSender = null;
    private String mThumbPath = null;
    private TextView mTvDuration = null;
    private TextView mTvPlay;
    private TextView mTvProgress = null;
    private TextView mTvSizeDl;
    private TextView mTvStream;
    private RelativeLayout rlRoot;
    private RelativeLayout rlThumbnail;

    public interface DownloadVideo {
        void onDownloadVideo();
    }

    class LocalThumbnailLoader extends ThumbnailLoader {
        private WeakReference mLocalCache = null;

        public LocalThumbnailLoader(Context context, int i) {
            super(context, i);
        }

        public void clearLocalCache() {
            this.mLocalCache = null;
        }

        protected Bitmap getBitmapFromLocalCache(Object obj) {
            if (isInLocalCache(String.valueOf(obj))) {
                return this.mLocalCache != null ? (Bitmap) this.mLocalCache.get() : null;
            } else {
                clearLocalCache();
                return null;
            }
        }

        protected void putBitmapInLocalCache(Object obj, Bitmap bitmap) {
            super.putBitmapInLocalCache(obj, bitmap);
            this.mLocalCache = new WeakReference(bitmap);
            setFadeInRefresh(false);
        }
    }

    public ChatItemStreamView(Context context) {
        super(context);
    }

    public ChatItemStreamView(Context context, AttributeSet attributeSet) {
        super(context, attributeSet);
        if (context instanceof Activity) {
            this.mContext = (Activity) context;
        }
        this.rlRoot = (RelativeLayout) ((LayoutInflater) context.getSystemService("layout_inflater")).inflate(R.layout.item_chat_stream, this);
        this.mLocalThumbLoader = new LocalThumbnailLoader(context, attributeSet.getAttributeIntValue(GLOBAL_NS, "src", R.drawable.df_img_holder));
        initView();
    }

    public ChatItemStreamView(Context context, AttributeSet attributeSet, int i) {
        super(context, attributeSet, i);
        this.rlRoot = (RelativeLayout) ((LayoutInflater) context.getSystemService("layout_inflater")).inflate(R.layout.item_chat_stream, this);
        this.mLocalThumbLoader = new LocalThumbnailLoader(context, attributeSet.getAttributeIntValue(GLOBAL_NS, "src", R.drawable.df_img_holder));
        initView();
    }

    private void initView() {
        this.rlRoot = (RelativeLayout) findViewById(R.id.rl_root);
        this.rlThumbnail = (RelativeLayout) findViewById(R.id.rl_thumbnail);
        this.mIvThumb = (ImageView) findViewById(R.id.iv_thumb_holder);
        this.mLlProgress = (LinearLayout) findViewById(R.id.ll_progress);
        this.mProgressbar = (ProgressBar) findViewById(R.id.pb_stream);
        this.mTvProgress = (TextView) findViewById(R.id.tv_progress);
        this.mLlContainer = (LinearLayout) findViewById(R.id.ll_container_download);
        this.mLlStream = (LinearLayout) findViewById(R.id.ll_stream);
        this.mLlDownload = (LinearLayout) findViewById(R.id.ll_download);
        this.mLlPlayFile = (LinearLayout) findViewById(R.id.ll_play_file);
        this.mBtnCancel = (Button) findViewById(R.id.btn_cancel);
        this.mTvDuration = (TextView) findViewById(R.id.tv_duration);
        this.mLlSizeDl = (LinearLayout) findViewById(R.id.ll_size_n_dl);
        this.mTvSizeDl = (TextView) findViewById(R.id.tv_size_file_dl);
        this.mTvStream = (TextView) findViewById(R.id.tv_stream);
        this.mTvPlay = (TextView) findViewById(R.id.tv_play);
        this.mLlDownload.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                if (ChatItemStreamView.this.mContext instanceof ChatGroupConvActivity) {
                    ChatItemStreamView.this.onProgress();
                    if (ChatItemStreamView.this.mMessage != null) {
                        ((ChatGroupConvActivity) ChatItemStreamView.this.mContext).downloadFizzlink(ChatItemStreamView.this.mMessage);
                    } else {
                        Log.d(ChatItemStreamView.TAG, "Failed to download Fizzlink");
                    }
                }
            }
        });
        this.mLlStream.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                Intent intent = new Intent(ChatItemStreamView.this.mContext, VideoPlayerActivity.class);
                intent.putExtra(AlbusModelObject.INTENT_FIZZLINK, ChatItemStreamView.this.mFizzlink);
                intent.putExtra(AlbusModelObject.INTENT_FLPATH, ChatItemStreamView.this.mFlPath);
                intent.putExtra(AlbusModelObject.INTENT_SEEKPOS, ChatItemStreamView.this.mCurrentPos);
                intent.putExtra(AlbusModelObject.INTENT_THUMBPATH, ChatItemStreamView.this.mThumbPath);
                intent.putExtra(AlbusModelObject.INTENT_IDSEQUENCE, ChatItemStreamView.this.mIdSequence);
                intent.putExtra(AlbusModelObject.INTENT_ROOM, ChatItemStreamView.this.mRoom);
                intent.putExtra(AlbusModelObject.SENDER_NAME, ChatItemStreamView.this.mSender);
                intent.putExtra(AlbusModelObject.INTENT_DESC, ChatItemStreamView.this.mDesc);
                intent.putExtra(AlbusModelObject.INTENT_IS_FROM_FILE, false);
                ChatItemStreamView.this.mContext.startActivityForResult(intent, 40);
            }
        });
        this.mLlPlayFile.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                Intent intent = new Intent(ChatItemStreamView.this.mContext, VideoPlayerActivity.class);
                intent.putExtra(AlbusModelObject.INTENT_FIZZLINK, ChatItemStreamView.this.mFizzlink);
                intent.putExtra(AlbusModelObject.INTENT_FLPATH, ChatItemStreamView.this.mFlPath);
                intent.putExtra(AlbusModelObject.INTENT_SEEKPOS, ChatItemStreamView.this.mCurrentPos);
                intent.putExtra(AlbusModelObject.INTENT_THUMBPATH, ChatItemStreamView.this.mThumbPath);
                intent.putExtra(AlbusModelObject.INTENT_IDSEQUENCE, ChatItemStreamView.this.mIdSequence);
                intent.putExtra(AlbusModelObject.INTENT_ROOM, ChatItemStreamView.this.mRoom);
                intent.putExtra(AlbusModelObject.SENDER_NAME, ChatItemStreamView.this.mSender);
                intent.putExtra(AlbusModelObject.INTENT_DESC, ChatItemStreamView.this.mDesc);
                intent.putExtra(AlbusModelObject.INTENT_IS_FROM_FILE, true);
                ChatItemStreamView.this.mContext.startActivityForResult(intent, 40);
            }
        });
        this.mBtnCancel.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                Log.d(ChatItemStreamView.TAG, "cancel prepare clicked");
                if (ChatItemStreamView.this.mContext instanceof ChatGroupConvActivity) {
                    Log.d(ChatItemStreamView.TAG, "cancel is clicked");
                    ((ChatGroupConvActivity) ChatItemStreamView.this.mContext).cancelFizzlink(ChatItemStreamView.this.mIdSequence, ChatItemStreamView.this.mFizzlink);
                }
            }
        });
        this.mLlSizeDl.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                ChatItemStreamView.this.mDlVideo.onDownloadVideo();
            }
        });
    }

    private void onProgress() {
        this.mLlProgress.setVisibility(0);
        this.mLlContainer.setVisibility(8);
        this.mLlPlayFile.setVisibility(8);
        this.mBtnCancel.setVisibility(0);
    }

    private void setDownloaded(boolean z) {
        this.mLlContainer.setVisibility(8);
        this.mLlPlayFile.setVisibility(0);
        this.mLlProgress.setVisibility(8);
        this.mBtnCancel.setVisibility(8);
        this.mTvPlay.setText(this.mContext.getResources().getString(R.string.play_video_stream));
    }

    public void hideBtnDownload() {
        this.mLlSizeDl.setVisibility(8);
    }

    public void setDownloadSize(String str) {
        this.mTvSizeDl.setText(str);
    }

    public void setDownloadVideoListener(DownloadVideo downloadVideo) {
        this.mDlVideo = downloadVideo;
    }

    public void setFilePath(String str) {
        this.mFlPath = str;
    }

    public void setParams(String str, long j, String str2, String str3, String str4, boolean z) {
        Log.d(TAG, "filepath: " + str);
        this.mFlPath = str;
        this.mIdSequence = j;
        this.mRoom = str2;
        this.mSender = str3;
        this.mDesc = str4;
        Log.d(TAG, "sender : " + str3 + " desc : " + this.mDesc);
        this.isFromFile = true;
        setDownloaded(z);
    }

    public void setParamsStream(Message message, String str, long j, String str2, String str3, String str4, boolean z) {
        this.mFlPath = ("http://" + CatfishService.getStreamingServer() + "/dlfizzlink?") + STREAM_USER + "&" + STREAM_FL + str;
        this.mMessage = message;
        this.mIdSequence = j;
        this.mRoom = str2;
        this.mSender = str3;
        this.mDesc = str4;
        Log.d(TAG, "sender : " + str3 + " desc : " + this.mDesc);
        this.mFizzlink = str;
        Log.d(TAG, "Video URL :" + this.mFlPath);
        setUnDownloaded(z);
    }

    public void setProgress(int i, int i2) {
        if (i2 == 0 || i2 == 1) {
            onProgress();
            this.mProgressbar.setProgress(i);
            this.mTvProgress.setText(i + "%");
            return;
        }
        setDownloaded(false);
    }

    public void setThumbnail(String str) {
        Log.d(TAG, "path of thumbnail : " + str);
        this.mThumbPath = str;
        if (this.mThumbPath == null) {
            this.mLocalThumbLoader.loadImage(null, this.mIvThumb);
            return;
        }
        this.mLocalThumbLoader.loadImage((Object) Uri.parse("file://" + this.mThumbPath), this.mIvThumb);
    }

    public void setUnDownloaded(boolean z) {
        this.mLlContainer.setVisibility(0);
        this.mLlPlayFile.setVisibility(8);
        this.mLlProgress.setVisibility(8);
        this.mBtnCancel.setVisibility(8);
        this.mTvStream.setText(this.mContext.getResources().getString(R.string.play_stream));
    }

    public void showBtnDownload() {
        this.mLlSizeDl.setVisibility(0);
    }
}
