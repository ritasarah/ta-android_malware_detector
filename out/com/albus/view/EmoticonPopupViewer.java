package com.albus.view;

import android.content.Context;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Rect;
import android.net.Uri;
import android.os.Handler;
import android.os.Looper;
import android.support.v4.view.MotionEventCompat;
import android.support.v4.view.ViewCompat;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnKeyListener;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout.LayoutParams;
import com.catfiz.R;
import com.catfiz.util.Log;
import java.lang.reflect.Array;

public class EmoticonPopupViewer extends EmoPopUpWindow {
    private static final int EMOTICON_ZOOM_SIZE = 30;
    private static final String TAG = "EmoticonPopupViewer";
    private static Handler mHandler = new Handler(Looper.getMainLooper());
    private boolean isShow = false;
    private LayoutInflater mInflater;
    private ImageView mIvEmoticon;
    private Rect mRect = null;
    private int mResId;
    private int mXPos;
    private int mYPos;

    public EmoticonPopupViewer(Context context, int i, Rect rect) {
        super(context);
        this.mRect = rect;
        this.mResId = i;
    }

    private String getRealPathFromURI(Uri uri) {
        Cursor query = this.mContext.getContentResolver().query(uri, null, null, null, null);
        if (query == null) {
            return uri.getPath();
        }
        query.moveToFirst();
        return query.getString(query.getColumnIndex("_data"));
    }

    public Bitmap fastblur(Bitmap bitmap, int i) {
        Bitmap copy = bitmap.copy(bitmap.getConfig(), true);
        if (i < 1) {
            return null;
        }
        int i2;
        int i3;
        int width = copy.getWidth();
        int height = copy.getHeight();
        int[] iArr = new int[(width * height)];
        Log.e("pix", width + " " + height + " " + iArr.length);
        copy.getPixels(iArr, 0, width, 0, 0, width, height);
        int i4 = width - 1;
        int i5 = height - 1;
        int i6 = width * height;
        int i7 = (i + i) + 1;
        int[] iArr2 = new int[i6];
        int[] iArr3 = new int[i6];
        int[] iArr4 = new int[i6];
        int[] iArr5 = new int[Math.max(width, height)];
        i6 = (i7 + 1) >> 1;
        int i8 = i6 * i6;
        int[] iArr6 = new int[(i8 * AccessibilityNodeInfoCompat.ACTION_NEXT_AT_MOVEMENT_GRANULARITY)];
        for (i6 = 0; i6 < i8 * AccessibilityNodeInfoCompat.ACTION_NEXT_AT_MOVEMENT_GRANULARITY; i6++) {
            iArr6[i6] = i6 / i8;
        }
        int[][] iArr7 = (int[][]) Array.newInstance(Integer.TYPE, new int[]{i7, 3});
        int i9 = i + 1;
        int i10 = 0;
        int i11 = 0;
        for (i2 = 0; i2 < height; i2++) {
            int i12;
            i8 = 0;
            int i13 = 0;
            int i14 = 0;
            int i15 = 0;
            int i16 = 0;
            int i17 = 0;
            int i18 = 0;
            int i19 = 0;
            int i20 = 0;
            for (i3 = -i; i3 <= i; i3++) {
                i12 = iArr[Math.min(i4, Math.max(i3, 0)) + i11];
                int[] iArr8 = iArr7[i3 + i];
                iArr8[0] = (16711680 & i12) >> 16;
                iArr8[1] = (MotionEventCompat.ACTION_POINTER_INDEX_MASK & i12) >> 8;
                iArr8[2] = i12 & MotionEventCompat.ACTION_MASK;
                i12 = i9 - Math.abs(i3);
                i19 += iArr8[0] * i12;
                i18 += iArr8[1] * i12;
                i17 += i12 * iArr8[2];
                if (i3 > 0) {
                    i13 += iArr8[0];
                    i20 += iArr8[1];
                    i8 += iArr8[2];
                } else {
                    i16 += iArr8[0];
                    i15 += iArr8[1];
                    i14 += iArr8[2];
                }
            }
            i12 = i19;
            i19 = i18;
            i18 = i17;
            i3 = i11;
            i11 = i;
            for (i17 = 0; i17 < width; i17++) {
                iArr2[i3] = iArr6[i12];
                iArr3[i3] = iArr6[i19];
                iArr4[i3] = iArr6[i18];
                i12 -= i16;
                i19 -= i15;
                i18 -= i14;
                iArr8 = iArr7[((i11 - i) + i7) % i7];
                i16 -= iArr8[0];
                i15 -= iArr8[1];
                i14 -= iArr8[2];
                if (i2 == 0) {
                    iArr5[i17] = Math.min((i17 + i) + 1, i4);
                }
                int i21 = iArr[iArr5[i17] + i10];
                iArr8[0] = (16711680 & i21) >> 16;
                iArr8[1] = (MotionEventCompat.ACTION_POINTER_INDEX_MASK & i21) >> 8;
                iArr8[2] = i21 & MotionEventCompat.ACTION_MASK;
                i13 += iArr8[0];
                i20 += iArr8[1];
                i8 += iArr8[2];
                i12 += i13;
                i19 += i20;
                i18 += i8;
                i11 = (i11 + 1) % i7;
                iArr8 = iArr7[i11 % i7];
                i16 += iArr8[0];
                i15 += iArr8[1];
                i14 += iArr8[2];
                i13 -= iArr8[0];
                i20 -= iArr8[1];
                i8 -= iArr8[2];
                i3++;
            }
            i10 += width;
            i11 = i3;
        }
        for (i17 = 0; i17 < width; i17++) {
            i20 = 0;
            i8 = (-i) * width;
            i14 = 0;
            i15 = 0;
            i16 = 0;
            i11 = 0;
            i12 = -i;
            i3 = 0;
            i18 = 0;
            i19 = 0;
            i13 = 0;
            while (i12 <= i) {
                i2 = Math.max(0, i8) + i17;
                int[] iArr9 = iArr7[i12 + i];
                iArr9[0] = iArr2[i2];
                iArr9[1] = iArr3[i2];
                iArr9[2] = iArr4[i2];
                int abs = i9 - Math.abs(i12);
                i10 = (iArr2[i2] * abs) + i19;
                i19 = (iArr3[i2] * abs) + i18;
                i18 = (iArr4[i2] * abs) + i3;
                if (i12 > 0) {
                    i14 += iArr9[0];
                    i13 += iArr9[1];
                    i20 += iArr9[2];
                } else {
                    i11 += iArr9[0];
                    i16 += iArr9[1];
                    i15 += iArr9[2];
                }
                if (i12 < i5) {
                    i8 += width;
                }
                i12++;
                i3 = i18;
                i18 = i19;
                i19 = i10;
            }
            i12 = i18;
            i10 = i19;
            i19 = i3;
            i3 = i17;
            i8 = i20;
            i20 = i13;
            i13 = i14;
            i14 = i15;
            i15 = i16;
            i16 = i11;
            i11 = i;
            for (i18 = 0; i18 < height; i18++) {
                iArr[i3] = (((ViewCompat.MEASURED_STATE_MASK & iArr[i3]) | (iArr6[i10] << 16)) | (iArr6[i12] << 8)) | iArr6[i19];
                i10 -= i16;
                i12 -= i15;
                i19 -= i14;
                int[] iArr10 = iArr7[((i11 - i) + i7) % i7];
                i16 -= iArr10[0];
                i15 -= iArr10[1];
                i14 -= iArr10[2];
                if (i17 == 0) {
                    iArr5[i18] = Math.min(i18 + i9, i5) * width;
                }
                i4 = iArr5[i18] + i17;
                iArr10[0] = iArr2[i4];
                iArr10[1] = iArr3[i4];
                iArr10[2] = iArr4[i4];
                i13 += iArr10[0];
                i20 += iArr10[1];
                i8 += iArr10[2];
                i10 += i13;
                i12 += i20;
                i19 += i8;
                i11 = (i11 + 1) % i7;
                iArr10 = iArr7[i11];
                i16 += iArr10[0];
                i15 += iArr10[1];
                i14 += iArr10[2];
                i13 -= iArr10[0];
                i20 -= iArr10[1];
                i8 -= iArr10[2];
                i3 += width;
            }
        }
        Log.e("pix", width + " " + height + " " + iArr.length);
        copy.setPixels(iArr, 0, width, 0, 0, width, height);
        return copy;
    }

    public void onDismiss() {
        mHandler.removeCallbacksAndMessages(null);
    }

    protected void onShow() {
        mHandler.postDelayed(new Runnable() {
            public void run() {
                EmoticonPopupViewer.this.dismiss();
            }
        }, 2000);
    }

    public void setRootViewId(int i) {
        setContentView(i);
        if (this.mRootView.getLayoutParams() instanceof LayoutParams) {
            this.mRootView.setLayoutParams(new LayoutParams(-2, -2));
        } else {
            this.mRootView.setLayoutParams(new ViewGroup.LayoutParams(-2, -2));
        }
    }

    public void show(View view) {
        this.mInflater = (LayoutInflater) this.mContext.getSystemService("layout_inflater");
        setRootViewId(R.layout.emoticon_popup_viewer);
        this.mIvEmoticon = (ImageView) this.mRootView.findViewById(R.id.iv_emoticon);
        this.mIvEmoticon.setImageResource(this.mResId);
        preShow();
        getContentView().setOnKeyListener(new OnKeyListener() {
            public boolean onKey(View view, int i, KeyEvent keyEvent) {
                if (i != 82 || !EmoticonPopupViewer.this.isShow || keyEvent.getAction() != 0) {
                    return false;
                }
                EmoticonPopupViewer.this.dismiss();
                EmoticonPopupViewer.this.isShow = false;
                return true;
            }
        });
        this.mWindow.setAnimationStyle(R.style.animation_popup_center);
        if (this.mIvEmoticon.getLayoutParams() instanceof LayoutParams) {
            this.mIvEmoticon.measure(-2, -2);
        } else {
            this.mIvEmoticon.measure(-2, -2);
        }
        int measuredWidth = this.mIvEmoticon.getMeasuredWidth();
        int measuredHeight = this.mIvEmoticon.getMeasuredHeight();
        if (this.mIvEmoticon.getLayoutParams() instanceof LayoutParams) {
            this.mIvEmoticon.setLayoutParams(new LayoutParams(measuredWidth + EMOTICON_ZOOM_SIZE, measuredHeight + EMOTICON_ZOOM_SIZE));
        } else {
            this.mIvEmoticon.setLayoutParams(new ViewGroup.LayoutParams(measuredWidth + EMOTICON_ZOOM_SIZE, measuredHeight + EMOTICON_ZOOM_SIZE));
        }
        measuredWidth = (int) ((this.mContext.getResources().getDisplayMetrics().density * (20.0f + 15.0f)) + 0.5f);
        this.mWindow.showAtLocation(view, 0, this.mRect.left - measuredWidth, this.mRect.top - measuredWidth);
        this.isShow = true;
        onShow();
    }
}
