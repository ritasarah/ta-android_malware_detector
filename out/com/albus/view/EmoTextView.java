package com.albus.view;

import android.content.Context;
import android.graphics.Rect;
import android.text.Layout;
import android.text.Spanned;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.WindowManager;
import android.widget.TextView;
import com.albus.imagespan.ClickableImageSpan;
import com.catfiz.util.Log;

public class EmoTextView extends TextView {
    private static final String TAG = "EmoTextView";
    private boolean mDiscardNextActionUp = false;

    public EmoTextView(Context context) {
        super(context);
    }

    public EmoTextView(Context context, AttributeSet attributeSet) {
        super(context, attributeSet);
    }

    public EmoTextView(Context context, AttributeSet attributeSet, int i) {
        super(context, attributeSet, i);
    }

    private Rect getRectClickedSpan(double d, double d2) {
        double lineRight;
        Rect rect;
        Rect rect2 = new Rect();
        Layout layout = getLayout();
        double primaryHorizontal = (double) layout.getPrimaryHorizontal((int) d);
        double primaryHorizontal2 = (double) layout.getPrimaryHorizontal((int) d2);
        int lineForOffset = layout.getLineForOffset((int) d);
        int lineForOffset2 = layout.getLineForOffset((int) d2);
        Object obj = lineForOffset != lineForOffset2 ? 1 : null;
        layout.getLineBounds(lineForOffset, rect2);
        int[] iArr = new int[]{0, 0};
        getLocationOnScreen(iArr);
        double scrollY = (double) ((iArr[1] - getScrollY()) + getCompoundPaddingTop());
        rect2.top = (int) (((double) rect2.top) + scrollY);
        rect2.bottom = (int) (((double) rect2.bottom) + scrollY);
        if (obj != null) {
            if ((rect2.top > ((WindowManager) getContext().getSystemService("window")).getDefaultDisplay().getHeight() - rect2.bottom ? 1 : null) != null) {
                lineRight = (double) layout.getLineRight(lineForOffset);
                primaryHorizontal2 = primaryHorizontal;
                rect = rect2;
            } else {
                rect = new Rect();
                layout.getLineBounds(lineForOffset2, rect);
                rect.top = (int) (((double) rect.top) + scrollY);
                rect.bottom = (int) (((double) rect.bottom) + scrollY);
                double d3 = primaryHorizontal2;
                primaryHorizontal2 = (double) layout.getLineLeft(lineForOffset2);
                lineRight = d3;
            }
        } else {
            lineRight = primaryHorizontal2;
            primaryHorizontal2 = primaryHorizontal;
            rect = rect2;
        }
        rect.left = (int) (((double) rect.left) + (((((double) iArr[0]) + primaryHorizontal2) + ((double) getCompoundPaddingLeft())) - ((double) getScrollX())));
        rect.right = (int) ((lineRight + ((double) rect.left)) - primaryHorizontal2);
        rect.top += 3;
        return rect;
    }

    public boolean onTouchEvent(MotionEvent motionEvent) {
        int actionMasked = motionEvent.getActionMasked();
        boolean onTouchEvent = super.onTouchEvent(motionEvent);
        if (this.mDiscardNextActionUp && actionMasked == 1) {
            this.mDiscardNextActionUp = false;
            return onTouchEvent;
        }
        if (actionMasked == 1 || actionMasked == 0) {
            Layout layout = getLayout();
            if (isEnabled() && (getText() instanceof Spanned) && layout != null) {
                int i;
                int scrollX = getScrollX() + (((int) motionEvent.getX()) - getTotalPaddingLeft());
                int y = (((int) motionEvent.getY()) - getTotalPaddingTop()) + getScrollY();
                int offsetForHorizontal = layout.getOffsetForHorizontal(layout.getLineForVertical(y), (float) scrollX);
                ClickableImageSpan[] clickableImageSpanArr = (ClickableImageSpan[]) ((Spanned) getText()).getSpans(offsetForHorizontal, offsetForHorizontal, ClickableImageSpan.class);
                if (clickableImageSpanArr.length > 0) {
                    Spanned spanned = (Spanned) getText();
                    Rect rectClickedSpan = getRectClickedSpan((double) spanned.getSpanStart(clickableImageSpanArr[0]), (double) spanned.getSpanEnd(clickableImageSpanArr[0]));
                    if (rectClickedSpan.left > rectClickedSpan.right) {
                        Log.d(TAG, "Rectangle coordinat is right to left orientation: swap");
                        int i2 = rectClickedSpan.left;
                        rectClickedSpan.left = rectClickedSpan.right;
                        rectClickedSpan.right = i2;
                    }
                    int[] iArr = new int[2];
                    getLocationOnScreen(iArr);
                    if (rectClickedSpan.contains(scrollX + iArr[0], y + iArr[1])) {
                        if (actionMasked == 1) {
                            clickableImageSpanArr[0].onClick(this, rectClickedSpan);
                        }
                        i = 1;
                        if (i != 0) {
                            return true;
                        }
                    }
                }
                boolean z = false;
                if (i != 0) {
                    return true;
                }
            }
        }
        return onTouchEvent;
    }

    public boolean performLongClick() {
        boolean performLongClick = super.performLongClick();
        if (performLongClick) {
            this.mDiscardNextActionUp = true;
        }
        return performLongClick;
    }
}
