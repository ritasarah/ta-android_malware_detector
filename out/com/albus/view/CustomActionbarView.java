package com.albus.view;

import android.content.Context;
import android.content.res.Configuration;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;
import com.catfiz.R;
import com.catfiz.util.Utils;

public class CustomActionbarView extends RelativeLayout implements OnClickListener {
    private OnActionbarButtonClicked actionbarButtonClicked;
    private OnActionbarMenuButtonClicked actionbarMenuButtonClicked;
    private Configuration config;
    private Button mBtnAction;
    private Context mContext;
    private ImageButton mIbAction;
    private ImageButton mIbCategory;
    private ImageButton mIbClose;
    private ImageButton mIbSelectAll;
    private RelativeLayout mRlActionbar;
    private TextView mTvTitle;

    public interface OnActionbarButtonClicked {
        void onBtnActionActiveClicked();

        void onBtnCloseClicked();
    }

    public interface OnActionbarMenuButtonClicked {
        void onBtnCategoryClicked();

        void onBtnSelectAllClicked();
    }

    public CustomActionbarView(Context context) {
        super(context);
        this.config = null;
        this.mBtnAction = null;
        this.mContext = null;
        this.mIbClose = null;
        this.mIbAction = null;
        this.mIbSelectAll = null;
        this.mIbCategory = null;
        this.mRlActionbar = null;
        this.mTvTitle = null;
        this.actionbarButtonClicked = null;
        this.actionbarMenuButtonClicked = null;
        this.config = getResources().getConfiguration();
    }

    public CustomActionbarView(Context context, AttributeSet attributeSet) {
        super(context, attributeSet);
        this.config = null;
        this.mBtnAction = null;
        this.mContext = null;
        this.mIbClose = null;
        this.mIbAction = null;
        this.mIbSelectAll = null;
        this.mIbCategory = null;
        this.mRlActionbar = null;
        this.mTvTitle = null;
        this.actionbarButtonClicked = null;
        this.actionbarMenuButtonClicked = null;
        this.mContext = context;
        this.config = getResources().getConfiguration();
        this.mRlActionbar = (RelativeLayout) ((LayoutInflater) context.getSystemService("layout_inflater")).inflate(R.layout.custom_actionbar_button, this);
        this.mBtnAction = (Button) this.mRlActionbar.findViewById(R.id.btn_action);
        this.mIbClose = (ImageButton) this.mRlActionbar.findViewById(R.id.ib_close);
        this.mIbAction = (ImageButton) this.mRlActionbar.findViewById(R.id.ib_action);
        this.mIbSelectAll = (ImageButton) this.mRlActionbar.findViewById(R.id.ib_select);
        this.mTvTitle = (TextView) this.mRlActionbar.findViewById(R.id.tv_title);
        this.mIbCategory = (ImageButton) this.mRlActionbar.findViewById(R.id.ib_category);
        this.mIbClose.setOnClickListener(this);
        this.mBtnAction.setOnClickListener(this);
        this.mIbSelectAll.setOnClickListener(this);
        this.mIbAction.setOnClickListener(this);
        this.mIbCategory.setOnClickListener(this);
    }

    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.ib_close:
                this.actionbarButtonClicked.onBtnCloseClicked();
                return;
            case R.id.ib_select:
                this.actionbarMenuButtonClicked.onBtnSelectAllClicked();
                return;
            case R.id.ib_category:
                this.actionbarMenuButtonClicked.onBtnCategoryClicked();
                return;
            case R.id.btn_action:
                this.actionbarButtonClicked.onBtnActionActiveClicked();
                return;
            case R.id.ib_action:
                this.actionbarButtonClicked.onBtnActionActiveClicked();
                return;
            default:
                return;
        }
    }

    public void setButtonAdd() {
        this.mBtnAction.setText(R.string.btn_add);
    }

    public void setButtonCreate() {
        this.mBtnAction.setText(R.string.btn_create);
    }

    public void setButtonInvite() {
        this.mBtnAction.setText(R.string.btn_invite);
        if (Utils.hasJellyBeanMR1() && this.config.getLayoutDirection() == 1) {
            this.mIbClose.setImageDrawable(getResources().getDrawable(R.drawable.ic_back_dark_reverse));
        } else {
            this.mIbClose.setImageDrawable(getResources().getDrawable(R.drawable.ic_back_dark));
        }
    }

    public void setButtonNext() {
        this.mBtnAction.setText(R.string.next);
        if (Utils.hasJellyBeanMR1() && this.config.getLayoutDirection() == 1) {
            this.mIbClose.setImageDrawable(getResources().getDrawable(R.drawable.ic_back_dark_reverse));
        } else {
            this.mIbClose.setImageDrawable(getResources().getDrawable(R.drawable.ic_back_dark));
        }
    }

    public void setButtonOk() {
        this.mBtnAction.setText(R.string.ok_uppercase);
    }

    public void setButtonRefresh() {
        this.mBtnAction.setVisibility(8);
        this.mIbSelectAll.setVisibility(8);
        this.mIbAction.setVisibility(0);
    }

    public void setButtonSave() {
        this.mBtnAction.setText(R.string.save);
        this.mTvTitle.setVisibility(8);
    }

    public void setButtonSend() {
        this.mBtnAction.setText(R.string.btn_send);
        if (Utils.hasJellyBeanMR1() && this.config.getLayoutDirection() == 1) {
            this.mIbClose.setImageDrawable(getResources().getDrawable(R.drawable.ic_back_dark_reverse));
        } else {
            this.mIbClose.setImageDrawable(getResources().getDrawable(R.drawable.ic_back_dark));
        }
    }

    public void setButtonUpdate() {
        this.mBtnAction.setText(R.string.btn_update);
    }

    public void setButtonUpload() {
        this.mBtnAction.setText(R.string.btn_upload);
        setOnActionBtnActivated();
    }

    public void setCategoryButton() {
        setCategoryButton(false);
    }

    public void setCategoryButton(boolean z) {
        this.mIbCategory.setVisibility(0);
        if (z) {
            LayoutParams layoutParams = (LayoutParams) this.mIbCategory.getLayoutParams();
            layoutParams.addRule(11);
            this.mIbCategory.setLayoutParams(layoutParams);
        }
    }

    public void setNoButton() {
        this.mBtnAction.setVisibility(8);
        this.mIbSelectAll.setVisibility(8);
        if (Utils.hasJellyBeanMR1() && this.config.getLayoutDirection() == 1) {
            this.mIbClose.setImageDrawable(getResources().getDrawable(R.drawable.ic_back_dark_reverse));
        } else {
            this.mIbClose.setImageDrawable(getResources().getDrawable(R.drawable.ic_back_dark));
        }
        this.mTvTitle.setTextColor(getResources().getColor(R.color.black87));
    }

    public void setOnActionBtnActivated() {
        this.mBtnAction.setEnabled(true);
        this.mBtnAction.setTextColor(getResources().getColor(R.color.blue));
    }

    public void setOnActionBtnDeactivated() {
        this.mBtnAction.setEnabled(false);
        this.mBtnAction.setTextColor(getResources().getColor(R.color.blue54));
    }

    public void setOnActionbarButtonClickListener(OnActionbarButtonClicked onActionbarButtonClicked) {
        this.actionbarButtonClicked = onActionbarButtonClicked;
    }

    public void setOnActionbarMenuButtonClickListener(OnActionbarMenuButtonClicked onActionbarMenuButtonClicked) {
        this.actionbarMenuButtonClicked = onActionbarMenuButtonClicked;
    }

    public void setSelectAllButton(boolean z) {
        if (z) {
            this.mIbSelectAll.setVisibility(0);
        } else {
            this.mIbSelectAll.setVisibility(8);
        }
    }

    public void setTitle(String str) {
        this.mTvTitle.setText(str);
    }
}
