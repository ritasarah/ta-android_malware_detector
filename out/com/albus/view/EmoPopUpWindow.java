package com.albus.view;

import android.content.Context;
import android.graphics.Rect;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.WindowManager;
import android.widget.PopupWindow;
import android.widget.PopupWindow.OnDismissListener;
import com.catfiz.util.Log;
import org.apache.http.conn.routing.HttpRouteDirector;

public class EmoPopUpWindow implements OnDismissListener {
    private static final String TAG = "EmoPopUpWindow";
    protected Drawable mBackground = null;
    protected Context mContext;
    private PopupLocation mLocation;
    protected View mRootView;
    protected PopupWindow mWindow;
    protected WindowManager mWindowManager;

    /* synthetic */ class AnonymousClass2 {
        static final /* synthetic */ int[] $SwitchMap$com$albus$view$EmoPopUpWindow$PopupLocation = new int[PopupLocation.values().length];

        static {
            try {
                $SwitchMap$com$albus$view$EmoPopUpWindow$PopupLocation[PopupLocation.CENTER.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$albus$view$EmoPopUpWindow$PopupLocation[PopupLocation.BOTTOM.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$albus$view$EmoPopUpWindow$PopupLocation[PopupLocation.UP.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$albus$view$EmoPopUpWindow$PopupLocation[PopupLocation.ABOVE_ANCHOR.ordinal()] = 4;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$albus$view$EmoPopUpWindow$PopupLocation[PopupLocation.BOTTOM_ANCHOR.ordinal()] = 5;
            } catch (NoSuchFieldError e5) {
            }
        }
    }

    public enum PopupLocation {
        CENTER,
        BOTTOM,
        UP,
        ABOVE_ANCHOR,
        BOTTOM_ANCHOR
    }

    public EmoPopUpWindow(Context context) {
        this.mContext = context;
        this.mWindow = new PopupWindow(context);
        this.mWindow.setTouchInterceptor(new OnTouchListener() {
            public boolean onTouch(View view, MotionEvent motionEvent) {
                if (motionEvent.getAction() != 4) {
                    return false;
                }
                EmoPopUpWindow.this.dismiss();
                return true;
            }
        });
        this.mWindowManager = (WindowManager) context.getSystemService("window");
    }

    public void dismiss() {
        this.mWindow.dismiss();
    }

    public View getContentView() {
        return this.mWindow.getContentView();
    }

    public void onDismiss() {
    }

    protected void onShow() {
    }

    protected void preShow() {
        if (this.mRootView == null) {
            throw new IllegalStateException("setContentView was not called with a view to display.");
        }
        if (this.mBackground == null) {
            this.mWindow.setBackgroundDrawable(new BitmapDrawable());
        } else {
            this.mWindow.setBackgroundDrawable(this.mBackground);
        }
        this.mWindow.setWidth(-2);
        this.mWindow.setHeight(-2);
        this.mWindow.setTouchable(true);
        this.mWindow.setFocusable(true);
        this.mRootView.setFocusableInTouchMode(true);
        this.mWindow.setOutsideTouchable(true);
        this.mWindow.setContentView(this.mRootView);
    }

    public void setBackgroundDrawable(Drawable drawable) {
        this.mBackground = drawable;
    }

    public void setContentView(int i) {
        setContentView(((LayoutInflater) this.mContext.getSystemService("layout_inflater")).inflate(i, null));
    }

    public void setContentView(View view) {
        this.mRootView = view;
        this.mWindow.setContentView(view);
    }

    public void setOnDismissListener(OnDismissListener onDismissListener) {
        this.mWindow.setOnDismissListener(onDismissListener);
    }

    public void showAtLocation(View view, PopupLocation popupLocation) {
        int width;
        int height;
        this.mLocation = popupLocation;
        this.mRootView.measure(-2, -2);
        int measuredWidth = this.mRootView.getMeasuredWidth();
        int measuredHeight = this.mRootView.getMeasuredHeight();
        if (this.mWindowManager != null) {
            width = this.mWindowManager.getDefaultDisplay().getWidth();
            height = this.mWindowManager.getDefaultDisplay().getHeight();
        } else {
            height = 0;
            width = 0;
        }
        width = (width / 2) - (measuredWidth / 2);
        int[] iArr = new int[2];
        Rect rect;
        switch (AnonymousClass2.$SwitchMap$com$albus$view$EmoPopUpWindow$PopupLocation[popupLocation.ordinal()]) {
            case e.b /*1*/:
                this.mWindow.showAtLocation(view, 0, width, (height / 2) - (measuredHeight / 2));
                return;
            case e.c /*2*/:
                this.mWindow.showAtLocation(view, 0, width, height - measuredHeight);
                return;
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                this.mWindow.showAtLocation(view, 0, width, 0);
                return;
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                view.getLocationOnScreen(iArr);
                rect = new Rect(iArr[0], iArr[1], iArr[0] + view.getWidth(), iArr[1] + view.getHeight());
                width = rect.centerX() - measuredWidth;
                measuredWidth = rect.centerY() - measuredHeight;
                Log.d(TAG, "position anchor center x : " + rect.centerX());
                this.mWindow.showAtLocation(view, 0, width, measuredWidth);
                return;
            case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                view.getLocationOnScreen(iArr);
                rect = new Rect(iArr[0], iArr[1], iArr[0] + view.getWidth(), iArr[1] + view.getHeight());
                this.mWindow.showAtLocation(view, 0, rect.centerX() - measuredWidth, rect.centerY());
                return;
            default:
                return;
        }
    }
}
