package com.albus.view;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.drawable.Drawable;
import android.media.MediaMetadataRetriever;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Environment;
import android.os.Handler;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.text.Editable;
import android.text.SpannableStringBuilder;
import android.text.TextWatcher;
import android.text.method.ScrollingMovementMethod;
import android.text.style.ImageSpan;
import android.util.AttributeSet;
import android.view.Display;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.View.OnTouchListener;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.view.Window;
import android.view.WindowManager;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.TranslateAnimation;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.MediaController;
import android.widget.RelativeLayout;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.VideoView;
import com.albus.activity.ChatGroupConvActivity;
import com.albus.activity.CommentActivity;
import com.albus.activity.StickerStoreActivity;
import com.albus.adapter.EmoticonHeaderListAdapter;
import com.albus.adapter.EmoticonHeaderListAdapter.headClickListener;
import com.albus.adapter.EmoticonsGridAdapter.KeyClickListener;
import com.albus.adapter.EmoticonsPagerAdapter;
import com.albus.cfspan.CFLinkify;
import com.albus.imagespan.SmiledText;
import com.albus.util.AlbusAudioPlayer;
import com.albus.util.AlbusAudioPlayer.onAudioStateChange;
import com.albus.util.AlbusAudioRecorder;
import com.albus.util.AlbusAudioRecorder.OnAlbusAudioRecorderAction;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.util.BottomBarUtil;
import com.albus.util.QuoteUtils;
import com.albus.view.ChatEditText.onKeyboardEvent;
import com.albus.view.CustomTextView.OnLayoutListener;
import com.catfiz.R;
import com.catfiz.consts.CatfizMsgTypes;
import com.catfiz.media.ImageReScaler;
import com.catfiz.media.StorageDir;
import com.catfiz.model.Comment;
import com.catfiz.model.Message;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.sticker.CatfizSticker;
import com.catfiz.sticker.IStickerPackageClientInterface;
import com.catfiz.sticker.StickerMessageObject;
import com.catfiz.util.Log;
import com.catfiz.util.MediaFilePath;
import com.catfiz.util.Utils;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.lang.ref.WeakReference;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.HttpStatus;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.apache.http.protocol.HTTP;

public class ChatsBottomBarView extends LinearLayout implements OnClickListener, OnTouchListener, headClickListener, KeyClickListener {
    public static final int BROADCAST_VIEW = 2;
    public static final int CHAT_VIEW = 0;
    public static final int COMMENT_VIEW = 3;
    public static final int GROUP_VIEW = 1;
    private static final int MEDIA_TYPE_IMAGE = 1;
    private static final int MEDIA_TYPE_VIDEO = 2;
    public static final int PROFILE_VIEW = 4;
    protected static final String TAG = ChatsBottomBarView.class.getSimpleName();
    public static final byte[][] emojiCity;
    public static final byte[][] emojiNature = new byte[][]{new byte[]{(byte) -18, (byte) -112, (byte) -66}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -117}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -116}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -115}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -114}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -113}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -111}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -110}, new byte[]{(byte) -18, (byte) -102, (byte) -98}, new byte[]{(byte) -18, (byte) -102, (byte) -99}, new byte[]{(byte) -18, (byte) -102, (byte) -96}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -106}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -105}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -104}, new byte[]{(byte) -18, (byte) -102, (byte) -97}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -102}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -101}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -100}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -99}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -98}, new byte[]{(byte) -18, (byte) -116, (byte) -75}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -96}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -80}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -79}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -78}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -77}, new byte[]{(byte) -18, (byte) -116, (byte) -121}, new byte[]{(byte) -18, (byte) -116, (byte) -120}, new byte[]{(byte) -18, (byte) -99, (byte) -125}, new byte[]{(byte) -18, (byte) -99, (byte) -120}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -78}, new byte[]{(byte) -18, (byte) -116, (byte) -125}, new byte[]{(byte) -18, (byte) -116, (byte) -123}, new byte[]{(byte) -18, (byte) -83, (byte) -119}, new byte[]{(byte) -18, (byte) -84, (byte) -74}, new byte[]{(byte) -18, (byte) -111, (byte) -124}, new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -65}, new byte[]{(byte) -18, (byte) -99, (byte) -127}, new byte[]{(byte) -18, (byte) -124, (byte) -104}, new byte[]{(byte) -18, (byte) -124, (byte) -103}, new byte[]{(byte) -18, (byte) -111, (byte) -121}, new byte[]{(byte) -18, (byte) -82, (byte) -126}, new byte[]{(byte) -18, (byte) -115, (byte) -119}, new byte[]{(byte) -18, (byte) -115, (byte) -118}, new byte[]{(byte) -18, (byte) -84, (byte) -76}, new byte[]{(byte) -18, (byte) -84, (byte) -78}, new byte[]{(byte) -18, (byte) -115, (byte) -120}, new byte[]{(byte) -18, (byte) -115, (byte) -122}, new byte[]{(byte) -16, (byte) -97, (byte) -115, (byte) -117}, new byte[]{(byte) -18, (byte) -99, (byte) -124}, new byte[]{(byte) -18, (byte) -84, (byte) -77}, new byte[]{(byte) -18, (byte) -99, (byte) -123}, new byte[]{(byte) -18, (byte) -83, (byte) -102}, new byte[]{(byte) -16, (byte) -97, (byte) -115, (byte) -112}, new byte[]{(byte) -18, (byte) -84, (byte) -71}, new byte[]{(byte) -18, (byte) -99, (byte) -126}, new byte[]{(byte) -18, (byte) -115, (byte) -121}, new byte[]{(byte) -18, (byte) -103, (byte) -77}, new byte[]{(byte) -18, (byte) -84, (byte) -69}, new byte[]{(byte) -18, (byte) -109, (byte) -124}, new byte[]{(byte) -18, (byte) -84, (byte) -68}, new byte[]{(byte) -18, (byte) -116, (byte) -67}, new byte[]{(byte) -18, (byte) -99, (byte) -119}, new byte[]{(byte) -18, (byte) -99, (byte) -116}, new byte[]{(byte) -18, (byte) -115, (byte) -127}, new byte[]{(byte) -18, (byte) -115, Byte.MIN_VALUE}, new byte[]{(byte) -18, (byte) -116, (byte) -65}, new byte[]{(byte) -18, (byte) -99, (byte) -115}, new byte[]{(byte) -18, (byte) -116, (byte) -69}, new byte[]{(byte) -18, (byte) -84, (byte) -70}, new byte[]{(byte) -18, (byte) -116, (byte) -68}, new byte[]{(byte) -18, (byte) -115, (byte) -125}, new byte[]{(byte) -18, (byte) -115, (byte) -124}, new byte[]{(byte) -18, (byte) -83, (byte) -80}, new byte[]{(byte) -18, (byte) -109, (byte) -83}, new byte[]{(byte) -18, (byte) -116, (byte) -70}, new byte[]{(byte) -18, (byte) -112, (byte) -65}, new byte[]{(byte) -18, (byte) -83, (byte) -118}, new byte[]{(byte) -18, (byte) -83, (byte) -117}, new byte[]{(byte) -18, (byte) -83, (byte) -116}, new byte[]{(byte) -18, (byte) -83, (byte) -115}, new byte[]{(byte) -18, (byte) -83, (byte) -114}, new byte[]{(byte) -18, (byte) -83, (byte) -113}, new byte[]{(byte) -18, (byte) -83, (byte) -106}, new byte[]{(byte) -18, (byte) -83, (byte) -103}, new byte[]{(byte) -18, (byte) -127, (byte) -122}, new byte[]{(byte) -18, (byte) -86, (byte) -67}, new byte[]{(byte) -18, (byte) -115, (byte) -115}, new byte[]{(byte) -18, (byte) -123, (byte) -121}, new byte[]{(byte) -18, (byte) -103, (byte) -81}, new byte[]{(byte) -18, (byte) -100, (byte) -98}, new byte[]{(byte) -18, (byte) -99, (byte) -117}, new byte[]{(byte) -18, (byte) -99, (byte) -106}, new byte[]{(byte) -18, (byte) -127, (byte) -124}, new byte[]{(byte) -18, (byte) -103, (byte) -79}, new byte[]{(byte) -18, (byte) -103, (byte) -78}, new byte[]{(byte) -18, (byte) -116, (byte) -116}, new byte[]{(byte) -16, (byte) -97, (byte) -115, (byte) -68}, new byte[]{(byte) -18, (byte) -102, (byte) -124}, new byte[]{(byte) -18, (byte) -124, (byte) -110}, new byte[]{(byte) -18, (byte) -102, (byte) -122}, new byte[]{(byte) -18, (byte) -111, (byte) -123}, new byte[]{(byte) -18, (byte) -111, (byte) -81}, new byte[]{(byte) -18, (byte) -84, (byte) -67}, new byte[]{(byte) -18, (byte) -123, (byte) -125}, new byte[]{(byte) -18, (byte) -112, (byte) -74}, new byte[]{(byte) -18, (byte) -112, (byte) -72}, new byte[]{(byte) -18, (byte) -112, (byte) -69}, new byte[]{(byte) -16, (byte) -97, (byte) -112, Byte.MIN_VALUE}, new byte[]{(byte) -16, (byte) -97, (byte) -112, (byte) -127}, new byte[]{(byte) -16, (byte) -97, (byte) -112, (byte) -126}, new byte[]{(byte) -16, (byte) -97, (byte) -112, (byte) -125}, new byte[]{(byte) -16, (byte) -97, (byte) -112, (byte) -124}, new byte[]{(byte) -16, (byte) -97, (byte) -112, (byte) -123}, new byte[]{(byte) -16, (byte) -97, (byte) -112, (byte) -122}, new byte[]{(byte) -16, (byte) -97, (byte) -112, (byte) -121}, new byte[]{(byte) -16, (byte) -97, (byte) -112, (byte) -120}, new byte[]{(byte) -16, (byte) -97, (byte) -112, (byte) -119}, new byte[]{(byte) -16, (byte) -97, (byte) -112, (byte) -118}, new byte[]{(byte) -16, (byte) -97, (byte) -112, (byte) -117}, new byte[]{(byte) -16, (byte) -97, (byte) -112, (byte) -116}, new byte[]{(byte) -18, (byte) -108, (byte) -83}, new byte[]{(byte) -18, (byte) -99, (byte) -108}, new byte[]{(byte) -16, (byte) -97, (byte) -112, (byte) -113}, new byte[]{(byte) -16, (byte) -97, (byte) -112, (byte) -112}, new byte[]{(byte) -18, (byte) -108, (byte) -87}, new byte[]{(byte) -18, (byte) -108, (byte) -88}, new byte[]{(byte) -16, (byte) -97, (byte) -112, (byte) -109}, new byte[]{(byte) -18, (byte) -108, (byte) -82}, new byte[]{(byte) -16, (byte) -97, (byte) -112, (byte) -107}, new byte[]{(byte) -16, (byte) -97, (byte) -112, (byte) -106}, new byte[]{(byte) -18, (byte) -108, (byte) -81}, new byte[]{(byte) -18, (byte) -108, (byte) -90}, new byte[]{(byte) -18, (byte) -124, (byte) -118}, new byte[]{(byte) -18, (byte) -111, (byte) -127}, new byte[]{(byte) -18, (byte) -108, (byte) -91}, new byte[]{(byte) -18, (byte) -109, (byte) -99}, new byte[]{(byte) -18, (byte) -83, (byte) -105}, new byte[]{(byte) -18, (byte) -83, (byte) -104}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -103}, new byte[]{(byte) -18, (byte) -99, (byte) -111}, new byte[]{(byte) -18, (byte) -109, (byte) -109}, new byte[]{(byte) -18, (byte) -105, (byte) -108}, new byte[]{(byte) -18, (byte) -99, (byte) -113}, new byte[]{(byte) -18, (byte) -108, (byte) -93}, new byte[]{(byte) -18, (byte) -83, (byte) -74}, new byte[]{(byte) -16, (byte) -97, (byte) -112, (byte) -90}, new byte[]{(byte) -18, (byte) -127, (byte) -107}, new byte[]{(byte) -18, (byte) -108, (byte) -89}, new byte[]{(byte) -18, (byte) -109, (byte) -97}, new byte[]{(byte) -16, (byte) -97, (byte) -112, (byte) -86}, new byte[]{(byte) -18, (byte) -108, (byte) -80}, new byte[]{(byte) -18, (byte) -108, (byte) -96}, new byte[]{(byte) -18, (byte) -127, (byte) -109}, new byte[]{(byte) -18, (byte) -108, (byte) -85}, new byte[]{(byte) -18, (byte) -127, (byte) -112}, new byte[]{(byte) -18, (byte) -108, (byte) -84}, new byte[]{(byte) -18, (byte) -102, (byte) -94}, new byte[]{(byte) -18, (byte) -84, (byte) -65}, new byte[]{(byte) -18, (byte) -127, (byte) -108}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -102}, new byte[]{(byte) -18, (byte) -124, (byte) -119}, new byte[]{(byte) -18, (byte) -102, (byte) -95}, new byte[]{(byte) -18, (byte) -99, (byte) -107}, new byte[]{(byte) -16, (byte) -97, (byte) -112, (byte) -72}, new byte[]{(byte) -18, (byte) -108, (byte) -92}, new byte[]{(byte) -18, (byte) -108, (byte) -86}, new byte[]{(byte) -18, (byte) -127, (byte) -111}, new byte[]{(byte) -18, (byte) -83, (byte) -122}, new byte[]{(byte) -18, (byte) -83, (byte) -120}, new byte[]{(byte) -18, (byte) -109, (byte) -82}, new byte[]{(byte) -18, (byte) -101, (byte) -72}, new byte[]{(byte) -18, (byte) -127, (byte) -118}, new byte[]{(byte) -18, (byte) -104, (byte) -65}, new byte[]{(byte) -18, (byte) -127, (byte) -117}, new byte[]{(byte) -18, (byte) -127, (byte) -123}, new byte[]{(byte) -18, (byte) -127, (byte) -120}, new byte[]{(byte) -18, (byte) -110, (byte) -114}};
    public static final byte[][] emojiSmile = new byte[][]{new byte[]{(byte) -16, (byte) -97, (byte) -104, Byte.MIN_VALUE}, new byte[]{(byte) -18, (byte) -99, (byte) -109}, new byte[]{(byte) -18, (byte) -112, (byte) -110}, new byte[]{(byte) -18, (byte) -101, (byte) -80}, new byte[]{(byte) -18, (byte) -112, (byte) -107}, new byte[]{(byte) -18, (byte) -100, (byte) -94}, new byte[]{(byte) -18, (byte) -85, (byte) -123}, new byte[]{(byte) -16, (byte) -97, (byte) -104, (byte) -121}, new byte[]{(byte) -16, (byte) -97, (byte) -104, (byte) -120}, new byte[]{(byte) -18, (byte) -100, (byte) -87}, new byte[]{(byte) -18, (byte) -127, (byte) -106}, new byte[]{(byte) -18, (byte) -99, (byte) -110}, new byte[]{(byte) -18, (byte) -112, (byte) -118}, new byte[]{(byte) -18, (byte) -100, (byte) -90}, new byte[]{(byte) -16, (byte) -97, (byte) -104, (byte) -114}, new byte[]{(byte) -18, (byte) -100, (byte) -84}, new byte[]{(byte) -16, (byte) -97, (byte) -104, (byte) -112}, new byte[]{(byte) -16, (byte) -97, (byte) -104, (byte) -111}, new byte[]{(byte) -18, (byte) -100, (byte) -91}, new byte[]{(byte) -18, (byte) -124, (byte) -120}, new byte[]{(byte) -18, (byte) -100, (byte) -96}, new byte[]{(byte) -16, (byte) -97, (byte) -104, (byte) -107}, new byte[]{(byte) -18, (byte) -112, (byte) -121}, new byte[]{(byte) -16, (byte) -97, (byte) -104, (byte) -105}, new byte[]{(byte) -18, (byte) -112, (byte) -104}, new byte[]{(byte) -16, (byte) -97, (byte) -104, (byte) -103}, new byte[]{(byte) -18, (byte) -112, (byte) -105}, new byte[]{(byte) -16, (byte) -97, (byte) -104, (byte) -101}, new byte[]{(byte) -18, (byte) -124, (byte) -123}, new byte[]{(byte) -18, (byte) -100, (byte) -88}, new byte[]{(byte) -18, (byte) -127, (byte) -104}, new byte[]{(byte) -16, (byte) -97, (byte) -104, (byte) -97}, new byte[]{(byte) -18, (byte) -127, (byte) -103}, new byte[]{(byte) -18, (byte) -100, (byte) -92}, new byte[]{(byte) -18, (byte) -100, (byte) -82}, new byte[]{(byte) -18, (byte) -100, (byte) -85}, new byte[]{(byte) -16, (byte) -97, (byte) -104, (byte) -92}, new byte[]{(byte) -18, (byte) -112, (byte) -127}, new byte[]{(byte) -18, (byte) -85, (byte) -127}, new byte[]{(byte) -16, (byte) -97, (byte) -104, (byte) -89}, new byte[]{(byte) -18, (byte) -112, (byte) -117}, new byte[]{(byte) -18, (byte) -83, (byte) -89}, new byte[]{(byte) -18, (byte) -112, (byte) -120}, new byte[]{(byte) -16, (byte) -97, (byte) -104, (byte) -85}, new byte[]{(byte) -18, (byte) -111, (byte) -76}, new byte[]{(byte) -18, (byte) -100, (byte) -83}, new byte[]{(byte) -16, (byte) -97, (byte) -104, (byte) -82}, new byte[]{(byte) -16, (byte) -97, (byte) -104, (byte) -81}, new byte[]{(byte) -18, (byte) -112, (byte) -113}, new byte[]{(byte) -18, (byte) -124, (byte) -121}, new byte[]{(byte) -18, (byte) -112, (byte) -112}, new byte[]{(byte) -18, (byte) -100, (byte) -86}, new byte[]{(byte) -16, (byte) -97, (byte) -104, (byte) -76}, new byte[]{(byte) -18, (byte) -101, (byte) -76}, new byte[]{(byte) -16, (byte) -97, (byte) -104, (byte) -74}, new byte[]{(byte) -18, (byte) -112, (byte) -116}, new byte[]{(byte) -18, (byte) -83, (byte) -65}, new byte[]{(byte) -18, (byte) -83, (byte) -93}, new byte[]{(byte) -18, (byte) -83, (byte) -95}, new byte[]{(byte) -18, (byte) -83, (byte) -91}, new byte[]{(byte) -18, (byte) -83, (byte) -86}, new byte[]{(byte) -18, (byte) -83, (byte) -96}, new byte[]{(byte) -18, (byte) -83, (byte) -98}, new byte[]{(byte) -18, (byte) -83, (byte) -88}, new byte[]{(byte) -18, (byte) -83, (byte) -90}, new byte[]{(byte) -18, (byte) -112, (byte) -93}, new byte[]{(byte) -18, (byte) -112, (byte) -92}, new byte[]{(byte) -18, (byte) -112, (byte) -90}, new byte[]{(byte) -18, (byte) -83, (byte) -112}, new byte[]{(byte) -18, (byte) -83, (byte) -110}, new byte[]{(byte) -18, (byte) -83, (byte) -111}, new byte[]{(byte) -18, (byte) -82, (byte) -123}, new byte[]{(byte) -18, (byte) -112, (byte) -89}, new byte[]{(byte) -18, (byte) -101, (byte) -77}, new byte[]{(byte) -18, (byte) -101, (byte) -79}, new byte[]{(byte) -18, (byte) -112, (byte) -99}, new byte[]{(byte) -18, (byte) -112, (byte) -108}, new byte[]{(byte) -18, (byte) -102, (byte) -111}, new byte[]{(byte) -18, (byte) -102, (byte) -110}, new byte[]{(byte) -18, (byte) -112, (byte) -102}, new byte[]{(byte) -18, (byte) -101, (byte) -71}, new byte[]{(byte) -18, (byte) -83, (byte) -121}, new byte[]{(byte) -18, (byte) -102, (byte) -109}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -110}, new byte[]{(byte) -18, (byte) -102, (byte) -108}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -113}, new byte[]{(byte) -18, (byte) -120, (byte) -82}, new byte[]{(byte) -18, (byte) -120, (byte) -81}, new byte[]{(byte) -18, (byte) -120, (byte) -80}, new byte[]{(byte) -18, (byte) -120, (byte) -79}, new byte[]{(byte) -18, (byte) -101, (byte) -67}, new byte[]{(byte) -18, (byte) -112, (byte) -98}, new byte[]{(byte) -18, (byte) -100, (byte) -117}, new byte[]{(byte) -18, (byte) -100, (byte) -89}, new byte[]{(byte) -18, (byte) -100, Byte.MIN_VALUE}, new byte[]{(byte) -18, (byte) -112, (byte) -97}, new byte[]{(byte) -18, (byte) -112, (byte) -94}, new byte[]{(byte) -18, (byte) -102, (byte) -104}, new byte[]{(byte) -18, (byte) -102, (byte) -79}, new byte[]{(byte) -16, (byte) -97, (byte) -111, (byte) -91}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -127}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -126}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -124}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -123}, new byte[]{(byte) -16, (byte) -97, (byte) -111, (byte) -86}, new byte[]{(byte) -18, (byte) -112, (byte) -88}, new byte[]{(byte) -16, (byte) -97, (byte) -111, (byte) -84}, new byte[]{(byte) -16, (byte) -97, (byte) -111, (byte) -83}, new byte[]{(byte) -18, (byte) -123, (byte) -110}, new byte[]{(byte) -18, (byte) -112, (byte) -87}, new byte[]{(byte) -18, (byte) -85, (byte) -87}, new byte[]{(byte) -18, (byte) -108, (byte) -107}, new byte[]{(byte) -18, (byte) -108, (byte) -106}, new byte[]{(byte) -16, (byte) -97, (byte) -111, (byte) -77}, new byte[]{(byte) -18, (byte) -108, (byte) -104}, new byte[]{(byte) -18, (byte) -108, (byte) -103}, new byte[]{(byte) -18, (byte) -108, (byte) -102}, new byte[]{(byte) -18, (byte) -108, (byte) -101}, new byte[]{(byte) -18, (byte) -108, (byte) -100}, new byte[]{(byte) -18, (byte) -83, (byte) -124}, new byte[]{(byte) -18, (byte) -83, (byte) -123}, new byte[]{(byte) -18, (byte) -124, (byte) -101}, new byte[]{(byte) -18, (byte) -127, (byte) -114}, new byte[]{(byte) -18, (byte) -124, (byte) -116}, new byte[]{(byte) -18, (byte) -124, (byte) -85}, new byte[]{(byte) -18, (byte) -124, (byte) -102}, new byte[]{(byte) -18, (byte) -124, (byte) -100}, new byte[]{(byte) -18, (byte) -119, (byte) -109}, new byte[]{(byte) -18, (byte) -108, (byte) -98}, new byte[]{(byte) -18, (byte) -108, (byte) -97}, new byte[]{(byte) -18, (byte) -100, (byte) -112}, new byte[]{(byte) -18, (byte) -116, (byte) -99}, new byte[]{(byte) -18, (byte) -116, (byte) -98}, new byte[]{(byte) -18, (byte) -103, (byte) -75}, new byte[]{(byte) -18, (byte) -116, (byte) -96}, new byte[]{(byte) -18, (byte) -124, (byte) -69}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -125}, new byte[]{(byte) -18, (byte) -124, (byte) -111}, new byte[]{(byte) -18, (byte) -116, (byte) -122}, new byte[]{(byte) -18, (byte) -112, (byte) -91}, new byte[]{(byte) -18, (byte) -112, (byte) -67}, new byte[]{(byte) -18, (byte) -101, (byte) -83}, new byte[]{(byte) -18, (byte) -101, (byte) -82}, new byte[]{(byte) -18, (byte) -101, (byte) -81}, new byte[]{(byte) -18, (byte) -86, (byte) -90}, new byte[]{(byte) -18, (byte) -116, (byte) -88}, new byte[]{(byte) -18, (byte) -116, (byte) -87}, new byte[]{(byte) -18, (byte) -116, (byte) -86}, new byte[]{(byte) -18, (byte) -116, (byte) -85}, new byte[]{(byte) -18, (byte) -116, (byte) -84}, new byte[]{(byte) -18, (byte) -101, (byte) -84}, new byte[]{(byte) -18, (byte) -112, (byte) -73}, new byte[]{(byte) -18, (byte) -106, (byte) -81}, new byte[]{(byte) -18, (byte) -120, (byte) -124}};
    public static final byte[][] emojiSymbol = new byte[][]{new byte[]{(byte) -18, (byte) -100, (byte) -79}, new byte[]{(byte) -18, (byte) -100, (byte) -74}, new byte[]{(byte) -18, (byte) -124, (byte) -83}, new byte[]{(byte) -18, (byte) -83, (byte) -81}, new byte[]{(byte) -16, (byte) -97, (byte) -123, (byte) -80}, new byte[]{(byte) -16, (byte) -97, (byte) -123, (byte) -79}, new byte[]{(byte) -16, (byte) -97, (byte) -123, (byte) -66}, new byte[]{(byte) -18, (byte) -103, (byte) -84}, new byte[]{(byte) -16, (byte) -97, (byte) -122, (byte) -114}, new byte[]{(byte) -18, (byte) -101, (byte) -101}, new byte[]{(byte) -18, (byte) -120, (byte) -108}, new byte[]{(byte) -18, (byte) -101, (byte) -105}, new byte[]{(byte) -18, (byte) -120, (byte) -87}, new byte[]{(byte) -18, (byte) -120, (byte) -110}, new byte[]{(byte) -18, (byte) -100, (byte) -81}, new byte[]{(byte) -18, (byte) -119, (byte) -115}, new byte[]{(byte) -18, (byte) -109, (byte) -88}, new byte[]{(byte) -18, (byte) -120, (byte) -109}, new byte[]{(byte) -18, (byte) -124, (byte) -82}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -90}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -89}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -88}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -87}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -86}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -85}, new byte[]{(byte) -18, (byte) -108, (byte) -112}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -83}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -82}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -81}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -80}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -79}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -78}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -77}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -76}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -75}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -74}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -73}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -72}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -71}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -70}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -69}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -68}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -67}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -66}, new byte[]{(byte) -16, (byte) -97, (byte) -121, (byte) -65}, new byte[]{(byte) -18, (byte) -120, (byte) -125}, new byte[]{(byte) -18, (byte) -120, (byte) -88}, new byte[]{(byte) -18, (byte) -120, (byte) -106}, new byte[]{(byte) -18, (byte) -120, (byte) -84}, new byte[]{(byte) -16, (byte) -97, (byte) -120, (byte) -78}, new byte[]{(byte) -18, (byte) -120, (byte) -85}, new byte[]{(byte) -18, (byte) -100, (byte) -70}, new byte[]{(byte) -18, (byte) -120, (byte) -86}, new byte[]{(byte) -18, (byte) -120, (byte) -107}, new byte[]{(byte) -18, (byte) -120, (byte) -105}, new byte[]{(byte) -18, (byte) -120, (byte) -104}, new byte[]{(byte) -18, (byte) -120, (byte) -89}, new byte[]{(byte) -18, (byte) -120, (byte) -83}, new byte[]{(byte) -16, (byte) -97, (byte) -119, (byte) -112}, new byte[]{(byte) -16, (byte) -97, (byte) -119, (byte) -111}, new byte[]{(byte) -18, (byte) -111, (byte) -125}, new byte[]{(byte) -18, (byte) -100, (byte) -122}, new byte[]{(byte) -16, (byte) -97, (byte) -108, Byte.MIN_VALUE}, new byte[]{(byte) -16, (byte) -97, (byte) -108, (byte) -127}, new byte[]{(byte) -16, (byte) -97, (byte) -108, (byte) -126}, new byte[]{(byte) -18, (byte) -84, (byte) -115}, new byte[]{(byte) -16, (byte) -97, (byte) -108, (byte) -124}, new byte[]{(byte) -16, (byte) -97, (byte) -108, (byte) -123}, new byte[]{(byte) -16, (byte) -97, (byte) -108, (byte) -122}, new byte[]{(byte) -16, (byte) -97, (byte) -108, (byte) -121}, new byte[]{(byte) -18, (byte) -123, (byte) -127}, new byte[]{(byte) -16, (byte) -97, (byte) -108, (byte) -119}, new byte[]{(byte) -18, (byte) -85, (byte) -68}, new byte[]{(byte) -18, (byte) -101, (byte) -103}, new byte[]{(byte) -18, (byte) -123, (byte) -124}, new byte[]{(byte) -18, (byte) -123, (byte) -123}, new byte[]{(byte) -18, (byte) -100, (byte) -109}, new byte[]{(byte) -16, (byte) -97, (byte) -108, (byte) -107}, new byte[]{(byte) -18, (byte) -84, (byte) -121}, new byte[]{(byte) -18, (byte) -106, (byte) -118}, new byte[]{(byte) -18, (byte) -84, (byte) -124}, new byte[]{(byte) -18, (byte) -84, (byte) -122}, new byte[]{(byte) -18, (byte) -102, (byte) -71}, new byte[]{(byte) -18, (byte) -102, (byte) -72}, new byte[]{(byte) -18, (byte) -102, (byte) -73}, new byte[]{(byte) -18, (byte) -119, (byte) -116}, new byte[]{(byte) -18, (byte) -120, (byte) -121}, new byte[]{(byte) -16, (byte) -97, (byte) -108, (byte) -97}, new byte[]{(byte) -18, (byte) -85, (byte) -67}, new byte[]{(byte) -18, (byte) -85, (byte) -66}, new byte[]{(byte) -18, (byte) -85, (byte) -65}, new byte[]{(byte) -18, (byte) -84, Byte.MIN_VALUE}, new byte[]{(byte) -18, (byte) -83, (byte) -107}, new byte[]{(byte) -18, (byte) -124, (byte) -99}, new byte[]{(byte) -18, (byte) -106, (byte) -125}, new byte[]{(byte) -18, (byte) -100, (byte) -104}, new byte[]{(byte) -18, (byte) -124, (byte) -106}, new byte[]{(byte) -18, (byte) -106, (byte) -121}, new byte[]{(byte) -18, (byte) -120, (byte) -66}, new byte[]{(byte) -18, (byte) -120, (byte) -119}, new byte[]{(byte) -18, (byte) -100, (byte) -102}, new byte[]{(byte) -18, (byte) -120, (byte) -102}, new byte[]{(byte) -18, (byte) -120, (byte) -101}, new byte[]{(byte) -18, (byte) -120, (byte) -103}, new byte[]{(byte) -18, (byte) -107, (byte) -117}, new byte[]{(byte) -18, (byte) -107, (byte) -122}, new byte[]{(byte) -18, (byte) -107, (byte) -121}, new byte[]{(byte) -18, (byte) -108, (byte) -74}, new byte[]{(byte) -18, (byte) -108, (byte) -73}, new byte[]{(byte) -18, (byte) -107, (byte) -102}, new byte[]{(byte) -18, (byte) -107, (byte) -101}, new byte[]{(byte) -18, (byte) -107, (byte) -125}, new byte[]{(byte) -18, (byte) -107, (byte) -126}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -92}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -91}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -90}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -89}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -88}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -87}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -86}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -85}, new byte[]{(byte) -18, (byte) -102, (byte) -70}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -83}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -82}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -81}, new byte[]{(byte) -16, (byte) -97, (byte) -107, (byte) -100}, new byte[]{(byte) -16, (byte) -97, (byte) -107, (byte) -99}, new byte[]{(byte) -16, (byte) -97, (byte) -107, (byte) -98}, new byte[]{(byte) -16, (byte) -97, (byte) -107, (byte) -97}, new byte[]{(byte) -16, (byte) -97, (byte) -107, (byte) -96}, new byte[]{(byte) -16, (byte) -97, (byte) -107, (byte) -95}, new byte[]{(byte) -16, (byte) -97, (byte) -107, (byte) -94}, new byte[]{(byte) -16, (byte) -97, (byte) -107, (byte) -93}, new byte[]{(byte) -16, (byte) -97, (byte) -107, (byte) -92}, new byte[]{(byte) -16, (byte) -97, (byte) -107, (byte) -91}, new byte[]{(byte) -16, (byte) -97, (byte) -107, (byte) -90}, new byte[]{(byte) -16, (byte) -97, (byte) -107, (byte) -89}, new byte[]{(byte) -18, (byte) -100, (byte) -124}, new byte[]{(byte) -18, (byte) -100, (byte) -125}, new byte[]{(byte) -18, (byte) -100, (byte) -125}, new byte[]{(byte) -18, (byte) -120, (byte) -112}, new byte[]{(byte) -18, (byte) -100, (byte) -78}, new byte[]{(byte) -18, (byte) -100, (byte) -78}, new byte[]{(byte) -18, (byte) -108, (byte) -77}, new byte[]{(byte) -18, (byte) -108, (byte) -77}, new byte[]{(byte) -18, (byte) -100, (byte) -68}, new byte[]{(byte) -18, (byte) -100, (byte) -68}, new byte[]{(byte) -18, (byte) -100, (byte) -67}, new byte[]{(byte) -18, (byte) -100, (byte) -67}, new byte[]{(byte) -18, (byte) -120, (byte) -73}, new byte[]{(byte) -18, (byte) -120, (byte) -74}, new byte[]{(byte) -18, (byte) -120, (byte) -72}, new byte[]{(byte) -18, (byte) -120, (byte) -71}, new byte[]{(byte) -18, (byte) -101, (byte) -102}, new byte[]{(byte) -18, (byte) -107, (byte) -100}, new byte[]{(byte) -18, (byte) -120, (byte) -68}, new byte[]{(byte) -18, (byte) -120, (byte) -67}, new byte[]{(byte) -18, (byte) -107, (byte) -123}, new byte[]{(byte) -18, (byte) -107, (byte) -124}, new byte[]{(byte) -18, (byte) -106, (byte) -108}, new byte[]{(byte) -18, (byte) -111, (byte) -68}, new byte[]{(byte) -18, (byte) -106, (byte) -68}, new byte[]{(byte) -18, (byte) -108, (byte) -78}, new byte[]{(byte) -18, (byte) -108, (byte) -79}, new byte[]{(byte) -18, (byte) -120, (byte) -70}, new byte[]{(byte) -18, (byte) -120, (byte) -69}, new byte[]{(byte) -18, (byte) -108, (byte) -72}, new byte[]{(byte) -18, (byte) -108, (byte) -71}, new byte[]{(byte) -18, (byte) -108, (byte) -76}, new byte[]{(byte) -18, (byte) -108, (byte) -75}, new byte[]{(byte) -18, (byte) -84, (byte) -126}, new byte[]{(byte) -18, (byte) -103, (byte) -122}, new byte[]{(byte) -18, (byte) -103, (byte) -121}, new byte[]{(byte) -18, (byte) -119, (byte) -127}, new byte[]{(byte) -18, (byte) -119, (byte) -126}, new byte[]{(byte) -18, (byte) -103, (byte) -118}, new byte[]{(byte) -18, (byte) -119, (byte) -124}, new byte[]{(byte) -18, (byte) -119, (byte) -123}, new byte[]{(byte) -18, (byte) -103, (byte) -115}, new byte[]{(byte) -18, (byte) -103, (byte) -114}, new byte[]{(byte) -18, (byte) -103, (byte) -113}, new byte[]{(byte) -18, (byte) -103, (byte) -112}, new byte[]{(byte) -18, (byte) -103, (byte) -111}, new byte[]{(byte) -18, (byte) -102, (byte) -114}, new byte[]{(byte) -18, (byte) -102, (byte) -112}, new byte[]{(byte) -18, (byte) -102, (byte) -115}, new byte[]{(byte) -18, (byte) -102, (byte) -113}, new byte[]{(byte) -18, (byte) -124, (byte) -93}, new byte[]{(byte) -18, (byte) -100, (byte) -75}, new byte[]{(byte) -18, (byte) -102, (byte) -101}, new byte[]{(byte) -18, (byte) -103, (byte) -95}, new byte[]{(byte) -18, (byte) -100, (byte) -73}, new byte[]{(byte) -18, (byte) -103, (byte) -126}, new byte[]{(byte) -18, (byte) -102, (byte) -100}, new byte[]{(byte) -18, (byte) -108, (byte) -69}, new byte[]{(byte) -18, (byte) -119, (byte) -117}, new byte[]{(byte) -18, (byte) -110, (byte) -124}, new byte[]{(byte) -18, (byte) -107, (byte) -98}, new byte[]{(byte) -18, (byte) -108, (byte) -95}, new byte[]{(byte) -18, (byte) -107, (byte) -105}, new byte[]{(byte) -18, (byte) -107, (byte) -113}, new byte[]{(byte) -18, (byte) -116, (byte) -82}, new byte[]{(byte) -18, (byte) -120, (byte) -122}, new byte[]{(byte) -18, (byte) -120, (byte) -123}, new byte[]{(byte) -18, (byte) -110, (byte) -118}, new byte[]{(byte) -18, (byte) -101, (byte) -70}, new byte[]{(byte) -18, (byte) -116, (byte) -77}, new byte[]{(byte) -18, (byte) -116, (byte) -77}, new byte[]{(byte) -18, (byte) -107, (byte) -111}, new byte[]{(byte) -18, (byte) -107, (byte) -111}, new byte[]{(byte) -18, (byte) -116, (byte) -74}, new byte[]{(byte) -18, (byte) -110, (byte) -125}, new byte[]{(byte) -18, (byte) -116, (byte) -73}, new byte[]{(byte) -18, (byte) -100, (byte) -126}, new byte[]{(byte) -18, (byte) -110, (byte) -126}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -94}, new byte[]{(byte) -18, (byte) -108, (byte) -68}, new byte[]{(byte) -18, (byte) -108, (byte) -67}, new byte[]{(byte) -18, (byte) -107, (byte) -108}, new byte[]{(byte) -18, (byte) -120, (byte) -76}, new byte[]{(byte) -18, (byte) -100, (byte) -118}, new byte[]{(byte) -18, (byte) -120, (byte) -111}, new byte[]{(byte) -18, (byte) -101, (byte) -75}, new byte[]{(byte) -18, (byte) -84, (byte) -82}, new byte[]{(byte) -18, (byte) -120, (byte) -75}, new byte[]{(byte) -18, (byte) -120, (byte) -78}, new byte[]{(byte) -18, (byte) -120, (byte) -77}, new byte[]{(byte) -18, (byte) -107, (byte) -119}, new byte[]{(byte) -18, (byte) -107, (byte) -120}, new byte[]{(byte) -18, (byte) -116, (byte) -81}, new byte[]{(byte) -18, (byte) -116, (byte) -78}, new byte[]{(byte) -18, (byte) -100, (byte) -119}, new byte[]{(byte) -18, (byte) -124, (byte) -84}, new byte[]{(byte) -18, (byte) -124, (byte) -84}, new byte[]{(byte) -18, (byte) -116, (byte) -115}, new byte[]{(byte) -18, (byte) -100, (byte) -76}, new byte[]{(byte) -17, (byte) -93, (byte) -85}, new byte[]{(byte) -13, (byte) -66, (byte) -109, (byte) -94}, new byte[]{(byte) -13, (byte) -66, (byte) -109, (byte) -93}, new byte[]{(byte) -13, (byte) -66, (byte) -109, (byte) -92}, new byte[]{(byte) -18, (byte) -108, (byte) -117}, new byte[]{(byte) -13, (byte) -66, (byte) -109, (byte) -90}, new byte[]{(byte) -13, (byte) -66, (byte) -109, (byte) -89}, new byte[]{(byte) -18, (byte) -108, (byte) -114}, new byte[]{(byte) -18, (byte) -108, (byte) -113}, new byte[]{(byte) -18, (byte) -84, (byte) -112}, new byte[]{(byte) -13, (byte) -66, (byte) -109, (byte) -85}, new byte[]{(byte) -18, (byte) -108, (byte) -110}, new byte[]{(byte) -18, (byte) -108, (byte) -109}, new byte[]{(byte) -13, (byte) -66, (byte) -109, (byte) -82}, new byte[]{(byte) -18, (byte) -82, (byte) -124}, new byte[]{(byte) -18, (byte) -120, (byte) -100}, new byte[]{(byte) -18, (byte) -120, (byte) -99}, new byte[]{(byte) -18, (byte) -120, (byte) -98}, new byte[]{(byte) -18, (byte) -120, (byte) -97}, new byte[]{(byte) -18, (byte) -120, (byte) -96}, new byte[]{(byte) -18, (byte) -120, (byte) -95}, new byte[]{(byte) -18, (byte) -120, (byte) -94}, new byte[]{(byte) -18, (byte) -120, (byte) -93}, new byte[]{(byte) -18, (byte) -120, (byte) -92}, new byte[]{(byte) -18, (byte) -120, (byte) -91}};
    public static final byte[][] emojiTools = new byte[][]{new byte[]{(byte) -18, (byte) -103, (byte) -123}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -77}, new byte[]{(byte) -18, (byte) -111, (byte) -120}, new byte[]{(byte) -18, (byte) -124, (byte) -105}, new byte[]{(byte) -18, (byte) -111, Byte.MIN_VALUE}, new byte[]{(byte) -18, (byte) -116, (byte) -112}, new byte[]{(byte) -18, (byte) -116, (byte) -110}, new byte[]{(byte) -18, (byte) -111, (byte) -126}, new byte[]{(byte) -18, (byte) -111, (byte) -122}, new byte[]{(byte) -18, (byte) -112, (byte) -70}, new byte[]{(byte) -18, (byte) -112, (byte) -71}, new byte[]{(byte) -18, (byte) -103, (byte) -71}, new byte[]{(byte) -18, (byte) -124, (byte) -92}, new byte[]{(byte) -18, (byte) -112, (byte) -77}, new byte[]{(byte) -18, (byte) -83, (byte) -126}, new byte[]{(byte) -18, (byte) -103, (byte) -125}, new byte[]{(byte) -18, (byte) -103, (byte) -73}, new byte[]{(byte) -18, (byte) -108, (byte) -121}, new byte[]{(byte) -18, (byte) -103, (byte) -70}, new byte[]{(byte) -18, (byte) -103, (byte) -69}, new byte[]{(byte) -18, (byte) -103, (byte) -68}, new byte[]{(byte) -18, (byte) -103, (byte) -67}, new byte[]{(byte) -18, (byte) -124, (byte) -91}, new byte[]{(byte) -18, (byte) -102, (byte) -84}, new byte[]{(byte) -18, (byte) -106, (byte) -99}, new byte[]{(byte) -18, (byte) -102, (byte) -117}, new byte[]{(byte) -18, (byte) -124, (byte) -80}, new byte[]{(byte) -18, (byte) -124, (byte) -77}, new byte[]{(byte) -18, (byte) -112, (byte) -84}, new byte[]{(byte) -18, (byte) -109, (byte) -120}, new byte[]{(byte) -18, (byte) -83, (byte) -125}, new byte[]{(byte) -18, (byte) -83, (byte) -82}, new byte[]{(byte) -18, (byte) -101, (byte) -74}, new byte[]{(byte) -18, (byte) -116, (byte) -90}, new byte[]{(byte) -18, (byte) -127, Byte.MIN_VALUE}, new byte[]{(byte) -18, (byte) -127, (byte) -127}, new byte[]{(byte) -18, (byte) -83, Byte.MIN_VALUE}, new byte[]{(byte) -18, (byte) -127, (byte) -126}, new byte[]{(byte) -16, (byte) -97, (byte) -114, (byte) -69}, new byte[]{(byte) -18, (byte) -101, (byte) -65}, new byte[]{(byte) -18, (byte) -103, (byte) -110}, new byte[]{(byte) -18, (byte) -103, (byte) -107}, new byte[]{(byte) -18, (byte) -103, (byte) -105}, new byte[]{(byte) -18, (byte) -112, (byte) -86}, new byte[]{(byte) -18, (byte) -124, (byte) -78}, new byte[]{(byte) -18, (byte) -110, (byte) -72}, new byte[]{(byte) -18, (byte) -100, (byte) -77}, new byte[]{(byte) -18, (byte) -100, (byte) -110}, new byte[]{(byte) -18, (byte) -124, (byte) -79}, new byte[]{(byte) -16, (byte) -97, (byte) -113, (byte) -121}, new byte[]{(byte) -18, (byte) -112, (byte) -85}, new byte[]{(byte) -16, (byte) -97, (byte) -113, (byte) -119}, new byte[]{(byte) -18, (byte) -112, (byte) -83}, new byte[]{(byte) -18, (byte) -110, (byte) -67}, new byte[]{(byte) -18, (byte) -124, (byte) -114}, new byte[]{(byte) -18, (byte) -116, (byte) -104}, new byte[]{(byte) -18, (byte) -102, (byte) -102}, new byte[]{(byte) -18, (byte) -116, (byte) -126}, new byte[]{(byte) -18, (byte) -100, (byte) -114}, new byte[]{(byte) -18, (byte) -100, (byte) -111}, new byte[]{(byte) -18, (byte) -116, (byte) -103}, new byte[]{(byte) -18, (byte) -116, (byte) -95}, new byte[]{(byte) -18, (byte) -116, (byte) -94}, new byte[]{(byte) -18, (byte) -108, (byte) -115}, new byte[]{(byte) -18, (byte) -100, (byte) -113}, new byte[]{(byte) -18, (byte) -102, (byte) -126}, new byte[]{(byte) -18, (byte) -102, (byte) -83}, new byte[]{(byte) -18, (byte) -106, (byte) -73}, new byte[]{(byte) -18, (byte) -102, (byte) -103}, new byte[]{(byte) -18, (byte) -103, (byte) -76}, new byte[]{(byte) -18, (byte) -116, (byte) -102}, new byte[]{(byte) -18, (byte) -116, (byte) -101}, new byte[]{(byte) -18, (byte) -116, (byte) -113}, new byte[]{(byte) -18, (byte) -100, (byte) -105}, new byte[]{(byte) -18, (byte) -100, (byte) -101}, new byte[]{(byte) -18, (byte) -108, (byte) -108}, new byte[]{(byte) -18, (byte) -101, (byte) -69}, new byte[]{(byte) -18, (byte) -101, (byte) -68}, new byte[]{(byte) -18, (byte) -101, (byte) -66}, new byte[]{(byte) -18, (byte) -100, (byte) -127}, new byte[]{(byte) -18, (byte) -100, (byte) -123}, new byte[]{(byte) -18, (byte) -100, (byte) -121}, new byte[]{(byte) -18, (byte) -100, (byte) -120}, new byte[]{(byte) -18, (byte) -127, (byte) -102}, new byte[]{(byte) -18, (byte) -123, (byte) -116}, new byte[]{(byte) -18, (byte) -83, (byte) -100}, new byte[]{(byte) -18, (byte) -109, (byte) -67}, new byte[]{(byte) -16, (byte) -97, (byte) -110, (byte) -83}, new byte[]{(byte) -18, (byte) -109, (byte) -80}, new byte[]{(byte) -18, (byte) -109, (byte) -78}, new byte[]{(byte) -18, (byte) -100, (byte) -107}, new byte[]{(byte) -18, (byte) -123, (byte) -119}, new byte[]{(byte) -18, (byte) -107, (byte) -71}, new byte[]{(byte) -18, (byte) -107, (byte) -68}, new byte[]{(byte) -18, (byte) -101, (byte) -106}, new byte[]{(byte) -18, (byte) -106, (byte) -123}, new byte[]{(byte) -16, (byte) -97, (byte) -110, (byte) -74}, new byte[]{(byte) -16, (byte) -97, (byte) -110, (byte) -73}, new byte[]{(byte) -18, (byte) -83, (byte) -101}, new byte[]{(byte) -18, (byte) -123, (byte) -118}, new byte[]{(byte) -18, (byte) -102, (byte) -78}, new byte[]{(byte) -18, (byte) -100, (byte) -106}, new byte[]{(byte) -18, (byte) -124, (byte) -98}, new byte[]{(byte) -18, (byte) -116, (byte) -106}, new byte[]{(byte) -18, (byte) -107, (byte) -94}, new byte[]{(byte) -18, (byte) -108, (byte) -116}, new byte[]{(byte) -18, (byte) -124, (byte) -89}, new byte[]{(byte) -16, (byte) -97, (byte) -109, (byte) -127}, new byte[]{(byte) -18, (byte) -106, (byte) -112}, new byte[]{(byte) -18, (byte) -107, (byte) -95}, new byte[]{(byte) -18, (byte) -102, (byte) -119}, new byte[]{(byte) -18, (byte) -107, (byte) -93}, new byte[]{(byte) -18, (byte) -107, (byte) -86}, new byte[]{(byte) -18, (byte) -102, (byte) -125}, new byte[]{(byte) -18, (byte) -107, (byte) -75}, new byte[]{(byte) -18, (byte) -107, (byte) -74}, new byte[]{(byte) -18, (byte) -107, (byte) -76}, new byte[]{(byte) -18, (byte) -107, (byte) -92}, new byte[]{(byte) -18, (byte) -107, (byte) -83}, new byte[]{(byte) -18, (byte) -107, (byte) -96}, new byte[]{(byte) -18, (byte) -100, (byte) -80}, new byte[]{(byte) -18, (byte) -107, (byte) -80}, new byte[]{(byte) -18, (byte) -110, (byte) -94}, new byte[]{(byte) -16, (byte) -97, (byte) -109, (byte) -111}, new byte[]{(byte) -18, (byte) -107, (byte) -82}, new byte[]{(byte) -18, (byte) -107, (byte) -85}, new byte[]{(byte) -18, (byte) -110, (byte) -99}, new byte[]{(byte) -18, (byte) -107, (byte) -88}, new byte[]{(byte) -18, (byte) -123, (byte) -120}, new byte[]{(byte) -18, (byte) -107, (byte) -91}, new byte[]{(byte) -18, (byte) -107, (byte) -90}, new byte[]{(byte) -18, (byte) -107, (byte) -89}, new byte[]{(byte) -18, (byte) -107, (byte) -81}, new byte[]{(byte) -18, (byte) -108, (byte) -99}, new byte[]{(byte) -18, (byte) -107, (byte) -97}, new byte[]{(byte) -18, (byte) -116, (byte) -127}, new byte[]{(byte) -16, (byte) -97, (byte) -109, (byte) -98}, new byte[]{(byte) -18, (byte) -103, (byte) -102}, new byte[]{(byte) -18, (byte) -101, (byte) -112}, new byte[]{(byte) -18, (byte) -123, (byte) -117}, new byte[]{(byte) -18, (byte) -123, (byte) -126}, new byte[]{(byte) -18, (byte) -116, (byte) -105}, new byte[]{(byte) -18, (byte) -106, (byte) -110}, new byte[]{(byte) -18, (byte) -106, (byte) -109}, new byte[]{(byte) -16, (byte) -97, (byte) -109, (byte) -90}, new byte[]{(byte) -18, (byte) -101, (byte) -109}, new byte[]{(byte) -18, (byte) -101, (byte) -113}, new byte[]{(byte) -18, (byte) -124, (byte) -125}, new byte[]{(byte) -18, (byte) -103, (byte) -91}, new byte[]{(byte) -18, (byte) -124, (byte) -127}, new byte[]{(byte) -16, (byte) -97, (byte) -109, (byte) -84}, new byte[]{(byte) -16, (byte) -97, (byte) -109, (byte) -83}, new byte[]{(byte) -18, (byte) -124, (byte) -126}, new byte[]{(byte) -16, (byte) -97, (byte) -109, (byte) -81}, new byte[]{(byte) -18, (byte) -106, (byte) -117}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -118}, new byte[]{(byte) -18, (byte) -124, (byte) -124}, new byte[]{(byte) -18, (byte) -119, (byte) -112}, new byte[]{(byte) -18, (byte) -119, (byte) -111}, new byte[]{(byte) -16, (byte) -97, (byte) -109, (byte) -75}, new byte[]{(byte) -18, (byte) -120, (byte) -117}, new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -120}, new byte[]{(byte) -18, (byte) -107, (byte) -66}, new byte[]{(byte) -18, (byte) -102, (byte) -118}, new byte[]{(byte) -18, (byte) -124, (byte) -88}, new byte[]{(byte) -18, (byte) -124, (byte) -87}, new byte[]{(byte) -18, (byte) -108, (byte) -111}, new byte[]{(byte) -18, (byte) -106, (byte) -124}, new byte[]{(byte) -18, (byte) -106, (byte) -119}, new byte[]{(byte) -18, (byte) -124, (byte) -108}, new byte[]{(byte) -18, (byte) -101, (byte) -100}, new byte[]{(byte) -18, (byte) -84, (byte) -116}, new byte[]{(byte) -18, (byte) -107, (byte) -65}, new byte[]{(byte) -18, (byte) -124, (byte) -109}, new byte[]{(byte) -16, (byte) -97, (byte) -108, (byte) -84}, new byte[]{(byte) -16, (byte) -97, (byte) -108, (byte) -83}, new byte[]{(byte) -18, (byte) -86, (byte) -113}, new byte[]{(byte) -18, (byte) -100, (byte) -97}, new byte[]{(byte) -18, (byte) -100, (byte) -100}, new byte[]{(byte) -18, (byte) -102, (byte) -121}, new byte[]{(byte) -18, (byte) -103, (byte) -106}, new byte[]{(byte) -18, (byte) -103, (byte) -109}, new byte[]{(byte) -18, (byte) -103, (byte) -108}, new byte[]{(byte) -18, (byte) -116, (byte) -109}, new byte[]{(byte) -18, (byte) -100, (byte) -103}, new byte[]{(byte) -18, (byte) -102, (byte) -82}};
    private static final String[] mEmoticonsText = new String[]{"(y)", "(n)", ":hai", "B)", ":agent", ":p", ":evtongue", ":)", ":#", ":>", ":vshy", ";)", ":D", ":))", ":dance", "({})", ":peace", "d^_^b", ":puss", "<3<3", ":*", "({*})", "^__^", "':D", ":')", "-.-", ":|", ":(", ">->", "':|", "-_-'", ":'(", ":=(", ":((", "</3", ":sosad", ">:(", ":s", "X_X", "-o-'", "'-'/", ">:/", "3-|", ":O", ":9/", "8-O", ";;)", ":..", "$)", ":call", "O:)", "(=|", "|)", ":x", "DX", ":oek", ":punch", ">:O", ">:@", ":hardshock", "^-^", ":payung", ":poker", ":loveshot", ">:)<", ":salaman", ":nyerah", ":-(*=", "(:)-0", ">-O-/", "oDo", ":cf", ":flower", "<3", "{@};-", "X--", "~O)", ":tea", ":gelas", ":meow", ">-)", ":tengkorak", ":hh", ":idea", ":bom", "(!)"};
    private onAttachmentClickListener attachmentClickListener;
    private onPanelEmojiAnimation emojiPanelAnimation;
    private onEmojiPanelComponentListener emojiPanelComponentListener;
    private String mAttachPathHelper = "";
    private AlbusAudioPlayer mAudioPlayer = null;
    private AlbusAudioRecorder mAudioRecorder = null;
    private LinearLayout mBottomBar = null;
    private Button mBtnKeyboard1 = null;
    private Button mBtnKeyboard2 = null;
    private Button mBtnSpace = null;
    private int mChatSizePxHelper = CHAT_VIEW;
    private Context mContext = null;
    private int mCurrentTypeHelper = MEDIA_TYPE_IMAGE;
    private Dialog mDialog = null;
    private Drawable mDrawable = null;
    private List mEmojiCity = null;
    private List mEmojiNature = null;
    private List mEmojiSmile = null;
    private List mEmojiSymbol = null;
    private List mEmojiTool = null;
    private EmoticonsPagerAdapter mEmoticonPager = null;
    private List mEmoticons = null;
    private ChatEditText mEtMessage = null;
    private ChatEditText mEtMessage2 = null;
    private boolean mFirstOpen = true;
    private boolean mHasAttach;
    private EmoticonHeaderListAdapter mHeadAdapter = null;
    private HorizontalListView mHlvEmojiHeader = null;
    private ImageButton mIbAttach = null;
    private ImageButton mIbCancelFile = null;
    private ImageButton mIbCancelPhoto = null;
    private ImageButton mIbCancelQuote = null;
    private ImageButton mIbCancelVideo = null;
    private ImageButton mIbCancelVoice = null;
    private ImageButton mIbDeleteEmoji = null;
    private ImageButton mIbEmoji = null;
    private ImageButton mIbEmoji2 = null;
    private ImageButton mIbSend = null;
    private ImageButton mIbVoicePlayer = null;
    private DecelerateInterpolator mInterpolatorDown = new DecelerateInterpolator(1.5f);
    private AccelerateInterpolator mInterpolatorUp = new AccelerateInterpolator(1.5f);
    private boolean mIsAlreadyTrySticker = false;
    private boolean mIsBroadcast = false;
    private boolean mIsDialogShown = false;
    private boolean mIsEditProfileStatus = false;
    private boolean mIsEmotPanelOpen = false;
    private boolean mIsKeyoboardOpen = false;
    private boolean mIsSecondEmoActive = false;
    private boolean mIsStickerPanelOpen = false;
    private boolean mIsVoiceOn = true;
    private boolean mIsWriting = false;
    private ImageView mIvAttachedImage = null;
    private ImageView mIvFileAttachedImage = null;
    private List mListEmo = null;
    private LinearLayout mLlAttachPanel = null;
    private LinearLayout mLlAttachWriteEmo = null;
    private LinearLayout mLlAttach_blitz = null;
    private LinearLayout mLlAttach_contact = null;
    private LinearLayout mLlAttach_file = null;
    private LinearLayout mLlAttach_fizzlink = null;
    private LinearLayout mLlAttach_music = null;
    private LinearLayout mLlAttach_photo = null;
    private LinearLayout mLlAttach_video = null;
    private LinearLayout mLlAttach_voice = null;
    private LinearLayout mLlContainerBottomBar = null;
    private LinearLayout mLlEmoBack;
    private LinearLayout mLlEmojiFooter = null;
    private LinearLayout mLlFileAttach = null;
    private LinearLayout mLlQuoteAttach = null;
    private LinearLayout mLlStickerCS;
    private LinearLayout mLlStickerNotif = null;
    private LinearLayout mLlWriteBar = null;
    private LinearLayout mLlWriteNEmo = null;
    private MediaPlayer mMediaPlayer = null;
    private int mPanelEmotHeight = CHAT_VIEW;
    private CatfishPreferences mPref = null;
    private RelativeLayout mRlAttachVoice = null;
    private RelativeLayout mRlPanelEmoji = null;
    private RelativeLayout mRlPhotoAttach = null;
    private RelativeLayout mRlRoot = null;
    private RelativeLayout mRlVideoAttach = null;
    private SeekBar mSbPlayback = null;
    private StickerMessageObject[] mStickerPackages = null;
    private TextView mTvDuration = null;
    private TextView mTvFileName = null;
    private TextView mTvFileSize = null;
    private TextView mTvImageName = null;
    private CustomTextView mTvQuote = null;
    private TextView mTvQuoteName = null;
    private TextView mTvVideoName = null;
    private String mUserId = null;
    private View mVStickerDevider;
    private int mViewMode = CHAT_VIEW;
    private ViewPager mVpEmojiPager = null;
    private VideoView mVvAttachVideo = null;
    private onVoiceBroadcastAttach voiceBroadcastAttach;

    public interface onPanelEmojiAnimation {
        void onPanelDown();

        void onPanelDownFinished();

        void onPanelUp(View view);

        void onPanelUpFinished(View view);
    }

    public interface onEmojiPanelComponentListener {
        void onBtnKeyboardPressed(View view);

        void onBtnSendPressed(String str);

        void onBtnStickerActive(ImageButton imageButton, boolean z);

        void onEditTextFocusChanged();
    }

    public interface onAttachmentClickListener {
        void onCancelAttachmentClicked();

        void onContactPIN();

        void onFileAttachmentClicked();

        void onFizzlinkAttachmentClicked();

        void onMusicAttachmentClicked();

        void onPhotoAttachmentClicked(Uri uri);

        void onSendBlitz();

        void onVideoAttachmentClicked();

        void onVoiceAttachmentClicked(String str);
    }

    public interface onVoiceBroadcastAttach {
        void onVoiceBroadcastAttachmentClicked(String str, MediaPlayer mediaPlayer);
    }

    class AsyncLoadScaledBitmap extends ImageReScaler {
        private WeakReference mImageView;

        public AsyncLoadScaledBitmap(Context context, int i) {
            super(context, i);
        }

        public AsyncLoadScaledBitmap(Context context, ImageView imageView, int i) {
            super(context, i);
            this.mImageView = new WeakReference(imageView);
        }

        protected void onPostExecute(Bitmap bitmap) {
            if (bitmap != null && !bitmap.isRecycled() && !isCancelled()) {
                ImageView imageView = (ImageView) this.mImageView.get();
                Log.d(ChatsBottomBarView.TAG, "bitmap=" + bitmap);
                if (imageView != null) {
                    imageView.setImageBitmap(bitmap);
                } else {
                    bitmap.recycle();
                }
            }
        }
    }

    static {
        byte[][] bArr = new byte[R.styleable.Theme_ratingBarStyle][];
        bArr[CHAT_VIEW] = new byte[]{(byte) -18, (byte) -120, (byte) -90};
        bArr[MEDIA_TYPE_IMAGE] = new byte[]{(byte) -18, (byte) -111, (byte) -117};
        bArr[MEDIA_TYPE_VIDEO] = new byte[]{(byte) -18, (byte) -127, (byte) -115};
        bArr[COMMENT_VIEW] = new byte[]{(byte) -18, (byte) -104, (byte) -66};
        bArr[PROFILE_VIEW] = new byte[]{(byte) -18, (byte) -123, (byte) -122};
        bArr[5] = new byte[]{(byte) -18, (byte) -111, (byte) -118};
        bArr[6] = new byte[]{(byte) -18, (byte) -111, (byte) -116};
        bArr[7] = new byte[]{(byte) -18, (byte) -102, (byte) -77};
        bArr[8] = new byte[]{(byte) -16, (byte) -97, (byte) -116, (byte) -112};
        bArr[9] = new byte[]{(byte) -18, (byte) -110, (byte) -85};
        bArr[10] = new byte[]{(byte) -18, (byte) -103, (byte) -93};
        bArr[11] = new byte[]{(byte) -18, (byte) -103, (byte) -92};
        bArr[12] = new byte[]{(byte) -18, (byte) -123, (byte) -109};
        bArr[13] = new byte[]{(byte) -16, (byte) -97, (byte) -113, (byte) -92};
        bArr[14] = new byte[]{(byte) -18, (byte) -103, (byte) -90};
        bArr[15] = new byte[]{(byte) -18, (byte) -103, (byte) -89};
        bArr[16] = new byte[]{(byte) -18, (byte) -103, (byte) -88};
        bArr[17] = new byte[]{(byte) -18, (byte) -103, (byte) -87};
        bArr[18] = new byte[]{(byte) -18, (byte) -108, (byte) -127};
        bArr[19] = new byte[]{(byte) -18, (byte) -103, (byte) -86};
        bArr[20] = new byte[]{(byte) -18, (byte) -100, (byte) -66};
        bArr[21] = new byte[]{(byte) -18, (byte) -108, (byte) -124};
        bArr[22] = new byte[]{(byte) -18, (byte) -108, (byte) -120};
        bArr[23] = new byte[]{(byte) -18, (byte) -108, (byte) -123};
        bArr[24] = new byte[]{(byte) -18, (byte) -108, (byte) -122};
        bArr[25] = new byte[]{(byte) -18, (byte) -99, Byte.MIN_VALUE};
        bArr[26] = new byte[]{(byte) -18, (byte) -108, (byte) -119};
        bArr[27] = new byte[]{(byte) -16, (byte) -97, (byte) -105, (byte) -67};
        bArr[28] = new byte[]{(byte) -18, (byte) -107, (byte) -78};
        bArr[29] = new byte[]{(byte) -18, (byte) -83, (byte) -84};
        bArr[30] = new byte[]{(byte) -18, (byte) -124, (byte) -115};
        bArr[31] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -127};
        bArr[32] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -126};
        bArr[33] = new byte[]{(byte) -18, (byte) -103, (byte) -101};
        bArr[34] = new byte[]{(byte) -18, (byte) -112, (byte) -75};
        bArr[35] = new byte[]{(byte) -18, (byte) -103, (byte) -99};
        bArr[36] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -122};
        bArr[37] = new byte[]{(byte) -18, (byte) -103, (byte) -100};
        bArr[38] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -120};
        bArr[39] = new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -71};
        bArr[40] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -118};
        bArr[41] = new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -98};
        bArr[42] = new byte[]{(byte) -18, (byte) -103, (byte) -96};
        bArr[43] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -115};
        bArr[44] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -114};
        bArr[45] = new byte[]{(byte) -18, (byte) -123, (byte) -112};
        bArr[46] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -112};
        bArr[47] = new byte[]{(byte) -18, (byte) -112, (byte) -79};
        bArr[48] = new byte[]{(byte) -18, (byte) -112, (byte) -80};
        bArr[49] = new byte[]{(byte) -18, (byte) -112, (byte) -78};
        bArr[50] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -108};
        bArr[51] = new byte[]{(byte) -18, (byte) -123, (byte) -102};
        bArr[52] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -106};
        bArr[53] = new byte[]{(byte) -18, (byte) -103, (byte) -98};
        bArr[54] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -104};
        bArr[55] = new byte[]{(byte) -18, (byte) -103, (byte) -97};
        bArr[56] = new byte[]{(byte) -18, (byte) -112, (byte) -81};
        bArr[57] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -101};
        bArr[58] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -100};
        bArr[59] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -99};
        bArr[60] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -98};
        bArr[61] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -97};
        bArr[62] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -96};
        bArr[63] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -95};
        bArr[64] = new byte[]{(byte) -18, (byte) -120, (byte) -126};
        bArr[65] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -93};
        bArr[66] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -92};
        bArr[67] = new byte[]{(byte) -18, (byte) -103, (byte) -83};
        bArr[68] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -90};
        bArr[69] = new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -73};
        bArr[70] = new byte[]{(byte) -18, (byte) -83, (byte) -77};
        bArr[71] = new byte[]{(byte) -18, (byte) -101, (byte) -98};
        bArr[72] = new byte[]{(byte) -18, (byte) -100, (byte) -108};
        bArr[73] = new byte[]{(byte) -18, (byte) -100, (byte) -72};
        bArr[74] = new byte[]{(byte) -18, (byte) -103, (byte) -65};
        bArr[75] = new byte[]{(byte) -18, (byte) -102, Byte.MIN_VALUE};
        bArr[76] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -82};
        bArr[77] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -81};
        bArr[78] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -80};
        bArr[79] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -79};
        bArr[80] = new byte[]{(byte) -18, (byte) -124, (byte) -74};
        bArr[81] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -77};
        bArr[82] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -76};
        bArr[83] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -75};
        bArr[84] = new byte[]{(byte) -18, (byte) -120, (byte) -127};
        bArr[85] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -73};
        bArr[86] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -72};
        bArr[87] = new byte[]{(byte) -18, (byte) -124, (byte) -72};
        bArr[88] = new byte[]{(byte) -18, (byte) -124, (byte) -71};
        bArr[89] = new byte[]{(byte) -18, (byte) -123, (byte) -111};
        bArr[90] = new byte[]{(byte) -18, (byte) -124, (byte) -70};
        bArr[91] = new byte[]{(byte) -18, (byte) -103, (byte) -82};
        bArr[92] = new byte[]{(byte) -18, (byte) -116, (byte) -119};
        bArr[93] = new byte[]{(byte) -16, (byte) -97, (byte) -102, (byte) -65};
        bArr[94] = new byte[]{(byte) -18, (byte) -101, (byte) -73};
        bArr[95] = new byte[]{(byte) -16, (byte) -97, (byte) -101, (byte) -127};
        bArr[96] = new byte[]{(byte) -16, (byte) -97, (byte) -101, (byte) -126};
        bArr[97] = new byte[]{(byte) -16, (byte) -97, (byte) -101, (byte) -125};
        bArr[98] = new byte[]{(byte) -16, (byte) -97, (byte) -101, (byte) -124};
        bArr[99] = new byte[]{(byte) -16, (byte) -97, (byte) -101, (byte) -123};
        bArr[100] = new byte[]{(byte) -18, (byte) -106, (byte) -69};
        bArr[HttpStatus.SC_SWITCHING_PROTOCOLS] = new byte[]{(byte) -18, (byte) -124, (byte) -95};
        bArr[HttpStatus.SC_PROCESSING] = new byte[]{(byte) -18, Byte.MIN_VALUE, (byte) -100};
        bArr[R.styleable.Theme_checkedTextViewStyle] = new byte[]{(byte) -18, (byte) -124, (byte) -94};
        bArr[R.styleable.Theme_editTextStyle] = new byte[]{(byte) -18, (byte) -103, (byte) -85};
        bArr[R.styleable.Theme_radioButtonStyle] = new byte[]{(byte) -18, (byte) -103, (byte) -94};
        emojiCity = bArr;
    }

    public ChatsBottomBarView(Context context) {
        super(context);
        if (!isInEditMode()) {
        }
    }

    public ChatsBottomBarView(Context context, AttributeSet attributeSet) {
        super(context, attributeSet);
        this.mContext = context;
        this.mBottomBar = (LinearLayout) ((LayoutInflater) context.getSystemService("layout_inflater")).inflate(R.layout.view_chat_bottom_bar, this);
        this.mLlContainerBottomBar = (LinearLayout) this.mBottomBar.findViewById(R.id.ll_container_footer_bar);
        this.mLlAttachWriteEmo = (LinearLayout) this.mBottomBar.findViewById(R.id.ll_attach_write_emo);
        this.mRlPanelEmoji = (RelativeLayout) this.mBottomBar.findViewById(R.id.rl_panel_emot);
        this.mLlEmojiFooter = (LinearLayout) this.mBottomBar.findViewById(R.id.ll_space_and_keyboard_bar);
        this.mRlRoot = (RelativeLayout) this.mBottomBar.findViewById(R.id.rl_root);
        this.mLlWriteBar = (LinearLayout) this.mBottomBar.findViewById(R.id.ll_footer_write_bar);
        this.mIbAttach = (ImageButton) this.mBottomBar.findViewById(R.id.ib_attach);
        this.mIbEmoji = (ImageButton) this.mBottomBar.findViewById(R.id.ib_emoji);
        this.mIbEmoji2 = (ImageButton) this.mBottomBar.findViewById(R.id.ib_emoji_2);
        this.mIbSend = (ImageButton) this.mBottomBar.findViewById(R.id.ib_send_msg);
        this.mIbDeleteEmoji = (ImageButton) this.mBottomBar.findViewById(R.id.ib_delete_emo);
        this.mEtMessage = (ChatEditText) this.mBottomBar.findViewById(R.id.et_text_msg);
        this.mHlvEmojiHeader = (HorizontalListView) this.mBottomBar.findViewById(R.id.lv_emo_header);
        this.mVpEmojiPager = (ViewPager) this.mBottomBar.findViewById(R.id.vp_emoticons_pager);
        this.mBtnKeyboard1 = (Button) this.mBottomBar.findViewById(R.id.btn_to_keyboard1);
        this.mBtnKeyboard2 = (Button) this.mBottomBar.findViewById(R.id.btn_to_keyboard2);
        this.mBtnSpace = (Button) this.mBottomBar.findViewById(R.id.btn_space);
        this.mLlWriteNEmo = (LinearLayout) this.mBottomBar.findViewById(R.id.ll_write_and_emo);
        this.mLlEmoBack = (LinearLayout) this.mBottomBar.findViewById(R.id.ll_emo_back);
        this.mLlStickerCS = (LinearLayout) this.mBottomBar.findViewById(R.id.ll_sticker_comingsoon);
        this.mLlAttachPanel = (LinearLayout) this.mBottomBar.findViewById(R.id.ll_attach);
        this.mLlQuoteAttach = (LinearLayout) this.mBottomBar.findViewById(R.id.ll_attach_quote);
        this.mTvQuoteName = (TextView) this.mBottomBar.findViewById(R.id.tv_quote_name);
        this.mTvQuote = (CustomTextView) this.mBottomBar.findViewById(R.id.tv_quote);
        this.mIbCancelQuote = (ImageButton) this.mBottomBar.findViewById(R.id.ib_cancel_quote);
        this.mRlPhotoAttach = (RelativeLayout) this.mBottomBar.findViewById(R.id.rl_attach_photo);
        this.mIvAttachedImage = (ImageView) this.mBottomBar.findViewById(R.id.iv_attach_img);
        this.mIbCancelPhoto = (ImageButton) this.mBottomBar.findViewById(R.id.ib_cancel_photo);
        this.mTvImageName = (TextView) this.mBottomBar.findViewById(R.id.tv_attach_photo_name);
        this.mRlVideoAttach = (RelativeLayout) this.mBottomBar.findViewById(R.id.rl_attach_video);
        this.mVvAttachVideo = (VideoView) this.mBottomBar.findViewById(R.id.vw_attach_video);
        this.mIbCancelVideo = (ImageButton) this.mBottomBar.findViewById(R.id.ib_cancel_video);
        this.mTvVideoName = (TextView) this.mBottomBar.findViewById(R.id.tv_attach_video_name);
        this.mLlFileAttach = (LinearLayout) this.mBottomBar.findViewById(R.id.ll_attach_file);
        this.mIvFileAttachedImage = (ImageView) this.mBottomBar.findViewById(R.id.iv_thumb_attach_file);
        this.mTvFileName = (TextView) this.mBottomBar.findViewById(R.id.tv_file_attach_name);
        this.mTvFileSize = (TextView) this.mBottomBar.findViewById(R.id.tv_file_attach_size);
        this.mIbCancelFile = (ImageButton) this.mBottomBar.findViewById(R.id.ib_cancel_file);
        this.mRlAttachVoice = (RelativeLayout) this.mBottomBar.findViewById(R.id.rl_attach_voice);
        this.mIbVoicePlayer = (ImageButton) this.mBottomBar.findViewById(R.id.ib_play);
        this.mTvDuration = (TextView) this.mBottomBar.findViewById(R.id.tv_duration);
        this.mSbPlayback = (SeekBar) this.mBottomBar.findViewById(R.id.sb_playback);
        this.mIbCancelVoice = (ImageButton) this.mBottomBar.findViewById(R.id.ib_cancel_voice);
        setNewLayout(false);
        this.mIbAttach.setOnClickListener(this);
        this.mIbEmoji.setOnClickListener(this);
        this.mIbEmoji2.setOnClickListener(this);
        this.mEtMessage.setOnClickListener(this);
        this.mIbSend.setOnClickListener(this);
        this.mIbDeleteEmoji.setOnClickListener(this);
        this.mBtnSpace.setOnClickListener(this);
        this.mBtnKeyboard1.setOnClickListener(this);
        this.mBtnKeyboard2.setOnClickListener(this);
        this.mIbCancelQuote.setOnClickListener(this);
        this.mIbCancelFile.setOnClickListener(this);
        this.mIbCancelPhoto.setOnClickListener(this);
        this.mIbCancelVideo.setOnClickListener(this);
        this.mIbVoicePlayer.setOnClickListener(this);
        this.mIbCancelVoice.setOnClickListener(this);
        this.mIbAttach.setOnTouchListener(this);
        this.mIbEmoji.setOnTouchListener(this);
        this.mIbSend.setOnTouchListener(this);
        this.mIbDeleteEmoji.setOnTouchListener(this);
        this.mIbCancelQuote.setOnTouchListener(this);
        this.mIbCancelFile.setOnTouchListener(this);
        this.mIbCancelPhoto.setOnTouchListener(this);
        this.mIbCancelVideo.setOnTouchListener(this);
        this.mIbVoicePlayer.setOnTouchListener(this);
        this.mIbCancelVoice.setOnTouchListener(this);
        this.mAudioPlayer = new AlbusAudioPlayer();
        this.mIbSend.setEnabled(true);
        this.mHeadAdapter = new EmoticonHeaderListAdapter(this.mContext, BottomBarUtil.getHeaderEmoticonIconOff(this.mContext), BottomBarUtil.getHeaderEmoticonIconOn(this.mContext), this);
        this.mHlvEmojiHeader.setAdapter(this.mHeadAdapter);
        this.mEtMessage.setOnFocusChangeListener(new OnFocusChangeListener() {
            public void onFocusChange(View view, boolean z) {
                if (view.getId() != ChatsBottomBarView.this.mEtMessage.getId()) {
                    return;
                }
                if (z) {
                    ChatsBottomBarView.this.mIsKeyoboardOpen = true;
                    if (ChatsBottomBarView.this.mIsEmotPanelOpen || ChatsBottomBarView.this.mIsStickerPanelOpen) {
                        ChatsBottomBarView.this.mRlPanelEmoji.setVisibility(8);
                        ChatsBottomBarView.this.mIbEmoji.setImageResource(R.drawable.ic_emot_dark);
                        ChatsBottomBarView.this.mIsEmotPanelOpen = false;
                        ChatsBottomBarView.this.mIsStickerPanelOpen = false;
                        if (ChatsBottomBarView.this.mIsAlreadyTrySticker) {
                            ChatsBottomBarView.this.mLlStickerNotif.setVisibility(8);
                        }
                    }
                    ChatsBottomBarView.this.emojiPanelComponentListener.onEditTextFocusChanged();
                    return;
                }
                ChatsBottomBarView.this.mIsKeyoboardOpen = false;
            }
        });
        this.mEtMessage.addTextChangedListener(new TextWatcher() {
            public void afterTextChanged(Editable editable) {
                if (ChatsBottomBarView.this.mIsDialogShown) {
                    ChatsBottomBarView.this.textChanges(false);
                } else {
                    ChatsBottomBarView.this.textChanges(true);
                }
                if (!ChatsBottomBarView.this.mIsWriting && editable.length() == ChatsBottomBarView.MEDIA_TYPE_IMAGE) {
                    Log.d(ChatsBottomBarView.TAG, "~~~~~ Send Typing to : " + ChatsBottomBarView.this.mUserId);
                    ChatsBottomBarView.this.mIsWriting = true;
                    if (ChatsBottomBarView.this.mContext instanceof ChatGroupConvActivity) {
                        ((ChatGroupConvActivity) ChatsBottomBarView.this.mContext).sendTypingSignal();
                    }
                } else if (editable.length() == 0) {
                    if (ChatsBottomBarView.this.mIsWriting) {
                        Log.d(ChatsBottomBarView.TAG, "~~~~~ Typing Done to : " + ChatsBottomBarView.this.mUserId);
                        ChatsBottomBarView.this.mIsWriting = false;
                        if (ChatsBottomBarView.this.mContext instanceof ChatGroupConvActivity) {
                            ((ChatGroupConvActivity) ChatsBottomBarView.this.mContext).sendTypingDoneSignal();
                        }
                    }
                    if (ChatsBottomBarView.this.mIsDialogShown) {
                        switch (ChatsBottomBarView.this.mCurrentTypeHelper) {
                            case ChatsBottomBarView.MEDIA_TYPE_VIDEO /*2*/:
                            case ChatsBottomBarView.COMMENT_VIEW /*3*/:
                            case ChatsBottomBarView.PROFILE_VIEW /*4*/:
                            case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                            case Utils.FILE_TYPE_INSTALLER /*8*/:
                                ChatsBottomBarView.this.mIbSend.setImageResource(R.drawable.ic_send_on);
                                ChatsBottomBarView.this.mIbSend.setEnabled(true);
                                return;
                            default:
                                ChatsBottomBarView.this.mIbSend.setImageResource(R.drawable.ic_send_off);
                                ChatsBottomBarView.this.mIbSend.setEnabled(false);
                                return;
                        }
                    }
                }
            }

            public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
            }

            public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
            }
        });
        this.mEtMessage.setOnKeyboardEvent(new onKeyboardEvent() {
            public void onBackKeyKeyboard() {
                Log.d(ChatsBottomBarView.TAG, "BackKey @Keyboard Yeah:" + ChatsBottomBarView.this.mCurrentTypeHelper);
                ChatsBottomBarView.this.onKeyboardEmoShowState(false);
            }
        });
        setEmoticonPanelHeight();
        CatfizSticker.getAllStickerPackage(new IStickerPackageClientInterface() {
            public void onStickerPackageReady(StickerMessageObject[] stickerMessageObjectArr) {
                ChatsBottomBarView.this.mStickerPackages = stickerMessageObjectArr;
            }

            public void onStickerPackageUpdate(StickerMessageObject stickerMessageObject) {
                if (ChatsBottomBarView.this.mStickerPackages == null) {
                    ChatsBottomBarView.this.mStickerPackages = new StickerMessageObject[ChatsBottomBarView.MEDIA_TYPE_IMAGE];
                    ChatsBottomBarView.this.mStickerPackages[ChatsBottomBarView.CHAT_VIEW] = stickerMessageObject;
                } else if (Utils.hasGingerbread()) {
                    ChatsBottomBarView.this.mStickerPackages = (StickerMessageObject[]) Arrays.copyOf(ChatsBottomBarView.this.mStickerPackages, ChatsBottomBarView.this.mStickerPackages.length + ChatsBottomBarView.MEDIA_TYPE_IMAGE);
                    ChatsBottomBarView.this.mStickerPackages[ChatsBottomBarView.this.mStickerPackages.length - 1] = stickerMessageObject;
                } else {
                    Object obj = new StickerMessageObject[(ChatsBottomBarView.this.mStickerPackages.length + ChatsBottomBarView.MEDIA_TYPE_IMAGE)];
                    System.arraycopy(obj, ChatsBottomBarView.CHAT_VIEW, ChatsBottomBarView.this.mStickerPackages, ChatsBottomBarView.CHAT_VIEW, ChatsBottomBarView.this.mStickerPackages.length);
                    ChatsBottomBarView.this.mStickerPackages = null;
                    ChatsBottomBarView.this.mStickerPackages = obj;
                    ChatsBottomBarView.this.mStickerPackages[ChatsBottomBarView.this.mStickerPackages.length - 1] = stickerMessageObject;
                }
            }

            public void onStickerPackageWaiting(int i) {
            }
        });
    }

    private void changeBtnEmotImg() {
        if (this.mIsEmotPanelOpen) {
            onKeyboardEmoShowState(false);
            this.mHeadAdapter.setHeaderActive(CHAT_VIEW);
            this.mIbEmoji.setImageResource(R.drawable.ic_emot_dark);
            this.mIsEmotPanelOpen = false;
            this.mIsStickerPanelOpen = true;
            this.emojiPanelComponentListener.onBtnStickerActive(this.mIbEmoji, true);
            this.mLlEmojiFooter.setVisibility(8);
            this.mIbDeleteEmoji.setVisibility(CHAT_VIEW);
            this.mHlvEmojiHeader.setVisibility(CHAT_VIEW);
            return;
        }
        onKeyboardEmoShowState(true);
        this.mIsEmotPanelOpen = true;
        this.mIsStickerPanelOpen = false;
        this.emojiPanelComponentListener.onBtnStickerActive(this.mIbEmoji, false);
        this.mIbDeleteEmoji.setVisibility(CHAT_VIEW);
        this.mHlvEmojiHeader.setVisibility(CHAT_VIEW);
    }

    private void closeDialogBroacast() {
        try {
            if (this.mAudioRecorder != null) {
                this.mAudioRecorder.stop();
            }
        } catch (IOException e) {
            this.mAudioRecorder = null;
            e.printStackTrace();
        }
        dismissDialog();
    }

    private void closeEmoIfKeyboardOpen() {
        if (this.mIsEmotPanelOpen || this.mIsStickerPanelOpen) {
            this.mRlPanelEmoji.setVisibility(8);
            this.mIsEmotPanelOpen = false;
            this.mIsStickerPanelOpen = false;
            this.mIbEmoji.setImageResource(R.drawable.ic_emot_dark);
        }
        this.mIsKeyoboardOpen = true;
    }

    private void dismissDialog() {
        if (this.mIsDialogShown && this.mDialog != null) {
            this.mDialog.dismiss();
            this.mIsDialogShown = false;
        }
    }

    private File getOutputMediaFile(int i) {
        String str = Environment.getExternalStorageDirectory().getAbsolutePath() + "/Catfiz/Captured/";
        if (this.mViewMode == 0) {
            str = StorageDir.getPrivateChatDir(CHAT_VIEW);
        } else if (this.mViewMode == MEDIA_TYPE_IMAGE) {
            str = StorageDir.getGroupChatDir(CHAT_VIEW);
        }
        File file = new File(str);
        if (file.exists() || file.mkdirs()) {
            File file2;
            String format = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
            if (i == MEDIA_TYPE_IMAGE) {
                file2 = new File(file.getPath() + File.separator + "IMG_" + format + ".jpg");
            } else if (i != MEDIA_TYPE_VIDEO) {
                return null;
            } else {
                file2 = null;
            }
            return file2;
        }
        Log.d(TAG, "failed to create directory");
        return null;
    }

    private Uri getOutputMediaFileUri(int i) {
        return Uri.fromFile(getOutputMediaFile(i));
    }

    private void isVideoPlay() {
        if (this.mVvAttachVideo.isPlaying()) {
            this.mVvAttachVideo.stopPlayback();
            this.mVvAttachVideo.setVisibility(8);
        }
    }

    private void onBackSpaceClicked() {
        KeyEvent keyEvent = new KeyEvent(0, 0, CHAT_VIEW, 67, CHAT_VIEW, CHAT_VIEW, CHAT_VIEW, CHAT_VIEW, 6);
        if (this.mIsSecondEmoActive) {
            this.mEtMessage2.dispatchKeyEvent(keyEvent);
        } else {
            this.mEtMessage.dispatchKeyEvent(keyEvent);
        }
    }

    private void readEmoticons() {
        this.mEmoticons = BottomBarUtil.getEmoticon(this.mContext);
        this.mEmojiCity = BottomBarUtil.getEmoticonCity(this.mContext);
        this.mEmojiNature = BottomBarUtil.getEmoticonNature(this.mContext);
        this.mEmojiSmile = BottomBarUtil.getEmoticonSmile(this.mContext);
        this.mEmojiSymbol = BottomBarUtil.getEmoticonSymbol(this.mContext);
        this.mEmojiTool = BottomBarUtil.getEmoticonTools(this.mContext);
        this.mListEmo = new ArrayList();
        this.mListEmo.add(this.mEmoticons);
        this.mListEmo.add(this.mEmojiSmile);
        this.mListEmo.add(this.mEmojiTool);
        this.mListEmo.add(this.mEmojiNature);
        this.mListEmo.add(this.mEmojiCity);
        this.mListEmo.add(this.mEmojiSymbol);
    }

    private String record(final View view, String str) {
        String str2 = null;
        Log.d(TAG, "voice ID identity = " + str);
        this.mAudioRecorder = new AlbusAudioRecorder(str, this.mViewMode);
        this.mAudioRecorder.setOnAlbusAudioRecorderAction(new OnAlbusAudioRecorderAction() {
            public void onAmplitudeUpdate(int i) {
                if (ChatsBottomBarView.this.mAudioRecorder != null) {
                    ChatsBottomBarView.this.mAudioRecorder.updateVoiceLevelView(view, i);
                }
            }

            public void onFileSizeLimitAction() {
            }
        });
        try {
            if (this.mAudioRecorder != null) {
                this.mAudioRecorder.start();
                str2 = this.mAudioRecorder.getAudioPath();
            }
        } catch (IOException e) {
            this.mAudioRecorder = null;
            dismissDialog();
        } catch (RuntimeException e2) {
            this.mAudioRecorder = null;
            dismissDialog();
        }
        return str2;
    }

    private void setAttachDialog() {
        if (this.mIsDialogShown) {
            this.mIsDialogShown = false;
            showAttachLayout(false);
        } else {
            this.mIsDialogShown = true;
            showAttachLayout(true);
        }
        if (this.mEtMessage.getText().toString().isEmpty()) {
            this.mIbSend.setImageResource(R.drawable.ic_send_off);
            this.mIbSend.setEnabled(false);
            return;
        }
        this.mIbSend.setImageResource(R.drawable.ic_send_on);
        this.mIbSend.setEnabled(true);
    }

    private void setAttachVoice() {
        this.mCurrentTypeHelper = 5;
        dismissDialog();
        Log.d(TAG, "prepare to make dialog, setAttachVoice()");
        this.mDialog = new Dialog(this.mContext, R.style.ThemeDialogCustom);
        this.mDialog.setOnCancelListener(new OnCancelListener() {
            public void onCancel(DialogInterface dialogInterface) {
                ChatsBottomBarView.this.closeDialogBroacast();
            }
        });
        Window window = this.mDialog.getWindow();
        window.setGravity(80);
        window.getAttributes().windowAnimations = R.style.DialogAnimationAttach;
        window.setLayout(-1, -2);
        this.mDialog.setContentView(R.layout.dialog_attach_voice);
        LinearLayout linearLayout = (LinearLayout) this.mDialog.findViewById(R.id.ll_root);
        ImageButton imageButton = (ImageButton) this.mDialog.findViewById(R.id.attach_voice_close);
        imageButton.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                ChatsBottomBarView.this.closeDialogBroacast();
            }
        });
        imageButton.setOnTouchListener(this);
        showDialog();
        Log.d(TAG, "dialog shown : " + this.mUserId);
        final String record = record(linearLayout, this.mUserId);
        ImageButton imageButton2 = (ImageButton) this.mDialog.findViewById(R.id.ib_attach_voice_send);
        imageButton2.setOnClickListener(new OnClickListener() {
            /* JADX WARNING: inconsistent code. */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void onClick(android.view.View r5) {
                /*
                r4 = this;
                r3 = 0;
                r0 = com.albus.view.ChatsBottomBarView.TAG;
                r1 = new java.lang.StringBuilder;
                r1.<init>();
                r2 = "path audio ";
                r1 = r1.append(r2);
                r2 = com.albus.view.ChatsBottomBarView.this;
                r2 = r2.mAudioRecorder;
                r2 = r2.getAudioPath();
                r1 = r1.append(r2);
                r1 = r1.toString();
                com.catfiz.util.Log.d(r0, r1);
                r0 = com.albus.view.ChatsBottomBarView.this;	 Catch:{ IOException -> 0x0085 }
                r0 = r0.mAudioRecorder;	 Catch:{ IOException -> 0x0085 }
                if (r0 == 0) goto L_0x006e;
            L_0x002b:
                r0 = com.albus.view.ChatsBottomBarView.this;	 Catch:{ IOException -> 0x0085 }
                r0 = r0.mAudioRecorder;	 Catch:{ IOException -> 0x0085 }
                r0.stop();	 Catch:{ IOException -> 0x0085 }
                r0 = com.albus.view.ChatsBottomBarView.this;	 Catch:{ IOException -> 0x0085 }
                r1 = com.albus.view.ChatsBottomBarView.this;	 Catch:{ IOException -> 0x0085 }
                r1 = r1.mContext;	 Catch:{ IOException -> 0x0085 }
                r2 = r1;	 Catch:{ IOException -> 0x0085 }
                r2 = android.net.Uri.parse(r2);	 Catch:{ IOException -> 0x0085 }
                r1 = android.media.MediaPlayer.create(r1, r2);	 Catch:{ IOException -> 0x0085 }
                r0.mMediaPlayer = r1;	 Catch:{ IOException -> 0x0085 }
                r0 = com.albus.view.ChatsBottomBarView.this;	 Catch:{ IOException -> 0x0085 }
                r0 = r0.mIsBroadcast;	 Catch:{ IOException -> 0x0085 }
                if (r0 == 0) goto L_0x0079;
            L_0x0051:
                r0 = com.albus.view.ChatsBottomBarView.this;	 Catch:{ IOException -> 0x0085 }
                r0 = r0.voiceBroadcastAttach;	 Catch:{ IOException -> 0x0085 }
                r1 = r1;	 Catch:{ IOException -> 0x0085 }
                r2 = com.albus.view.ChatsBottomBarView.this;	 Catch:{ IOException -> 0x0085 }
                r2 = r2.mMediaPlayer;	 Catch:{ IOException -> 0x0085 }
                r0.onVoiceBroadcastAttachmentClicked(r1, r2);	 Catch:{ IOException -> 0x0085 }
                r0 = com.albus.view.ChatsBottomBarView.this;	 Catch:{ IOException -> 0x0085 }
                r1 = r1;	 Catch:{ IOException -> 0x0085 }
                r0.mAttachPathHelper = r1;	 Catch:{ IOException -> 0x0085 }
                r0 = com.albus.view.ChatsBottomBarView.this;	 Catch:{ IOException -> 0x0085 }
                r0.setAttachAudioFile();	 Catch:{ IOException -> 0x0085 }
            L_0x006e:
                r0 = com.albus.view.ChatsBottomBarView.this;
                r0.mAudioRecorder = r3;
            L_0x0073:
                r0 = com.albus.view.ChatsBottomBarView.this;
                r0.dismissDialog();
                return;
            L_0x0079:
                r0 = com.albus.view.ChatsBottomBarView.this;	 Catch:{ IOException -> 0x0085 }
                r0 = r0.attachmentClickListener;	 Catch:{ IOException -> 0x0085 }
                r1 = r1;	 Catch:{ IOException -> 0x0085 }
                r0.onVoiceAttachmentClicked(r1);	 Catch:{ IOException -> 0x0085 }
                goto L_0x006e;
            L_0x0085:
                r0 = move-exception;
                r1 = com.albus.view.ChatsBottomBarView.this;	 Catch:{ all -> 0x0095 }
                r2 = 0;
                r1.mAudioRecorder = r2;	 Catch:{ all -> 0x0095 }
                r0.printStackTrace();	 Catch:{ all -> 0x0095 }
                r0 = com.albus.view.ChatsBottomBarView.this;
                r0.mAudioRecorder = r3;
                goto L_0x0073;
            L_0x0095:
                r0 = move-exception;
                r1 = com.albus.view.ChatsBottomBarView.this;
                r1.mAudioRecorder = r3;
                throw r0;
                */
                throw new UnsupportedOperationException("Method not decompiled: com.albus.view.ChatsBottomBarView.16.onClick(android.view.View):void");
            }
        });
        imageButton2.setOnTouchListener(this);
    }

    private void setEmoticon() {
        this.mLlStickerCS.setVisibility(8);
        this.mVpEmojiPager.setAdapter(new EmoticonsPagerAdapter(this.mContext, this.mListEmo, this));
        this.mVpEmojiPager.setOnPageChangeListener(new OnPageChangeListener() {
            public void onPageScrollStateChanged(int i) {
            }

            public void onPageScrolled(int i, float f, int i2) {
            }

            public void onPageSelected(int i) {
                ChatsBottomBarView.this.mHeadAdapter.setHeaderActive(i);
                ChatsBottomBarView.this.mHlvEmojiHeader.scrollTo(i);
            }
        });
    }

    private void setEmoticonPanelHeight() {
        this.mRlRoot.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
            public void onGlobalLayout() {
                if (VERSION.SDK_INT >= 16) {
                    ChatsBottomBarView.this.mRlRoot.getViewTreeObserver().removeOnGlobalLayoutListener(this);
                } else {
                    ChatsBottomBarView.this.mRlRoot.getViewTreeObserver().removeGlobalOnLayoutListener(this);
                }
                ChatsBottomBarView.this.mPanelEmotHeight = ChatsBottomBarView.this.mRlPanelEmoji.getHeight();
                ChatsBottomBarView.this.mRlPanelEmoji.setVisibility(8);
                Log.d(ChatsBottomBarView.TAG, "height = " + ChatsBottomBarView.this.mPanelEmotHeight);
            }
        });
    }

    private void setMusicLayout(boolean z) {
        Log.d(TAG, "setVideoLayout:" + z + " " + this.mIsEmotPanelOpen + " " + this.mIsStickerPanelOpen);
        if (this.mIsEmotPanelOpen || this.mIsStickerPanelOpen || !z) {
            this.mVvAttachVideo.setVisibility(8);
            this.mTvVideoName.setVisibility(CHAT_VIEW);
            this.mTvVideoName.setText(this.mContext.getResources().getString(R.string.video_attachment));
            this.mRlVideoAttach.setLayoutParams(new LayoutParams(-1, -2));
            return;
        }
        this.mVvAttachVideo.setVisibility(CHAT_VIEW);
        this.mTvVideoName.setVisibility(8);
        MediaMetadataRetriever mediaMetadataRetriever = new MediaMetadataRetriever();
        Log.d(TAG, "Video Size:" + 10 + " " + 10);
        int i = (this.mChatSizePxHelper * 10) / 10;
        int dpFromPx = (int) AlbusUtils.dpFromPx(this.mContext, (float) i);
        Log.d(TAG, "Vid size(px):" + i);
        int dpFromPx2 = ((int) AlbusUtils.dpFromPx(this.mContext, (float) AlbusUtils.getDisplayHeight(this.mContext))) - 112;
        Log.d(TAG, "size NOW(dp):" + dpFromPx + " " + dpFromPx2);
        if (dpFromPx > dpFromPx2) {
            this.mRlVideoAttach.setLayoutParams(new LayoutParams(this.mChatSizePxHelper, i - ((int) AlbusUtils.pxFromDp(this.mContext, (float) ((int) AlbusUtils.dpFromPx(this.mContext, 280.0f))))));
            return;
        }
        this.mRlVideoAttach.setLayoutParams(new LayoutParams(this.mChatSizePxHelper, i));
    }

    private void setNewLayout(boolean z) {
        float dpFromPx = AlbusUtils.dpFromPx(this.mContext, (float) AlbusUtils.getDisplayWidth(this.mContext));
        if (z) {
            this.mIbAttach.setVisibility(8);
            dpFromPx -= 56.0f;
            int pxFromDp = (int) AlbusUtils.pxFromDp(this.mContext, 8.0f);
            this.mLlContainerBottomBar.setPadding(pxFromDp, pxFromDp, CHAT_VIEW, CHAT_VIEW);
        } else {
            this.mIbAttach.setVisibility(CHAT_VIEW);
            dpFromPx -= 96.0f;
            this.mLlContainerBottomBar.setPadding(CHAT_VIEW, (int) AlbusUtils.pxFromDp(this.mContext, 8.0f), CHAT_VIEW, CHAT_VIEW);
        }
        this.mChatSizePxHelper = (int) AlbusUtils.pxFromDp(this.mContext, dpFromPx);
        Log.d(TAG, "New layout width(px):" + this.mChatSizePxHelper);
        this.mLlAttachWriteEmo.setLayoutParams(new LayoutParams(this.mChatSizePxHelper, -2));
        if (this.mCurrentTypeHelper == MEDIA_TYPE_VIDEO) {
            setPhotoLayout(true);
        } else if (this.mCurrentTypeHelper == COMMENT_VIEW) {
            setVideoLayout(true);
        } else if (this.mCurrentTypeHelper == 8) {
            setMusicLayout(true);
        }
    }

    private void setPhotoLayout(boolean z) {
        Log.d(TAG, "setPhotoLayout:" + z + " " + this.mIsEmotPanelOpen + " " + this.mIsStickerPanelOpen);
        if (this.mIsEmotPanelOpen || this.mIsStickerPanelOpen || !z) {
            this.mIvAttachedImage.setVisibility(8);
            this.mTvImageName.setVisibility(CHAT_VIEW);
            this.mTvImageName.setText(this.mContext.getResources().getString(R.string.image_attachment));
            this.mRlPhotoAttach.setLayoutParams(new LayoutParams(-1, -2));
            return;
        }
        this.mIvAttachedImage.setVisibility(CHAT_VIEW);
        this.mTvImageName.setVisibility(8);
        Options options = new Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(this.mAttachPathHelper, options);
        int i = options.outWidth;
        int i2 = options.outHeight;
        if (i != 0) {
            i2 = (i2 * this.mChatSizePxHelper) / i;
            i = (int) AlbusUtils.dpFromPx(this.mContext, (float) i2);
            Log.d(TAG, "Pic size(px):" + i2);
            int dpFromPx = ((int) AlbusUtils.dpFromPx(this.mContext, (float) AlbusUtils.getDisplayHeight(this.mContext))) - 112;
            Log.d(TAG, "size NOW(dp):" + i + " " + dpFromPx);
            if (i > dpFromPx) {
                this.mRlPhotoAttach.setLayoutParams(new LayoutParams(this.mChatSizePxHelper, i2 - ((int) AlbusUtils.pxFromDp(this.mContext, (float) ((int) AlbusUtils.dpFromPx(this.mContext, 280.0f))))));
                return;
            }
            this.mRlPhotoAttach.setLayoutParams(new LayoutParams(this.mChatSizePxHelper, i2));
        }
    }

    private void setSticker() {
        this.mLlStickerCS.setVisibility(CHAT_VIEW);
    }

    private void setVideoLayout(boolean z) {
        Log.d(TAG, "setVideoLayout:" + z + " " + this.mIsEmotPanelOpen + " " + this.mIsStickerPanelOpen);
        if (this.mIsEmotPanelOpen || this.mIsStickerPanelOpen || !z) {
            this.mVvAttachVideo.setVisibility(8);
            this.mTvVideoName.setVisibility(CHAT_VIEW);
            this.mTvVideoName.setText(this.mContext.getResources().getString(R.string.video_attachment));
            this.mRlVideoAttach.setLayoutParams(new LayoutParams(-1, -2));
            return;
        }
        this.mVvAttachVideo.setVisibility(CHAT_VIEW);
        this.mTvVideoName.setVisibility(8);
        MediaMetadataRetriever mediaMetadataRetriever = new MediaMetadataRetriever();
        mediaMetadataRetriever.setDataSource(this.mAttachPathHelper);
        Bitmap frameAtTime = mediaMetadataRetriever.getFrameAtTime();
        int height = frameAtTime.getHeight();
        int width = frameAtTime.getWidth();
        mediaMetadataRetriever.release();
        frameAtTime.recycle();
        Log.d(TAG, "Video Size:" + height + " " + width);
        if (width != 0) {
            int i = (this.mChatSizePxHelper * height) / width;
            int dpFromPx = (int) AlbusUtils.dpFromPx(this.mContext, (float) i);
            Log.d(TAG, "Vid size(px):" + i);
            height = ((int) AlbusUtils.dpFromPx(this.mContext, (float) AlbusUtils.getDisplayHeight(this.mContext))) - 112;
            Log.d(TAG, "size NOW(dp):" + dpFromPx + " " + height);
            if (dpFromPx > height) {
                this.mRlVideoAttach.setLayoutParams(new LayoutParams(this.mChatSizePxHelper, i - ((int) AlbusUtils.pxFromDp(this.mContext, (float) ((int) AlbusUtils.dpFromPx(this.mContext, 280.0f))))));
                return;
            }
            this.mRlVideoAttach.setLayoutParams(new LayoutParams(this.mChatSizePxHelper, i));
        }
    }

    private void showAttachLayout(boolean z) {
        if (z) {
            this.mLlAttachPanel.setVisibility(CHAT_VIEW);
            setNewLayout(true);
            return;
        }
        this.mLlAttachPanel.setVisibility(8);
        this.mLlQuoteAttach.setVisibility(8);
        this.mLlFileAttach.setVisibility(8);
        this.mRlPhotoAttach.setVisibility(8);
        this.mRlVideoAttach.setVisibility(8);
        this.mCurrentTypeHelper = MEDIA_TYPE_IMAGE;
        this.mAttachPathHelper = "";
        setNewLayout(false);
        if (this.attachmentClickListener != null) {
            this.attachmentClickListener.onCancelAttachmentClicked();
        }
    }

    private void showDialog() {
        this.mDialog.show();
        this.mIsDialogShown = true;
    }

    private void showHideEmoPanelOnClick() {
        this.mHeadAdapter.setHeaderActive(CHAT_VIEW);
        if (this.mFirstOpen) {
            readEmoticons();
            this.mFirstOpen = false;
        }
        if (this.mIsSecondEmoActive) {
            setEmoticon();
            showHideEmotPanel();
            return;
        }
        if (!this.mIsStickerPanelOpen && this.mIsEmotPanelOpen) {
            setSticker();
            changeBtnEmotImg();
        } else if (!this.mIsStickerPanelOpen || this.mIsEmotPanelOpen) {
            setEmoticon();
            showHideEmotPanel();
        } else {
            setEmoticon();
            changeBtnEmotImg();
        }
        if (this.mLlStickerNotif == null) {
            return;
        }
        if (this.mIsAlreadyTrySticker) {
            this.mLlStickerNotif.setVisibility(8);
            return;
        }
        this.mLlStickerNotif.setVisibility(CHAT_VIEW);
        this.mIsAlreadyTrySticker = true;
    }

    private void showHideEmotPanel() {
        if (this.mIsEmotPanelOpen || this.mIsStickerPanelOpen) {
            Animation translateAnimation = new TranslateAnimation(0.0f, 0.0f, 0.0f, (float) this.mPanelEmotHeight);
            translateAnimation.setDuration(300);
            translateAnimation.setInterpolator(this.mInterpolatorDown);
            translateAnimation.setAnimationListener(new AnimationListener() {
                public void onAnimationEnd(Animation animation) {
                    ChatsBottomBarView.this.mLlContainerBottomBar.clearAnimation();
                    ChatsBottomBarView.this.mRlPanelEmoji.setVisibility(8);
                }

                public void onAnimationRepeat(Animation animation) {
                }

                public void onAnimationStart(Animation animation) {
                }
            });
            this.mLlContainerBottomBar.startAnimation(translateAnimation);
            this.mIbEmoji.setImageResource(R.drawable.ic_emot_dark);
            this.mIsEmotPanelOpen = false;
            this.mIsStickerPanelOpen = false;
            onKeyboardEmoShowState(false);
            return;
        }
        translateAnimation = new TranslateAnimation(0.0f, 0.0f, (float) this.mPanelEmotHeight, 0.0f);
        translateAnimation.setDuration(300);
        translateAnimation.setInterpolator(this.mInterpolatorUp);
        translateAnimation.setAnimationListener(new AnimationListener() {
            public void onAnimationEnd(Animation animation) {
                ChatsBottomBarView.this.mLlContainerBottomBar.clearAnimation();
                ChatsBottomBarView.this.emojiPanelAnimation.onPanelUpFinished(ChatsBottomBarView.this.mEtMessage);
                ChatsBottomBarView.this.mRlPanelEmoji.setDrawingCacheEnabled(false);
            }

            public void onAnimationRepeat(Animation animation) {
            }

            public void onAnimationStart(Animation animation) {
                ChatsBottomBarView.this.emojiPanelAnimation.onPanelUp(ChatsBottomBarView.this.mEtMessage);
                ChatsBottomBarView.this.mRlPanelEmoji.setDrawingCacheEnabled(true);
                Log.d(ChatsBottomBarView.TAG, "is keyboard open=" + ChatsBottomBarView.this.mIsKeyoboardOpen);
                if (ChatsBottomBarView.this.mIsKeyoboardOpen) {
                    ChatsBottomBarView.this.mIsKeyoboardOpen = false;
                    new Handler().postDelayed(new Runnable() {
                        public void run() {
                            ChatsBottomBarView.this.mRlPanelEmoji.setVisibility(ChatsBottomBarView.CHAT_VIEW);
                        }
                    }, 400);
                    return;
                }
                ChatsBottomBarView.this.mRlPanelEmoji.setVisibility(ChatsBottomBarView.CHAT_VIEW);
            }
        });
        this.mLlContainerBottomBar.startAnimation(translateAnimation);
        changeBtnEmotImg();
    }

    private void textChanges(boolean z) {
        String obj = this.mEtMessage.getText().toString();
        if (!z || (!obj.equals("") && obj.trim().length() > 0)) {
            this.mIbSend.setEnabled(true);
            this.mIsVoiceOn = false;
            this.mIbSend.setImageResource(R.drawable.ic_send_on);
        } else if (this.mIsBroadcast) {
            this.mIbSend.setEnabled(false);
            this.mIsVoiceOn = false;
            this.mIbSend.setImageResource(R.drawable.ic_send_off);
        } else {
            this.mIbSend.setEnabled(true);
            this.mIsVoiceOn = true;
            this.mIbSend.setImageResource(R.drawable.ic_voice_dark);
        }
    }

    public void checkIsAudioPlay() {
        if (this.mMediaPlayer != null && this.mMediaPlayer.isPlaying()) {
            this.mMediaPlayer.stop();
        }
    }

    public boolean closeAttachAndEmoPanel() {
        boolean z;
        isVideoPlay();
        if (this.mIsEmotPanelOpen || this.mIsStickerPanelOpen) {
            Log.d(TAG, "closeAttachAndEmoPanel : emo and sticker open<" + this.mIsEmotPanelOpen + "," + this.mIsStickerPanelOpen + ">");
            closePanelEmoticon();
            z = false;
        } else {
            z = true;
        }
        if (this.mIsDialogShown) {
            Log.d(TAG, "closeAttachAndEmoPanel : dialog open");
            setAttachDialog();
            textChanges(true);
            z = false;
        }
        if (this.mIsBroadcast) {
            Log.d(TAG, "closeAttachAndEmoPanel : broadcast");
            showAttachLayout(false);
        }
        if (z) {
            Log.d(TAG, "closeAttachAndEmoPanel : else(other)");
        }
        return z;
    }

    public void closeEmo() {
        closeEmoIfKeyboardOpen();
    }

    public void closePanelEmoticon() {
        if (this.mIsAlreadyTrySticker) {
            this.mLlStickerNotif.setVisibility(8);
        }
        showHideEmotPanel();
    }

    public void customEdittextFocusChange(boolean z) {
        if (z) {
            this.mIsKeyoboardOpen = true;
            if (this.mIsEmotPanelOpen) {
                this.mRlPanelEmoji.setVisibility(8);
                this.mIsEmotPanelOpen = false;
            }
            Log.d(TAG, "if - iskeyboardopen=" + this.mIsKeyoboardOpen + " isemoopen=" + this.mIsEmotPanelOpen);
            return;
        }
        this.mIsKeyoboardOpen = false;
        Log.d(TAG, "else - iskeyboardopen=" + this.mIsKeyoboardOpen + " isemoopen=" + this.mIsEmotPanelOpen);
    }

    public void headClickedIndex(int i) {
        this.mVpEmojiPager.setCurrentItem(i);
    }

    public boolean isAttachOpened() {
        return this.mLlAttachPanel.getVisibility() == 0;
    }

    public void keyClickedIndex(int i, int i2) {
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
        Resources resources = getResources();
        switch (i2) {
            case CHAT_VIEW /*0*/:
                if (this.mEmoticons.get(i) != null) {
                    spannableStringBuilder.append(mEmoticonsText[i] + " ");
                    this.mDrawable = resources.getDrawable(((Integer) this.mEmoticons.get(i)).intValue());
                    break;
                }
                return;
            case MEDIA_TYPE_IMAGE /*1*/:
                if (this.mEmojiSmile.get(i) != null) {
                    try {
                        spannableStringBuilder.append(new String(emojiSmile[i], HTTP.UTF_8) + " ");
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }
                    this.mDrawable = resources.getDrawable(((Integer) this.mEmojiSmile.get(i)).intValue());
                    break;
                }
                return;
            case MEDIA_TYPE_VIDEO /*2*/:
                if (this.mEmojiTool.get(i) != null) {
                    try {
                        spannableStringBuilder.append(new String(emojiTools[i], HTTP.UTF_8) + " ");
                    } catch (UnsupportedEncodingException e2) {
                        e2.printStackTrace();
                    }
                    this.mDrawable = resources.getDrawable(((Integer) this.mEmojiTool.get(i)).intValue());
                    break;
                }
                return;
            case COMMENT_VIEW /*3*/:
                if (this.mEmojiNature.get(i) != null) {
                    try {
                        spannableStringBuilder.append(new String(emojiNature[i], HTTP.UTF_8) + " ");
                    } catch (UnsupportedEncodingException e22) {
                        e22.printStackTrace();
                    }
                    this.mDrawable = resources.getDrawable(((Integer) this.mEmojiNature.get(i)).intValue());
                    break;
                }
                return;
            case PROFILE_VIEW /*4*/:
                if (this.mEmojiCity.get(i) != null) {
                    try {
                        spannableStringBuilder.append(new String(emojiCity[i], HTTP.UTF_8) + " ");
                    } catch (UnsupportedEncodingException e222) {
                        e222.printStackTrace();
                    }
                    this.mDrawable = resources.getDrawable(((Integer) this.mEmojiCity.get(i)).intValue());
                    break;
                }
                return;
            case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                if (this.mEmojiSymbol.get(i) != null) {
                    try {
                        spannableStringBuilder.append(new String(emojiSymbol[i], HTTP.UTF_8) + " ");
                    } catch (UnsupportedEncodingException e2222) {
                        e2222.printStackTrace();
                    }
                    this.mDrawable = resources.getDrawable(((Integer) this.mEmojiSymbol.get(i)).intValue());
                    break;
                }
                return;
        }
        this.mDrawable.setBounds(PROFILE_VIEW, PROFILE_VIEW, this.mDrawable.getMinimumWidth() / MEDIA_TYPE_VIDEO, this.mDrawable.getMinimumHeight() / MEDIA_TYPE_VIDEO);
        spannableStringBuilder.setSpan(new ImageSpan(this.mDrawable), CHAT_VIEW, spannableStringBuilder.length() - 1, 33);
        if (this.mIsSecondEmoActive) {
            if (this.mEtMessage2.getSelectionStart() != this.mEtMessage2.getSelectionEnd()) {
                int selectionStart = this.mEtMessage2.getSelectionStart();
                this.mEtMessage2.setText(SmiledText.getSmiledText(this.mContext, this.mEtMessage2.getText().toString().replace(this.mEtMessage2.getText().toString().substring(selectionStart, this.mEtMessage2.getSelectionEnd()), ""), this.mEtMessage2));
                this.mEtMessage2.setSelection(selectionStart);
            }
            this.mEtMessage2.getEditableText().insert(this.mEtMessage2.getSelectionStart(), spannableStringBuilder);
            return;
        }
        if (this.mEtMessage.getSelectionStart() != this.mEtMessage.getSelectionEnd()) {
            selectionStart = this.mEtMessage.getSelectionStart();
            this.mEtMessage.setText(SmiledText.getSmiledText(this.mContext, this.mEtMessage.getText().toString().replace(this.mEtMessage.getText().toString().substring(selectionStart, this.mEtMessage.getSelectionEnd()), ""), this.mEtMessage));
            this.mEtMessage.setSelection(selectionStart);
        }
        this.mEtMessage.getEditableText().insert(this.mEtMessage.getSelectionStart(), spannableStringBuilder);
    }

    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.ib_play:
                String str = this.mAttachPathHelper;
                this.mAudioPlayer.setOnAudioStateChange(new onAudioStateChange() {
                    public void onAudioFinished(int i) {
                        ChatsBottomBarView.this.mAudioPlayer.getDurationHandler().postDelayed(new Runnable() {
                            public void run() {
                                ChatsBottomBarView.this.mTvDuration.setText(AlbusAudioPlayer.getDurationFromAudioFile(ChatsBottomBarView.this.mContext, ChatsBottomBarView.this.mAttachPathHelper));
                                ChatsBottomBarView.this.mIbVoicePlayer.setImageResource(R.drawable.ic_play_dark);
                                ChatsBottomBarView.this.mSbPlayback.setProgress(ChatsBottomBarView.CHAT_VIEW);
                            }
                        }, 100);
                    }

                    public void onAudioPaused(int i) {
                        Log.d(ChatsBottomBarView.TAG, "onAudioPaused:" + i);
                    }

                    public void onAudioPlaying(final int i, final int i2) {
                        ChatsBottomBarView.this.mAudioPlayer.getDurationHandler().postDelayed(new Runnable() {
                            public void run() {
                                ChatsBottomBarView.this.mSbPlayback.setProgress(i2);
                                ChatsBottomBarView.this.mTvDuration.setText(AlbusUtils.milliSecondsToTimer((long) (i - i2)));
                            }
                        }, 100);
                    }

                    public void onAudioPrepared(final int i) {
                        ChatsBottomBarView.this.mAudioPlayer.getDurationHandler().postDelayed(new Runnable() {
                            public void run() {
                                ChatsBottomBarView.this.mIbVoicePlayer.setImageResource(R.drawable.ic_stop_dark);
                                ChatsBottomBarView.this.mSbPlayback.setMax(i);
                            }
                        }, 100);
                    }

                    public void onAudioStoped(int i, int i2) {
                        ChatsBottomBarView.this.mAudioPlayer.getDurationHandler().postDelayed(new Runnable() {
                            public void run() {
                                ChatsBottomBarView.this.mTvDuration.setText(AlbusAudioPlayer.getDurationFromAudioFile(ChatsBottomBarView.this.mContext, ChatsBottomBarView.this.mAttachPathHelper));
                                ChatsBottomBarView.this.mIbVoicePlayer.setImageResource(R.drawable.ic_play_dark);
                                ChatsBottomBarView.this.mSbPlayback.setProgress(ChatsBottomBarView.CHAT_VIEW);
                            }
                        }, 100);
                    }
                });
                if (this.mAudioPlayer.getPlaying()) {
                    this.mAudioPlayer.Stop();
                    return;
                }
                this.mAudioPlayer.setDataSouce(str);
                this.mAudioPlayer.Play();
                return;
            case R.id.photo:
                this.attachmentClickListener.onPhotoAttachmentClicked(getOutputMediaFileUri(MEDIA_TYPE_IMAGE));
                this.mIbSend.setImageResource(R.drawable.ic_send_on);
                this.mIbSend.setEnabled(true);
                this.mIsVoiceOn = false;
                return;
            case R.id.video:
                this.attachmentClickListener.onVideoAttachmentClicked();
                return;
            case R.id.music:
                this.attachmentClickListener.onMusicAttachmentClicked();
                return;
            case R.id.file:
                this.attachmentClickListener.onFileAttachmentClicked();
                return;
            case R.id.fizzlink:
                dismissDialog();
                this.attachmentClickListener.onFizzlinkAttachmentClicked();
                return;
            case R.id.contact:
                dismissDialog();
                this.attachmentClickListener.onContactPIN();
                return;
            case R.id.blitz:
                dismissDialog();
                this.attachmentClickListener.onSendBlitz();
                return;
            case R.id.ib_delete_emo:
                if (this.mIsEmotPanelOpen) {
                    onBackSpaceClicked();
                    return;
                }
                this.mContext.startActivity(new Intent(this.mContext, StickerStoreActivity.class));
                return;
            case R.id.btn_to_keyboard1:
                this.mHeadAdapter.setHeaderActive(CHAT_VIEW);
                closePanelEmoticon();
                this.mEtMessage.requestFocus();
                this.emojiPanelComponentListener.onBtnKeyboardPressed(this.mEtMessage);
                this.mIsKeyoboardOpen = true;
                return;
            case R.id.btn_space:
                KeyEvent keyEvent = new KeyEvent(0, 0, CHAT_VIEW, 62, CHAT_VIEW, CHAT_VIEW, CHAT_VIEW, CHAT_VIEW, 6);
                if (this.mIsSecondEmoActive) {
                    this.mEtMessage2.dispatchKeyEvent(keyEvent);
                    return;
                } else {
                    this.mEtMessage.dispatchKeyEvent(keyEvent);
                    return;
                }
            case R.id.btn_to_keyboard2:
                this.mHeadAdapter.setHeaderActive(CHAT_VIEW);
                closePanelEmoticon();
                this.mEtMessage.requestFocus();
                this.emojiPanelComponentListener.onBtnKeyboardPressed(this.mEtMessage);
                this.mIsKeyoboardOpen = true;
                return;
            case R.id.ib_attach:
                if (this.mIsBroadcast) {
                    setAttachVoice();
                    return;
                } else if (this.mIsDialogShown) {
                    setAttachDialog();
                    this.mEtMessage.setText("");
                    this.attachmentClickListener.onCancelAttachmentClicked();
                    return;
                } else {
                    this.mDialog = new Dialog(this.mContext, R.style.ThemeDialogCustom);
                    this.mDialog.setOnCancelListener(new OnCancelListener() {
                        public void onCancel(DialogInterface dialogInterface) {
                            ChatsBottomBarView.this.dismissDialog();
                        }
                    });
                    Window window = this.mDialog.getWindow();
                    window.setGravity(80);
                    window.getAttributes().windowAnimations = R.style.DialogAnimationAttach;
                    window.setLayout(-1, -2);
                    this.mDialog.setContentView(R.layout.dialog_attach_panel);
                    this.mLlAttach_photo = (LinearLayout) this.mDialog.findViewById(R.id.photo);
                    this.mLlAttach_video = (LinearLayout) this.mDialog.findViewById(R.id.video);
                    this.mLlAttach_music = (LinearLayout) this.mDialog.findViewById(R.id.music);
                    this.mLlAttach_file = (LinearLayout) this.mDialog.findViewById(R.id.file);
                    this.mLlAttach_contact = (LinearLayout) this.mDialog.findViewById(R.id.contact);
                    this.mLlAttach_blitz = (LinearLayout) this.mDialog.findViewById(R.id.blitz);
                    this.mLlAttach_fizzlink = (LinearLayout) this.mDialog.findViewById(R.id.fizzlink);
                    if (this.mViewMode == MEDIA_TYPE_IMAGE) {
                        ((TextView) this.mDialog.findViewById(R.id.contact_text)).setText(this.mContext.getResources().getString(R.string.promote_friend));
                        this.mLlAttach_blitz.setVisibility(8);
                    } else if (this.mViewMode == COMMENT_VIEW) {
                        ((TextView) this.mDialog.findViewById(R.id.contact_text)).setText(this.mContext.getResources().getString(R.string.promote_friend));
                        this.mLlAttach_file.setVisibility(8);
                        this.mLlAttach_blitz.setVisibility(8);
                        this.mLlAttach_video.setVisibility(8);
                        this.mLlAttach_music.setVisibility(8);
                    }
                    this.mLlAttach_photo.setOnClickListener(this);
                    this.mLlAttach_video.setOnClickListener(this);
                    this.mLlAttach_music.setOnClickListener(this);
                    this.mLlAttach_file.setOnClickListener(this);
                    this.mLlAttach_contact.setOnClickListener(this);
                    this.mLlAttach_blitz.setOnClickListener(this);
                    this.mLlAttach_fizzlink.setOnClickListener(this);
                    showDialog();
                    return;
                }
            case R.id.ib_cancel_video:
            case R.id.ib_cancel_file:
            case R.id.ib_cancel_photo:
            case R.id.ib_cancel_quote:
            case R.id.ib_cancel_voice:
                closeAttachAndEmoPanel();
                return;
            case R.id.et_text_msg:
                this.emojiPanelComponentListener.onEditTextFocusChanged();
                closeEmoIfKeyboardOpen();
                return;
            case R.id.ib_emoji:
            case R.id.ib_emoji_2:
                showHideEmoPanelOnClick();
                return;
            case R.id.ib_send_msg:
                if (this.mIsVoiceOn) {
                    setAttachVoice();
                    return;
                }
                this.emojiPanelComponentListener.onBtnSendPressed(this.mEtMessage.getText().toString());
                this.mEtMessage.setText("");
                Log.d(TAG, "is voice on (ibSend):" + this.mIsVoiceOn);
                return;
            default:
                return;
        }
    }

    public void onKeyboardEmoShowState(boolean z) {
        Log.d(TAG, "onKeyboardEmoShowState=" + z + " " + this.mIsDialogShown + " " + this.mIsKeyoboardOpen);
        if (!this.mIsDialogShown && !this.mIsBroadcast) {
            showAttachLayout(false);
        } else if (z) {
            if (this.mCurrentTypeHelper == MEDIA_TYPE_VIDEO) {
                setPhotoLayout(false);
            } else if (this.mCurrentTypeHelper == COMMENT_VIEW) {
                setVideoLayout(false);
            } else if (this.mCurrentTypeHelper == 8) {
                setMusicLayout(false);
            }
        } else if (this.mCurrentTypeHelper == MEDIA_TYPE_VIDEO) {
            setPhotoLayout(true);
        } else if (this.mCurrentTypeHelper == COMMENT_VIEW) {
            setVideoLayout(true);
        } else if (this.mCurrentTypeHelper == 8) {
            setMusicLayout(true);
        }
        if ((this.mIsStickerPanelOpen || this.mIsEmotPanelOpen) && !this.mIsKeyoboardOpen) {
            Log.d(TAG, "FORCE CLOSE KEYBOARD");
            if (this.mEtMessage.isFocused()) {
                this.mEtMessage.clearFocus();
            }
        }
    }

    public boolean onTouch(View view, MotionEvent motionEvent) {
        switch (motionEvent.getAction()) {
            case CHAT_VIEW /*0*/:
                view.setScaleX(1.3f);
                view.setScaleY(1.3f);
                break;
            case MEDIA_TYPE_IMAGE /*1*/:
                view.setScaleX(1.0f);
                view.setScaleY(1.0f);
                break;
        }
        return false;
    }

    public void setAttachAudioFile() {
        this.mCurrentTypeHelper = 5;
        dismissDialog();
        setAttachDialog();
        this.mIbSend.setImageResource(R.drawable.ic_send_on);
        this.mIbSend.setEnabled(true);
        this.mIsVoiceOn = false;
        Log.d(TAG, "setAttachAudioFile:" + this.mIsDialogShown);
        this.mRlAttachVoice.setVisibility(CHAT_VIEW);
        this.mTvDuration.setVisibility(CHAT_VIEW);
        this.mTvDuration.setText(AlbusAudioPlayer.getDurationFromAudioFile(this.mContext, this.mAttachPathHelper));
        this.mIbVoicePlayer.setImageResource(R.drawable.ic_play_dark);
        this.mSbPlayback.setProgress(CHAT_VIEW);
    }

    public void setAttachFile(String str) {
        if (this.mCurrentTypeHelper != MEDIA_TYPE_IMAGE) {
            closeAttachAndEmoPanel();
        }
        File file = new File(str);
        if (AlbusUtils.fileSizeExceedCheck(file, AlbusModelObject.FILE_SIZE_UPLOAD_LIMIT_KB)) {
            this.mCurrentTypeHelper = PROFILE_VIEW;
            dismissDialog();
            setAttachDialog();
            if (str.contains(":")) {
                AlbusUtils.setToastView(this.mContext, this.mContext.getResources().getString(R.string.file_not_found_by_fileman));
                closeAttachAndEmoPanel();
                return;
            }
            this.mIbSend.setImageResource(R.drawable.ic_send_on);
            this.mIbSend.setEnabled(true);
            this.mIsVoiceOn = false;
            this.mLlFileAttach.setVisibility(CHAT_VIEW);
            switch (Utils.getFileTypeFromPath(str)) {
                case MEDIA_TYPE_IMAGE /*1*/:
                    String str2 = "";
                    if (!str.contains("file://")) {
                        str = "file://" + str;
                    }
                    Uri parse = Uri.parse(str);
                    this.mIvFileAttachedImage.setImageBitmap(null);
                    this.mIvFileAttachedImage.setScaleType(ScaleType.CENTER_CROP);
                    AsyncLoadScaledBitmap asyncLoadScaledBitmap = new AsyncLoadScaledBitmap(this.mContext, this.mIvFileAttachedImage, (int) AlbusUtils.pxFromDp(this.mContext, 40.0f));
                    Uri[] uriArr = new Uri[MEDIA_TYPE_IMAGE];
                    uriArr[CHAT_VIEW] = parse;
                    asyncLoadScaledBitmap.execute(uriArr);
                    break;
                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                    MediaMetadataRetriever mediaMetadataRetriever = new MediaMetadataRetriever();
                    mediaMetadataRetriever.setDataSource(str);
                    Bitmap frameAtTime = mediaMetadataRetriever.getFrameAtTime();
                    mediaMetadataRetriever.release();
                    this.mIvFileAttachedImage.setImageBitmap(null);
                    this.mIvFileAttachedImage.setScaleType(ScaleType.CENTER_CROP);
                    this.mIvFileAttachedImage.setImageBitmap(frameAtTime);
                    break;
                default:
                    this.mIvFileAttachedImage.setImageBitmap(null);
                    this.mIvFileAttachedImage.setScaleType(ScaleType.FIT_CENTER);
                    this.mIvFileAttachedImage.setImageResource(AlbusUtils.getIconFileThumb(str));
                    break;
            }
            this.mTvFileName.setText(file.getName());
            this.mTvFileSize.setText(Utils.getFileSize(file.length()));
            return;
        }
        ((ChatGroupConvActivity) this.mContext).showLargeFileDivertionDialog(PROFILE_VIEW, str);
        dismissDialog();
    }

    public void setAttachMusic(Uri uri) {
        if (this.mCurrentTypeHelper != MEDIA_TYPE_IMAGE) {
            closeAttachAndEmoPanel();
        }
        this.mCurrentTypeHelper = 8;
        this.mAttachPathHelper = MediaFilePath.getPath((Activity) this.mContext, uri);
        dismissDialog();
        setAttachDialog();
        if (uri.getPath().contains(".mp4")) {
            AlbusUtils.setToastView(this.mContext, this.mContext.getResources().getString(R.string.file_not_found_by_fileman));
            closeAttachAndEmoPanel();
            return;
        }
        this.mIbSend.setImageResource(R.drawable.ic_send_on);
        this.mIbSend.setEnabled(true);
        this.mIsVoiceOn = false;
        this.mRlVideoAttach.setVisibility(CHAT_VIEW);
        MediaController mediaController = new MediaController(this.mContext);
        mediaController.setAnchorView(this.mVvAttachVideo);
        this.mVvAttachVideo.setMediaController(mediaController);
        this.mVvAttachVideo.setVideoURI(uri);
        this.mVvAttachVideo.requestFocus();
        this.mVvAttachVideo.start();
    }

    public void setAttachPhoto(Uri uri) {
        if (this.mCurrentTypeHelper != MEDIA_TYPE_IMAGE) {
            closeAttachAndEmoPanel();
        }
        this.mCurrentTypeHelper = MEDIA_TYPE_VIDEO;
        String path = MediaFilePath.getPath((Activity) this.mContext, uri);
        this.mAttachPathHelper = path;
        dismissDialog();
        setAttachDialog();
        if (path.contains(":")) {
            AlbusUtils.setToastView(this.mContext, this.mContext.getResources().getString(R.string.file_not_found_by_fileman));
            closeAttachAndEmoPanel();
            return;
        }
        this.mIbSend.setImageResource(R.drawable.ic_send_on);
        this.mIbSend.setEnabled(true);
        this.mIsVoiceOn = false;
        this.mRlPhotoAttach.setVisibility(CHAT_VIEW);
        Display defaultDisplay = ((WindowManager) this.mContext.getSystemService("window")).getDefaultDisplay();
        int height = (defaultDisplay.getWidth() < defaultDisplay.getHeight() ? defaultDisplay.getHeight() : defaultDisplay.getWidth()) / MEDIA_TYPE_VIDEO;
        this.mIvAttachedImage.setImageBitmap(null);
        AsyncLoadScaledBitmap asyncLoadScaledBitmap = new AsyncLoadScaledBitmap(this.mContext, this.mIvAttachedImage, height);
        Uri[] uriArr = new Uri[MEDIA_TYPE_IMAGE];
        uriArr[CHAT_VIEW] = uri;
        asyncLoadScaledBitmap.execute(uriArr);
    }

    public void setAttachVideo(Uri uri) {
        if (this.mCurrentTypeHelper != MEDIA_TYPE_IMAGE) {
            closeAttachAndEmoPanel();
        }
        String path = MediaFilePath.getPath((Activity) this.mContext, uri);
        MediaMetadataRetriever mediaMetadataRetriever = new MediaMetadataRetriever();
        mediaMetadataRetriever.setDataSource(path);
        if (Integer.parseInt(mediaMetadataRetriever.extractMetadata(9)) / CatfizMsgTypes.NICSUBTYPE_PARTNER > AlbusModelObject.VIDEO_DURATION_UPLOAD_LIMIT) {
            if (this.mContext instanceof ChatGroupConvActivity) {
                ((ChatGroupConvActivity) this.mContext).showLargeFileDivertionDialog(COMMENT_VIEW, path);
            } else if (this.mContext instanceof CommentActivity) {
                ((CommentActivity) this.mContext).showLargeFileDivertionDialog(COMMENT_VIEW, path);
            }
            dismissDialog();
            mediaMetadataRetriever.release();
            return;
        }
        mediaMetadataRetriever.release();
        this.mCurrentTypeHelper = COMMENT_VIEW;
        this.mAttachPathHelper = MediaFilePath.getPath((Activity) this.mContext, uri);
        dismissDialog();
        setAttachDialog();
        if (uri.getPath().contains(".mp4")) {
            AlbusUtils.setToastView(this.mContext, this.mContext.getResources().getString(R.string.file_not_found_by_fileman));
            closeAttachAndEmoPanel();
            return;
        }
        this.mIbSend.setImageResource(R.drawable.ic_send_on);
        this.mIbSend.setEnabled(true);
        this.mIsVoiceOn = false;
        this.mRlVideoAttach.setVisibility(CHAT_VIEW);
        MediaController mediaController = new MediaController(this.mContext);
        mediaController.setAnchorView(this.mVvAttachVideo);
        this.mVvAttachVideo.setMediaController(mediaController);
        this.mVvAttachVideo.setVideoURI(uri);
        this.mVvAttachVideo.requestFocus();
        this.mVvAttachVideo.start();
    }

    public void setBottomBarNoWrite() {
        this.mLlWriteBar.setVisibility(8);
    }

    public void setBroadcast(boolean z, String str) {
        this.mIsBroadcast = z;
        this.mUserId = str;
        this.mIsVoiceOn = false;
        this.mIbSend.setEnabled(false);
        this.mIbSend.setImageResource(R.drawable.ic_send_off);
        this.mIbAttach.setImageResource(R.drawable.ic_voice_dark);
    }

    public void setEditProfileStatus(boolean z, EditText editText) {
        Log.d(TAG, "edit_status=" + z);
        this.mIsEditProfileStatus = z;
        this.mLlWriteBar.setVisibility(8);
        this.mLlContainerBottomBar.setBackgroundColor(getResources().getColor(R.color.white));
        this.mIbEmoji2.setVisibility(CHAT_VIEW);
        this.mIsSecondEmoActive = true;
        this.mEtMessage2 = (ChatEditText) editText;
    }

    public void setEditTextRequestFocus() {
        this.mEtMessage.requestFocus();
    }

    public void setEmoticonFromButton(ImageButton imageButton, EditText editText) {
        imageButton.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                Log.d(ChatsBottomBarView.TAG, "on button emo click - update status");
                ChatsBottomBarView.this.showHideEmotPanel();
            }
        });
        this.mEtMessage = (ChatEditText) editText;
        editText.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                ChatsBottomBarView.this.closeEmoIfKeyboardOpen();
            }
        });
    }

    public void setOnAttachmentClickListener(onAttachmentClickListener com_albus_view_ChatsBottomBarView_onAttachmentClickListener) {
        this.attachmentClickListener = com_albus_view_ChatsBottomBarView_onAttachmentClickListener;
    }

    public void setOnEmojiPanelAnimation(onPanelEmojiAnimation com_albus_view_ChatsBottomBarView_onPanelEmojiAnimation) {
        this.emojiPanelAnimation = com_albus_view_ChatsBottomBarView_onPanelEmojiAnimation;
    }

    public void setOnEmojiPanelComponentListener(onEmojiPanelComponentListener com_albus_view_ChatsBottomBarView_onEmojiPanelComponentListener) {
        this.emojiPanelComponentListener = com_albus_view_ChatsBottomBarView_onEmojiPanelComponentListener;
    }

    public void setOnVoiceAttachBroadcast(onVoiceBroadcastAttach com_albus_view_ChatsBottomBarView_onVoiceBroadcastAttach) {
        this.voiceBroadcastAttach = com_albus_view_ChatsBottomBarView_onVoiceBroadcastAttach;
    }

    public void setParams(int i, String str) {
        this.mViewMode = i;
        this.mUserId = str;
    }

    public void setQuote(Comment comment) {
        setQuote(QuoteUtils.formattedQuotedBuilder(comment, false), comment.getSender().getName());
    }

    public void setQuote(Message message) {
        setQuote(QuoteUtils.formattedQuotedBuilder(message, false), message.getSender().getName());
    }

    public void setQuote(String str, String str2) {
        if (this.mCurrentTypeHelper != MEDIA_TYPE_IMAGE) {
            closeAttachAndEmoPanel();
        }
        this.mCurrentTypeHelper = 7;
        dismissDialog();
        setAttachDialog();
        this.mLlQuoteAttach.setVisibility(CHAT_VIEW);
        this.mTvQuoteName.setText(SmiledText.getSmiledText(this.mContext, str2, this.mTvQuoteName));
        this.mTvQuote.setText(SmiledText.getSmiledText(this.mContext, '\"' + str + '\"', this.mTvQuote));
        CFLinkify.addLinks(this.mTvQuote, CFLinkify.NIC | 7);
        this.mTvQuote.setOnLayoutListener(new OnLayoutListener() {
            public void onLayouted(TextView textView) {
                if (textView.getLineCount() > 6) {
                    textView.setMaxLines(6);
                    textView.setMovementMethod(new ScrollingMovementMethod());
                    textView.scrollTo(ChatsBottomBarView.CHAT_VIEW, ChatsBottomBarView.CHAT_VIEW);
                } else if (textView.getMovementMethod() != null) {
                    textView.setMovementMethod(null);
                }
            }
        });
    }

    public void setStatusComment() {
        this.mLlContainerBottomBar.setBackgroundColor(this.mContext.getResources().getColor(R.color.light_grey2));
        this.mEtMessage.setHint(getResources().getString(R.string.write_comment_hint));
    }
}
