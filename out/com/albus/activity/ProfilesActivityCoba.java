package com.albus.activity;

import android.app.Activity;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Handler;
import android.preference.PreferenceManager;
import android.support.design.widget.AppBarLayout;
import android.support.design.widget.AppBarLayout.OnOffsetChangedListener;
import android.support.design.widget.CollapsingToolbarLayout;
import android.support.design.widget.FloatingActionButton;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.view.ViewCompat;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.RecyclerView.LayoutManager;
import android.support.v7.widget.Toolbar;
import android.transition.Slide;
import android.transition.Transition;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import com.albus.adapter.ProfilesAdapter;
import com.albus.crop.Crop;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.AlbusDialog.OnAddButtonListener;
import com.albus.dialog.AlbusDialog.OnAttachItemListener;
import com.albus.dialog.AlbusDialog.OnChooserVideoResolutionListener;
import com.albus.dialog.AlbusDialogInterface;
import com.albus.dialog.DialogUI;
import com.albus.media.ImageCache;
import com.albus.media.ImageCache.ImageCacheParams;
import com.albus.media.ThumbnailLoader;
import com.albus.media.UserPhotoLoader;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.util.FileUtils;
import com.albus.util.LongMessageCache;
import com.albus.util.LongMessageCache.LongMessageCacheParams;
import com.albus.util.LongMessageWorker;
import com.albus.util.PendingStateUtils;
import com.albus.util.QuoteUtils;
import com.albus.view.ChatsBottomBarView;
import com.albus.view.ChatsBottomBarView.onAttachmentClickListener;
import com.albus.view.ChatsBottomBarView.onEmojiPanelComponentListener;
import com.albus.view.ChatsBottomBarView.onPanelEmojiAnimation;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Callback.FetchFriendCallback;
import com.catfiz.base.Callback.FetchStatusComment;
import com.catfiz.base.Callback.OnSendLikeCallback;
import com.catfiz.base.Callback.ProgressUploadDownload;
import com.catfiz.base.Callback.UserFetchProfileCallback;
import com.catfiz.base.Callback.UserFetchStatusLike;
import com.catfiz.base.Catfiz;
import com.catfiz.base.Constant;
import com.catfiz.base.ICatfiz;
import com.catfiz.base.ICatfiz.ICatfizNewMessage;
import com.catfiz.base.ICatfiz.ICatfizUpdateProgress;
import com.catfiz.base.ICatfiz.ICatfizUpdates;
import com.catfiz.intents.CatfishIntents;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.media.ImageReScaler;
import com.catfiz.model.Comment;
import com.catfiz.model.Profile;
import com.catfiz.model.Quote;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.CatfishService;
import com.catfiz.service.CatfishService.UpdateRecent;
import com.catfiz.service.LongMessageExecutor;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.signal.Signal;
import com.catfiz.signal.SignalBinderMyProfile;
import com.catfiz.util.Log;
import com.catfiz.util.MediaFilePath;
import com.catfiz.util.Utils;
import java.io.Closeable;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.HttpStatus;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.LangUtils;

public class ProfilesActivityCoba extends AppCompatActivity implements ICatfiz, ICatfizNewMessage, ICatfizUpdateProgress, ICatfizUpdates {
    private static final int MEDIA_TYPE_IMAGE = 1;
    private static final String TAG = "ProfilesActivityCoba";
    private CollapsingToolbarLayout collapsingToolbarLayout;
    private ProfilesAdapter mAdapter;
    private Catfiz mCatfiz;
    private ChatsBottomBarView mChatBar;
    private Comment mCommentHelper;
    private int mCurrentMessageType = MEDIA_TYPE_IMAGE;
    private FloatingActionButton mFab;
    private String mFilePathToSend;
    private Uri mFileUriHelper;
    private boolean mIsBtnCmntClicked = true;
    private boolean mIsChangePp = false;
    private int mIsLike = 0;
    private List mItems;
    private LayoutManager mLayoutManager;
    private LongMessageWorker mLongMessageWorker;
    private Uri mPpUri;
    private Uri mProfPicWannaBeUri;
    private File mProfPictFile;
    private String mProfileName = "";
    private ImageView mProfilePict;
    private RecyclerView mRecyclerView;
    private ThumbnailLoader mThumbnailLoader;
    private User mUser;
    private UserPhotoLoader mUserPhotoLoader;

    /* synthetic */ class AnonymousClass11 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType = new int[MessageType.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.PROMOTECONTACT.ordinal()] = ProfilesActivityCoba.MEDIA_TYPE_IMAGE;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTVOICESTATUS.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTVIDEOSTATUS.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTIMAGESTATUS.ordinal()] = 4;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SHARE_SLINK_AT_COMMENT.ordinal()] = 5;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.LONGSTATUSCOMMENT.ordinal()] = 6;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.STIKER_MESSAGE_STATUS.ordinal()] = 7;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.LONG_MESSAGE.ordinal()] = 8;
            } catch (NoSuchFieldError e8) {
            }
        }
    }

    class CommentClickedDialog implements AlbusDialogInterface {
        private Comment mComment;
        private boolean mIsMeLikeThis = false;
        private long mStatusSequence;
        private CatfishPreferences prefs = CatfishService.getCatfishPreferences();

        public CommentClickedDialog(Comment comment, boolean z) {
            this.mComment = comment;
            this.mIsMeLikeThis = z;
            this.mStatusSequence = this.prefs.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0);
        }

        public void deleteComment(String str, String str2) {
            ProfilesActivityCoba.this.mCatfiz.deleteStatusComment(str, str2, this.prefs.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0), new Callback() {
                public void onError() {
                }

                public void onSuccess() {
                    ProfilesActivityCoba.this.fetchProfileDatas();
                }
            });
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
            Log.d(ProfilesActivityCoba.TAG, "onShowDialog: " + i);
            switch (i) {
                case R.styleable.Theme_dialogTheme /*42*/:
                    final String id = this.mComment.getSender().getId();
                    final long sequence = this.mComment.getSequence();
                    TextView textView = (TextView) view.findViewById(R.id.tv_name);
                    TextView textView2 = (TextView) view.findViewById(R.id.tv_chooser1);
                    TextView textView3 = (TextView) view.findViewById(R.id.tv_chooser2);
                    TextView textView4 = (TextView) view.findViewById(R.id.tv_chooser3);
                    TextView textView5 = (TextView) view.findViewById(R.id.tv_chooser4);
                    TextView textView6 = (TextView) view.findViewById(R.id.tv_chooser5);
                    textView4.setText(R.string.copy_cmnt);
                    textView.setText(R.string.comment_menu);
                    textView5.setText(R.string.delete_cmnt);
                    textView6.setText(R.string.btn_wholike);
                    textView2.setText(R.string.like);
                    textView3.setText(R.string.quote_cmnt);
                    textView2.setVisibility(0);
                    textView3.setVisibility(0);
                    textView4.setVisibility(0);
                    final int messageType = this.mComment.getMessageType();
                    final String statusComment = this.mComment.getStatusComment();
                    boolean isEmpty = statusComment.isEmpty();
                    Log.d(ProfilesActivityCoba.TAG, "Delivery:" + this.mComment.getDeliveryStatus());
                    switch (AnonymousClass11.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[messageType].ordinal()]) {
                        case ProfilesActivityCoba.MEDIA_TYPE_IMAGE /*1*/:
                        case e.c /*2*/:
                        case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                            isEmpty = true;
                            break;
                        case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                            if (!(this.mComment.getDeliveryStatus() == MessageDeliveryStatus.BCASTRECEIVED.ordinal() || this.mComment.getDeliveryStatus() == MessageDeliveryStatus.BCASTSENT.ordinal())) {
                                isEmpty = true;
                                break;
                            }
                        case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                            if (AlbusUtils.getSlinkFromJson(statusComment, ServerMessageDataStorage.SLINK) != null) {
                                if (AlbusUtils.getSlinkFromJson(statusComment, ServerMessageDataStorage.MESSAGE).isEmpty()) {
                                    isEmpty = true;
                                    break;
                                }
                            }
                            isEmpty = true;
                            break;
                            break;
                        case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                            isEmpty = false;
                            textView3.setVisibility(8);
                            break;
                        case SimpleLog.LOG_LEVEL_OFF /*7*/:
                            textView3.setVisibility(8);
                            textView4.setVisibility(8);
                            break;
                    }
                    if (isEmpty) {
                        textView4.setVisibility(8);
                        textView3.setVisibility(8);
                    }
                    if (bundle.getBoolean(AlbusModelObject.OWNER) || id.equals(CatfishService.getUserPIN())) {
                        textView5.setVisibility(0);
                    } else {
                        textView5.setVisibility(8);
                    }
                    if (this.mIsMeLikeThis) {
                        textView2.setText(ProfilesActivityCoba.this.getString(R.string.unlike));
                    } else {
                        textView2.setText(ProfilesActivityCoba.this.getString(R.string.like));
                    }
                    if (bundle.getInt(AlbusModelObject.LIKE_COUNT) > 0) {
                        textView6.setVisibility(0);
                    } else {
                        textView6.setVisibility(8);
                    }
                    final DialogFragment dialogFragment2 = dialogFragment;
                    textView4.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment2.dismiss();
                            if (CommentClickedDialog.this.mComment.getStatusComment().equals("")) {
                                AlbusUtils.setToastView(ProfilesActivityCoba.this, ProfilesActivityCoba.this.getString(R.string.nocopied));
                                return;
                            }
                            switch (AnonymousClass11.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[messageType].ordinal()]) {
                                case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                                    if (AlbusUtils.getSlinkFromJson(statusComment, ServerMessageDataStorage.SLINK) != null) {
                                        AlbusUtils.copyToClipboard(ProfilesActivityCoba.this, AlbusUtils.getSlinkFromJson(statusComment, ServerMessageDataStorage.MESSAGE));
                                        break;
                                    }
                                    break;
                                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                                case Utils.FILE_TYPE_INSTALLER /*8*/:
                                    AlbusUtils.copyToClipboard(ProfilesActivityCoba.this, LongMessageExecutor.getLongMessage(CommentClickedDialog.this.mComment.getSequence()));
                                    break;
                                default:
                                    if (!QuoteUtils.isQuoteMessage(statusComment)) {
                                        AlbusUtils.copyToClipboard(ProfilesActivityCoba.this, statusComment);
                                        break;
                                    }
                                    Quote quoteJSONStringDecoder = QuoteUtils.quoteJSONStringDecoder(statusComment);
                                    if (quoteJSONStringDecoder != null) {
                                        AlbusUtils.copyToClipboard(ProfilesActivityCoba.this, quoteJSONStringDecoder.getMyMessage());
                                        break;
                                    }
                                    break;
                            }
                            AlbusUtils.setToastView(ProfilesActivityCoba.this, ProfilesActivityCoba.this.getString(R.string.text_copied));
                        }
                    });
                    final DialogFragment dialogFragment3 = dialogFragment;
                    textView5.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment3.dismiss();
                            CommentClickedDialog.this.deleteComment(id, "{\"senderpin\":\"" + id + "\",\"sequence\":\"" + sequence + "\"}");
                        }
                    });
                    dialogFragment3 = dialogFragment;
                    textView2.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment3.dismiss();
                            CommentClickedDialog.this.setLikeStatusComment(false, id, sequence);
                        }
                    });
                    dialogFragment2 = dialogFragment;
                    textView6.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment2.dismiss();
                            Intent intent = new Intent(ProfilesActivityCoba.this, MenuActivity.class);
                            intent.putExtra(AlbusModelObject.PAGE, 32);
                            intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, sequence);
                            intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, CommentClickedDialog.this.mComment.isMeLikeThis());
                            intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, CommentClickedDialog.this.mComment.getSender().getId());
                            intent.putExtra(HTTP.IDENTITY_CODING, ProfilesActivityCoba.MEDIA_TYPE_IMAGE);
                            ProfilesActivityCoba.this.startActivity(intent);
                        }
                    });
                    dialogFragment2 = dialogFragment;
                    textView3.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment2.dismiss();
                            Log.d(ProfilesActivityCoba.TAG, "onQuoted Message:" + messageType + " " + CommentClickedDialog.this.mComment.getStatusComment());
                            ProfilesActivityCoba.this.mChatBar.setQuote(CommentClickedDialog.this.mComment);
                            ProfilesActivityCoba.this.setAttachedData(7, "");
                            ProfilesActivityCoba.this.mCommentHelper = CommentClickedDialog.this.mComment;
                        }
                    });
                    return;
                default:
                    return;
            }
        }

        public void setLikeStatusComment(boolean z, String str, long j) {
            ProfilesActivityCoba.this.mCatfiz.setlikeStatusComment(z, str, this.mStatusSequence, j, str, new Callback() {
                public void onError() {
                }

                public void onSuccess() {
                    new Handler().post(new Runnable() {
                        public void run() {
                            ProfilesActivityCoba.this.fetchProfileDatas();
                        }
                    });
                }
            });
        }
    }

    public class FetchProfileCb implements UserFetchProfileCallback {
        private WeakReference mThisActivityRef;

        public FetchProfileCb(Activity activity) {
            this.mThisActivityRef = new WeakReference(activity);
        }

        public void onData(User user) {
            ProfilesActivityCoba profilesActivityCoba = (ProfilesActivityCoba) this.mThisActivityRef.get();
            if (profilesActivityCoba != null) {
                int intExtra = profilesActivityCoba.getIntent().getIntExtra(AlbusModelObject.ME_LIKE_STATUS, 100);
                profilesActivityCoba.collapsingToolbarLayout.setTitle(user.getName());
                profilesActivityCoba.mUser = user;
                CatfishService.getCatfishPreferences();
                Profile profile = new Profile();
                CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
                user.setMeLikeThisStatus(catfishPreferences.getInt(Constant.IS_LIKE_MY_STATUS, 0));
                if (intExtra == ProfilesActivityCoba.MEDIA_TYPE_IMAGE) {
                    user.setMeLikeThisStatus(intExtra);
                    catfishPreferences.edit().putInt(Constant.IS_LIKE_MY_STATUS, ProfilesActivityCoba.MEDIA_TYPE_IMAGE);
                } else if (intExtra == -1) {
                    user.setMeLikeThisStatus(intExtra);
                    catfishPreferences.edit().putInt(Constant.IS_LIKE_MY_STATUS, -1);
                }
                profilesActivityCoba.mItems.clear();
                if (user.getStatus() != null) {
                    Profile profile2 = new Profile();
                    profile2.setUser(user);
                    profile2.setListItemType(2);
                    profilesActivityCoba.mItems.add(profile2);
                    profilesActivityCoba.mProfileName = user.getName();
                }
                profilesActivityCoba.fetchStatusComment();
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    public class FetchStatusCommentCb implements FetchStatusComment {
        private WeakReference mThisActivityRef;

        public FetchStatusCommentCb(Activity activity) {
            this.mThisActivityRef = new WeakReference(activity);
        }

        public void onData(List list) {
            int i = 0;
            ProfilesActivityCoba profilesActivityCoba = (ProfilesActivityCoba) this.mThisActivityRef.get();
            if (profilesActivityCoba != null) {
                ((Profile) profilesActivityCoba.mItems.get(0)).setCommentCount(list.size());
                if (list.size() == 0) {
                    Profile profile = new Profile();
                    profile.setListItemType(10);
                    profilesActivityCoba.mItems.add(profile);
                } else {
                    int size = list.size();
                    while (i < size) {
                        Profile profile2 = new Profile();
                        profile2.setListItemType(9);
                        profile2.setComment((Comment) list.get(i));
                        profilesActivityCoba.mItems.add(profile2);
                        i += ProfilesActivityCoba.MEDIA_TYPE_IMAGE;
                    }
                }
                profilesActivityCoba.mAdapter.notifyDataSetChanged();
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    class ProfilePictureOnclick implements OnClickListener {
        private Drawable d;
        private String path;

        public ProfilePictureOnclick(Drawable drawable, String str) {
            this.d = drawable;
            this.path = str;
        }

        public void ImageViewer() {
            Intent intent = new Intent(ProfilesActivityCoba.this, ProfilesImageViewerActivity.class);
            intent.putExtra(HTTP.IDENTITY_CODING, 3);
            intent.putExtra(AlbusModelObject.IMAGE, this.path);
            ProfilesActivityCoba.this.startActivityForResult(intent, 23);
        }

        public void onClick(View view) {
            if (this.d != null) {
                ImageViewer();
            } else {
                ProfilesActivityCoba.this.editProfPic();
            }
        }
    }

    class PromoteHandleCb implements FetchFriendCallback {
        private User mIncompleteUser = null;
        private WeakReference mThisActivityRef;

        class AddDialogProfile implements AlbusDialogInterface {
            private AddDialogProfile() {
            }

            public void addFriend(String str) {
                ProfilesActivityCoba.this.mCatfiz.userRequestAddFriend(str, new Callback() {
                    public void onError() {
                        Log.d(ProfilesActivityCoba.TAG, "Error add friend");
                    }

                    public void onSuccess() {
                        AlbusUtils.setToastView(ProfilesActivityCoba.this, ProfilesActivityCoba.this.getString(R.string.df_pending_friend));
                    }
                });
            }

            public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
            }

            public void onCreateDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
                AlbusDialog.setOnAddButtonClicked(new OnAddButtonListener() {
                    public void onAddButtonClicked(String str) {
                        AddDialogProfile.this.addFriend(str);
                    }
                });
            }

            public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
            }

            public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
            }
        }

        public PromoteHandleCb(Activity activity, User user) {
            this.mThisActivityRef = new WeakReference(activity);
            this.mIncompleteUser = user;
        }

        private void gotoFriendProfile(User user) {
            Intent intent = new Intent(ProfilesActivityCoba.this, ProfilesFriendActivity.class);
            intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, user.getId());
            intent.putExtra(CatfishDataStorage.NIC_NAME, user.getName());
            intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, user.getStatusSequence());
            intent.putExtra(AlbusModelObject.STATUS_LIKE, user.getStatusLike());
            intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, user.isMeLikeThisStatus());
            ProfilesActivityCoba.this.startActivity(intent);
        }

        public void onData(User user, String str) {
            ProfilesActivityCoba profilesActivityCoba = (ProfilesActivityCoba) this.mThisActivityRef.get();
            if (profilesActivityCoba != null) {
                if (user != null) {
                    Log.d(ProfilesActivityCoba.TAG, "goToProfile:" + user.getName() + "," + user.getStatusSequence() + "," + user.getStatusdate());
                    gotoFriendProfile(user);
                    return;
                }
                Log.d(ProfilesActivityCoba.TAG, "Not Friends");
                Bundle bundle = new Bundle();
                bundle.putString(CatfishDataStorage.NIC_NAME, this.mIncompleteUser.getName());
                bundle.putString(CatfishRESTAPI.CFCOMPACT_STICKERID, this.mIncompleteUser.getId());
                bundle.putInt(AlbusModelObject.DIALOG, 9);
                AlbusDialog.showDialog(9, new AddDialogProfile(), profilesActivityCoba, bundle, profilesActivityCoba.getSupportFragmentManager());
            }
        }

        public void onError() {
            Log.e(ProfilesActivityCoba.TAG, "Fail Promote Handle");
        }

        public void onSuccess() {
        }
    }

    public class SendLikeCb implements OnSendLikeCallback {
        private WeakReference mThisActivityRef;

        public SendLikeCb(Activity activity) {
            this.mThisActivityRef = new WeakReference(activity);
        }

        public void onData(final int i) {
            final ProfilesActivityCoba profilesActivityCoba = (ProfilesActivityCoba) this.mThisActivityRef.get();
            profilesActivityCoba.runOnUiThread(new Runnable() {
                public void run() {
                    ((Profile) profilesActivityCoba.mItems.get(0)).setStatusLike(i);
                    Log.d(ProfilesActivityCoba.TAG, "like=" + ((Profile) profilesActivityCoba.mItems.get(0)).getStatusLike());
                    profilesActivityCoba.mAdapter.notifyDataSetChanged();
                }
            });
        }

        public void onError() {
        }

        public void onSuccess() {
            final ProfilesActivityCoba profilesActivityCoba = (ProfilesActivityCoba) this.mThisActivityRef.get();
            if (profilesActivityCoba != null) {
                CatfishService.getCatfishPreferences().edit().putInt(Constant.IS_LIKE_MY_STATUS, profilesActivityCoba.mIsLike).commit();
                Log.d(ProfilesActivityCoba.TAG, "like status sendiri value set to: " + profilesActivityCoba.mIsLike);
                profilesActivityCoba.runOnUiThread(new Runnable() {
                    public void run() {
                        ((Profile) profilesActivityCoba.mItems.get(0)).getUser().setMeLikeThisStatus(profilesActivityCoba.mIsLike);
                        Log.d(ProfilesActivityCoba.TAG, "like=" + ((Profile) profilesActivityCoba.mItems.get(0)).isMeLikeThisStatus());
                        profilesActivityCoba.mAdapter.notifyDataSetChanged();
                    }
                });
            }
        }
    }

    class VideoClickedDialog implements AlbusDialogInterface {
        private VideoClickedDialog() {
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            Log.d(ProfilesActivityCoba.TAG, "onCreateDialog: " + i);
            switch (i) {
                case R.styleable.Theme_selectableItemBackground /*52*/:
                    AlbusDialog.setOnChooserVideoResolutionClicked(new OnChooserVideoResolutionListener() {
                        public void onVideoHighResolution() {
                            Intent intent = new Intent("android.media.action.VIDEO_CAPTURE");
                            if (intent.resolveActivity(ProfilesActivityCoba.this.getPackageManager()) != null) {
                                intent.putExtra("android.intent.extra.videoQuality", ProfilesActivityCoba.MEDIA_TYPE_IMAGE);
                                intent.putExtra("android.intent.extra.durationLimit", AlbusModelObject.VIDEO_DURATION_UPLOAD_LIMIT);
                                ProfilesActivityCoba.this.startActivityForResult(intent, 8);
                            }
                        }

                        public void onVideoLowResolution() {
                            Intent intent = new Intent("android.media.action.VIDEO_CAPTURE");
                            if (intent.resolveActivity(ProfilesActivityCoba.this.getPackageManager()) != null) {
                                intent.putExtra("android.intent.extra.videoQuality", 0);
                                intent.putExtra("android.intent.extra.durationLimit", AlbusModelObject.VIDEO_DURATION_UPLOAD_LIMIT);
                                ProfilesActivityCoba.this.startActivityForResult(intent, 8);
                            }
                        }
                    });
                    return;
                default:
                    return;
            }
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
            Log.d(ProfilesActivityCoba.TAG, "onShowDialog: " + i);
            switch (i) {
                case LangUtils.HASH_OFFSET /*37*/:
                    AlbusDialog.setOnAttachItemClicked(new OnAttachItemListener() {
                        public void onAttachVideoCamClicked() {
                            Bundle bundle = new Bundle();
                            bundle.putInt(AlbusModelObject.DIALOG, 52);
                            AlbusDialog.showDialog(52, new VideoClickedDialog(), ProfilesActivityCoba.this, bundle, ProfilesActivityCoba.this.getSupportFragmentManager());
                        }

                        public void onAttachVideoFileClicked() {
                            try {
                                ProfilesActivityCoba.this.startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("video/*"), 6);
                            } catch (ActivityNotFoundException e) {
                                AlbusUtils.setToastView(ProfilesActivityCoba.this, ProfilesActivityCoba.this.getString(R.string.file_manager_check));
                            }
                        }
                    });
                    return;
                case R.styleable.Theme_selectableItemBackground /*52*/:
                    AlbusDialog.setOnChooserVideoResolutionClicked(new OnChooserVideoResolutionListener() {
                        public void onVideoHighResolution() {
                            Intent intent = new Intent("android.media.action.VIDEO_CAPTURE");
                            if (intent.resolveActivity(ProfilesActivityCoba.this.getPackageManager()) != null) {
                                intent.putExtra("android.intent.extra.videoQuality", ProfilesActivityCoba.MEDIA_TYPE_IMAGE);
                                intent.putExtra("android.intent.extra.durationLimit", AlbusModelObject.VIDEO_DURATION_UPLOAD_LIMIT);
                                ProfilesActivityCoba.this.startActivityForResult(intent, 8);
                            }
                        }

                        public void onVideoLowResolution() {
                            Intent intent = new Intent("android.media.action.VIDEO_CAPTURE");
                            if (intent.resolveActivity(ProfilesActivityCoba.this.getPackageManager()) != null) {
                                intent.putExtra("android.intent.extra.videoQuality", 0);
                                intent.putExtra("android.intent.extra.durationLimit", AlbusModelObject.VIDEO_DURATION_UPLOAD_LIMIT);
                                ProfilesActivityCoba.this.startActivityForResult(intent, 8);
                            }
                        }
                    });
                    return;
                default:
                    return;
            }
        }
    }

    private void beginCrop(Uri uri) {
        new Crop(uri).output(Uri.fromFile(new File(getCacheDir(), AlbusModelObject.CACHE_CROP_USER)), PreferenceManager.getDefaultSharedPreferences(this).getBoolean("photoprofile_transparency_v2", false)).asSquare().start(this);
    }

    private static void closeSilently(Closeable closeable) {
        if (closeable != null) {
            try {
                closeable.close();
            } catch (Throwable th) {
            }
        }
    }

    private void editProfPic() {
        Bundle bundle = new Bundle();
        bundle.putInt(AlbusModelObject.DIALOG, 3);
        AlbusDialog.showDialog(3, new DialogUI().getDialogInterface(), this, bundle, getSupportFragmentManager());
    }

    private void fetchProfileDatas() {
        fetchUserProfile();
        requestProgressUploadDownload();
        if (this.mCatfiz != null && this.mUser != null) {
            this.mCatfiz.setRecentUpdateOpen(this.mUser.getId(), new Callback() {
                public void onError() {
                }

                public void onSuccess() {
                }
            });
        }
    }

    private void fetchStatusComment() {
        this.mCatfiz.requestStatusComment(CatfishService.getCatfishPreferences().getLong(CatfishService.USERSTATUS_SEQ_PREF, 0), CatfishService.getUserPIN(), new FetchStatusCommentCb(this));
    }

    private void fetchUserProfile() {
        this.mCatfiz.userFetchProfile(new FetchProfileCb(this));
    }

    private static File getOutputMediaFile(int i) {
        File file = new File(CatfishPhotoStorage.getCacheStorageDir(null));
        if (file.exists() || file.mkdirs()) {
            return i == MEDIA_TYPE_IMAGE ? new File(file.getPath() + File.separator + AlbusModelObject.CAPTURED_PROFILE_PIC) : null;
        } else {
            Log.d(TAG, "failed to create directory");
            return null;
        }
    }

    private void handleCropResult(int i, Intent intent) {
        Bitmap bitmap;
        FileNotFoundException fileNotFoundException;
        FileNotFoundException fileNotFoundException2;
        Drawable createFromPath;
        if (i == -1) {
            if (intent != null) {
                this.mPpUri = Crop.getOutput(intent);
                Log.d(TAG, "save pp with uri = " + this.mPpUri);
                FileUtils.copyFile(MediaFilePath.getPath(this, this.mPpUri), CatfishPhotoStorage.getPhotoStorageDir(this) + "/", this.mUser.getId() + "_temp");
                File userProfilePhotoFile = CatfishPhotoStorage.getUserProfilePhotoFile(this);
                Log.d(TAG, "path photo fdes : " + userProfilePhotoFile);
                File file = new File(this.mPpUri.getPath());
                boolean z = PreferenceManager.getDefaultSharedPreferences(this).getBoolean("photoprofile_transparency_v2", false);
                Bitmap bitmap2 = null;
                if (AlbusUtils.isNetworkAvailable(this)) {
                    try {
                        Object fileOutputStream = new FileOutputStream(userProfilePhotoFile);
                        if (z) {
                            bitmap2 = ImageReScaler.rescaleFromFilePath(file.getAbsolutePath(), HttpStatus.SC_METHOD_FAILURE);
                            try {
                                bitmap2.compress(CompressFormat.PNG, 90, fileOutputStream);
                                bitmap = bitmap2;
                            } catch (FileNotFoundException e) {
                                fileNotFoundException = e;
                                bitmap = bitmap2;
                                fileNotFoundException2 = fileNotFoundException;
                                fileNotFoundException2.printStackTrace();
                                createFromPath = Drawable.createFromPath(userProfilePhotoFile.getAbsolutePath());
                                if (this.mProfilePict != null) {
                                    this.mProfilePict.setImageDrawable(createFromPath);
                                }
                                this.mIsChangePp = true;
                                bitmap.recycle();
                                return;
                            }
                        }
                        bitmap2 = ImageReScaler.rescaleFromFilePath(file.getAbsolutePath(), 640);
                        bitmap2.compress(CompressFormat.JPEG, 90, fileOutputStream);
                        bitmap = bitmap2;
                        try {
                            closeSilently(fileOutputStream);
                            this.mCatfiz.userUploadPhoto(CatfishService.getUserPIN(), userProfilePhotoFile, new Callback() {
                                public void onError() {
                                    Log.d(ProfilesActivityCoba.TAG, "error upload");
                                }

                                public void onSuccess() {
                                    Log.d(ProfilesActivityCoba.TAG, "upload");
                                }
                            });
                        } catch (FileNotFoundException e2) {
                            fileNotFoundException2 = e2;
                            fileNotFoundException2.printStackTrace();
                            createFromPath = Drawable.createFromPath(userProfilePhotoFile.getAbsolutePath());
                            if (this.mProfilePict != null) {
                                this.mProfilePict.setImageDrawable(createFromPath);
                            }
                            this.mIsChangePp = true;
                            bitmap.recycle();
                            return;
                        }
                    } catch (FileNotFoundException e3) {
                        fileNotFoundException = e3;
                        bitmap = bitmap2;
                        fileNotFoundException2 = fileNotFoundException;
                        fileNotFoundException2.printStackTrace();
                        createFromPath = Drawable.createFromPath(userProfilePhotoFile.getAbsolutePath());
                        if (this.mProfilePict != null) {
                            this.mProfilePict.setImageDrawable(createFromPath);
                        }
                        this.mIsChangePp = true;
                        bitmap.recycle();
                        return;
                    }
                    createFromPath = Drawable.createFromPath(userProfilePhotoFile.getAbsolutePath());
                    if (this.mProfilePict != null) {
                        this.mProfilePict.setImageDrawable(createFromPath);
                    }
                    this.mIsChangePp = true;
                    bitmap.recycle();
                    return;
                }
                AlbusUtils.setToastView(this, getString(R.string.check_connection));
            }
        } else if (i == HttpStatus.SC_NOT_FOUND) {
            AlbusUtils.setToastView(this, Crop.getError(intent).getMessage());
        } else {
            AlbusUtils.setToastView(this, getString(R.string.cancel_crop));
        }
    }

    private void initActivityTransitions() {
        if (VERSION.SDK_INT >= 21) {
            Transition slide = new Slide();
            slide.excludeTarget(16908335, true);
            getWindow().setEnterTransition(slide);
            getWindow().setReturnTransition(slide);
        }
    }

    private void initView() {
        this.mCatfiz = new Catfiz(this, this, new SignalBinderMyProfile());
        AppBarLayout appBarLayout = (AppBarLayout) findViewById(R.id.app_bar_layout);
        ViewCompat.setTransitionName(appBarLayout, "");
        supportPostponeEnterTransition();
        setSupportActionBar((Toolbar) findViewById(R.id.toolbar));
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        this.collapsingToolbarLayout = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);
        this.collapsingToolbarLayout.setExpandedTitleColor(getResources().getColor(17170445));
        this.collapsingToolbarLayout.setCollapsedTitleTextColor(getResources().getColor(17170445));
        appBarLayout.addOnOffsetChangedListener(new OnOffsetChangedListener() {
            boolean isShow = false;
            int scrollRange = -1;

            public void onOffsetChanged(AppBarLayout appBarLayout, int i) {
                if (this.scrollRange == -1) {
                    this.scrollRange = appBarLayout.getTotalScrollRange();
                }
                if (this.scrollRange + i == 0) {
                    ProfilesActivityCoba.this.collapsingToolbarLayout.setCollapsedTitleTextColor(ProfilesActivityCoba.this.getResources().getColor(17170443));
                    ProfilesActivityCoba.this.collapsingToolbarLayout.setTitle(ProfilesActivityCoba.this.mProfileName);
                    this.isShow = true;
                } else if (this.isShow) {
                    ProfilesActivityCoba.this.collapsingToolbarLayout.setTitle("");
                    this.isShow = false;
                }
                if (i != 0) {
                }
            }
        });
        this.mProfilePict = (ImageView) findViewById(R.id.image);
        this.mProfPictFile = new File(MediaFilePath.getPath(this, CatfishPhotoStorage.getUserProfilePhotoFileUri(this)));
        Drawable createFromPath = Drawable.createFromPath(this.mProfPictFile.getAbsolutePath());
        if (createFromPath != null) {
            this.mProfilePict.setImageDrawable(createFromPath);
        }
        this.mProfilePict.setOnClickListener(new ProfilePictureOnclick(createFromPath, this.mProfPictFile.getAbsolutePath()));
        this.mRecyclerView = (RecyclerView) findViewById(R.id.recyclerView);
        this.mRecyclerView.setScrollContainer(true);
        this.mLayoutManager = new LinearLayoutManager(this);
        this.mRecyclerView.setLayoutManager(this.mLayoutManager);
        this.mFab = (FloatingActionButton) findViewById(R.id.fab);
        this.mFab.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                Intent intent = new Intent(ProfilesActivityCoba.this, CustomActionBarPageActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 24);
                intent.putExtra(HTTP.IDENTITY_CODING, 3);
                ProfilesActivityCoba.this.startActivityForResult(intent, 11);
            }
        });
        this.mChatBar = (ChatsBottomBarView) findViewById(R.id.cv_bottom_bar);
        this.mChatBar.setStatusComment();
        this.mChatBar.setOnEmojiPanelAnimation(new onPanelEmojiAnimation() {
            public void onPanelDown() {
            }

            public void onPanelDownFinished() {
            }

            public void onPanelUp(View view) {
                ProfilesActivityCoba.this.dismissKeyboard(view);
            }

            public void onPanelUpFinished(View view) {
                ProfilesActivityCoba.this.mAdapter.notifyDataSetChanged();
            }
        });
        this.mChatBar.setOnEmojiPanelComponentListener(new onEmojiPanelComponentListener() {
            private String mReceiverId;
            private long mStatusSequence;

            public void onBtnKeyboardPressed(View view) {
                ProfilesActivityCoba.this.showKeyboard(view);
            }

            public void onBtnSendPressed(String str) {
                CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
                this.mReceiverId = CatfishService.getUserPIN();
                this.mStatusSequence = catfishPreferences.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0);
                ProfilesActivityCoba.this.mRecyclerView.scrollToPosition(ProfilesActivityCoba.this.mItems.size() - 1);
                if (ProfilesActivityCoba.this.mCurrentMessageType == ProfilesActivityCoba.MEDIA_TYPE_IMAGE) {
                    ProfilesActivityCoba.this.mCatfiz.sendStatusComment(this.mReceiverId, AlbusUtils.removeUnecessaryHtmlTag(str), this.mStatusSequence, new Callback() {
                        public void onError() {
                            Log.d(ProfilesActivityCoba.TAG, " onError() Send comment");
                        }

                        public void onSuccess() {
                            Log.d(ProfilesActivityCoba.TAG, " onSuccess() Send comment");
                            ProfilesActivityCoba.this.fetchProfileDatas();
                        }
                    });
                } else if (ProfilesActivityCoba.this.mCurrentMessageType == 7) {
                    String quoteJSONStringBuilder = QuoteUtils.quoteJSONStringBuilder(ProfilesActivityCoba.this.mCommentHelper, str);
                    Log.d(ProfilesActivityCoba.TAG, "Will Send MESSAGE_TYPE_QUOTED:" + quoteJSONStringBuilder);
                    ProfilesActivityCoba.this.mCatfiz.sendStatusComment(this.mReceiverId, quoteJSONStringBuilder, this.mStatusSequence, new Callback() {
                        public void onError() {
                            Log.d(ProfilesActivityCoba.TAG, " onError() Send comment");
                        }

                        public void onSuccess() {
                            Log.d(ProfilesActivityCoba.TAG, " onSuccess() Send comment");
                            ProfilesActivityCoba.this.fetchProfileDatas();
                        }
                    });
                    ProfilesActivityCoba.this.mChatBar.closeAttachAndEmoPanel();
                    ProfilesActivityCoba.this.setAttachedData(ProfilesActivityCoba.MEDIA_TYPE_IMAGE, "");
                    ProfilesActivityCoba.this.mCommentHelper = null;
                } else {
                    String str2 = "";
                    switch (ProfilesActivityCoba.this.mCurrentMessageType) {
                        case e.c /*2*/:
                            Log.d(ProfilesActivityCoba.TAG, "Will Send MESSAGE_TYPE_PHOTO:" + ProfilesActivityCoba.this.mFilePathToSend);
                            str2 = AlbusModelObject.DATA_TYPE_PHOTO;
                            break;
                        case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                            Log.d(ProfilesActivityCoba.TAG, "Will Send MESSAGE_TYPE_VIDEO:" + ProfilesActivityCoba.this.mFilePathToSend);
                            str2 = AlbusModelObject.DATA_TYPE_VIDEO;
                            break;
                    }
                    if (str2.isEmpty()) {
                        Log.d(ProfilesActivityCoba.TAG, "Error Set Attached type!");
                    } else {
                        ProfilesActivityCoba.this.mCatfiz.sendAttachedComment(this.mReceiverId, AlbusUtils.removeUnecessaryHtmlTag(str), this.mStatusSequence, str2, ProfilesActivityCoba.this.mFilePathToSend, ProfilesActivityCoba.this, new Callback() {
                            public void onError() {
                                Log.d(ProfilesActivityCoba.TAG, "Error Send Attached:" + ProfilesActivityCoba.this.mFilePathToSend);
                            }

                            public void onSuccess() {
                                Log.d(ProfilesActivityCoba.TAG, "Success Send Attached:" + ProfilesActivityCoba.this.mFilePathToSend);
                                ProfilesActivityCoba.this.fetchProfileDatas();
                            }
                        });
                    }
                    ProfilesActivityCoba.this.mChatBar.closeAttachAndEmoPanel();
                    ProfilesActivityCoba.this.setAttachedData(ProfilesActivityCoba.MEDIA_TYPE_IMAGE, "");
                    ProfilesActivityCoba.this.resetPendingState();
                }
            }

            public void onBtnStickerActive(ImageButton imageButton, boolean z) {
                if (z) {
                    imageButton.setImageResource(R.drawable.ic_emot_dark);
                    ((LinearLayoutManager) ProfilesActivityCoba.this.mLayoutManager).scrollToPositionWithOffset(ProfilesActivityCoba.this.mItems.size() - 1, 0);
                    return;
                }
                imageButton.setImageResource(R.drawable.ic_sticker_dark);
            }

            public void onEditTextFocusChanged() {
                ((LinearLayoutManager) ProfilesActivityCoba.this.mLayoutManager).scrollToPositionWithOffset(ProfilesActivityCoba.this.mItems.size() - 1, 0);
            }
        });
        this.mChatBar.setOnAttachmentClickListener(new onAttachmentClickListener() {
            CatfishPreferences mPrefs = CatfishService.getCatfishPreferences();

            public void onCancelAttachmentClicked() {
                ProfilesActivityCoba.this.setAttachedData(ProfilesActivityCoba.MEDIA_TYPE_IMAGE, "");
            }

            public void onContactPIN() {
                Intent intent = new Intent(ProfilesActivityCoba.this, CustomActionBarPageActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 33);
                intent.putExtra(HTTP.IDENTITY_CODING, 33);
                intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, CatfishService.getUserPIN());
                intent.putExtra(ServerMessageDataStorage.SEQUENCE, this.mPrefs.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0));
                ProfilesActivityCoba.this.startActivityForResult(intent, 9);
            }

            public void onFileAttachmentClicked() {
            }

            public void onFizzlinkAttachmentClicked() {
                Intent intent = new Intent(ProfilesActivityCoba.this, CustomActionBarPageActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 57);
                intent.putExtra(HTTP.IDENTITY_CODING, 31);
                intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, CatfishService.getUserPIN());
                intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, this.mPrefs.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0));
                ProfilesActivityCoba.this.startActivityForResult(intent, 27);
            }

            public void onMusicAttachmentClicked() {
            }

            public void onPhotoAttachmentClicked(Uri uri) {
                Bundle bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 36);
                bundle.putInt(AlbusModelObject.PAGE, 31);
                AlbusDialog.showDialog(36, new DialogUI().getDialogInterface(), ProfilesActivityCoba.this, bundle, ProfilesActivityCoba.this.getSupportFragmentManager());
                ProfilesActivityCoba.this.mFileUriHelper = uri;
            }

            public void onSendBlitz() {
            }

            public void onVideoAttachmentClicked() {
                Bundle bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 37);
                AlbusDialog.showDialog(37, new VideoClickedDialog(), ProfilesActivityCoba.this, bundle, ProfilesActivityCoba.this.getSupportFragmentManager());
            }

            public void onVoiceAttachmentClicked(String str) {
                ProfilesActivityCoba.this.mCatfiz.sendAttachedComment(CatfishService.getUserPIN(), "", this.mPrefs.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0), AlbusModelObject.DATA_TYPE_VOICE, str, ProfilesActivityCoba.this, new Callback() {
                    public void onError() {
                        Log.d(ProfilesActivityCoba.TAG, "Error Send Attached Voice Comment!");
                    }

                    public void onSuccess() {
                        Log.d(ProfilesActivityCoba.TAG, "Success Send Attached Voice Comment");
                        ProfilesActivityCoba.this.fetchProfileDatas();
                        ProfilesActivityCoba.this.mChatBar.closeAttachAndEmoPanel();
                        ProfilesActivityCoba.this.setAttachedData(ProfilesActivityCoba.MEDIA_TYPE_IMAGE, "");
                    }
                });
            }
        });
        this.mChatBar.setParams(3, CatfishService.getUserPIN());
    }

    private void requestProgressUploadDownload() {
        this.mCatfiz.requestProgressUploadDownload(new ProgressUploadDownload() {
            public void onError() {
            }

            public boolean onHasProgressUploadDownNUpload(Map map, Map map2) {
                ProfilesActivityCoba.this.mAdapter.setProgress(map, map2);
                ProfilesActivityCoba.this.mAdapter.notifyDataSetChanged();
                return false;
            }

            public void onSuccess() {
            }

            public boolean onUpdateProgressDownloadNUpload(String str, int i, int i2) {
                return false;
            }
        });
    }

    private void resetPendingState() {
        Log.d(TAG, "RESET PENDING STATE");
        this.mFileUriHelper = null;
        PendingStateUtils.resetPendingState(this);
    }

    private void setAttachedData(int i, String str) {
        this.mCurrentMessageType = i;
        this.mFilePathToSend = str;
    }

    public void capturePhotoCam() {
        Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
        this.mProfPicWannaBeUri = Uri.fromFile(getOutputMediaFile(MEDIA_TYPE_IMAGE));
        intent.putExtra("output", this.mProfPicWannaBeUri);
        startActivityForResult(intent, 14);
    }

    public void choosePhotoByFile() {
        Crop.pickImage(this);
    }

    public void commentClickEvent(Comment comment, int i, boolean z) {
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        Bundle bundle = new Bundle();
        bundle.putInt(AlbusModelObject.POSITION, i);
        bundle.putBoolean(AlbusModelObject.OWNER, true);
        bundle.putLong(AlbusModelObject.STATUS_SEQUENCE, catfishPreferences.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0));
        bundle.putBoolean(AlbusModelObject.LIKE_THIS, comment.isLikeThisComment());
        bundle.putInt(AlbusModelObject.LIKE_COUNT, comment.getCountCommentLike());
        bundle.putInt(AlbusModelObject.DIALOG, 42);
        AlbusDialog.showDialog(42, new CommentClickedDialog(comment, z), this, bundle, getSupportFragmentManager());
    }

    public void commentClickLikeCheck(final Comment comment, final int i) {
        this.mCatfiz.requestUserLikeList("scl:", comment.getSequence(), comment.getSender().getId(), new UserFetchStatusLike() {
            public void onData(List list) {
                boolean z;
                for (User id : list) {
                    if (id.getId().equals(CatfishService.getUserPIN())) {
                        z = true;
                        break;
                    }
                }
                z = false;
                Log.d(ProfilesActivityCoba.TAG, "isMeLikeThis:" + z);
                ProfilesActivityCoba.this.commentClickEvent(comment, i, z);
            }

            public void onError() {
            }

            public void onSuccess() {
            }
        });
    }

    public void commentPromoteHandle(User user) {
        if (!user.getId().equals(CatfishService.getUserPIN())) {
            this.mCatfiz.chatFetchFriend(user.getId(), new PromoteHandleCb(this, user));
        }
    }

    public void dismissKeyboard(View view) {
        ((InputMethodManager) getSystemService("input_method")).hideSoftInputFromWindow(view.getWindowToken(), 0);
    }

    public void downloadCommentAttachedFile(Comment comment) {
        this.mCatfiz.downloadBroadcastAttachedComment(comment, this, new Callback() {
            public void onError() {
                Log.d(ProfilesActivityCoba.TAG, "onError downloadCommentAttachedFile()");
            }

            public void onSuccess() {
                Log.d(ProfilesActivityCoba.TAG, "onSuccess downloadCommentAttachedFile()");
            }
        });
    }

    public void handleFileComment(Comment comment, String str) {
        Intent intent;
        Uri fromFile = Uri.fromFile(new File(str));
        if (fromFile != null) {
            String str2 = AlbusUtils.getmimetype(fromFile);
            Intent intent2 = new Intent("android.intent.action.VIEW");
            intent2.setDataAndType(fromFile, str2);
            try {
                if (str2.startsWith("image/")) {
                    intent = new Intent(this, ProfilesImageViewerActivity.class);
                    intent.putExtra(HTTP.IDENTITY_CODING, 31);
                    intent.putExtra(AlbusModelObject.IMAGE, str);
                    intent.putExtra(AlbusModelObject.SENDER_NAME, comment.getSender().getName());
                    intent.putExtra(AlbusModelObject.INTENT_ROOM, getResources().getString(R.string.fitur_profile));
                    intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, comment.getSender().getId());
                    startActivity(intent);
                    return;
                }
                intent2.putExtra(AlbusModelObject.SENDER_NAME, comment.getSender().getName());
                startActivityForResult(intent2, R.styleable.Theme_radioButtonStyle);
            } catch (Exception e) {
                e.printStackTrace();
                intent = CatfishIntents.newIntent(this, CatfishIntents.ACTION_SVG_VIEWER);
                intent.setDataAndType(fromFile, "image/svg+xml");
                startActivityForResult(intent, R.styleable.Theme_radioButtonStyle);
            }
        }
    }

    public boolean isBtnCommentClicked() {
        return this.mIsBtnCmntClicked;
    }

    protected void onActivityResult(int i, int i2, Intent intent) {
        super.onActivityResult(i, i2, intent);
        if (i2 == -1) {
            if (i == Crop.REQUEST_PICK) {
                beginCrop(intent.getData());
            } else if (i == Crop.REQUEST_CROP) {
                handleCropResult(i2, intent);
            } else if (i == 14) {
                Uri uri = this.mProfPicWannaBeUri;
                beginCrop(uri);
                Log.d(TAG, "activityResult-Retrieve uri=" + uri);
                if (uri != null) {
                    Log.d(TAG, "Using URI");
                }
            } else if (i == 23) {
                handleCropResult(i2, intent);
            } else if (i == 4) {
                if (this.mFileUriHelper == null) {
                    Log.d(TAG, "onActivityResult(chat), mFileUriHelper NULL");
                    return;
                }
                r0 = MediaFilePath.getPath(this, this.mFileUriHelper);
                this.mChatBar.setAttachFile(r0);
                Log.d(TAG, "Photo cam path:" + r0);
                setAttachedData(2, r0);
            } else if (i == 5) {
                r0 = MediaFilePath.getPath(this, intent.getData());
                this.mChatBar.setAttachFile(r0);
                Log.d(TAG, "Photo file path:" + r0);
                setAttachedData(2, r0);
            } else {
                fetchProfileDatas();
            }
        } else if (i2 == HttpStatus.SC_NOT_FOUND && i == Crop.REQUEST_CROP) {
            handleCropResult(i2, intent);
        }
    }

    public void onBackPressed() {
        if (this.mIsChangePp) {
            getIntent();
            setResult(-1);
        }
        super.onBackPressed();
    }

    public void onCatfizStarted() {
        fetchProfileDatas();
    }

    public void onCatfizStopped() {
    }

    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        initActivityTransitions();
        setContentView((int) R.layout.activity_profile);
        initView();
        LongMessageCacheParams longMessageCacheParams = new LongMessageCacheParams("");
        longMessageCacheParams.memCacheSize = (Utils.getMemoryClass(this) * AccessibilityNodeInfoCompat.ACTION_DISMISS) / 3;
        longMessageCacheParams.diskCacheEnabled = false;
        this.mLongMessageWorker = new LongMessageWorker(this);
        this.mLongMessageWorker.setLongMessageCache(LongMessageCache.findOrCreateCache((FragmentActivity) this, longMessageCacheParams));
        this.mLongMessageWorker.setLoadingMessage(getString(R.string.loading_message));
        ImageCacheParams imageCacheParams = new ImageCacheParams("");
        imageCacheParams.memCacheSize = (Utils.getMemoryClass(this) * AccessibilityNodeInfoCompat.ACTION_DISMISS) / 3;
        imageCacheParams.diskCacheEnabled = false;
        this.mThumbnailLoader = new ThumbnailLoader(this);
        this.mThumbnailLoader.setImageCache(ImageCache.findOrCreateCache((FragmentActivity) this, imageCacheParams));
        this.mUserPhotoLoader = new UserPhotoLoader(this, imageCacheParams);
        this.mItems = new ArrayList();
        this.mAdapter = new ProfilesAdapter(this, this.mItems, this.mThumbnailLoader, this.mUserPhotoLoader, this.mLongMessageWorker);
        this.mRecyclerView.setAdapter(this.mAdapter);
        this.mAdapter.setChatBar(this.mChatBar);
    }

    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.actionbar_profile, menu);
        MenuItem findItem = menu.findItem(R.id.mute);
        MenuItem findItem2 = menu.findItem(R.id.unfriend);
        MenuItem findItem3 = menu.findItem(R.id.block);
        MenuItem findItem4 = menu.findItem(R.id.delete_group);
        MenuItem findItem5 = menu.findItem(R.id.reset_name);
        findItem.setVisible(false);
        findItem2.setVisible(false);
        findItem3.setVisible(false);
        findItem4.setVisible(false);
        findItem5.setVisible(false);
        return true;
    }

    public void onDestroy() {
        super.onDestroy();
        this.mCatfiz.destroy();
        this.mThumbnailLoader = null;
    }

    public boolean onKeyDown(int i, KeyEvent keyEvent) {
        Log.d(TAG, "onKeyDown:" + i);
        return (keyEvent.getAction() == 0 && i == 4 && this.mChatBar.closeAttachAndEmoPanel()) ? super.onKeyDown(i, keyEvent) : false;
    }

    public boolean onOptionsItemSelected(MenuItem menuItem) {
        Intent intent;
        switch (menuItem.getItemId()) {
            case 16908332:
                if (this.mIsChangePp) {
                    getIntent();
                    setResult(-1);
                }
                finish();
                return true;
            case R.id.qrcode:
                intent = new Intent(this, MenuActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 6);
                intent.putExtra(HTTP.IDENTITY_CODING, 3);
                intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, CatfishService.getUserPIN());
                intent.putExtra(CatfishDataStorage.NIC_NAME, this.mUser.getName());
                startActivityForResult(intent, 11);
                return true;
            case R.id.edit_photo:
                editProfPic();
                return true;
            case R.id.edit_name:
                intent = new Intent(this, CustomActionBarPageActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 20);
                intent.putExtra(AlbusModelObject.VALUE, "");
                startActivityForResult(intent, 20);
                return true;
            case R.id.copy_nic:
                AlbusUtils.copyToClipboard(this, CatfishService.getUserPIN());
                AlbusUtils.setToastView(this, getString(R.string.nic_copied));
                return true;
            case R.id.account:
                intent = new Intent(this, SettingsMenuActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 13);
                intent.putExtra(HTTP.IDENTITY_CODING, 3);
                startActivity(intent);
                return true;
            default:
                return super.onOptionsItemSelected(menuItem);
        }
    }

    protected void onPause() {
        super.onPause();
        if (this.mThumbnailLoader != null) {
            this.mThumbnailLoader.setExitTasksEarly(true);
        }
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
        if (this.mThumbnailLoader != null) {
            this.mThumbnailLoader.setExitTasksEarly(false);
        }
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.start();
        }
    }

    public boolean onSignalEvent(Signal signal) {
        if (signal == Signal.STATUS_COMMENT_MESSAGE) {
            fetchStatusComment();
        }
        return true;
    }

    public boolean onSignalEventNewMessage(Signal signal, User user, int i, String str) {
        return false;
    }

    public boolean onSignalEventNewUpdates(int i, String str) {
        if (i == UpdateRecent.SELFPHOTOUPDT.ordinal()) {
            this.mIsChangePp = true;
        }
        return false;
    }

    public boolean onSignalUpdateProgress(Signal signal, String str, int i, int i2) {
        this.mAdapter.setUpdateProgress(str, i, i2);
        this.mAdapter.notifyDataSetChanged();
        return false;
    }

    public boolean onSignalUpdateProgress(Signal signal, Map map, Map map2) {
        this.mAdapter.setProgress(map, map2);
        this.mAdapter.notifyDataSetChanged();
        return false;
    }

    public void onStop() {
        super.onStop();
        this.mCatfiz.finish();
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.stop();
        }
    }

    public void selectAttachedPhotoByCamera() {
        Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
        intent.putExtra("output", this.mFileUriHelper);
        startActivityForResult(intent, 4);
    }

    public void selectAttachedPhotoByFile() {
        try {
            startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("image/*"), 5);
        } catch (ActivityNotFoundException e) {
            AlbusUtils.setToastView(this, getString(R.string.file_manager_check));
        }
    }

    public void sendLike(int i) {
        long j = CatfishService.getCatfishPreferences().getLong(CatfishService.USERSTATUS_SEQ_PREF, 0);
        this.mIsLike = i;
        this.mCatfiz.userFriendLikeUpdate(CatfishService.getUserPIN(), i, j, new SendLikeCb(this));
        this.mRecyclerView.invalidate();
    }

    public void setBtnCommentClicked(boolean z) {
        this.mIsBtnCmntClicked = z;
    }

    public void showKeyboard(View view) {
        ((InputMethodManager) getSystemService("input_method")).toggleSoftInput(2, 0);
    }
}
