package com.albus.activity;

import android.app.ActivityManager.TaskDescription;
import android.content.Intent;
import android.content.res.Configuration;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.view.MenuItemCompat;
import android.support.v4.view.MenuItemCompat.OnActionExpandListener;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.RelativeLayout;
import com.albus.fragment.AboutFragment;
import com.albus.fragment.GroupMemberFragment;
import com.albus.fragment.NotificationFragment;
import com.albus.fragment.QrcodeViewFragment;
import com.albus.fragment.WhoIsLikeFragment;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Callback.AcceptFriendCallback;
import com.catfiz.base.Callback.OnGroupDeleted;
import com.catfiz.base.Callback.PrivateFetchActiveFriendsCallback;
import com.catfiz.base.Callback.UserFetchProfileCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.model.Group;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishService;
import com.catfiz.service.PinManagerV2;
import com.catfiz.signal.Signal;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.util.List;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.protocol.HTTP;

public class MenuActivity extends ActionBarActivity implements ICatfiz {
    private static final String TAG = "MenuActivity";
    private ActionBar mAb = null;
    private Catfiz mCatfiz = null;
    private EditText mEtSearch = null;
    private Fragment mFragment = null;
    private Intent mIntent = null;
    private boolean mIsSearchMode = false;
    private int mPageFrag = -1;
    private MenuItem mSearchItem = null;
    private boolean mUpdateNotif = false;
    private User mUser = null;

    public void GoToFriend() {
        Log.d(TAG, "launch new friendsact");
        Intent intent = new Intent(this, FriendsActivity.class);
        intent.setFlags(603979776);
        startActivity(intent);
    }

    public void acceptFriend(String str, final String str2, Long l, int i) {
        this.mUpdateNotif = true;
        this.mCatfiz.userAcceptFriend(str, l, new AcceptFriendCallback() {
            public void onData(int i) {
                Log.d(MenuActivity.TAG, "accept friend success = " + str2);
                ((NotificationFragment) MenuActivity.this.mFragment).updateData();
            }

            public void onError() {
            }

            public void onSuccess() {
            }
        });
    }

    public void acceptGroup(final Group group, int i) {
        this.mUpdateNotif = true;
        this.mCatfiz.groupAcceptConference(group, new Callback() {
            public void onError() {
                Log.d(MenuActivity.TAG, "accept group failed");
            }

            public void onSuccess() {
                Log.d(MenuActivity.TAG, "accept group success = " + group.getName());
                ((NotificationFragment) MenuActivity.this.mFragment).updateData();
            }
        });
    }

    public void addFriend(String str) {
        this.mCatfiz.userRequestAddFriend(str, new Callback() {
            public void onError() {
                Log.d(MenuActivity.TAG, "Error add friend");
            }

            public void onSuccess() {
                AlbusUtils.setToastView(MenuActivity.this, MenuActivity.this.getString(R.string.df_pending_friend));
            }
        });
    }

    public void blockPendingfriend(String str, final String str2, Long l, int i) {
        this.mUpdateNotif = true;
        this.mCatfiz.userBlockFriend(str2, str, l, new Callback() {
            public void onError() {
                Log.d(MenuActivity.TAG, Extra.ERROR);
            }

            public void onSuccess() {
                Log.d(MenuActivity.TAG, "added to black list = " + str2);
                ((NotificationFragment) MenuActivity.this.mFragment).updateData();
                AlbusUtils.setToastView(MenuActivity.this, MenuActivity.this.getString(R.string.blacklist_alert));
            }
        });
    }

    public void collapseActionMenuSearch() {
        if (this.mSearchItem != null && MenuItemCompat.isActionViewExpanded(this.mSearchItem)) {
            MenuItemCompat.collapseActionView(this.mSearchItem);
        }
    }

    public void declineFriend(String str, final String str2, Long l, int i) {
        this.mUpdateNotif = true;
        this.mCatfiz.userDeclineFriend(str, new Callback() {
            public void onError() {
                Log.d(MenuActivity.TAG, Extra.ERROR);
            }

            public void onSuccess() {
                Log.d(MenuActivity.TAG, "decline friend success = " + str2);
                ((NotificationFragment) MenuActivity.this.mFragment).updateData();
            }
        });
    }

    public void fetchDataFriend(final String str) {
        if (str.equals(CatfishService.getUserPIN())) {
            this.mCatfiz.userFetchProfile(new UserFetchProfileCallback() {
                public void onData(User user) {
                    MenuActivity.this.startActivity(new Intent(MenuActivity.this, ProfilesActivity.class));
                }

                public void onError() {
                }

                public void onSuccess() {
                }
            });
        } else {
            this.mCatfiz.chatFetchActiveFriends(new PrivateFetchActiveFriendsCallback() {
                public void onData(List list) {
                    if (list.size() > 0) {
                        for (User user : list) {
                            if (user.getId().equals(str)) {
                                Intent intent = new Intent(MenuActivity.this, ProfilesFriendActivity.class);
                                intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, user.getId());
                                intent.putExtra(CatfishDataStorage.NIC_NAME, user.getName());
                                intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, user.getStatusSequence());
                                intent.putExtra(AlbusModelObject.STATUS_LIKE, user.getStatusLike());
                                intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, user.isMeLikeThisStatus());
                                intent.putExtra(HTTP.IDENTITY_CODING, 32);
                                MenuActivity.this.startActivity(intent);
                                return;
                            }
                        }
                    }
                }

                public void onError() {
                }

                public void onSuccess() {
                }
            });
        }
    }

    public int getIdentity() {
        return getIntent().getIntExtra(HTTP.IDENTITY_CODING, -1);
    }

    public boolean isEnterSearchMode() {
        return this.mIsSearchMode;
    }

    public void onBackPressed() {
        if (this.mPageFrag == 35) {
            setResult(-1);
            finish();
            return;
        }
        super.onBackPressed();
    }

    public void onCatfizStarted() {
    }

    public void onCatfizStopped() {
    }

    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        Log.d(TAG, "oncreate MenuActivity");
        this.mCatfiz = new Catfiz(this);
        setContentView((int) R.layout.activity_view);
        if (Utils.hasLollipop()) {
            setTaskDescription(new TaskDescription(null, null, getResources().getColor(R.color.red)));
            Window window = getWindow();
            window.clearFlags(67108864);
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.setStatusBarColor(getResources().getColor(R.color.red2));
        }
        this.mAb = getSupportActionBar();
        this.mAb.setDisplayHomeAsUpEnabled(true);
        Configuration configuration = getResources().getConfiguration();
        if (Utils.hasJellyBeanMR1() && configuration.getLayoutDirection() == 1) {
            this.mAb.setHomeAsUpIndicator((int) R.drawable.ic_back_light_reverse);
        } else {
            this.mAb.setHomeAsUpIndicator((int) R.drawable.ic_back_light);
        }
        this.mIntent = getIntent();
        this.mUser = new User();
        ((RelativeLayout) findViewById(R.id.rl_background)).setBackgroundColor(getResources().getColor(R.color.red));
        if (bundle == null) {
            this.mPageFrag = this.mIntent.getIntExtra(AlbusModelObject.PAGE, -1);
            FragmentTransaction beginTransaction = getSupportFragmentManager().beginTransaction();
            switch (this.mPageFrag) {
                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                    this.mFragment = QrcodeViewFragment.newInstance();
                    if (this.mIntent.getIntExtra(HTTP.IDENTITY_CODING, -1) != 4) {
                        this.mAb.setTitle(getString(R.string.own_qr_title));
                        break;
                    }
                    String stringExtra = this.mIntent.getStringExtra(CatfishDataStorage.NIC_NAME);
                    if (!AlbusUtils.isLocale("en")) {
                        this.mAb.setTitle(stringExtra + " " + getString(R.string.qr));
                        break;
                    } else {
                        this.mAb.setTitle(stringExtra + "'s " + getString(R.string.qr));
                        break;
                    }
                case PinManagerV2.REGCODE_MAX /*12*/:
                    this.mAb.setTitle((CharSequence) "");
                    this.mFragment = GroupMemberFragment.newInstance();
                    break;
                case R.styleable.Theme_actionMenuTextAppearance /*25*/:
                case R.styleable.Theme_dropdownListPreferredItemHeight /*46*/:
                    this.mFragment = AboutFragment.newInstance();
                    this.mAb.setTitle(getString(R.string.about));
                    break;
                case HTTP.SP /*32*/:
                    Bundle bundle2 = new Bundle();
                    bundle2.putString(CatfishRESTAPI.CFCOMPACT_STICKERID, getIntent().getStringExtra(CatfishRESTAPI.CFCOMPACT_STICKERID));
                    bundle2.putString(HTTP.IDENTITY_CODING, getIntent().getStringExtra(HTTP.IDENTITY_CODING));
                    bundle2.putLong(AlbusModelObject.STATUS_SEQUENCE, getIntent().getLongExtra(AlbusModelObject.STATUS_SEQUENCE, 0));
                    bundle2.putInt(AlbusModelObject.ME_LIKE_STATUS, getIntent().getIntExtra(AlbusModelObject.ME_LIKE_STATUS, -1));
                    this.mFragment = WhoIsLikeFragment.newInstance(bundle2);
                    this.mAb.setTitle(getString(R.string.wholike));
                    break;
                case R.styleable.Theme_actionModeSelectAllDrawable /*35*/:
                    this.mAb.setTitle(getString(R.string.notif));
                    this.mFragment = NotificationFragment.newInstance();
                    break;
            }
            beginTransaction.replace(R.id.fl_view, this.mFragment);
            beginTransaction.commit();
        }
    }

    public boolean onCreateOptionsMenu(Menu menu) {
        if (this.mPageFrag == 12) {
            getMenuInflater().inflate(R.menu.actionbar_menu_activity, menu);
            this.mSearchItem = menu.findItem(R.id.search_friend);
            View actionView = MenuItemCompat.getActionView(this.mSearchItem);
            ImageButton imageButton = (ImageButton) actionView.findViewById(R.id.ib_clear);
            this.mEtSearch = (EditText) actionView.findViewById(R.id.txt_search);
            this.mEtSearch.addTextChangedListener(new TextWatcher() {
                public void afterTextChanged(Editable editable) {
                }

                public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                }

                public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                    String obj = MenuActivity.this.mEtSearch.getText().toString();
                    boolean z = i3 == 0 || i2 > i3;
                    if (MenuActivity.this.mPageFrag == 12) {
                        ((GroupMemberFragment) MenuActivity.this.mFragment).limitListView(obj, z);
                    }
                }
            });
            MenuItemCompat.setOnActionExpandListener(this.mSearchItem, new OnActionExpandListener() {
                public boolean onMenuItemActionCollapse(MenuItem menuItem) {
                    ((InputMethodManager) MenuActivity.this.getSystemService("input_method")).hideSoftInputFromWindow(MenuActivity.this.mEtSearch.getWindowToken(), 0);
                    if (MenuActivity.this.mPageFrag == 12) {
                        ((GroupMemberFragment) MenuActivity.this.mFragment).leaveSearchMode();
                    }
                    MenuActivity.this.mIsSearchMode = false;
                    return true;
                }

                public boolean onMenuItemActionExpand(MenuItem menuItem) {
                    MenuActivity.this.mEtSearch.requestFocus();
                    ((InputMethodManager) MenuActivity.this.getSystemService("input_method")).toggleSoftInput(1, 0);
                    MenuActivity.this.mEtSearch.requestFocus();
                    MenuActivity.this.mEtSearch.setText("");
                    if (MenuActivity.this.mPageFrag == 12) {
                        ((GroupMemberFragment) MenuActivity.this.mFragment).enterSearchMode();
                    }
                    MenuActivity.this.mIsSearchMode = true;
                    return true;
                }
            });
            if (this.mPageFrag == 12) {
                MenuItemCompat.expandActionView(this.mSearchItem);
            }
            imageButton.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    MenuActivity.this.mEtSearch.setText("");
                }
            });
        }
        return true;
    }

    public void onDestroy() {
        super.onDestroy();
        this.mCatfiz.destroy();
    }

    public boolean onOptionsItemSelected(MenuItem menuItem) {
        switch (menuItem.getItemId()) {
            case 16908332:
                if (this.mUpdateNotif) {
                    setResult(-1);
                }
                finish();
                return true;
            case R.id.block_nic:
                return true;
            default:
                return super.onOptionsItemSelected(menuItem);
        }
    }

    protected void onPause() {
        super.onPause();
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    public void onStop() {
        super.onStop();
        this.mCatfiz.finish();
    }

    public void rejectGroup(final Group group, int i) {
        this.mUpdateNotif = true;
        this.mCatfiz.leaveGroup(group.getGroupID(), new OnGroupDeleted() {
            public void onError() {
                Log.d(MenuActivity.TAG, "reject group failed");
            }

            public void onSuccess() {
                ((NotificationFragment) MenuActivity.this.mFragment).updateData();
            }

            public void onSuccess(String str) {
                Log.d(MenuActivity.TAG, "reject group success = " + group.getName());
                AlbusUtils.setToastView(MenuActivity.this, MenuActivity.this.getString(R.string.group_reject));
                ((NotificationFragment) MenuActivity.this.mFragment).updateData();
            }
        });
    }

    public void removeGroupMember(Group group, final User user) {
        this.mCatfiz.groupDeleteConferenceMember(group, user, new Callback() {
            public void onError() {
                Log.d(MenuActivity.TAG, "Error removeGroupMember");
            }

            public void onSuccess() {
                AlbusUtils.setToastView(MenuActivity.this, MenuActivity.this.getString(R.string.remove_member).replace("[member]", "" + user.getName()));
                if (MenuActivity.this.mPageFrag == 12) {
                    ((GroupMemberFragment) MenuActivity.this.mFragment).getAllData();
                }
            }
        });
    }
}
