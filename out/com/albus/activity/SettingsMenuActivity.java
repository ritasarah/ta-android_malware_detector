package com.albus.activity;

import android.app.ActivityManager.TaskDescription;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Configuration;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.Window;
import android.widget.EditText;
import android.widget.RelativeLayout;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.AlbusDialog.OnActionClickListener;
import com.albus.dialog.AlbusDialogInterface;
import com.albus.ecash.SettingECashFragment;
import com.albus.fragment.AccountSettingFragment;
import com.albus.fragment.BlacklistFragment;
import com.albus.fragment.SettingChatGroupFragment;
import com.albus.fragment.SettingNotifFragment;
import com.albus.fragment.SettingUpdateFragment;
import com.albus.util.AlbusModelObject;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.signal.Signal;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.LangUtils;

public class SettingsMenuActivity extends ActionBarActivity implements ICatfiz {
    private static final String TAG = "SettingsMenuActivity";
    private ActionBar mAb = null;
    private Catfiz mCatfiz = null;
    private Fragment mFragment = null;
    private Intent mIntent = null;
    private int mPageFrag = -1;
    private boolean mUnblock = false;

    class BlockByNicDialog implements AlbusDialogInterface {
        private BlockByNicDialog() {
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, final DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            final EditText editText = (EditText) view.findViewById(R.id.et_value);
            Log.d(SettingsMenuActivity.TAG, "on dialog block nic");
            AlbusDialog.setOnActionClickListener(20, new OnActionClickListener() {
                public void onActionNoListener() {
                    Log.d(SettingsMenuActivity.TAG, "dialog no button");
                    dialogFragment.dismiss();
                }

                public void onActionYesListener() {
                    Log.d(SettingsMenuActivity.TAG, "dialog yes button");
                    SettingsMenuActivity.this.mCatfiz.userBlockByNIC(editText.getText().toString(), new Callback() {
                        public void onError() {
                            Log.d(SettingsMenuActivity.TAG, Extra.ERROR);
                        }

                        public void onSuccess() {
                            Log.d(SettingsMenuActivity.TAG, "success block");
                            ((BlacklistFragment) SettingsMenuActivity.this.mFragment).refreshData();
                        }
                    });
                    dialogFragment.dismiss();
                }
            });
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    public void SetActionBar(String str) {
        this.mAb.setTitle((CharSequence) str);
    }

    public void SetGender(String str) {
        ((AccountSettingFragment) this.mFragment).setGender(str);
    }

    public void Unblock(String str) {
        Log.d(TAG, "friend id which is blocked = " + str);
        this.mCatfiz.userUnblock(str, new Callback() {
            public void onError() {
                Log.d(SettingsMenuActivity.TAG, "unblock friend error");
            }

            public void onSuccess() {
                Log.d(SettingsMenuActivity.TAG, "unblock friend success");
                ((BlacklistFragment) SettingsMenuActivity.this.mFragment).getAllData();
                SettingsMenuActivity.this.mUnblock = true;
            }
        });
    }

    public int getIdentity() {
        return getIntent().getIntExtra(HTTP.IDENTITY_CODING, -1);
    }

    public void onBackPressed() {
        super.onBackPressed();
    }

    public void onCatfizStarted() {
    }

    public void onCatfizStopped() {
    }

    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        setContentView((int) R.layout.activity_view);
        this.mCatfiz = new Catfiz(this, this);
        if (Utils.hasLollipop()) {
            setTaskDescription(new TaskDescription(null, null, getResources().getColor(R.color.red)));
            Window window = getWindow();
            window.clearFlags(67108864);
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.setStatusBarColor(getResources().getColor(R.color.red2));
        }
        this.mAb = getSupportActionBar();
        this.mAb.setDisplayHomeAsUpEnabled(true);
        Configuration configuration = getResources().getConfiguration();
        if (Utils.hasJellyBeanMR1() && configuration.getLayoutDirection() == 1) {
            this.mAb.setHomeAsUpIndicator((int) R.drawable.ic_back_light_reverse);
        } else {
            this.mAb.setHomeAsUpIndicator((int) R.drawable.ic_back_light);
        }
        ((RelativeLayout) findViewById(R.id.rl_background)).setBackgroundColor(getResources().getColor(R.color.red));
        this.mIntent = getIntent();
        this.mPageFrag = this.mIntent.getIntExtra(AlbusModelObject.PAGE, -1);
        FragmentTransaction beginTransaction = getSupportFragmentManager().beginTransaction();
        switch (this.mPageFrag) {
            case e.a /*0*/:
                this.mAb.setTitle(getString(R.string.updates));
                this.mFragment = SettingUpdateFragment.newInstance();
                break;
            case HTTP.CR /*13*/:
                this.mFragment = AccountSettingFragment.newInstance();
                this.mAb.setTitle(getString(R.string.account_title));
                break;
            case LangUtils.HASH_SEED /*17*/:
                this.mFragment = SettingNotifFragment.newInstance();
                this.mAb.setTitle(getString(R.string.notif));
                break;
            case R.styleable.Toolbar_navigationContentDescription /*21*/:
                this.mAb.setTitle(getString(R.string.blacklist));
                this.mFragment = BlacklistFragment.newInstance();
                break;
            case R.styleable.Theme_listDividerAlertDialog /*44*/:
                this.mAb.setTitle(getString(R.string.account_cash));
                this.mFragment = SettingECashFragment.newInstance();
                break;
            case R.styleable.Theme_actionDropDownStyle /*45*/:
                this.mAb.setTitle(getString(R.string.chatgroup));
                this.mFragment = SettingChatGroupFragment.newInstance();
                break;
        }
        beginTransaction.commit();
        beginTransaction.replace(R.id.fl_view, this.mFragment);
    }

    public boolean onCreateOptionsMenu(Menu menu) {
        if (this.mPageFrag == 21) {
            getMenuInflater().inflate(R.menu.actionbar_block, menu);
        }
        return super.onCreateOptionsMenu(menu);
    }

    public boolean onOptionsItemSelected(MenuItem menuItem) {
        switch (menuItem.getItemId()) {
            case 16908332:
                finish();
                if (this.mPageFrag != 21 || !this.mUnblock) {
                    return true;
                }
                startActivity(new Intent(this, FriendsActivity.class).setFlags(335544320));
                return true;
            case R.id.block_nic:
                Bundle bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 20);
                AlbusDialog.showDialog(20, new BlockByNicDialog(), this, bundle, getSupportFragmentManager());
                return true;
            default:
                return super.onOptionsItemSelected(menuItem);
        }
    }

    protected void onPause() {
        super.onPause();
    }

    public void onRegisterProgress() {
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }
}
