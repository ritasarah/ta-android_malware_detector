package com.albus.activity;

import android.app.Activity;
import android.app.ActivityManager.TaskDescription;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.Intent.ShortcutIconResource;
import android.content.res.Configuration;
import android.net.Uri;
import android.os.Bundle;
import android.os.Parcelable;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.app.NavUtils;
import android.support.v4.content.LocalBroadcastManager;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.util.TypedValue;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.AlbusDialog.OnAddButtonListener;
import com.albus.dialog.AlbusDialogInterface;
import com.albus.dialog.DialogUI;
import com.albus.fragment.ChatConvListFragment;
import com.albus.fragment.GroupConvListFragment;
import com.albus.imagespan.SmiledText;
import com.albus.media.ImageCache;
import com.albus.media.ImageCache.ImageCacheParams;
import com.albus.media.ThumbnailLoader;
import com.albus.media.UserPhotoLoader;
import com.albus.util.AlbusAudioPlayer;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.util.LongMessageCache;
import com.albus.util.LongMessageCache.LongMessageCacheParams;
import com.albus.util.LongMessageWorker;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Callback.FetchFriendCallback;
import com.catfiz.base.Callback.FetchGroupCallback;
import com.catfiz.base.Callback.IsGroupMute;
import com.catfiz.base.Callback.OnGroupDeleted;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.intents.BroadcastIntents;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.model.Fizzlink;
import com.catfiz.model.Group;
import com.catfiz.model.Message;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.CatfishService;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.signal.Signal;
import com.catfiz.util.Log;
import com.catfiz.util.MimeTypeParser;
import com.catfiz.util.Utils;
import java.io.File;
import java.lang.ref.WeakReference;
import java.util.Locale;
import org.apache.http.protocol.HTTP;

public class ChatGroupConvActivity extends ActionBarActivity implements ICatfiz {
    private static final String EXTRA_SHORTCUT_DUPLICATE = "duplicate";
    private static final String TAG = "ChatGroupConvActivity";
    private AlbusAudioPlayer mAudioPlayer = null;
    private Catfiz mCatfiz = null;
    private ChatConvListFragment mChatFrag = null;
    private String mFriendName = "";
    private Group mGroup = null;
    private GroupConvListFragment mGroupFrag = null;
    private Intent mIntent = null;
    private boolean mIsMute = false;
    private boolean mIsNodata = true;
    private LongMessageWorker mLongMessageWorker = null;
    private int mPageFragment = -1;
    private ThumbnailLoader mThumbnailLoader = null;
    private User mUser = null;
    private UserPhotoLoader mUserPhotoLoader = null;

    /* synthetic */ class AnonymousClass11 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType = new int[MessageType.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.PERSONCONTACT.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
        }
    }

    class GotoGroupProfileCb implements FetchGroupCallback {
        private int mPage = -1;
        private WeakReference mThisActivityRef;

        public GotoGroupProfileCb(Activity activity, int i) {
            this.mThisActivityRef = new WeakReference(activity);
            this.mPage = i;
        }

        public void onData(Group group, String str) {
            ChatGroupConvActivity chatGroupConvActivity = (ChatGroupConvActivity) this.mThisActivityRef.get();
            if (chatGroupConvActivity != null && group != null) {
                Intent intent = new Intent(chatGroupConvActivity, ProfilesGroupActivity.class);
                intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, group.getGroupID());
                intent.putExtra(CatfishDataStorage.NIC_NAME, group.getName());
                intent.putExtra(AlbusModelObject.NOTES, group.getNotes());
                intent.putExtra(AlbusModelObject.OWNER, group.getOwner().getId());
                intent.putExtra(AlbusModelObject.IMAGE, group.getImagePath());
                intent.putExtra(HTTP.IDENTITY_CODING, this.mPage);
                ChatGroupConvActivity.this.startActivity(intent);
            }
        }

        public void onError() {
            Log.e(ChatGroupConvActivity.TAG, "Fail Go to group profile");
        }

        public void onSuccess() {
        }
    }

    class GotoUserProfileCb implements FetchFriendCallback {
        private User mIncompleteUser = null;
        private WeakReference mThisActivityRef;

        public GotoUserProfileCb(Activity activity, User user) {
            this.mThisActivityRef = new WeakReference(activity);
            this.mIncompleteUser = user;
        }

        public void onData(User user, String str) {
            ChatGroupConvActivity chatGroupConvActivity = (ChatGroupConvActivity) this.mThisActivityRef.get();
            if (chatGroupConvActivity != null) {
                if (user != null) {
                    Log.d(ChatGroupConvActivity.TAG, "FRIEND: " + str);
                    Intent intent = new Intent(chatGroupConvActivity, ProfilesFriendActivity.class);
                    intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, user.getId());
                    intent.putExtra(CatfishDataStorage.NIC_NAME, user.getName());
                    intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, user.getStatusSequence());
                    intent.putExtra(AlbusModelObject.STATUS_LIKE, user.getStatusLike());
                    intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, user.isMeLikeThisStatus());
                    chatGroupConvActivity.startActivity(intent);
                    return;
                }
                Log.d(ChatGroupConvActivity.TAG, "NOT A FRIEND: " + str);
                Bundle bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 33);
                AlbusDialog.showDialog(33, new chatDialog(this.mIncompleteUser, null), chatGroupConvActivity, bundle, chatGroupConvActivity.getSupportFragmentManager());
            }
        }

        public void onError() {
            Log.e(ChatGroupConvActivity.TAG, "Fail Go to user profile");
        }

        public void onSuccess() {
        }
    }

    class PromoteHandleCb implements FetchFriendCallback {
        private User mIncompleteUser = null;
        private WeakReference mThisActivityRef;

        public PromoteHandleCb(Activity activity, User user) {
            this.mThisActivityRef = new WeakReference(activity);
            this.mIncompleteUser = user;
        }

        public void onData(User user, String str) {
            ChatGroupConvActivity chatGroupConvActivity = (ChatGroupConvActivity) this.mThisActivityRef.get();
            if (chatGroupConvActivity != null) {
                Bundle bundle;
                if (user != null) {
                    Log.d(ChatGroupConvActivity.TAG, "Friend: " + str);
                    bundle = new Bundle();
                    bundle.putInt(AlbusModelObject.DIALOG, 35);
                    bundle.putString(CatfishDataStorage.NIC_NAME, user.getName());
                    bundle.putString(AlbusModelObject.FRIEND_ID, user.getId());
                    AlbusDialog.showDialog(35, new DialogUI().getDialogInterface(), chatGroupConvActivity, bundle, chatGroupConvActivity.getSupportFragmentManager());
                    return;
                }
                Log.d(ChatGroupConvActivity.TAG, "Not friend");
                bundle = new Bundle();
                bundle.putString(CatfishDataStorage.NIC_NAME, this.mIncompleteUser.getName());
                bundle.putString(CatfishRESTAPI.CFCOMPACT_STICKERID, this.mIncompleteUser.getId());
                bundle.putInt(AlbusModelObject.DIALOG, 9);
                AlbusDialog.showDialog(9, new chatDialog(this.mIncompleteUser, null), chatGroupConvActivity, bundle, chatGroupConvActivity.getSupportFragmentManager());
            }
        }

        public void onError() {
            Log.e(ChatGroupConvActivity.TAG, "Fail promote handle");
        }

        public void onSuccess() {
        }
    }

    class chatDialog implements AlbusDialogInterface {
        private String mFilePath = null;
        private User mUser = null;

        public chatDialog(User user, String str) {
            this.mUser = user;
            this.mFilePath = str;
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, final DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            switch (i) {
                case HTTP.HT /*9*/:
                    AlbusDialog.setOnAddButtonClicked(new OnAddButtonListener() {
                        public void onAddButtonClicked(String str) {
                            ChatGroupConvActivity.this.addFriend(str);
                        }
                    });
                    return;
                case R.styleable.Theme_actionModeCopyDrawable /*33*/:
                    TextView textView = (TextView) view.findViewById(R.id.tv_menu_profile);
                    TextView textView2 = (TextView) view.findViewById(R.id.tv_menu_chat);
                    TextView textView3 = (TextView) view.findViewById(R.id.tv_menu_remove_member);
                    TextView textView4 = (TextView) view.findViewById(R.id.tv_menu_set_admin);
                    ((TextView) view.findViewById(R.id.tv_menu_title)).setText(this.mUser.getName());
                    textView.setText(context.getResources().getString(R.string.menu_add_friend));
                    textView2.setVisibility(8);
                    textView3.setVisibility(8);
                    textView4.setVisibility(8);
                    textView.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment.dismiss();
                            ChatGroupConvActivity.this.requestAddFriend(chatDialog.this.mUser.getId());
                        }
                    });
                    return;
                case R.styleable.Theme_borderlessButtonStyle /*54*/:
                    ((Button) view.findViewById(R.id.btn_action)).setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment.dismiss();
                            ChatGroupConvActivity.this.launchFizzlinkActivity(chatDialog.this.mFilePath);
                        }
                    });
                    return;
                default:
                    return;
            }
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    private void addShortcut() {
        if (this.mUser == null) {
            AlbusUtils.setToastView(this, getString(R.string.cannot_create_shortcut));
        } else if (this.mUser.getId() == null) {
            AlbusUtils.setToastView(this, getString(R.string.cannot_create_shortcut));
        } else if (this.mUser.getId().isEmpty()) {
            AlbusUtils.setToastView(this, getString(R.string.cannot_create_shortcut));
        } else {
            Parcelable friendProfilePhotoBitmapOnly;
            Parcelable intent = new Intent(this, ShortcutManagerActivity.class);
            intent.putExtra(AlbusModelObject.PAGE, 1);
            intent.putExtra(CatfishDataStorage.NIC_NAME, this.mUser.getName());
            intent.putExtra(AlbusModelObject.FRIEND_ID, this.mUser.getId());
            try {
                friendProfilePhotoBitmapOnly = CatfishPhotoStorage.getFriendProfilePhotoBitmapOnly((Context) this, this.mUser.getId(), TypedValue.applyDimension(1, 40.0f, getResources().getDisplayMetrics()));
            } catch (Exception e) {
                e.printStackTrace();
                friendProfilePhotoBitmapOnly = null;
            }
            Intent intent2 = new Intent();
            intent2.putExtra("android.intent.extra.shortcut.INTENT", intent);
            intent2.putExtra("android.intent.extra.shortcut.NAME", this.mFriendName);
            intent2.putExtra(EXTRA_SHORTCUT_DUPLICATE, false);
            if (friendProfilePhotoBitmapOnly != null) {
                intent2.putExtra("android.intent.extra.shortcut.ICON", friendProfilePhotoBitmapOnly);
            } else {
                intent2.putExtra("android.intent.extra.shortcut.ICON_RESOURCE", ShortcutIconResource.fromContext(getApplicationContext(), R.drawable.ic_app));
            }
            intent2.setAction("com.android.launcher.action.INSTALL_SHORTCUT");
            getApplicationContext().sendBroadcast(intent2);
        }
    }

    private void launchFizzlinkActivity(String str) {
        Intent intent = new Intent(this, FizzlinkActivity.class);
        intent.putExtra(AlbusModelObject.INTENT_FLPATH, str);
        if (this.mUser != null) {
            intent.putExtra(AlbusModelObject.INTENT_ROOM, this.mUser.getName());
        } else if (this.mGroup != null) {
            intent.putExtra(AlbusModelObject.INTENT_ROOM, this.mGroup.getName());
        }
        startActivity(intent);
    }

    private void muteHandle(boolean z) {
        if (!z) {
            AlbusUtils.setToastView(this, getString(R.string.group_mute_fail));
        } else if (this.mIsMute) {
            AlbusUtils.setToastView(this, getString(R.string.mute_on));
        } else {
            AlbusUtils.setToastView(this, getString(R.string.mute_off));
        }
    }

    private void populateMetaInfo(Bundle bundle) {
        this.mUser = null;
        this.mGroup = null;
        if (bundle != null) {
            this.mPageFragment = bundle.getInt(AlbusModelObject.PAGE, -1);
            this.mFriendName = bundle.getString(CatfishDataStorage.NIC_NAME);
            if (this.mPageFragment == 1) {
                this.mUser = new User(this.mIntent.getStringExtra(AlbusModelObject.FRIEND_ID).toUpperCase(Locale.US));
                this.mUser.setName(this.mFriendName);
            } else if (this.mPageFragment == 2) {
                this.mGroup = new Group(bundle.getString(CatfishRESTAPI.CFCOMPACT_STICKERID).toUpperCase(Locale.US));
                this.mGroup.setName(this.mFriendName);
            }
            Log.d(TAG, "Extract metadata from savedInstanceState done.");
        } else if (this.mIntent == null) {
            Log.e(TAG, "Activity has no Intent.");
        } else {
            this.mFriendName = this.mIntent.getStringExtra(CatfishDataStorage.NIC_NAME);
            if (this.mPageFragment == 1) {
                this.mUser = new User(this.mIntent.getStringExtra(AlbusModelObject.FRIEND_ID));
                this.mUser.setName(this.mFriendName);
            } else if (this.mPageFragment == 2) {
                this.mGroup = new Group(this.mIntent.getStringExtra(CatfishRESTAPI.CFCOMPACT_STICKERID));
                this.mGroup.setName(this.mFriendName);
            }
        }
    }

    public void addFriend(String str) {
        this.mCatfiz.userRequestAddFriend(str, new Callback() {
            public void onError() {
                Log.d(ChatGroupConvActivity.TAG, "Error add friend");
            }

            public void onSuccess() {
                AlbusUtils.setToastView(ChatGroupConvActivity.this, ChatGroupConvActivity.this.getString(R.string.df_pending_friend));
            }
        });
    }

    public void backToHome(int i) {
        Intent parentActivityIntent = NavUtils.getParentActivityIntent(this);
        parentActivityIntent.putExtra(AlbusModelObject.PAGE, i);
        parentActivityIntent.putExtra(AlbusModelObject.DROP_GROUP, true);
        parentActivityIntent.setFlags(603979776);
        NavUtils.navigateUpTo(this, parentActivityIntent);
    }

    public void cancelFizzlink(long j, String str) {
        if (this.mPageFragment == 1) {
            this.mChatFrag.cancelFizzlink(j, str);
        } else {
            this.mGroupFrag.cancelFizzlink(j, str);
        }
    }

    public void clearGroupChats() {
        this.mCatfiz.groupClearConferenceMessages(this.mGroup.getGroupID(), new Callback() {
            public void onError() {
            }

            public void onSuccess() {
                ChatGroupConvActivity.this.mGroupFrag.getAllData(true);
            }
        });
    }

    public void clearUserChat() {
        this.mCatfiz.chatDeleteConversation(this.mUser.getId(), new Callback() {
            public void onError() {
            }

            public void onSuccess() {
                ChatGroupConvActivity.this.backToHome(1);
            }
        });
    }

    public void dismissKeyboard(View view) {
        ((InputMethodManager) getSystemService("input_method")).hideSoftInputFromWindow(view.getWindowToken(), 0);
    }

    public void downloadConferenceFile(Message message) {
        this.mCatfiz.groupDownloadConferenceFile(this.mGroup, message, new Callback() {
            public void onError() {
                Log.d(ChatGroupConvActivity.TAG, "onError() downloadConferenceFile");
            }

            public void onSuccess() {
                Log.d(ChatGroupConvActivity.TAG, "onSuccess() downloadConferenceFile");
            }
        });
    }

    public void downloadFizzlink(Message message) {
        if (this.mPageFragment == 1) {
            this.mChatFrag.downloadFizzlink(message);
        } else {
            this.mGroupFrag.downloadFizzlink(message);
        }
    }

    public void dropGroup() {
        this.mCatfiz.dropGroup(this.mGroup.getGroupID(), new OnGroupDeleted() {
            public void onError() {
            }

            public void onSuccess() {
                AlbusUtils.setToastView(ChatGroupConvActivity.this, ChatGroupConvActivity.this.getString(R.string.you_del_group));
                ChatGroupConvActivity.this.backToHome(2);
            }

            public void onSuccess(String str) {
            }
        });
    }

    public void finishActionMode() {
        if (this.mPageFragment == 1) {
            this.mChatFrag.finishMultiSelect();
        } else {
            this.mGroupFrag.finishMultiSelect();
        }
    }

    public AlbusAudioPlayer getAudioPlayer() {
        return this.mAudioPlayer;
    }

    public ChatConvListFragment getChatFragment() {
        return this.mChatFrag;
    }

    public String getChatId() {
        return this.mPageFragment == 1 ? this.mUser.getId() : this.mGroup.getGroupID();
    }

    public GroupConvListFragment getGroupFragment() {
        return this.mGroupFrag;
    }

    public LongMessageWorker getLongMessageWorker() {
        return this.mLongMessageWorker;
    }

    public ThumbnailLoader getThumbnailLoader() {
        return this.mThumbnailLoader;
    }

    public UserPhotoLoader getUserPhotoLoader() {
        return this.mUserPhotoLoader;
    }

    public void gotoGroupProfile(Group group, int i) {
        this.mCatfiz.fetchGroup(group.getGroupID(), new GotoGroupProfileCb(this, i));
    }

    public void gotoUserChat(User user) {
        Intent intent = new Intent(this, ChatGroupConvActivity.class);
        intent.putExtra(AlbusModelObject.PAGE, 1);
        intent.putExtra(HTTP.IDENTITY_CODING, 14);
        intent.putExtra(CatfishDataStorage.NIC_NAME, user.getName());
        intent.putExtra(AlbusModelObject.FRIEND_ID, user.getId());
        startActivity(intent);
    }

    public void gotoUserProfile(User user) {
        if (user.getId().equals(CatfishService.getUserPIN())) {
            startActivity(new Intent(this, ProfilesActivity.class));
        } else {
            this.mCatfiz.chatFetchFriend(user.getId(), new GotoUserProfileCb(this, user));
        }
    }

    public void handleFileMessage(Message message) {
        String filePath;
        if (message.getType() == MessageType.FIZZLINK_IMAGE.ordinal()) {
            filePath = message.getFizzlink().getFilePath();
        } else {
            filePath = message.getDataFilePath();
            if (filePath == null || filePath.isEmpty()) {
                filePath = message.getImageFilePath();
            }
        }
        if (filePath != null) {
            File file = new File(filePath);
            Uri fromFile = Uri.fromFile(file);
            if (fromFile != null) {
                String str = AlbusUtils.getmimetype(fromFile);
                Intent intent = new Intent("android.intent.action.VIEW");
                intent.setDataAndType(fromFile, str);
                try {
                    if (str.startsWith("image/")) {
                        Intent intent2 = new Intent(this, ProfilesImageViewerActivity.class);
                        intent2.putExtra(HTTP.IDENTITY_CODING, 19);
                        intent2.putExtra(AlbusModelObject.IMAGE, filePath);
                        intent2.putExtra(AlbusModelObject.SENDER_NAME, message.getSender().getName());
                        intent2.putExtra(AlbusModelObject.INTENT_ROOM, this.mFriendName);
                        intent2.putExtra(AlbusModelObject.FIZZMSG, Fizzlink.formatFromMessage(message));
                        intent2.putExtra(AlbusModelObject.SLINKURI, message.getSlink());
                        intent2.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, message.getSender().getId());
                        startActivityForResult(intent2, R.styleable.Theme_ratingBarStyle);
                    } else if (file.exists()) {
                        startActivityForResult(intent, R.styleable.Theme_radioButtonStyle);
                    } else {
                        Bundle bundle = new Bundle();
                        bundle.putInt(AlbusModelObject.DIALOG, 59);
                        AlbusDialog.showDialog(58, new DialogUI().getDialogInterface(), this, bundle, getSupportFragmentManager());
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public boolean isDataExists() {
        return !this.mIsNodata;
    }

    public void leaveGroup() {
        this.mCatfiz.leaveGroup(this.mGroup.getGroupID(), new OnGroupDeleted() {
            public void onError() {
            }

            public void onSuccess() {
                AlbusUtils.setToastView(ChatGroupConvActivity.this, ChatGroupConvActivity.this.getString(R.string.you_leave_group));
                ChatGroupConvActivity.this.backToHome(2);
            }

            public void onSuccess(String str) {
            }
        });
    }

    public void messageActionHandle(Message message) {
        switch (AnonymousClass11.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[message.getType()].ordinal()]) {
            case e.b /*1*/:
                String text = message.getText();
                Log.d(TAG, "msg text=" + text);
                String str = text.split(":")[0];
                text = text.substring(text.indexOf(":") + 1);
                User user = new User(str);
                user.setName(text);
                if (!user.getId().equals(CatfishService.getUserPIN())) {
                    this.mCatfiz.chatFetchFriend(user.getId(), new PromoteHandleCb(this, user));
                    return;
                }
                return;
            default:
                return;
        }
    }

    protected void onActivityResult(int i, int i2, Intent intent) {
        super.onActivityResult(i, i2, intent);
        Log.d(TAG, "onActivityResult(chatgroupviewactivity): " + i + " " + i2);
        if (i == 9) {
            try {
                this.mChatFrag.saveChatConv(intent);
            } catch (Exception e) {
                e.printStackTrace();
                Log.e(TAG, "FAIL TO SAVE CONV");
            }
        }
        if (i == 40) {
            long longExtra;
            String stringExtra;
            switch (i2) {
                case e.b /*1*/:
                    longExtra = intent.getLongExtra(AlbusModelObject.INTENT_IDSEQUENCE, 0);
                    stringExtra = intent.getStringExtra(AlbusModelObject.INTENT_FIZZLINK);
                    if (this.mPageFragment == 1) {
                        this.mChatFrag.downloadFizzlink(longExtra, stringExtra);
                        return;
                    } else {
                        this.mGroupFrag.downloadFizzlink(longExtra, stringExtra);
                        return;
                    }
                case e.c /*2*/:
                    longExtra = intent.getLongExtra(AlbusModelObject.INTENT_IDSEQUENCE, 0);
                    stringExtra = intent.getStringExtra(AlbusModelObject.INTENT_FIZZLINK);
                    if (this.mPageFragment == 1) {
                        this.mChatFrag.shareFizzlink(longExtra, stringExtra);
                        return;
                    } else {
                        this.mGroupFrag.shareFizzlink(longExtra, stringExtra);
                        return;
                    }
                default:
                    return;
            }
        }
    }

    public void onBackPressed() {
        Log.d(TAG, "on back pressed");
        if (this.mAudioPlayer != null && this.mAudioPlayer.getPlaying()) {
            this.mAudioPlayer.Stop();
        }
        if (this.mPageFragment == 1) {
            if (this.mIntent.getIntExtra(HTTP.IDENTITY_CODING, -1) == 4) {
                gotoUserProfile(this.mUser);
            } else if (this.mChatFrag.mHasNewMessage) {
                Log.d(TAG, "has new message");
                Intent intent = getIntent();
                intent.putExtra(AlbusModelObject.HAS_MESSAGE, this.mChatFrag.mHasNewMessage);
                setResult(-1, intent);
                finish();
            }
        }
        super.onBackPressed();
    }

    public void onCatfizStarted() {
    }

    public void onCatfizStopped() {
    }

    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        Log.d(TAG, "onCreate ChatGroupConvActivity");
        setContentView((int) R.layout.activity_view);
        if (Utils.hasLollipop()) {
            setTaskDescription(new TaskDescription(null, null, getResources().getColor(R.color.red)));
            Window window = getWindow();
            window.clearFlags(67108864);
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.setStatusBarColor(getResources().getColor(R.color.red2));
        }
        ActionBar supportActionBar = getSupportActionBar();
        supportActionBar.setElevation(0.0f);
        Configuration configuration = getResources().getConfiguration();
        if (Utils.hasJellyBeanMR1() && configuration.getLayoutDirection() == 1) {
            supportActionBar.setHomeAsUpIndicator((int) R.drawable.ic_back_light_reverse);
        } else {
            supportActionBar.setHomeAsUpIndicator((int) R.drawable.ic_back_light);
        }
        ((RelativeLayout) findViewById(R.id.rl_background)).setBackgroundColor(getResources().getColor(R.color.red));
        this.mCatfiz = new Catfiz(this, this);
        this.mIntent = getIntent();
        if (this.mIntent != null) {
            Log.d(TAG, "page is " + this.mIntent.getIntExtra(AlbusModelObject.PAGE, 0));
            this.mPageFragment = this.mIntent.getIntExtra(AlbusModelObject.PAGE, -1);
        }
        populateMetaInfo(bundle);
        if (supportActionBar != null) {
            supportActionBar.setDisplayShowTitleEnabled(false);
            supportActionBar.setDisplayShowCustomEnabled(true);
            View inflate = getLayoutInflater().inflate(R.layout.ab_chat_view, null);
            TextView textView = (TextView) inflate.findViewById(R.id.tv_title);
            textView.setText(SmiledText.getSmiledText((Context) this, this.mFriendName, textView));
            textView.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    if (ChatGroupConvActivity.this.mPageFragment == 1) {
                        ChatGroupConvActivity.this.gotoUserProfile(ChatGroupConvActivity.this.mUser);
                    } else {
                        ChatGroupConvActivity.this.gotoGroupProfile(ChatGroupConvActivity.this.mGroup, 2);
                    }
                }
            });
            supportActionBar.setCustomView(inflate);
        }
        LongMessageCacheParams longMessageCacheParams = new LongMessageCacheParams("");
        longMessageCacheParams.memCacheSize = (AccessibilityNodeInfoCompat.ACTION_DISMISS * Utils.getMemoryClass(this)) / 3;
        longMessageCacheParams.diskCacheEnabled = false;
        this.mLongMessageWorker = new LongMessageWorker(this);
        this.mLongMessageWorker.setLongMessageCache(LongMessageCache.findOrCreateCache((FragmentActivity) this, longMessageCacheParams));
        this.mLongMessageWorker.setLoadingMessage(getString(R.string.loading_message));
        ImageCacheParams imageCacheParams = new ImageCacheParams("");
        imageCacheParams.memCacheSize = (AccessibilityNodeInfoCompat.ACTION_DISMISS * Utils.getMemoryClass(this)) / 3;
        imageCacheParams.diskCacheEnabled = false;
        this.mThumbnailLoader = new ThumbnailLoader(this);
        this.mThumbnailLoader.setImageCache(ImageCache.findOrCreateCache((FragmentActivity) this, imageCacheParams));
        this.mUserPhotoLoader = new UserPhotoLoader(this, imageCacheParams);
        this.mAudioPlayer = new AlbusAudioPlayer();
        if (bundle == null) {
            FragmentTransaction beginTransaction = getSupportFragmentManager().beginTransaction();
            if (this.mPageFragment == 1) {
                Log.d(TAG, "on Chat ID: " + getChatId());
                this.mChatFrag = ChatConvListFragment.newInstance();
                beginTransaction.replace(R.id.fl_view, this.mChatFrag);
                beginTransaction.commit();
            } else if (this.mPageFragment == 2) {
                Log.d(TAG, "on Group Chat ID: " + getChatId());
                this.mGroupFrag = GroupConvListFragment.newInstance();
                beginTransaction.replace(R.id.fl_view, this.mGroupFrag);
                beginTransaction.commit();
            }
        } else if (this.mPageFragment == 1) {
            this.mChatFrag = (ChatConvListFragment) getSupportFragmentManager().findFragmentById(R.id.fl_view);
        } else if (this.mPageFragment == 2) {
            this.mGroupFrag = (GroupConvListFragment) getSupportFragmentManager().findFragmentById(R.id.fl_view);
        }
    }

    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.actionbar_chat_view, menu);
        final MenuItem findItem = menu.findItem(R.id.mute);
        if (this.mPageFragment == 2) {
            this.mCatfiz.isGroupNotifMute(this.mGroup.getGroupID(), new IsGroupMute() {
                public void onError() {
                }

                public void onGroupMute(boolean z) {
                    Log.d(ChatGroupConvActivity.TAG, "is group mute : " + z);
                    if (z) {
                        ChatGroupConvActivity.this.mIsMute = true;
                        findItem.setIcon(R.drawable.ic_muteon);
                        return;
                    }
                    findItem.setIcon(R.drawable.ic_muteoff);
                    ChatGroupConvActivity.this.mIsMute = false;
                }

                public void onSuccess() {
                }
            });
        } else {
            findItem.setVisible(false);
        }
        return super.onCreateOptionsMenu(menu);
    }

    public void onDestroy() {
        super.onDestroy();
        Log.d(TAG, "onDestroy");
        this.mCatfiz.destroy();
        this.mThumbnailLoader = null;
    }

    public boolean onKeyDown(int i, KeyEvent keyEvent) {
        Log.d(TAG, "onKeyDown:" + i);
        return (keyEvent.getAction() == 0 && i == 4) ? this.mPageFragment == 1 ? (this.mChatFrag == null || this.mChatFrag.mBottomBar == null || !this.mChatFrag.mBottomBar.closeAttachAndEmoPanel()) ? false : super.onKeyDown(i, keyEvent) : (this.mGroupFrag == null || this.mGroupFrag.mBottomBar == null || !this.mGroupFrag.mBottomBar.closeAttachAndEmoPanel()) ? false : super.onKeyDown(i, keyEvent) : false;
    }

    public boolean onOptionsItemSelected(MenuItem menuItem) {
        Bundle bundle;
        switch (menuItem.getItemId()) {
            case 16908332:
                int intExtra = this.mIntent.getIntExtra(HTTP.IDENTITY_CODING, -1);
                if (this.mPageFragment == 1 || this.mPageFragment == 2) {
                    if (intExtra == 4) {
                        gotoUserProfile(this.mUser);
                    }
                    finish();
                    break;
                }
            case R.id.shortcut:
                Log.d(TAG, "Chat shortcut");
                addShortcut();
                break;
            case R.id.save_chat:
                this.mChatFrag.saveConversation();
                break;
            case R.id.del_chat:
                bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 38);
                AlbusDialog.showDialog(38, new DialogUI().getDialogInterface(), this, bundle, getSupportFragmentManager());
                break;
            case R.id.mute:
                if (this.mPageFragment == 2) {
                    Log.d(TAG, "On Mute:" + this.mIsMute);
                    if (this.mIsMute) {
                        this.mIsMute = false;
                        menuItem.setIcon(R.drawable.ic_muteoff);
                    } else {
                        menuItem.setIcon(R.drawable.ic_muteon);
                        this.mIsMute = true;
                    }
                    this.mCatfiz.groupMuteNotif(this.mGroup.getGroupID(), this.mIsMute, new Callback() {
                        public void onError() {
                            ChatGroupConvActivity.this.muteHandle(false);
                        }

                        public void onSuccess() {
                            ChatGroupConvActivity.this.muteHandle(true);
                        }
                    });
                    break;
                }
                break;
            case R.id.save_group_chat:
                this.mGroupFrag.saveConversation();
                break;
            case R.id.leave:
                bundle = new Bundle();
                bundle.putInt(MimeTypeParser.TAG_TYPE, 1);
                bundle.putInt(AlbusModelObject.PAGE, 2);
                bundle.putInt(AlbusModelObject.DIALOG, 31);
                AlbusDialog.showDialog(31, new DialogUI().getDialogInterface(), this, bundle, getSupportFragmentManager());
                break;
            case R.id.drop:
                bundle = new Bundle();
                bundle.putInt(MimeTypeParser.TAG_TYPE, 0);
                bundle.putInt(AlbusModelObject.PAGE, 2);
                bundle.putInt(AlbusModelObject.DIALOG, 31);
                AlbusDialog.showDialog(31, new DialogUI().getDialogInterface(), this, bundle, getSupportFragmentManager());
                break;
            case R.id.invite:
                Intent intent = new Intent(this, CustomActionBarPageActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 11);
                intent.putExtra(HTTP.IDENTITY_CODING, 11);
                intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, this.mGroup.getGroupID());
                startActivity(intent);
                break;
            case R.id.clear:
                bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 19);
                AlbusDialog.showDialog(19, new DialogUI().getDialogInterface(), this, bundle, getSupportFragmentManager());
                break;
        }
        return true;
    }

    protected void onPause() {
        super.onPause();
        Log.d(TAG, "onPuse");
        if (this.mThumbnailLoader != null) {
            this.mThumbnailLoader.setExitTasksEarly(true);
        }
    }

    public boolean onPrepareOptionsMenu(Menu menu) {
        if (this.mPageFragment == 1) {
            menu.removeGroup(R.id.menu_group_view);
        } else {
            menu.removeGroup(R.id.menu_chat_view);
            Log.d(TAG, "on prepare options menu");
            MenuItem findItem = menu.findItem(R.id.drop);
            MenuItem findItem2 = menu.findItem(R.id.leave);
            MenuItem findItem3 = menu.findItem(R.id.invite);
            if (getChatId().split(":")[0].compareTo(this.mCatfiz.getUser().getId()) == 0) {
                findItem.setVisible(true);
                findItem2.setVisible(false);
                findItem3.setVisible(true);
            } else {
                findItem.setVisible(false);
                findItem2.setVisible(true);
                findItem3.setVisible(false);
            }
        }
        return super.onPrepareOptionsMenu(menu);
    }

    public void onRegisterProgress() {
    }

    protected void onRestoreInstanceState(Bundle bundle) {
        super.onRestoreInstanceState(bundle);
    }

    public void onResume() {
        super.onResume();
        Log.d(TAG, "onResume");
        this.mCatfiz.start();
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.start();
        }
        if (this.mThumbnailLoader != null) {
            this.mThumbnailLoader.setExitTasksEarly(false);
        }
    }

    protected void onSaveInstanceState(Bundle bundle) {
        super.onSaveInstanceState(bundle);
        if (bundle != null) {
            bundle.putInt(AlbusModelObject.PAGE, this.mPageFragment);
            bundle.putString(CatfishDataStorage.NIC_NAME, this.mFriendName);
            if (this.mUser != null) {
                bundle.putString(AlbusModelObject.FRIEND_ID, this.mUser.getId());
            }
            if (this.mGroup != null) {
                bundle.putString(CatfishRESTAPI.CFCOMPACT_STICKERID, this.mGroup.getGroupID());
            }
            Log.d(TAG, "Save metadata to instance state. done");
        }
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    protected void onStop() {
        super.onStop();
        Log.d(TAG, "onstop");
        this.mCatfiz.finish();
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.stop();
        }
    }

    public void refreshData() {
        if (this.mPageFragment == 1) {
            this.mChatFrag.refreshData();
        } else {
            this.mGroupFrag.refreshData();
        }
    }

    public void requestAddFriend(String str) {
        this.mCatfiz.userRequestAddFriend(str, new Callback() {
            public void onError() {
                Log.d(ChatGroupConvActivity.TAG, "Error add friend");
            }

            public void onSuccess() {
                Log.d(ChatGroupConvActivity.TAG, "Success add friend");
                AlbusUtils.setToastView(ChatGroupConvActivity.this, ChatGroupConvActivity.this.getString(R.string.df_pending_friend));
            }
        });
    }

    public void retryUploadMessage(Message message) {
        if (this.mPageFragment == 1) {
            this.mChatFrag.retryUploadMessage(message);
        } else {
            this.mGroupFrag.retryUploadMessage(message);
        }
    }

    public void selectAttachedPhotoByCamera() {
        if (this.mPageFragment == 1) {
            this.mChatFrag.selectAttachedPhotoByCamera();
        } else {
            this.mGroupFrag.selectAttachedPhotoByCamera();
        }
    }

    public void selectAttachedPhotoByFile() {
        if (this.mPageFragment == 1) {
            this.mChatFrag.selectAttachedPhotoByFile();
        } else {
            this.mGroupFrag.selectAttachedPhotoByFile();
        }
    }

    public void sendTypingDoneSignal() {
        if (this.mPageFragment == 1) {
            Intent intent = new Intent(BroadcastIntents.ACTION_USER_ONTYPING_DONE);
            intent.putExtra(FriendListDataStorage.FRIENDPIN, this.mUser.getId());
            LocalBroadcastManager.getInstance(this).sendBroadcast(intent);
        }
    }

    public void sendTypingSignal() {
        if (this.mPageFragment == 1) {
            Intent intent = new Intent(BroadcastIntents.ACTION_USER_ONTYPING);
            intent.putExtra(FriendListDataStorage.FRIENDPIN, this.mUser.getId());
            LocalBroadcastManager.getInstance(this).sendBroadcast(intent);
        }
    }

    public void setChatListSelection(int i) {
        if (this.mPageFragment == 1) {
            this.mChatFrag.setListSelection(i);
        } else {
            this.mGroupFrag.setListSelection(i);
        }
    }

    public void showItemLongClickDialog(Message message) {
        if (this.mPageFragment == 1) {
            this.mChatFrag.showItemLongClickDialog(message);
        } else {
            this.mGroupFrag.showItemLongClickDialog(message);
        }
    }

    public void showKeyboard(View view) {
        ((InputMethodManager) getSystemService("input_method")).toggleSoftInput(2, 0);
    }

    public void showLargeFileDivertionDialog(int i, String str) {
        Bundle bundle = new Bundle();
        bundle.putInt(AlbusModelObject.VALUE, i);
        bundle.putInt(AlbusModelObject.DIALOG, 54);
        AlbusDialog.showDialog(54, new chatDialog(null, str), this, bundle, getSupportFragmentManager());
    }

    public void stopAudioWhenScroll() {
        this.mChatFrag.checkIsScrolling();
    }

    public void streamThumbnailDownload(String str) {
        Log.d(TAG, "download thumbnail" + this.mPageFragment + ", " + 1);
        if (this.mPageFragment == 1) {
            Log.d(TAG, "download thumbnail");
            this.mChatFrag.streamThumbnailDownload(str);
            return;
        }
        this.mGroupFrag.streamThumbnailDownload(str);
    }
}
