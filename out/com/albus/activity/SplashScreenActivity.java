package com.albus.activity;

import android.app.ActivityManager.TaskDescription;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Handler;
import android.preference.PreferenceManager;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.view.Window;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.catfiz.R;
import com.catfiz.base.Catfiz;
import com.catfiz.base.Constant.ActivityAction;
import com.catfiz.base.Constant.RegistrationState;
import com.catfiz.base.ICatfiz.ICatfizActivityAction;
import com.catfiz.base.ICatfiz.ICatfizRegistration;
import com.catfiz.consts.CatfizMsgTypes;
import com.catfiz.signal.Signal;
import com.catfiz.signal.SignalBinderRegistration;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import org.apache.http.HttpStatus;
import org.apache.http.conn.routing.HttpRouteDirector;

public class SplashScreenActivity extends AppCompatActivity implements ICatfizActivityAction, ICatfizRegistration {
    private static final int REQUEST_MANDATORY = 100;
    private static final String TAG = "SplashScreenActivity";
    private static final String TWOHOURS_LASTSETTIME = "last_time_spalsh";
    private static Handler mHandler = new Handler();
    private final int SPLASH_DISPLAY_LONG = CatfizMsgTypes.NICSUBTYPE_PARTNER;
    private final int SPLASH_DISPLAY_SHORT = HttpStatus.SC_INTERNAL_SERVER_ERROR;
    private Catfiz mCatfiz = null;
    private int mNotificationID = 0;
    private boolean mPendingRequestPermission = false;
    private boolean mPermsGranted = false;

    /* synthetic */ class AnonymousClass3 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$base$Constant$ActivityAction = new int[ActivityAction.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$base$Constant$ActivityAction[ActivityAction.CHAT_MESSAGE.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$base$Constant$ActivityAction[ActivityAction.GROUPS_MESSAGE.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$base$Constant$ActivityAction[ActivityAction.GROUPS_DELETE.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$base$Constant$ActivityAction[ActivityAction.GROUPS_INVITATION.ordinal()] = 4;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$base$Constant$ActivityAction[ActivityAction.FRIENDS.ordinal()] = 5;
            } catch (NoSuchFieldError e5) {
            }
        }
    }

    private void initAndCheckRegistration() {
        this.mNotificationID = getIntent().getIntExtra(AlbusModelObject.NOTIFICATION_ID, 0);
        Log.d(TAG, "Intent Action = " + getIntent().getAction());
        RegistrationState registrationState = this.mCatfiz.getRegistrationState();
        if (registrationState == RegistrationState.COMPLETE || registrationState == RegistrationState.REGISTERED) {
            SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
            long j = defaultSharedPreferences.getLong(TWOHOURS_LASTSETTIME, 0);
            long currentTimeMillis = System.currentTimeMillis();
            if (currentTimeMillis - j < AlbusModelObject.TWO_HOURS) {
                defaultSharedPreferences.edit().putLong(TWOHOURS_LASTSETTIME, currentTimeMillis).commit();
                defaultSharedPreferences.edit().putInt(AlbusModelObject.PAGE_HOME, 1).commit();
                mHandler.postDelayed(new Runnable() {
                    public void run() {
                        SplashScreenActivity.this.startMainActivity();
                    }
                }, 500);
                return;
            }
            defaultSharedPreferences.edit().putLong(TWOHOURS_LASTSETTIME, currentTimeMillis).commit();
            mHandler.postDelayed(new Runnable() {
                public void run() {
                    SplashScreenActivity.this.startMainActivity();
                }
            }, 1000);
        } else if (registrationState == RegistrationState.WAITFORPROFILE) {
            Log.d(TAG, "WAIT FOR PROFILE TO COMPLETE");
            startActivity(new Intent(this, RegisterSettingProfileActivity.class));
            finish();
        } else {
            Log.d(TAG, "Checking Account");
            this.mCatfiz.checkAccount();
        }
    }

    private void onCreateFinal() {
        if (Utils.hasLollipop()) {
            setTaskDescription(new TaskDescription(null, null, getResources().getColor(R.color.red)));
            Window window = getWindow();
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.clearFlags(67108864);
            window.setStatusBarColor(getResources().getColor(R.color.black));
        }
        this.mCatfiz = new Catfiz(this, this, new SignalBinderRegistration());
    }

    private void requestMandatoryPermission() {
        Log.d(TAG, "--- requestReadExtStoragePermission ---");
        if (!ActivityCompat.shouldShowRequestPermissionRationale(this, "android.permission.READ_PHONE_STATE") && !ActivityCompat.shouldShowRequestPermissionRationale(this, "android.permission.READ_EXTERNAL_STORAGE") && !ActivityCompat.shouldShowRequestPermissionRationale(this, "android.permission.WRITE_EXTERNAL_STORAGE") && !ActivityCompat.shouldShowRequestPermissionRationale(this, "android.permission.CAMERA") && !ActivityCompat.shouldShowRequestPermissionRationale(this, "android.permission.RECORD_AUDIO")) {
            ActivityCompat.requestPermissions(this, new String[]{"android.permission.READ_PHONE_STATE", "android.permission.READ_EXTERNAL_STORAGE", "android.permission.WRITE_EXTERNAL_STORAGE", "android.permission.CAMERA", "android.permission.RECORD_AUDIO"}, REQUEST_MANDATORY);
        }
    }

    private void startIntroductionActivity() {
        Log.d(TAG, " --- startIntroductionActivity --- ");
        finish();
        startActivity(new Intent(this, IntroductionActivity.class));
    }

    private void startMainActivity() {
        Log.d(TAG, " --- startMainActivity --- ");
        PreferenceManager.getDefaultSharedPreferences(this).edit().putInt(AlbusModelObject.PAGE_HOME, 1).commit();
        Intent intent = new Intent(this, AlbusMainActivity.class);
        intent.setFlags(603979776);
        startActivity(intent);
        finish();
    }

    public void onCatfizAction(ActivityAction activityAction) {
        Intent intent;
        switch (AnonymousClass3.$SwitchMap$com$catfiz$base$Constant$ActivityAction[activityAction.ordinal()]) {
            case e.b /*1*/:
                startMainActivity();
                return;
            case e.c /*2*/:
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                PreferenceManager.getDefaultSharedPreferences(this).edit().putInt(AlbusModelObject.PAGE_HOME, 2).commit();
                intent = new Intent(this, AlbusMainActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 2);
                intent.setFlags(603979776);
                startActivity(intent);
                finish();
                return;
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
            case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                intent = new Intent(this, FriendsActivity.class);
                intent.setFlags(603979776);
                startActivity(intent);
                finish();
                return;
            default:
                return;
        }
    }

    public void onCatfizStarted() {
        Log.d(TAG, " --- onCatfizStarted --- ");
        initAndCheckRegistration();
    }

    public void onCatfizStopped() {
        Log.d(TAG, " --- onCatfizStopped --- ");
    }

    public void onCatfizUpgrade(int i, int i2) {
    }

    public void onCreate(Bundle bundle) {
        Log.d(TAG, " --- onCreate --- ");
        super.onCreate(bundle);
        setContentView((int) R.layout.activity_splash_screen);
        overridePendingTransition(0, 0);
        if (ContextCompat.checkSelfPermission(this, "android.permission.READ_PHONE_STATE") != 0) {
            Log.d(TAG, " --- REQPERM: REQUEST ALL PERMISSION --- ");
            requestMandatoryPermission();
            this.mPendingRequestPermission = true;
        }
        if (!this.mPendingRequestPermission) {
            Log.d(TAG, " --- REQPERM: ALL ARE GRANTED --- ");
            this.mPermsGranted = true;
            onCreateFinal();
        }
    }

    protected void onDestroy() {
        Log.d(TAG, " --- onDestroy --- ");
        super.onDestroy();
        if (this.mCatfiz != null) {
            this.mCatfiz.destroy();
        }
    }

    public void onRegisterProgress() {
        Log.d(TAG, " --- onRegisterProgress --- ");
        initAndCheckRegistration();
    }

    public void onRequestPermissionsResult(int i, String[] strArr, int[] iArr) {
        switch (i) {
            case REQUEST_MANDATORY /*100*/:
                if (AlbusUtils.verifyPermissions(iArr)) {
                    Log.d(TAG, "REQUEST_MANDATORY: GRANTED");
                    this.mPermsGranted = true;
                    this.mPendingRequestPermission = false;
                    onCreateFinal();
                    return;
                }
                Log.d(TAG, "REQUEST_MANDATORY: DENY");
                this.mPermsGranted = false;
                return;
            default:
                Log.d(TAG, "UNKNOWN REQUEST CODE");
                super.onRequestPermissionsResult(i, strArr, iArr);
                return;
        }
    }

    protected void onResume() {
        Log.d(TAG, " --- onResume --- ");
        super.onResume();
        if (!this.mPendingRequestPermission) {
            if (!this.mPermsGranted) {
                Log.e(TAG, "We don't have permission");
                finish();
            } else if (this.mCatfiz != null) {
                this.mCatfiz.start();
            }
        }
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    public void onSignalRegistrationComplete() {
    }

    public void onSignalRegistrationError() {
        Log.e(TAG, "ERROR: Registration Error. Please do something...");
    }

    public void onSignalUserNeedToLogin() {
        Log.d(TAG, "SIGNAL: User To Login");
        startIntroductionActivity();
    }

    public void onSignalUserNeedToUpgrade(String str) {
        Log.d(TAG, "Current PIN: " + str);
        Intent intent = new Intent(this, RegisterActivity.class);
        intent.putExtra(AlbusModelObject.PAGE, 7);
        startActivity(intent);
    }

    protected void onStop() {
        super.onStop();
        if (this.mCatfiz != null) {
            this.mCatfiz.finish();
        }
    }
}
