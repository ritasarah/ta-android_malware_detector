package com.albus.activity;

import android.app.ActivityManager.TaskDescription;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.preference.PreferenceManager;
import android.support.v4.app.DialogFragment;
import android.support.v4.view.ViewPager;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.text.Html;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.AnimationUtils;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.albus.adapter.ProfileImageViewerAdapter;
import com.albus.crop.Crop;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.AlbusDialogInterface;
import com.albus.dialog.DialogUI;
import com.albus.imagespan.SmiledText;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.util.FileUtils;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.gif.GifDrawable;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.media.ImageReScaler;
import com.catfiz.media.StorageDir;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishService;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.signal.Signal;
import com.catfiz.util.Log;
import com.catfiz.util.MediaFilePath;
import com.catfiz.util.Utils;
import java.io.Closeable;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.apache.http.HttpStatus;
import org.apache.http.protocol.HTTP;

public class ProfilesImageViewerActivity extends ActionBarActivity implements ICatfiz {
    public static final int MEDIA_TYPE_IMAGE = 1;
    protected static final String TAG = ProfilesImageViewerActivity.class.getSimpleName();
    private ActionBar mAb = null;
    private ProfileImageViewerAdapter mAdpater = null;
    private Catfiz mCatfiz = null;
    private String mConvRoom = "";
    private Uri mFileUri = null;
    private String mFizzMsg;
    private String mId = null;
    private int mIdent = -1;
    private Uri mImg = null;
    private Intent mIntent = null;
    private boolean mIsAbShow = true;
    private String mPicPath = null;
    private Uri mPpUri = null;
    private RelativeLayout mRlMenuBottom = null;
    private Runnable mRun = null;
    private String mSenderName = "";
    private boolean mShowActionbar = true;
    private String mSlinkUri;
    private TextView mTvConvName = null;
    private TextView mTvSenderName = null;
    private ViewPager mVp = null;

    class ImageViewerDialog implements AlbusDialogInterface {
        private ImageViewerDialog() {
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, final DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            switch (i) {
                case R.styleable.Theme_actionModePopupWindowStyle /*39*/:
                    TextView textView = (TextView) view.findViewById(R.id.tv_chooser1);
                    TextView textView2 = (TextView) view.findViewById(R.id.tv_chooser2);
                    TextView textView3 = (TextView) view.findViewById(R.id.tv_chooser3);
                    TextView textView4 = (TextView) view.findViewById(R.id.tv_chooser4);
                    TextView textView5 = (TextView) view.findViewById(R.id.tv_chooser5);
                    TextView textView6 = (TextView) view.findViewById(R.id.tv_chooser6);
                    TextView textView7 = (TextView) view.findViewById(R.id.tv_chooser8);
                    ((TextView) view.findViewById(R.id.tv_name)).setVisibility(8);
                    textView.setVisibility(8);
                    textView5.setVisibility(8);
                    textView3.setVisibility(8);
                    textView2.setVisibility(8);
                    textView4.setVisibility(8);
                    textView6.setVisibility(0);
                    textView7.setVisibility(0);
                    textView6.setText(ProfilesImageViewerActivity.this.getResources().getString(R.string.share_to_friends));
                    textView7.setText(ProfilesImageViewerActivity.this.getResources().getString(R.string.share_to_pools));
                    textView6.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment.dismiss();
                            if (ProfilesImageViewerActivity.this.mFizzMsg == null) {
                                Log.e(ProfilesImageViewerActivity.TAG, "ERROR: invalid fizzlink message");
                                return;
                            }
                            Intent intent = new Intent(ProfilesImageViewerActivity.this, CustomActionBarPageActivity.class);
                            intent.putExtra(AlbusModelObject.PAGE, 49);
                            intent.putExtra(HTTP.IDENTITY_CODING, 49);
                            intent.putExtra("android.intent.extra.TEXT", ProfilesImageViewerActivity.this.mFizzMsg);
                            intent.putExtra(ServerMessageDataStorage.SLINK, true);
                            intent.putExtra("slinkuri", ProfilesImageViewerActivity.this.mSlinkUri);
                            intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, ProfilesImageViewerActivity.this.mId);
                            ProfilesImageViewerActivity.this.startActivity(intent);
                        }
                    });
                    textView7.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment.dismiss();
                            if (ProfilesImageViewerActivity.this.mFizzMsg == null) {
                                Log.e(ProfilesImageViewerActivity.TAG, "ERROR: invalid fizzlink message");
                                return;
                            }
                            Intent intent = new Intent(ProfilesImageViewerActivity.this, CustomActionBarPageActivity.class);
                            intent.putExtra(AlbusModelObject.PAGE, 41);
                            intent.putExtra(HTTP.IDENTITY_CODING, 49);
                            intent.putExtra("android.intent.extra.TEXT", ProfilesImageViewerActivity.this.mFizzMsg);
                            intent.putExtra(ServerMessageDataStorage.SLINK, true);
                            intent.putExtra("slinkuri", ProfilesImageViewerActivity.this.mSlinkUri);
                            ProfilesImageViewerActivity.this.startActivity(intent);
                        }
                    });
                    return;
                default:
                    return;
            }
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    private void beginCrop(Uri uri) {
        new Crop(uri).output(this.mIdent == 5 ? Uri.fromFile(new File(getCacheDir(), AlbusModelObject.CACHE_CROP_GROUP)) : Uri.fromFile(new File(getCacheDir(), AlbusModelObject.CACHE_CROP_USER)), PreferenceManager.getDefaultSharedPreferences(this).getBoolean("photoprofile_transparency_v2", false)).asSquare().start(this);
    }

    private static void closeSilently(Closeable closeable) {
        if (closeable != null) {
            try {
                closeable.close();
            } catch (Throwable th) {
            }
        }
    }

    private ActionBar getActionbarShowHide() {
        return this.mAb;
    }

    private File getOutputMediaFile(int i) {
        File file = new File(CatfishPhotoStorage.getCacheStorageDir(null));
        if (file.exists() || file.mkdirs()) {
            return i == MEDIA_TYPE_IMAGE ? this.mIdent == 3 ? new File(file.getPath() + File.separator + AlbusModelObject.CAPTURED_PROFILE_PIC) : this.mIdent == 5 ? new File(file.getPath() + File.separator + AlbusModelObject.CAPTURED_PROFILE_GROUP_PIC) : null : null;
        } else {
            Log.d("MyCameraApp", "failed to create directory");
            return null;
        }
    }

    private boolean getShowActionbar() {
        return this.mShowActionbar;
    }

    private void handleCrop(int i, Intent intent) {
        this.mImg = Crop.getOutput(intent);
        if (i == -1) {
            this.mAdpater.changeValueImg(this.mImg);
        } else if (i == HttpStatus.SC_NOT_FOUND) {
            AlbusUtils.setToastView(this, Crop.getError(intent).getMessage());
        }
    }

    private void setAsMyPhotoProfile(Intent intent) {
        Uri output = Crop.getOutput(intent);
        if (output != null) {
            FileUtils.copyFile(MediaFilePath.getPath(this, output), CatfishPhotoStorage.getPhotoStorageDir(this) + "/", CatfishService.getUserPIN() + "_temp");
            File userProfilePhotoFile = CatfishPhotoStorage.getUserProfilePhotoFile(this);
            File file = new File(MediaFilePath.getPath(this, output));
            boolean z = PreferenceManager.getDefaultSharedPreferences(this).getBoolean("photoprofile_transparency_v2", false);
            if (AlbusUtils.isNetworkAvailable(this)) {
                try {
                    Object fileOutputStream = new FileOutputStream(userProfilePhotoFile);
                    if (z) {
                        ImageReScaler.rescaleFromFilePath(file.getAbsolutePath(), HttpStatus.SC_METHOD_FAILURE).compress(CompressFormat.PNG, 90, fileOutputStream);
                    } else {
                        ImageReScaler.rescaleFromFilePath(file.getAbsolutePath(), 640).compress(CompressFormat.JPEG, 90, fileOutputStream);
                    }
                    closeSilently(fileOutputStream);
                    this.mCatfiz.userUploadPhoto(CatfishService.getUserPIN(), userProfilePhotoFile, new Callback() {
                        public void onError() {
                            Log.d(ProfilesImageViewerActivity.TAG, "error upload");
                        }

                        public void onSuccess() {
                            Log.d(ProfilesImageViewerActivity.TAG, "upload");
                        }
                    });
                    CatfishService.getCatfishPreferences().edit().putBoolean(AlbusModelObject.REFRESH_UPDATE_MY_PIC, true).commit();
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private void setShowActionbar(boolean z) {
        this.mShowActionbar = z;
    }

    public boolean animateGif(View view) {
        if (!(view instanceof ImageView)) {
            return false;
        }
        String str = this.mPicPath;
        if (str == null || str.isEmpty()) {
            return false;
        }
        if (Utils.getFileTypeFromPath(str) != MEDIA_TYPE_IMAGE) {
            return false;
        }
        if (!Utils.getExtension(str).equals(".gif")) {
            return false;
        }
        try {
            Drawable drawable = ((ImageView) view).getDrawable();
            if (drawable != null && (drawable instanceof GifDrawable)) {
                GifDrawable gifDrawable = (GifDrawable) ((ImageView) view).getDrawable();
                if (gifDrawable.isRunning()) {
                    gifDrawable.stop();
                    return true;
                }
                gifDrawable.recycle();
            }
            drawable = new GifDrawable(str);
            ((ImageView) view).setImageDrawable(drawable);
            drawable.reset();
            drawable.start();
            return true;
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
    }

    public void capturePhotoCam() {
        Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
        this.mFileUri = Uri.fromFile(getOutputMediaFile(MEDIA_TYPE_IMAGE));
        intent.putExtra("output", this.mFileUri);
        startActivityForResult(intent, 14);
    }

    public void choosePhotoByFile() {
        Crop.pickImage(this);
    }

    public void hideMenu() {
        if (this.mRlMenuBottom.getVisibility() == 8) {
            Log.d(TAG, "hide - on menu bottom == gone");
            return;
        }
        Log.d(TAG, "hide - on menu bottom == visible");
        Animation loadAnimation = AnimationUtils.loadAnimation(this, R.anim.slidedown_anim);
        loadAnimation.setAnimationListener(new AnimationListener() {
            public void onAnimationEnd(Animation animation) {
                ProfilesImageViewerActivity.this.mRlMenuBottom.setVisibility(4);
            }

            public void onAnimationRepeat(Animation animation) {
            }

            public void onAnimationStart(Animation animation) {
            }
        });
        loadAnimation.setFillAfter(true);
        this.mRlMenuBottom.startAnimation(loadAnimation);
    }

    protected void onActivityResult(int i, int i2, Intent intent) {
        super.onActivityResult(i, i2, intent);
        Log.d(TAG, "onActivityResult:" + i + " " + i2);
        if (i2 != -1) {
            return;
        }
        if (i == 14) {
            Uri uri = this.mFileUri;
            beginCrop(uri);
            Log.d(TAG, "activityResult-Retrieve uri=" + uri);
            if (uri != null) {
                Log.d(TAG, "Using URI");
            }
        } else if (i == Crop.REQUEST_CROP) {
            if (this.mIdent == 3 || this.mIdent == 5) {
                setResult(i2, intent);
                finish();
                return;
            }
            setAsMyPhotoProfile(intent);
        } else if (i == Crop.REQUEST_PICK) {
            beginCrop(intent.getData());
        } else {
            Log.d(TAG, "where do you set result in (value requestcode)= " + i);
        }
    }

    public void onBackPressed() {
        super.onBackPressed();
    }

    public void onCatfizStarted() {
    }

    public void onCatfizStopped() {
    }

    protected void onCreate(Bundle bundle) {
        String stringExtra;
        requestWindowFeature(MEDIA_TYPE_IMAGE);
        super.onCreate(bundle);
        setContentView((int) R.layout.activity_image_viewer);
        this.mCatfiz = new Catfiz(this, this);
        if (Utils.hasLollipop()) {
            setTaskDescription(new TaskDescription(null, null, getResources().getColor(R.color.red)));
            Window window = getWindow();
            window.clearFlags(67108864);
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.setStatusBarColor(getResources().getColor(R.color.red2));
        }
        this.mAb = getSupportActionBar();
        this.mAb.setDisplayHomeAsUpEnabled(true);
        this.mAb.setTitle((CharSequence) "");
        Configuration configuration = getResources().getConfiguration();
        if (Utils.hasJellyBeanMR1() && configuration.getLayoutDirection() == MEDIA_TYPE_IMAGE) {
            this.mAb.setHomeAsUpIndicator((int) R.drawable.ic_back_light_reverse);
        } else {
            this.mAb.setHomeAsUpIndicator((int) R.drawable.ic_back_light);
        }
        this.mIntent = getIntent();
        this.mPicPath = this.mIntent.getStringExtra(AlbusModelObject.IMAGE);
        this.mSenderName = this.mIntent.getStringExtra(AlbusModelObject.SENDER_NAME);
        this.mConvRoom = this.mIntent.getStringExtra(AlbusModelObject.INTENT_ROOM);
        this.mIdent = this.mIntent.getIntExtra(HTTP.IDENTITY_CODING, -1);
        this.mId = this.mIntent.getStringExtra(CatfishRESTAPI.CFCOMPACT_STICKERID);
        this.mFizzMsg = this.mIntent.getStringExtra(AlbusModelObject.FIZZMSG);
        this.mSlinkUri = this.mIntent.getStringExtra(AlbusModelObject.SLINKURI);
        Log.d(TAG, "image path=" + this.mPicPath);
        this.mImg = Uri.parse(this.mPicPath);
        this.mVp = (ViewPager) findViewById(R.id.vp);
        this.mRlMenuBottom = (RelativeLayout) findViewById(R.id.rl_menu_bottom);
        this.mTvSenderName = (TextView) findViewById(R.id.tv_name);
        this.mTvConvName = (TextView) findViewById(R.id.tv_conv_name);
        TextView textView = (TextView) findViewById(R.id.tv_image_availability);
        if (new File(this.mPicPath).exists()) {
            textView.setVisibility(8);
        } else {
            textView.setVisibility(0);
        }
        if (this.mIdent == 3) {
            this.mTvSenderName.setText(getString(R.string.profile));
            this.mTvConvName.setVisibility(8);
        } else if (this.mIdent == 4 || this.mIdent == 0) {
            stringExtra = this.mIntent.getStringExtra(CatfishDataStorage.NIC_NAME);
            if (stringExtra != null) {
                this.mTvSenderName.setText(SmiledText.getSmiledText((Context) this, stringExtra + " " + getResources().getString(R.string.picture), this.mTvSenderName));
            } else {
                this.mTvSenderName.setText("Profile " + getResources().getString(R.string.picture));
            }
            this.mTvConvName.setVisibility(8);
        } else if (this.mIdent == 5) {
            stringExtra = this.mIntent.getStringExtra(CatfishDataStorage.NIC_NAME);
            if (stringExtra != null) {
                this.mTvSenderName.setText(SmiledText.getSmiledText((Context) this, stringExtra + " " + getResources().getString(R.string.picture), this.mTvSenderName));
            } else {
                this.mTvSenderName.setText("Profile Group " + getResources().getString(R.string.picture));
            }
            this.mTvConvName.setVisibility(8);
        } else {
            this.mTvConvName.setText(Html.fromHtml("in <b>" + this.mConvRoom + "</b>"));
            if (this.mSenderName.equals("")) {
                this.mTvSenderName.setText(SmiledText.getSmiledText((Context) this, this.mConvRoom, this.mTvSenderName));
            } else {
                this.mTvSenderName.setText(SmiledText.getSmiledText((Context) this, this.mSenderName, this.mTvSenderName));
            }
        }
        this.mAdpater = new ProfileImageViewerAdapter(this, this.mImg);
        this.mVp.setAdapter(this.mAdpater);
        if (Utils.getFileTypeFromPath(this.mPicPath) == MEDIA_TYPE_IMAGE) {
            stringExtra = Utils.getExtension(this.mPicPath);
            if (stringExtra != null && stringExtra.equals(".gif")) {
                new Handler().postDelayed(new Runnable() {
                    public void run() {
                        ProfilesImageViewerActivity.this.mAdpater.playGif();
                    }
                }, 300);
            }
        }
    }

    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.actionbar_imageviewer, menu);
        MenuItem findItem = menu.findItem(R.id.change_mypic);
        MenuItem findItem2 = menu.findItem(R.id.set_mypic);
        MenuItem findItem3 = menu.findItem(R.id.save_pic);
        MenuItem findItem4 = menu.findItem(R.id.share_pic);
        if (this.mIdent == 3) {
            findItem.setVisible(true);
        } else if (!(this.mIdent == 4 || this.mIdent == 0)) {
            if (this.mIdent == 5) {
                if (this.mId != null && this.mId.split(":")[0].equals(CatfishService.getUserPIN())) {
                    findItem.setVisible(true);
                }
            } else if (this.mIdent == 31) {
                if (!(this.mId == null || this.mId.equals(CatfishService.getUserPIN()))) {
                    findItem3.setVisible(true);
                }
                findItem2.setVisible(true);
            } else {
                if (getIntent().getStringExtra(AlbusModelObject.FIZZMSG) == null || getIntent().getStringExtra(AlbusModelObject.FIZZMSG).equals("")) {
                    findItem4.setVisible(false);
                } else {
                    findItem4.setVisible(true);
                }
                findItem2.setVisible(true);
            }
        }
        return super.onCreateOptionsMenu(menu);
    }

    public void onDestroy() {
        super.onDestroy();
        Log.d(TAG, "onDestroy");
        this.mCatfiz.destroy();
    }

    public boolean onOptionsItemSelected(MenuItem menuItem) {
        Bundle bundle;
        switch (menuItem.getItemId()) {
            case 16908332:
                finish();
                return true;
            case R.id.change_mypic:
                bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 3);
                AlbusDialog.showDialog(3, new DialogUI().getDialogInterface(), this, bundle, getSupportFragmentManager());
                return true;
            case R.id.set_mypic:
                beginCrop(Uri.fromFile(new File(this.mPicPath)));
                return true;
            case R.id.save_pic:
                String str = "";
                int lastIndexOf = this.mPicPath.lastIndexOf(46);
                FileUtils.copyFile(this.mPicPath, StorageDir.getMediaDir(9), "IMG_" + new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date()) + (lastIndexOf < 0 ? ".jpg" : this.mPicPath.substring(lastIndexOf)));
                AlbusUtils.setToastView(this, getString(R.string.photo_saved));
                return true;
            case R.id.share_pic:
                bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 39);
                AlbusDialog.showDialog(39, new ImageViewerDialog(), this, bundle, getSupportFragmentManager());
                return true;
            default:
                return super.onOptionsItemSelected(menuItem);
        }
    }

    protected void onPause() {
        super.onPause();
        Log.d(TAG, "onPause");
    }

    public void onRegisterProgress() {
    }

    protected void onResume() {
        super.onResume();
        Log.d(TAG, "onResume");
        this.mCatfiz.start();
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    protected void onStop() {
        super.onStop();
        Log.d(TAG, "onStop");
        this.mCatfiz.finish();
    }

    public void picClickHandle() {
        Log.d(TAG, "on click image viewer");
        if (this.mIsAbShow) {
            this.mAb.hide();
            hideMenu();
            this.mIsAbShow = false;
            return;
        }
        showMenu();
        this.mAb.show();
        this.mIsAbShow = true;
    }

    public void showMenu() {
        if (this.mRlMenuBottom.getVisibility() == 8) {
            Log.d(TAG, "show - on menu bottom == gone");
            return;
        }
        Log.d(TAG, "show - on menu bottom == gone");
        Animation loadAnimation = AnimationUtils.loadAnimation(this, R.anim.slideup_anim);
        loadAnimation.setAnimationListener(new AnimationListener() {
            public void onAnimationEnd(Animation animation) {
            }

            public void onAnimationRepeat(Animation animation) {
            }

            public void onAnimationStart(Animation animation) {
                ProfilesImageViewerActivity.this.mRlMenuBottom.setVisibility(0);
            }
        });
        loadAnimation.setFillAfter(true);
        this.mRlMenuBottom.startAnimation(loadAnimation);
    }
}
