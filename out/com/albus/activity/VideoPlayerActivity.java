package com.albus.activity;

import android.app.ActivityManager.TaskDescription;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.drawable.Drawable;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.media.MediaPlayer.OnErrorListener;
import android.media.MediaPlayer.OnPreparedListener;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.support.v7.app.ActionBarActivity;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;
import com.albus.media.ThumbnailLoader;
import com.albus.media.videoplayer.MediaController;
import com.albus.media.videoplayer.VideoView;
import com.albus.util.AlbusModelObject;
import com.catfiz.R;
import com.catfiz.media.StorageDir;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.lang.ref.WeakReference;

public class VideoPlayerActivity extends ActionBarActivity {
    public static final String TAG = "VideoPlayerActivity";
    private FrameLayout frComment;
    private FrameLayout frInfo;
    private LinearLayout llDownload;
    private LinearLayout llFooter;
    private LinearLayout llPause;
    private LinearLayout llPlay;
    private LinearLayout llPlaying;
    private LinearLayout llResume;
    private LinearLayout llZoom;
    private LinearLayout llZoomExit;
    private int mCurrentPos = 0;
    private String mDesc = null;
    private Drawable mDrawable = null;
    private String mFileName = null;
    private String mFizzlink = null;
    private String mFlPath = null;
    private int mHeightVideo = 0;
    private long mID = 0;
    private ImageButton mIbHome = null;
    private ImageButton mIbMenu = null;
    private ImageButton mIbShare = null;
    private boolean mIsFromFile = false;
    private boolean mIsFullScreen;
    private ImageView mIvThumbnail = null;
    private LocalThumbnailLoader mLocalThumbLoader;
    private ByteArrayOutputStream mOutputStream = new ByteArrayOutputStream(AccessibilityNodeInfoCompat.ACTION_COPY);
    private String mRoom = null;
    private String mSender = null;
    private String mThumbPath = null;
    private TextView mTvDesc = null;
    private TextView mTvRoom = null;
    private TextView mTvSender = null;
    private int mWidthVideo = 0;
    private ProgressBar pbLoading;
    private RelativeLayout rlRoot;
    private RelativeLayout rlThumbnail;
    private RelativeLayout rlTopbar;
    private RelativeLayout rlVideo;
    private VideoView videoview;

    class CatfizMediaController extends MediaController {
        public CatfizMediaController(Context context) {
            super(context);
        }

        public void hide() {
            super.hide();
            VideoPlayerActivity.this.rlTopbar.setVisibility(8);
            VideoPlayerActivity.this.llZoomExit.setVisibility(8);
            VideoPlayerActivity.this.llZoom.setVisibility(8);
            VideoPlayerActivity.this.llPlaying.setVisibility(8);
            VideoPlayerActivity.this.llFooter.setVisibility(8);
        }

        public void show() {
            super.show();
            VideoPlayerActivity.this.llPlaying.setVisibility(0);
            VideoPlayerActivity.this.rlTopbar.setVisibility(0);
            VideoPlayerActivity.this.llFooter.setVisibility(0);
            if (VideoPlayerActivity.this.mIsFullScreen) {
                VideoPlayerActivity.this.llZoomExit.setVisibility(0);
                VideoPlayerActivity.this.llZoom.setVisibility(8);
                return;
            }
            VideoPlayerActivity.this.llZoomExit.setVisibility(8);
            VideoPlayerActivity.this.llZoom.setVisibility(0);
        }
    }

    class LocalThumbnailLoader extends ThumbnailLoader {
        private WeakReference mLocalCache = null;

        public LocalThumbnailLoader(Context context, int i) {
            super(context, i);
        }

        public void clearLocalCache() {
            this.mLocalCache = null;
        }

        protected Bitmap getBitmapFromLocalCache(Object obj) {
            if (isInLocalCache(String.valueOf(obj))) {
                return this.mLocalCache != null ? (Bitmap) this.mLocalCache.get() : null;
            } else {
                clearLocalCache();
                return null;
            }
        }

        protected void putBitmapInLocalCache(Object obj, Bitmap bitmap) {
            super.putBitmapInLocalCache(obj, bitmap);
            this.mLocalCache = new WeakReference(bitmap);
            setFadeInRefresh(false);
        }
    }

    private void initState(Bundle bundle) {
        if (bundle != null) {
            this.mID = bundle.getLong(AlbusModelObject.INTENT_IDSEQUENCE);
            this.mFizzlink = bundle.getString(AlbusModelObject.INTENT_FIZZLINK);
            this.mFlPath = bundle.getString(AlbusModelObject.INTENT_FLPATH);
            this.mThumbPath = bundle.getString(AlbusModelObject.INTENT_THUMBPATH);
            this.mCurrentPos = bundle.getInt(AlbusModelObject.INTENT_SEEKPOS);
            this.mIsFullScreen = bundle.getBoolean(AlbusModelObject.INTENT_ISFULLSCREEN);
            this.mSender = bundle.getString(AlbusModelObject.SENDER_NAME);
            this.mRoom = bundle.getString(AlbusModelObject.INTENT_ROOM);
            this.mDesc = bundle.getString(AlbusModelObject.INTENT_DESC);
            this.mIsFromFile = bundle.getBoolean(AlbusModelObject.INTENT_IS_FROM_FILE);
        } else {
            this.mCurrentPos = 0;
            this.mFizzlink = null;
            this.mFlPath = null;
            this.mThumbPath = null;
            this.mIsFullScreen = false;
            this.mSender = null;
            this.mRoom = null;
            this.mDesc = null;
            this.mIsFromFile = false;
        }
        if (getIntent() == null) {
        }
    }

    private void initView() {
        this.rlRoot = (RelativeLayout) findViewById(R.id.rl_root);
        this.llResume = (LinearLayout) findViewById(R.id.ll_resume);
        this.llPause = (LinearLayout) findViewById(R.id.ll_pause);
        this.llPlaying = (LinearLayout) findViewById(R.id.ll_playing);
        this.mIbHome = (ImageButton) findViewById(R.id.ib_upnav);
        this.mIbMenu = (ImageButton) findViewById(R.id.ib_menu);
        this.mIbShare = (ImageButton) findViewById(R.id.ib_share);
        this.llPlay = (LinearLayout) findViewById(R.id.ll_play);
        this.pbLoading = (ProgressBar) findViewById(R.id.pb_loading);
        this.rlVideo = (RelativeLayout) findViewById(R.id.rl_video);
        this.rlTopbar = (RelativeLayout) findViewById(R.id.rl_topbar);
        this.rlThumbnail = (RelativeLayout) findViewById(R.id.rl_thumbnail);
        this.llZoom = (LinearLayout) findViewById(R.id.ll_zoom);
        this.llDownload = (LinearLayout) findViewById(R.id.ll_download);
        this.llFooter = (LinearLayout) findViewById(R.id.ll_footer_info);
        this.videoview = (VideoView) findViewById(R.id.vv_fizzlink);
        if (this.mIsFromFile) {
            this.llDownload.setVisibility(8);
        }
        this.mTvRoom = (TextView) findViewById(R.id.tv_room);
        this.mTvSender = (TextView) findViewById(R.id.tv_sender);
        this.mTvRoom.setText(this.mRoom);
        this.mTvSender.setText(this.mSender);
        this.mIbShare.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                Intent intent = new Intent();
                intent.putExtra(AlbusModelObject.INTENT_IDSEQUENCE, VideoPlayerActivity.this.mID);
                intent.putExtra(AlbusModelObject.INTENT_FIZZLINK, VideoPlayerActivity.this.mFizzlink);
                VideoPlayerActivity.this.setResult(2, intent);
                VideoPlayerActivity.this.finish();
            }
        });
        this.mIvThumbnail = (ImageView) findViewById(R.id.iv_thumb_holder);
        if (this.mThumbPath == null) {
            this.mLocalThumbLoader.loadImage(null, this.mIvThumbnail);
        } else {
            this.mLocalThumbLoader.loadImage((Object) Uri.parse("file://" + this.mThumbPath), this.mIvThumbnail);
        }
        this.llDownload.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                Intent intent = new Intent();
                intent.putExtra(AlbusModelObject.INTENT_IDSEQUENCE, VideoPlayerActivity.this.mID);
                intent.putExtra(AlbusModelObject.INTENT_FIZZLINK, VideoPlayerActivity.this.mFizzlink);
                VideoPlayerActivity.this.setResult(1, intent);
                VideoPlayerActivity.this.finish();
            }
        });
        this.llZoom.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                VideoPlayerActivity.this.setFullScreen();
            }
        });
        this.llZoomExit = (LinearLayout) findViewById(R.id.ll_zoom_exit);
        this.llZoomExit.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                VideoPlayerActivity.this.minScreen();
            }
        });
        this.mIbHome.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                VideoPlayerActivity.this.finish();
            }
        });
        this.mIbMenu.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
            }
        });
        this.llPlay.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                VideoPlayerActivity.this.llPlay.setVisibility(0);
                VideoPlayerActivity.this.pbLoading.setVisibility(0);
                VideoPlayerActivity.this.rlThumbnail.setVisibility(8);
                VideoPlayerActivity.this.rlVideo.setVisibility(0);
                VideoPlayerActivity.this.play();
            }
        });
        this.llPause.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                VideoPlayerActivity.this.llPause.setVisibility(8);
                VideoPlayerActivity.this.videoview.pause();
                VideoPlayerActivity.this.llResume.setVisibility(0);
            }
        });
        this.llResume.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                VideoPlayerActivity.this.llResume.setVisibility(8);
                VideoPlayerActivity.this.videoview.start();
                VideoPlayerActivity.this.llPause.setVisibility(0);
            }
        });
    }

    private void minScreen() {
        this.mIsFullScreen = false;
        setOrientation(this.mIsFullScreen);
        getWindowManager().getDefaultDisplay().getMetrics(new DisplayMetrics());
        LayoutParams layoutParams = (LayoutParams) this.rlVideo.getLayoutParams();
        layoutParams.width = this.mWidthVideo;
        layoutParams.height = this.mHeightVideo;
        layoutParams.leftMargin = 0;
        this.rlVideo.setLayoutParams(layoutParams);
        this.llZoomExit.setVisibility(8);
        this.llZoom.setVisibility(0);
    }

    private void play() {
        try {
            MediaController catfizMediaController = new CatfizMediaController(this);
            catfizMediaController.setAnchorView(this.videoview);
            String str = null;
            if (this.mFlPath != null) {
                str = this.mFlPath;
            }
            Log.d(TAG, "Play Video URL: " + str);
            if (str == null) {
                finish();
                return;
            }
            File file = new File(str);
            if (!file.exists()) {
                Log.d(TAG, "Play Video URL: NOT EXISTS: " + str);
                String name = file.getName();
                int fileTypeFromPath = Utils.getFileTypeFromPath(name);
                if (this.mRoom.length() <= 21) {
                    if (fileTypeFromPath == 6) {
                        str = StorageDir.getPrivateChatDir(1) + name;
                    } else if (fileTypeFromPath == 2) {
                        str = StorageDir.getPrivateChatDir(4) + name;
                    }
                } else if (fileTypeFromPath == 6) {
                    str = StorageDir.getGroupChatDir(1) + name;
                } else if (fileTypeFromPath == 2) {
                    str = StorageDir.getGroupChatDir(4) + name;
                }
            }
            Uri parse = Uri.parse(str);
            this.videoview.setMediaController(catfizMediaController);
            this.videoview.setVideoURI(parse);
            this.videoview.requestFocus();
            this.videoview.setOnPreparedListener(new OnPreparedListener() {
                public void onPrepared(MediaPlayer mediaPlayer) {
                    VideoPlayerActivity.this.setOrientation(VideoPlayerActivity.this.mIsFullScreen);
                    VideoPlayerActivity.this.pbLoading.setVisibility(8);
                    VideoPlayerActivity.this.rlTopbar.setVisibility(8);
                    VideoPlayerActivity.this.videoview.seekTo(VideoPlayerActivity.this.mCurrentPos);
                    VideoPlayerActivity.this.videoview.start();
                }
            });
            this.videoview.setOnErrorListener(new OnErrorListener() {
                public boolean onError(MediaPlayer mediaPlayer, int i, int i2) {
                    mediaPlayer.stop();
                    VideoPlayerActivity.this.finish();
                    return true;
                }
            });
            this.videoview.setOnCompletionListener(new OnCompletionListener() {
                public void onCompletion(MediaPlayer mediaPlayer) {
                    mediaPlayer.stop();
                    VideoPlayerActivity.this.finish();
                }
            });
        } catch (Exception e) {
            Log.e(TAG, e.toString());
            e.printStackTrace();
        }
    }

    private void setFullScreen() {
        this.mIsFullScreen = true;
        setOrientation(this.mIsFullScreen);
        DisplayMetrics displayMetrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
        LayoutParams layoutParams = (LayoutParams) this.rlVideo.getLayoutParams();
        this.mWidthVideo = layoutParams.width;
        this.mHeightVideo = layoutParams.height;
        layoutParams.width = displayMetrics.widthPixels;
        layoutParams.height = displayMetrics.heightPixels;
        layoutParams.leftMargin = 0;
        this.rlVideo.setLayoutParams(layoutParams);
        this.llZoomExit.setVisibility(0);
        this.llZoom.setVisibility(8);
    }

    private void setOrientation(boolean z) {
        if (z) {
            setRequestedOrientation(0);
            getWindow().setFlags(AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT, AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT);
            return;
        }
        setRequestedOrientation(1);
        getWindow().setFlags(AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT, AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT);
        getWindow().clearFlags(AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT);
    }

    public void onBackPressed() {
        if (this.mIsFullScreen) {
            minScreen();
            this.llZoom.setVisibility(8);
            return;
        }
        setRequestedOrientation(4);
        finish();
    }

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        setContentView((int) R.layout.video_player_fullscreen);
        if (Utils.hasLollipop()) {
            setTaskDescription(new TaskDescription(null, null, getResources().getColor(R.color.red)));
        }
        if (Utils.hasLollipop()) {
            Window window = getWindow();
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.setStatusBarColor(getResources().getColor(R.color.black));
        }
        this.mLocalThumbLoader = new LocalThumbnailLoader(this, R.drawable.df_img_holder);
        initState(getIntent().getExtras());
        initView();
    }

    public void onDestroy() {
        super.onDestroy();
        Log.d(TAG, "onDestroy");
    }

    public void onPause() {
        super.onPause();
        this.mCurrentPos = this.videoview.getCurrentPosition();
    }

    protected void onRestoreInstanceState(Bundle bundle) {
        super.onRestoreInstanceState(bundle);
        initState(bundle);
    }

    public void onResume() {
        super.onResume();
        if (this.mFlPath != null && !this.videoview.isPlaying()) {
            Log.d(TAG, "Play...: flpath: " + this.mFlPath);
            this.llPlay.setVisibility(0);
            this.pbLoading.setVisibility(0);
            this.rlThumbnail.setVisibility(8);
            this.rlVideo.setVisibility(0);
            play();
        }
    }

    protected void onSaveInstanceState(Bundle bundle) {
        super.onSaveInstanceState(bundle);
        if (bundle != null) {
            bundle.putLong(AlbusModelObject.INTENT_IDSEQUENCE, this.mID);
            bundle.putString(AlbusModelObject.INTENT_FIZZLINK, this.mFizzlink);
            bundle.putString(AlbusModelObject.INTENT_FLPATH, this.mFlPath);
            bundle.putString(AlbusModelObject.INTENT_THUMBPATH, this.mThumbPath);
            bundle.putInt(AlbusModelObject.INTENT_SEEKPOS, this.mCurrentPos);
            bundle.putBoolean(AlbusModelObject.INTENT_ISFULLSCREEN, this.mIsFullScreen);
            bundle.putString(AlbusModelObject.SENDER_NAME, this.mSender);
            bundle.putString(AlbusModelObject.INTENT_ROOM, this.mRoom);
            bundle.putString(AlbusModelObject.INTENT_DESC, this.mDesc);
            bundle.putBoolean(AlbusModelObject.INTENT_IS_FROM_FILE, this.mIsFromFile);
        }
    }

    public void onStart() {
        super.onStart();
    }
}
