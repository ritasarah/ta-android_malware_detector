package com.albus.activity;

import android.app.ActivityManager.TaskDescription;
import android.content.Intent;
import android.content.res.Configuration;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.NavUtils;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.RelativeLayout;
import com.albus.adapter.SharedViewerAdapter;
import com.albus.util.AlbusModelObject;
import com.catfiz.R;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;

public class SharedViewerActivity extends ActionBarActivity {
    protected static final String TAG = "SharedViewerActivity";
    public ActionBar mAb = null;
    private SharedViewerAdapter mGvAdapter = null;
    public Handler mHandler = null;
    private int[] mImgs = null;
    public int mPosition = 0;
    public RelativeLayout mRlMenuBottom = null;
    public Runnable mRunn = null;
    public boolean mShowActionbar = true;
    public ViewPager mVp = null;

    private void hideMenuBottom() {
        this.mRlMenuBottom.startAnimation(AnimationUtils.loadAnimation(this, R.anim.bottom_down));
        this.mRlMenuBottom.setVisibility(8);
    }

    private void showMenuBottom() {
        Animation loadAnimation = AnimationUtils.loadAnimation(this, R.anim.bottom_up);
        this.mRlMenuBottom.setVisibility(0);
        this.mRlMenuBottom.startAnimation(loadAnimation);
    }

    public void cancelHide() {
        Log.d(TAG, "cancel hide");
        if (this.mRunn != null) {
            this.mHandler.removeCallbacks(this.mRunn);
        }
    }

    public boolean getShowActionbar() {
        return this.mShowActionbar;
    }

    public void onBackPressed() {
        super.onBackPressed();
    }

    protected void onCreate(Bundle bundle) {
        requestWindowFeature(1);
        super.onCreate(bundle);
        setContentView((int) R.layout.activity_image_viewer);
        if (Utils.hasLollipop()) {
            setTaskDescription(new TaskDescription(null, null, getResources().getColor(R.color.red)));
        }
        this.mAb = getSupportActionBar();
        this.mAb.setDisplayHomeAsUpEnabled(true);
        Configuration configuration = getResources().getConfiguration();
        if (Utils.hasJellyBeanMR1() && configuration.getLayoutDirection() == 1) {
            this.mAb.setHomeAsUpIndicator((int) R.drawable.ic_back_light_reverse);
        } else {
            this.mAb.setHomeAsUpIndicator((int) R.drawable.ic_back_light);
        }
        Intent intent = getIntent();
        this.mImgs = intent.getIntArrayExtra(AlbusModelObject.IMAGE);
        Log.d(TAG, "data - 0= " + this.mImgs[0]);
        this.mPosition = intent.getIntExtra(AlbusModelObject.POSITION, 0);
        Log.d(TAG, "position - 0= " + this.mPosition);
        this.mVp = (ViewPager) findViewById(R.id.vp);
        this.mRlMenuBottom = (RelativeLayout) findViewById(R.id.rl_menu_bottom);
        this.mGvAdapter = new SharedViewerAdapter(this, this.mImgs);
        this.mVp.setAdapter(this.mGvAdapter);
        this.mVp.setCurrentItem(this.mPosition);
        this.mVp.setOnPageChangeListener(new OnPageChangeListener() {
            public void onPageScrollStateChanged(int i) {
                Log.d(SharedViewerActivity.TAG, "scroll Change");
                SharedViewerActivity.this.prepareHide();
            }

            public void onPageScrolled(int i, float f, int i2) {
                Log.d(SharedViewerActivity.TAG, "scroll");
                SharedViewerActivity.this.cancelHide();
            }

            public void onPageSelected(int i) {
            }
        });
        this.mHandler = new Handler();
    }

    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.actionbar_gallery_viewer, menu);
        return super.onCreateOptionsMenu(menu);
    }

    public boolean onOptionsItemSelected(MenuItem menuItem) {
        switch (menuItem.getItemId()) {
            case 16908332:
                Intent parentActivityIntent = NavUtils.getParentActivityIntent(this);
                parentActivityIntent.setFlags(603979776);
                NavUtils.navigateUpTo(this, parentActivityIntent);
                return true;
            default:
                return super.onOptionsItemSelected(menuItem);
        }
    }

    protected void onPause() {
        super.onPause();
    }

    public void prepareHide() {
        cancelHide();
        startHide();
    }

    public void setShowActionbar(boolean z) {
        this.mShowActionbar = z;
    }

    public void showHideActionbar() {
        if (getShowActionbar()) {
            Log.d(TAG, "actionbar hide");
            this.mAb.hide();
            hideMenuBottom();
            setShowActionbar(false);
            return;
        }
        Log.d(TAG, "actionbar showed");
        this.mAb.show();
        showMenuBottom();
        setShowActionbar(true);
        prepareHide();
    }

    public void startHide() {
        Log.d(TAG, "start hide");
        this.mRunn = new Runnable() {
            public void run() {
                Log.d(SharedViewerActivity.TAG, "hide");
                SharedViewerActivity.this.mAb.hide();
                SharedViewerActivity.this.hideMenuBottom();
                SharedViewerActivity.this.setShowActionbar(false);
            }
        };
        this.mHandler.postDelayed(this.mRunn, 2000);
    }
}
