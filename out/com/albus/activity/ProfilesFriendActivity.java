package com.albus.activity;

import android.app.Activity;
import android.app.ActivityManager.TaskDescription;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.TransitionDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.Toast;
import com.albus.adapter.ProfileFriendAdapter;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.AlbusDialog.OnActionClickListener;
import com.albus.dialog.AlbusDialogInterface;
import com.albus.media.ImageCache;
import com.albus.media.ImageCache.ImageCacheParams;
import com.albus.media.SingleFriendPhotoLoader;
import com.albus.media.ThumbnailLoader;
import com.albus.media.UserPhotoLoader;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.util.FadingActionBarHelper;
import com.albus.util.LongMessageCache;
import com.albus.util.LongMessageCache.LongMessageCacheParams;
import com.albus.util.LongMessageWorker;
import com.albus.view.CustomImageView;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Callback.FetchFriendCallback;
import com.catfiz.base.Callback.FetchStatusComment;
import com.catfiz.base.Callback.OnSendLikeCallback;
import com.catfiz.base.Callback.ProgressUploadDownload;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.base.ICatfiz.ICatfizNewMessage;
import com.catfiz.base.ICatfiz.ICatfizUpdateProgress;
import com.catfiz.intents.CatfishIntents;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.media.PromotedPhotoLoader;
import com.catfiz.model.Comment;
import com.catfiz.model.Profile;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishService;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.signal.Signal;
import com.catfiz.signal.SignalBinderComment;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.io.File;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.apache.http.HttpStatus;
import org.apache.http.cookie.ClientCookie;
import org.apache.http.protocol.HTTP;

public class ProfilesFriendActivity extends ActionBarActivity implements ICatfiz, ICatfizNewMessage, ICatfizUpdateProgress {
    private static final String TAG = "ProfilesFriendActivity";
    private int PROFILE_VIEW = 10;
    private ProfileFriendAdapter mAdapter = null;
    private Catfiz mCatfiz = null;
    private CustomImageView mCivImg = null;
    private ArrayList mData = null;
    private String mDate = "";
    private Drawable mDrawablePp = null;
    private int[] mGalleryResId = new int[6];
    private FadingActionBarHelper mHelper = null;
    private String mId = "";
    private int mIsLike = 0;
    private boolean mIsStar = false;
    private MenuItem mItemEditName = null;
    private MenuItem mItemResetName = null;
    private int mLikeCount = 0;
    private ListView mList = null;
    private LocalImageLoader mLocalImageLoader = null;
    private LongMessageWorker mLongMessageWorker = null;
    private Menu mMenu = null;
    private String mName = "";
    private String mStatus = "";
    private ThumbnailLoader mThumbnailLoader = null;
    private boolean mUseAlias = false;
    private User mUser = null;
    private UserPhotoLoader mUserPhotoLoader = null;
    private boolean mbFirstEnter = true;

    class CheckCommentUnreadCb implements FetchFriendCallback {
        private WeakReference mThisActivityRef;

        public CheckCommentUnreadCb(ProfilesFriendActivity profilesFriendActivity) {
            this.mThisActivityRef = new WeakReference(profilesFriendActivity);
        }

        public void onData(User user, String str) {
            if (((ProfilesFriendActivity) this.mThisActivityRef.get()) != null && user != null) {
                int unreadStatusComment = user.getUnreadStatusComment();
                Log.d(ProfilesFriendActivity.TAG, "~~~CheckCommentUnreadCb:" + unreadStatusComment);
                if (unreadStatusComment > 0) {
                    ProfilesFriendActivity.this.fetchFriendStatusComment();
                }
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    class DialogProfileFriend implements AlbusDialogInterface {
        DialogFragment mDialog;

        private DialogProfileFriend() {
            this.mDialog = null;
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            this.mDialog = dialogFragment;
            switch (i) {
                case R.styleable.Theme_actionModeCloseButtonStyle /*28*/:
                    AlbusDialog.setOnActionClickListener(28, new OnActionClickListener() {
                        public void onActionNoListener() {
                            DialogProfileFriend.this.mDialog.dismiss();
                        }

                        public void onActionYesListener() {
                            ProfilesFriendActivity.this.mCatfiz.userUnfriend(ProfilesFriendActivity.this.mId, new Callback() {
                                public void onError() {
                                    Log.d(ProfilesFriendActivity.TAG, "added to black list error");
                                }

                                public void onSuccess() {
                                    Log.d(ProfilesFriendActivity.TAG, "added to black list = " + ProfilesFriendActivity.this.mName);
                                    ProfilesFriendActivity.this.startActivity(new Intent(ProfilesFriendActivity.this, AlbusMainActivity.class).setFlags(335544320));
                                }
                            });
                        }
                    });
                    return;
                case R.styleable.Theme_actionModeBackground /*29*/:
                    AlbusDialog.setOnActionClickListener(29, new OnActionClickListener() {
                        public void onActionNoListener() {
                            DialogProfileFriend.this.mDialog.dismiss();
                        }

                        public void onActionYesListener() {
                            ProfilesFriendActivity.this.mCatfiz.userBlockByNIC(ProfilesFriendActivity.this.mId, new Callback() {
                                public void onError() {
                                    Log.d(ProfilesFriendActivity.TAG, Extra.ERROR);
                                }

                                public void onSuccess() {
                                    Log.d(ProfilesFriendActivity.TAG, "added to black list = " + ProfilesFriendActivity.this.mUser.getName());
                                    ProfilesFriendActivity.this.startActivity(new Intent(ProfilesFriendActivity.this, AlbusMainActivity.class).setFlags(335544320));
                                }
                            });
                        }
                    });
                    return;
                default:
                    return;
            }
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    class FetchFriendDataCb implements FetchFriendCallback {
        private WeakReference mThisActivityRef;

        public FetchFriendDataCb(Activity activity) {
            this.mThisActivityRef = new WeakReference(activity);
        }

        public void onData(User user, String str) {
            ProfilesFriendActivity profilesFriendActivity = (ProfilesFriendActivity) this.mThisActivityRef.get();
            if (profilesFriendActivity != null) {
                if (user != null) {
                    Profile profile;
                    profilesFriendActivity.mUser = user;
                    profilesFriendActivity.mData.clear();
                    if (profilesFriendActivity.mUser.getName().isEmpty()) {
                        Log.d(ProfilesFriendActivity.TAG, "mUser.getName() empty");
                    } else {
                        profile = new Profile();
                        profile.setUser(user);
                        profile.setListItemType(1);
                        profile.setMeLikeThisStatus(profilesFriendActivity.mIsLike);
                        profilesFriendActivity.mData.add(profile);
                    }
                    if (profilesFriendActivity.mUser.getStatus().isEmpty()) {
                        Log.d(ProfilesFriendActivity.TAG, "mUser.getStatus() empty");
                    } else {
                        profilesFriendActivity.mStatus = user.getStatus();
                        profilesFriendActivity.mDate = user.getStatusdate();
                        profile = new Profile();
                        profile.setUser(user);
                        profile.setStatusLike(profilesFriendActivity.mLikeCount);
                        profile.setMeLikeThisStatus(profilesFriendActivity.mIsLike);
                        profile.setListItemType(3);
                        profilesFriendActivity.mData.add(profile);
                    }
                    profilesFriendActivity.mLocalImageLoader.loadImage((Object) profilesFriendActivity.mId, profilesFriendActivity.mCivImg);
                    profilesFriendActivity.fetchFriendStatusComment();
                    if (user.getAlias().isEmpty()) {
                        profilesFriendActivity.mUseAlias = false;
                        return;
                    } else {
                        profilesFriendActivity.mUseAlias = true;
                        return;
                    }
                }
                Log.e(ProfilesFriendActivity.TAG, "~~~~~~~~~~~~~~~~ User null");
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    public class FetchStatusCommentCb implements FetchStatusComment {
        private WeakReference mThisActivityRef;

        public FetchStatusCommentCb(Activity activity) {
            this.mThisActivityRef = new WeakReference(activity);
        }

        public void onData(List list) {
            boolean z = true;
            ProfilesFriendActivity profilesFriendActivity = (ProfilesFriendActivity) this.mThisActivityRef.get();
            if (profilesFriendActivity != null) {
                Log.d(ProfilesFriendActivity.TAG, "get data status comment:" + list.size());
                if (profilesFriendActivity.mData.size() > 1) {
                    ((Profile) profilesFriendActivity.mData.get(1)).setCommentCount(list.size());
                }
                while (profilesFriendActivity.mData.size() > 2) {
                    profilesFriendActivity.mData.remove(2);
                }
                for (Comment sender : list) {
                    if (sender.getSender().getId().equals(CatfishService.getUserPIN())) {
                        break;
                    }
                }
                z = false;
                Profile profile;
                if (list.size() <= 3 && list.size() > 0) {
                    for (Comment sender2 : list) {
                        Profile profile2 = new Profile();
                        profile2.setMeCommentThisStatus(z);
                        profile2.setListItemType(10);
                        profile2.setComment(sender2);
                        profilesFriendActivity.mData.add(profile2);
                    }
                    profile = new Profile();
                    profile.setListItemType(13);
                    profilesFriendActivity.mData.add(profile);
                } else if (list.size() == 0) {
                    profile = new Profile();
                    profile.setListItemType(11);
                    profilesFriendActivity.mData.add(profile);
                } else {
                    int size = list.size();
                    for (int i = size - 3; i < size; i++) {
                        Profile profile3 = new Profile();
                        profile3.setMeCommentThisStatus(z);
                        profile3.setListItemType(10);
                        profile3.setComment((Comment) list.get(i));
                        profilesFriendActivity.mData.add(profile3);
                    }
                    profile = new Profile();
                    profile.setMeCommentThisStatus(z);
                    profile.setListItemType(12);
                    profilesFriendActivity.mData.add(profile);
                }
                profilesFriendActivity.mAdapter.notifyDataSetChanged();
                if (profilesFriendActivity.mbFirstEnter) {
                    profilesFriendActivity.mbFirstEnter = false;
                }
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    class GotoUserProfileCb implements FetchFriendCallback {
        private WeakReference mThisActivityRef;

        public GotoUserProfileCb(Activity activity) {
            this.mThisActivityRef = new WeakReference(activity);
        }

        public void onData(User user, String str) {
            ProfilesFriendActivity profilesFriendActivity = (ProfilesFriendActivity) this.mThisActivityRef.get();
            if (profilesFriendActivity != null && user != null) {
                Log.d(ProfilesFriendActivity.TAG, "FRIEND: " + str);
                Intent intent = new Intent(profilesFriendActivity, ProfilesFriendActivity.class);
                intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, user.getId());
                intent.putExtra(CatfishDataStorage.NIC_NAME, user.getName());
                intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, user.getStatusSequence());
                intent.putExtra(AlbusModelObject.STATUS_LIKE, user.getStatusLike());
                intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, user.isMeLikeThisStatus());
                profilesFriendActivity.startActivity(intent.setFlags(335544320));
            }
        }

        public void onError() {
            Log.e(ProfilesFriendActivity.TAG, "Fail Go to user profile");
        }

        public void onSuccess() {
        }
    }

    class LocalImageLoader extends SingleFriendPhotoLoader {
        private FadingActionBarHelper mHelper;

        public LocalImageLoader(Context context, FadingActionBarHelper fadingActionBarHelper) {
            super(context);
            this.mHelper = fadingActionBarHelper;
            setImageFadeIn(true, HttpStatus.SC_INTERNAL_SERVER_ERROR);
        }

        protected void setImageBitmap(ImageView imageView, Bitmap bitmap) {
            if (bitmap != null) {
                if (this.mFadeInBitmap) {
                    Drawable transitionDrawable = new TransitionDrawable(new Drawable[]{new ColorDrawable(17170445), new BitmapDrawable(this.mContext.getResources(), bitmap)});
                    this.mHelper.setProfilePictureDrawable(transitionDrawable);
                    transitionDrawable.startTransition(getFadeInTime());
                } else {
                    this.mHelper.setProfilePictureDrawable(new BitmapDrawable(this.mContext.getResources(), bitmap));
                }
                this.mHelper.hidePPDummy();
            }
        }
    }

    public class SendLikeCb implements OnSendLikeCallback {
        private WeakReference mThisActivityRef;

        public SendLikeCb(Activity activity) {
            this.mThisActivityRef = new WeakReference(activity);
        }

        public void onData(final int i) {
            final ProfilesFriendActivity profilesFriendActivity = (ProfilesFriendActivity) this.mThisActivityRef.get();
            if (profilesFriendActivity != null) {
                profilesFriendActivity.runOnUiThread(new Runnable() {
                    public void run() {
                        ((Profile) profilesFriendActivity.mData.get(1)).getUser().setStatusLike(i);
                        profilesFriendActivity.mAdapter.notifyDataSetChanged();
                    }
                });
            }
        }

        public void onError() {
        }

        public void onSuccess() {
            final ProfilesFriendActivity profilesFriendActivity = (ProfilesFriendActivity) this.mThisActivityRef.get();
            if (profilesFriendActivity != null) {
                profilesFriendActivity.runOnUiThread(new Runnable() {
                    public void run() {
                        ((Profile) profilesFriendActivity.mData.get(1)).getUser().setMeLikeThisStatus(profilesFriendActivity.mIsLike);
                        profilesFriendActivity.mAdapter.notifyDataSetChanged();
                    }
                });
            }
        }
    }

    private void fetchFriendProfile() {
        this.mCatfiz.chatFetchFriend(this.mId, new FetchFriendDataCb(this));
        this.mCatfiz.setUnreadStatusComment(this.mId, null);
    }

    private void fetchFriendStatusComment() {
        this.mCatfiz.requestStatusComment(getIntent().getLongExtra(AlbusModelObject.STATUS_SEQUENCE, 0), this.mId, new FetchStatusCommentCb(this));
    }

    private void getAllData() {
        fetchFriendProfile();
        requestProgressUploadDownload();
    }

    private void refreshComment(Bundle bundle) {
        Profile profile;
        int size = this.mData.size();
        if (size < 6) {
            this.mData.remove(size - 1);
        } else if (size == 6) {
            profile = (Profile) this.mData.get(3);
            Profile profile2 = (Profile) this.mData.get(4);
            for (int i = 0; i < 4; i++) {
                this.mData.remove(2);
            }
            Profile profile3 = new Profile();
            profile3.setListItemType(12);
            this.mData.add(profile3);
            this.mData.add(profile);
            this.mData.add(profile2);
        } else {
            this.mData.remove(3);
            this.mData.remove(this.mData.size() - 1);
        }
        User user = new User();
        user.setId(bundle.getString(CatfishRESTAPI.CFCOMPACT_STICKERID));
        user.setName(bundle.getString(CatfishDataStorage.NIC_NAME));
        Comment comment = new Comment();
        comment.setSender(user);
        comment.setSequence(bundle.getLong(ServerMessageDataStorage.SEQUENCE));
        comment.setStatusComment(bundle.getString(ClientCookie.COMMENT_ATTR));
        profile = new Profile();
        profile.setListItemType(10);
        profile.setComment(comment);
        this.mData.add(profile);
        profile = new Profile();
        profile.setListItemType(11);
        this.mData.add(profile);
    }

    private void reloadProfile() {
        finish();
        this.mCatfiz.chatFetchFriend(this.mId, new GotoUserProfileCb(this));
    }

    private void requestProgressUploadDownload() {
        this.mCatfiz.requestProgressUploadDownload(new ProgressUploadDownload() {
            public void onError() {
            }

            public boolean onHasProgressUploadDownNUpload(Map map, Map map2) {
                Log.d(ProfilesFriendActivity.TAG, "onHasProgressUploadDownNUpload <Map>");
                ProfilesFriendActivity.this.mAdapter.setProgress(map, map2);
                ProfilesFriendActivity.this.mAdapter.notifyDataSetChanged();
                return false;
            }

            public void onSuccess() {
            }

            public boolean onUpdateProgressDownloadNUpload(String str, int i, int i2) {
                Log.d(ProfilesFriendActivity.TAG, "onHasProgressUploadDownNUpload int");
                return false;
            }
        });
    }

    private void setAliasMenu() {
        if (this.mItemResetName != null && this.mItemEditName != null) {
            if (this.mUseAlias) {
                this.mItemResetName.setVisible(true);
                this.mItemEditName.setVisible(false);
                return;
            }
            this.mItemResetName.setVisible(false);
            this.mItemEditName.setVisible(true);
        }
    }

    public void ImageViewer() {
        Intent intent = new Intent(this, ProfilesImageViewerActivity.class);
        intent.putExtra(HTTP.IDENTITY_CODING, 4);
        intent.putExtra(CatfishDataStorage.NIC_NAME, this.mUser.getName());
        File friendProfilePhotoFile = CatfishPhotoStorage.getFriendProfilePhotoFile(this, this.mId);
        if (friendProfilePhotoFile != null) {
            intent.putExtra(AlbusModelObject.IMAGE, friendProfilePhotoFile.getAbsolutePath());
            startActivity(intent);
            return;
        }
        Log.e(TAG, "NULL PHOTO FRIEND");
    }

    public void downloadCommentAttachedFile(Comment comment) {
        this.mCatfiz.downloadBroadcastAttachedComment(comment, this, new Callback() {
            public void onError() {
                Log.d(ProfilesFriendActivity.TAG, "onError downloadCommentAttachedFile()");
            }

            public void onSuccess() {
                Log.d(ProfilesFriendActivity.TAG, "onSuccess downloadCommentAttachedFile()");
            }
        });
    }

    public void handleFileComment(Comment comment, String str) {
        Uri fromFile = Uri.fromFile(new File(str));
        if (fromFile != null) {
            String str2 = AlbusUtils.getmimetype(fromFile);
            Intent intent = new Intent("android.intent.action.VIEW");
            intent.setDataAndType(fromFile, str2);
            Intent intent2;
            try {
                if (str2.startsWith("image/")) {
                    intent2 = new Intent(this, ProfilesImageViewerActivity.class);
                    intent2.putExtra(HTTP.IDENTITY_CODING, 31);
                    intent2.putExtra(AlbusModelObject.IMAGE, str);
                    intent2.putExtra(AlbusModelObject.SENDER_NAME, comment.getSender().getName());
                    intent2.putExtra(AlbusModelObject.INTENT_ROOM, this.mName + " " + getResources().getString(R.string.action_status));
                    intent2.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, comment.getSender().getId());
                    startActivity(intent2);
                    return;
                }
                intent.putExtra(AlbusModelObject.SENDER_NAME, comment.getSender().getName());
                startActivityForResult(intent, R.styleable.Theme_radioButtonStyle);
            } catch (Exception e) {
                e.printStackTrace();
                intent2 = CatfishIntents.newIntent(this, CatfishIntents.ACTION_SVG_VIEWER);
                intent2.setDataAndType(fromFile, "image/svg+xml");
                startActivityForResult(intent2, R.styleable.Theme_radioButtonStyle);
            }
        }
    }

    protected void onActivityResult(int i, int i2, Intent intent) {
        super.onActivityResult(i, i2, intent);
        Log.d(TAG, "resultcode=" + i2 + " requestcode=" + i + " data=" + intent);
        if (i2 != -1) {
            return;
        }
        if (i == 10) {
            String stringExtra = intent.getStringExtra(CatfishDataStorage.NIC_NAME);
            this.mHelper.setHeaderName(this, stringExtra);
            if (!this.mName.equals(stringExtra)) {
                this.mMenu.findItem(R.id.edit_name).setTitle(getResources().getString(R.string.reset_alias));
            }
        } else if (i == 19) {
            Log.d(TAG, "on rc_comment");
            ((Profile) this.mData.get(1)).setStatusLike(intent.getIntExtra(AlbusModelObject.LIKE_COUNT, 0));
            ((Profile) this.mData.get(1)).setCommentCount(intent.getIntExtra(AlbusModelObject.COMMENT_COUNT, 0));
            ((Profile) this.mData.get(1)).setMeLikeThisStatus(intent.getIntExtra(AlbusModelObject.ME_LIKE_STATUS, -1));
            this.mAdapter.notifyDataSetChanged();
        }
    }

    public void onBackPressed() {
        super.onBackPressed();
    }

    public void onCatfizStarted() {
        Log.d(TAG, "userid=" + this.mId);
        getAllData();
    }

    public void onCatfizStopped() {
    }

    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        Log.d(TAG, "onCreate ProfilesFriendActivity");
        this.mCatfiz = new Catfiz(this, this, new SignalBinderComment());
        if (Utils.hasLollipop()) {
            setTaskDescription(new TaskDescription(null, null, getResources().getColor(R.color.red)));
            Window window = getWindow();
            window.clearFlags(67108864);
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.setStatusBarColor(getResources().getColor(R.color.red2));
        }
        this.mHelper = (FadingActionBarHelper) new FadingActionBarHelper().actionBarBackground((int) R.drawable.bg_actbar).headerLayout(R.layout.activity_profile_header).contentLayout(R.layout.activity_profile_listview);
        setContentView(this.mHelper.createView((Context) this));
        ActionBar supportActionBar = getSupportActionBar();
        Configuration configuration = getResources().getConfiguration();
        if (Utils.hasJellyBeanMR1() && configuration.getLayoutDirection() == 1) {
            supportActionBar.setHomeAsUpIndicator((int) R.drawable.ic_back_light_reverse);
        } else {
            supportActionBar.setHomeAsUpIndicator((int) R.drawable.ic_back_light);
        }
        this.mHelper.initActionBar(this);
        Intent intent = getIntent();
        this.mId = intent.getStringExtra(CatfishRESTAPI.CFCOMPACT_STICKERID);
        this.mCivImg = this.mHelper.getProfilePicture();
        this.mLocalImageLoader = new LocalImageLoader(this, this.mHelper);
        this.mLocalImageLoader.setBitmapSize(PromotedPhotoLoader.DEFAULT_PROFILEPHOTO_SIZE);
        this.mName = intent.getStringExtra(CatfishDataStorage.NIC_NAME);
        this.mHelper.HeadClick().setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                if (ProfilesFriendActivity.this.mHelper.hasProfilePicture()) {
                    ProfilesFriendActivity.this.ImageViewer();
                } else {
                    Toast.makeText(ProfilesFriendActivity.this, "No Profile Picture!", 0).show();
                }
            }
        });
        this.mHelper.setHeaderName(this, this.mName);
        Log.d(TAG, "bitmap pp onCreate = " + this.mDrawablePp);
        this.mList = (ListView) findViewById(16908298);
        this.mList.setOnItemClickListener(new OnItemClickListener() {
            public void onItemClick(AdapterView adapterView, View view, int i, long j) {
                if (((Integer) view.findViewById(R.id.tag_holder).getTag()).intValue() == 1) {
                    ProfilesFriendActivity.this.finish();
                    Intent intent = new Intent(ProfilesFriendActivity.this, ChatGroupConvActivity.class);
                    intent.putExtra(AlbusModelObject.PAGE, 1);
                    intent.putExtra(AlbusModelObject.FRIEND_ID, ProfilesFriendActivity.this.mId);
                    intent.putExtra(HTTP.IDENTITY_CODING, 4);
                    intent.putExtra(CatfishDataStorage.NIC_NAME, ProfilesFriendActivity.this.mName);
                    ProfilesFriendActivity.this.startActivity(intent);
                }
            }
        });
        LongMessageCacheParams longMessageCacheParams = new LongMessageCacheParams("");
        longMessageCacheParams.memCacheSize = (Utils.getMemoryClass(this) * AccessibilityNodeInfoCompat.ACTION_DISMISS) / 3;
        longMessageCacheParams.diskCacheEnabled = false;
        this.mLongMessageWorker = new LongMessageWorker(this);
        this.mLongMessageWorker.setLongMessageCache(LongMessageCache.findOrCreateCache((FragmentActivity) this, longMessageCacheParams));
        this.mLongMessageWorker.setLoadingMessage(getString(R.string.loading_message));
        ImageCacheParams imageCacheParams = new ImageCacheParams("");
        imageCacheParams.memCacheSize = (Utils.getMemoryClass(this) * AccessibilityNodeInfoCompat.ACTION_DISMISS) / 3;
        imageCacheParams.diskCacheEnabled = false;
        this.mThumbnailLoader = new ThumbnailLoader(this);
        this.mThumbnailLoader.setImageCache(ImageCache.findOrCreateCache((FragmentActivity) this, imageCacheParams));
        this.mUserPhotoLoader = new UserPhotoLoader(this, imageCacheParams);
        this.mData = new ArrayList();
        this.mLikeCount = getIntent().getIntExtra(AlbusModelObject.STATUS_LIKE, 0);
        this.mIsLike = getIntent().getIntExtra(AlbusModelObject.ME_LIKE_STATUS, 0);
        this.mAdapter = new ProfileFriendAdapter(this, this.mData, this.mId, this.mName, getIntent().getLongExtra(AlbusModelObject.STATUS_SEQUENCE, 0), this.mThumbnailLoader, this.mUserPhotoLoader, this.mLongMessageWorker);
        this.mList.setAdapter(this.mAdapter);
        this.mAdapter.setAlias(this.mName);
    }

    public boolean onCreateOptionsMenu(Menu menu) {
        this.mMenu = menu;
        getMenuInflater().inflate(R.menu.actionbar_profile, menu);
        this.mItemResetName = menu.findItem(R.id.reset_name);
        this.mItemEditName = menu.findItem(R.id.edit_name);
        MenuItem findItem = menu.findItem(R.id.mute);
        MenuItem findItem2 = menu.findItem(R.id.edit_photo);
        MenuItem findItem3 = menu.findItem(R.id.delete_group);
        MenuItem findItem4 = menu.findItem(R.id.account);
        this.mItemEditName.setTitle(getString(R.string.alias));
        findItem3.setVisible(false);
        findItem.setVisible(false);
        findItem2.setVisible(false);
        findItem4.setVisible(false);
        return super.onCreateOptionsMenu(menu);
    }

    public void onDestroy() {
        super.onDestroy();
        this.mCatfiz.destroy();
        this.mLocalImageLoader = null;
        this.mThumbnailLoader = null;
    }

    public boolean onOptionsItemSelected(MenuItem menuItem) {
        Intent intent;
        Bundle bundle;
        switch (menuItem.getItemId()) {
            case 16908332:
                finish();
                return true;
            case R.id.qrcode:
                intent = new Intent(this, MenuActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 6);
                intent.putExtra(HTTP.IDENTITY_CODING, 4);
                Log.d(TAG, "id + name friend =" + this.mId + this.mUser.getName());
                String name = this.mUser.getName();
                intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, this.mId);
                intent.putExtra(CatfishDataStorage.NIC_NAME, name);
                startActivityForResult(intent, this.PROFILE_VIEW);
                return true;
            case R.id.edit_name:
                intent = new Intent(this, CustomActionBarPageActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 15);
                intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, this.mId);
                intent.putExtra(CatfishDataStorage.NIC_NAME, this.mName);
                startActivity(intent);
                return true;
            case R.id.reset_name:
                this.mCatfiz.updateFriendAlias(this.mId, "", new Callback() {
                    public void onError() {
                    }

                    public void onSuccess() {
                        ProfilesFriendActivity.this.reloadProfile();
                    }
                });
                return true;
            case R.id.copy_nic:
                if (AlbusUtils.copyToClipboard(this, this.mId)) {
                    AlbusUtils.setToastView(this, getResources().getString(R.string.nic_copied));
                    return true;
                }
                AlbusUtils.setToastView(this, getResources().getString(R.string.failed_copy_to_cb));
                return true;
            case R.id.unfriend:
                bundle = new Bundle();
                bundle.putString(CatfishDataStorage.NIC_NAME, this.mUser.getName());
                bundle.putInt(AlbusModelObject.DIALOG, 28);
                AlbusDialog.showDialog(28, new DialogProfileFriend(), this, bundle, getSupportFragmentManager());
                return true;
            case R.id.block:
                bundle = new Bundle();
                bundle.putString(CatfishDataStorage.NIC_NAME, this.mUser.getName());
                bundle.putInt(AlbusModelObject.DIALOG, 29);
                AlbusDialog.showDialog(29, new DialogProfileFriend(), this, bundle, getSupportFragmentManager());
                return true;
            default:
                return super.onOptionsItemSelected(menuItem);
        }
    }

    protected void onPause() {
        super.onPause();
        if (this.mLocalImageLoader != null) {
            this.mLocalImageLoader.setExitTasksEarly(true);
        }
        if (this.mThumbnailLoader != null) {
            this.mThumbnailLoader.setExitTasksEarly(true);
        }
    }

    public boolean onPrepareOptionsMenu(Menu menu) {
        setAliasMenu();
        return super.onPrepareOptionsMenu(menu);
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
        if (!(this.mbFirstEnter || this.mId == null)) {
            this.mCatfiz.chatFetchFriend(this.mId, new CheckCommentUnreadCb(this));
        }
        if (this.mLocalImageLoader != null) {
            this.mLocalImageLoader.setExitTasksEarly(false);
        }
        if (this.mThumbnailLoader != null) {
            this.mThumbnailLoader.setExitTasksEarly(false);
        }
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.start();
        }
    }

    public boolean onSignalEvent(Signal signal) {
        Log.d(TAG, "onSignalEvent: " + signal);
        return true;
    }

    public boolean onSignalEventNewMessage(Signal signal, User user, int i, String str) {
        Log.d(TAG, "onSignalEventNewMessage: " + signal + ", " + i + ", " + str);
        if (signal == Signal.CHAT_MESSAGE) {
            if (str == null || !str.equals(this.mId)) {
                Log.d(TAG, "Recipient NOT match friend ID");
            } else {
                Log.d(TAG, "Recipient match friend ID");
                fetchFriendStatusComment();
            }
        }
        if (signal == Signal.FRIEND_PROFILE_UPDATE) {
            Log.d(TAG, "Friend Profile Updated:" + user.getId() + " " + user.getName());
            if (user.getId().equals(this.mId)) {
                reloadProfile();
            }
        }
        return false;
    }

    public boolean onSignalUpdateProgress(Signal signal, String str, int i, int i2) {
        Log.d(TAG, "progresss<String, int> : " + str + ", progresss : " + i + ", state " + i2);
        this.mAdapter.setUpdateProgress(str, i, i2);
        this.mAdapter.notifyDataSetChanged();
        return false;
    }

    public boolean onSignalUpdateProgress(Signal signal, Map map, Map map2) {
        Log.d(TAG, "onSignalUpdateProgress<map>");
        this.mAdapter.setProgress(map, map2);
        this.mAdapter.notifyDataSetChanged();
        return false;
    }

    protected void onStart() {
        super.onStart();
    }

    public void onStop() {
        super.onStop();
        this.mCatfiz.finish();
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.stop();
        }
    }

    public void sendLike(int i) {
        this.mIsLike = i;
        int i2 = i;
        this.mCatfiz.userFriendLikeUpdate(this.mId, i2, getIntent().getLongExtra(AlbusModelObject.STATUS_SEQUENCE, 0), new OnSendLikeCallback() {
            public void onData(final int i) {
                Log.d(ProfilesFriendActivity.TAG, "result like count end :" + i);
                ProfilesFriendActivity.this.runOnUiThread(new Runnable() {
                    public void run() {
                        Iterator it = ProfilesFriendActivity.this.mData.iterator();
                        while (it.hasNext()) {
                            Profile profile = (Profile) it.next();
                            if (profile.getListItemType() == 3) {
                                profile.setStatusLike(i);
                                break;
                            }
                        }
                        ProfilesFriendActivity.this.mAdapter.notifyDataSetChanged();
                    }
                });
            }

            public void onError() {
            }

            public void onSuccess() {
            }
        });
    }
}
