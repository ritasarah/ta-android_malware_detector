package com.albus.activity;

import android.app.ActivityManager.TaskDescription;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.app.NavUtils;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.view.KeyEvent;
import android.view.MenuItem;
import android.view.View;
import android.view.Window;
import android.view.inputmethod.InputMethodManager;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.DialogUI;
import com.albus.fragment.BroadcastFragment;
import com.albus.util.AlbusModelObject;
import com.catfiz.R;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;

public class BroadcastActivity extends ActionBarActivity {
    private static final String TAG = "BroadcastActivity";
    private BroadcastFragment mBroadcastFragment = null;

    private void backAction() {
        Log.d(TAG, "any recipient?" + this.mBroadcastFragment.isAnyRecipient());
        Log.d(TAG, "any message?" + this.mBroadcastFragment.isAnyMessage());
        if (this.mBroadcastFragment.isAnyRecipient() && this.mBroadcastFragment.isAnyMessage()) {
            backToHome();
            return;
        }
        Bundle bundle = new Bundle();
        bundle.putInt(AlbusModelObject.DIALOG, 0);
        AlbusDialog.showDialog(0, new DialogUI().getDialogInterface(), this, bundle, getSupportFragmentManager());
    }

    public void backToHome() {
        Intent parentActivityIntent = NavUtils.getParentActivityIntent(this);
        parentActivityIntent.setFlags(603979776);
        NavUtils.navigateUpTo(this, parentActivityIntent);
    }

    public void dismissKeyboard(View view) {
        ((InputMethodManager) getSystemService("input_method")).hideSoftInputFromWindow(view.getWindowToken(), 0);
    }

    public String getSelectedId() {
        return getIntent().getStringExtra(AlbusModelObject.SELECTED_FRIENDID);
    }

    public String getSelectedName() {
        return getIntent().getStringExtra(AlbusModelObject.SELECTED_FRIEND);
    }

    public void onBackPressed() {
        super.onBackPressed();
    }

    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        setContentView((int) R.layout.activity_view);
        ActionBar supportActionBar = getSupportActionBar();
        supportActionBar.setDisplayHomeAsUpEnabled(true);
        supportActionBar.setHomeAsUpIndicator((int) R.drawable.ic_close_dark);
        if (Utils.hasLollipop()) {
            setTaskDescription(new TaskDescription(null, null, getResources().getColor(R.color.red)));
            Window window = getWindow();
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.clearFlags(67108864);
            window.setStatusBarColor(getResources().getColor(R.color.black8));
        }
        if (bundle == null) {
            FragmentTransaction beginTransaction = getSupportFragmentManager().beginTransaction();
            this.mBroadcastFragment = BroadcastFragment.newInstance();
            beginTransaction.replace(R.id.fl_view, this.mBroadcastFragment);
            beginTransaction.commit();
        }
    }

    public boolean onKeyDown(int i, KeyEvent keyEvent) {
        Log.d(TAG, "onKeyDown" + i);
        if (keyEvent.getAction() != 0 || i != 4) {
            return false;
        }
        if (this.mBroadcastFragment.mBottomBar.isAttachOpened()) {
            this.mBroadcastFragment.mBottomBar.closeAttachAndEmoPanel();
            return false;
        } else if (!this.mBroadcastFragment.mBottomBar.closeAttachAndEmoPanel()) {
            return false;
        } else {
            backAction();
            return super.onKeyDown(i, keyEvent);
        }
    }

    public boolean onOptionsItemSelected(MenuItem menuItem) {
        switch (menuItem.getItemId()) {
            case 16908332:
                backAction();
                return true;
            default:
                return super.onOptionsItemSelected(menuItem);
        }
    }

    protected void onPause() {
        super.onPause();
    }

    public void showKeyboard(View view) {
        ((InputMethodManager) getSystemService("input_method")).toggleSoftInput(2, 0);
    }
}
