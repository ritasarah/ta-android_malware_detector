package com.albus.activity;

import android.app.ActivityManager.TaskDescription;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.NavUtils;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.util.DisplayMetrics;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import com.albus.adapter.ProfileGroupAdapter;
import com.albus.crop.Crop;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.DialogUI;
import com.albus.media.ImageCache.ImageCacheParams;
import com.albus.media.ThumbnailLoader;
import com.albus.media.UserPhotoLoader;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.util.FadingActionBarHelper;
import com.albus.util.FileUtils;
import com.albus.util.GroupMemberMenuModel;
import com.albus.view.CustomImageView;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Callback.FetchGroupCallback;
import com.catfiz.base.Callback.IsGroupMute;
import com.catfiz.base.Callback.OnGroupDeleted;
import com.catfiz.base.Callback.UserFetchGroupMembersCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.Constant;
import com.catfiz.base.ICatfiz;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.media.ImageReScaler;
import com.catfiz.model.Group;
import com.catfiz.model.Profile;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishService;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.signal.Signal;
import com.catfiz.signal.SignalBinderGroup;
import com.catfiz.util.Log;
import com.catfiz.util.MediaFilePath;
import com.catfiz.util.MimeTypeParser;
import com.catfiz.util.Utils;
import java.io.File;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.HttpStatus;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.apache.http.protocol.HTTP;

public class ProfilesGroupActivity extends ActionBarActivity implements ICatfiz {
    public static final int MEDIA_TYPE_IMAGE = 1;
    private static final String TAG = "ProfilesGroupActivity";
    private ProfileGroupAdapter mAdapter = null;
    private Catfiz mCatfiz = null;
    private CustomImageView mCivImg = null;
    private List mData = null;
    private Drawable mDrawablePP = null;
    private Uri mFileUri = null;
    private Group mGroup = null;
    private FadingActionBarHelper mHelper = null;
    private boolean mIsAdmin = false;
    private boolean mIsMute = false;
    private ListView mList = null;
    private LocalImageLoader mLocalImageLoader = null;
    private List mMembers = null;
    private Menu mMenu = null;
    private MenuItem mMenuItem = null;
    private String mName = "";
    private Uri mPpUri = null;
    private UserPhotoLoader mUserPhotoLoader = null;

    class FetchGroupProfileCb implements FetchGroupCallback {
        private WeakReference mThisActivityRef;

        public FetchGroupProfileCb(ProfilesGroupActivity profilesGroupActivity) {
            this.mThisActivityRef = new WeakReference(profilesGroupActivity);
        }

        public void onData(Group group, String str) {
            ProfilesGroupActivity profilesGroupActivity = (ProfilesGroupActivity) this.mThisActivityRef.get();
            if (profilesGroupActivity != null) {
                if (group != null) {
                    profilesGroupActivity.setProfileGroupData(group);
                    Log.d(ProfilesGroupActivity.TAG, "Success get:" + group.getName() + " " + group.getNotes());
                    return;
                }
                Log.d(ProfilesGroupActivity.TAG, "Fail get group data");
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    class LocalImageLoader extends ThumbnailLoader {
        private String mGroupID = null;
        private FadingActionBarHelper mHelper;
        private int mRequiredSize = 0;

        public LocalImageLoader(Context context, FadingActionBarHelper fadingActionBarHelper, int i, String str) {
            super(context);
            this.mGroupID = str;
            this.mRequiredSize = i;
            this.mHelper = fadingActionBarHelper;
            if (this.mRequiredSize == 0) {
                DisplayMetrics displayMetrics = new DisplayMetrics();
                ((FragmentActivity) this.mContext).getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
                this.mRequiredSize = displayMetrics.heightPixels < displayMetrics.widthPixels ? displayMetrics.heightPixels : displayMetrics.widthPixels;
            }
        }

        protected Bitmap processBitmap(Object obj) {
            String valueOf = String.valueOf(obj);
            return !valueOf.isEmpty() ? ImageReScaler.rescaleFromFilePath(valueOf, this.mRequiredSize) : this.mGroupID != null ? CatfishPhotoStorage.getPoolPhotoInDBThread(this.mContext, this.mGroupID) : null;
        }

        protected void setImageBitmap(ImageView imageView, Bitmap bitmap) {
            if (bitmap != null) {
                Drawable bitmapDrawable = new BitmapDrawable(this.mContext.getResources(), bitmap);
                if (Utils.hasJellyBean()) {
                    imageView.setBackground(bitmapDrawable);
                } else {
                    imageView.setBackgroundDrawable(bitmapDrawable);
                }
                this.mHelper.hidePPDummy();
            }
        }
    }

    private void backToGroupList() {
        Intent parentActivityIntent = NavUtils.getParentActivityIntent(this);
        parentActivityIntent.setFlags(603979776);
        NavUtils.navigateUpTo(this, parentActivityIntent);
    }

    private void backToGroupProfile() {
        Intent intent = new Intent(this, ProfilesGroupActivity.class);
        intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, this.mGroup.getGroupID());
        intent.putExtra(CatfishDataStorage.NIC_NAME, this.mGroup.getName());
        intent.putExtra(AlbusModelObject.IMAGE, this.mGroup.getImagePath());
        intent.putExtra(AlbusModelObject.OWNER, this.mGroup.getOwner().getId());
        startActivity(intent.setFlags(335544320));
        overridePendingTransition(0, 0);
    }

    private void beginCrop(Uri uri) {
        new Crop(uri).output(Uri.fromFile(new File(getCacheDir(), AlbusModelObject.CACHE_CROP_GROUP)), PreferenceManager.getDefaultSharedPreferences(this).getBoolean("photoprofile_transparency_v2", false)).asSquare().start(this);
    }

    private void getGroupData() {
        this.mCatfiz.fetchGroup(this.mGroup.getGroupID(), new FetchGroupProfileCb(this));
    }

    private static File getOutputMediaFile(int i) {
        File file = new File(CatfishPhotoStorage.getCacheStorageDir(null));
        if (file.exists() || file.mkdirs()) {
            return i == MEDIA_TYPE_IMAGE ? new File(file.getPath() + File.separator + AlbusModelObject.CAPTURED_PROFILE_GROUP_PIC) : null;
        } else {
            Log.d(TAG, "failed to create directory");
            return null;
        }
    }

    private void handleCropResult(int i, Intent intent) {
        if (i == -1) {
            this.mPpUri = Crop.getOutput(intent);
            Log.d(TAG, "save pp with uri = " + this.mPpUri);
            String replace = this.mGroup.getGroupID().replace(":", "_");
            FileUtils.copyFile(MediaFilePath.getPath(this, this.mPpUri), CatfishPhotoStorage.mPoolProfilePicPath, replace);
            if (new File(CatfishPhotoStorage.mPoolProfilePicPath + replace).exists()) {
                Drawable createFromPath = Drawable.createFromPath(CatfishPhotoStorage.mPoolProfilePicPath + replace);
                if (this.mCivImg != null) {
                    this.mCivImg.setBackgroundDrawable(createFromPath);
                    this.mHelper.hidePPDummy();
                }
                this.mCatfiz.groupUploadPhoto(this.mName, this.mGroup.getGroupID(), CatfishPhotoStorage.mPoolProfilePicPath + replace, new Callback() {
                    public void onError() {
                        Log.d(ProfilesGroupActivity.TAG, "upload group pp error");
                    }

                    public void onSuccess() {
                        AlbusUtils.setToastView(ProfilesGroupActivity.this, ProfilesGroupActivity.this.getString(R.string.image_upload));
                    }
                });
                return;
            }
            Log.d(TAG, "picture File doesn't exists");
        } else if (i == HttpStatus.SC_NOT_FOUND) {
            AlbusUtils.setToastView(this, Crop.getError(intent).getMessage());
        } else {
            AlbusUtils.setToastView(this, getString(R.string.cancel_crop));
        }
    }

    private void muteHandle(boolean z) {
        if (!z) {
            AlbusUtils.setToastView(this, getString(R.string.group_mute_fail));
        } else if (this.mIsMute) {
            AlbusUtils.setToastView(this, getString(R.string.mute_on));
        } else {
            AlbusUtils.setToastView(this, getString(R.string.mute_off));
        }
    }

    private void setProfileGroupData(Group group) {
        this.mData.clear();
        this.mGroup = group;
        if (this.mGroup.getGroupID().split(":")[0].equals(CatfishService.getUserPIN())) {
            this.mGroup.setType(Constant.GROUP_OPEN);
        } else {
            this.mGroup.setType(Constant.GROUP_CLOSE);
        }
        this.mData.clear();
        Profile profile = new Profile();
        if (this.mGroup.getName() != null) {
            profile.setGroup(this.mGroup);
            profile.setListItemType(MEDIA_TYPE_IMAGE);
            this.mData.add(profile);
        }
        if (this.mGroup.getNotes() != null) {
            profile = new Profile();
            profile.setGroup(this.mGroup);
            profile.setListItemType(4);
            this.mData.add(profile);
        }
        if (this.mGroup.getMembersCount() != 0) {
            profile = new Profile();
            profile.setGroup(this.mGroup);
            profile.setListItemType(3);
            this.mData.add(profile);
        }
        if (this.mGroup.getType().equals(Constant.GROUP_OPEN)) {
            profile = new Profile();
            profile.setGroup(this.mGroup);
            profile.setListItemType(2);
            this.mData.add(profile);
        }
        if (this.mMembers.size() != 0) {
            for (User user : this.mMembers) {
                Profile profile2 = new Profile();
                profile2.setGroup(this.mGroup);
                profile2.setUser(user);
                profile2.setListItemType(6);
                this.mData.add(profile2);
            }
        }
        if (this.mGroup.getGallery() != null) {
            profile = new Profile();
            profile.setGroup(this.mGroup);
            profile.setListItemType(5);
            this.mData.add(profile);
        }
        this.mAdapter.notifyDataSetChanged();
    }

    public void ImageViewer(String str) {
        Intent intent = new Intent(this, ProfilesImageViewerActivity.class);
        intent.putExtra(HTTP.IDENTITY_CODING, 5);
        intent.putExtra(CatfishDataStorage.NIC_NAME, this.mName);
        intent.putExtra(AlbusModelObject.IMAGE, str);
        intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, this.mGroup.getGroupID());
        startActivityForResult(intent, 23);
    }

    public void capturePhotoCam() {
        Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
        this.mFileUri = Uri.fromFile(getOutputMediaFile(MEDIA_TYPE_IMAGE));
        intent.putExtra("output", this.mFileUri);
        startActivityForResult(intent, 14);
    }

    public boolean checkIsFriends(final GroupMemberMenuModel groupMemberMenuModel) {
        this.mCatfiz.userCheckIsFriend(groupMemberMenuModel.getUser().getId().toUpperCase(Locale.US), new Callback() {
            public void onError() {
                groupMemberMenuModel.setIsFriend(true);
            }

            public void onSuccess() {
                groupMemberMenuModel.setIsFriend(false);
            }
        });
        return groupMemberMenuModel.isFriend();
    }

    public void choosePhotoByFile() {
        Crop.pickImage(this);
    }

    public void dropGroup() {
        this.mCatfiz.dropGroup(this.mGroup.getGroupID(), new OnGroupDeleted() {
            public void onError() {
            }

            public void onSuccess() {
                AlbusUtils.setToastView(ProfilesGroupActivity.this, ProfilesGroupActivity.this.getString(R.string.you_del_group));
                ProfilesGroupActivity.this.backToGroupList();
            }

            public void onSuccess(String str) {
            }
        });
    }

    public void getAllData() {
        this.mHelper.getLoadingDialog().setVisibility(0);
        this.mCatfiz.groupRefreshMemberList(this.mGroup.getGroupID(), null);
        this.mCatfiz.groupFetchConferenceMember(this.mGroup.getGroupID(), new UserFetchGroupMembersCallback() {
            public void onData(List list) {
                Log.d(ProfilesGroupActivity.TAG, "size = " + list.size());
                if (list.size() <= 0) {
                    ProfilesGroupActivity.this.getAllData();
                    return;
                }
                ProfilesGroupActivity.this.mHelper.getLoadingDialog().setVisibility(8);
                for (Object obj : list) {
                    if (obj.getId().equals(ProfilesGroupActivity.this.mGroup.getGroupID().split(":")[0])) {
                        break;
                    }
                }
                Object obj2 = null;
                if (obj2 != null) {
                    list.remove(obj2);
                    list.add(0, obj2);
                }
                ProfilesGroupActivity.this.mMembers.clear();
                ProfilesGroupActivity.this.mMembers.addAll(list);
                ProfilesGroupActivity.this.getGroupData();
            }

            public void onError() {
            }

            public void onSuccess() {
            }
        });
    }

    public void leaveGroup() {
        this.mCatfiz.leaveGroup(this.mGroup.getGroupID(), new OnGroupDeleted() {
            public void onError() {
            }

            public void onSuccess() {
                AlbusUtils.setToastView(ProfilesGroupActivity.this, ProfilesGroupActivity.this.getString(R.string.you_leave_group));
                ProfilesGroupActivity.this.backToGroupList();
            }

            public void onSuccess(String str) {
            }
        });
    }

    protected void onActivityResult(int i, int i2, Intent intent) {
        super.onActivityResult(i, i2, intent);
        Log.d(TAG, "onActivityResult:" + i + " " + i2);
        if (i2 != -1) {
            return;
        }
        if (i == 22) {
            if (!this.mName.equals(intent.getStringExtra(CatfishDataStorage.NIC_NAME))) {
                this.mMenu.findItem(R.id.edit_name).setTitle(getResources().getString(R.string.reset_group_name));
            }
        } else if (i == Crop.REQUEST_PICK) {
            beginCrop(intent.getData());
        } else if (i == Crop.REQUEST_CROP) {
            handleCropResult(i2, intent);
        } else if (i == 23) {
            handleCropResult(i2, intent);
        } else if (i == 14) {
            if (i2 == -1) {
                Uri uri = this.mFileUri;
                beginCrop(uri);
                Log.d(TAG, "activityResult-Retrieve uri=" + uri);
                if (uri != null) {
                    Log.d(TAG, "Using URI");
                }
            }
        } else if (i == 20) {
            ((Profile) this.mData.get(0)).getGroup().setName(intent.getStringExtra(CatfishDataStorage.NIC_NAME));
            this.mAdapter.notifyDataSetChanged();
        } else if (i == 21) {
            String stringExtra = intent.getStringExtra(AlbusModelObject.NOTES);
            Log.d(TAG, "note=" + stringExtra);
            this.mCatfiz.groupChangeNote(stringExtra, this.mGroup, null);
            ((Profile) this.mData.get(MEDIA_TYPE_IMAGE)).getGroup().setNotes(stringExtra);
            this.mAdapter.notifyDataSetChanged();
        } else {
            Log.d(TAG, "where do you set result in (value requestcode)= " + i);
        }
    }

    public void onBackPressed() {
        super.onBackPressed();
    }

    public void onCatfizStarted() {
        getAllData();
    }

    public void onCatfizStopped() {
    }

    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        Log.d(TAG, "onCreate ProfilesGroupActivity");
        this.mCatfiz = new Catfiz(this, this, new SignalBinderGroup());
        String stringExtra = getIntent().getStringExtra(CatfishRESTAPI.CFCOMPACT_STICKERID);
        Log.d(TAG, "groupID = " + stringExtra);
        this.mGroup = new Group(stringExtra);
        String stringExtra2 = getIntent().getStringExtra(AlbusModelObject.OWNER);
        Log.d(TAG, "owner = " + stringExtra2);
        if (!(stringExtra2 == null || stringExtra2.isEmpty() || !stringExtra2.equals(CatfishService.getUserPIN()))) {
            this.mIsAdmin = true;
        }
        this.mMembers = new ArrayList();
        ImageCacheParams imageCacheParams = new ImageCacheParams("");
        imageCacheParams.memCacheSize = (AccessibilityNodeInfoCompat.ACTION_DISMISS * Utils.getMemoryClass(this)) / 3;
        imageCacheParams.diskCacheEnabled = false;
        this.mUserPhotoLoader = new UserPhotoLoader(this, imageCacheParams);
        if (Utils.hasLollipop()) {
            setTaskDescription(new TaskDescription(null, null, getResources().getColor(R.color.red)));
            Window window = getWindow();
            window.clearFlags(67108864);
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.setStatusBarColor(getResources().getColor(R.color.red2));
        }
        this.mHelper = (FadingActionBarHelper) new FadingActionBarHelper().actionBarBackground((int) R.drawable.bg_actbar).headerLayout(R.layout.activity_profile_header).contentLayout(R.layout.activity_profile_listview);
        setContentView(this.mHelper.createView((Context) this));
        this.mHelper.initActionBar(this);
        ActionBar supportActionBar = getSupportActionBar();
        Configuration configuration = getResources().getConfiguration();
        if (Utils.hasJellyBeanMR1() && configuration.getLayoutDirection() == MEDIA_TYPE_IMAGE) {
            supportActionBar.setHomeAsUpIndicator((int) R.drawable.ic_back_light_reverse);
        } else {
            supportActionBar.setHomeAsUpIndicator((int) R.drawable.ic_back_light);
        }
        this.mCivImg = this.mHelper.getProfilePicture();
        this.mLocalImageLoader = new LocalImageLoader(this, this.mHelper, 0, stringExtra);
        this.mLocalImageLoader.loadImage((Object) getIntent().getStringExtra(AlbusModelObject.IMAGE), this.mCivImg);
        this.mName = getIntent().getStringExtra(CatfishDataStorage.NIC_NAME);
        this.mHelper.HeadClick().setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                String stringExtra = ProfilesGroupActivity.this.getIntent().getStringExtra(AlbusModelObject.IMAGE);
                if (!stringExtra.isEmpty()) {
                    ProfilesGroupActivity.this.ImageViewer(stringExtra);
                }
            }
        });
        this.mHelper.setHeaderName(this, this.mName);
        this.mList = (ListView) findViewById(16908298);
        this.mData = new ArrayList();
        this.mList.setOnItemClickListener(new OnItemClickListener() {
            public void onItemClick(AdapterView adapterView, View view, int i, long j) {
                int intValue = ((Integer) view.findViewById(R.id.tag_holder).getTag()).intValue();
                Log.d(ProfilesGroupActivity.TAG, "ON ITEM CLICK type=" + intValue);
                Intent intent;
                switch (intValue) {
                    case ProfilesGroupActivity.MEDIA_TYPE_IMAGE /*1*/:
                        Log.d(ProfilesGroupActivity.TAG, "ON ITEM CLICK PG_NAME");
                        if (ProfilesGroupActivity.this.mGroup.getType().equals(Constant.GROUP_OPEN)) {
                            intent = new Intent(ProfilesGroupActivity.this, CustomActionBarPageActivity.class);
                            intent.putExtra(AlbusModelObject.PAGE, 16);
                            intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, ProfilesGroupActivity.this.mGroup.getGroupID());
                            intent.putExtra(CatfishDataStorage.NIC_NAME, ProfilesGroupActivity.this.mName);
                            ProfilesGroupActivity.this.startActivityForResult(intent, 20);
                            return;
                        }
                        return;
                    case e.c /*2*/:
                        Log.d(ProfilesGroupActivity.TAG, "ON ITEM CLICK PG_INVITE");
                        intent = new Intent(ProfilesGroupActivity.this, CustomActionBarPageActivity.class);
                        intent.putExtra(AlbusModelObject.PAGE, 11);
                        intent.putExtra(HTTP.IDENTITY_CODING, 5);
                        intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, ProfilesGroupActivity.this.mGroup.getGroupID());
                        intent.putExtra(CatfishDataStorage.NIC_NAME, ProfilesGroupActivity.this.mGroup.getName());
                        intent.putExtra(AlbusModelObject.NOTES, ProfilesGroupActivity.this.mGroup.getNotes());
                        intent.putExtra(AlbusModelObject.OWNER, ProfilesGroupActivity.this.mGroup.getOwner().getId());
                        ProfilesGroupActivity.this.startActivity(intent);
                        return;
                    case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                        Log.d(ProfilesGroupActivity.TAG, "ON ITEM CLICK PG_MEMBER");
                        intent = new Intent(ProfilesGroupActivity.this, MenuActivity.class);
                        intent.putExtra(AlbusModelObject.PAGE, 12);
                        intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, ProfilesGroupActivity.this.mGroup.getGroupID());
                        intent.putExtra(CatfishDataStorage.NIC_NAME, ProfilesGroupActivity.this.mGroup.getName());
                        intent.putExtra(AlbusModelObject.NOTES, ProfilesGroupActivity.this.mGroup.getNotes());
                        intent.putExtra(AlbusModelObject.OWNER, ProfilesGroupActivity.this.mGroup.getOwner().getId());
                        ProfilesGroupActivity.this.startActivity(intent);
                        return;
                    case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                        Log.d(ProfilesGroupActivity.TAG, "ON ITEM CLICK PG_NOTE");
                        intent = new Intent(ProfilesGroupActivity.this, CustomActionBarPageActivity.class);
                        intent.putExtra(AlbusModelObject.PAGE, 28);
                        intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, ProfilesGroupActivity.this.mGroup.getGroupID());
                        intent.putExtra(CatfishDataStorage.NIC_NAME, ProfilesGroupActivity.this.mGroup.getName());
                        intent.putExtra(AlbusModelObject.NOTES, ProfilesGroupActivity.this.mGroup.getNotes());
                        intent.putExtra(AlbusModelObject.OWNER, ProfilesGroupActivity.this.mGroup.getOwner().getId());
                        ProfilesGroupActivity.this.startActivityForResult(intent, 21);
                        return;
                    case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                        TextView textView = (TextView) view.findViewById(R.id.tv_member_name);
                        String str = (String) textView.getTag();
                        long longValue = ((Long) ((TextView) view.findViewById(R.id.tv_member_status)).getTag()).longValue();
                        if (str.equals(CatfishService.getUserPIN())) {
                            intent = new Intent(ProfilesGroupActivity.this, ProfilesActivity.class);
                        } else {
                            Intent intent2 = new Intent(ProfilesGroupActivity.this, ProfilesFriendActivity.class);
                            intent2.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, str);
                            intent2.putExtra(CatfishDataStorage.NIC_NAME, textView.getText());
                            intent2.putExtra(ServerMessageDataStorage.SEQUENCE, longValue);
                            intent = intent2;
                        }
                        ProfilesGroupActivity.this.startActivity(intent);
                        return;
                    default:
                        return;
                }
            }
        });
        this.mAdapter = new ProfileGroupAdapter(this, this.mData, this.mUserPhotoLoader);
        this.mList.setAdapter(this.mAdapter);
    }

    public boolean onCreateOptionsMenu(Menu menu) {
        this.mMenu = menu;
        getMenuInflater().inflate(R.menu.actionbar_profile, menu);
        MenuItem findItem = menu.findItem(R.id.qrcode);
        MenuItem findItem2 = menu.findItem(R.id.copy_nic);
        MenuItem findItem3 = menu.findItem(R.id.edit_name);
        MenuItem findItem4 = menu.findItem(R.id.edit_photo);
        MenuItem findItem5 = menu.findItem(R.id.unfriend);
        MenuItem findItem6 = menu.findItem(R.id.block);
        MenuItem findItem7 = menu.findItem(R.id.delete_group);
        MenuItem findItem8 = menu.findItem(R.id.account);
        MenuItem findItem9 = menu.findItem(R.id.reset_name);
        final MenuItem findItem10 = menu.findItem(R.id.mute);
        findItem9.setVisible(false);
        findItem.setVisible(false);
        findItem2.setVisible(false);
        findItem5.setVisible(false);
        findItem6.setVisible(false);
        findItem8.setVisible(false);
        Log.d(TAG, "check is group mute");
        this.mCatfiz.isGroupNotifMute(this.mGroup.getGroupID(), new IsGroupMute() {
            public void onError() {
            }

            public void onGroupMute(boolean z) {
                Log.d(ProfilesGroupActivity.TAG, "is group mute : " + z);
                if (z) {
                    ProfilesGroupActivity.this.mIsMute = true;
                    findItem10.setIcon(R.drawable.ic_muteon);
                    return;
                }
                findItem10.setIcon(R.drawable.ic_muteoff);
                ProfilesGroupActivity.this.mIsMute = false;
            }

            public void onSuccess() {
            }
        });
        if (this.mIsAdmin) {
            findItem7.setTitle(getString(R.string.del_group));
            findItem3.setVisible(true);
            findItem4.setVisible(true);
            findItem3.setTitle(getString(R.string.edit_groupname));
        } else {
            findItem7.setTitle(getString(R.string.leave_group));
            findItem3.setVisible(false);
            findItem4.setVisible(false);
        }
        return true;
    }

    public void onDestroy() {
        super.onDestroy();
        this.mCatfiz.destroy();
    }

    public boolean onOptionsItemSelected(MenuItem menuItem) {
        this.mMenuItem = menuItem;
        Intent intent;
        Bundle bundle;
        switch (menuItem.getItemId()) {
            case 16908332:
                if (getIntent().getIntExtra(HTTP.IDENTITY_CODING, -1) == 2) {
                    intent = new Intent(this, ChatGroupConvActivity.class);
                    intent.setFlags(603979776);
                    NavUtils.navigateUpTo(this, intent);
                    return true;
                }
                backToGroupList();
                return true;
            case R.id.mute:
                Log.d(TAG, "on mute:" + this.mIsMute);
                if (this.mIsMute) {
                    this.mIsMute = false;
                    menuItem.setIcon(R.drawable.ic_muteoff);
                } else {
                    menuItem.setIcon(R.drawable.ic_muteon);
                    this.mIsMute = true;
                }
                this.mCatfiz.groupMuteNotif(this.mGroup.getGroupID(), this.mIsMute, new Callback() {
                    public void onError() {
                        ProfilesGroupActivity.this.muteHandle(false);
                    }

                    public void onSuccess() {
                        ProfilesGroupActivity.this.muteHandle(true);
                    }
                });
                return true;
            case R.id.edit_photo:
                bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 32);
                AlbusDialog.showDialog(32, new DialogUI().getDialogInterface(), this, bundle, getSupportFragmentManager());
                return true;
            case R.id.edit_name:
                intent = new Intent(this, CustomActionBarPageActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 16);
                intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, this.mGroup.getGroupID());
                intent.putExtra(CatfishDataStorage.NIC_NAME, this.mName);
                startActivityForResult(intent, 20);
                return true;
            case R.id.delete_group:
                if (this.mIsAdmin) {
                    bundle = new Bundle();
                    bundle.putInt(MimeTypeParser.TAG_TYPE, 0);
                    bundle.putInt(AlbusModelObject.PAGE, 5);
                    bundle.putInt(AlbusModelObject.DIALOG, 31);
                    AlbusDialog.showDialog(31, new DialogUI().getDialogInterface(), this, bundle, getSupportFragmentManager());
                    return true;
                }
                bundle = new Bundle();
                bundle.putInt(MimeTypeParser.TAG_TYPE, MEDIA_TYPE_IMAGE);
                bundle.putInt(AlbusModelObject.PAGE, 5);
                bundle.putInt(AlbusModelObject.DIALOG, 31);
                AlbusDialog.showDialog(31, new DialogUI().getDialogInterface(), this, bundle, getSupportFragmentManager());
                return true;
            default:
                return super.onOptionsItemSelected(menuItem);
        }
    }

    protected void onPause() {
        super.onPause();
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.start();
        }
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    public void onStop() {
        super.onStop();
        this.mCatfiz.finish();
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.stop();
        }
    }

    public void removeGroupMember(Group group, final User user, int i) {
        Log.d(TAG, "remove member");
        this.mCatfiz.groupDeleteConferenceMember(group, user, new Callback() {
            public void onError() {
                Log.d(ProfilesGroupActivity.TAG, "Error removeGroupMember");
            }

            public void onSuccess() {
                Log.d(ProfilesGroupActivity.TAG, "success remove member");
                AlbusUtils.setToastView(ProfilesGroupActivity.this, ProfilesGroupActivity.this.getString(R.string.remove_member).replace("[member]", "" + user.getName()));
                ProfilesGroupActivity.this.finish();
                ProfilesGroupActivity.this.backToGroupProfile();
            }
        });
    }

    public void requestAddFriend(String str) {
        Log.d(TAG, "on request add friend=" + str);
        this.mCatfiz.userRequestAddFriend(str, new Callback() {
            public void onError() {
                Log.d(ProfilesGroupActivity.TAG, "Error add friend");
            }

            public void onSuccess() {
                Log.d(ProfilesGroupActivity.TAG, "Success add friend");
                AlbusUtils.setToastView(ProfilesGroupActivity.this, ProfilesGroupActivity.this.getString(R.string.df_pending_friend));
            }
        });
    }
}
