package com.albus.activity;

import android.app.ActivityManager.TaskDescription;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnDismissListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.view.MenuItemCompat;
import android.support.v4.view.MenuItemCompat.OnActionExpandListener;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MenuItem.OnMenuItemClickListener;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.RelativeLayout;
import com.albus.adapter.CategoryDialogAdapter;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.AlbusDialog.OnActionClickListener;
import com.albus.dialog.AlbusDialogInterface;
import com.albus.fragment.FriendsFragment;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Callback.FetchCategoryCallback;
import com.catfiz.base.Callback.FetchUserCategoriesCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.consts.CatfizMsgTypes;
import com.catfiz.model.Category;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.signal.Signal;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.apache.http.protocol.HTTP;

public class FriendsActivity extends AppCompatActivity implements ICatfiz {
    private static final String IS_TUTORIAL_FRIEND_DONE = "done_friendtutorial";
    private static final String TAG = "FriendsActivity";
    private List mCategoryId = new ArrayList();
    private Catfiz mCatfiz = null;
    private EditText mEtSearch = null;
    public Fragment mFragment = null;
    private boolean mIsSearchMode = false;
    private List mRemovedId = new ArrayList();
    private MenuItem mSearchItem = null;
    private List mSelectedId = new ArrayList();

    class ListCategoryDialog implements AlbusDialogInterface {
        CategoryDialogAdapter adapter;
        List categories;

        private ListCategoryDialog() {
            this.adapter = null;
            this.categories = new ArrayList();
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, final DialogFragment dialogFragment, View view, Bundle bundle, final Context context) {
            final ListView listView = (ListView) view.findViewById(R.id.listview);
            view.findViewById(R.id.ll_bottom_btn).setVisibility(8);
            FriendsActivity.this.mRemovedId.clear();
            FriendsActivity.this.mCatfiz.FetchCategory(new FetchCategoryCallback() {
                public void onData(List list) {
                    ListCategoryDialog.this.categories.addAll(list);
                    View inflate = FriendsActivity.this.getLayoutInflater().inflate(R.layout.header_category, null, false);
                    inflate.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            Bundle bundle = new Bundle();
                            bundle.putInt(AlbusModelObject.DIALOG, 44);
                            AlbusDialog.showDialog(44, new createNewCategory(), context, bundle, ((FriendsActivity) context).getSupportFragmentManager());
                            dialogFragment.dismiss();
                        }
                    });
                    listView.addFooterView(inflate, null, false);
                    ListCategoryDialog.this.adapter = new CategoryDialogAdapter(9, context, dialogFragment, ListCategoryDialog.this.categories, 44);
                    listView.setAdapter(ListCategoryDialog.this.adapter);
                }

                public void onError() {
                }

                public void onSuccess() {
                }
            });
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    class createNewCategory implements AlbusDialogInterface {
        private createNewCategory() {
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, final DialogFragment dialogFragment, View view, Bundle bundle, final Context context) {
            final EditText editText = (EditText) view.findViewById(R.id.et_value);
            AlbusDialog.setOnActionClickListener(44, new OnActionClickListener() {
                public void onActionNoListener() {
                    dialogFragment.dismiss();
                }

                public void onActionYesListener() {
                    FriendsActivity.this.mCatfiz.addNewCategory(editText.getText().toString(), new Callback() {
                        public void onError() {
                            dialogFragment.dismiss();
                        }

                        public void onSuccess() {
                            FriendsActivity.this.mCatfiz.FetchCategory(new FetchCategoryCallback() {
                                public void onData(List list) {
                                    for (Category category : list) {
                                        if (category.getName().equals(editText.getText().toString())) {
                                            Log.d(FriendsActivity.TAG, "open friend on category = " + category.getID());
                                            Intent intent = new Intent(context, CustomActionBarPageActivity.class);
                                            intent.putExtra(CatfishDataStorage.NIC_NAME, category.getName());
                                            intent.putExtra(AlbusModelObject.CATEGORY_ID, category.getID());
                                            intent.putExtra(AlbusModelObject.PAGE, 54);
                                            intent.putExtra(HTTP.IDENTITY_CODING, 54);
                                            context.startActivity(intent);
                                            dialogFragment.dismiss();
                                        }
                                    }
                                }

                                public void onError() {
                                }

                                public void onSuccess() {
                                }
                            });
                        }
                    });
                }
            });
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    private void goToMain() {
        Intent intent = new Intent(this, AlbusMainActivity.class);
        intent.setFlags(603979776);
        startActivity(intent);
    }

    private void setDialogWindowColor(Dialog dialog) {
        if (Utils.hasLollipop()) {
            Window window = dialog.getWindow();
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.clearFlags(67108864);
            window.setStatusBarColor(getResources().getColor(R.color.black_70percent));
        }
    }

    public void addToCategory(String str) {
        int i = 0;
        Log.d(TAG, "category selected id size : " + this.mSelectedId.size());
        for (Category category : this.mSelectedId) {
            for (Integer intValue : getCategoryID()) {
                if (intValue.intValue() == category.getID()) {
                    removeCategoryID(category.getID());
                }
            }
        }
        int[] iArr = new int[getRemovedId().size()];
        Log.d(TAG, "category removed id size : " + this.mSelectedId.size());
        for (int i2 = 0; i2 < getRemovedId().size(); i2++) {
            iArr[i2] = ((Integer) getRemovedId().get(i2)).intValue();
        }
        if (iArr.length > 0) {
            this.mCatfiz.deleteMultipleFriendsFromCategory(iArr, str, new Callback() {
                public void onError() {
                }

                public void onSuccess() {
                }
            });
        }
        Log.d(TAG, "category size : " + getCategoryID().size());
        int[] iArr2 = new int[getCategoryID().size()];
        while (i < getCategoryID().size()) {
            iArr2[i] = ((Integer) getCategoryID().get(i)).intValue();
            i++;
        }
        if (iArr2.length > 0) {
            this.mCatfiz.addMultipleCategory(iArr2, str, new Callback() {
                public void onError() {
                    AlbusUtils.setToastView(FriendsActivity.this, FriendsActivity.this.getString(R.string.add_failed));
                }

                public void onSuccess() {
                    AlbusUtils.setToastView(FriendsActivity.this, FriendsActivity.this.getString(R.string.add_succeeded));
                }
            });
        }
    }

    public void blockfriend(String str, final String str2) {
        this.mCatfiz.userBlockByNIC(str, new Callback() {
            public void onError() {
                Log.d(FriendsActivity.TAG, Extra.ERROR);
            }

            public void onSuccess() {
                Log.d(FriendsActivity.TAG, "added to black list = " + str2);
                ((FriendsFragment) FriendsActivity.this.mFragment).updateData();
            }
        });
    }

    public void collapseActionMenuSearch() {
        if (this.mSearchItem != null && MenuItemCompat.isActionViewExpanded(this.mSearchItem)) {
            MenuItemCompat.collapseActionView(this.mSearchItem);
        }
    }

    public List getCategoryID() {
        return this.mCategoryId;
    }

    public List getRemovedId() {
        Log.d(TAG, "removed category : " + this.mRemovedId);
        List arrayList = new ArrayList();
        Set hashSet = new HashSet();
        for (Integer num : this.mRemovedId) {
            if (hashSet.add(num)) {
                arrayList.add(num);
            }
        }
        Log.d(TAG, "removed category after get rid of the duplicate: " + this.mRemovedId);
        return arrayList;
    }

    public boolean isEnterSearchMode() {
        return this.mIsSearchMode;
    }

    protected void onActivityResult(int i, int i2, Intent intent) {
        super.onActivityResult(i, i2, intent);
        if (i2 == -1) {
            Log.d(TAG, "onActivityResult friendsActivity");
            ((FriendsFragment) this.mFragment).getAllData();
        }
    }

    public void onBackPressed() {
        super.onBackPressed();
        if (getIntent().getIntExtra(AlbusModelObject.PAGE, -1) != CatfizMsgTypes.NICSUBTYPE_PARTNER) {
            Log.d(TAG, "backpressed with reload albusmain");
            goToMain();
        }
    }

    public void onCatfizStarted() {
    }

    public void onCatfizStopped() {
    }

    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        Log.d(TAG, "onCreate FriendsActivity");
        setContentView((int) R.layout.activity_view);
        this.mCatfiz = new Catfiz(this, this);
        this.mCategoryId.clear();
        this.mSelectedId.clear();
        if (Utils.hasLollipop()) {
            setTaskDescription(new TaskDescription(null, null, getResources().getColor(R.color.red)));
            Window window = getWindow();
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.clearFlags(67108864);
            window.setStatusBarColor(getResources().getColor(R.color.red2));
        }
        ((RelativeLayout) findViewById(R.id.rl_background)).setBackgroundColor(getResources().getColor(R.color.red));
        ActionBar supportActionBar = getSupportActionBar();
        supportActionBar.setDisplayHomeAsUpEnabled(true);
        Configuration configuration = getResources().getConfiguration();
        if (Utils.hasJellyBeanMR1() && configuration.getLayoutDirection() == 1) {
            supportActionBar.setHomeAsUpIndicator((int) R.drawable.ic_back_light_reverse);
        } else {
            supportActionBar.setHomeAsUpIndicator((int) R.drawable.ic_back_light);
        }
        FragmentTransaction beginTransaction = getSupportFragmentManager().beginTransaction();
        this.mFragment = FriendsFragment.newInstance();
        beginTransaction.replace(R.id.fl_view, this.mFragment);
        beginTransaction.commit();
        final SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        if (!defaultSharedPreferences.getBoolean(IS_TUTORIAL_FRIEND_DONE, false)) {
            final Dialog dialog = new Dialog(this, R.style.DialogTutorial);
            final Dialog dialog2 = new Dialog(this, R.style.DialogTutorial);
            setDialogWindowColor(dialog);
            setDialogWindowColor(dialog2);
            dialog.setContentView(R.layout.tutorial_dialog4);
            dialog2.setContentView(R.layout.tutorial_dialog5);
            dialog.setOnDismissListener(new OnDismissListener() {
                public void onDismiss(DialogInterface dialogInterface) {
                    dialog2.show();
                }
            });
            dialog2.setOnDismissListener(new OnDismissListener() {
                public void onDismiss(DialogInterface dialogInterface) {
                    defaultSharedPreferences.edit().putBoolean(FriendsActivity.IS_TUTORIAL_FRIEND_DONE, true).commit();
                }
            });
            dialog.show();
            ((Button) dialog.findViewById(R.id.button1)).setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    dialog.cancel();
                    dialog2.show();
                }
            });
            ((Button) dialog2.findViewById(R.id.button1)).setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    dialog2.cancel();
                    defaultSharedPreferences.edit().putBoolean(FriendsActivity.IS_TUTORIAL_FRIEND_DONE, true).commit();
                }
            });
        }
    }

    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.actionbar_friends, menu);
        final MenuItem findItem = menu.findItem(R.id.add_friend);
        final MenuItem findItem2 = menu.findItem(R.id.category);
        this.mSearchItem = menu.findItem(R.id.search_friend);
        View actionView = MenuItemCompat.getActionView(this.mSearchItem);
        ImageButton imageButton = (ImageButton) actionView.findViewById(R.id.ib_clear);
        this.mEtSearch = (EditText) actionView.findViewById(R.id.txt_search);
        this.mEtSearch.addTextChangedListener(new TextWatcher() {
            public void afterTextChanged(Editable editable) {
            }

            public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
            }

            public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                String obj = FriendsActivity.this.mEtSearch.getText().toString();
                boolean z = i3 == 0 || i2 > i3;
                ((FriendsFragment) FriendsActivity.this.mFragment).limitListView(obj, z);
            }
        });
        findItem.setOnMenuItemClickListener(new OnMenuItemClickListener() {
            public boolean onMenuItemClick(MenuItem menuItem) {
                Intent intent = new Intent(FriendsActivity.this, CustomActionBarPageActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 48);
                intent.putExtra(HTTP.IDENTITY_CODING, 9);
                FriendsActivity.this.startActivityForResult(intent, 17);
                return true;
            }
        });
        findItem2.setOnMenuItemClickListener(new OnMenuItemClickListener() {
            public boolean onMenuItemClick(MenuItem menuItem) {
                Bundle bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 43);
                AlbusDialog.showDialog(43, new ListCategoryDialog(), FriendsActivity.this, bundle, FriendsActivity.this.getSupportFragmentManager());
                return true;
            }
        });
        MenuItemCompat.setOnActionExpandListener(this.mSearchItem, new OnActionExpandListener() {
            public boolean onMenuItemActionCollapse(MenuItem menuItem) {
                ((InputMethodManager) FriendsActivity.this.getSystemService("input_method")).hideSoftInputFromWindow(FriendsActivity.this.mEtSearch.getWindowToken(), 0);
                findItem.setVisible(true);
                findItem2.setVisible(true);
                ((FriendsFragment) FriendsActivity.this.mFragment).leaveSearchMode();
                FriendsActivity.this.mIsSearchMode = false;
                return true;
            }

            public boolean onMenuItemActionExpand(MenuItem menuItem) {
                FriendsActivity.this.mEtSearch.requestFocus();
                ((InputMethodManager) FriendsActivity.this.getSystemService("input_method")).toggleSoftInput(1, 0);
                FriendsActivity.this.mEtSearch.requestFocus();
                FriendsActivity.this.mEtSearch.setText("");
                findItem.setVisible(false);
                findItem2.setVisible(false);
                ((FriendsFragment) FriendsActivity.this.mFragment).enterSearchMode();
                FriendsActivity.this.mIsSearchMode = true;
                return true;
            }
        });
        imageButton.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                FriendsActivity.this.mEtSearch.setText("");
            }
        });
        return true;
    }

    public void onDestroy() {
        super.onDestroy();
        this.mCatfiz.destroy();
    }

    public boolean onOptionsItemSelected(MenuItem menuItem) {
        switch (menuItem.getItemId()) {
            case 16908332:
                if (getIntent().getIntExtra(AlbusModelObject.PAGE, 0) == CatfizMsgTypes.NICSUBTYPE_PARTNER) {
                    setResult(-1);
                    finish();
                } else {
                    goToMain();
                }
                return true;
            default:
                return super.onOptionsItemSelected(menuItem);
        }
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    public void onStop() {
        super.onStop();
        this.mCatfiz.finish();
    }

    public void removeCategoryID(int i) {
        for (int i2 = 0; i2 < this.mCategoryId.size(); i2++) {
            if (((Integer) this.mCategoryId.get(i2)).intValue() == i) {
                this.mCategoryId.remove(i2);
            }
        }
    }

    public void setAdapterDialog(int i, String str, ListView listView, Context context, DialogFragment dialogFragment) {
        this.mCategoryId.clear();
        this.mRemovedId.clear();
        this.mSelectedId.clear();
        final List arrayList = new ArrayList();
        final int i2 = i;
        final Context context2 = context;
        final DialogFragment dialogFragment2 = dialogFragment;
        final ListView listView2 = listView;
        final String str2 = str;
        this.mCatfiz.FetchCategory(new FetchCategoryCallback() {
            public void onData(final List list) {
                FriendsActivity.this.mCatfiz.fetchUserCategories(new FetchUserCategoriesCallback() {
                    public void onData(List list) {
                        Log.d(FriendsActivity.TAG, "in category : " + list.size());
                        for (Category category : list) {
                            if (category.getName().equals("All")) {
                                category.setSelected(true);
                            }
                            for (Category id : list) {
                                if (id.getID() == category.getID()) {
                                    category.setSelected(true);
                                    break;
                                }
                            }
                        }
                        FriendsActivity.this.mSelectedId.addAll(list);
                        arrayList.addAll(list);
                        listView2.setAdapter(new CategoryDialogAdapter(i2, context2, dialogFragment2, arrayList, 45));
                    }

                    public void onError() {
                    }

                    public void onSuccess() {
                    }
                }, str2);
            }

            public void onError() {
            }

            public void onSuccess() {
            }
        });
    }

    public void setCategoryID(int i) {
        this.mCategoryId.add(Integer.valueOf(i));
    }

    public void setRemovedID(int i) {
        for (Category id : this.mSelectedId) {
            if (id.getID() == i) {
                this.mRemovedId.add(Integer.valueOf(i));
            }
        }
    }

    public void unfriend(String str, final String str2) {
        Log.d(TAG, "unfrind from friends : " + str);
        this.mCatfiz.userUnfriend(str, new Callback() {
            public void onError() {
                Log.d(FriendsActivity.TAG, "unfriend error");
            }

            public void onSuccess() {
                Log.d(FriendsActivity.TAG, "unfriend = " + str2);
                ((FriendsFragment) FriendsActivity.this.mFragment).updateData();
            }
        });
    }
}
