package com.albus.activity;

import android.app.Activity;
import android.app.ActivityManager.TaskDescription;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.v4.app.FragmentActivity;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ImageButton;
import android.widget.ListView;
import com.albus.adapter.ProfileAdapter;
import com.albus.crop.Crop;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.DialogUI;
import com.albus.media.ImageCache;
import com.albus.media.ImageCache.ImageCacheParams;
import com.albus.media.ThumbnailLoader;
import com.albus.media.UserPhotoLoader;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.util.FadingActionBarHelper;
import com.albus.util.FileUtils;
import com.albus.util.LongMessageCache;
import com.albus.util.LongMessageCache.LongMessageCacheParams;
import com.albus.util.LongMessageWorker;
import com.albus.view.CustomImageView;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Callback.FetchStatusComment;
import com.catfiz.base.Callback.GetCountCallback;
import com.catfiz.base.Callback.OnSendLikeCallback;
import com.catfiz.base.Callback.ProgressUploadDownload;
import com.catfiz.base.Callback.UserFetchProfileCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.Constant;
import com.catfiz.base.ICatfiz;
import com.catfiz.base.ICatfiz.ICatfizNewMessage;
import com.catfiz.base.ICatfiz.ICatfizUpdateProgress;
import com.catfiz.base.ICatfiz.ICatfizUpdates;
import com.catfiz.intents.CatfishIntents;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.media.ImageReScaler;
import com.catfiz.model.Comment;
import com.catfiz.model.Profile;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishService;
import com.catfiz.service.CatfishService.UpdateRecent;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.signal.Signal;
import com.catfiz.signal.SignalBinderMyProfile;
import com.catfiz.util.Log;
import com.catfiz.util.MediaFilePath;
import com.catfiz.util.Utils;
import java.io.Closeable;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.HttpStatus;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.apache.http.protocol.HTTP;

public class ProfilesActivity extends ActionBarActivity implements ICatfiz, ICatfizNewMessage, ICatfizUpdateProgress, ICatfizUpdates {
    public static final int MEDIA_TYPE_IMAGE = 1;
    private static final String TAG = "ProfilesActivity";
    private Catfiz mCatfiz = null;
    private CustomImageView mCivImg = null;
    private List mDataContainer = null;
    private Uri mFileUri = null;
    private FadingActionBarHelper mHelper = null;
    private boolean mHideAddress = false;
    private boolean mHideEmail = false;
    private boolean mHideNote = false;
    private boolean mHidePhone = false;
    private boolean mHideWeb = false;
    private ImageButton mIbEdit = null;
    private Intent mIntent = null;
    private boolean mIsChangePp = false;
    private int mIsLike = 0;
    private ListView mList = null;
    private LongMessageWorker mLongMessageWorker = null;
    private String mName = null;
    private ProfileAdapter mPAdapter = null;
    private File mPhotoFile = null;
    private Uri mPpUri = null;
    private ThumbnailLoader mThumbnailLoader = null;
    private boolean mUpload = false;
    private User mUser = null;
    private UserPhotoLoader mUserPhotoLoader = null;
    private boolean mbFirstEnter = true;

    public class FetchProfileCb implements UserFetchProfileCallback {
        private WeakReference mThisActivityRef;

        public FetchProfileCb(Activity activity) {
            this.mThisActivityRef = new WeakReference(activity);
        }

        public void onData(User user) {
            ProfilesActivity profilesActivity = (ProfilesActivity) this.mThisActivityRef.get();
            if (profilesActivity != null) {
                int intExtra = profilesActivity.getIntent().getIntExtra(AlbusModelObject.ME_LIKE_STATUS, 100);
                profilesActivity.mHelper.setHeaderName(profilesActivity, user.getName());
                profilesActivity.mUser = user;
                Log.d(ProfilesActivity.TAG, "pref=" + CatfishService.getCatfishPreferences().getString(Constant.PREF_KEY_PROFILE, ""));
                Profile profile = new Profile();
                CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
                int i = catfishPreferences.getInt(Constant.IS_LIKE_MY_STATUS, 0);
                user.setMeLikeThisStatus(i);
                Log.d(ProfilesActivity.TAG, "like status sendiri value : " + i);
                if (intExtra == ProfilesActivity.MEDIA_TYPE_IMAGE) {
                    user.setMeLikeThisStatus(intExtra);
                    catfishPreferences.edit().putInt(Constant.IS_LIKE_MY_STATUS, ProfilesActivity.MEDIA_TYPE_IMAGE);
                } else if (intExtra == -1) {
                    user.setMeLikeThisStatus(intExtra);
                    catfishPreferences.edit().putInt(Constant.IS_LIKE_MY_STATUS, -1);
                }
                profilesActivity.mDataContainer.clear();
                if (user.getName() != null) {
                    profile.setUser(user);
                    profile.setListItemType(ProfilesActivity.MEDIA_TYPE_IMAGE);
                    profilesActivity.mDataContainer.add(profile);
                    profilesActivity.mName = user.getName();
                }
                if (user.getStatus() != null) {
                    Profile profile2 = new Profile();
                    profile2.setUser(user);
                    profile2.setListItemType(2);
                    profilesActivity.mDataContainer.add(profile2);
                }
                profilesActivity.fetchStatusComment();
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    public class FetchStatusCommentCb implements FetchStatusComment {
        private WeakReference mThisActivityRef;

        public FetchStatusCommentCb(Activity activity) {
            this.mThisActivityRef = new WeakReference(activity);
        }

        public void onData(List list) {
            ProfilesActivity profilesActivity = (ProfilesActivity) this.mThisActivityRef.get();
            if (profilesActivity != null) {
                Log.d(ProfilesActivity.TAG, "get data status comment:" + list.size());
                if (profilesActivity.mDataContainer.size() > ProfilesActivity.MEDIA_TYPE_IMAGE) {
                    ((Profile) profilesActivity.mDataContainer.get(ProfilesActivity.MEDIA_TYPE_IMAGE)).setCommentCount(list.size());
                }
                while (profilesActivity.mDataContainer.size() > 2) {
                    profilesActivity.mDataContainer.remove(2);
                }
                Profile profile;
                if (list.size() <= 3 && list.size() > 0) {
                    for (Comment comment : list) {
                        Profile profile2 = new Profile();
                        profile2.setListItemType(9);
                        profile2.setComment(comment);
                        profilesActivity.mDataContainer.add(profile2);
                    }
                    profile = new Profile();
                    profile.setListItemType(12);
                    profilesActivity.mDataContainer.add(profile);
                } else if (list.size() == 0) {
                    profile = new Profile();
                    profile.setListItemType(10);
                    profilesActivity.mDataContainer.add(profile);
                } else {
                    int size = list.size();
                    for (int i = size - 3; i < size; i += ProfilesActivity.MEDIA_TYPE_IMAGE) {
                        Profile profile3 = new Profile();
                        profile3.setListItemType(9);
                        profile3.setComment((Comment) list.get(i));
                        profilesActivity.mDataContainer.add(profile3);
                    }
                    profile = new Profile();
                    profile.setListItemType(11);
                    profilesActivity.mDataContainer.add(profile);
                }
                profilesActivity.mPAdapter.notifyDataSetChanged();
                if (profilesActivity.mbFirstEnter) {
                    profilesActivity.mbFirstEnter = false;
                }
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    public class SendLikeCb implements OnSendLikeCallback {
        private WeakReference mThisActivityRef;

        public SendLikeCb(Activity activity) {
            this.mThisActivityRef = new WeakReference(activity);
        }

        public void onData(final int i) {
            final ProfilesActivity profilesActivity = (ProfilesActivity) this.mThisActivityRef.get();
            profilesActivity.runOnUiThread(new Runnable() {
                public void run() {
                    ((Profile) profilesActivity.mDataContainer.get(ProfilesActivity.MEDIA_TYPE_IMAGE)).setStatusLike(i);
                    Log.d(ProfilesActivity.TAG, "like=" + ((Profile) profilesActivity.mDataContainer.get(ProfilesActivity.MEDIA_TYPE_IMAGE)).getStatusLike());
                    profilesActivity.mPAdapter.notifyDataSetChanged();
                }
            });
        }

        public void onError() {
        }

        public void onSuccess() {
            final ProfilesActivity profilesActivity = (ProfilesActivity) this.mThisActivityRef.get();
            if (profilesActivity != null) {
                CatfishService.getCatfishPreferences().edit().putInt(Constant.IS_LIKE_MY_STATUS, profilesActivity.mIsLike).commit();
                Log.d(ProfilesActivity.TAG, "like status sendiri value set to: " + profilesActivity.mIsLike);
                profilesActivity.runOnUiThread(new Runnable() {
                    public void run() {
                        ((Profile) profilesActivity.mDataContainer.get(ProfilesActivity.MEDIA_TYPE_IMAGE)).getUser().setMeLikeThisStatus(profilesActivity.mIsLike);
                        Log.d(ProfilesActivity.TAG, "like=" + ((Profile) profilesActivity.mDataContainer.get(ProfilesActivity.MEDIA_TYPE_IMAGE)).isMeLikeThisStatus());
                        profilesActivity.mPAdapter.notifyDataSetChanged();
                    }
                });
            }
        }
    }

    private void beginCrop(Uri uri) {
        new Crop(uri).output(Uri.fromFile(new File(getCacheDir(), AlbusModelObject.CACHE_CROP_USER)), PreferenceManager.getDefaultSharedPreferences(this).getBoolean("photoprofile_transparency_v2", false)).asSquare().start(this);
    }

    private void checkUnreadCommentLike() {
        if (!this.mbFirstEnter) {
            this.mCatfiz.requestUnreadStatusCommentCount(new GetCountCallback() {
                public void onData(final int i) {
                    ProfilesActivity.this.mCatfiz.requestUnreadStatusLikeCount(new GetCountCallback() {
                        public void onData(int i) {
                            Log.d(ProfilesActivity.TAG, "~~~checkUnreadCommentLike:" + i + " " + i);
                            if (i > 0 || i > 0) {
                                ProfilesActivity.this.fetchStatusComment();
                            }
                        }

                        public void onError() {
                        }

                        public void onSuccess() {
                        }
                    });
                }

                public void onError() {
                }

                public void onSuccess() {
                }
            });
        }
    }

    private static void closeSilently(Closeable closeable) {
        if (closeable != null) {
            try {
                closeable.close();
            } catch (Throwable th) {
            }
        }
    }

    private void editProfPic() {
        Bundle bundle = new Bundle();
        bundle.putInt(AlbusModelObject.DIALOG, 3);
        AlbusDialog.showDialog(3, new DialogUI().getDialogInterface(), this, bundle, getSupportFragmentManager());
    }

    private void fetchStatusComment() {
        this.mCatfiz.requestStatusComment(CatfishService.getCatfishPreferences().getLong(CatfishService.USERSTATUS_SEQ_PREF, 0), CatfishService.getUserPIN(), new FetchStatusCommentCb(this));
    }

    private void fetchUserProfile() {
        this.mCatfiz.userFetchProfile(new FetchProfileCb(this));
    }

    private static File getOutputMediaFile(int i) {
        File file = new File(CatfishPhotoStorage.getCacheStorageDir(null));
        if (file.exists() || file.mkdirs()) {
            return i == MEDIA_TYPE_IMAGE ? new File(file.getPath() + File.separator + AlbusModelObject.CAPTURED_PROFILE_PIC) : null;
        } else {
            Log.d(TAG, "failed to create directory");
            return null;
        }
    }

    private void handleCropResult(int i, Intent intent) {
        Bitmap bitmap;
        FileNotFoundException fileNotFoundException;
        FileNotFoundException fileNotFoundException2;
        Drawable createFromPath;
        if (i == -1) {
            if (intent != null) {
                this.mPpUri = Crop.getOutput(intent);
                Log.d(TAG, "save pp with uri = " + this.mPpUri);
                FileUtils.copyFile(MediaFilePath.getPath(this, this.mPpUri), CatfishPhotoStorage.getPhotoStorageDir(this) + "/", this.mUser.getId() + "_temp");
                File userProfilePhotoFile = CatfishPhotoStorage.getUserProfilePhotoFile(this);
                Log.d(TAG, "path photo fdes : " + userProfilePhotoFile);
                File file = new File(this.mPpUri.getPath());
                boolean z = PreferenceManager.getDefaultSharedPreferences(this).getBoolean("photoprofile_transparency_v2", false);
                Bitmap bitmap2 = null;
                if (AlbusUtils.isNetworkAvailable(this)) {
                    try {
                        Object fileOutputStream = new FileOutputStream(userProfilePhotoFile);
                        if (z) {
                            bitmap2 = ImageReScaler.rescaleFromFilePath(file.getAbsolutePath(), HttpStatus.SC_METHOD_FAILURE);
                            try {
                                bitmap2.compress(CompressFormat.PNG, 90, fileOutputStream);
                                bitmap = bitmap2;
                            } catch (FileNotFoundException e) {
                                fileNotFoundException = e;
                                bitmap = bitmap2;
                                fileNotFoundException2 = fileNotFoundException;
                                fileNotFoundException2.printStackTrace();
                                createFromPath = Drawable.createFromPath(userProfilePhotoFile.getAbsolutePath());
                                if (this.mCivImg != null) {
                                    this.mCivImg.setBackgroundDrawable(createFromPath);
                                    this.mHelper.hidePPDummy();
                                }
                                this.mIsChangePp = true;
                                bitmap.recycle();
                                return;
                            }
                        }
                        bitmap2 = ImageReScaler.rescaleFromFilePath(file.getAbsolutePath(), 640);
                        bitmap2.compress(CompressFormat.JPEG, 90, fileOutputStream);
                        bitmap = bitmap2;
                        try {
                            closeSilently(fileOutputStream);
                            this.mCatfiz.userUploadPhoto(CatfishService.getUserPIN(), userProfilePhotoFile, new Callback() {
                                public void onError() {
                                    Log.d(ProfilesActivity.TAG, "error upload");
                                }

                                public void onSuccess() {
                                    Log.d(ProfilesActivity.TAG, "upload");
                                }
                            });
                        } catch (FileNotFoundException e2) {
                            fileNotFoundException2 = e2;
                            fileNotFoundException2.printStackTrace();
                            createFromPath = Drawable.createFromPath(userProfilePhotoFile.getAbsolutePath());
                            if (this.mCivImg != null) {
                                this.mCivImg.setBackgroundDrawable(createFromPath);
                                this.mHelper.hidePPDummy();
                            }
                            this.mIsChangePp = true;
                            bitmap.recycle();
                            return;
                        }
                    } catch (FileNotFoundException e3) {
                        fileNotFoundException = e3;
                        bitmap = bitmap2;
                        fileNotFoundException2 = fileNotFoundException;
                        fileNotFoundException2.printStackTrace();
                        createFromPath = Drawable.createFromPath(userProfilePhotoFile.getAbsolutePath());
                        if (this.mCivImg != null) {
                            this.mCivImg.setBackgroundDrawable(createFromPath);
                            this.mHelper.hidePPDummy();
                        }
                        this.mIsChangePp = true;
                        bitmap.recycle();
                        return;
                    }
                    createFromPath = Drawable.createFromPath(userProfilePhotoFile.getAbsolutePath());
                    if (this.mCivImg != null) {
                        this.mCivImg.setBackgroundDrawable(createFromPath);
                        this.mHelper.hidePPDummy();
                    }
                    this.mIsChangePp = true;
                    bitmap.recycle();
                    return;
                }
                AlbusUtils.setToastView(this, getString(R.string.check_connection));
            }
        } else if (i == HttpStatus.SC_NOT_FOUND) {
            AlbusUtils.setToastView(this, Crop.getError(intent).getMessage());
        } else {
            AlbusUtils.setToastView(this, getString(R.string.cancel_crop));
        }
    }

    private void requestProgressUploadDownload() {
        this.mCatfiz.requestProgressUploadDownload(new ProgressUploadDownload() {
            public void onError() {
            }

            public boolean onHasProgressUploadDownNUpload(Map map, Map map2) {
                Log.d(ProfilesActivity.TAG, "onHasProgressUploadDownNUpload <Map>");
                ProfilesActivity.this.mPAdapter.setProgress(map, map2);
                ProfilesActivity.this.mPAdapter.notifyDataSetChanged();
                return false;
            }

            public void onSuccess() {
            }

            public boolean onUpdateProgressDownloadNUpload(String str, int i, int i2) {
                Log.d(ProfilesActivity.TAG, "onHasProgressUploadDownNUpload int");
                return false;
            }
        });
    }

    public void ImageViewer() {
        Intent intent = new Intent(this, ProfilesImageViewerActivity.class);
        intent.putExtra(HTTP.IDENTITY_CODING, 3);
        intent.putExtra(AlbusModelObject.IMAGE, this.mPhotoFile.getAbsolutePath());
        startActivityForResult(intent, 23);
    }

    public void capturePhotoCam() {
        Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
        this.mFileUri = Uri.fromFile(getOutputMediaFile(MEDIA_TYPE_IMAGE));
        intent.putExtra("output", this.mFileUri);
        startActivityForResult(intent, 14);
    }

    public boolean checkingActivated() {
        return this.mHideAddress && this.mHideEmail && this.mHideNote && this.mHidePhone && this.mHideWeb;
    }

    public void choosePhotoByFile() {
        Crop.pickImage(this);
    }

    public void downloadCommentAttachedFile(Comment comment) {
        this.mCatfiz.downloadBroadcastAttachedComment(comment, this, new Callback() {
            public void onError() {
                Log.d(ProfilesActivity.TAG, "onError downloadCommentAttachedFile()");
            }

            public void onSuccess() {
                Log.d(ProfilesActivity.TAG, "onSuccess downloadCommentAttachedFile()");
            }
        });
    }

    public void handleFileComment(Comment comment, String str) {
        Uri fromFile = Uri.fromFile(new File(str));
        if (fromFile != null) {
            String str2 = AlbusUtils.getmimetype(fromFile);
            Intent intent = new Intent("android.intent.action.VIEW");
            intent.setDataAndType(fromFile, str2);
            Intent intent2;
            try {
                if (str2.startsWith("image/")) {
                    intent2 = new Intent(this, ProfilesImageViewerActivity.class);
                    intent2.putExtra(HTTP.IDENTITY_CODING, 31);
                    intent2.putExtra(AlbusModelObject.IMAGE, str);
                    intent2.putExtra(AlbusModelObject.SENDER_NAME, comment.getSender().getName());
                    intent2.putExtra(AlbusModelObject.INTENT_ROOM, getResources().getString(R.string.fitur_profile));
                    intent2.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, comment.getSender().getId());
                    startActivity(intent2);
                    return;
                }
                intent.putExtra(AlbusModelObject.SENDER_NAME, comment.getSender().getName());
                startActivityForResult(intent, R.styleable.Theme_radioButtonStyle);
            } catch (Exception e) {
                e.printStackTrace();
                intent2 = CatfishIntents.newIntent(this, CatfishIntents.ACTION_SVG_VIEWER);
                intent2.setDataAndType(fromFile, "image/svg+xml");
                startActivityForResult(intent2, R.styleable.Theme_radioButtonStyle);
            }
        }
    }

    protected void onActivityResult(int i, int i2, Intent intent) {
        super.onActivityResult(i, i2, intent);
        Log.v(TAG, "run in onactivityresult of Profiles Activity");
        Log.d(TAG, "resultcode" + i2 + " requestcode=" + i);
        if (i2 == -1) {
            if (i == Crop.REQUEST_PICK) {
                Log.d(TAG, "on request pick=" + intent.getData());
                beginCrop(intent.getData());
            } else if (i == Crop.REQUEST_CROP) {
                Log.d(TAG, "on request crop=" + intent);
                handleCropResult(i2, intent);
            } else if (i == 14) {
                Uri uri = this.mFileUri;
                beginCrop(uri);
                Log.d(TAG, "activityResult-Retrieve uri=" + uri);
                if (uri != null) {
                    Log.d(TAG, "Using URI");
                }
            } else if (i == 23) {
                handleCropResult(i2, intent);
            } else {
                Log.d(TAG, "where do you set result in (value requestcode)= " + i);
            }
        } else if (i2 == HttpStatus.SC_NOT_FOUND && i == Crop.REQUEST_CROP) {
            Log.d(TAG, "on request crop=" + intent);
            handleCropResult(i2, intent);
        }
    }

    public void onBackPressed() {
        if (this.mIsChangePp) {
            getIntent();
            setResult(-1);
        }
        super.onBackPressed();
    }

    public void onCatfizStarted() {
        fetchUserProfile();
        requestProgressUploadDownload();
        if (this.mCatfiz != null && this.mUser != null) {
            this.mCatfiz.setRecentUpdateOpen(this.mUser.getId(), new Callback() {
                public void onError() {
                }

                public void onSuccess() {
                }
            });
        }
    }

    public void onCatfizStopped() {
    }

    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        Log.d(TAG, "onCreate of Profiles Activity");
        this.mCatfiz = new Catfiz(this, this, new SignalBinderMyProfile());
        if (Utils.hasLollipop()) {
            setTaskDescription(new TaskDescription(null, null, getResources().getColor(R.color.red)));
            Window window = getWindow();
            window.clearFlags(67108864);
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.setStatusBarColor(getResources().getColor(R.color.red2));
        }
        this.mHelper = (FadingActionBarHelper) new FadingActionBarHelper().actionBarBackground((int) R.drawable.bg_actbar).headerLayout(R.layout.activity_profile_header).contentLayout(R.layout.activity_profile_listview);
        setContentView(this.mHelper.createView((Context) this));
        ActionBar supportActionBar = getSupportActionBar();
        Configuration configuration = getResources().getConfiguration();
        if (Utils.hasJellyBeanMR1() && configuration.getLayoutDirection() == MEDIA_TYPE_IMAGE) {
            supportActionBar.setHomeAsUpIndicator((int) R.drawable.ic_back_light_reverse);
        } else {
            supportActionBar.setHomeAsUpIndicator((int) R.drawable.ic_back_light);
        }
        this.mHelper.initActionBar(this);
        this.mIntent = new Intent(this, CustomActionBarPageActivity.class);
        this.mCivImg = this.mHelper.getProfilePicture();
        this.mPhotoFile = new File(MediaFilePath.getPath(this, CatfishPhotoStorage.getUserProfilePhotoFileUri(this)));
        final Drawable createFromPath = Drawable.createFromPath(this.mPhotoFile.getAbsolutePath());
        Log.d(TAG, "path pp = " + this.mPhotoFile.getAbsolutePath());
        Log.d(TAG, "drawable = " + createFromPath);
        if (createFromPath != null) {
            this.mCivImg.setBackgroundDrawable(createFromPath);
            this.mHelper.hidePPDummy();
        }
        this.mHelper.HeadClick().setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                Log.d(ProfilesActivity.TAG, "click photo preview");
                if (createFromPath != null) {
                    ProfilesActivity.this.ImageViewer();
                } else {
                    ProfilesActivity.this.editProfPic();
                }
            }
        });
        this.mIbEdit = this.mHelper.setFab();
        this.mIbEdit.setVisibility(0);
        this.mIbEdit.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                Intent intent = new Intent(ProfilesActivity.this, CustomActionBarPageActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 24);
                intent.putExtra(HTTP.IDENTITY_CODING, 3);
                ProfilesActivity.this.startActivity(intent);
            }
        });
        this.mList = (ListView) findViewById(16908298);
        this.mList.setOnItemClickListener(new OnItemClickListener() {
            public void onItemClick(AdapterView adapterView, View view, int i, long j) {
                switch (((Integer) view.findViewById(R.id.tag_holder).getTag()).intValue()) {
                    case ProfilesActivity.MEDIA_TYPE_IMAGE /*1*/:
                        ProfilesActivity.this.mIntent.putExtra(AlbusModelObject.PAGE, 20);
                        ProfilesActivity.this.startActivity(ProfilesActivity.this.mIntent);
                        return;
                    case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                        ProfilesActivity.this.mIntent.putExtra(AlbusModelObject.PAGE, 23);
                        ProfilesActivity.this.startActivity(ProfilesActivity.this.mIntent);
                        return;
                    case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                        ProfilesActivity.this.mIntent.putExtra(AlbusModelObject.PAGE, 22);
                        ProfilesActivity.this.startActivity(ProfilesActivity.this.mIntent);
                        return;
                    case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                        ProfilesActivity.this.mIntent.putExtra(AlbusModelObject.PAGE, 26);
                        ProfilesActivity.this.startActivity(ProfilesActivity.this.mIntent);
                        return;
                    case SimpleLog.LOG_LEVEL_OFF /*7*/:
                        ProfilesActivity.this.mIntent.putExtra(AlbusModelObject.PAGE, 27);
                        ProfilesActivity.this.startActivity(ProfilesActivity.this.mIntent);
                        return;
                    case Utils.FILE_TYPE_INSTALLER /*8*/:
                        ProfilesActivity.this.mIntent.putExtra(AlbusModelObject.PAGE, 28);
                        ProfilesActivity.this.startActivity(ProfilesActivity.this.mIntent);
                        return;
                    default:
                        return;
                }
            }
        });
        LongMessageCacheParams longMessageCacheParams = new LongMessageCacheParams("");
        longMessageCacheParams.memCacheSize = (Utils.getMemoryClass(this) * AccessibilityNodeInfoCompat.ACTION_DISMISS) / 3;
        longMessageCacheParams.diskCacheEnabled = false;
        this.mLongMessageWorker = new LongMessageWorker(this);
        this.mLongMessageWorker.setLongMessageCache(LongMessageCache.findOrCreateCache((FragmentActivity) this, longMessageCacheParams));
        this.mLongMessageWorker.setLoadingMessage(getString(R.string.loading_message));
        ImageCacheParams imageCacheParams = new ImageCacheParams("");
        imageCacheParams.memCacheSize = (Utils.getMemoryClass(this) * AccessibilityNodeInfoCompat.ACTION_DISMISS) / 3;
        imageCacheParams.diskCacheEnabled = false;
        this.mThumbnailLoader = new ThumbnailLoader(this);
        this.mThumbnailLoader.setImageCache(ImageCache.findOrCreateCache((FragmentActivity) this, imageCacheParams));
        this.mUserPhotoLoader = new UserPhotoLoader(this, imageCacheParams);
        this.mDataContainer = new ArrayList();
        this.mPAdapter = new ProfileAdapter(this, this.mDataContainer, this.mThumbnailLoader, this.mUserPhotoLoader, this.mLongMessageWorker);
        this.mList.setAdapter(this.mPAdapter);
    }

    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.actionbar_profile, menu);
        MenuItem findItem = menu.findItem(R.id.mute);
        MenuItem findItem2 = menu.findItem(R.id.unfriend);
        MenuItem findItem3 = menu.findItem(R.id.block);
        MenuItem findItem4 = menu.findItem(R.id.delete_group);
        MenuItem findItem5 = menu.findItem(R.id.reset_name);
        findItem.setVisible(false);
        findItem2.setVisible(false);
        findItem3.setVisible(false);
        findItem4.setVisible(false);
        findItem5.setVisible(false);
        return true;
    }

    public void onDestroy() {
        super.onDestroy();
        this.mCatfiz.destroy();
        this.mThumbnailLoader = null;
    }

    public boolean onOptionsItemSelected(MenuItem menuItem) {
        Intent intent;
        switch (menuItem.getItemId()) {
            case 16908332:
                if (this.mIsChangePp) {
                    getIntent();
                    setResult(-1);
                }
                finish();
                return true;
            case R.id.qrcode:
                intent = new Intent(this, MenuActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 6);
                intent.putExtra(HTTP.IDENTITY_CODING, 3);
                intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, CatfishService.getUserPIN());
                intent.putExtra(CatfishDataStorage.NIC_NAME, this.mUser.getName());
                startActivityForResult(intent, 11);
                return true;
            case R.id.edit_photo:
                editProfPic();
                return true;
            case R.id.edit_name:
                intent = new Intent(this, CustomActionBarPageActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 20);
                intent.putExtra(AlbusModelObject.VALUE, "");
                startActivityForResult(intent, 20);
                return true;
            case R.id.copy_nic:
                AlbusUtils.copyToClipboard(this, CatfishService.getUserPIN());
                AlbusUtils.setToastView(this, getString(R.string.nic_copied));
                return true;
            case R.id.account:
                intent = new Intent(this, SettingsMenuActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 13);
                intent.putExtra(HTTP.IDENTITY_CODING, 3);
                startActivity(intent);
                return true;
            default:
                return super.onOptionsItemSelected(menuItem);
        }
    }

    protected void onPause() {
        super.onPause();
        if (this.mThumbnailLoader != null) {
            this.mThumbnailLoader.setExitTasksEarly(true);
        }
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
        checkUnreadCommentLike();
        if (this.mThumbnailLoader != null) {
            this.mThumbnailLoader.setExitTasksEarly(false);
        }
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.start();
        }
    }

    public boolean onSignalEvent(Signal signal) {
        Log.d(TAG, "onSignalEvent: " + signal);
        if (signal == Signal.STATUS_COMMENT_MESSAGE) {
            fetchStatusComment();
        }
        return true;
    }

    public boolean onSignalEventNewMessage(Signal signal, User user, int i, String str) {
        Log.d(TAG, "onSignalEventNewMessage: " + signal + ", " + i + ", " + str);
        return false;
    }

    public boolean onSignalEventNewUpdates(int i, String str) {
        Log.d(TAG, "onSignalEventNewUpdates: " + i + ", " + str);
        if (i == UpdateRecent.SELFPHOTOUPDT.ordinal()) {
            this.mIsChangePp = true;
        }
        return false;
    }

    public boolean onSignalUpdateProgress(Signal signal, String str, int i, int i2) {
        Log.d(TAG, "progresss<String, int> : " + str + ", progresss : " + i + ", state " + i2);
        this.mPAdapter.setUpdateProgress(str, i, i2);
        this.mPAdapter.notifyDataSetChanged();
        return false;
    }

    public boolean onSignalUpdateProgress(Signal signal, Map map, Map map2) {
        Log.d(TAG, "onSignalUpdateProgress<map>");
        this.mPAdapter.setProgress(map, map2);
        this.mPAdapter.notifyDataSetChanged();
        return false;
    }

    public void onStop() {
        super.onStop();
        this.mCatfiz.finish();
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.stop();
        }
    }

    public void sendLike(int i) {
        long j = CatfishService.getCatfishPreferences().getLong(CatfishService.USERSTATUS_SEQ_PREF, 0);
        this.mIsLike = i;
        this.mCatfiz.userFriendLikeUpdate(CatfishService.getUserPIN(), i, j, new SendLikeCb(this));
        this.mList.invalidate();
    }
}
