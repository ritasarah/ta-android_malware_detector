package com.albus.activity;

import android.app.ActivityManager.TaskDescription;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.view.MenuItemCompat;
import android.support.v4.view.MenuItemCompat.OnActionExpandListener;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MenuItem.OnMenuItemClickListener;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.RelativeLayout;
import com.albus.adapter.CategoryDialogAdapter;
import com.albus.fragment.CategoryFragment;
import com.albus.util.AlbusUtils;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Callback.FetchCategoryCallback;
import com.catfiz.base.Callback.FetchUserCategoriesCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.model.Category;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.signal.Signal;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class CategoryActivity extends ActionBarActivity implements ICatfiz {
    private static final String TAG = "CategoryActivity";
    private ActionBar mActionBar = null;
    private int mCategory;
    private List mCategoryId = new ArrayList();
    private String mCategoryName = null;
    private Catfiz mCatfiz = null;
    private EditText mEtSearch = null;
    public Fragment mFragment = null;
    private boolean mIsSearchMode = false;
    private List mRemovedId = new ArrayList();
    private MenuItem mSearchItem = null;
    private List mSelectedId = new ArrayList();

    public void addToCategory(String str) {
        int i = 0;
        Log.d(TAG, "category selected id size : " + this.mSelectedId.size());
        for (Category category : this.mSelectedId) {
            for (Integer intValue : getCategoryID()) {
                if (intValue.intValue() == category.getID()) {
                    removeCategoryID(category.getID());
                }
            }
        }
        int[] iArr = new int[getRemovedId().size()];
        Log.d(TAG, "category removed id size : " + this.mSelectedId.size());
        for (int i2 = 0; i2 < getRemovedId().size(); i2++) {
            iArr[i2] = ((Integer) getRemovedId().get(i2)).intValue();
        }
        if (iArr.length > 0) {
            this.mCatfiz.deleteMultipleFriendsFromCategory(iArr, str, new Callback() {
                public void onError() {
                }

                public void onSuccess() {
                }
            });
        }
        Log.d(TAG, "category size : " + getCategoryID().size());
        int[] iArr2 = new int[getCategoryID().size()];
        while (i < getCategoryID().size()) {
            iArr2[i] = ((Integer) getCategoryID().get(i)).intValue();
            i++;
        }
        if (iArr2.length > 0) {
            this.mCatfiz.addMultipleCategory(iArr2, str, new Callback() {
                public void onError() {
                    AlbusUtils.setToastView(CategoryActivity.this, CategoryActivity.this.getString(R.string.add_failed));
                }

                public void onSuccess() {
                    AlbusUtils.setToastView(CategoryActivity.this, CategoryActivity.this.getString(R.string.add_succeeded));
                }
            });
        }
    }

    public void collapseActionMenuSearch() {
        if (this.mSearchItem != null && MenuItemCompat.isActionViewExpanded(this.mSearchItem)) {
            MenuItemCompat.collapseActionView(this.mSearchItem);
        }
    }

    public List getCategoryID() {
        return this.mCategoryId;
    }

    public List getRemovedId() {
        Log.d(TAG, "removed category : " + this.mRemovedId);
        List arrayList = new ArrayList();
        Set hashSet = new HashSet();
        for (Integer num : this.mRemovedId) {
            if (hashSet.add(num)) {
                arrayList.add(num);
            }
        }
        Log.d(TAG, "removed category after get rid of the duplicate: " + this.mRemovedId);
        return arrayList;
    }

    public boolean isEnterSearchMode() {
        return this.mIsSearchMode;
    }

    protected void onActivityResult(int i, int i2, Intent intent) {
        super.onActivityResult(i, i2, intent);
        Log.d(TAG, "onActivityResult FriendsCategoryActivity");
        if (i2 != -1) {
            return;
        }
        if (intent == null) {
            Log.d(TAG, "onActivityResult FriendsCategoryActivity finish");
            finish();
            return;
        }
        this.mActionBar.setTitle(intent.getStringExtra(CatfishDataStorage.NIC_NAME));
        ((CategoryFragment) this.mFragment).updateData();
    }

    public void onBackPressed() {
        super.onBackPressed();
    }

    public void onCatfizStarted() {
    }

    public void onCatfizStopped() {
    }

    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        Log.d(TAG, "onCreate FriendsCategoryActivity");
        setContentView((int) R.layout.activity_view);
        this.mCatfiz = new Catfiz(this, this);
        if (Utils.hasLollipop()) {
            setTaskDescription(new TaskDescription(null, null, getResources().getColor(R.color.red)));
            Window window = getWindow();
            window.clearFlags(67108864);
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.setStatusBarColor(getResources().getColor(R.color.red2));
        }
        ((RelativeLayout) findViewById(R.id.rl_background)).setBackgroundColor(getResources().getColor(R.color.red));
        this.mActionBar = getSupportActionBar();
        this.mActionBar.setDisplayHomeAsUpEnabled(true);
        Configuration configuration = getResources().getConfiguration();
        if (Utils.hasJellyBeanMR1() && configuration.getLayoutDirection() == 1) {
            this.mActionBar.setHomeAsUpIndicator((int) R.drawable.ic_back_light_reverse);
        } else {
            this.mActionBar.setHomeAsUpIndicator((int) R.drawable.ic_back_light);
        }
        this.mCategoryName = getIntent().getStringExtra(CatfishDataStorage.NIC_NAME);
        this.mActionBar.setTitle(this.mCategoryName);
        this.mCategory = getIntent().getIntExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, 0);
        FragmentTransaction beginTransaction = getSupportFragmentManager().beginTransaction();
        this.mFragment = CategoryFragment.newInstance();
        beginTransaction.replace(R.id.fl_view, this.mFragment);
        beginTransaction.commit();
    }

    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.actionbar_friends_category, menu);
        final MenuItem findItem = menu.findItem(R.id.setting);
        this.mSearchItem = menu.findItem(R.id.search_friend);
        View actionView = MenuItemCompat.getActionView(this.mSearchItem);
        ImageButton imageButton = (ImageButton) actionView.findViewById(R.id.ib_clear);
        this.mEtSearch = (EditText) actionView.findViewById(R.id.txt_search);
        this.mEtSearch.addTextChangedListener(new TextWatcher() {
            public void afterTextChanged(Editable editable) {
            }

            public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
            }

            public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                String obj = CategoryActivity.this.mEtSearch.getText().toString();
                boolean z = i3 == 0 || i2 > i3;
                ((CategoryFragment) CategoryActivity.this.mFragment).limitListView(obj, z);
            }
        });
        findItem.setOnMenuItemClickListener(new OnMenuItemClickListener() {
            public boolean onMenuItemClick(MenuItem menuItem) {
                Intent intent = new Intent(CategoryActivity.this, CategorySettingsActivity.class);
                intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, CategoryActivity.this.mCategory);
                intent.putExtra(CatfishDataStorage.NIC_NAME, CategoryActivity.this.mCategoryName);
                CategoryActivity.this.startActivityForResult(intent, 20);
                return true;
            }
        });
        MenuItemCompat.setOnActionExpandListener(this.mSearchItem, new OnActionExpandListener() {
            public boolean onMenuItemActionCollapse(MenuItem menuItem) {
                ((InputMethodManager) CategoryActivity.this.getSystemService("input_method")).hideSoftInputFromWindow(CategoryActivity.this.mEtSearch.getWindowToken(), 0);
                findItem.setVisible(true);
                ((CategoryFragment) CategoryActivity.this.mFragment).leaveSearchMode();
                CategoryActivity.this.mIsSearchMode = false;
                return true;
            }

            public boolean onMenuItemActionExpand(MenuItem menuItem) {
                CategoryActivity.this.mEtSearch.requestFocus();
                ((InputMethodManager) CategoryActivity.this.getSystemService("input_method")).toggleSoftInput(1, 0);
                CategoryActivity.this.mEtSearch.requestFocus();
                CategoryActivity.this.mEtSearch.setText("");
                findItem.setVisible(false);
                ((CategoryFragment) CategoryActivity.this.mFragment).enterSearchMode();
                CategoryActivity.this.mIsSearchMode = true;
                return true;
            }
        });
        imageButton.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                CategoryActivity.this.mEtSearch.setText("");
            }
        });
        return true;
    }

    public void onDestroy() {
        super.onDestroy();
        this.mCatfiz.destroy();
    }

    public boolean onOptionsItemSelected(MenuItem menuItem) {
        switch (menuItem.getItemId()) {
            case 16908332:
                finish();
                return true;
            default:
                return super.onOptionsItemSelected(menuItem);
        }
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    public void onStop() {
        super.onStop();
        this.mCatfiz.finish();
    }

    public void removeCategoryID(int i) {
        for (int i2 = 0; i2 < this.mCategoryId.size(); i2++) {
            if (((Integer) this.mCategoryId.get(i2)).intValue() == i) {
                this.mCategoryId.remove(i2);
            }
        }
    }

    public void removeFrom(String str) {
        Log.d(TAG, "removeFrom category = " + this.mCategoryId + " friendpin = " + str);
        this.mCatfiz.deleteFromCategoryOneByOne(this.mCategory, str, new Callback() {
            public void onError() {
            }

            public void onSuccess() {
                ((CategoryFragment) CategoryActivity.this.mFragment).updateData();
            }
        });
    }

    public void setAdapterDialog(int i, String str, ListView listView, Context context, DialogFragment dialogFragment) {
        this.mCategoryId.clear();
        this.mRemovedId.clear();
        this.mSelectedId.clear();
        final List arrayList = new ArrayList();
        final int i2 = i;
        final Context context2 = context;
        final DialogFragment dialogFragment2 = dialogFragment;
        final ListView listView2 = listView;
        final String str2 = str;
        this.mCatfiz.FetchCategory(new FetchCategoryCallback() {
            public void onData(final List list) {
                CategoryActivity.this.mCatfiz.fetchUserCategories(new FetchUserCategoriesCallback() {
                    public void onData(List list) {
                        Log.d(CategoryActivity.TAG, "in category : " + list.size());
                        for (Category category : list) {
                            if (category.getName().equals("All")) {
                                category.setSelected(true);
                            }
                            for (Category id : list) {
                                if (id.getID() == category.getID()) {
                                    category.setSelected(true);
                                    break;
                                }
                            }
                        }
                        CategoryActivity.this.mSelectedId.addAll(list);
                        arrayList.addAll(list);
                        listView2.setAdapter(new CategoryDialogAdapter(i2, context2, dialogFragment2, arrayList, 45));
                    }

                    public void onError() {
                    }

                    public void onSuccess() {
                    }
                }, str2);
            }

            public void onError() {
            }

            public void onSuccess() {
            }
        });
    }

    public void setCategoryID(int i) {
        this.mCategoryId.add(Integer.valueOf(i));
    }

    public void setRemovedID(int i) {
        for (Category id : this.mSelectedId) {
            if (id.getID() == i) {
                this.mRemovedId.add(Integer.valueOf(i));
            }
        }
    }

    public void unfriend(String str, final String str2) {
        this.mCatfiz.userUnfriend(str, new Callback() {
            public void onError() {
                Log.d(CategoryActivity.TAG, "added to black list error");
            }

            public void onSuccess() {
                Log.d(CategoryActivity.TAG, "added to black list = " + str2);
                ((CategoryFragment) CategoryActivity.this.mFragment).updateData();
            }
        });
    }
}
