package com.albus.activity;

import android.app.ActivityManager.TaskDescription;
import android.app.Dialog;
import android.app.NotificationManager;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnDismissListener;
import android.content.Intent;
import android.content.IntentFilter;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.content.LocalBroadcastManager;
import android.support.v4.view.MenuItemCompat;
import android.support.v4.view.MenuItemCompat.OnActionExpandListener;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.support.v7.app.AppCompatActivity;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MenuItem.OnMenuItemClickListener;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.albus.fragment.HomeFragment;
import com.albus.media.CroppedPhotoLoader;
import com.albus.media.ImageCache;
import com.albus.media.ImageCache.ImageCacheParams;
import com.albus.media.ThumbnailLoader;
import com.albus.media.UserPhotoLoader;
import com.albus.util.AlbusModelObject;
import com.albus.view.CircleImageView;
import com.catfiz.R;
import com.catfiz.backup.LocalBackup;
import com.catfiz.base.Callback.GetCountCallback;
import com.catfiz.base.Callback.UserFetchFriendsCallback;
import com.catfiz.base.Callback.UserFetchFriendsRequestCallback;
import com.catfiz.base.Callback.UserFetchGroupsCallback;
import com.catfiz.base.Callback.UserFetchProfileCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.Constant;
import com.catfiz.base.ICatfiz;
import com.catfiz.consts.CatfizMsgTypes;
import com.catfiz.intents.BroadcastIntents;
import com.catfiz.model.Group;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishService;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.signal.Signal;
import com.catfiz.signal.SignalBinderNotification;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.lang.ref.WeakReference;
import java.util.List;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.apache.http.protocol.HTTP;

public class AlbusMainActivity extends AppCompatActivity implements OnClickListener, ICatfiz {
    private static final int AB_MODE_FRONT_UI = 0;
    private static final int AB_MODE_MULTIPLE_DELETE_CHAT = 1;
    private static final int AB_MODE_MULTIPLE_DELETE_GROUP = 2;
    private static final String CHAT_DIM = "enable_dim_chat";
    private static final String CHAT_RINGTONE = "select_chat_ringtone";
    private static final String CHAT_RINGTONE_ENABLED = "enable_chat_ringtone";
    private static final String CHAT_VIBRATE = "enable_chat_vibrate";
    private static final String GROUP_DIM = "enable_dim_pool";
    private static final String GROUP_RINGTONE = "select_pool_ringtone";
    private static final String GROUP_RINGTONE_ENABLED = "enable_pool_ringtone";
    private static final String GROUP_VIBRATE = "enable_pool_vibrate";
    private static final String IS_TUTORIAL_MAIN_DONE = "done_maintutorial";
    private static final String MY_STATUS_DIM = "enable_dim_status";
    private static final String MY_STATUS_RINGTONE = "select_status_ringtone";
    private static final String MY_STATUS_RINGTONE_ENABLED = "enable_status_ringtone";
    private static final String MY_STATUS_VIBRATE = "enable_status_vibrate";
    private static final String PREVIOUS_STATE = "previous_page_state";
    private static final String RINGTONE_ENABLED = "enable_ringtone";
    private static final String TAG = AlbusMainActivity.class.getSimpleName();
    private static volatile AlbusMainHandler mAlbusMainHandler = null;
    private static BroadcastReceiver mPPFReceier = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            Log.d(AlbusMainActivity.TAG, "ppf download receive ppf signal");
            if (AlbusMainActivity.mAlbusMainHandler == null) {
                Log.e(AlbusMainActivity.TAG, "Main Handler is not exists.");
                return;
            }
            Message obtainMessage = AlbusMainActivity.mAlbusMainHandler.obtainMessage();
            obtainMessage.obj = intent.getStringExtra(CatfishService.PPF_DOWNLOAD_FRIENDPIN);
            AlbusMainActivity.mAlbusMainHandler.sendMessage(obtainMessage);
        }
    };
    private int mAbMode = AB_MODE_FRONT_UI;
    private Catfiz mCatfiz = null;
    private MenuItem mClearItem = null;
    private CroppedPhotoLoader mCropppedPhotoLoader = null;
    private MenuItem mDropItem = null;
    private EditText mEtSearch = null;
    private boolean mFirst = true;
    private int mFlag = AB_MODE_MULTIPLE_DELETE_CHAT;
    private Fragment mFragment = null;
    private int mGroupSelectStateHelper = -1;
    public boolean mHasNewMsg = false;
    private MenuItem mLeaveItem = null;
    private LinearLayout mLlNotifFriend = null;
    private int mMaxSelectedHelper = AB_MODE_FRONT_UI;
    private String mMyName = null;
    private int mNotif = AB_MODE_FRONT_UI;
    private OnExecuteDeleteChat mOnExecuteDeleteChat = null;
    private OnExecuteDeleteGroup mOnExecuteDeleteGroup = null;
    private OnMultipleDeleteChatEvent mOnMultipleDeleteChatEvent = null;
    private OnMultipleDeleteGroupEvent mOnMultipleDeleteGroupEvent = null;
    private OnMultipleDeleteHomeViewEvent mOnMultipleDeleteHomeViewEvent = null;
    private MenuItem mSearchItem = null;
    private User mSelf = null;
    private ThumbnailLoader mThumbnailLoader;
    private UserPhotoLoader mUserPhotoLoader = null;

    /* synthetic */ class AnonymousClass22 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$signal$Signal = new int[Signal.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$signal$Signal[Signal.USER_FRIEND_REQUEST.ordinal()] = AlbusMainActivity.AB_MODE_MULTIPLE_DELETE_CHAT;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$signal$Signal[Signal.GROUP_NEW_INVITATION.ordinal()] = AlbusMainActivity.AB_MODE_MULTIPLE_DELETE_GROUP;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$signal$Signal[Signal.STATUS_COMMENT_RESPONSE.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$signal$Signal[Signal.STATUS_COMMENT_MESSAGE.ordinal()] = 4;
            } catch (NoSuchFieldError e4) {
            }
        }
    }

    class AlbusMainHandler extends Handler {
        private WeakReference mAlbusActivityRef = null;

        public AlbusMainHandler(AlbusMainActivity albusMainActivity) {
            this.mAlbusActivityRef = new WeakReference(albusMainActivity);
        }

        public void handleMessage(Message message) {
            super.handleMessage(message);
            if (this.mAlbusActivityRef != null) {
                AlbusMainActivity albusMainActivity = (AlbusMainActivity) this.mAlbusActivityRef.get();
                if (albusMainActivity != null) {
                    String str = (String) message.obj;
                    if (str == null) {
                        return;
                    }
                    if (albusMainActivity.mCatfiz == null || !albusMainActivity.mCatfiz.isCatfizStarted()) {
                        Log.e(AlbusMainActivity.TAG, "[BUG] broadcast (mPPFReceier) too early. please check");
                    } else {
                        albusMainActivity.refreshAllFriendsPhoto(str);
                    }
                }
            }
        }
    }

    public class FetchFriendRequestCb implements UserFetchFriendsRequestCallback {
        private WeakReference mThisActivityRef;

        public FetchFriendRequestCb(FragmentActivity fragmentActivity) {
            this.mThisActivityRef = new WeakReference(fragmentActivity);
        }

        public void onData(List list) {
            AlbusMainActivity albusMainActivity = (AlbusMainActivity) this.mThisActivityRef.get();
            if (albusMainActivity == null) {
                Log.d(AlbusMainActivity.TAG, "FetchFriendRequestCb weak Ref is null");
            } else {
                albusMainActivity.mNotif = list.size();
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    public class FetchPendingGroupCb implements UserFetchGroupsCallback {
        private WeakReference mThisActivityRef;

        public FetchPendingGroupCb(FragmentActivity fragmentActivity) {
            this.mThisActivityRef = new WeakReference(fragmentActivity);
        }

        public void onData(List list) {
            AlbusMainActivity albusMainActivity = (AlbusMainActivity) this.mThisActivityRef.get();
            if (albusMainActivity == null) {
                Log.d(AlbusMainActivity.TAG, "FetchPendingGroupCb weak Ref is null");
                return;
            }
            albusMainActivity.mNotif = albusMainActivity.mNotif + list.size();
            Log.d(AlbusMainActivity.TAG, "notif count=" + albusMainActivity.mNotif);
            albusMainActivity.invalidateOptionsMenu();
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    public class FetchProfileCb implements UserFetchProfileCallback {
        private WeakReference mThisActivityRef;

        public FetchProfileCb(FragmentActivity fragmentActivity) {
            this.mThisActivityRef = new WeakReference(fragmentActivity);
        }

        public void onData(User user) {
            AlbusMainActivity albusMainActivity = (AlbusMainActivity) this.mThisActivityRef.get();
            if (albusMainActivity == null) {
                Log.d(AlbusMainActivity.TAG, "FetchProfileCb weak Ref is null");
                return;
            }
            albusMainActivity.mSelf = user;
            ((HomeFragment) albusMainActivity.mFragment).setABData(user);
            if (albusMainActivity.mFirst) {
                ((HomeFragment) albusMainActivity.mFragment).updateUserPic(user, false);
            } else {
                ((HomeFragment) albusMainActivity.mFragment).updateUserPic(user, true);
            }
            if (user.getPassword() != null) {
                Log.d(AlbusMainActivity.TAG, "!!! FORCE UPDATE USER PROFILE NOW");
                albusMainActivity.doProfileUpdate(user);
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    public interface OnExecuteDeleteChat {
        void deleteChats();
    }

    public interface OnExecuteDeleteGroup {
        void clearGroupConvs();

        void dropGroups();

        void leaveGroups();
    }

    public interface OnMultipleDeleteChatEvent {
        void onDeleteChat();

        void onEnterMultipleDelete();

        void onExitMultipleDelete();

        void onSelectAllChat();

        void onSelectItem(int i, int i2);
    }

    public interface OnMultipleDeleteGroupEvent {
        void onClearGroupConv();

        void onDropGroup();

        void onEnterMultipleDelete();

        void onExitMultipleDelete();

        void onLeaveGroup();

        void onSelectAllGroup();

        void onSelectItem(int i, int i2);
    }

    public interface OnMultipleDeleteHomeViewEvent {
        void onEnterMultipleDelete();

        void onExitMultipleDelete();

        void onSelectItem(int i, int i2);
    }

    private void doProfileUpdate(User user) {
        this.mCatfiz.userProfileNameUpdate(user, user.getName(), null);
    }

    private void getActionbarData() {
        this.mCatfiz.userFetchProfile(new FetchProfileCb(this));
    }

    private void initOnStarted() {
        _updateFriendListHelper();
        getActionbarData();
        getNotifCount();
        getProfileNotifCount();
        Log.d(TAG, "userid=" + CatfishService.getUserPIN());
    }

    private void initTutorialDialog(User user) {
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        Uri defaultUri = RingtoneManager.getDefaultUri(AB_MODE_MULTIPLE_DELETE_GROUP);
        catfishPreferences.edit().putString(CHAT_RINGTONE, defaultUri.toString()).commit();
        catfishPreferences.edit().putString(GROUP_RINGTONE, defaultUri.toString()).commit();
        catfishPreferences.edit().putString(MY_STATUS_RINGTONE, defaultUri.toString()).commit();
        catfishPreferences.edit().putBoolean(CHAT_VIBRATE, false).commit();
        catfishPreferences.edit().putBoolean(GROUP_VIBRATE, false).commit();
        catfishPreferences.edit().putBoolean(MY_STATUS_VIBRATE, false).commit();
        catfishPreferences.edit().putBoolean(CHAT_DIM, false).commit();
        catfishPreferences.edit().putBoolean(GROUP_DIM, false).commit();
        catfishPreferences.edit().putBoolean(MY_STATUS_DIM, false).commit();
        catfishPreferences.edit().putBoolean(RINGTONE_ENABLED, true).commit();
        catfishPreferences.edit().putBoolean(CHAT_RINGTONE_ENABLED, true).commit();
        catfishPreferences.edit().putBoolean(GROUP_RINGTONE_ENABLED, true).commit();
        catfishPreferences.edit().putBoolean(MY_STATUS_RINGTONE_ENABLED, true).commit();
        final Dialog dialog = new Dialog(this, R.style.DialogTutorial);
        final Dialog dialog2 = new Dialog(this, R.style.DialogTutorial);
        final Dialog dialog3 = new Dialog(this, R.style.DialogTutorial);
        final Dialog dialog4 = new Dialog(this, R.style.DialogTutorial);
        setDialogWindowColor(dialog);
        setDialogWindowColor(dialog2);
        setDialogWindowColor(dialog3);
        setDialogWindowColor(dialog4);
        dialog.setContentView(R.layout.tutorial_dialog0);
        this.mUserPhotoLoader.loadUserPhoto(user, (CircleImageView) dialog.findViewById(R.id.diRiv));
        dialog2.setContentView(R.layout.tutorial_dialog1);
        dialog3.setContentView(R.layout.tutorial_dialog2);
        dialog4.setContentView(R.layout.tutorial_dialog3);
        dialog.setOnDismissListener(new OnDismissListener() {
            public void onDismiss(DialogInterface dialogInterface) {
                dialog2.show();
            }
        });
        dialog2.setOnDismissListener(new OnDismissListener() {
            public void onDismiss(DialogInterface dialogInterface) {
                dialog3.show();
            }
        });
        dialog3.setOnDismissListener(new OnDismissListener() {
            public void onDismiss(DialogInterface dialogInterface) {
                dialog4.show();
            }
        });
        dialog4.setOnDismissListener(new OnDismissListener() {
            public void onDismiss(DialogInterface dialogInterface) {
                CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
                if (catfishPreferences != null) {
                    catfishPreferences.edit().putBoolean(AlbusMainActivity.IS_TUTORIAL_MAIN_DONE, true).commit();
                }
            }
        });
        dialog.show();
        ((Button) dialog.findViewById(R.id.button1)).setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                dialog.cancel();
                dialog2.show();
            }
        });
        ((Button) dialog2.findViewById(R.id.button1)).setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                dialog2.cancel();
                dialog3.show();
            }
        });
        ((Button) dialog3.findViewById(R.id.button1)).setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                dialog3.cancel();
                dialog4.show();
            }
        });
        ((Button) dialog4.findViewById(R.id.button1)).setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                dialog4.cancel();
                CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
                if (catfishPreferences != null) {
                    catfishPreferences.edit().putBoolean(AlbusMainActivity.IS_TUTORIAL_MAIN_DONE, true).commit();
                }
            }
        });
    }

    private void initViewOnStarted() {
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        catfishPreferences.edit().putInt(AlbusModelObject.PAGE_HOME, AB_MODE_MULTIPLE_DELETE_CHAT).commit();
        User user = new User();
        user.setId(CatfishService.getUserPIN());
        if (this.mFirst) {
            ((HomeFragment) this.mFragment).updateUserPic(this.mSelf, false);
        } else {
            ((HomeFragment) this.mFragment).updateUserPic(this.mSelf, true);
        }
        this.mMyName = catfishPreferences.getString(CatfishService.USERNAME_PREF, "");
        if (!catfishPreferences.getBoolean(IS_TUTORIAL_MAIN_DONE, false)) {
            initTutorialDialog(user);
        }
    }

    private void refreshAllFriendsPhoto(String str) {
        ((HomeFragment) this.mFragment).refreshAllFriendsPhoto(str);
    }

    private void setDialogWindowColor(Dialog dialog) {
        if (Utils.hasLollipop()) {
            Window window = dialog.getWindow();
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.clearFlags(67108864);
            window.setStatusBarColor(getResources().getColor(R.color.black_70percent));
        }
    }

    private void setStatusBarRed() {
        if (Utils.hasLollipop()) {
            setTaskDescription(new TaskDescription(null, null, getResources().getColor(R.color.red)));
            Window window = getWindow();
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.clearFlags(67108864);
            window.setStatusBarColor(getResources().getColor(R.color.red2));
        }
    }

    private void setStatusBarWhite() {
        if (Utils.hasLollipop()) {
            setTaskDescription(new TaskDescription(null, null, getResources().getColor(R.color.red)));
            Window window = getWindow();
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.clearFlags(67108864);
            window.setStatusBarColor(getResources().getColor(R.color.white87));
        }
    }

    public void _updateFriendListHelper() {
        Log.d(TAG, "Force Catfiz SDK to update friendlist helper");
        this.mCatfiz.userFetchFriends(new UserFetchFriendsCallback() {
            public void onData(List list) {
                Log.d(AlbusMainActivity.TAG, "friendlist helper should be updated");
            }

            public void onError() {
                Log.d(AlbusMainActivity.TAG, "onError userFetchFriends()");
            }

            public void onSuccess() {
                Log.d(AlbusMainActivity.TAG, "onSuccess userFetchFriends()");
            }
        });
    }

    public void collapseActionMenuSearch() {
        if (this.mSearchItem != null && MenuItemCompat.isActionViewExpanded(this.mSearchItem)) {
            MenuItemCompat.collapseActionView(this.mSearchItem);
        }
    }

    public void deleteChats() {
        this.mOnExecuteDeleteChat.deleteChats();
    }

    public void deleteGroups(int i) {
        if (i == 0) {
            this.mOnExecuteDeleteGroup.dropGroups();
        } else if (i == AB_MODE_MULTIPLE_DELETE_CHAT) {
            this.mOnExecuteDeleteGroup.leaveGroups();
        } else {
            this.mOnExecuteDeleteGroup.clearGroupConvs();
        }
    }

    public void dismissKeyboard() {
        ((InputMethodManager) getSystemService("input_method")).hideSoftInputFromWindow(this.mEtSearch.getWindowToken(), AB_MODE_FRONT_UI);
    }

    public void enterMultipleDelete(int i, int i2) {
        if (i == AB_MODE_MULTIPLE_DELETE_CHAT) {
            this.mAbMode = AB_MODE_MULTIPLE_DELETE_CHAT;
            this.mOnMultipleDeleteChatEvent.onEnterMultipleDelete();
        } else {
            this.mAbMode = AB_MODE_MULTIPLE_DELETE_GROUP;
            this.mOnMultipleDeleteGroupEvent.onEnterMultipleDelete();
        }
        this.mMaxSelectedHelper = i2;
        this.mOnMultipleDeleteHomeViewEvent.onEnterMultipleDelete();
        invalidateOptionsMenu();
        setStatusBarWhite();
    }

    public void exitMultipleDelete() {
        if (this.mAbMode == AB_MODE_MULTIPLE_DELETE_CHAT) {
            this.mOnMultipleDeleteChatEvent.onExitMultipleDelete();
        } else {
            this.mOnMultipleDeleteGroupEvent.onExitMultipleDelete();
        }
        this.mMaxSelectedHelper = AB_MODE_FRONT_UI;
        this.mGroupSelectStateHelper = -1;
        this.mOnMultipleDeleteHomeViewEvent.onExitMultipleDelete();
        this.mAbMode = AB_MODE_FRONT_UI;
        invalidateOptionsMenu();
        setStatusBarRed();
    }

    public CroppedPhotoLoader getCroppedPhotoLoader() {
        return this.mCropppedPhotoLoader;
    }

    public int getIdentity() {
        return getIntent().getIntExtra(HTTP.IDENTITY_CODING, -1);
    }

    public HomeFragment getMainFragment() {
        return (HomeFragment) this.mFragment;
    }

    public String getMyName() {
        return this.mMyName;
    }

    public void getNotifCount() {
        this.mCatfiz.userFetchFriendsRequest(new FetchFriendRequestCb(this));
        this.mCatfiz.userFetchPendingGroups(new FetchPendingGroupCb(this));
    }

    public void getProfileNotifCount() {
        this.mCatfiz.requestUnreadStatusCommentCount(new GetCountCallback() {
            public void onData(final int i) {
                AlbusMainActivity.this.mCatfiz.requestUnreadStatusLikeCount(new GetCountCallback() {
                    public void onData(int i) {
                        ((HomeFragment) AlbusMainActivity.this.mFragment).eventIncomingCommentLike(i, i);
                    }

                    public void onError() {
                    }

                    public void onSuccess() {
                    }
                });
            }

            public void onError() {
            }

            public void onSuccess() {
            }
        });
    }

    public ThumbnailLoader getThumbnailLoader() {
        return this.mThumbnailLoader;
    }

    public UserPhotoLoader getUserPhotoLoader() {
        return this.mUserPhotoLoader;
    }

    public boolean getVerify() {
        return this.mCatfiz.isAccountVerified();
    }

    public void goToChat(int i, String str, String str2, boolean z, int i2, int i3, boolean z2) {
        Intent intent = new Intent(this, ChatGroupConvActivity.class);
        if (i == 0) {
            intent.putExtra(CatfishDataStorage.NIC_NAME, str2);
            if (str.length() > 10) {
                intent.putExtra(AlbusModelObject.PAGE, AB_MODE_MULTIPLE_DELETE_GROUP);
                intent.putExtra(HTTP.IDENTITY_CODING, AB_MODE_MULTIPLE_DELETE_GROUP);
                intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, str);
            } else {
                intent.putExtra(AlbusModelObject.FRIEND_ID, str);
                intent.putExtra(AlbusModelObject.PAGE, AB_MODE_MULTIPLE_DELETE_CHAT);
                intent.putExtra(HTTP.IDENTITY_CODING, AB_MODE_MULTIPLE_DELETE_CHAT);
            }
            startActivity(intent);
        } else if (i == AB_MODE_MULTIPLE_DELETE_CHAT) {
            collapseActionMenuSearch();
            intent.putExtra(AlbusModelObject.PAGE, AB_MODE_MULTIPLE_DELETE_CHAT);
            intent.putExtra(HTTP.IDENTITY_CODING, AB_MODE_MULTIPLE_DELETE_CHAT);
            intent.putExtra(AlbusModelObject.FRIEND_ID, str);
            intent.putExtra(CatfishDataStorage.NIC_NAME, str2);
            intent.putExtra(AlbusModelObject.IS_OFFICIAL, z);
            intent.putExtra(AlbusModelObject.UNREAD_COUNT, i2);
            startActivityForResult(intent, 26);
        } else if (i == AB_MODE_MULTIPLE_DELETE_GROUP) {
            collapseActionMenuSearch();
            intent.putExtra(CatfishDataStorage.NIC_NAME, str2);
            intent.putExtra(AlbusModelObject.IS_DELETED, z2);
            intent.putExtra(AlbusModelObject.LAST_READ_POS, i3);
            intent.putExtra(AlbusModelObject.UNREAD_MSG, i2);
            intent.putExtra(AlbusModelObject.PAGE, AB_MODE_MULTIPLE_DELETE_GROUP);
            intent.putExtra(HTTP.IDENTITY_CODING, AB_MODE_MULTIPLE_DELETE_GROUP);
            intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, str);
            startActivity(intent);
        } else {
            Log.d(TAG, "!!! PAGE NOT DEFINED!");
        }
    }

    public void goToChat(Group group) {
        goToChat(AB_MODE_MULTIPLE_DELETE_GROUP, group.getGroupID(), group.getName(), false, group.getUnreadMessagescount(), group.getLastReadMsgPosition(), group.isDeleted());
    }

    public void goToChat(User user) {
        goToChat(AB_MODE_MULTIPLE_DELETE_CHAT, user.getId(), user.getName(), user.isOfficial(), user.getUnreadCount(), AB_MODE_FRONT_UI, false);
    }

    public void goToComment(String str, int i, boolean z) {
        User user;
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        Intent intent = new Intent(this, CommentActivity.class);
        if (str.equals(CatfishService.getUserPIN())) {
            user = this.mSelf;
            catfishPreferences.edit().putInt(Constant.PREV_NOTIF_LIKE, AB_MODE_FRONT_UI).commit();
            catfishPreferences.edit().putInt(Constant.PREV_NOTIF_LIKE, AB_MODE_FRONT_UI).commit();
            intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, catfishPreferences.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0));
            intent.putExtra(AlbusModelObject.STATUS_LIKE, catfishPreferences.getInt(FriendListDataStorage.LIKESTATUS, AB_MODE_FRONT_UI));
            intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, catfishPreferences.getInt(Constant.IS_LIKE_MY_STATUS, AB_MODE_FRONT_UI));
        } else {
            user = Catfiz.matchFriendData(str);
            if (user != null) {
                intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, user.getStatusSequence());
                intent.putExtra(AlbusModelObject.STATUS_LIKE, user.getStatusLike());
                intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, user.isMeLikeThisStatus());
            } else {
                return;
            }
        }
        Log.d(TAG, "goToComment:" + user.getName() + "," + user.getStatusSequence() + "," + user.getStatusdate());
        intent.putExtra(AlbusModelObject.PAGE, i);
        intent.putExtra(CatfishDataStorage.NIC_NAME, user.getName());
        intent.putExtra(FriendListDataStorage.STATUS, user.getStatus());
        intent.putExtra(AlbusModelObject.DATE, user.getStatusdate());
        intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, user.getId());
        intent.putExtra(HTTP.IDENTITY_CODING, i);
        intent.putExtra(AlbusModelObject.IS_FROM_BUTTON_COMMENT, z);
        startActivityForResult(intent, i);
    }

    public void goToProfile(String str) {
        if (str == null) {
            Log.e(TAG, "goToProfile: invalid userid or NULL");
        } else if (str.equals(CatfishService.getUserPIN())) {
            startActivity(new Intent(this, ProfilesActivity.class));
        } else {
            User matchFriendData = Catfiz.matchFriendData(str);
            if (matchFriendData == null) {
                Log.d(TAG, "Catfiz.matchFriendData with null result, userid: " + str);
                return;
            }
            Log.d(TAG, "goToProfile:" + matchFriendData.getName() + "," + matchFriendData.getStatusSequence() + "," + matchFriendData.getStatusdate());
            Intent intent = new Intent(this, ProfilesFriendActivity.class);
            intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, matchFriendData.getId());
            intent.putExtra(CatfishDataStorage.NIC_NAME, matchFriendData.getName());
            intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, matchFriendData.getStatusSequence());
            intent.putExtra(AlbusModelObject.STATUS_LIKE, matchFriendData.getStatusLike());
            intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, matchFriendData.isMeLikeThisStatus());
            startActivity(intent);
        }
    }

    public void goToWhoLike(String str) {
        Intent intent = new Intent(this, MenuActivity.class);
        if (str.equals(CatfishService.getUserPIN())) {
            intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, CatfishService.getCatfishPreferences().getLong(CatfishService.USERSTATUS_SEQ_PREF, 0));
        } else {
            intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, Catfiz.matchFriendData(str).getStatusSequence());
        }
        intent.putExtra(AlbusModelObject.PAGE, 32);
        intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, str);
        startActivity(intent);
    }

    public boolean isMultiDeleteMode() {
        return this.mAbMode != 0;
    }

    public void launchMyProfile() {
        startActivityForResult(new Intent(this, ProfilesActivity.class), 11);
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        catfishPreferences.edit().putInt(Constant.PREV_NOTIF_LIKE, AB_MODE_FRONT_UI).commit();
        catfishPreferences.edit().putInt(Constant.PREV_NOTIF_LIKE, AB_MODE_FRONT_UI).commit();
    }

    public void notifySelectItemChat(int i, int i2, int i3) {
        this.mOnMultipleDeleteChatEvent.onSelectItem(i, i3);
        if (i2 > 0) {
            this.mOnMultipleDeleteHomeViewEvent.onSelectItem(i2, i);
        }
    }

    public void notifySelectItemGroup(int i, int i2, int i3, boolean z) {
        this.mGroupSelectStateHelper = i3;
        if (z) {
            this.mOnMultipleDeleteGroupEvent.onSelectItem(i, 3);
        } else {
            this.mOnMultipleDeleteGroupEvent.onSelectItem(i, i3);
            updateABGroupSelect();
        }
        if (i2 > 0) {
            this.mOnMultipleDeleteHomeViewEvent.onSelectItem(i2, i);
        }
    }

    protected void onActivityResult(int i, int i2, Intent intent) {
        super.onActivityResult(i, i2, intent);
        Log.d(TAG, ">>>>>>>> onActivityResult:" + TAG + " :" + i2 + " :" + i);
        if (i2 != -1) {
            return;
        }
        if (i == 11) {
            Log.d(TAG, "refreshActionBardata ");
            this.mFirst = false;
            ((HomeFragment) this.mFragment).updateUserPic(this.mSelf, true);
            ((HomeFragment) this.mFragment).refreshAllFriendsPhoto(CatfishService.getUserPIN());
        } else if (i != 26) {
            Log.v(TAG, "run in onactivityresult to refresh notif data");
            getProfileNotifCount();
            getNotifCount();
        } else if (intent != null) {
            Log.d(TAG, "has result data");
            if (intent.getBooleanExtra(AlbusModelObject.HAS_MESSAGE, false)) {
                this.mHasNewMsg = true;
                Log.d(TAG, "has new message:" + this.mHasNewMsg);
            }
        }
    }

    public void onBackPressed() {
        Log.d(TAG, ">>>>>>>> onBackPressed:" + TAG + ":" + this.mAbMode);
        if (isMultiDeleteMode()) {
            exitMultipleDelete();
        } else {
            super.onBackPressed();
        }
    }

    public void onCatfizStarted() {
        initViewOnStarted();
        initOnStarted();
    }

    public void onCatfizStopped() {
    }

    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.iv_ab_friend_notif:
                Intent intent = new Intent(this, SettingsMenuActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 9);
                startActivity(intent);
                return;
            default:
                return;
        }
    }

    protected void onCreate(Bundle bundle) {
        Intent intent;
        int intExtra;
        super.onCreate(bundle);
        Log.d(TAG, ">>>>>>>> onCreate:" + TAG);
        mAlbusMainHandler = new AlbusMainHandler(this);
        this.mCatfiz = new Catfiz(this, this, new SignalBinderNotification());
        setContentView((int) R.layout.activity_albus_main);
        if (Utils.hasLollipop()) {
            setTaskDescription(new TaskDescription(null, null, getResources().getColor(R.color.red)));
            Window window = getWindow();
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.clearFlags(67108864);
            window.setStatusBarColor(getResources().getColor(R.color.red2));
        }
        ImageCacheParams imageCacheParams = new ImageCacheParams("");
        imageCacheParams.memCacheSize = (AccessibilityNodeInfoCompat.ACTION_DISMISS * Utils.getMemoryClass(this)) / 3;
        imageCacheParams.diskCacheEnabled = false;
        this.mThumbnailLoader = new ThumbnailLoader(this);
        this.mThumbnailLoader.setImageCache(ImageCache.findOrCreateCache((FragmentActivity) this, imageCacheParams));
        this.mUserPhotoLoader = new UserPhotoLoader(this, imageCacheParams);
        this.mUserPhotoLoader.setLoadingImage(R.drawable.df_pict);
        this.mCropppedPhotoLoader = new CroppedPhotoLoader(this);
        this.mCropppedPhotoLoader.setImageCache(ImageCache.findOrCreateCache((FragmentActivity) this, imageCacheParams));
        this.mCropppedPhotoLoader.setLoadingImage((int) R.drawable.df_pict);
        this.mFragment = (HomeFragment) getSupportFragmentManager().findFragmentById(R.id.fl_view);
        if (this.mFragment == null) {
            FragmentTransaction beginTransaction = getSupportFragmentManager().beginTransaction();
            this.mFragment = HomeFragment.newInstance();
            beginTransaction.replace(R.id.fl_view, this.mFragment);
            beginTransaction.commit();
        }
        NotificationManager notificationManager;
        String stringExtra;
        if (bundle != null) {
            notificationManager = (NotificationManager) getSystemService("notification");
            notificationManager.cancel(AlbusModelObject.CATFISH_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.NEWMESSAGE_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.FRIENDREQUEST_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.NEWFRIEND_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.POOL_NEWMESSAGE_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.NEW_SERVERMESSAGE_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.NEW_UPDATE_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.INSTAL_UPDATE_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.HAS_TOPIC_NEED_TO_NOTIF_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.HAS_TOPIC_DELETED_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.THEMEUPDATE_NOTIFICATION_ID);
            intent = getIntent();
            intExtra = intent.getIntExtra(AlbusModelObject.PAGE, AB_MODE_FRONT_UI);
            stringExtra = intent.getStringExtra(AlbusModelObject.FRIEND_ID);
        } else {
            notificationManager = (NotificationManager) getSystemService("notification");
            notificationManager.cancel(AlbusModelObject.CATFISH_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.NEWMESSAGE_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.FRIENDREQUEST_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.NEWFRIEND_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.POOL_NEWMESSAGE_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.NEW_SERVERMESSAGE_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.NEW_UPDATE_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.INSTAL_UPDATE_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.HAS_TOPIC_NEED_TO_NOTIF_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.HAS_TOPIC_DELETED_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.THEMEUPDATE_NOTIFICATION_ID);
            intent = getIntent();
            intExtra = intent.getIntExtra(AlbusModelObject.PAGE, AB_MODE_FRONT_UI);
            stringExtra = intent.getStringExtra(AlbusModelObject.FRIEND_ID);
        }
        if (!(intExtra != AB_MODE_MULTIPLE_DELETE_CHAT || stringExtra == null || stringExtra.equals(""))) {
            Intent intent2 = new Intent(this, ChatGroupConvActivity.class);
            intent2.putExtras(intent.getExtras());
            startActivity(intent2);
        }
        LocalBroadcastManager.getInstance(this).registerReceiver(mPPFReceier, new IntentFilter(BroadcastIntents.ACTION_PPF_DONE));
    }

    public boolean onCreateOptionsMenu(Menu menu) {
        if (this.mAbMode == 0) {
            getMenuInflater().inflate(R.menu.actionbar_main_albus, menu);
        } else {
            getMenuInflater().inflate(R.menu.actionbar_multiple_select, menu);
            if (this.mAbMode == AB_MODE_MULTIPLE_DELETE_CHAT) {
                menu.setGroupVisible(R.id.multi_select3, true);
            } else {
                menu.setGroupVisible(R.id.multi_select1, true);
                menu.findItem(R.id.multi_item_share).setVisible(false);
                menu.findItem(R.id.pick_allgroup).setVisible(true);
                this.mLeaveItem = menu.findItem(R.id.multi_item_drop_group);
                this.mLeaveItem.setVisible(true);
                this.mClearItem = menu.findItem(R.id.multi_item_clear);
                this.mClearItem.setVisible(true);
                this.mDropItem = menu.findItem(R.id.multi_item_delete);
                this.mDropItem.setVisible(true);
                updateABGroupSelect();
            }
        }
        return super.onCreateOptionsMenu(menu);
    }

    public void onDestroy() {
        super.onDestroy();
        Log.d(TAG, ">>>>>>>> onDestroy:" + TAG);
        this.mCatfiz.destroy();
        if (mAlbusMainHandler != null) {
            mAlbusMainHandler.removeCallbacksAndMessages(null);
        }
        mAlbusMainHandler = null;
        LocalBroadcastManager.getInstance(this).unregisterReceiver(mPPFReceier);
        this.mOnMultipleDeleteGroupEvent = null;
        this.mOnMultipleDeleteChatEvent = null;
        this.mOnMultipleDeleteHomeViewEvent = null;
        this.mOnExecuteDeleteChat = null;
        this.mOnExecuteDeleteGroup = null;
        this.mSelf = null;
    }

    public void onFABEvent(int i) {
        collapseActionMenuSearch();
        Intent intent;
        if (i == AB_MODE_MULTIPLE_DELETE_CHAT) {
            intent = new Intent(this, CustomActionBarPageActivity.class);
            intent.putExtra(AlbusModelObject.PAGE, 14);
            startActivityForResult(intent, 11);
        } else if (i == 0) {
            intent = new Intent(this, CustomActionBarPageActivity.class);
            intent.putExtra(AlbusModelObject.PAGE, 24);
            intent.putExtra(HTTP.IDENTITY_CODING, AB_MODE_FRONT_UI);
            startActivity(intent);
        } else {
            startActivity(new Intent(this, CreateGroupActivity.class));
        }
    }

    public boolean onOptionsItemSelected(MenuItem menuItem) {
        switch (menuItem.getItemId()) {
            case 16908332:
                if (!isMultiDeleteMode()) {
                    return true;
                }
                exitMultipleDelete();
                return true;
            case R.id.pick_allfriend:
                this.mOnMultipleDeleteChatEvent.onSelectAllChat();
                this.mOnMultipleDeleteHomeViewEvent.onSelectItem(this.mMaxSelectedHelper, AB_MODE_FRONT_UI);
                return true;
            case R.id.multi_item_delete_chat:
                this.mOnMultipleDeleteChatEvent.onDeleteChat();
                return true;
            case R.id.pick_allgroup:
                this.mOnMultipleDeleteGroupEvent.onSelectAllGroup();
                return true;
            case R.id.multi_item_drop_group:
                this.mOnMultipleDeleteGroupEvent.onLeaveGroup();
                return true;
            case R.id.multi_item_delete:
                this.mOnMultipleDeleteGroupEvent.onDropGroup();
                return true;
            case R.id.multi_item_clear:
                this.mOnMultipleDeleteGroupEvent.onClearGroupConv();
                return true;
            default:
                return super.onOptionsItemSelected(menuItem);
        }
    }

    protected void onPause() {
        super.onPause();
        Log.d(TAG, ">>>>>>>> onPause:" + TAG);
        if (this.mThumbnailLoader != null) {
            this.mThumbnailLoader.setExitTasksEarly(true);
        }
        if (this.mCropppedPhotoLoader != null) {
            this.mCropppedPhotoLoader.setExitTasksEarly(true);
        }
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.stop();
        }
        ((HomeFragment) this.mFragment).setCurrentPagePref();
        this.mHasNewMsg = false;
    }

    public boolean onPrepareOptionsMenu(Menu menu) {
        if (!isMultiDeleteMode()) {
            final MenuItem findItem = menu.findItem(R.id.friend);
            final MenuItem findItem2 = menu.findItem(R.id.about);
            final MenuItem findItem3 = menu.findItem(R.id.settingMain);
            final MenuItem findItem4 = menu.findItem(R.id.add_friend);
            final MenuItem findItem5 = menu.findItem(R.id.fizzlink);
            MenuItem findItem6 = menu.findItem(R.id.backup);
            MenuItem findItem7 = menu.findItem(R.id.restore);
            this.mSearchItem = menu.findItem(R.id.search);
            findItem6.setVisible(false);
            findItem7.setVisible(false);
            if (this.mFlag == 0) {
                this.mSearchItem.setVisible(false);
            } else {
                this.mSearchItem.setVisible(true);
            }
            View actionView = MenuItemCompat.getActionView(this.mSearchItem);
            ImageButton imageButton = (ImageButton) actionView.findViewById(R.id.ib_clear);
            this.mEtSearch = (EditText) actionView.findViewById(R.id.txt_search);
            this.mEtSearch.addTextChangedListener(new TextWatcher() {
                public void afterTextChanged(Editable editable) {
                }

                public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                }

                public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                    String obj = AlbusMainActivity.this.mEtSearch.getText().toString();
                    boolean z = i3 == 0 || i2 > i3;
                    ((HomeFragment) AlbusMainActivity.this.mFragment).limitListView(obj, z);
                }
            });
            MenuItemCompat.setOnActionExpandListener(this.mSearchItem, new OnActionExpandListener() {
                public boolean onMenuItemActionCollapse(MenuItem menuItem) {
                    Log.d(AlbusMainActivity.TAG, "onMenuItemActionCollapse");
                    ((InputMethodManager) AlbusMainActivity.this.getSystemService("input_method")).hideSoftInputFromWindow(AlbusMainActivity.this.mEtSearch.getWindowToken(), AlbusMainActivity.AB_MODE_FRONT_UI);
                    findItem.setVisible(true);
                    findItem2.setVisible(true);
                    findItem3.setVisible(true);
                    findItem4.setVisible(true);
                    findItem5.setVisible(true);
                    ((HomeFragment) AlbusMainActivity.this.mFragment).leaveSearchMode();
                    return true;
                }

                public boolean onMenuItemActionExpand(MenuItem menuItem) {
                    Log.d(AlbusMainActivity.TAG, "onMenuItemActionExpand");
                    AlbusMainActivity.this.mEtSearch.requestFocus();
                    ((InputMethodManager) AlbusMainActivity.this.getSystemService("input_method")).toggleSoftInput(AlbusMainActivity.AB_MODE_MULTIPLE_DELETE_CHAT, AlbusMainActivity.AB_MODE_FRONT_UI);
                    AlbusMainActivity.this.mEtSearch.requestFocus();
                    AlbusMainActivity.this.mEtSearch.setText("");
                    findItem.setVisible(false);
                    findItem2.setVisible(false);
                    findItem3.setVisible(false);
                    findItem4.setVisible(false);
                    findItem5.setVisible(false);
                    ((HomeFragment) AlbusMainActivity.this.mFragment).enterSearchMode();
                    return true;
                }
            });
            imageButton.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    AlbusMainActivity.this.mEtSearch.setText("");
                }
            });
            View actionView2 = MenuItemCompat.getActionView(findItem);
            ImageView imageView = (ImageView) actionView2.findViewById(R.id.iv_ab_friend_notif);
            this.mLlNotifFriend = (LinearLayout) actionView2.findViewById(R.id.ll_notif);
            TextView textView = (TextView) actionView2.findViewById(R.id.tv_notif);
            Log.d(TAG, "sumClicked=" + CatfishService.getCatfishPreferences().getInt(Constant.NOTIF_CLICKED, AB_MODE_FRONT_UI));
            Log.d(TAG, "sumfriend=" + this.mNotif);
            if (this.mNotif > 0) {
                this.mLlNotifFriend.setVisibility(AB_MODE_FRONT_UI);
            } else {
                this.mLlNotifFriend.setVisibility(8);
            }
            textView.setText(String.valueOf(this.mNotif));
            imageView.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    Intent intent = new Intent(AlbusMainActivity.this, FriendsActivity.class);
                    intent.putExtra(AlbusModelObject.PAGE, CatfizMsgTypes.NICSUBTYPE_PARTNER);
                    AlbusMainActivity.this.startActivityForResult(intent, 17);
                }
            });
            findItem2.setOnMenuItemClickListener(new OnMenuItemClickListener() {
                public boolean onMenuItemClick(MenuItem menuItem) {
                    Intent intent = new Intent(AlbusMainActivity.this, MenuActivity.class);
                    intent.putExtra(AlbusModelObject.PAGE, 25);
                    AlbusMainActivity.this.startActivity(intent);
                    return true;
                }
            });
            findItem4.setOnMenuItemClickListener(new OnMenuItemClickListener() {
                public boolean onMenuItemClick(MenuItem menuItem) {
                    Intent intent = new Intent(AlbusMainActivity.this, CustomActionBarPageActivity.class);
                    intent.putExtra(AlbusModelObject.PAGE, 48);
                    AlbusMainActivity.this.startActivity(intent);
                    return true;
                }
            });
            findItem3.setOnMenuItemClickListener(new OnMenuItemClickListener() {
                public boolean onMenuItemClick(MenuItem menuItem) {
                    Intent intent = new Intent(AlbusMainActivity.this, SettingsActivity.class);
                    intent.putExtra(HTTP.IDENTITY_CODING, AlbusMainActivity.AB_MODE_MULTIPLE_DELETE_CHAT);
                    AlbusMainActivity.this.startActivity(intent);
                    return true;
                }
            });
            findItem6.setOnMenuItemClickListener(new OnMenuItemClickListener() {
                public boolean onMenuItemClick(MenuItem menuItem) {
                    new LocalBackup().backup(AlbusMainActivity.this.getApplicationContext());
                    return true;
                }
            });
            findItem7.setOnMenuItemClickListener(new OnMenuItemClickListener() {
                public boolean onMenuItemClick(MenuItem menuItem) {
                    new LocalBackup().restore(AlbusMainActivity.this.getApplicationContext());
                    return true;
                }
            });
            findItem5.setOnMenuItemClickListener(new OnMenuItemClickListener() {
                public boolean onMenuItemClick(MenuItem menuItem) {
                    AlbusMainActivity.this.startActivity(new Intent(AlbusMainActivity.this, FizzlinkActivity.class));
                    return false;
                }
            });
        }
        return super.onPrepareOptionsMenu(menu);
    }

    public void onRegisterProgress() {
    }

    protected void onRestoreInstanceState(Bundle bundle) {
        Log.d(TAG, "onRestoreInstanceState AlbusMainActivity");
        super.onRestoreInstanceState(bundle);
    }

    public void onResume() {
        super.onResume();
        Log.d(TAG, ">>>>>>>> onResume:" + TAG);
        if (this.mThumbnailLoader != null) {
            this.mThumbnailLoader.setExitTasksEarly(false);
        }
        if (this.mCropppedPhotoLoader != null) {
            this.mCropppedPhotoLoader.setExitTasksEarly(false);
        }
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.start();
        }
        this.mCatfiz.start();
        if (this.mCatfiz.isCatfizStarted()) {
            initOnStarted();
        }
        if (this.mEtSearch != null) {
            InputMethodManager inputMethodManager = (InputMethodManager) getSystemService("input_method");
            if (inputMethodManager.isAcceptingText()) {
                inputMethodManager.hideSoftInputFromWindow(this.mEtSearch.getWindowToken(), AB_MODE_FRONT_UI);
            }
        }
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        if (catfishPreferences != null && catfishPreferences.getBoolean(AlbusModelObject.REFRESH_UPDATE_MY_PIC, false)) {
            Log.d(TAG, "Need refresh My Prof Pic");
            ((HomeFragment) this.mFragment).updateUserPic(this.mSelf, true);
            ((HomeFragment) this.mFragment).refreshAllFriendsPhoto(CatfishService.getUserPIN());
            catfishPreferences.edit().putBoolean(AlbusModelObject.REFRESH_UPDATE_MY_PIC, false).commit();
        }
    }

    protected void onSaveInstanceState(Bundle bundle) {
        Log.d(TAG, "onSaveInstanceState AlbusMainActivity");
        super.onSaveInstanceState(bundle);
    }

    public boolean onSignalEvent(Signal signal) {
        Log.d(TAG, "onSignalEvent : " + Signal.values()[signal.ordinal()]);
        switch (AnonymousClass22.$SwitchMap$com$catfiz$signal$Signal[Signal.values()[signal.ordinal()].ordinal()]) {
            case AB_MODE_MULTIPLE_DELETE_CHAT /*1*/:
            case AB_MODE_MULTIPLE_DELETE_GROUP /*2*/:
                Log.d(TAG, "onSignalEvent notification");
                getNotifCount();
                return true;
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                Log.d(TAG, "onSignalEvent comment and like");
                getProfileNotifCount();
                return true;
            default:
                return false;
        }
    }

    public void onStart() {
        super.onStart();
        Log.d(TAG, ">>>>>>>> onStart:" + TAG);
    }

    public void onStop() {
        super.onStop();
        Log.d(TAG, ">>>>>>>> onStop:" + TAG);
        this.mCatfiz.finish();
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.stop();
        }
    }

    public void setLike(int i, long j, String str, int i2) {
        ((HomeFragment) this.mFragment).sendLike(i, j, str, i2);
    }

    public void setOnExecuteDeleteChat(OnExecuteDeleteChat onExecuteDeleteChat) {
        this.mOnExecuteDeleteChat = onExecuteDeleteChat;
    }

    public void setOnExecuteDeleteGroup(OnExecuteDeleteGroup onExecuteDeleteGroup) {
        this.mOnExecuteDeleteGroup = onExecuteDeleteGroup;
    }

    public void setOnMultipleDeleteChatEvent(OnMultipleDeleteChatEvent onMultipleDeleteChatEvent) {
        this.mOnMultipleDeleteChatEvent = onMultipleDeleteChatEvent;
    }

    public void setOnMultipleDeleteGroupEvent(OnMultipleDeleteGroupEvent onMultipleDeleteGroupEvent) {
        this.mOnMultipleDeleteGroupEvent = onMultipleDeleteGroupEvent;
    }

    public void setOnMultipleDeleteHomeViewEvent(OnMultipleDeleteHomeViewEvent onMultipleDeleteHomeViewEvent) {
        this.mOnMultipleDeleteHomeViewEvent = onMultipleDeleteHomeViewEvent;
    }

    public void setPage(int i) {
        this.mFlag = i;
        if (this.mFlag == 0) {
            this.mSearchItem.setVisible(false);
        } else {
            this.mSearchItem.setVisible(true);
        }
    }

    public void updateABGroupSelect() {
        switch (this.mGroupSelectStateHelper) {
            case AB_MODE_FRONT_UI /*0*/:
                this.mDropItem.setVisible(true);
                this.mLeaveItem.setVisible(false);
                return;
            case AB_MODE_MULTIPLE_DELETE_CHAT /*1*/:
                this.mDropItem.setVisible(false);
                this.mLeaveItem.setVisible(true);
                return;
            case AB_MODE_MULTIPLE_DELETE_GROUP /*2*/:
                this.mDropItem.setVisible(false);
                this.mLeaveItem.setVisible(false);
                return;
            default:
                return;
        }
    }

    public void updateNotifChat(int i) {
        ((HomeFragment) this.mFragment).changeChatNotif(i);
    }

    public void updateNotifGroup(int i) {
        ((HomeFragment) this.mFragment).changeGroupNotif(i);
    }

    public void verifyAccount() {
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        if (catfishPreferences != null) {
            String string = catfishPreferences.getString(CatfishRESTAPI.CFCOMPACT_EMAIL, null);
            if (string == null || string.isEmpty()) {
                Log.d(TAG, "!!!!!!!!!!!! EMAIL KOSONG");
                return;
            }
            Intent intent = new Intent(this, RegisterActivity.class);
            intent.putExtra(AlbusModelObject.PAGE, AB_MODE_MULTIPLE_DELETE_CHAT);
            intent.putExtra(HTTP.IDENTITY_CODING, AB_MODE_FRONT_UI);
            intent.putExtra(CatfishRESTAPI.CFCOMPACT_EMAIL, string);
            startActivity(intent);
        }
    }
}
