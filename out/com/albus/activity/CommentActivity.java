package com.albus.activity;

import android.app.Activity;
import android.app.ActivityManager.TaskDescription;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Configuration;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentTransaction;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.AlbusDialog.OnAddButtonListener;
import com.albus.dialog.AlbusDialogInterface;
import com.albus.fragment.CommentFragment;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Callback.FetchFriendCallback;
import com.catfiz.base.Callback.OnSendLikeCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.intents.CatfishIntents;
import com.catfiz.model.Comment;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishService;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.signal.Signal;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.io.File;
import java.lang.ref.WeakReference;
import org.apache.http.protocol.HTTP;

public class CommentActivity extends ActionBarActivity implements ICatfiz {
    private static final String TAG = "CommentActivity";
    private static final int VIEW_CONTENT = 105;
    private Bundle mBundle = null;
    private Catfiz mCatfiz = null;
    public CommentFragment mFragment = null;
    private boolean mLikeChange = false;
    private int mLikeCountFriend = 0;
    private int mMeLikeStatus = 0;
    private int mMeLikeStatusFriend = 0;

    class AddDialogProfile implements AlbusDialogInterface {
        private AddDialogProfile() {
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            AlbusDialog.setOnAddButtonClicked(new OnAddButtonListener() {
                public void onAddButtonClicked(String str) {
                    CommentActivity.this.addFriend(str);
                }
            });
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    class GotoUserProfileCb implements FetchFriendCallback {
        private User mIncompleteUser = null;
        private WeakReference mThisActivityRef;

        public GotoUserProfileCb(Activity activity, User user) {
            this.mThisActivityRef = new WeakReference(activity);
            this.mIncompleteUser = user;
        }

        public void onData(User user, String str) {
            CommentActivity commentActivity = (CommentActivity) this.mThisActivityRef.get();
            if (commentActivity != null) {
                if (user != null) {
                    Log.d(CommentActivity.TAG, "goToProfile:" + user.getName() + "," + user.getStatusSequence() + "," + user.getStatusdate());
                    commentActivity.gotoFriendProfile(user);
                    return;
                }
                Log.d(CommentActivity.TAG, "Not Friends");
                Bundle bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 33);
                AlbusDialog.showDialog(33, new commentDialog(this.mIncompleteUser, null), commentActivity, bundle, commentActivity.getSupportFragmentManager());
            }
        }

        public void onError() {
            Log.e(CommentActivity.TAG, "Fail Go to user profile");
        }

        public void onSuccess() {
        }
    }

    class PromoteHandleCb implements FetchFriendCallback {
        private User mIncompleteUser = null;
        private WeakReference mThisActivityRef;

        public PromoteHandleCb(Activity activity, User user) {
            this.mThisActivityRef = new WeakReference(activity);
            this.mIncompleteUser = user;
        }

        public void onData(User user, String str) {
            CommentActivity commentActivity = (CommentActivity) this.mThisActivityRef.get();
            if (commentActivity != null) {
                if (user != null) {
                    Log.d(CommentActivity.TAG, "goToProfile:" + user.getName() + "," + user.getStatusSequence() + "," + user.getStatusdate());
                    commentActivity.gotoFriendProfile(user);
                    return;
                }
                Log.d(CommentActivity.TAG, "Not Friends");
                Bundle bundle = new Bundle();
                bundle.putString(CatfishDataStorage.NIC_NAME, this.mIncompleteUser.getName());
                bundle.putString(CatfishRESTAPI.CFCOMPACT_STICKERID, this.mIncompleteUser.getId());
                bundle.putInt(AlbusModelObject.DIALOG, 9);
                AlbusDialog.showDialog(9, new AddDialogProfile(), commentActivity, bundle, commentActivity.getSupportFragmentManager());
            }
        }

        public void onError() {
            Log.e(CommentActivity.TAG, "Fail Promote Handle");
        }

        public void onSuccess() {
        }
    }

    class commentDialog implements AlbusDialogInterface {
        private String mFilePath = null;
        private User mUser = null;

        public commentDialog(User user, String str) {
            this.mUser = user;
            this.mFilePath = str;
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, final DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            switch (i) {
                case R.styleable.Theme_actionModeCopyDrawable /*33*/:
                    TextView textView = (TextView) view.findViewById(R.id.tv_menu_profile);
                    TextView textView2 = (TextView) view.findViewById(R.id.tv_menu_chat);
                    TextView textView3 = (TextView) view.findViewById(R.id.tv_menu_remove_member);
                    TextView textView4 = (TextView) view.findViewById(R.id.tv_menu_set_admin);
                    ((TextView) view.findViewById(R.id.tv_menu_title)).setText(this.mUser.getName());
                    textView.setText(context.getResources().getString(R.string.menu_add_friend));
                    textView2.setVisibility(8);
                    textView3.setVisibility(8);
                    textView4.setVisibility(8);
                    textView.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment.dismiss();
                            CommentActivity.this.addFriend(commentDialog.this.mUser.getId());
                        }
                    });
                    return;
                case R.styleable.Theme_borderlessButtonStyle /*54*/:
                    ((Button) view.findViewById(R.id.btn_action)).setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment.dismiss();
                            CommentActivity.this.launchFizzlinkActivity(commentDialog.this.mFilePath);
                        }
                    });
                    return;
                default:
                    return;
            }
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    private void backToHome() {
        if (getIntent().getIntExtra(HTTP.IDENTITY_CODING, -1) == 0) {
            setResult(-1);
            finish();
        } else if (getIntent().getStringExtra(CatfishRESTAPI.CFCOMPACT_STICKERID).equals(CatfishService.getUserPIN())) {
            setResult(-1);
            finish();
        } else {
            backToProfileFriend(getIntent().getStringExtra(CatfishRESTAPI.CFCOMPACT_STICKERID), 31);
        }
    }

    private void gotoFriendProfile(User user) {
        Intent intent = new Intent(this, ProfilesFriendActivity.class);
        intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, user.getId());
        intent.putExtra(CatfishDataStorage.NIC_NAME, user.getName());
        intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, user.getStatusSequence());
        intent.putExtra(AlbusModelObject.STATUS_LIKE, user.getStatusLike());
        intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, user.isMeLikeThisStatus());
        startActivity(intent);
    }

    private void launchFizzlinkActivity(String str) {
        Intent intent = new Intent(this, FizzlinkActivity.class);
        intent.putExtra(AlbusModelObject.INTENT_FLPATH, str);
        startActivity(intent);
    }

    public void addFriend(String str) {
        this.mCatfiz.userRequestAddFriend(str, new Callback() {
            public void onError() {
                Log.d(CommentActivity.TAG, "Error add friend");
            }

            public void onSuccess() {
                AlbusUtils.setToastView(CommentActivity.this, CommentActivity.this.getString(R.string.df_pending_friend));
            }
        });
    }

    public void backToProfileFriend(String str, int i) {
        User matchFriendData = Catfiz.matchFriendData(str);
        if (matchFriendData != null) {
            Log.d(TAG, "goToProfile:" + matchFriendData.getName() + "," + matchFriendData.getStatusSequence() + "," + matchFriendData.getStatusdate());
            Intent intent = new Intent(this, ProfilesFriendActivity.class);
            intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, matchFriendData.getId());
            intent.putExtra(CatfishDataStorage.NIC_NAME, matchFriendData.getName());
            intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, matchFriendData.getStatusSequence());
            this.mMeLikeStatusFriend = getIntent().getIntExtra(AlbusModelObject.ME_LIKE_STATUS, 0);
            if (this.mLikeCountFriend == 0) {
                this.mLikeCountFriend = getIntent().getIntExtra(AlbusModelObject.STATUS_LIKE, 0);
            }
            if (this.mLikeChange) {
                this.mMeLikeStatusFriend = this.mMeLikeStatus;
            }
            intent.putExtra(AlbusModelObject.STATUS_LIKE, this.mLikeCountFriend);
            intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, this.mMeLikeStatusFriend);
            intent.putExtra(HTTP.IDENTITY_CODING, i);
            startActivity(intent.setFlags(335544320));
        }
    }

    public void commentEnterProfileHandle(User user) {
        if (user.getId().equals(CatfishService.getUserPIN())) {
            startActivity(new Intent(this, ProfilesActivity.class));
        } else {
            this.mCatfiz.chatFetchFriend(user.getId(), new GotoUserProfileCb(this, user));
        }
    }

    public void commentPromoteHandle(User user) {
        if (!user.getId().equals(CatfishService.getUserPIN())) {
            this.mCatfiz.chatFetchFriend(user.getId(), new PromoteHandleCb(this, user));
        }
    }

    public void dismissKeyboard(View view) {
        ((InputMethodManager) getSystemService("input_method")).hideSoftInputFromWindow(view.getWindowToken(), 0);
    }

    public void downloadCommentAttachedFile(Comment comment) {
        this.mCatfiz.downloadBroadcastAttachedComment(comment, this, new Callback() {
            public void onError() {
                Log.d(CommentActivity.TAG, "onError downloadCommentAttachedFile()");
            }

            public void onSuccess() {
                Log.d(CommentActivity.TAG, "onSuccess downloadCommentAttachedFile()");
            }
        });
    }

    public void gotoUserChat(User user) {
        Intent intent = new Intent(this, ChatGroupConvActivity.class);
        intent.putExtra(AlbusModelObject.PAGE, 1);
        intent.putExtra(HTTP.IDENTITY_CODING, 14);
        intent.putExtra(CatfishDataStorage.NIC_NAME, user.getName());
        intent.putExtra(AlbusModelObject.FRIEND_ID, user.getId());
        startActivity(intent);
    }

    public void handleFileComment(Comment comment, String str) {
        Intent intent;
        Uri fromFile = Uri.fromFile(new File(str));
        if (fromFile != null) {
            String str2 = AlbusUtils.getmimetype(fromFile);
            Intent intent2 = new Intent("android.intent.action.VIEW");
            intent2.setDataAndType(fromFile, str2);
            try {
                if (str2.startsWith("image/")) {
                    intent = new Intent(this, ProfilesImageViewerActivity.class);
                    intent.putExtra(HTTP.IDENTITY_CODING, 31);
                    intent.putExtra(AlbusModelObject.IMAGE, str);
                    intent.putExtra(AlbusModelObject.SENDER_NAME, comment.getSender().getName());
                    intent.putExtra(AlbusModelObject.INTENT_ROOM, this.mFragment.getName() + " " + getResources().getString(R.string.comment));
                    intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, comment.getSender().getId());
                    startActivity(intent);
                    return;
                }
                intent2.putExtra(AlbusModelObject.SENDER_NAME, comment.getSender().getName());
                startActivityForResult(intent2, VIEW_CONTENT);
            } catch (Exception e) {
                e.printStackTrace();
                intent = CatfishIntents.newIntent(this, CatfishIntents.ACTION_SVG_VIEWER);
                intent.setDataAndType(fromFile, "image/svg+xml");
                startActivityForResult(intent, VIEW_CONTENT);
            }
        }
    }

    protected void onActivityResult(int i, int i2, Intent intent) {
        super.onActivityResult(i, i2, intent);
    }

    public void onBackPressed() {
        if (getIntent().getIntExtra(HTTP.IDENTITY_CODING, -1) != 0) {
            if (getIntent().getStringExtra(CatfishRESTAPI.CFCOMPACT_STICKERID).equals(CatfishService.getUserPIN())) {
                Intent intent = new Intent(this, ProfilesActivity.class);
                intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, this.mMeLikeStatus);
                startActivity(intent.setFlags(335544320));
            } else {
                backToProfileFriend(getIntent().getStringExtra(CatfishRESTAPI.CFCOMPACT_STICKERID), 31);
            }
        }
        setResult(-1);
        finish();
        super.onBackPressed();
    }

    public void onCatfizStarted() {
    }

    public void onCatfizStopped() {
    }

    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        Log.d(TAG, "onCreate CommentActivity");
        setContentView((int) R.layout.activity_view);
        if (Utils.hasLollipop()) {
            setTaskDescription(new TaskDescription(null, null, getResources().getColor(R.color.red)));
            Window window = getWindow();
            window.clearFlags(67108864);
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.setStatusBarColor(getResources().getColor(R.color.red2));
        }
        this.mCatfiz = new Catfiz(this, this);
        ((RelativeLayout) findViewById(R.id.rl_background)).setBackgroundColor(getResources().getColor(R.color.red));
        ActionBar supportActionBar = getSupportActionBar();
        supportActionBar.setDisplayHomeAsUpEnabled(true);
        Configuration configuration = getResources().getConfiguration();
        if (Utils.hasJellyBeanMR1() && configuration.getLayoutDirection() == 1) {
            supportActionBar.setHomeAsUpIndicator((int) R.drawable.ic_back_light_reverse);
        } else {
            supportActionBar.setHomeAsUpIndicator((int) R.drawable.ic_back_light);
        }
        if (bundle == null) {
            FragmentTransaction beginTransaction = getSupportFragmentManager().beginTransaction();
            this.mBundle = new Bundle();
            this.mBundle.putString(CatfishRESTAPI.CFCOMPACT_STICKERID, getIntent().getStringExtra(CatfishRESTAPI.CFCOMPACT_STICKERID));
            this.mBundle.putString(CatfishDataStorage.NIC_NAME, getIntent().getStringExtra(CatfishDataStorage.NIC_NAME));
            this.mBundle.putString(FriendListDataStorage.STATUS, getIntent().getStringExtra(FriendListDataStorage.STATUS));
            this.mBundle.putString(AlbusModelObject.DATE, getIntent().getStringExtra(AlbusModelObject.DATE));
            this.mBundle.putInt(AlbusModelObject.PAGE, getIntent().getIntExtra(AlbusModelObject.PAGE, 0));
            this.mBundle.putInt(AlbusModelObject.STATUS_LIKE, getIntent().getIntExtra(AlbusModelObject.STATUS_LIKE, 0));
            this.mBundle.putInt(AlbusModelObject.ME_LIKE_STATUS, getIntent().getIntExtra(AlbusModelObject.ME_LIKE_STATUS, 0));
            this.mBundle.putLong(AlbusModelObject.STATUS_SEQUENCE, getIntent().getLongExtra(AlbusModelObject.STATUS_SEQUENCE, 0));
            this.mBundle.putBoolean(AlbusModelObject.IS_FROM_BUTTON_COMMENT, getIntent().getBooleanExtra(AlbusModelObject.IS_FROM_BUTTON_COMMENT, false));
            this.mFragment = CommentFragment.newInstance(this.mBundle);
            beginTransaction.replace(R.id.fl_view, this.mFragment);
            beginTransaction.commit();
            return;
        }
        this.mFragment = (CommentFragment) getSupportFragmentManager().findFragmentById(R.id.fl_view);
    }

    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.actionbar_comment, menu);
        MenuItem findItem = menu.findItem(R.id.edit_status);
        if (getIntent().getStringExtra(CatfishRESTAPI.CFCOMPACT_STICKERID).equals(CatfishService.getUserPIN())) {
            findItem.setVisible(true);
        } else {
            findItem.setVisible(false);
        }
        return true;
    }

    public void onDestroy() {
        super.onDestroy();
        this.mCatfiz.destroy();
    }

    public boolean onKeyDown(int i, KeyEvent keyEvent) {
        Log.d(TAG, "onKeyDown:" + i);
        return (keyEvent.getAction() == 0 && i == 4 && this.mFragment.mBottomBar.closeAttachAndEmoPanel()) ? super.onKeyDown(i, keyEvent) : false;
    }

    public boolean onOptionsItemSelected(MenuItem menuItem) {
        switch (menuItem.getItemId()) {
            case 16908332:
                onBackPressed();
                return true;
            case R.id.edit_status:
                Intent intent = new Intent(this, CustomActionBarPageActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 24);
                if (getIntent().getIntExtra(HTTP.IDENTITY_CODING, -1) == 0) {
                    intent.putExtra(HTTP.IDENTITY_CODING, 31);
                }
                startActivity(intent);
                return true;
            case R.id.copy:
                AlbusUtils.copyToClipboard(this, getIntent().getStringExtra(FriendListDataStorage.STATUS));
                AlbusUtils.setToastView(this, getString(R.string.status_copied));
                return true;
            case R.id.delete_all:
                this.mFragment.clearAllComments();
                return true;
            default:
                return super.onOptionsItemSelected(menuItem);
        }
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    protected void onStop() {
        super.onStop();
        this.mCatfiz.finish();
    }

    public void selectAttachedPhotoByCamera() {
        this.mFragment.selectAttachedPhotoByCamera();
    }

    public void selectAttachedPhotoByFile() {
        this.mFragment.selectAttachedPhotoByFile();
    }

    public void sendLike(int i, String str, long j) {
        this.mMeLikeStatus = i;
        this.mLikeChange = !this.mLikeChange;
        this.mCatfiz.userFriendLikeUpdate(str, i, j, new OnSendLikeCallback() {
            public void onData(int i) {
                CommentActivity.this.mLikeCountFriend = i;
            }

            public void onError() {
            }

            public void onSuccess() {
            }
        });
    }

    public void showKeyboard(View view) {
        ((InputMethodManager) getSystemService("input_method")).toggleSoftInput(2, 0);
    }

    public void showLargeFileDivertionDialog(int i, String str) {
        Bundle bundle = new Bundle();
        bundle.putInt(AlbusModelObject.VALUE, i);
        bundle.putInt(AlbusModelObject.DIALOG, 54);
        AlbusDialog.showDialog(54, new commentDialog(null, str), this, bundle, getSupportFragmentManager());
    }
}
