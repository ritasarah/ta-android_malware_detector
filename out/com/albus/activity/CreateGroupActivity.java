package com.albus.activity;

import android.app.ActivityManager.TaskDescription;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.support.v7.app.ActionBarActivity;
import android.view.KeyEvent;
import android.view.View;
import android.view.Window;
import android.view.inputmethod.InputMethodManager;
import com.albus.crop.Crop;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.DialogUI;
import com.albus.fragment.CreateGroupFragment;
import com.albus.util.AlbusModelObject;
import com.catfiz.R;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.signal.Signal;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.io.File;

public class CreateGroupActivity extends ActionBarActivity implements ICatfiz {
    public static final int MEDIA_TYPE_IMAGE = 1;
    private static final String TAG = "CreateGroupActivity";
    private Catfiz mCatfiz = null;
    private Uri mFileUri = null;
    private Fragment mFragment = null;
    private int mPage = -1;

    private void beginCrop(Uri uri) {
        new Crop(uri).output(Uri.fromFile(new File(getCacheDir(), AlbusModelObject.CACHE_CROP_GROUP)), PreferenceManager.getDefaultSharedPreferences(this).getBoolean("photoprofile_transparency_v2", false)).asSquare().start(this);
    }

    private static File getOutputMediaFile(int i) {
        File file = new File(CatfishPhotoStorage.getCacheStorageDir(null));
        if (file.exists() || file.mkdirs()) {
            return i == MEDIA_TYPE_IMAGE ? new File(file.getPath() + File.separator + AlbusModelObject.CAPTURED_PROFILE_GROUP_PIC) : null;
        } else {
            Log.d("MyCameraApp", "failed to create directory");
            return null;
        }
    }

    public void SetActionBar(String str, int i) {
    }

    public void capturePhotoCam() {
        Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
        this.mFileUri = Uri.fromFile(getOutputMediaFile(MEDIA_TYPE_IMAGE));
        intent.putExtra("output", this.mFileUri);
        startActivityForResult(intent, 14);
    }

    public void choosePhotoByFile() {
        Log.d(TAG, "choose image from gallery");
        Crop.pickImage(this);
    }

    public void dismissKeyboard(View view) {
        ((InputMethodManager) getSystemService("input_method")).hideSoftInputFromWindow(view.getWindowToken(), 0);
    }

    public void onActivityResult(int i, int i2, Intent intent) {
        super.onActivityResult(i, i2, intent);
        switch (i) {
            case R.styleable.Toolbar_titleMarginEnd /*14*/:
                if (i2 == -1) {
                    Uri uri = this.mFileUri;
                    beginCrop(uri);
                    Log.d(TAG, "activityResult-Retrieve uri=" + uri);
                    if (uri != null) {
                        Log.d(TAG, "Using URI");
                        return;
                    }
                    return;
                }
                return;
            case Crop.REQUEST_CROP /*6709*/:
                ((CreateGroupFragment) this.mFragment).handleCropResult(i2, intent);
                return;
            case Crop.REQUEST_PICK /*9162*/:
                if (i2 == -1) {
                    beginCrop(intent.getData());
                    return;
                }
                return;
            default:
                return;
        }
    }

    public void onBackPressed() {
        super.onBackPressed();
    }

    public void onCatfizStarted() {
    }

    public void onCatfizStopped() {
    }

    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        Log.d(TAG, "oncreate CreateGroupActivity");
        setContentView((int) R.layout.activity_view);
        this.mCatfiz = new Catfiz(this, this);
        if (Utils.hasLollipop()) {
            setTaskDescription(new TaskDescription(null, null, getResources().getColor(R.color.red)));
            Window window = getWindow();
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.clearFlags(67108864);
            window.setStatusBarColor(getResources().getColor(R.color.black13));
        }
        if (bundle == null) {
            FragmentTransaction beginTransaction = getSupportFragmentManager().beginTransaction();
            this.mFragment = CreateGroupFragment.newInstance();
            beginTransaction.replace(R.id.fl_view, this.mFragment);
            beginTransaction.commit();
        }
    }

    public void onDestroy() {
        super.onDestroy();
        this.mCatfiz.destroy();
    }

    public boolean onKeyDown(int i, KeyEvent keyEvent) {
        if (this.mPage != 10) {
            return super.onKeyDown(i, keyEvent);
        }
        if (((CreateGroupFragment) this.mFragment).isAnyGroupName()) {
            return super.onKeyDown(i, keyEvent);
        }
        showDialogAlert();
        return false;
    }

    protected void onPause() {
        super.onPause();
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    public void onStop() {
        super.onStop();
        this.mCatfiz.finish();
    }

    public void showDialogAlert() {
        Bundle bundle = new Bundle();
        bundle.putInt(AlbusModelObject.DIALOG, 13);
        AlbusDialog.showDialog(13, new DialogUI().getDialogInterface(), this, bundle, getSupportFragmentManager());
    }

    public void showKeyboard() {
        ((InputMethodManager) getSystemService("input_method")).toggleSoftInput(2, 0);
    }
}
