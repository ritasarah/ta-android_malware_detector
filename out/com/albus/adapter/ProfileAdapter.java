package com.albus.adapter;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.net.Uri;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.SeekBar;
import android.widget.TextView;
import com.albus.activity.CommentActivity;
import com.albus.activity.FizzlinkFileViewerActivity;
import com.albus.activity.MenuActivity;
import com.albus.activity.ProfilesActivity;
import com.albus.cfspan.CFLinkify;
import com.albus.imagespan.SmiledText;
import com.albus.media.ThumbnailLoader;
import com.albus.media.UserPhotoLoader;
import com.albus.util.AlbusAudioPlayer;
import com.albus.util.AlbusAudioPlayer.onAudioStateChange;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.util.LongMessageWorker;
import com.albus.util.QuoteUtils;
import com.albus.view.CircleImageView;
import com.catfiz.R;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.media.PromotedPhotoLoader;
import com.catfiz.model.Comment;
import com.catfiz.model.Profile;
import com.catfiz.model.Quote;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.CatfishService;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.service.PinManagerV2;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.svcpersistent.TaskDataStorage;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.apache.http.protocol.HTTP;

public class ProfileAdapter extends BaseAdapter {
    private static int BUBBLE_IMAGE_HEIGHT_LANDSCAPE = 0;
    private static int BUBBLE_IMAGE_HEIGHT_PORTRAIT = 0;
    private static int BUBBLE_IMAGE_WIDTH_NORMAL = 0;
    private static final String TAG = "ProfileAdapter";
    private Activity mActivity = null;
    private AlbusAudioPlayer mAudioPlayer = null;
    private List mData = null;
    private boolean mIsCommentMine = false;
    private int mIsLike;
    private boolean mIsLikeMine = false;
    private Profile mListItem = null;
    private LongMessageWorker mLongMessageWorker = null;
    private Map mProgressMap = new HashMap();
    private Map mProgressStateMap = new HashMap();
    private ThumbnailLoader mThumbnailLoader = null;
    private UserPhotoLoader mUserPhotoLoader = null;

    /* synthetic */ class AnonymousClass15 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus = new int[MessageDeliveryStatus.values().length];
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType = new int[MessageType.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus[MessageDeliveryStatus.BCASTRECEIVED.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus[MessageDeliveryStatus.BCASTSENT.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.PROMOTECONTACT.ordinal()] = 1;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTVOICESTATUS.ordinal()] = 2;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTIMAGESTATUS.ordinal()] = 3;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.LONGSTATUSCOMMENT.ordinal()] = 4;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.QUOTE.ordinal()] = 5;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SHARE_SLINK_AT_COMMENT.ordinal()] = 6;
            } catch (NoSuchFieldError e8) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.STIKER_MESSAGE_STATUS.ordinal()] = 7;
            } catch (NoSuchFieldError e9) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTVIDEOSTATUS.ordinal()] = 8;
            } catch (NoSuchFieldError e10) {
            }
        }
    }

    class ViewHolder {
        private ImageView fileDownload;
        private ImageButton ibComment;
        private ImageButton ibLike;
        private ImageButton ibVoicePlayer;
        private ImageView ivField;
        private ImageView ivLikeComment;
        private ImageView ivThumbFile;
        private ImageView ivThumbPic;
        private LinearLayout llAttachContact;
        private LinearLayout llAttachContainer;
        private LinearLayout llAttachFile;
        private LinearLayout llContainer;
        private LinearLayout llContainerNoComment;
        private LinearLayout llContainerPrevComment;
        private LinearLayout llItemProfile;
        private LinearLayout llLikeComment;
        private LinearLayout llTitleProfile;
        public ImageView mIvFizzIcon;
        public LinearLayout mLlFizzlinkContainer;
        private LinearLayout mLlQuote;
        private LinearLayout mLlSticker;
        public TextView mTvFizzDesc;
        public TextView mTvFizzTitle;
        private TextView mTvQuote;
        private TextView mTvQuoteName;
        private ProgressBar progressBarFile;
        private CircleImageView rivIcon;
        private CircleImageView rivSingleContactPic;
        private RelativeLayout rlAttachVoice;
        private RelativeLayout rlItem;
        private SeekBar sbPlayback;
        private TextView tvComment;
        private TextView tvCommentAdd;
        private TextView tvCommentAdd2;
        private TextView tvCommentDate;
        private TextView tvCommentName;
        private TextView tvContactMsg;
        private TextView tvContactName;
        private TextView tvDate;
        private TextView tvDuration;
        private TextView tvFileName;
        private TextView tvName;
        private TextView tvNic;
        private TextView tvProfileName;
        private TextView tvReadMore;
        private TextView tvStatus;
        private TextView tvSumCommLike;
        private TextView tvSumComment;
        private TextView tvSumLike;
        private TextView tvTagHolder;
        private View viewDivider;
        private View viewMarginBottom;

        private ViewHolder() {
            this.mLlQuote = null;
            this.mTvQuoteName = null;
            this.mTvQuote = null;
            this.mLlSticker = null;
        }
    }

    public ProfileAdapter(Activity activity, List list, ThumbnailLoader thumbnailLoader, UserPhotoLoader userPhotoLoader, LongMessageWorker longMessageWorker) {
        this.mActivity = activity;
        this.mData = list;
        this.mUserPhotoLoader = userPhotoLoader;
        this.mLongMessageWorker = longMessageWorker;
        this.mThumbnailLoader = thumbnailLoader;
        this.mAudioPlayer = new AlbusAudioPlayer();
        BUBBLE_IMAGE_WIDTH_NORMAL = (int) this.mActivity.getResources().getDimension(R.dimen.bubble_thumbnail_dimen_normal);
        BUBBLE_IMAGE_HEIGHT_PORTRAIT = (int) this.mActivity.getResources().getDimension(R.dimen.bubble_image_height_portrait);
        BUBBLE_IMAGE_HEIGHT_LANDSCAPE = (int) this.mActivity.getResources().getDimension(R.dimen.bubble_image_height_lansdcape);
    }

    private void goToComment(Profile profile, boolean z, boolean z2) {
        Log.d(TAG, "on go to comment");
        this.mActivity.finish();
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        Intent intent = new Intent(this.mActivity, CommentActivity.class);
        if (z) {
            intent.putExtra(AlbusModelObject.PAGE, 31);
        }
        intent.putExtra(CatfishDataStorage.NIC_NAME, profile.getUser().getName());
        intent.putExtra(FriendListDataStorage.STATUS, profile.getUser().getStatus());
        intent.putExtra(AlbusModelObject.DATE, profile.getUser().getStatusdate());
        intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, CatfishService.getUserPIN());
        intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, catfishPreferences.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0));
        intent.putExtra(AlbusModelObject.STATUS_LIKE, catfishPreferences.getInt(FriendListDataStorage.LIKESTATUS, 0));
        intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, profile.getUser().isMeLikeThisStatus());
        intent.putExtra(AlbusModelObject.IS_FROM_BUTTON_COMMENT, z2);
        this.mActivity.startActivity(intent);
    }

    private void handleClick(Comment comment) {
        switch (AnonymousClass15.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus[MessageDeliveryStatus.values()[comment.getDeliveryStatus()].ordinal()]) {
            case e.b /*1*/:
            case e.c /*2*/:
                switch (AnonymousClass15.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[comment.getMessageType()].ordinal()]) {
                    case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                        ((ProfilesActivity) this.mActivity).handleFileComment(comment, comment.getImageFilePath());
                        return;
                    case Utils.FILE_TYPE_INSTALLER /*8*/:
                        ((ProfilesActivity) this.mActivity).handleFileComment(comment, comment.getDataFilePath());
                        return;
                    default:
                        return;
                }
            default:
                if (!(this.mProgressMap == null || this.mProgressStateMap == null)) {
                    this.mProgressMap.put(comment.getId() + "", Integer.valueOf(1));
                    this.mProgressStateMap.put(comment.getId() + "", Integer.valueOf(1));
                    notifyDataSetChanged();
                }
                ((ProfilesActivity) this.mActivity).downloadCommentAttachedFile(comment);
                return;
        }
    }

    private void setViewAttachPhoto(String str, ImageView imageView) {
        String str2 = "";
        if (str.contains("file://")) {
            str = str.replace("file://", "");
        }
        Options options = new Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(str, options);
        int i = options.outWidth;
        int i2 = options.outHeight;
        if (i > i2) {
            imageView.setLayoutParams(new LayoutParams(BUBBLE_IMAGE_WIDTH_NORMAL, BUBBLE_IMAGE_HEIGHT_LANDSCAPE));
        } else if (i < i2) {
            imageView.setLayoutParams(new LayoutParams(BUBBLE_IMAGE_WIDTH_NORMAL, BUBBLE_IMAGE_HEIGHT_PORTRAIT));
        } else if (i == i2) {
            imageView.setLayoutParams(new LayoutParams(BUBBLE_IMAGE_WIDTH_NORMAL, BUBBLE_IMAGE_WIDTH_NORMAL));
        }
    }

    public boolean areAllItemsEnabled() {
        return true;
    }

    public int getCount() {
        return this.mData.size();
    }

    public Object getItem(int i) {
        return this.mData.get(i);
    }

    public long getItemId(int i) {
        return (long) this.mData.indexOf(getItem(i));
    }

    public View getView(int i, View view, ViewGroup viewGroup) {
        final ViewHolder viewHolder;
        boolean z = true;
        this.mActivity.getResources().getColor(R.color.red);
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        this.mListItem = (Profile) this.mData.get(i);
        if (view == null) {
            viewHolder = new ViewHolder();
            view = ((LayoutInflater) this.mActivity.getSystemService("layout_inflater")).inflate(R.layout.item_profile, viewGroup, false);
            viewHolder.llTitleProfile = (LinearLayout) view.findViewById(R.id.ll_title_view);
            viewHolder.tvProfileName = (TextView) view.findViewById(R.id.tv_profile_name);
            viewHolder.tvNic = (TextView) view.findViewById(R.id.tv_profile_desc);
            viewHolder.tvTagHolder = (TextView) view.findViewById(R.id.tag_holder);
            viewHolder.llItemProfile = (LinearLayout) view.findViewById(R.id.ll_profile_item_view);
            viewHolder.llContainer = (LinearLayout) view.findViewById(R.id.ll_container);
            viewHolder.ivField = (ImageView) view.findViewById(R.id.iv_icon_field);
            viewHolder.tvName = (TextView) view.findViewById(R.id.tv_name);
            viewHolder.tvDate = (TextView) view.findViewById(R.id.tv_date);
            viewHolder.tvStatus = (TextView) view.findViewById(R.id.tv_status);
            viewHolder.ibLike = (ImageButton) view.findViewById(R.id.ib_like);
            viewHolder.ibComment = (ImageButton) view.findViewById(R.id.ib_comment);
            viewHolder.tvSumLike = (TextView) view.findViewById(R.id.tv_sum_like);
            viewHolder.tvSumComment = (TextView) view.findViewById(R.id.tv_sum_comment);
            viewHolder.viewDivider = view.findViewById(R.id.view_strut);
            viewHolder.viewMarginBottom = view.findViewById(R.id.v_margin_bottom_comment);
            viewHolder.rlItem = (RelativeLayout) view.findViewById(R.id.rl_comment_container);
            viewHolder.rivIcon = (CircleImageView) view.findViewById(R.id.riv_img);
            viewHolder.tvComment = (TextView) view.findViewById(R.id.tv_comment);
            viewHolder.tvReadMore = (TextView) view.findViewById(R.id.tv_read_more);
            viewHolder.tvCommentName = (TextView) view.findViewById(R.id.tv_commentator);
            viewHolder.tvCommentDate = (TextView) view.findViewById(R.id.tv_date_comment);
            viewHolder.tvCommentAdd = (TextView) view.findViewById(R.id.tv_add_comment);
            viewHolder.tvCommentAdd2 = (TextView) view.findViewById(R.id.tv_add_comment2);
            viewHolder.llContainerNoComment = (LinearLayout) view.findViewById(R.id.ll_container_nocomment);
            viewHolder.llContainerPrevComment = (LinearLayout) view.findViewById(R.id.ll_prev_comment);
            viewHolder.llLikeComment = (LinearLayout) view.findViewById(R.id.ll_like_container_comm);
            viewHolder.tvSumCommLike = (TextView) view.findViewById(R.id.tv_sum_like_comment);
            viewHolder.llAttachContainer = (LinearLayout) view.findViewById(R.id.ll_attach);
            viewHolder.llAttachFile = (LinearLayout) view.findViewById(R.id.ll_attach_file);
            viewHolder.tvFileName = (TextView) view.findViewById(R.id.tv_file_attach_name);
            viewHolder.ivThumbFile = (ImageView) view.findViewById(R.id.iv_thumb_attach_file);
            viewHolder.fileDownload = (ImageView) view.findViewById(R.id.iv_attach_file_download);
            viewHolder.progressBarFile = (ProgressBar) view.findViewById(R.id.pb_attach_file);
            viewHolder.ivThumbPic = (ImageView) view.findViewById(R.id.iv_thumb_attach_pic);
            viewHolder.llAttachContact = (LinearLayout) view.findViewById(R.id.ll_attach_contact);
            viewHolder.rivSingleContactPic = (CircleImageView) view.findViewById(R.id.riv_attach_contact_single);
            viewHolder.tvContactName = (TextView) view.findViewById(R.id.tv_attached_contact_name);
            viewHolder.tvContactMsg = (TextView) view.findViewById(R.id.tv_attached_contact_msg);
            viewHolder.rlAttachVoice = (RelativeLayout) view.findViewById(R.id.rl_attach_voice);
            viewHolder.tvDuration = (TextView) view.findViewById(R.id.tv_durations);
            viewHolder.ibVoicePlayer = (ImageButton) view.findViewById(R.id.ib_play);
            viewHolder.sbPlayback = (SeekBar) view.findViewById(R.id.sb_playback);
            viewHolder.mLlQuote = (LinearLayout) view.findViewById(R.id.ll_quote);
            viewHolder.mTvQuoteName = (TextView) view.findViewById(R.id.tv_quote_name);
            viewHolder.mTvQuote = (TextView) view.findViewById(R.id.tv_quote);
            viewHolder.mLlSticker = (LinearLayout) view.findViewById(R.id.ll_sticker);
            viewHolder.mLlFizzlinkContainer = (LinearLayout) view.findViewById(R.id.ll_fizzlink);
            viewHolder.mIvFizzIcon = (ImageView) view.findViewById(R.id.iv_fizz_icon);
            viewHolder.mTvFizzTitle = (TextView) view.findViewById(R.id.tv_fizz_title);
            viewHolder.mTvFizzDesc = (TextView) view.findViewById(R.id.tv_fizz_desc);
            viewHolder.llContainerPrevComment.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    ProfileAdapter.this.goToComment((Profile) view.getTag(), false, false);
                }
            });
            viewHolder.ibComment.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    Log.d(ProfileAdapter.TAG, "on llComment clicked");
                    ProfileAdapter.this.goToComment((Profile) view.getTag(), false, true);
                }
            });
            viewHolder.ibLike.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    User user = (User) view.getTag();
                    if (user.isMeLikeThisStatus() == 1) {
                        user.setMeLikeThisStatus(-1);
                        ProfileAdapter.this.notifyDataSetChanged();
                        ((ProfilesActivity) ProfileAdapter.this.mActivity).sendLike(-1);
                        return;
                    }
                    user.setMeLikeThisStatus(1);
                    ProfileAdapter.this.notifyDataSetChanged();
                    ((ProfilesActivity) ProfileAdapter.this.mActivity).sendLike(1);
                }
            });
            viewHolder.viewMarginBottom.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    ProfileAdapter.this.goToComment((Profile) view.getTag(), false, false);
                }
            });
            viewHolder.llContainerNoComment.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    ProfileAdapter.this.goToComment((Profile) view.getTag(), true, false);
                }
            });
            viewHolder.llContainer.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    ProfileAdapter.this.goToComment((Profile) view.getTag(), false, false);
                }
            });
            viewHolder.rlItem.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    ProfileAdapter.this.goToComment((Profile) view.getTag(), false, false);
                }
            });
            viewHolder.tvSumLike.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    Intent intent = new Intent(ProfileAdapter.this.mActivity, MenuActivity.class);
                    CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
                    intent.putExtra(AlbusModelObject.PAGE, 32);
                    intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, catfishPreferences.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0));
                    intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, CatfishService.getUserPIN());
                    ((ProfilesActivity) ProfileAdapter.this.mActivity).startActivityForResult(intent, 18);
                }
            });
            viewHolder.ivThumbPic.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    Comment comment = (Comment) view.getTag();
                    ((ProfilesActivity) ProfileAdapter.this.mActivity).handleFileComment(comment, comment.getImageFilePath());
                }
            });
            viewHolder.llAttachFile.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    ProfileAdapter.this.handleClick((Comment) view.getTag());
                }
            });
            viewHolder.fileDownload.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    ProfileAdapter.this.handleClick((Comment) view.getTag());
                }
            });
            viewHolder.ibVoicePlayer.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    Comment comment = (Comment) view.getTag();
                    Log.d(ProfileAdapter.TAG, "Voice path:" + comment.getVoiceFilePath());
                    ProfileAdapter.this.mAudioPlayer.setOnAudioStateChange(new onAudioStateChange() {
                        public void onAudioFinished(int i) {
                            ProfileAdapter.this.mAudioPlayer.getDurationHandler().post(new Runnable() {
                                public void run() {
                                    ProfileAdapter.this.notifyDataSetChanged();
                                }
                            });
                        }

                        public void onAudioPaused(int i) {
                            Log.d(ProfileAdapter.TAG, "onAudioPaused:" + i);
                        }

                        public void onAudioPlaying(final int i, final int i2) {
                            ProfileAdapter.this.mAudioPlayer.getDurationHandler().post(new Runnable() {
                                public void run() {
                                    viewHolder.sbPlayback.setProgress(i2);
                                    viewHolder.tvDuration.setText(AlbusUtils.milliSecondsToTimer((long) (i - i2)));
                                }
                            });
                        }

                        public void onAudioPrepared(final int i) {
                            ProfileAdapter.this.mAudioPlayer.getDurationHandler().post(new Runnable() {
                                public void run() {
                                    viewHolder.ibVoicePlayer.setImageResource(R.drawable.ic_stop_dark);
                                    viewHolder.sbPlayback.setMax(i);
                                }
                            });
                        }

                        public void onAudioStoped(int i, int i2) {
                            ProfileAdapter.this.mAudioPlayer.getDurationHandler().post(new Runnable() {
                                public void run() {
                                    ProfileAdapter.this.notifyDataSetChanged();
                                }
                            });
                        }
                    });
                    if (ProfileAdapter.this.mAudioPlayer.getPlaying()) {
                        ProfileAdapter.this.mAudioPlayer.Stop();
                        if (ProfileAdapter.this.mAudioPlayer.getLastPlayedID() != comment.getSequence()) {
                            ProfileAdapter.this.mAudioPlayer.setLastPlayedID(comment.getSequence());
                            ProfileAdapter.this.mAudioPlayer.setDataSouce(comment.getVoiceFilePath());
                            ProfileAdapter.this.mAudioPlayer.Play();
                            return;
                        }
                        return;
                    }
                    ProfileAdapter.this.mAudioPlayer.setLastPlayedID(comment.getSequence());
                    ProfileAdapter.this.mAudioPlayer.setDataSouce(comment.getVoiceFilePath());
                    ProfileAdapter.this.mAudioPlayer.Play();
                }
            });
            viewHolder.tvReadMore.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    Comment comment = (Comment) view.getTag();
                    viewHolder.tvReadMore.setVisibility(8);
                    if (ProfileAdapter.this.mLongMessageWorker != null) {
                        ProfileAdapter.this.mLongMessageWorker.loadMessage(String.valueOf(comment.getSequence()), viewHolder.tvComment, true);
                        viewHolder.tvComment.setMaxLines(ActivityChooserViewAdapter.MAX_ACTIVITY_COUNT_UNLIMITED);
                    }
                }
            });
            viewHolder.mLlFizzlinkContainer.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    Comment comment = (Comment) view.getTag();
                    Intent intent = new Intent(ProfileAdapter.this.mActivity, FizzlinkFileViewerActivity.class);
                    try {
                        intent.putExtra(TaskDataStorage.TIMESTAMP, Long.parseLong(AlbusUtils.getSlinkFromJson(comment.getStatusComment(), TaskDataStorage.TIMESTAMP)));
                    } catch (NumberFormatException e) {
                    }
                    String slinkFromJson = AlbusUtils.getSlinkFromJson(comment.getStatusComment(), "simplelink");
                    if (slinkFromJson == null || slinkFromJson.compareTo("") == 0) {
                        slinkFromJson = AlbusUtils.getSlinkFromJson(comment.getStatusComment(), ServerMessageDataStorage.SLINK);
                        if (slinkFromJson != null) {
                            slinkFromJson = Uri.parse(slinkFromJson).getLastPathSegment();
                        }
                    }
                    intent.putExtra(ServerMessageDataStorage.SLINK, slinkFromJson);
                    intent.putExtra(TaskDataStorage.FILE_PATH, AlbusUtils.getSlinkFromJson(comment.getStatusComment(), TaskDataStorage.FILE_PATH));
                    ProfileAdapter.this.mActivity.startActivity(intent);
                }
            });
            view.setTag(viewHolder);
        } else {
            viewHolder = (ViewHolder) view.getTag();
        }
        int listItemType = this.mListItem.getListItemType();
        viewHolder.tvTagHolder.setTag(Integer.valueOf(listItemType));
        User user;
        String str;
        switch (listItemType) {
            case e.b /*1*/:
                user = this.mListItem.getUser();
                viewHolder.llTitleProfile.setVisibility(0);
                viewHolder.llItemProfile.setVisibility(8);
                viewHolder.viewDivider.setVisibility(8);
                viewHolder.viewMarginBottom.setVisibility(8);
                viewHolder.llAttachContainer.setVisibility(8);
                viewHolder.tvProfileName.setText(SmiledText.getSmiledText(this.mActivity, user.getName(), viewHolder.tvProfileName));
                viewHolder.tvNic.setText(this.mActivity.getResources().getString(R.string.nic) + " " + CatfishService.getUserPIN());
                break;
            case e.c /*2*/:
                User user2 = this.mListItem.getUser();
                viewHolder.llTitleProfile.setVisibility(8);
                viewHolder.llItemProfile.setVisibility(0);
                viewHolder.llContainer.setVisibility(0);
                viewHolder.rlItem.setVisibility(8);
                viewHolder.llAttachContainer.setVisibility(8);
                viewHolder.viewDivider.setVisibility(8);
                viewHolder.viewMarginBottom.setVisibility(8);
                viewHolder.tvName.setText(this.mActivity.getResources().getString(R.string.ps_title));
                viewHolder.tvStatus.setText(SmiledText.getSmiledText(this.mActivity, user2.getStatus(), viewHolder.tvStatus));
                CFLinkify.addLinks(viewHolder.tvStatus, CFLinkify.NIC | 7);
                str = this.mListItem.getCommentCount() + " ";
                if (this.mListItem.getCommentCount() == 1) {
                    viewHolder.tvSumComment.setVisibility(0);
                    viewHolder.tvSumComment.setText(str + this.mActivity.getString(R.string.comment));
                } else if (this.mListItem.getCommentCount() > 1) {
                    viewHolder.tvSumComment.setVisibility(0);
                    viewHolder.tvSumComment.setText(str + this.mActivity.getString(R.string.comments));
                } else {
                    viewHolder.tvSumComment.setVisibility(8);
                }
                viewHolder.ibLike.setTag(user2);
                viewHolder.ibComment.setTag(this.mData.get(i));
                viewHolder.llContainer.setTag(this.mData.get(i));
                try {
                    long time = new SimpleDateFormat("HH:mm, dd MMM yyyy").parse(user2.getStatusdate()).getTime();
                    viewHolder.tvDate.setText(AlbusUtils.getLastTimeActivities(time, this.mActivity));
                    System.out.println("Date in milli :: " + time);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                this.mIsLike = user2.isMeLikeThisStatus();
                listItemType = catfishPreferences != null ? catfishPreferences.getInt(FriendListDataStorage.LIKESTATUS, 0) : 0;
                if (listItemType > 0) {
                    viewHolder.tvSumLike.setVisibility(0);
                    if (listItemType == 1) {
                        viewHolder.tvSumLike.setText(listItemType + " " + this.mActivity.getString(R.string.like));
                    } else {
                        viewHolder.tvSumLike.setText(listItemType + " " + this.mActivity.getString(R.string.likes));
                    }
                } else {
                    viewHolder.tvSumLike.setVisibility(8);
                }
                if (this.mIsLike != 1) {
                    viewHolder.ibLike.setImageResource(R.drawable.ic_like_off);
                    break;
                }
                viewHolder.ibLike.setImageResource(R.drawable.ic_like_on);
                break;
            case HTTP.HT /*9*/:
                Comment comment = this.mListItem.getComment();
                viewHolder.llTitleProfile.setVisibility(8);
                viewHolder.llItemProfile.setVisibility(0);
                viewHolder.llContainer.setVisibility(8);
                viewHolder.rlItem.setVisibility(0);
                viewHolder.viewDivider.setVisibility(0);
                viewHolder.viewMarginBottom.setVisibility(8);
                viewHolder.llContainerNoComment.setVisibility(8);
                viewHolder.llContainerPrevComment.setVisibility(8);
                viewHolder.tvCommentName.setText(SmiledText.getSmiledText(this.mActivity, comment.getSender().getName(), viewHolder.tvCommentName));
                viewHolder.tvCommentDate.setText(AlbusUtils.getLastTimeActivities(comment.getSequence(), this.mActivity));
                if (this.mData.size() > 1) {
                    viewHolder.rlItem.setTag(this.mData.get(1));
                }
                if (comment.getCountCommentLike() > 0) {
                    viewHolder.llLikeComment.setVisibility(0);
                    viewHolder.tvSumCommLike.setText("" + comment.getCountCommentLike());
                } else {
                    viewHolder.llLikeComment.setVisibility(8);
                }
                int intValue;
                if (this.mProgressStateMap.containsKey(comment.getId() + "")) {
                    intValue = ((Integer) this.mProgressStateMap.get(comment.getId() + "")).intValue();
                    comment.setIsUploadFailed(intValue != 1);
                } else {
                    intValue = 0;
                }
                if (this.mProgressMap.containsKey(comment.getId() + "")) {
                    Integer num = (Integer) this.mProgressMap.get(comment.getId() + "");
                    if (num.intValue() > 100 || r4 == 3) {
                        this.mProgressMap.remove(comment.getId() + "");
                        this.mProgressStateMap.remove(comment.getId() + "");
                        comment.setProgressUploaded(0);
                    } else if (num.intValue() > 0) {
                        comment.setProgressUploaded(num.intValue());
                    }
                    Log.d(TAG, "progresss : " + comment.getId() + ", progresss : " + num);
                }
                String str2;
                switch (AnonymousClass15.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[comment.getMessageType()].ordinal()]) {
                    case e.b /*1*/:
                        String str3;
                        Bitmap promotedProfilePhotoBitmapOnly;
                        viewHolder.tvComment.setVisibility(8);
                        viewHolder.tvReadMore.setVisibility(8);
                        viewHolder.mLlQuote.setVisibility(8);
                        viewHolder.llAttachContainer.setVisibility(0);
                        viewHolder.llAttachContact.setVisibility(0);
                        viewHolder.rlAttachVoice.setVisibility(8);
                        viewHolder.ivThumbPic.setVisibility(8);
                        viewHolder.llAttachFile.setVisibility(8);
                        viewHolder.mLlSticker.setVisibility(8);
                        if (!comment.getSender().getId().equals(CatfishService.getUserPIN())) {
                            z = false;
                        }
                        List listUsersFromJSON = AlbusUtils.getListUsersFromJSON(comment.getStatusComment());
                        str2 = "";
                        CharSequence charSequence = "";
                        if (listUsersFromJSON != null) {
                            if (listUsersFromJSON.size() > 0) {
                                viewHolder.llAttachContact.setTag(listUsersFromJSON.get(0));
                                str2 = ((User) listUsersFromJSON.get(0)).getId();
                                charSequence = ((User) listUsersFromJSON.get(0)).getName();
                                str3 = str2;
                                if (!z) {
                                    if (str3.equals(CatfishService.getUserPIN())) {
                                        viewHolder.tvContactName.setText(charSequence);
                                        viewHolder.tvContactMsg.setText(this.mActivity.getResources().getString(R.string.pool_msg_attach_me_promoted));
                                        if (this.mUserPhotoLoader != null) {
                                            this.mUserPhotoLoader.loadUserPhoto(str3, viewHolder.rivSingleContactPic);
                                            break;
                                        }
                                    }
                                    viewHolder.tvContactName.setText(charSequence);
                                    viewHolder.tvContactMsg.setText(this.mActivity.getResources().getString(R.string.msg_attach_contact_recv));
                                    promotedProfilePhotoBitmapOnly = CatfishPhotoStorage.getPromotedProfilePhotoBitmapOnly(this.mActivity, str3, (float) PromotedPhotoLoader.DEFAULT_PROFILEPHOTO_SIZE);
                                    if (promotedProfilePhotoBitmapOnly != null) {
                                        viewHolder.rivSingleContactPic.setImageBitmap(promotedProfilePhotoBitmapOnly);
                                        break;
                                    }
                                }
                                viewHolder.tvContactName.setText(charSequence);
                                viewHolder.tvContactMsg.setText(this.mActivity.getResources().getString(R.string.msg_attach_contact_sent));
                                if (this.mUserPhotoLoader != null) {
                                    this.mUserPhotoLoader.loadFriendPhoto(str3, viewHolder.rivSingleContactPic);
                                    break;
                                }
                            }
                            Log.d(TAG, "Something wrong with contact JSON!");
                        }
                        str3 = str2;
                        if (!z) {
                            viewHolder.tvContactName.setText(charSequence);
                            viewHolder.tvContactMsg.setText(this.mActivity.getResources().getString(R.string.msg_attach_contact_sent));
                            if (this.mUserPhotoLoader != null) {
                                this.mUserPhotoLoader.loadFriendPhoto(str3, viewHolder.rivSingleContactPic);
                            }
                        } else if (str3.equals(CatfishService.getUserPIN())) {
                            viewHolder.tvContactName.setText(charSequence);
                            viewHolder.tvContactMsg.setText(this.mActivity.getResources().getString(R.string.pool_msg_attach_me_promoted));
                            if (this.mUserPhotoLoader != null) {
                                this.mUserPhotoLoader.loadUserPhoto(str3, viewHolder.rivSingleContactPic);
                            }
                        } else {
                            viewHolder.tvContactName.setText(charSequence);
                            viewHolder.tvContactMsg.setText(this.mActivity.getResources().getString(R.string.msg_attach_contact_recv));
                            promotedProfilePhotoBitmapOnly = CatfishPhotoStorage.getPromotedProfilePhotoBitmapOnly(this.mActivity, str3, (float) PromotedPhotoLoader.DEFAULT_PROFILEPHOTO_SIZE);
                            if (promotedProfilePhotoBitmapOnly != null) {
                                viewHolder.rivSingleContactPic.setImageBitmap(promotedProfilePhotoBitmapOnly);
                            }
                        }
                        break;
                    case e.c /*2*/:
                        viewHolder.tvComment.setVisibility(8);
                        viewHolder.tvReadMore.setVisibility(8);
                        viewHolder.mLlQuote.setVisibility(8);
                        viewHolder.llAttachContainer.setVisibility(0);
                        viewHolder.llAttachContact.setVisibility(8);
                        viewHolder.ivThumbPic.setVisibility(8);
                        viewHolder.mLlSticker.setVisibility(8);
                        if (!(comment.getSender().getId().equals(CatfishService.getUserPIN()))) {
                            if (comment.getDeliveryStatus() != MessageDeliveryStatus.BCASTRECEIVED.ordinal()) {
                                viewHolder.rlAttachVoice.setVisibility(8);
                                viewHolder.llAttachFile.setVisibility(0);
                                viewHolder.ivThumbFile.setImageResource(R.drawable.ic_voice_dark);
                                listItemType = comment.getProgressUploaded();
                                if (listItemType <= 0) {
                                    viewHolder.progressBarFile.setVisibility(8);
                                    viewHolder.fileDownload.setVisibility(0);
                                    viewHolder.tvFileName.setText(this.mActivity.getString(R.string.voice_received));
                                } else if (listItemType == 1) {
                                    viewHolder.progressBarFile.setVisibility(0);
                                    viewHolder.progressBarFile.setIndeterminate(true);
                                    viewHolder.fileDownload.setVisibility(8);
                                    viewHolder.tvFileName.setText(this.mActivity.getString(R.string.downloading) + " 0%");
                                } else if (listItemType <= 100 && listItemType > 1) {
                                    viewHolder.progressBarFile.setVisibility(0);
                                    viewHolder.progressBarFile.setProgress(listItemType);
                                    viewHolder.progressBarFile.setIndeterminate(false);
                                    viewHolder.fileDownload.setVisibility(8);
                                    viewHolder.tvFileName.setText(this.mActivity.getString(R.string.downloading) + " " + listItemType + "%");
                                }
                                viewHolder.llAttachFile.setTag(comment);
                                viewHolder.fileDownload.setTag(comment);
                                break;
                            }
                            viewHolder.rlAttachVoice.setVisibility(0);
                            viewHolder.llAttachFile.setVisibility(8);
                            viewHolder.tvDuration.setText(AlbusAudioPlayer.getDurationFromAudioFile(this.mActivity, comment.getVoiceFilePath()));
                            viewHolder.ibVoicePlayer.setImageResource(R.drawable.ic_play_dark);
                            viewHolder.sbPlayback.setProgress(0);
                            viewHolder.ibVoicePlayer.setTag(comment);
                            break;
                        }
                        viewHolder.rlAttachVoice.setVisibility(0);
                        viewHolder.llAttachFile.setVisibility(8);
                        viewHolder.tvDuration.setText(AlbusAudioPlayer.getDurationFromAudioFile(this.mActivity, comment.getVoiceFilePath()));
                        viewHolder.ibVoicePlayer.setImageResource(R.drawable.ic_play_dark);
                        viewHolder.sbPlayback.setProgress(0);
                        viewHolder.ibVoicePlayer.setTag(comment);
                        break;
                    case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                        viewHolder.tvReadMore.setVisibility(8);
                        viewHolder.mLlQuote.setVisibility(8);
                        viewHolder.llAttachContainer.setVisibility(0);
                        viewHolder.llAttachContact.setVisibility(8);
                        viewHolder.rlAttachVoice.setVisibility(8);
                        viewHolder.mLlSticker.setVisibility(8);
                        str2 = comment.getImageThumbURI();
                        if (!(comment.getSender().getId().equals(CatfishService.getUserPIN()))) {
                            if (comment.getDeliveryStatus() != MessageDeliveryStatus.BCASTRECEIVED.ordinal()) {
                                viewHolder.tvComment.setVisibility(8);
                                viewHolder.ivThumbPic.setVisibility(8);
                                viewHolder.llAttachFile.setVisibility(0);
                                viewHolder.ivThumbFile.setImageResource(R.drawable.ic_photo_dark);
                                listItemType = comment.getProgressUploaded();
                                if (listItemType <= 0) {
                                    viewHolder.progressBarFile.setVisibility(8);
                                    viewHolder.fileDownload.setVisibility(0);
                                    viewHolder.tvFileName.setText(this.mActivity.getString(R.string.image_received));
                                } else if (listItemType == 1) {
                                    viewHolder.progressBarFile.setVisibility(0);
                                    viewHolder.progressBarFile.setIndeterminate(true);
                                    viewHolder.fileDownload.setVisibility(8);
                                    viewHolder.tvFileName.setText(this.mActivity.getString(R.string.downloading) + " 0%");
                                } else if (listItemType <= 100 && listItemType > 1) {
                                    viewHolder.progressBarFile.setVisibility(0);
                                    viewHolder.progressBarFile.setProgress(listItemType);
                                    viewHolder.progressBarFile.setIndeterminate(false);
                                    viewHolder.fileDownload.setVisibility(8);
                                    viewHolder.tvFileName.setText(this.mActivity.getString(R.string.downloading) + " " + listItemType + "%");
                                }
                                viewHolder.llAttachFile.setTag(comment);
                                viewHolder.fileDownload.setTag(comment);
                                break;
                            }
                            viewHolder.ivThumbPic.setVisibility(0);
                            viewHolder.llAttachFile.setVisibility(8);
                            setViewAttachPhoto(str2, viewHolder.ivThumbPic);
                            if (this.mThumbnailLoader != null) {
                                this.mThumbnailLoader.loadImage((Object) str2, viewHolder.ivThumbPic);
                            }
                            str = comment.getStatusComment();
                            if (str.isEmpty()) {
                                viewHolder.tvComment.setVisibility(8);
                            } else {
                                viewHolder.tvComment.setVisibility(0);
                                viewHolder.tvComment.setText(SmiledText.getSmiledText(this.mActivity, str, viewHolder.tvComment));
                                CFLinkify.addLinks(viewHolder.tvComment, CFLinkify.NIC | 7);
                            }
                            viewHolder.ivThumbPic.setTag(comment);
                            break;
                        }
                        viewHolder.ivThumbPic.setVisibility(0);
                        viewHolder.llAttachFile.setVisibility(8);
                        setViewAttachPhoto(str2, viewHolder.ivThumbPic);
                        if (this.mThumbnailLoader != null) {
                            this.mThumbnailLoader.loadImage((Object) str2, viewHolder.ivThumbPic);
                        }
                        str = comment.getStatusComment();
                        if (str.isEmpty()) {
                            viewHolder.tvComment.setVisibility(8);
                        } else {
                            viewHolder.tvComment.setVisibility(0);
                            viewHolder.tvComment.setText(SmiledText.getSmiledText(this.mActivity, str, viewHolder.tvComment));
                            CFLinkify.addLinks(viewHolder.tvComment, CFLinkify.NIC | 7);
                        }
                        viewHolder.ivThumbPic.setTag(comment);
                        break;
                    case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                        viewHolder.tvComment.setVisibility(0);
                        viewHolder.llAttachContainer.setVisibility(8);
                        viewHolder.tvReadMore.setVisibility(8);
                        viewHolder.mLlQuote.setVisibility(8);
                        viewHolder.mLlSticker.setVisibility(8);
                        viewHolder.tvReadMore.setTag(comment);
                        viewHolder.tvReadMore.setVisibility(0);
                        viewHolder.tvComment.setText(SmiledText.getSmiledText(this.mActivity, comment.getStatusComment(), viewHolder.tvComment));
                        CFLinkify.addLinks(viewHolder.tvComment, CFLinkify.NIC | 7);
                        break;
                    case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                        break;
                    case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                        viewHolder.tvComment.setVisibility(0);
                        viewHolder.llAttachContainer.setVisibility(0);
                        viewHolder.tvReadMore.setVisibility(8);
                        viewHolder.mLlFizzlinkContainer.setVisibility(0);
                        viewHolder.llAttachContact.setVisibility(8);
                        viewHolder.mLlSticker.setVisibility(8);
                        viewHolder.mLlFizzlinkContainer.setTag(comment);
                        if (AlbusUtils.getSlinkFromJson(comment.getStatusComment(), ServerMessageDataStorage.SLINK) == null) {
                            viewHolder.tvComment.setText(this.mActivity.getResources().getString(R.string.upload_fizzlink));
                        } else {
                            str = AlbusUtils.getSlinkFromJson(comment.getStatusComment(), ServerMessageDataStorage.MESSAGE);
                            if (str == null || str.compareTo("") == 0) {
                                viewHolder.tvComment.setVisibility(8);
                            } else {
                                viewHolder.tvComment.setText(AlbusUtils.getSlinkFromJson(comment.getStatusComment(), ServerMessageDataStorage.MESSAGE));
                            }
                        }
                        viewHolder.mTvFizzTitle.setText(AlbusUtils.getSlinkFromJson(comment.getStatusComment(), FriendListDataStorage.FILENAME));
                        viewHolder.mTvFizzDesc.setText(AlbusUtils.getSlinkFromJson(comment.getStatusComment(), "filesize") + " - Fizzlink");
                        str = AlbusUtils.getSlinkFromJson(comment.getStatusComment(), TaskDataStorage.FILE_PATH);
                        if (!(str == null || str.equals(""))) {
                            viewHolder.mIvFizzIcon.setImageResource(AlbusUtils.getIconFileThumb(str));
                            break;
                        }
                        break;
                    case SimpleLog.LOG_LEVEL_OFF /*7*/:
                        viewHolder.tvComment.setVisibility(8);
                        viewHolder.tvReadMore.setVisibility(8);
                        viewHolder.mLlQuote.setVisibility(8);
                        viewHolder.llAttachContainer.setVisibility(8);
                        viewHolder.llAttachContact.setVisibility(8);
                        viewHolder.rlAttachVoice.setVisibility(8);
                        viewHolder.ivThumbPic.setVisibility(8);
                        viewHolder.llAttachFile.setVisibility(8);
                        viewHolder.mLlSticker.setVisibility(0);
                        break;
                    default:
                        viewHolder.tvComment.setVisibility(0);
                        viewHolder.llAttachContainer.setVisibility(8);
                        viewHolder.tvReadMore.setVisibility(8);
                        if (!QuoteUtils.isQuoteMessage(comment.getStatusComment())) {
                            viewHolder.mLlQuote.setVisibility(8);
                            viewHolder.tvComment.setText(SmiledText.getSmiledText(this.mActivity, comment.getStatusComment(), viewHolder.tvComment));
                            CFLinkify.addLinks(viewHolder.tvComment, CFLinkify.NIC | 7);
                            break;
                        }
                        viewHolder.mLlQuote.setVisibility(0);
                        Quote quoteJSONStringDecoder = QuoteUtils.quoteJSONStringDecoder(comment.getStatusComment());
                        if (quoteJSONStringDecoder == null) {
                            viewHolder.mTvQuote.setText("");
                            break;
                        }
                        viewHolder.mTvQuoteName.setText(SmiledText.getSmiledText(this.mActivity, quoteJSONStringDecoder.getSenderName(), viewHolder.mTvQuoteName));
                        viewHolder.mTvQuote.setText(SmiledText.getSmiledText(this.mActivity, '\"' + quoteJSONStringDecoder.getQuoteMessage() + '\"', viewHolder.mTvQuote));
                        CFLinkify.addLinks(viewHolder.mTvQuote, CFLinkify.NIC | 7);
                        viewHolder.tvComment.setText(SmiledText.getSmiledText(this.mActivity, quoteJSONStringDecoder.getMyMessage(), viewHolder.tvComment));
                        CFLinkify.addLinks(viewHolder.tvComment, CFLinkify.NIC | 7);
                        break;
                }
                switch (AnonymousClass15.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[comment.getMessageType()].ordinal()]) {
                    case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                        viewHolder.tvComment.setMaxLines(8);
                        break;
                    default:
                        viewHolder.tvComment.setMaxLines(ActivityChooserViewAdapter.MAX_ACTIVITY_COUNT_UNLIMITED);
                        LongMessageWorker.cancelPotentialWork(null, viewHolder.tvComment);
                        break;
                }
                if (this.mUserPhotoLoader != null) {
                    user = comment.getSender();
                    if (!user.getId().equals(CatfishService.getUserPIN())) {
                        this.mUserPhotoLoader.loadFriendPhoto(user.getId(), viewHolder.rivIcon);
                        break;
                    }
                    this.mUserPhotoLoader.loadUserPhoto(user.getId(), viewHolder.rivIcon);
                    break;
                }
                break;
            case HTTP.LF /*10*/:
                viewHolder.llAttachContainer.setVisibility(8);
                viewHolder.llTitleProfile.setVisibility(8);
                viewHolder.llItemProfile.setVisibility(0);
                viewHolder.llContainer.setVisibility(8);
                viewHolder.rlItem.setVisibility(8);
                viewHolder.viewDivider.setVisibility(8);
                viewHolder.viewMarginBottom.setVisibility(8);
                viewHolder.llContainerNoComment.setVisibility(8);
                viewHolder.llContainerPrevComment.setVisibility(0);
                if (this.mData.size() > 1) {
                    viewHolder.llContainerPrevComment.setTag(this.mData.get(1));
                }
                viewHolder.tvCommentAdd2.setText(R.string.no_comment);
                break;
            case PinManagerV2.REGCODE_HASOLDACC /*11*/:
                viewHolder.llTitleProfile.setVisibility(8);
                viewHolder.llItemProfile.setVisibility(0);
                viewHolder.llContainer.setVisibility(8);
                viewHolder.rlItem.setVisibility(8);
                viewHolder.viewDivider.setVisibility(8);
                viewHolder.viewMarginBottom.setVisibility(8);
                viewHolder.llContainerNoComment.setVisibility(8);
                viewHolder.llContainerPrevComment.setVisibility(0);
                viewHolder.llAttachContainer.setVisibility(8);
                if (this.mData.size() > 1) {
                    viewHolder.llContainerPrevComment.setTag(this.mData.get(1));
                }
                viewHolder.tvCommentAdd2.setText(R.string.view_allcomment);
                break;
            case PinManagerV2.REGCODE_MAX /*12*/:
                viewHolder.llAttachContainer.setVisibility(8);
                viewHolder.llTitleProfile.setVisibility(8);
                viewHolder.llItemProfile.setVisibility(0);
                viewHolder.llContainer.setVisibility(8);
                viewHolder.rlItem.setVisibility(8);
                viewHolder.viewDivider.setVisibility(8);
                viewHolder.viewMarginBottom.setVisibility(0);
                viewHolder.llContainerNoComment.setVisibility(8);
                viewHolder.llContainerPrevComment.setVisibility(8);
                if (this.mData.size() > 1) {
                    viewHolder.viewMarginBottom.setTag(this.mData.get(1));
                    break;
                }
                break;
        }
        return view;
    }

    public boolean isEnabled(int i) {
        return ((Profile) this.mData.get(i)).getListItemType() == 1;
    }

    public void setLikeCount(TextView textView, int i) {
        textView.setText("" + i);
        notifyDataSetChanged();
    }

    public void setProgress(Map map, Map map2) {
        this.mProgressMap = map;
        this.mProgressStateMap = map2;
    }

    public void setUpdateProgress(String str, int i, int i2) {
        this.mProgressMap.put(str, Integer.valueOf(i));
        this.mProgressStateMap.put(str, Integer.valueOf(i2));
    }
}
