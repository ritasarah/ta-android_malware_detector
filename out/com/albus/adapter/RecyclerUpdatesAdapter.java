package com.albus.adapter;

import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v7.widget.RecyclerView.Adapter;
import android.support.v7.widget.RecyclerView.ViewHolder;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.albus.activity.AlbusMainActivity;
import com.albus.activity.ProfilesImageViewerActivity;
import com.albus.cfspan.CFLinkify;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.AlbusDialog.OnUpdatesClickedListener;
import com.albus.dialog.AlbusDialogInterface;
import com.albus.imagespan.HtmlSpanCache;
import com.albus.imagespan.SmiledText;
import com.albus.keys.CacheKeys;
import com.albus.media.ThumbnailLoader;
import com.albus.media.UserPhotoLoader;
import com.albus.util.AlbusModelObject;
import com.albus.view.CircleImageView;
import com.albus.view.CustomImageView;
import com.catfiz.R;
import com.catfiz.base.Catfiz;
import com.catfiz.base.Constant;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.model.Update;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishService;
import com.catfiz.service.CatfishService.UpdateRecent;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.util.Log;
import com.catfiz.util.MimeTypeParser;
import java.io.File;
import java.util.List;
import org.apache.http.protocol.HTTP;

public class RecyclerUpdatesAdapter extends Adapter {
    private static final String TAG = RecyclerUpdatesAdapter.class.getSimpleName();
    private static final int VT_COUNT = 13;
    private static final int VT_HEADER = 14;
    private static final int VT_OTHER = 12;
    private static final int VT_UPDATE_ACCEPT_FRIEND = 9;
    private static final int VT_UPDATE_ACCEPT_FRIEND_DOWN = 11;
    private static final int VT_UPDATE_ACCEPT_FRIEND_UP = 10;
    private static final int VT_UPDATE_NAME = 3;
    private static final int VT_UPDATE_NAME_DOWN = 5;
    private static final int VT_UPDATE_NAME_UP = 4;
    private static final int VT_UPDATE_PHOTO = 6;
    private static final int VT_UPDATE_PHOTO_DOWN = 8;
    private static final int VT_UPDATE_PHOTO_UP = 7;
    private static final int VT_UPDATE_STATUS = 0;
    private static final int VT_UPDATE_STATUS_DOWN = 2;
    private static final int VT_UPDATE_STATUS_UP = 1;
    private static final int VT_VERIFIED_VIEW = 15;
    private Context mContext = null;
    private List mData = null;
    private ThumbnailLoader mThumbnailLoader = null;
    private UserPhotoLoader mUserPhotoLoader = null;
    public boolean mWaitLoad = false;

    /* synthetic */ class AnonymousClass14 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishService$UpdateRecent = new int[UpdateRecent.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.SELFPHOTOUPDT.ordinal()] = RecyclerUpdatesAdapter.VT_UPDATE_STATUS_UP;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.PHOTOUPDT.ordinal()] = RecyclerUpdatesAdapter.VT_UPDATE_STATUS_DOWN;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.STATUSUPDT.ordinal()] = RecyclerUpdatesAdapter.VT_UPDATE_NAME;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.SELFSTATUSUPDT.ordinal()] = RecyclerUpdatesAdapter.VT_UPDATE_NAME_UP;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.USERNAMEUPDT.ordinal()] = RecyclerUpdatesAdapter.VT_UPDATE_NAME_DOWN;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.SELFUSERNAMEUPDT.ordinal()] = RecyclerUpdatesAdapter.VT_UPDATE_PHOTO;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.ACCEPTFRIEND.ordinal()] = RecyclerUpdatesAdapter.VT_UPDATE_PHOTO_UP;
            } catch (NoSuchFieldError e7) {
            }
        }
    }

    class AcceptFriendViewHolder extends ViewHolder {
        private LinearLayout llContainer = null;
        private CircleImageView rivIcon = null;
        private RelativeLayout rlContent = null;
        private TextView tvDate = null;
        private TextView tvUpdate = null;
        private View viewDown = null;
        private View viewUp = null;

        public AcceptFriendViewHolder(View view) {
            super(view);
            this.llContainer = (LinearLayout) view.findViewById(R.id.ll_updates);
            this.rlContent = (RelativeLayout) view.findViewById(R.id.rl_bgcard);
            this.tvDate = (TextView) view.findViewById(R.id.tv_date);
            this.rivIcon = (CircleImageView) view.findViewById(R.id.riv_img);
            this.tvUpdate = (TextView) view.findViewById(R.id.tv_update);
            this.viewUp = view.findViewById(R.id.view_up);
            this.viewDown = view.findViewById(R.id.view_down);
        }
    }

    class HeaderViewHolder extends ViewHolder {
        public HeaderViewHolder(View view) {
            super(view);
        }
    }

    class UpdateNameViewHolder extends ViewHolder {
        private LinearLayout llContainer = null;
        private CircleImageView rivIcon = null;
        private RelativeLayout rlContent = null;
        private TextView tvChangeName = null;
        private TextView tvDate = null;
        private TextView tvUpdate = null;
        private View viewDown = null;
        private View viewUp = null;

        public UpdateNameViewHolder(View view) {
            super(view);
            this.llContainer = (LinearLayout) view.findViewById(R.id.ll_updates);
            this.rlContent = (RelativeLayout) view.findViewById(R.id.rl_bgcard);
            this.tvDate = (TextView) view.findViewById(R.id.tv_date);
            this.rivIcon = (CircleImageView) view.findViewById(R.id.riv_img);
            this.tvUpdate = (TextView) view.findViewById(R.id.tv_update);
            this.viewUp = view.findViewById(R.id.view_up);
            this.viewDown = view.findViewById(R.id.view_down);
            this.tvChangeName = (TextView) view.findViewById(R.id.tv_change_name);
        }
    }

    class UpdatePhotoViewHolder extends ViewHolder {
        private CustomImageView civChangePP = null;
        private LinearLayout llContainer = null;
        private CircleImageView rivIcon = null;
        private RelativeLayout rlContent = null;
        private TextView tvDate = null;
        private TextView tvUpdate = null;
        private View viewDown = null;
        private View viewUp = null;

        public UpdatePhotoViewHolder(View view) {
            super(view);
            this.llContainer = (LinearLayout) view.findViewById(R.id.ll_updates);
            this.rlContent = (RelativeLayout) view.findViewById(R.id.rl_bgcard);
            this.tvDate = (TextView) view.findViewById(R.id.tv_date);
            this.rivIcon = (CircleImageView) view.findViewById(R.id.riv_img);
            this.tvUpdate = (TextView) view.findViewById(R.id.tv_update);
            this.viewUp = view.findViewById(R.id.view_up);
            this.viewDown = view.findViewById(R.id.view_down);
            this.civChangePP = (CustomImageView) view.findViewById(R.id.civ_change_pp);
        }
    }

    class UpdateStatusViewHolder extends ViewHolder {
        private ImageButton ibComment = null;
        private ImageButton ibLike = null;
        private LinearLayout llContainer = null;
        private CircleImageView rivIcon = null;
        private RelativeLayout rlContent = null;
        private TextView tvChangeStatus = null;
        private TextView tvDate = null;
        private TextView tvSumComment = null;
        private TextView tvSumLike = null;
        private TextView tvUpdate = null;
        private View viewDown = null;
        private View viewUp = null;

        public UpdateStatusViewHolder(View view) {
            super(view);
            this.llContainer = (LinearLayout) view.findViewById(R.id.ll_updates);
            this.rlContent = (RelativeLayout) view.findViewById(R.id.rl_bgcard);
            this.tvDate = (TextView) view.findViewById(R.id.tv_date);
            this.rivIcon = (CircleImageView) view.findViewById(R.id.riv_img);
            this.tvUpdate = (TextView) view.findViewById(R.id.tv_update);
            this.ibComment = (ImageButton) view.findViewById(R.id.ib_comment);
            this.ibLike = (ImageButton) view.findViewById(R.id.ib_like);
            this.tvSumLike = (TextView) view.findViewById(R.id.tv_sum_like);
            this.tvSumComment = (TextView) view.findViewById(R.id.tv_sum_comment);
            this.viewUp = view.findViewById(R.id.view_up);
            this.viewDown = view.findViewById(R.id.view_down);
            this.tvChangeStatus = (TextView) view.findViewById(R.id.tv_change_status);
        }
    }

    class UpdatesClickedDialog implements AlbusDialogInterface {
        private UpdatesClickedDialog() {
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            final String string = bundle.getString(CatfishRESTAPI.CFCOMPACT_STICKERID);
            final String string2 = bundle.getString(CatfishDataStorage.NIC_NAME);
            final int i2 = bundle.getInt(MimeTypeParser.TAG_TYPE);
            AlbusDialog.setOnUpdatesItemClicked(new OnUpdatesClickedListener() {
                public void onGoChatClicked() {
                    if (i2 == UpdateRecent.STATUSUPDT.ordinal() || i2 == UpdateRecent.SELFSTATUSUPDT.ordinal()) {
                        ((AlbusMainActivity) RecyclerUpdatesAdapter.this.mContext).goToComment(string, RecyclerUpdatesAdapter.VT_UPDATE_STATUS, false);
                    } else {
                        ((AlbusMainActivity) RecyclerUpdatesAdapter.this.mContext).goToChat(RecyclerUpdatesAdapter.VT_UPDATE_STATUS, string, string2, false, RecyclerUpdatesAdapter.VT_UPDATE_STATUS, RecyclerUpdatesAdapter.VT_UPDATE_STATUS, false);
                    }
                }

                public void onGoProfileClicked() {
                    ((AlbusMainActivity) RecyclerUpdatesAdapter.this.mContext).goToProfile(string);
                }
            });
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    class VerifiedViewHolder extends ViewHolder {
        private Button btnVerify = null;

        public VerifiedViewHolder(View view) {
            super(view);
            this.btnVerify = (Button) view.findViewById(R.id.btn_verify);
        }
    }

    public RecyclerUpdatesAdapter(Context context, List list, UserPhotoLoader userPhotoLoader) {
        this.mContext = context;
        this.mData = list;
        this.mUserPhotoLoader = userPhotoLoader;
        this.mThumbnailLoader = ((AlbusMainActivity) context).getThumbnailLoader();
    }

    private Update getItemList(int i) {
        return (Update) this.mData.get(i - 1);
    }

    private String getUpdateSenderID(Update update) {
        if (update.getRecipientID() == null) {
            update.setRecipientId("");
        }
        return (update.getRecipientID().isEmpty() || update.getRecipientID().equals("null")) ? update.getUserID() : update.getRecipientID();
    }

    private boolean isFirstPosition(int i) {
        return i == 0;
    }

    private boolean isLastPosition(int i) {
        return i == getBasicItemCount() + -1;
    }

    private boolean isPositionHeader(int i) {
        return i == 0;
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void loadAvatarPhotoAndDate(com.catfiz.model.Update r6, com.albus.view.CircleImageView r7, android.widget.TextView r8) {
        /*
        r5 = this;
        r0 = 1;
        r1 = 0;
        r2 = r5.getUpdateSenderID(r6);
        r3 = com.catfiz.service.CatfishService.getUserPIN();
        r3 = r2.equals(r3);
        if (r3 == 0) goto L_0x003f;
    L_0x0010:
        r3 = r5.mUserPhotoLoader;
        r4 = r5.mWaitLoad;
        if (r4 != 0) goto L_0x003d;
    L_0x0016:
        r0 = r3.loadUserPhoto(r2, r7, r0);
        if (r0 == 0) goto L_0x001c;
    L_0x001c:
        r0 = new java.lang.StringBuilder;
        r0.<init>();
        r1 = "";
        r0 = r0.append(r1);
        r2 = r6.getUpdateTime();
        r0 = r0.append(r2);
        r0 = r0.toString();
        r1 = r5.mContext;
        r0 = com.albus.util.AlbusUtils.getLastTimeActivities(r0, r1);
        r8.setText(r0);
        return;
    L_0x003d:
        r0 = r1;
        goto L_0x0016;
    L_0x003f:
        r3 = r5.mUserPhotoLoader;
        r4 = r5.mWaitLoad;
        if (r4 != 0) goto L_0x004c;
    L_0x0045:
        r0 = r3.loadFriendPhoto(r2, r7, r0);
        if (r0 == 0) goto L_0x001c;
    L_0x004b:
        goto L_0x001c;
    L_0x004c:
        r0 = r1;
        goto L_0x0045;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.albus.adapter.RecyclerUpdatesAdapter.loadAvatarPhotoAndDate(com.catfiz.model.Update, com.albus.view.CircleImageView, android.widget.TextView):void");
    }

    private void setVerifiedView(RelativeLayout relativeLayout, View view, View view2) {
        relativeLayout.setVisibility(VT_UPDATE_PHOTO_DOWN);
        view.setVisibility(VT_UPDATE_PHOTO_DOWN);
        view2.setVisibility(VT_UPDATE_PHOTO_DOWN);
    }

    private void showItemUpdateDialog(Update update) {
        Bundle bundle = new Bundle();
        bundle.putInt(AlbusModelObject.DIALOG, VT_UPDATE_PHOTO);
        bundle.putInt(MimeTypeParser.TAG_TYPE, update.getUpdateAction());
        bundle.putString(CatfishDataStorage.NIC_NAME, update.getUserName());
        bundle.putString(CatfishRESTAPI.CFCOMPACT_STICKERID, update.getUserID());
        AlbusDialog.showDialog(VT_UPDATE_PHOTO, new UpdatesClickedDialog(), this.mContext, bundle, ((AlbusMainActivity) this.mContext).getSupportFragmentManager());
    }

    public int getBasicItemCount() {
        return this.mData == null ? VT_UPDATE_STATUS : this.mData.size();
    }

    public int getItemCount() {
        return getBasicItemCount() + VT_UPDATE_STATUS_UP;
    }

    public int getItemViewType(int i) {
        if (isPositionHeader(i)) {
            return VT_HEADER;
        }
        Update itemList = getItemList(i);
        if (itemList.isVerifiedView()) {
            return VT_VERIFIED_VIEW;
        }
        switch (AnonymousClass14.$SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.values()[itemList.getUpdateAction()].ordinal()]) {
            case VT_UPDATE_STATUS_UP /*1*/:
            case VT_UPDATE_STATUS_DOWN /*2*/:
                return isFirstPosition(i) ? ((AlbusMainActivity) this.mContext).getVerify() ? VT_UPDATE_PHOTO : VT_UPDATE_PHOTO_UP : isLastPosition(i) ? VT_UPDATE_PHOTO_DOWN : VT_UPDATE_PHOTO;
            case VT_UPDATE_NAME /*3*/:
            case VT_UPDATE_NAME_UP /*4*/:
                return isFirstPosition(i) ? ((AlbusMainActivity) this.mContext).getVerify() ? VT_UPDATE_STATUS : VT_UPDATE_STATUS_UP : isLastPosition(i) ? VT_UPDATE_STATUS_DOWN : VT_UPDATE_STATUS;
            case VT_UPDATE_NAME_DOWN /*5*/:
            case VT_UPDATE_PHOTO /*6*/:
                return isFirstPosition(i) ? ((AlbusMainActivity) this.mContext).getVerify() ? VT_UPDATE_NAME : VT_UPDATE_NAME_UP : isLastPosition(i) ? VT_UPDATE_NAME_DOWN : VT_UPDATE_NAME;
            case VT_UPDATE_PHOTO_UP /*7*/:
                return isFirstPosition(i) ? ((AlbusMainActivity) this.mContext).getVerify() ? VT_UPDATE_ACCEPT_FRIEND : VT_UPDATE_ACCEPT_FRIEND_UP : isLastPosition(i) ? VT_UPDATE_ACCEPT_FRIEND_DOWN : VT_UPDATE_ACCEPT_FRIEND;
            default:
                return VT_OTHER;
        }
    }

    public int getViewTypeCount() {
        return VT_COUNT;
    }

    public void onBindViewHolder(ViewHolder viewHolder, int i) {
        if (this.mData == null || this.mData.size() <= 0) {
            Log.d(TAG, "!!! NO DATA");
        } else if (!isPositionHeader(i)) {
            Update itemList = getItemList(i);
            String str = "";
            CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
            String updateSenderID = getUpdateSenderID(itemList);
            String namekey = CacheKeys.namekey(updateSenderID, itemList.getStatusSequence());
            String namefromkey = CacheKeys.namefromkey(updateSenderID, itemList.getStatusSequence());
            String statuskey = CacheKeys.statuskey(updateSenderID, itemList.getStatusSequence());
            String photoprofilekey = CacheKeys.photoprofilekey(updateSenderID, itemList.getStatusSequence());
            str = CacheKeys.newfriendkey(updateSenderID, itemList.getStatusSequence());
            UpdateStatusViewHolder updateStatusViewHolder;
            UpdateNameViewHolder updateNameViewHolder;
            UpdatePhotoViewHolder updatePhotoViewHolder;
            AcceptFriendViewHolder acceptFriendViewHolder;
            if (itemList.isVerifiedView()) {
                Log.d(TAG, "~~~ Verifikasi:" + viewHolder.getItemViewType());
                switch (viewHolder.getItemViewType()) {
                    case VT_UPDATE_STATUS /*0*/:
                    case VT_UPDATE_STATUS_UP /*1*/:
                    case VT_UPDATE_STATUS_DOWN /*2*/:
                        updateStatusViewHolder = (UpdateStatusViewHolder) viewHolder;
                        setVerifiedView(updateStatusViewHolder.rlContent, updateStatusViewHolder.viewUp, updateStatusViewHolder.viewDown);
                        return;
                    case VT_UPDATE_NAME /*3*/:
                    case VT_UPDATE_NAME_UP /*4*/:
                    case VT_UPDATE_NAME_DOWN /*5*/:
                        updateNameViewHolder = (UpdateNameViewHolder) viewHolder;
                        setVerifiedView(updateNameViewHolder.rlContent, updateNameViewHolder.viewUp, updateNameViewHolder.viewDown);
                        return;
                    case VT_UPDATE_PHOTO /*6*/:
                    case VT_UPDATE_PHOTO_UP /*7*/:
                    case VT_UPDATE_PHOTO_DOWN /*8*/:
                        updatePhotoViewHolder = (UpdatePhotoViewHolder) viewHolder;
                        setVerifiedView(updatePhotoViewHolder.rlContent, updatePhotoViewHolder.viewUp, updatePhotoViewHolder.viewDown);
                        return;
                    case VT_UPDATE_ACCEPT_FRIEND /*9*/:
                    case VT_UPDATE_ACCEPT_FRIEND_UP /*10*/:
                    case VT_UPDATE_ACCEPT_FRIEND_DOWN /*11*/:
                    case VT_OTHER /*12*/:
                        acceptFriendViewHolder = (AcceptFriendViewHolder) viewHolder;
                        setVerifiedView(acceptFriendViewHolder.rlContent, acceptFriendViewHolder.viewUp, acceptFriendViewHolder.viewDown);
                        return;
                    default:
                        return;
                }
            }
            switch (viewHolder.getItemViewType()) {
            }
            CharSequence charSequence;
            switch (viewHolder.getItemViewType()) {
                case VT_UPDATE_STATUS /*0*/:
                case VT_UPDATE_STATUS_UP /*1*/:
                case VT_UPDATE_STATUS_DOWN /*2*/:
                    int i2;
                    updateStatusViewHolder = (UpdateStatusViewHolder) viewHolder;
                    loadAvatarPhotoAndDate(itemList, updateStatusViewHolder.rivIcon, updateStatusViewHolder.tvDate);
                    int i3 = VT_UPDATE_STATUS;
                    photoprofilekey = "";
                    photoprofilekey = "";
                    if (updateSenderID.equals(CatfishService.getUserPIN())) {
                        namekey = ((AlbusMainActivity) this.mContext).getMyName();
                        i2 = catfishPreferences.getInt(Constant.IS_LIKE_MY_STATUS, -1);
                        i3 = catfishPreferences.getInt(FriendListDataStorage.LIKESTATUS, VT_UPDATE_STATUS);
                        if (catfishPreferences.getBoolean(Constant.NOTIF_COMMENT, false)) {
                            updateStatusViewHolder.tvSumComment.setTextColor(this.mContext.getResources().getColor(R.color.blue));
                        } else {
                            updateStatusViewHolder.tvSumComment.setTextColor(this.mContext.getResources().getColor(R.color.transparent54));
                        }
                        if (catfishPreferences.getBoolean(Constant.NOTIF_LIKE, false)) {
                            updateStatusViewHolder.tvSumComment.setTextColor(this.mContext.getResources().getColor(R.color.blue));
                            updateStatusViewHolder.tvSumLike.setTextColor(this.mContext.getResources().getColor(R.color.red));
                        } else {
                            updateStatusViewHolder.tvSumComment.setTextColor(this.mContext.getResources().getColor(R.color.transparent54));
                            updateStatusViewHolder.tvSumLike.setTextColor(this.mContext.getResources().getColor(R.color.transparent54));
                        }
                    } else {
                        namekey = itemList.getRecipientName();
                        i2 = itemList.isUserLike();
                        User matchFriendData = Catfiz.matchFriendData(updateSenderID);
                        if (matchFriendData != null) {
                            i3 = matchFriendData.getStatusLike();
                        }
                        updateStatusViewHolder.tvSumComment.setTextColor(this.mContext.getResources().getColor(R.color.transparent54));
                        updateStatusViewHolder.tvSumLike.setTextColor(this.mContext.getResources().getColor(R.color.transparent54));
                    }
                    if (i2 > 0) {
                        updateStatusViewHolder.ibLike.setImageResource(R.drawable.ic_like_on);
                    } else {
                        updateStatusViewHolder.ibLike.setImageResource(R.drawable.ic_like_off);
                    }
                    updateStatusViewHolder.tvUpdate.setText(HtmlSpanCache.fromHtml(statuskey, "<font color='#21000000'><b>" + namekey + "</b></font>" + "<font color='#8A000000'> " + this.mContext.getResources().getString(R.string.updated_status) + "</font>"));
                    updateStatusViewHolder.tvChangeStatus.setText(SmiledText.getSmiledText(this.mContext, statuskey, itemList.getStatusUpdate(), updateStatusViewHolder.tvChangeStatus));
                    CFLinkify.addLinks(updateStatusViewHolder.tvChangeStatus, CFLinkify.NIC | VT_UPDATE_PHOTO_UP);
                    i2 = itemList.getCountStatus();
                    if (i3 == VT_UPDATE_STATUS_UP) {
                        charSequence = i3 + " " + this.mContext.getString(R.string.like);
                        updateStatusViewHolder.tvSumLike.setVisibility(VT_UPDATE_STATUS);
                        updateStatusViewHolder.tvSumLike.setText(charSequence);
                    } else if (i3 > VT_UPDATE_STATUS_UP) {
                        charSequence = i3 + " " + this.mContext.getString(R.string.likes);
                        updateStatusViewHolder.tvSumLike.setVisibility(VT_UPDATE_STATUS);
                        updateStatusViewHolder.tvSumLike.setText(charSequence);
                    } else {
                        updateStatusViewHolder.tvSumLike.setVisibility(VT_UPDATE_PHOTO_DOWN);
                    }
                    if (i2 == VT_UPDATE_STATUS_UP) {
                        charSequence = i2 + " " + this.mContext.getString(R.string.comment);
                        updateStatusViewHolder.tvSumComment.setVisibility(VT_UPDATE_STATUS);
                        updateStatusViewHolder.tvSumComment.setText(charSequence);
                    } else if (i2 > VT_UPDATE_STATUS_UP) {
                        charSequence = i2 + " " + this.mContext.getString(R.string.comments);
                        updateStatusViewHolder.tvSumComment.setVisibility(VT_UPDATE_STATUS);
                        updateStatusViewHolder.tvSumComment.setText(charSequence);
                    } else {
                        updateStatusViewHolder.tvSumComment.setVisibility(VT_UPDATE_PHOTO_DOWN);
                    }
                    if (itemList.hasNewComment()) {
                        updateStatusViewHolder.tvSumComment.setTextColor(this.mContext.getResources().getColor(R.color.blue));
                    } else {
                        updateStatusViewHolder.tvSumComment.setTextColor(this.mContext.getResources().getColor(R.color.transparent54));
                    }
                    if (itemList.hasNewLike()) {
                        updateStatusViewHolder.tvSumLike.setTextColor(this.mContext.getResources().getColor(R.color.red));
                    } else {
                        updateStatusViewHolder.tvSumLike.setTextColor(this.mContext.getResources().getColor(R.color.transparent54));
                    }
                    updateStatusViewHolder.tvSumLike.setTag(itemList);
                    updateStatusViewHolder.rivIcon.setTag(updateSenderID);
                    updateStatusViewHolder.ibComment.setTag(updateSenderID);
                    updateStatusViewHolder.ibLike.setTag(Integer.valueOf(i));
                    updateStatusViewHolder.llContainer.setTag(updateSenderID);
                    return;
                case VT_UPDATE_NAME /*3*/:
                case VT_UPDATE_NAME_UP /*4*/:
                case VT_UPDATE_NAME_DOWN /*5*/:
                    updateNameViewHolder = (UpdateNameViewHolder) viewHolder;
                    loadAvatarPhotoAndDate(itemList, updateNameViewHolder.rivIcon, updateNameViewHolder.tvDate);
                    charSequence = itemList.getRecipientName();
                    if (charSequence == null) {
                        charSequence = "";
                    }
                    CharSequence userName = itemList.getUserName();
                    if (userName == null) {
                        userName = "";
                    }
                    String str2 = "<font color='#21000000'><b>" + charSequence + "</b></font>" + "<font color='#8A000000'> " + this.mContext.getResources().getString(R.string.changed_name) + "</font>";
                    updateNameViewHolder.tvUpdate.setText(HtmlSpanCache.fromHtml(namekey, str2));
                    namekey = this.mContext.getString(R.string.updates_change_name);
                    Log.d(TAG, "update:" + str2);
                    updateNameViewHolder.tvChangeName.setText(HtmlSpanCache.fromHtml(namefromkey, namekey.replace("[updates_val]", userName).replace("[name]", charSequence)));
                    updateNameViewHolder.rivIcon.setTag(updateSenderID);
                    updateNameViewHolder.llContainer.setTag(itemList);
                    return;
                case VT_UPDATE_PHOTO /*6*/:
                case VT_UPDATE_PHOTO_UP /*7*/:
                case VT_UPDATE_PHOTO_DOWN /*8*/:
                    updatePhotoViewHolder = (UpdatePhotoViewHolder) viewHolder;
                    loadAvatarPhotoAndDate(itemList, updatePhotoViewHolder.rivIcon, updatePhotoViewHolder.tvDate);
                    File userProfilePhotoFile;
                    switch (AnonymousClass14.$SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.values()[itemList.getUpdateAction()].ordinal()]) {
                        case VT_UPDATE_STATUS_UP /*1*/:
                            updatePhotoViewHolder.tvUpdate.setText(HtmlSpanCache.fromHtml(photoprofilekey, "<font color='#21000000'><b>" + ((AlbusMainActivity) this.mContext).getMyName() + "</b></font>" + "<font color='#8A000000'> " + this.mContext.getResources().getString(R.string.changed_profile_picture) + "</font>"));
                            userProfilePhotoFile = CatfishPhotoStorage.getUserProfilePhotoFile(this.mContext);
                            if (userProfilePhotoFile != null) {
                                if (this.mThumbnailLoader.loadImage((Object) "file://" + userProfilePhotoFile.getAbsolutePath(), updatePhotoViewHolder.civChangePP, !this.mWaitLoad) != 0) {
                                    break;
                                }
                            }
                            break;
                        case VT_UPDATE_STATUS_DOWN /*2*/:
                            updatePhotoViewHolder.tvUpdate.setText(HtmlSpanCache.fromHtml(photoprofilekey, "<font color='#21000000'><b>" + itemList.getRecipientName() + "</b></font>" + "<font color='#8A000000'> " + this.mContext.getResources().getString(R.string.changed_profile_picture) + "</font>"));
                            userProfilePhotoFile = CatfishPhotoStorage.getFriendProfilePhotoFile(this.mContext, updateSenderID);
                            if (userProfilePhotoFile != null) {
                                if (this.mThumbnailLoader.loadImage((Object) "file://" + userProfilePhotoFile.getAbsolutePath(), updatePhotoViewHolder.civChangePP, !this.mWaitLoad) != 0) {
                                    break;
                                }
                            }
                            break;
                    }
                    updatePhotoViewHolder.rivIcon.setTag(updateSenderID);
                    updatePhotoViewHolder.llContainer.setTag(itemList);
                    updatePhotoViewHolder.civChangePP.setTag(itemList);
                    return;
                case VT_UPDATE_ACCEPT_FRIEND /*9*/:
                case VT_UPDATE_ACCEPT_FRIEND_UP /*10*/:
                case VT_UPDATE_ACCEPT_FRIEND_DOWN /*11*/:
                    acceptFriendViewHolder = (AcceptFriendViewHolder) viewHolder;
                    loadAvatarPhotoAndDate(itemList, acceptFriendViewHolder.rivIcon, acceptFriendViewHolder.tvDate);
                    acceptFriendViewHolder.tvUpdate.setText(HtmlSpanCache.fromHtml(str, "<font color='#21000000'><b>" + itemList.getUserName() + "</b></font>" + "<font color='#8A000000'> " + this.mContext.getResources().getString(R.string.is_new_friend) + "</font>"));
                    acceptFriendViewHolder.rivIcon.setTag(updateSenderID);
                    acceptFriendViewHolder.llContainer.setTag(itemList);
                    return;
                default:
                    return;
            }
        }
    }

    public ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
        Context context = viewGroup.getContext();
        if (i == VT_HEADER) {
            return new HeaderViewHolder(LayoutInflater.from(context).inflate(R.layout.recycler_header, viewGroup, false));
        }
        final ViewHolder updateStatusViewHolder;
        switch (i) {
            case VT_UPDATE_STATUS /*0*/:
            case VT_UPDATE_STATUS_UP /*1*/:
            case VT_UPDATE_STATUS_DOWN /*2*/:
                updateStatusViewHolder = new UpdateStatusViewHolder(LayoutInflater.from(context).inflate(R.layout.item_updates_status, viewGroup, false));
                updateStatusViewHolder.ibLike.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        int intValue = ((Integer) view.getTag()).intValue();
                        Update access$200 = RecyclerUpdatesAdapter.this.getItemList(intValue);
                        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
                        catfishPreferences.edit().putBoolean(Constant.NOTIF_LIKE, false).commit();
                        long j;
                        String recipientID;
                        User matchFriendData;
                        if ((access$200.getRecipientID().equals(CatfishService.getUserPIN()) ? catfishPreferences.getInt(Constant.IS_LIKE_MY_STATUS, -1) : access$200.isUserLike()) == RecyclerUpdatesAdapter.VT_UPDATE_STATUS_UP) {
                            updateStatusViewHolder.ibLike.setImageResource(R.drawable.ic_like_off);
                            j = catfishPreferences.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0);
                            recipientID = access$200.getRecipientID();
                            if (recipientID.equals(CatfishService.getUserPIN())) {
                                catfishPreferences.edit().putInt(Constant.IS_LIKE_MY_STATUS, -1).commit();
                                catfishPreferences.edit().putInt(FriendListDataStorage.LIKESTATUS, catfishPreferences.getInt(FriendListDataStorage.LIKESTATUS, RecyclerUpdatesAdapter.VT_UPDATE_STATUS) - 1).commit();
                            } else {
                                access$200.setUserLike(-1);
                                matchFriendData = Catfiz.matchFriendData(recipientID);
                                if (matchFriendData != null) {
                                    matchFriendData.setStatusLike(matchFriendData.getStatusLike() - 1);
                                    Log.d(RecyclerUpdatesAdapter.TAG, "name:" + access$200.getRecipientName() + " likecount:" + matchFriendData.getStatusLike());
                                }
                            }
                            ((AlbusMainActivity) RecyclerUpdatesAdapter.this.mContext).setLike(-1, j, access$200.getRecipientID(), intValue - 1);
                        } else {
                            updateStatusViewHolder.ibLike.setImageResource(R.drawable.ic_like_on);
                            j = access$200.getStatusSequence();
                            recipientID = access$200.getRecipientID();
                            if (recipientID.equals(CatfishService.getUserPIN())) {
                                catfishPreferences.edit().putInt(Constant.IS_LIKE_MY_STATUS, RecyclerUpdatesAdapter.VT_UPDATE_STATUS_UP).commit();
                                catfishPreferences.edit().putInt(FriendListDataStorage.LIKESTATUS, catfishPreferences.getInt(FriendListDataStorage.LIKESTATUS, RecyclerUpdatesAdapter.VT_UPDATE_STATUS) + RecyclerUpdatesAdapter.VT_UPDATE_STATUS_UP).commit();
                            } else {
                                access$200.setUserLike(RecyclerUpdatesAdapter.VT_UPDATE_STATUS_UP);
                                matchFriendData = Catfiz.matchFriendData(recipientID);
                                if (matchFriendData != null) {
                                    matchFriendData.setStatusLike(matchFriendData.getStatusLike() + RecyclerUpdatesAdapter.VT_UPDATE_STATUS_UP);
                                    Log.d(RecyclerUpdatesAdapter.TAG, "name:" + access$200.getRecipientName() + " likecount:" + matchFriendData.getStatusLike());
                                }
                            }
                            access$200.setHasNewLike(true);
                            ((AlbusMainActivity) RecyclerUpdatesAdapter.this.mContext).setLike(RecyclerUpdatesAdapter.VT_UPDATE_STATUS_UP, j, access$200.getRecipientID(), intValue - 1);
                        }
                        RecyclerUpdatesAdapter.this.notifyDataSetChanged();
                    }
                });
                updateStatusViewHolder.ibComment.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        ((AlbusMainActivity) RecyclerUpdatesAdapter.this.mContext).goToComment((String) view.getTag(), RecyclerUpdatesAdapter.VT_UPDATE_STATUS, true);
                    }
                });
                updateStatusViewHolder.tvSumLike.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        Update update = (Update) view.getTag();
                        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
                        catfishPreferences.edit().putInt(Constant.PREV_NOTIF_LIKE, catfishPreferences.getInt(FriendListDataStorage.LIKESTATUS, RecyclerUpdatesAdapter.VT_UPDATE_STATUS)).commit();
                        catfishPreferences.edit().putBoolean(AlbusModelObject.LIKE_FIRST, false).commit();
                        ((AlbusMainActivity) RecyclerUpdatesAdapter.this.mContext).goToWhoLike(update.getRecipientID());
                    }
                });
                updateStatusViewHolder.llContainer.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        ((AlbusMainActivity) RecyclerUpdatesAdapter.this.mContext).goToComment((String) view.getTag(), RecyclerUpdatesAdapter.VT_UPDATE_STATUS, false);
                    }
                });
                updateStatusViewHolder.rivIcon.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        ((AlbusMainActivity) RecyclerUpdatesAdapter.this.mContext).goToProfile((String) view.getTag());
                    }
                });
                return updateStatusViewHolder;
            case VT_UPDATE_NAME /*3*/:
            case VT_UPDATE_NAME_UP /*4*/:
            case VT_UPDATE_NAME_DOWN /*5*/:
                updateStatusViewHolder = new UpdateNameViewHolder(LayoutInflater.from(context).inflate(R.layout.item_updates_name, viewGroup, false));
                updateStatusViewHolder.llContainer.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        Update update = (Update) view.getTag();
                        if (update.getUpdateAction() == UpdateRecent.SELFUSERNAMEUPDT.ordinal()) {
                            ((AlbusMainActivity) RecyclerUpdatesAdapter.this.mContext).goToProfile(CatfishService.getUserPIN());
                        } else {
                            RecyclerUpdatesAdapter.this.showItemUpdateDialog(update);
                        }
                    }
                });
                updateStatusViewHolder.rivIcon.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        ((AlbusMainActivity) RecyclerUpdatesAdapter.this.mContext).goToProfile((String) view.getTag());
                    }
                });
                return updateStatusViewHolder;
            case VT_UPDATE_PHOTO /*6*/:
            case VT_UPDATE_PHOTO_UP /*7*/:
            case VT_UPDATE_PHOTO_DOWN /*8*/:
                updateStatusViewHolder = new UpdatePhotoViewHolder(LayoutInflater.from(context).inflate(R.layout.item_updates_photo, viewGroup, false));
                updateStatusViewHolder.civChangePP.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        Update update = (Update) view.getTag();
                        Intent intent = new Intent(RecyclerUpdatesAdapter.this.mContext, ProfilesImageViewerActivity.class);
                        intent.putExtra(HTTP.IDENTITY_CODING, RecyclerUpdatesAdapter.VT_UPDATE_STATUS);
                        File userProfilePhotoFile = update.getUpdateAction() == UpdateRecent.SELFPHOTOUPDT.ordinal() ? CatfishPhotoStorage.getUserProfilePhotoFile(RecyclerUpdatesAdapter.this.mContext) : CatfishPhotoStorage.getFriendProfilePhotoFile(RecyclerUpdatesAdapter.this.mContext, update.getRecipientID());
                        if (update.getRecipientID().isEmpty()) {
                            intent.putExtra(CatfishDataStorage.NIC_NAME, ((AlbusMainActivity) RecyclerUpdatesAdapter.this.mContext).getMyName().toString());
                        } else {
                            intent.putExtra(CatfishDataStorage.NIC_NAME, update.getRecipientName());
                        }
                        if (userProfilePhotoFile != null) {
                            intent.putExtra(AlbusModelObject.IMAGE, userProfilePhotoFile.getAbsolutePath());
                            ((AlbusMainActivity) RecyclerUpdatesAdapter.this.mContext).startActivityForResult(intent, 23);
                            return;
                        }
                        Log.e(RecyclerUpdatesAdapter.TAG, "NULL PHOTO FRIEND");
                    }
                });
                updateStatusViewHolder.llContainer.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        Update update = (Update) view.getTag();
                        if (update == null) {
                            return;
                        }
                        if (update.getUpdateAction() == UpdateRecent.SELFPHOTOUPDT.ordinal()) {
                            ((AlbusMainActivity) RecyclerUpdatesAdapter.this.mContext).goToProfile(CatfishService.getUserPIN());
                        } else {
                            RecyclerUpdatesAdapter.this.showItemUpdateDialog(update);
                        }
                    }
                });
                updateStatusViewHolder.rivIcon.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        ((AlbusMainActivity) RecyclerUpdatesAdapter.this.mContext).goToProfile((String) view.getTag());
                    }
                });
                return updateStatusViewHolder;
            case VT_UPDATE_ACCEPT_FRIEND /*9*/:
            case VT_UPDATE_ACCEPT_FRIEND_UP /*10*/:
            case VT_UPDATE_ACCEPT_FRIEND_DOWN /*11*/:
            case VT_OTHER /*12*/:
                updateStatusViewHolder = new AcceptFriendViewHolder(LayoutInflater.from(context).inflate(R.layout.item_updates_accept_friend, viewGroup, false));
                updateStatusViewHolder.llContainer.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        Update update = (Update) view.getTag();
                        if (update != null) {
                            RecyclerUpdatesAdapter.this.showItemUpdateDialog(update);
                        }
                    }
                });
                updateStatusViewHolder.rivIcon.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        ((AlbusMainActivity) RecyclerUpdatesAdapter.this.mContext).goToProfile((String) view.getTag());
                    }
                });
                return updateStatusViewHolder;
            case VT_VERIFIED_VIEW /*15*/:
                updateStatusViewHolder = new VerifiedViewHolder(LayoutInflater.from(context).inflate(R.layout.item_updates_header, viewGroup, false));
                updateStatusViewHolder.btnVerify.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        ((AlbusMainActivity) RecyclerUpdatesAdapter.this.mContext).verifyAccount();
                    }
                });
                return updateStatusViewHolder;
            default:
                throw new RuntimeException("ERROR View type:" + i);
        }
    }

    public void refresh() {
        SmiledText.clearAllSmiledTextCache();
        notifyDataSetChanged();
    }
}
