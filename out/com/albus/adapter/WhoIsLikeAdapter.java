package com.albus.adapter;

import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.albus.activity.ChatGroupConvActivity;
import com.albus.activity.MenuActivity;
import com.albus.activity.ProfilesFriendActivity;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.AlbusDialog.OnAddButtonListener;
import com.albus.dialog.AlbusDialogInterface;
import com.albus.imagespan.SmiledText;
import com.albus.media.UserPhotoLoader;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.view.CircleImageView;
import com.catfiz.R;
import com.catfiz.base.Catfiz;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishService;
import com.catfiz.util.Log;
import java.util.List;
import org.apache.http.protocol.HTTP;

public class WhoIsLikeAdapter extends BaseAdapter {
    private static final String TAG = "WhoIsLikeAdapter";
    private Context mContext;
    private List mData = null;
    private UserPhotoLoader mUserPhotoLoader = null;

    class AddDialog implements AlbusDialogInterface {
        private AddDialog() {
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            AlbusDialog.setOnAddButtonClicked(new OnAddButtonListener() {
                public void onAddButtonClicked(String str) {
                    ((MenuActivity) WhoIsLikeAdapter.this.mContext).addFriend(str);
                    WhoIsLikeAdapter.this.notifyDataSetChanged();
                }
            });
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    class ViewHolder {
        private Button btnAdd;
        private LinearLayout llContainer;
        private LinearLayout llMenu;
        private User mUser;
        private CircleImageView rivIcon;
        private TextView tvName;
        private TextView tvValue;

        private ViewHolder() {
        }
    }

    class WhoLikesDialog implements AlbusDialogInterface {
        private User mUser;

        public WhoLikesDialog(User user) {
            this.mUser = user;
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, final DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            TextView textView = (TextView) view.findViewById(R.id.tv_menu_title);
            TextView textView2 = (TextView) view.findViewById(R.id.tv_menu_profile);
            TextView textView3 = (TextView) view.findViewById(R.id.tv_menu_chat);
            TextView textView4 = (TextView) view.findViewById(R.id.tv_menu_set_admin);
            ((TextView) view.findViewById(R.id.tv_menu_remove_member)).setVisibility(8);
            textView4.setVisibility(8);
            textView.setText(this.mUser.getName());
            textView2.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    dialogFragment.dismiss();
                    User matchFriendData = Catfiz.matchFriendData(WhoLikesDialog.this.mUser.getId());
                    Log.d(WhoIsLikeAdapter.TAG, "goToProfile:" + matchFriendData.getName() + "," + matchFriendData.getStatusSequence() + "," + matchFriendData.getStatusdate());
                    Intent intent = new Intent(WhoIsLikeAdapter.this.mContext, ProfilesFriendActivity.class);
                    intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, matchFriendData.getId());
                    intent.putExtra(CatfishDataStorage.NIC_NAME, matchFriendData.getName());
                    intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, matchFriendData.getStatusSequence());
                    intent.putExtra(AlbusModelObject.STATUS_LIKE, matchFriendData.getStatusLike());
                    intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, matchFriendData.isMeLikeThisStatus());
                    intent.putExtra(HTTP.IDENTITY_CODING, 43);
                    WhoIsLikeAdapter.this.mContext.startActivity(intent);
                }
            });
            textView3.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    dialogFragment.dismiss();
                    Intent intent = new Intent(WhoIsLikeAdapter.this.mContext, ChatGroupConvActivity.class);
                    intent.putExtra(AlbusModelObject.PAGE, 1);
                    intent.putExtra(HTTP.IDENTITY_CODING, 14);
                    intent.putExtra(CatfishDataStorage.NIC_NAME, WhoLikesDialog.this.mUser.getName());
                    intent.putExtra(AlbusModelObject.FRIEND_ID, WhoLikesDialog.this.mUser.getId());
                    WhoIsLikeAdapter.this.mContext.startActivity(intent);
                }
            });
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    public WhoIsLikeAdapter(Context context, List list, UserPhotoLoader userPhotoLoader) {
        this.mData = list;
        this.mContext = context;
        this.mUserPhotoLoader = userPhotoLoader;
        this.mUserPhotoLoader.setLoadingImage(R.drawable.df_pict);
    }

    public int getCount() {
        return this.mData.size();
    }

    public Object getItem(int i) {
        return this.mData.get(i);
    }

    public long getItemId(int i) {
        return (long) this.mData.indexOf(getItem(i));
    }

    public View getView(int i, View view, ViewGroup viewGroup) {
        ViewHolder viewHolder;
        if (view == null) {
            view = ((LayoutInflater) this.mContext.getSystemService("layout_inflater")).inflate(R.layout.item_member_button, null);
            viewHolder = new ViewHolder();
            viewHolder.mUser = null;
            viewHolder.llContainer = (LinearLayout) view.findViewById(R.id.ll_container);
            viewHolder.rivIcon = (CircleImageView) view.findViewById(R.id.riv_img);
            viewHolder.tvName = (TextView) view.findViewById(R.id.tv_name);
            viewHolder.btnAdd = (Button) view.findViewById(R.id.btn_action);
            viewHolder.tvValue = (TextView) view.findViewById(R.id.tv_value);
            viewHolder.tvValue.setVisibility(8);
            viewHolder.btnAdd.setText(this.mContext.getString(R.string.btn_add));
            this.mUserPhotoLoader.setLoadingImage(R.drawable.df_pict);
            viewHolder.llContainer.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    ViewHolder viewHolder = (ViewHolder) view.getTag();
                    if (viewHolder == null) {
                        Log.e(WhoIsLikeAdapter.TAG, "fail to get holderview object");
                        return;
                    }
                    User access$100 = viewHolder.mUser;
                    if (access$100 == null) {
                        Log.e(WhoIsLikeAdapter.TAG, "user data is NULL");
                        return;
                    }
                    Log.d(WhoIsLikeAdapter.TAG, "User:" + access$100.getName());
                    if (access$100.getId().equals(CatfishService.getUserPIN())) {
                        AlbusUtils.setToastView(WhoIsLikeAdapter.this.mContext, WhoIsLikeAdapter.this.mContext.getString(R.string.your_self));
                    } else if (access$100.isMyFriend()) {
                        r1 = new Bundle();
                        r1.putInt(AlbusModelObject.DIALOG, 33);
                        AlbusDialog.showDialog(33, new WhoLikesDialog(access$100), WhoIsLikeAdapter.this.mContext, r1, ((MenuActivity) WhoIsLikeAdapter.this.mContext).getSupportFragmentManager());
                    } else {
                        r1 = new Bundle();
                        r1.putString(CatfishDataStorage.NIC_NAME, access$100.getName());
                        r1.putString(CatfishRESTAPI.CFCOMPACT_STICKERID, access$100.getId());
                        r1.putInt(AlbusModelObject.DIALOG, 9);
                        AlbusDialog.showDialog(9, new AddDialog(), WhoIsLikeAdapter.this.mContext, r1, ((MenuActivity) WhoIsLikeAdapter.this.mContext).getSupportFragmentManager());
                    }
                }
            });
            viewHolder.btnAdd.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    ((MenuActivity) WhoIsLikeAdapter.this.mContext).addFriend(((User) view.getTag()).getId());
                    WhoIsLikeAdapter.this.notifyDataSetChanged();
                }
            });
            view.setTag(viewHolder);
        } else {
            viewHolder = (ViewHolder) view.getTag();
        }
        if (this.mData.size() <= 0) {
            Log.v(TAG, "no Data");
        } else {
            User user = (User) this.mData.get(i);
            viewHolder.tvName.setText(SmiledText.getSmiledText(this.mContext, user.getName(), viewHolder.tvName));
            if (this.mUserPhotoLoader != null) {
                if (user.getId().equals(CatfishService.getUserPIN())) {
                    this.mUserPhotoLoader.loadUserPhoto(user.getId(), viewHolder.rivIcon);
                } else {
                    this.mUserPhotoLoader.loadFriendPhoto(user.getId(), viewHolder.rivIcon);
                }
            }
            if (user.isMyFriend()) {
                viewHolder.btnAdd.setVisibility(8);
            } else {
                viewHolder.btnAdd.setVisibility(0);
            }
            viewHolder.btnAdd.setTag(user);
            viewHolder.mUser = user;
        }
        return view;
    }
}
