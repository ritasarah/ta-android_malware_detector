package com.albus.adapter;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.net.Uri;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.TextView;
import com.albus.activity.AlbusMainActivity;
import com.albus.activity.ProfilesGroupActivity;
import com.albus.imagespan.SmiledText;
import com.albus.media.GroupPhotoLoader;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.util.ListItemModel;
import com.albus.util.QuoteUtils;
import com.albus.view.CircleImageView;
import com.catfiz.R;
import com.catfiz.adapter.CatfizBaseAdapter;
import com.catfiz.model.FileMetaInfo;
import com.catfiz.model.Group;
import com.catfiz.model.Message;
import com.catfiz.model.Quote;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.CatfishService;
import com.catfiz.util.Log;
import com.catfiz.util.MediaFilePath;
import com.catfiz.util.Utils;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;

public class GroupListAdapter extends CatfizBaseAdapter {
    private static final String TAG = "GroupListAdapter";
    private Context mContext = null;
    private List mData = null;
    private Group mGroup = null;
    private GroupPhotoLoader mGroupPhotoLoader = null;
    private int mLayoutId = 0;
    private HashMap mSelection = null;
    private int mTabsTitle = 0;
    public boolean mWaitLoad = false;

    /* synthetic */ class AnonymousClass3 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus = new int[MessageDeliveryStatus.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus[MessageDeliveryStatus.SENT.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus[MessageDeliveryStatus.BCASTSENT.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus[MessageDeliveryStatus.QUEUEING.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus[MessageDeliveryStatus.BCASTQUEUE.ordinal()] = 4;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus[MessageDeliveryStatus.DROP.ordinal()] = 5;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus[MessageDeliveryStatus.BCASTFAIL.ordinal()] = 6;
            } catch (NoSuchFieldError e6) {
            }
        }
    }

    class ViewHolder {
        private CheckBox checkbox;
        private ImageView ivStatus;
        private ImageView ivStatusTyping;
        private CircleImageView rivIcon;
        private TextView tvChat;
        private TextView tvDay;
        private TextView tvName;
        private TextView tvSumNewChat;

        private ViewHolder() {
        }
    }

    public GroupListAdapter(Context context, List list, GroupPhotoLoader groupPhotoLoader, int i, int i2) {
        this.mContext = context;
        this.mData = list;
        this.mLayoutId = i;
        this.mTabsTitle = i2;
        this.mGroupPhotoLoader = groupPhotoLoader;
        this.mSelection = new HashMap();
    }

    public void clear() {
        this.mSelection = new HashMap();
        notifyDataSetChanged();
    }

    public void deleteSelection() {
        int size = this.mData.size() - 1;
        while (size >= 0) {
            if (this.mLayoutId == R.layout.item_checkbox ? ((Group) this.mData.get(size)).isSelected() : isPositionChecked(size)) {
                Log.d(TAG, "ini adl index ke" + size + "yg mau di delete");
                this.mData.remove(size);
            }
            size--;
        }
        notifyDataSetChanged();
    }

    public int getCount() {
        return !getAdapterVisibility() ? 0 : this.mData.size();
    }

    public Set getCurrentCheckedPosition() {
        return this.mSelection.keySet();
    }

    public String getId(int i) {
        return ((Group) this.mData.get(i)).getGroupID();
    }

    public Object getItem(int i) {
        return this.mData.get(i);
    }

    public long getItemId(int i) {
        return (long) this.mData.indexOf(getItem(i));
    }

    public View getView(int i, View view, ViewGroup viewGroup) {
        ViewHolder viewHolder;
        String str = "";
        if (view == null) {
            view = ((LayoutInflater) this.mContext.getSystemService("layout_inflater")).inflate(this.mLayoutId, null);
            viewHolder = new ViewHolder();
            viewHolder.tvName = (TextView) view.findViewById(R.id.tv_name);
            viewHolder.tvDay = (TextView) view.findViewById(R.id.tv_day);
            viewHolder.tvChat = (TextView) view.findViewById(R.id.tv_chat);
            viewHolder.ivStatus = (ImageView) view.findViewById(R.id.iv_status_msg);
            viewHolder.ivStatusTyping = (ImageView) view.findViewById(R.id.iv_status_typing);
            viewHolder.ivStatus = (ImageView) view.findViewById(R.id.iv_status_msg);
            viewHolder.rivIcon = (CircleImageView) view.findViewById(R.id.riv_img2);
            viewHolder.tvSumNewChat = (TextView) view.findViewById(R.id.tv_sum_chat);
            viewHolder.rivIcon.setVisibility(0);
            viewHolder.ivStatusTyping.setVisibility(8);
            if (this.mLayoutId == R.layout.item_checkbox) {
                viewHolder.checkbox = (CheckBox) view.findViewById(R.id.cb_click);
                view.setTag(viewHolder);
                viewHolder.checkbox.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        CheckBox checkBox = (CheckBox) view;
                        ListItemModel listItemModel = (ListItemModel) checkBox.getTag();
                        AlbusUtils.setToastView(GroupListAdapter.this.mContext, "Clicked on Checkbox : " + checkBox.getTag() + " isChecked()=" + checkBox.isChecked());
                        listItemModel.setSelected(checkBox.isChecked());
                    }
                });
            }
            if (this.mTabsTitle != 100) {
                viewHolder.rivIcon.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        Group group = (Group) view.getTag();
                        Log.d(GroupListAdapter.TAG, "Profile group:" + group.getName() + " " + group.getNotes());
                        Intent intent = new Intent(GroupListAdapter.this.mContext, ProfilesGroupActivity.class);
                        intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, group.getGroupID());
                        intent.putExtra(CatfishDataStorage.NIC_NAME, group.getName());
                        intent.putExtra(AlbusModelObject.NOTES, group.getNotes());
                        intent.putExtra(AlbusModelObject.OWNER, group.getOwner().getId());
                        intent.putExtra(AlbusModelObject.IMAGE, group.getImagePath());
                        Log.d(GroupListAdapter.TAG, "image path : " + group.getImagePath());
                        Log.d(GroupListAdapter.TAG, "owner : " + group.getOwner().getId());
                        ((AlbusMainActivity) GroupListAdapter.this.mContext).startActivity(intent);
                    }
                });
            }
            view.setTag(viewHolder);
        } else {
            viewHolder = (ViewHolder) view.getTag();
        }
        if (this.mData.size() <= 0) {
            Log.d(TAG, "no data");
        } else {
            boolean z;
            this.mGroup = (Group) this.mData.get(i);
            Message lastMessage = this.mGroup.getLastMessage();
            viewHolder.tvName.setText(SmiledText.getSmiledText(this.mContext, this.mGroup.getName(), viewHolder.tvName));
            if (lastMessage != null) {
                String str2;
                if (lastMessage.getSender().getId() != null) {
                    if (lastMessage.getSender().getId().equals(CatfishService.getUserPIN())) {
                        str2 = this.mContext.getString(R.string.You) + ": ";
                    } else if (lastMessage.getSender().getName() != null) {
                        str2 = lastMessage.getSender().getName() + ": ";
                    }
                    if (lastMessage.getType() != MessageType.PERSONCONTACT.ordinal()) {
                        viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.contact_sent), viewHolder.tvChat));
                        str = str2;
                    } else if (lastMessage.getType() != MessageType.BCASTCONFERENCE_LONGMESSAGE.ordinal() || lastMessage.getType() == MessageType.LONG_MESSAGE.ordinal()) {
                        viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.long_message), viewHolder.tvChat));
                        str = str2;
                    } else if (lastMessage.getType() == MessageType.QUOTE.ordinal()) {
                        if (QuoteUtils.isQuoteMessage(lastMessage.getText())) {
                            Quote quoteJSONStringDecoder = QuoteUtils.quoteJSONStringDecoder(lastMessage.getText());
                            if (quoteJSONStringDecoder != null) {
                                viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + (quoteJSONStringDecoder.getMyMessage() + " " + '\"' + quoteJSONStringDecoder.getQuoteMessage() + '\"'), viewHolder.tvChat));
                            } else {
                                viewHolder.tvChat.setText("");
                            }
                        } else {
                            viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + lastMessage.getText(), viewHolder.tvChat));
                        }
                        str = str2;
                    } else if (lastMessage.getType() == MessageType.STIKER_MESSAGE.ordinal()) {
                        viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.sticker_sent), viewHolder.tvChat));
                        str = str2;
                    } else if (lastMessage.getType() == MessageType.SHARE_SLINK_AT_POOL.ordinal()) {
                        viewHolder.tvChat.setText(str2 + this.mContext.getString(R.string.fizzlink_sent));
                        str = str2;
                    } else {
                        str = lastMessage.getText().toLowerCase(Locale.US);
                        if (str.endsWith(".amr")) {
                            viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.voice_sent), viewHolder.tvChat));
                            str = str2;
                        } else if (str.endsWith(".mp3") || str.endsWith(".ogg") || str.endsWith(".flac") || str.endsWith(".wav") || str.endsWith(".wma")) {
                            viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.music_sent), viewHolder.tvChat));
                            str = str2;
                        } else if (str.endsWith(".png") || str.endsWith(".jpg") || str.endsWith(".jpeg") || str.endsWith(".bmp") || str.endsWith(".gif")) {
                            viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.image_sent), viewHolder.tvChat));
                            str = str2;
                        } else if (str.endsWith(".3gp") || str.endsWith(".mp4") || str.endsWith(".avi")) {
                            viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.video_sent), viewHolder.tvChat));
                            str = str2;
                        } else if (str.split("::")[0].endsWith(".amr") || str.split(":")[0].endsWith(".amr")) {
                            viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.voice_sent), viewHolder.tvChat));
                            str = str2;
                        } else if (str.split("::")[0].endsWith(".mp3") || str.split("::")[0].endsWith(".ogg") || str.split("::")[0].endsWith(".flac") || str.split("::")[0].endsWith(".wav") || str.split("::")[0].endsWith(".wma")) {
                            viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.music_sent), viewHolder.tvChat));
                            str = str2;
                        } else if (str.split("::")[0].endsWith(".png") || str.split("::")[0].endsWith(".jpg") || str.split("::")[0].endsWith(".jpeg") || str.split("::")[0].endsWith(".bmp") || str.split("::")[0].endsWith(".gif")) {
                            viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.image_sent), viewHolder.tvChat));
                            str = str2;
                        } else if (str.split("::")[0].endsWith(".3gp") || str.split("::")[0].endsWith(".mp4") || str.split("::")[0].endsWith(".avi")) {
                            viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.video_sent), viewHolder.tvChat));
                            str = str2;
                        } else if (str.contains("voice message")) {
                            viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.voice_sent), viewHolder.tvChat));
                            str = str2;
                        } else if (str.contains("topic_image")) {
                            viewHolder.tvChat.setText(this.mContext.getString(R.string.group_photo_update));
                            str = str2;
                        } else if (str.contains("file:")) {
                            viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.file_sent), viewHolder.tvChat));
                            str = str2;
                        } else if (FileMetaInfo.isFileMetaInfoValid(lastMessage.getText())) {
                            switch (Utils.getFileTypeFromPath(FileMetaInfo.metaInfoBuilder(lastMessage.getText()).getFileName())) {
                                case e.b /*1*/:
                                    viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.image_sent), viewHolder.tvChat));
                                    break;
                                case e.c /*2*/:
                                    viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.music_sent), viewHolder.tvChat));
                                    break;
                                case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                                    viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.voice_sent), viewHolder.tvChat));
                                    break;
                                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                                    viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.video_sent), viewHolder.tvChat));
                                    break;
                                default:
                                    viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.file_sent), viewHolder.tvChat));
                                    break;
                            }
                            str = str2;
                        } else if (lastMessage.getType() != MessageType.BCASTCONFERENCE_VIDEO.ordinal()) {
                            viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + lastMessage.getText(), viewHolder.tvChat));
                            str = str2;
                        } else if (str.contains("video:") && (str.contains(".mp3") || str.contains(".ogg") || str.contains(".flac") || str.contains(".wav") || str.contains(".wma"))) {
                            viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.music_sent), viewHolder.tvChat));
                            str = str2;
                        } else {
                            viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.video_sent), viewHolder.tvChat));
                            str = str2;
                        }
                    }
                }
                str2 = str;
                if (lastMessage.getType() != MessageType.PERSONCONTACT.ordinal()) {
                    if (lastMessage.getType() != MessageType.BCASTCONFERENCE_LONGMESSAGE.ordinal()) {
                    }
                    viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.long_message), viewHolder.tvChat));
                    str = str2;
                } else {
                    viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str2 + this.mContext.getString(R.string.contact_sent), viewHolder.tvChat));
                    str = str2;
                }
            }
            if (this.mGroup.getLastActivity() == null || this.mGroup.getLastActivity().equals("0")) {
                viewHolder.tvDay.setVisibility(4);
            } else if (lastMessage.getText() == null || lastMessage.getText().equals("")) {
                viewHolder.tvDay.setVisibility(4);
            } else {
                viewHolder.tvDay.setVisibility(0);
                viewHolder.tvDay.setText(AlbusUtils.getLastTimeActivities(this.mGroup.getLastActivity(), this.mContext));
            }
            if (this.mGroupPhotoLoader != null) {
                Object path = MediaFilePath.getPath((Activity) this.mContext, Uri.parse(this.mGroup.getImageThumbURI()));
                if (path.isEmpty()) {
                    path = this.mGroup.getImagePath();
                }
                if (this.mGroupPhotoLoader.loadImage(path, viewHolder.rivIcon, !this.mWaitLoad) != 0) {
                    addPendingUpdate();
                }
            }
            viewHolder.rivIcon.setTag(this.mGroup);
            if (this.mLayoutId == R.layout.item_checkbox) {
                viewHolder.checkbox.setChecked(this.mGroup.isSelected());
                viewHolder.checkbox.setTag(this.mGroup);
                if (this.mSelection.get(Integer.valueOf(i)) != null) {
                    viewHolder.checkbox.setChecked(true);
                }
            } else if (this.mSelection.get(Integer.valueOf(i)) != null) {
                view.setBackgroundResource(R.drawable.bg_selected);
            } else {
                view.setBackgroundResource(R.color.transparent);
            }
            switch (AnonymousClass3.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus[MessageDeliveryStatus.values()[this.mGroup.getLastDeliveryStatus()].ordinal()]) {
                case e.b /*1*/:
                case e.c /*2*/:
                    Log.d(TAG, "--message delivery status-- sent");
                    viewHolder.ivStatus.setImageResource(R.drawable.ic_sent);
                    z = false;
                    break;
                case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                    Log.d(TAG, "--message delivery status-- sending");
                    viewHolder.ivStatus.setImageResource(R.drawable.ic_sending);
                    z = false;
                    break;
                case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                    Log.d(TAG, "--message delivery status-- fail/cancel");
                    viewHolder.ivStatus.setImageResource(R.drawable.ic_notsent);
                    viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, str + this.mContext.getString(R.string.upload_canceled), viewHolder.tvChat));
                    z = false;
                    break;
                default:
                    Log.d(TAG, "--message delivery status-- default:" + this.mGroup.getLastDeliveryStatus());
                    z = true;
                    break;
            }
            if (this.mGroup.getUnreadMessagescount() <= 0 || this.mGroup.getMessagesCount() <= 0) {
                viewHolder.tvChat.setTypeface(null, 0);
                viewHolder.tvDay.setTypeface(null, 0);
                viewHolder.tvChat.setTextColor(Color.parseColor("#89000000"));
                viewHolder.tvName.setTypeface(null, 0);
                viewHolder.tvSumNewChat.setVisibility(8);
                if (z) {
                    viewHolder.ivStatus.setVisibility(8);
                } else {
                    viewHolder.ivStatus.setVisibility(0);
                }
            } else {
                int unreadMessagescount = this.mGroup.getUnreadMessagescount();
                str = "";
                CharSequence valueOf = unreadMessagescount > 99 ? "99+" : String.valueOf(unreadMessagescount);
                viewHolder.tvChat.setTypeface(null, 1);
                viewHolder.tvDay.setTypeface(null, 1);
                viewHolder.tvChat.setTextColor(Color.parseColor("#dd000000"));
                viewHolder.tvName.setTypeface(null, 1);
                viewHolder.tvSumNewChat.setVisibility(0);
                viewHolder.tvSumNewChat.setText(valueOf);
                viewHolder.ivStatus.setVisibility(8);
            }
            if (this.mGroup.getMessagesCount() <= 0) {
                viewHolder.tvChat.setText(SmiledText.getSmiledText(this.mContext, this.mGroup.getNotes(), viewHolder.tvChat));
                viewHolder.ivStatus.setVisibility(8);
            }
        }
        return view;
    }

    public boolean isPositionChecked(int i) {
        Boolean bool = (Boolean) this.mSelection.get(Integer.valueOf(i));
        Log.v("checked", i + " result = " + bool);
        return bool == null ? false : bool.booleanValue();
    }

    public void removeSelection(int i) {
        this.mSelection.remove(Integer.valueOf(i));
        notifyDataSetChanged();
    }

    public void setNewSelection(int i, boolean z) {
        this.mSelection.put(Integer.valueOf(i), Boolean.valueOf(z));
        notifyDataSetChanged();
    }
}
