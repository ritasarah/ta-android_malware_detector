package com.albus.adapter;

import android.app.Activity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.albus.activity.CustomActionBarPageActivity;
import com.albus.imagespan.SmiledText;
import com.albus.media.UserPhotoLoader;
import com.albus.view.CircleImageView;
import com.catfiz.R;
import com.catfiz.model.User;
import com.catfiz.util.Log;
import java.util.HashMap;
import java.util.List;
import org.json.JSONArray;

public class SelectFriendsAdapter extends BaseAdapter {
    private static final String TAG = "SelectFriendsAdapter";
    private Activity mActivity = null;
    private List mData = null;
    private String mDuplicate = null;
    private List mFriendsSelected = null;
    private ViewHolder mHolder = null;
    private int mIdentity = -1;
    private boolean mIsSelectAll = false;
    private boolean mIsUnSelectAll = false;
    private int mPage = -1;
    private HashMap mSelectedData = null;
    private long mSequence = -1;
    private UserPhotoLoader mUserPhotoLoader = null;

    class ViewHolder {
        private CheckBox checkbox;
        private LinearLayout llItem;
        private CircleImageView rivIcon;
        private TextView tvName;
        private TextView tvStatus;

        private ViewHolder() {
        }
    }

    public SelectFriendsAdapter(Activity activity, List list, List list2, UserPhotoLoader userPhotoLoader) {
        this.mActivity = activity;
        this.mData = list;
        this.mFriendsSelected = list2;
        this.mPage = ((CustomActionBarPageActivity) this.mActivity).getPage();
        this.mIdentity = ((CustomActionBarPageActivity) this.mActivity).getIdentity();
        this.mSequence = ((CustomActionBarPageActivity) this.mActivity).getSequence();
        this.mUserPhotoLoader = userPhotoLoader;
    }

    public int getCount() {
        return this.mData.size();
    }

    public Object getItem(int i) {
        return Integer.valueOf(i);
    }

    public long getItemId(int i) {
        return (long) i;
    }

    public JSONArray getSelectionId() {
        JSONArray jSONArray = new JSONArray();
        for (int i = 0; i < this.mFriendsSelected.size(); i++) {
            jSONArray.put(((User) this.mFriendsSelected.get(i)).getId().toString());
        }
        return jSONArray;
    }

    public JSONArray getSelectionName() {
        if (this.mFriendsSelected == null) {
            return new JSONArray();
        }
        Log.d(TAG, "get name on mfriend selescted length : " + this.mFriendsSelected.size());
        JSONArray jSONArray = new JSONArray();
        for (int i = 0; i < this.mFriendsSelected.size(); i++) {
            User user = (User) this.mFriendsSelected.get(i);
            if (user != null) {
                String name = user.getName();
                if (!(name == null || name.isEmpty())) {
                    jSONArray.put(name);
                }
            }
        }
        return jSONArray;
    }

    public View getView(int i, View view, ViewGroup viewGroup) {
        this.mHolder = new ViewHolder();
        User user = (User) this.mData.get(i);
        if (view == null) {
            view = ((LayoutInflater) this.mActivity.getSystemService("layout_inflater")).inflate(R.layout.item_select_friend, this.mHolder.llItem);
            this.mHolder.rivIcon = (CircleImageView) view.findViewById(R.id.riv_img);
            this.mHolder.tvName = (TextView) view.findViewById(R.id.tv_name);
            this.mHolder.tvStatus = (TextView) view.findViewById(R.id.tv_status);
            this.mHolder.checkbox = (CheckBox) view.findViewById(R.id.cb_item_list);
            this.mHolder.checkbox.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    Log.d(SelectFriendsAdapter.TAG, "onclick checkbox");
                    CheckBox checkBox = (CheckBox) view;
                    User user = (User) view.getTag();
                    if (SelectFriendsAdapter.this.mPage == 33) {
                        SelectFriendsAdapter.this.mIsUnSelectAll = false;
                        user.setSelected(true);
                        if (SelectFriendsAdapter.this.mSequence == -1) {
                            ((CustomActionBarPageActivity) SelectFriendsAdapter.this.mActivity).callPromoteSelectedFriend(user);
                            return;
                        }
                        ((CustomActionBarPageActivity) SelectFriendsAdapter.this.mActivity).callPromoteSelectedFriend(user, SelectFriendsAdapter.this.mSequence, ((CustomActionBarPageActivity) SelectFriendsAdapter.this.mActivity).getId());
                    } else if (user.isSelected()) {
                        checkBox.setBackgroundResource(R.color.transparent);
                        Log.d(SelectFriendsAdapter.TAG, "value of selected id which is remove = " + user.getId());
                        SelectFriendsAdapter.this.removeSelected(user);
                        Log.d(SelectFriendsAdapter.TAG, "value of selected friend after delete= " + SelectFriendsAdapter.this.mFriendsSelected.size());
                        SelectFriendsAdapter.this.mIsSelectAll = false;
                        ((CustomActionBarPageActivity) SelectFriendsAdapter.this.mActivity).SelectAll();
                        user.setSelected(false);
                        ((CustomActionBarPageActivity) SelectFriendsAdapter.this.mActivity).setRemovedId(user.getId());
                        if (SelectFriendsAdapter.this.mPage != 54) {
                        }
                    } else {
                        Log.d(SelectFriendsAdapter.TAG, "value of selected id which is adding = " + user.getId());
                        SelectFriendsAdapter.this.mFriendsSelected.add(user);
                        Log.d(SelectFriendsAdapter.TAG, "value of selected friend after delete : " + SelectFriendsAdapter.this.mFriendsSelected.size());
                        checkBox.setBackgroundResource(R.drawable.bg_selected);
                        ((CustomActionBarPageActivity) SelectFriendsAdapter.this.mActivity).callBtnActionSelectFriend(SelectFriendsAdapter.this.mFriendsSelected);
                        SelectFriendsAdapter.this.mIsUnSelectAll = false;
                        if (SelectFriendsAdapter.this.mFriendsSelected.size() == SelectFriendsAdapter.this.getCount()) {
                            ((CustomActionBarPageActivity) SelectFriendsAdapter.this.mActivity).UnselectAll();
                        }
                        user.setSelected(true);
                    }
                }
            });
            view.setTag(this.mHolder);
        } else {
            this.mHolder = (ViewHolder) view.getTag();
        }
        if (this.mData.size() <= 0) {
            Log.d(TAG, "No Data");
        } else {
            if (this.mUserPhotoLoader != null) {
                this.mUserPhotoLoader.loadFriendPhoto(user.getId(), this.mHolder.rivIcon);
            }
            this.mHolder.tvName.setText(SmiledText.getSmiledText(this.mActivity, user.getName(), this.mHolder.tvName));
            this.mHolder.tvStatus.setText(SmiledText.getSmiledText(this.mActivity, user.getStatus(), this.mHolder.tvStatus));
            if (this.mIsSelectAll) {
                this.mHolder.checkbox.setBackgroundResource(R.drawable.bg_selected);
                this.mHolder.checkbox.setChecked(true);
            }
            if (this.mIsUnSelectAll) {
                this.mHolder.checkbox.setBackgroundResource(R.color.transparent);
                this.mHolder.checkbox.setChecked(false);
            }
            if (user.isSelected()) {
                this.mHolder.checkbox.setBackgroundResource(R.drawable.bg_selected);
            } else {
                this.mHolder.checkbox.setBackgroundResource(R.color.transparent);
            }
            this.mHolder.checkbox.setTag(user);
        }
        return view;
    }

    public void removeAllSelected() {
        this.mFriendsSelected.clear();
        for (int i = 0; i < getCount(); i++) {
            ((User) this.mData.get(i)).setSelected(false);
        }
        ((CustomActionBarPageActivity) this.mActivity).callBtnActionSelectFriend(this.mFriendsSelected);
        this.mIsSelectAll = false;
        this.mIsUnSelectAll = true;
        notifyDataSetChanged();
    }

    public void removeSelected(User user) {
        for (int i = 0; i < this.mFriendsSelected.size(); i++) {
            if (((User) this.mFriendsSelected.get(i)).getId().equals(user.getId())) {
                this.mFriendsSelected.remove(i);
            }
        }
        Log.d(TAG, "sum of selected friend after remove : " + this.mFriendsSelected.size());
        ((CustomActionBarPageActivity) this.mActivity).callBtnActionSelectFriend(this.mFriendsSelected);
    }

    public void setAllSelected() {
        this.mFriendsSelected.clear();
        for (int i = 0; i < getCount(); i++) {
            if (!((User) this.mData.get(i)).isSelected()) {
                ((User) this.mData.get(i)).setSelected(true);
            }
            this.mFriendsSelected.add(this.mData.get(i));
        }
        ((CustomActionBarPageActivity) this.mActivity).callBtnActionSelectFriend(this.mFriendsSelected);
        this.mIsSelectAll = true;
        this.mIsUnSelectAll = false;
        notifyDataSetChanged();
    }
}
