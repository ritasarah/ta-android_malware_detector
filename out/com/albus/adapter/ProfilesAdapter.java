package com.albus.adapter;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.net.Uri;
import android.support.v7.widget.RecyclerView.Adapter;
import android.support.v7.widget.RecyclerView.ViewHolder;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.AnimationUtils;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.SeekBar;
import android.widget.TextView;
import com.albus.activity.CommentActivity;
import com.albus.activity.CustomActionBarPageActivity;
import com.albus.activity.FizzlinkFileViewerActivity;
import com.albus.activity.MenuActivity;
import com.albus.activity.ProfilesActivityCoba;
import com.albus.activity.ProfilesImageViewerActivity;
import com.albus.cfspan.CFLinkify;
import com.albus.imagespan.SmiledText;
import com.albus.media.ThumbnailLoader;
import com.albus.media.UserPhotoLoader;
import com.albus.util.AlbusAudioPlayer;
import com.albus.util.AlbusAudioPlayer.onAudioStateChange;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.util.LongMessageWorker;
import com.albus.util.QuoteUtils;
import com.albus.view.ChatsBottomBarView;
import com.albus.view.CircleImageView;
import com.catfiz.R;
import com.catfiz.intents.CatfishIntents;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.media.PromotedPhotoLoader;
import com.catfiz.model.Comment;
import com.catfiz.model.Profile;
import com.catfiz.model.Quote;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.CatfishService;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.svcpersistent.TaskDataStorage;
import com.catfiz.util.Log;
import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.apache.http.protocol.HTTP;

public class ProfilesAdapter extends Adapter {
    private static int BUBBLE_IMAGE_HEIGHT_LANDSCAPE = 0;
    private static int BUBBLE_IMAGE_HEIGHT_PORTRAIT = 0;
    private static int BUBBLE_IMAGE_WIDTH_NORMAL = 0;
    private static final String TAG = "ProfilesAdapter";
    private static final int VT_BCAST_IMAGE_STATUS = 8;
    private static final int VT_BCAST_VOICE_STATUS = 7;
    private static final int VT_COMMENT = 5;
    private static final int VT_DUMMY = 15;
    private static final int VT_IMAGE_FILE = 14;
    private static final int VT_LONG_STATUS_COMMENT = 9;
    private static final int VT_NO_COMMENT = 2;
    private static final int VT_PERSONAL_STATUS = 1;
    private static final int VT_PROMOTE_CONTACT = 6;
    private static final int VT_QUOTE = 12;
    private static final int VT_SHARE_SLINK_AT_COMMENT = 10;
    private static final int VT_STIKER_MESSAGE_STATUS = 11;
    private static final int VT_VOICE_FILE = 13;
    private ChatsBottomBarView mChatBar;
    private Context mContext;
    private List mItems;
    private LongMessageWorker mLongMessageWorker;
    private Map mProgressMap = new HashMap();
    private Map mProgressStateMap = new HashMap();
    private ThumbnailLoader mThumbnailLoader = null;
    private UserPhotoLoader mUserPhotoLoader = null;

    /* synthetic */ class AnonymousClass1 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus = new int[MessageDeliveryStatus.values().length];
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType = new int[MessageType.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus[MessageDeliveryStatus.BCASTRECEIVED.ordinal()] = ProfilesAdapter.VT_PERSONAL_STATUS;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus[MessageDeliveryStatus.BCASTSENT.ordinal()] = ProfilesAdapter.VT_NO_COMMENT;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.PROMOTECONTACT.ordinal()] = ProfilesAdapter.VT_PERSONAL_STATUS;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTVOICESTATUS.ordinal()] = ProfilesAdapter.VT_NO_COMMENT;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTIMAGESTATUS.ordinal()] = 3;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.LONGSTATUSCOMMENT.ordinal()] = 4;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SHARE_SLINK_AT_COMMENT.ordinal()] = ProfilesAdapter.VT_COMMENT;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.STIKER_MESSAGE_STATUS.ordinal()] = ProfilesAdapter.VT_PROMOTE_CONTACT;
            } catch (NoSuchFieldError e8) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTVIDEOSTATUS.ordinal()] = ProfilesAdapter.VT_BCAST_VOICE_STATUS;
            } catch (NoSuchFieldError e9) {
            }
        }
    }

    class ViewHolderBasic extends ViewHolder implements OnClickListener {
        public CircleImageView mCivPict;
        public LinearLayout mLikeContainer;
        public TextView mTvDate;
        public TextView mTvName;
        public TextView mTvSumLike;
        public View mView;

        public ViewHolderBasic(View view) {
            super(view);
            initializeBasicView(view);
        }

        public void commentClickAction(int i) {
            ((ProfilesActivityCoba) ProfilesAdapter.this.mContext).commentClickLikeCheck(((Profile) ProfilesAdapter.this.mItems.get(i)).getComment(), i);
        }

        public View getCommentView() {
            return this.mView;
        }

        public void initializeBasicView(View view) {
            this.mView = view;
            this.mCivPict = (CircleImageView) this.itemView.findViewById(R.id.riv_img);
            this.mTvName = (TextView) this.itemView.findViewById(R.id.tv_commentator);
            this.mTvDate = (TextView) this.itemView.findViewById(R.id.tv_date_comment);
            this.mTvSumLike = (TextView) this.itemView.findViewById(R.id.tv_sum_like_comment);
            this.mLikeContainer = (LinearLayout) this.itemView.findViewById(R.id.ll_like_container_comm);
        }

        public void onClick(View view) {
        }
    }

    public class ViewHolderComment extends ViewHolderBasic {
        public TextView mTvComment;

        public ViewHolderComment(View view) {
            super(view);
            initializeBasicView(view);
            this.mTvComment = (TextView) view.findViewById(R.id.tv_comment);
            view.setOnClickListener(this);
        }

        public /* bridge */ /* synthetic */ void commentClickAction(int i) {
            super.commentClickAction(i);
        }

        public /* bridge */ /* synthetic */ View getCommentView() {
            return super.getCommentView();
        }

        public /* bridge */ /* synthetic */ void initializeBasicView(View view) {
            super.initializeBasicView(view);
        }

        public void onClick(View view) {
            commentClickAction(((Integer) view.getTag()).intValue());
        }
    }

    public class ViewHolderContact extends ViewHolderBasic {
        public CircleImageView mContactPict;
        public LinearLayout mLlContactContainer;
        public TextView mTvContactMsg;
        public TextView mTvContactName;

        public ViewHolderContact(View view) {
            super(view);
            initializeBasicView(view);
            this.mContactPict = (CircleImageView) view.findViewById(R.id.riv_attach_contact_single);
            this.mTvContactName = (TextView) view.findViewById(R.id.tv_attached_contact_name);
            this.mTvContactMsg = (TextView) view.findViewById(R.id.tv_attached_contact_msg);
            this.mLlContactContainer = (LinearLayout) view.findViewById(R.id.ll_attach);
            view.setOnClickListener(this);
            this.mLlContactContainer.setOnClickListener(this);
        }

        public /* bridge */ /* synthetic */ void commentClickAction(int i) {
            super.commentClickAction(i);
        }

        public /* bridge */ /* synthetic */ View getCommentView() {
            return super.getCommentView();
        }

        public /* bridge */ /* synthetic */ void initializeBasicView(View view) {
            super.initializeBasicView(view);
        }

        public void onClick(View view) {
            switch (view.getId()) {
                case R.id.ll_attach:
                    ((ProfilesActivityCoba) ProfilesAdapter.this.mContext).commentPromoteHandle((User) AlbusUtils.getListUsersFromJSON(((Profile) ProfilesAdapter.this.mItems.get(((Integer) view.getTag()).intValue())).getComment().getStatusComment()).get(0));
                    return;
                default:
                    commentClickAction(((Integer) view.getTag()).intValue());
                    return;
            }
        }
    }

    public class ViewHolderFile extends ViewHolderBasic {
        public ImageView mIvDownload;
        public ImageView mIvThumbFile;
        public LinearLayout mLlAttachContainer;
        public ProgressBar mProgressBar;
        public TextView mTvFileName;

        public ViewHolderFile(View view) {
            super(view);
            initializeBasicView(view);
            this.mTvFileName = (TextView) view.findViewById(R.id.tv_file_attach_name);
            this.mIvThumbFile = (ImageView) view.findViewById(R.id.iv_thumb_attach_file);
            this.mIvDownload = (ImageView) view.findViewById(R.id.iv_attach_file_download);
            this.mProgressBar = (ProgressBar) view.findViewById(R.id.pb_attach_file);
            this.mLlAttachContainer = (LinearLayout) view.findViewById(R.id.ll_attach);
            view.setOnClickListener(this);
            this.mLlAttachContainer.setOnClickListener(this);
            this.mIvDownload.setOnClickListener(this);
        }

        public /* bridge */ /* synthetic */ void commentClickAction(int i) {
            super.commentClickAction(i);
        }

        public /* bridge */ /* synthetic */ View getCommentView() {
            return super.getCommentView();
        }

        public /* bridge */ /* synthetic */ void initializeBasicView(View view) {
            super.initializeBasicView(view);
        }

        public void onClick(View view) {
            switch (view.getId()) {
                case R.id.ll_attach:
                case R.id.iv_attach_file_download:
                    ProfilesAdapter.this.handleClick(((Profile) ProfilesAdapter.this.mItems.get(((Integer) view.getTag()).intValue())).getComment());
                    return;
                default:
                    commentClickAction(((Integer) view.getTag()).intValue());
                    return;
            }
        }
    }

    public class ViewHolderFizzlink extends ViewHolderBasic {
        public ImageView mIvFizzIcon;
        public LinearLayout mLlFizzContainer;
        public TextView mTvComment;
        public TextView mTvFizzDesc;
        public TextView mTvFizzTitle;

        public ViewHolderFizzlink(View view) {
            super(view);
            initializeBasicView(view);
            this.mTvComment = (TextView) view.findViewById(R.id.tv_comment);
            this.mTvFizzTitle = (TextView) view.findViewById(R.id.tv_fizz_title);
            this.mTvFizzDesc = (TextView) view.findViewById(R.id.tv_fizz_desc);
            this.mIvFizzIcon = (ImageView) view.findViewById(R.id.iv_fizz_icon);
            this.mLlFizzContainer = (LinearLayout) view.findViewById(R.id.ll_fizzlink);
            view.setOnClickListener(this);
            this.mLlFizzContainer.setOnClickListener(this);
        }

        public /* bridge */ /* synthetic */ void commentClickAction(int i) {
            super.commentClickAction(i);
        }

        public /* bridge */ /* synthetic */ View getCommentView() {
            return super.getCommentView();
        }

        public /* bridge */ /* synthetic */ void initializeBasicView(View view) {
            super.initializeBasicView(view);
        }

        public void onClick(View view) {
            switch (view.getId()) {
                case R.id.ll_fizzlink:
                    Comment comment = ((Profile) ProfilesAdapter.this.mItems.get(((Integer) view.getTag()).intValue())).getComment();
                    Intent intent = new Intent(ProfilesAdapter.this.mContext, FizzlinkFileViewerActivity.class);
                    try {
                        intent.putExtra(TaskDataStorage.TIMESTAMP, Long.parseLong(AlbusUtils.getSlinkFromJson(comment.getStatusComment(), TaskDataStorage.TIMESTAMP)));
                    } catch (NumberFormatException e) {
                    }
                    String slinkFromJson = AlbusUtils.getSlinkFromJson(comment.getStatusComment(), "simplelink");
                    if (slinkFromJson == null || slinkFromJson.compareTo("") == 0) {
                        slinkFromJson = AlbusUtils.getSlinkFromJson(comment.getStatusComment(), ServerMessageDataStorage.SLINK);
                        if (slinkFromJson != null) {
                            slinkFromJson = Uri.parse(slinkFromJson).getLastPathSegment();
                        }
                    }
                    intent.putExtra(ServerMessageDataStorage.SLINK, slinkFromJson);
                    intent.putExtra(TaskDataStorage.FILE_PATH, AlbusUtils.getSlinkFromJson(comment.getStatusComment(), TaskDataStorage.FILE_PATH));
                    ProfilesAdapter.this.mContext.startActivity(intent);
                    return;
                default:
                    commentClickAction(((Integer) view.getTag()).intValue());
                    return;
            }
        }
    }

    public class ViewHolderLongComment extends ViewHolderBasic {
        public TextView mTvComment;
        public TextView mTvReadMore;

        public ViewHolderLongComment(View view) {
            super(view);
            initializeBasicView(view);
            this.mTvComment = (TextView) view.findViewById(R.id.tv_comment);
            this.mTvReadMore = (TextView) view.findViewById(R.id.tv_read_more);
            view.setOnClickListener(this);
            this.mTvReadMore.setOnClickListener(this);
        }

        public /* bridge */ /* synthetic */ void commentClickAction(int i) {
            super.commentClickAction(i);
        }

        public /* bridge */ /* synthetic */ View getCommentView() {
            return super.getCommentView();
        }

        public /* bridge */ /* synthetic */ void initializeBasicView(View view) {
            super.initializeBasicView(view);
        }

        public void onClick(View view) {
            Log.d(ProfilesAdapter.TAG, "on llComment clicked");
            switch (view.getId()) {
                case R.id.tv_read_more:
                    Comment comment = ((Profile) ProfilesAdapter.this.mItems.get(((Integer) view.getTag()).intValue())).getComment();
                    this.mTvReadMore.setVisibility(ProfilesAdapter.VT_BCAST_IMAGE_STATUS);
                    if (ProfilesAdapter.this.mLongMessageWorker != null) {
                        ProfilesAdapter.this.mLongMessageWorker.loadMessage(String.valueOf(comment.getSequence()), this.mTvComment, true);
                        this.mTvComment.setMaxLines(ActivityChooserViewAdapter.MAX_ACTIVITY_COUNT_UNLIMITED);
                        return;
                    }
                    return;
                default:
                    commentClickAction(((Integer) view.getTag()).intValue());
                    return;
            }
        }
    }

    public class ViewHolderPicture extends ViewHolderBasic {
        public ImageView mIvThumbPic;
        public TextView mTvComment;

        public ViewHolderPicture(View view) {
            super(view);
            initializeBasicView(view);
            this.mTvComment = (TextView) view.findViewById(R.id.tv_comment);
            this.mIvThumbPic = (ImageView) view.findViewById(R.id.iv_thumb_attach_pic);
            view.setOnClickListener(this);
            this.mIvThumbPic.setOnClickListener(this);
        }

        public /* bridge */ /* synthetic */ void commentClickAction(int i) {
            super.commentClickAction(i);
        }

        public /* bridge */ /* synthetic */ View getCommentView() {
            return super.getCommentView();
        }

        public /* bridge */ /* synthetic */ void initializeBasicView(View view) {
            super.initializeBasicView(view);
        }

        public void onClick(View view) {
            switch (view.getId()) {
                case R.id.iv_thumb_attach_pic:
                    Comment comment = (Comment) view.getTag();
                    ProfilesAdapter.this.handleFileComment(comment, comment.getImageFilePath());
                    return;
                default:
                    commentClickAction(((Integer) view.getTag()).intValue());
                    return;
            }
        }
    }

    public class ViewHolderQuote extends ViewHolderBasic {
        public TextView mTvComment;
        public TextView mTvQuoteName;
        public TextView mTvQuoteText;

        public ViewHolderQuote(View view) {
            super(view);
            initializeBasicView(view);
            this.mTvComment = (TextView) view.findViewById(R.id.tv_comment);
            this.mTvQuoteName = (TextView) view.findViewById(R.id.tv_quote_name);
            this.mTvQuoteText = (TextView) view.findViewById(R.id.tv_quote);
            view.setOnClickListener(this);
        }

        public /* bridge */ /* synthetic */ void commentClickAction(int i) {
            super.commentClickAction(i);
        }

        public /* bridge */ /* synthetic */ View getCommentView() {
            return super.getCommentView();
        }

        public /* bridge */ /* synthetic */ void initializeBasicView(View view) {
            super.initializeBasicView(view);
        }

        public void onClick(View view) {
            commentClickAction(((Integer) view.getTag()).intValue());
        }
    }

    public class ViewHolderStatus extends ViewHolder implements OnClickListener {
        public ImageButton mIbComment;
        public ImageButton mIbLike;
        public TextView mTvDate;
        public TextView mTvName;
        public TextView mTvStatus;
        public TextView mTvSumComment;
        public TextView mTvSumLike;
        private View mView;

        public ViewHolderStatus(View view) {
            super(view);
            this.mView = view;
            this.mTvDate = (TextView) view.findViewById(R.id.tv_date);
            this.mTvStatus = (TextView) view.findViewById(R.id.tv_status);
            this.mTvSumComment = (TextView) view.findViewById(R.id.tv_sum_comment);
            this.mTvSumLike = (TextView) view.findViewById(R.id.tv_sum_like);
            this.mTvName = (TextView) view.findViewById(R.id.tv_profile_name);
            this.mIbLike = (ImageButton) view.findViewById(R.id.ib_like);
            this.mIbComment = (ImageButton) view.findViewById(R.id.ib_comment);
            view.setOnClickListener(this);
            this.mIbLike.setOnClickListener(this);
            this.mIbComment.setOnClickListener(this);
            this.mTvName.setOnClickListener(this);
            this.mTvSumLike.setOnClickListener(this);
        }

        public View getCommentView() {
            return this.mView;
        }

        public void onClick(View view) {
            switch (view.getId()) {
                case R.id.tv_profile_name:
                    Intent intent = new Intent(ProfilesAdapter.this.mContext, CustomActionBarPageActivity.class);
                    intent.putExtra(AlbusModelObject.PAGE, 20);
                    ProfilesAdapter.this.mContext.startActivity(intent);
                    return;
                case R.id.tv_sum_like:
                    Intent intent2 = new Intent(ProfilesAdapter.this.mContext, MenuActivity.class);
                    CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
                    intent2.putExtra(AlbusModelObject.PAGE, 32);
                    intent2.putExtra(AlbusModelObject.STATUS_SEQUENCE, catfishPreferences.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0));
                    intent2.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, CatfishService.getUserPIN());
                    ((ProfilesActivityCoba) ProfilesAdapter.this.mContext).startActivityForResult(intent2, 18);
                    return;
                case R.id.ib_like:
                    User user = (User) view.getTag();
                    if (user.isMeLikeThisStatus() == ProfilesAdapter.VT_PERSONAL_STATUS) {
                        user.setMeLikeThisStatus(-1);
                        ProfilesAdapter.this.notifyDataSetChanged();
                        ((ProfilesActivityCoba) ProfilesAdapter.this.mContext).sendLike(-1);
                        return;
                    }
                    user.setMeLikeThisStatus(ProfilesAdapter.VT_PERSONAL_STATUS);
                    ProfilesAdapter.this.notifyDataSetChanged();
                    ((ProfilesActivityCoba) ProfilesAdapter.this.mContext).sendLike(ProfilesAdapter.VT_PERSONAL_STATUS);
                    return;
                case R.id.ib_comment:
                    if (ProfilesAdapter.this.mChatBar.getVisibility() == 0) {
                        ProfilesAdapter.this.mChatBar.setVisibility(4);
                        ProfilesAdapter.this.mChatBar.animate().translationY(0.0f).alpha(1.0f).setDuration(100).setInterpolator(new AccelerateInterpolator());
                    }
                    if (ProfilesAdapter.this.mChatBar.getVisibility() == 4 || ProfilesAdapter.this.mChatBar.getVisibility() == ProfilesAdapter.VT_BCAST_IMAGE_STATUS) {
                        ((ProfilesActivityCoba) ProfilesAdapter.this.mContext).setBtnCommentClicked(true);
                        Animation loadAnimation = AnimationUtils.loadAnimation(ProfilesAdapter.this.mContext.getApplicationContext(), R.anim.slideup_anim);
                        loadAnimation.setAnimationListener(new AnimationListener() {
                            public void onAnimationEnd(Animation animation) {
                            }

                            public void onAnimationRepeat(Animation animation) {
                            }

                            public void onAnimationStart(Animation animation) {
                                ProfilesAdapter.this.mChatBar.setVisibility(0);
                            }
                        });
                        ProfilesAdapter.this.mChatBar.startAnimation(loadAnimation);
                        return;
                    }
                    return;
                default:
                    return;
            }
        }
    }

    public class ViewHolderViewCmnt extends ViewHolder implements OnClickListener {
        public TextView mTvViewComment;
        public View mView;

        public ViewHolderViewCmnt(View view) {
            super(view);
            this.mView = view;
            this.mTvViewComment = (TextView) view.findViewById(R.id.tv_view_comment);
            view.setOnClickListener(this);
        }

        public View getCommentView() {
            return this.mView;
        }

        public void onClick(View view) {
        }
    }

    public class ViewHolderVoice extends ViewHolderBasic {
        private AlbusAudioPlayer mAudioPlayer;
        public ImageButton mIbPlayControl;
        public RelativeLayout mRlVoiceContainer;
        public SeekBar mSeekBar;
        public TextView mTvDuration;

        public ViewHolderVoice(View view) {
            super(view);
            initializeBasicView(view);
            this.mTvDuration = (TextView) view.findViewById(R.id.tv_durations);
            this.mRlVoiceContainer = (RelativeLayout) view.findViewById(R.id.rl_attach_voice);
            this.mIbPlayControl = (ImageButton) view.findViewById(R.id.ib_play);
            this.mSeekBar = (SeekBar) view.findViewById(R.id.sb_playback);
            view.setOnClickListener(this);
            this.mRlVoiceContainer.setOnClickListener(this);
            this.mIbPlayControl.setOnClickListener(this);
        }

        public /* bridge */ /* synthetic */ void commentClickAction(int i) {
            super.commentClickAction(i);
        }

        public /* bridge */ /* synthetic */ View getCommentView() {
            return super.getCommentView();
        }

        public /* bridge */ /* synthetic */ void initializeBasicView(View view) {
            super.initializeBasicView(view);
        }

        public void onClick(View view) {
            switch (view.getId()) {
                case R.id.rl_attach_voice:
                    return;
                case R.id.ib_play:
                    Comment comment = ((Profile) ProfilesAdapter.this.mItems.get(((Integer) view.getTag()).intValue())).getComment();
                    this.mAudioPlayer = new AlbusAudioPlayer();
                    Log.d(ProfilesAdapter.TAG, "Voice path:" + comment.getVoiceFilePath());
                    this.mAudioPlayer.setOnAudioStateChange(new onAudioStateChange() {
                        public void onAudioFinished(int i) {
                            ViewHolderVoice.this.mAudioPlayer.getDurationHandler().post(new Runnable() {
                                public void run() {
                                    ProfilesAdapter.this.notifyDataSetChanged();
                                }
                            });
                        }

                        public void onAudioPaused(int i) {
                            Log.d(ProfilesAdapter.TAG, "onAudioPaused:" + i);
                        }

                        public void onAudioPlaying(final int i, final int i2) {
                            ViewHolderVoice.this.mAudioPlayer.getDurationHandler().post(new Runnable() {
                                public void run() {
                                    ViewHolderVoice.this.mSeekBar.setProgress(i2);
                                    ViewHolderVoice.this.mTvDuration.setText(AlbusUtils.milliSecondsToTimer((long) (i - i2)));
                                }
                            });
                        }

                        public void onAudioPrepared(final int i) {
                            ViewHolderVoice.this.mAudioPlayer.getDurationHandler().post(new Runnable() {
                                public void run() {
                                    ViewHolderVoice.this.mIbPlayControl.setImageResource(R.drawable.ic_stop_dark);
                                    ViewHolderVoice.this.mSeekBar.setMax(i);
                                }
                            });
                        }

                        public void onAudioStoped(int i, int i2) {
                            ViewHolderVoice.this.mAudioPlayer.getDurationHandler().post(new Runnable() {
                                public void run() {
                                    ProfilesAdapter.this.notifyDataSetChanged();
                                }
                            });
                        }
                    });
                    if (this.mAudioPlayer.getPlaying()) {
                        this.mAudioPlayer.Stop();
                        if (this.mAudioPlayer.getLastPlayedID() != comment.getSequence()) {
                            this.mAudioPlayer.setLastPlayedID(comment.getSequence());
                            this.mAudioPlayer.setDataSouce(comment.getVoiceFilePath());
                            this.mAudioPlayer.Play();
                            return;
                        }
                        return;
                    }
                    this.mAudioPlayer.setLastPlayedID(comment.getSequence());
                    this.mAudioPlayer.setDataSouce(comment.getVoiceFilePath());
                    this.mAudioPlayer.Play();
                    return;
                default:
                    commentClickAction(((Integer) view.getTag()).intValue());
                    return;
            }
        }
    }

    public ProfilesAdapter(Context context, List list, ThumbnailLoader thumbnailLoader, UserPhotoLoader userPhotoLoader, LongMessageWorker longMessageWorker) {
        this.mItems = list;
        this.mContext = context;
        this.mUserPhotoLoader = userPhotoLoader;
        this.mThumbnailLoader = thumbnailLoader;
        this.mLongMessageWorker = longMessageWorker;
        BUBBLE_IMAGE_WIDTH_NORMAL = (int) this.mContext.getResources().getDimension(R.dimen.bubble_thumbnail_dimen_normal);
        BUBBLE_IMAGE_HEIGHT_PORTRAIT = (int) this.mContext.getResources().getDimension(R.dimen.bubble_image_height_portrait);
        BUBBLE_IMAGE_HEIGHT_LANDSCAPE = (int) this.mContext.getResources().getDimension(R.dimen.bubble_image_height_lansdcape);
    }

    private int getAttachFileIcon(int i) {
        switch (i) {
            case VT_VOICE_FILE /*13*/:
                return R.drawable.ic_voice_dark;
            case VT_IMAGE_FILE /*14*/:
                return R.drawable.ic_photo_dark;
            default:
                return 0;
        }
    }

    private String getAttachFileMsg(int i) {
        switch (i) {
            case VT_VOICE_FILE /*13*/:
                return this.mContext.getString(R.string.voice_received);
            case VT_IMAGE_FILE /*14*/:
                return this.mContext.getString(R.string.image_received);
            default:
                return null;
        }
    }

    private void goToComment(Profile profile, boolean z, boolean z2) {
        Log.d(TAG, "on go to comment");
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        Intent intent = new Intent(this.mContext, CommentActivity.class);
        if (z) {
            intent.putExtra(AlbusModelObject.PAGE, 31);
        }
        intent.putExtra(CatfishDataStorage.NIC_NAME, profile.getUser().getName());
        intent.putExtra(FriendListDataStorage.STATUS, profile.getUser().getStatus());
        intent.putExtra(AlbusModelObject.DATE, profile.getUser().getStatusdate());
        intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, CatfishService.getUserPIN());
        intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, catfishPreferences.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0));
        intent.putExtra(AlbusModelObject.STATUS_LIKE, catfishPreferences.getInt(FriendListDataStorage.LIKESTATUS, 0));
        intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, profile.getUser().isMeLikeThisStatus());
        intent.putExtra(AlbusModelObject.IS_FROM_BUTTON_COMMENT, z2);
        ((ProfilesActivityCoba) this.mContext).startActivityForResult(intent, 19);
    }

    private void handleClick(Comment comment) {
        switch (AnonymousClass1.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus[MessageDeliveryStatus.values()[comment.getDeliveryStatus()].ordinal()]) {
            case VT_PERSONAL_STATUS /*1*/:
            case VT_NO_COMMENT /*2*/:
                switch (AnonymousClass1.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[comment.getMessageType()].ordinal()]) {
                    case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                        ((ProfilesActivityCoba) this.mContext).handleFileComment(comment, comment.getImageFilePath());
                        return;
                    case VT_BCAST_VOICE_STATUS /*7*/:
                        ((ProfilesActivityCoba) this.mContext).handleFileComment(comment, comment.getDataFilePath());
                        return;
                    default:
                        return;
                }
            default:
                if (!(this.mProgressMap == null || this.mProgressStateMap == null)) {
                    this.mProgressMap.put(comment.getId() + "", Integer.valueOf(VT_PERSONAL_STATUS));
                    this.mProgressStateMap.put(comment.getId() + "", Integer.valueOf(VT_PERSONAL_STATUS));
                    notifyDataSetChanged();
                }
                ((ProfilesActivityCoba) this.mContext).downloadCommentAttachedFile(comment);
                return;
        }
    }

    private void setBasicView(Comment comment, ImageView imageView, TextView textView, TextView textView2, LinearLayout linearLayout, TextView textView3) {
        textView.setText(SmiledText.getSmiledText(this.mContext, comment.getSender().getName(), textView));
        textView2.setText(AlbusUtils.getLastTimeActivities(comment.getSequence(), this.mContext));
        if (comment.getCountCommentLike() > 0) {
            linearLayout.setVisibility(0);
            textView3.setText("" + comment.getCountCommentLike());
        } else {
            linearLayout.setVisibility(VT_BCAST_IMAGE_STATUS);
        }
        if (this.mUserPhotoLoader != null) {
            User sender = comment.getSender();
            Log.d(TAG, "sender:" + sender);
            if (sender.getId().equals(CatfishService.getUserPIN())) {
                Log.d(TAG, "my senderid:" + sender.getId());
                this.mUserPhotoLoader.loadUserPhoto(sender.getId(), imageView);
                return;
            }
            Log.d(TAG, "senderid:" + sender.getId());
            this.mUserPhotoLoader.loadFriendPhoto(sender.getId(), imageView);
        }
    }

    private void setProgressMapping(Comment comment) {
        int i;
        if (this.mProgressStateMap.containsKey(comment.getId() + "")) {
            int intValue = ((Integer) this.mProgressStateMap.get(comment.getId() + "")).intValue();
            comment.setIsUploadFailed(intValue != VT_PERSONAL_STATUS);
            i = intValue;
        } else {
            i = 0;
        }
        if (this.mProgressMap.containsKey(comment.getId() + "")) {
            Integer num = (Integer) this.mProgressMap.get(comment.getId() + "");
            if (num.intValue() > 100 || r1 == 3) {
                this.mProgressMap.remove(comment.getId() + "");
                this.mProgressStateMap.remove(comment.getId() + "");
                comment.setProgressUploaded(0);
            } else if (num.intValue() > 0) {
                comment.setProgressUploaded(num.intValue());
            }
            Log.d(TAG, "progresss : " + comment.getId() + ", progresss : " + num);
        }
    }

    private void setViewAttachPhoto(String str, ImageView imageView) {
        String str2 = "";
        if (str.contains("file://")) {
            str = str.replace("file://", "");
        }
        Options options = new Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(str, options);
        int i = options.outWidth;
        int i2 = options.outHeight;
        if (i > i2) {
            imageView.setLayoutParams(new LayoutParams(BUBBLE_IMAGE_WIDTH_NORMAL, BUBBLE_IMAGE_HEIGHT_LANDSCAPE));
        } else if (i < i2) {
            imageView.setLayoutParams(new LayoutParams(BUBBLE_IMAGE_WIDTH_NORMAL, BUBBLE_IMAGE_HEIGHT_PORTRAIT));
        } else if (i == i2) {
            imageView.setLayoutParams(new LayoutParams(BUBBLE_IMAGE_WIDTH_NORMAL, BUBBLE_IMAGE_WIDTH_NORMAL));
        }
    }

    public int getItemCount() {
        return this.mItems.size();
    }

    public int getItemViewType(int i) {
        Object obj = VT_PERSONAL_STATUS;
        switch (((Profile) this.mItems.get(i)).getListItemType()) {
            case VT_NO_COMMENT /*2*/:
                return VT_PERSONAL_STATUS;
            case VT_LONG_STATUS_COMMENT /*9*/:
                Comment comment = ((Profile) this.mItems.get(i)).getComment();
                switch (AnonymousClass1.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[comment.getMessageType()].ordinal()]) {
                    case VT_PERSONAL_STATUS /*1*/:
                        return VT_PROMOTE_CONTACT;
                    case VT_NO_COMMENT /*2*/:
                        if (!comment.getSender().getId().equals(CatfishService.getUserPIN())) {
                            obj = null;
                        }
                        return (obj != null || comment.getDeliveryStatus() == MessageDeliveryStatus.BCASTRECEIVED.ordinal()) ? VT_BCAST_VOICE_STATUS : VT_VOICE_FILE;
                    case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                        if (!comment.getSender().getId().equals(CatfishService.getUserPIN())) {
                            obj = null;
                        }
                        return (obj != null || comment.getDeliveryStatus() == MessageDeliveryStatus.BCASTRECEIVED.ordinal()) ? VT_BCAST_IMAGE_STATUS : VT_IMAGE_FILE;
                    case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                        return VT_LONG_STATUS_COMMENT;
                    case VT_COMMENT /*5*/:
                        return VT_SHARE_SLINK_AT_COMMENT;
                    case VT_PROMOTE_CONTACT /*6*/:
                        return VT_STIKER_MESSAGE_STATUS;
                    default:
                        return QuoteUtils.isQuoteMessage(comment.getStatusComment()) ? VT_QUOTE : VT_COMMENT;
                }
            case VT_SHARE_SLINK_AT_COMMENT /*10*/:
                return VT_NO_COMMENT;
            case VT_VOICE_FILE /*13*/:
                return VT_DUMMY;
            default:
                return super.getItemViewType(i);
        }
    }

    public void handleFileComment(Comment comment, String str) {
        Uri fromFile = Uri.fromFile(new File(str));
        if (fromFile != null) {
            String str2 = AlbusUtils.getmimetype(fromFile);
            Intent intent = new Intent("android.intent.action.VIEW");
            intent.setDataAndType(fromFile, str2);
            try {
                if (str2.startsWith("image/")) {
                    Intent intent2 = new Intent(this.mContext, ProfilesImageViewerActivity.class);
                    intent2.putExtra(HTTP.IDENTITY_CODING, 31);
                    intent2.putExtra(AlbusModelObject.IMAGE, str);
                    intent2.putExtra(AlbusModelObject.SENDER_NAME, comment.getSender().getName());
                    intent2.putExtra(AlbusModelObject.INTENT_ROOM, this.mContext.getResources().getString(R.string.fitur_profile));
                    intent2.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, comment.getSender().getId());
                    this.mContext.startActivity(intent2);
                    return;
                }
                intent.putExtra(AlbusModelObject.SENDER_NAME, comment.getSender().getName());
                ((ProfilesActivityCoba) this.mContext).startActivityForResult(intent, R.styleable.Theme_radioButtonStyle);
            } catch (Exception e) {
                e.printStackTrace();
                intent = CatfishIntents.newIntent(this.mContext, CatfishIntents.ACTION_SVG_VIEWER);
                intent.setDataAndType(fromFile, "image/svg+xml");
                ((ProfilesActivityCoba) this.mContext).startActivityForResult(intent, R.styleable.Theme_radioButtonStyle);
            }
        }
    }

    public void onBindViewHolder(ViewHolder viewHolder, int i) {
        boolean z = true;
        Profile profile = (Profile) this.mItems.get(i);
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        String str;
        int i2;
        Comment comment;
        String imageThumbURI;
        switch (viewHolder.getItemViewType()) {
            case VT_PERSONAL_STATUS /*1*/:
                ViewHolderStatus viewHolderStatus = (ViewHolderStatus) viewHolder;
                User user = profile.getUser();
                viewHolderStatus.mTvName.setText(SmiledText.getSmiledText(this.mContext, user.getName(), viewHolderStatus.mTvName));
                viewHolderStatus.mTvStatus.setText(SmiledText.getSmiledText(this.mContext, user.getStatus(), viewHolderStatus.mTvStatus));
                CFLinkify.addLinks(viewHolderStatus.mTvStatus, CFLinkify.NIC | VT_BCAST_VOICE_STATUS);
                try {
                    long time = new SimpleDateFormat("HH:mm, dd MMM yyyy").parse(user.getStatusdate()).getTime();
                    viewHolderStatus.mTvDate.setText(AlbusUtils.getLastTimeActivities(time, this.mContext));
                    System.out.println("Date in milli :: " + time);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                str = profile.getCommentCount() + " ";
                if (profile.getCommentCount() == VT_PERSONAL_STATUS) {
                    viewHolderStatus.mTvSumComment.setVisibility(0);
                    viewHolderStatus.mTvSumComment.setText(str + this.mContext.getString(R.string.comment));
                } else if (profile.getCommentCount() > VT_PERSONAL_STATUS) {
                    viewHolderStatus.mTvSumComment.setVisibility(0);
                    viewHolderStatus.mTvSumComment.setText(str + this.mContext.getString(R.string.comments));
                } else {
                    viewHolderStatus.mTvSumComment.setVisibility(VT_BCAST_IMAGE_STATUS);
                }
                i2 = catfishPreferences != null ? catfishPreferences.getInt(FriendListDataStorage.LIKESTATUS, 0) : 0;
                if (i2 > 0) {
                    viewHolderStatus.mTvSumLike.setVisibility(0);
                    if (i2 == VT_PERSONAL_STATUS) {
                        viewHolderStatus.mTvSumLike.setText(i2 + " " + this.mContext.getString(R.string.like));
                    } else {
                        viewHolderStatus.mTvSumLike.setText(i2 + " " + this.mContext.getString(R.string.likes));
                    }
                } else {
                    viewHolderStatus.mTvSumLike.setVisibility(VT_BCAST_IMAGE_STATUS);
                }
                if (user.isMeLikeThisStatus() == VT_PERSONAL_STATUS) {
                    viewHolderStatus.mIbLike.setImageResource(R.drawable.ic_like_on);
                } else {
                    viewHolderStatus.mIbLike.setImageResource(R.drawable.ic_like_off);
                }
                viewHolderStatus.mIbLike.setTag(user);
                viewHolderStatus.mIbComment.setTag(this.mItems.get(i));
                viewHolderStatus.getCommentView().setTag(this.mItems.get(i));
                return;
            case VT_NO_COMMENT /*2*/:
                ViewHolderViewCmnt viewHolderViewCmnt = (ViewHolderViewCmnt) viewHolder;
                viewHolderViewCmnt.mTvViewComment.setText(R.string.no_comment);
                viewHolderViewCmnt.getCommentView().setTag(this.mItems.get(0));
                return;
            case VT_PROMOTE_CONTACT /*6*/:
                ViewHolderContact viewHolderContact = (ViewHolderContact) viewHolder;
                comment = profile.getComment();
                setBasicView(comment, viewHolderContact.mCivPict, viewHolderContact.mTvName, viewHolderContact.mTvDate, viewHolderContact.mLikeContainer, viewHolderContact.mTvSumLike);
                setProgressMapping(comment);
                if (comment.getCountCommentLike() > 0) {
                    viewHolderContact.mLikeContainer.setVisibility(0);
                    viewHolderContact.mTvSumLike.setText("" + comment.getCountCommentLike());
                } else {
                    viewHolderContact.mLikeContainer.setVisibility(VT_BCAST_IMAGE_STATUS);
                }
                boolean z2 = comment.getSender().getId().equals(CatfishService.getUserPIN());
                List listUsersFromJSON = AlbusUtils.getListUsersFromJSON(comment.getStatusComment());
                str = "";
                CharSequence charSequence = "";
                if (listUsersFromJSON != null) {
                    if (listUsersFromJSON.size() > 0) {
                        str = ((User) listUsersFromJSON.get(0)).getId();
                        charSequence = ((User) listUsersFromJSON.get(0)).getName();
                    } else {
                        Log.d(TAG, "Something wrong with contact JSON!");
                    }
                }
                if (z2) {
                    viewHolderContact.mTvContactName.setText(charSequence);
                    viewHolderContact.mTvContactMsg.setText(this.mContext.getResources().getString(R.string.msg_attach_contact_sent));
                    if (this.mUserPhotoLoader != null) {
                        this.mUserPhotoLoader.loadFriendPhoto(str, viewHolderContact.mContactPict);
                    }
                } else if (str.equals(CatfishService.getUserPIN())) {
                    viewHolderContact.mTvContactName.setText(charSequence);
                    viewHolderContact.mTvContactMsg.setText(this.mContext.getResources().getString(R.string.pool_msg_attach_me_promoted));
                    if (this.mUserPhotoLoader != null) {
                        this.mUserPhotoLoader.loadUserPhoto(str, viewHolderContact.mContactPict);
                    }
                } else {
                    viewHolderContact.mTvContactName.setText(charSequence);
                    viewHolderContact.mTvContactMsg.setText(this.mContext.getResources().getString(R.string.msg_attach_contact_recv));
                    Bitmap promotedProfilePhotoBitmapOnly = CatfishPhotoStorage.getPromotedProfilePhotoBitmapOnly(this.mContext, str, (float) PromotedPhotoLoader.DEFAULT_PROFILEPHOTO_SIZE);
                    if (promotedProfilePhotoBitmapOnly != null) {
                        viewHolderContact.mContactPict.setImageBitmap(promotedProfilePhotoBitmapOnly);
                    }
                }
                viewHolderContact.getCommentView().setTag(Integer.valueOf(i));
                viewHolderContact.mLlContactContainer.setTag(Integer.valueOf(i));
                return;
            case VT_BCAST_VOICE_STATUS /*7*/:
                ViewHolderVoice viewHolderVoice = (ViewHolderVoice) viewHolder;
                comment = profile.getComment();
                setBasicView(comment, viewHolderVoice.mCivPict, viewHolderVoice.mTvName, viewHolderVoice.mTvDate, viewHolderVoice.mLikeContainer, viewHolderVoice.mTvSumLike);
                setProgressMapping(comment);
                if (comment.getCountCommentLike() > 0) {
                    viewHolderVoice.mLikeContainer.setVisibility(0);
                    viewHolderVoice.mTvSumLike.setText("" + comment.getCountCommentLike());
                } else {
                    viewHolderVoice.mLikeContainer.setVisibility(VT_BCAST_IMAGE_STATUS);
                }
                viewHolderVoice.mRlVoiceContainer.setVisibility(0);
                if (!comment.getSender().getId().equals(CatfishService.getUserPIN())) {
                    z = false;
                }
                if (z) {
                    viewHolderVoice.mTvDuration.setText(AlbusAudioPlayer.getDurationFromAudioFile(this.mContext, comment.getVoiceFilePath()));
                    viewHolderVoice.mIbPlayControl.setImageResource(R.drawable.ic_play_dark);
                    viewHolderVoice.mSeekBar.setProgress(0);
                } else if (comment.getDeliveryStatus() == MessageDeliveryStatus.BCASTRECEIVED.ordinal()) {
                    viewHolderVoice.mTvDuration.setText(AlbusAudioPlayer.getDurationFromAudioFile(this.mContext, comment.getVoiceFilePath()));
                    viewHolderVoice.mIbPlayControl.setImageResource(R.drawable.ic_play_dark);
                    viewHolderVoice.mSeekBar.setProgress(0);
                }
                viewHolderVoice.getCommentView().setTag(Integer.valueOf(i));
                viewHolderVoice.mIbPlayControl.setTag(Integer.valueOf(i));
                return;
            case VT_BCAST_IMAGE_STATUS /*8*/:
                ViewHolderPicture viewHolderPicture = (ViewHolderPicture) viewHolder;
                comment = profile.getComment();
                setBasicView(comment, viewHolderPicture.mCivPict, viewHolderPicture.mTvName, viewHolderPicture.mTvDate, viewHolderPicture.mLikeContainer, viewHolderPicture.mTvSumLike);
                setProgressMapping(comment);
                imageThumbURI = comment.getImageThumbURI();
                if (!comment.getSender().getId().equals(CatfishService.getUserPIN())) {
                    z = false;
                }
                if (z) {
                    setViewAttachPhoto(imageThumbURI, viewHolderPicture.mIvThumbPic);
                    if (this.mThumbnailLoader != null) {
                        this.mThumbnailLoader.loadImage((Object) imageThumbURI, viewHolderPicture.mIvThumbPic);
                    }
                    imageThumbURI = comment.getStatusComment();
                    if (imageThumbURI.isEmpty()) {
                        viewHolderPicture.mTvComment.setVisibility(VT_BCAST_IMAGE_STATUS);
                    } else {
                        viewHolderPicture.mTvComment.setVisibility(0);
                        viewHolderPicture.mTvComment.setText(SmiledText.getSmiledText(this.mContext, imageThumbURI, viewHolderPicture.mTvComment));
                        CFLinkify.addLinks(viewHolderPicture.mTvComment, CFLinkify.NIC | VT_BCAST_VOICE_STATUS);
                    }
                } else if (comment.getDeliveryStatus() == MessageDeliveryStatus.BCASTRECEIVED.ordinal()) {
                    setViewAttachPhoto(imageThumbURI, viewHolderPicture.mIvThumbPic);
                    if (this.mThumbnailLoader != null) {
                        this.mThumbnailLoader.loadImage((Object) imageThumbURI, viewHolderPicture.mIvThumbPic);
                    }
                    imageThumbURI = comment.getStatusComment();
                    if (imageThumbURI.isEmpty()) {
                        viewHolderPicture.mTvComment.setVisibility(VT_BCAST_IMAGE_STATUS);
                    } else {
                        viewHolderPicture.mTvComment.setVisibility(0);
                        viewHolderPicture.mTvComment.setText(SmiledText.getSmiledText(this.mContext, imageThumbURI, viewHolderPicture.mTvComment));
                        CFLinkify.addLinks(viewHolderPicture.mTvComment, CFLinkify.NIC | VT_BCAST_VOICE_STATUS);
                    }
                }
                viewHolderPicture.mIvThumbPic.setTag(comment);
                viewHolderPicture.getCommentView().setTag(Integer.valueOf(i));
                return;
            case VT_LONG_STATUS_COMMENT /*9*/:
                ViewHolderLongComment viewHolderLongComment = (ViewHolderLongComment) viewHolder;
                comment = profile.getComment();
                setBasicView(comment, viewHolderLongComment.mCivPict, viewHolderLongComment.mTvName, viewHolderLongComment.mTvDate, viewHolderLongComment.mLikeContainer, viewHolderLongComment.mTvSumLike);
                setProgressMapping(comment);
                viewHolderLongComment.mTvComment.setText(SmiledText.getSmiledText(this.mContext, comment.getStatusComment(), viewHolderLongComment.mTvComment));
                CFLinkify.addLinks(viewHolderLongComment.mTvComment, CFLinkify.NIC | VT_BCAST_VOICE_STATUS);
                viewHolderLongComment.mTvComment.setMaxLines(VT_BCAST_IMAGE_STATUS);
                viewHolderLongComment.getCommentView().setTag(Integer.valueOf(i));
                viewHolderLongComment.mTvReadMore.setTag(Integer.valueOf(i));
                return;
            case VT_SHARE_SLINK_AT_COMMENT /*10*/:
                ViewHolderFizzlink viewHolderFizzlink = (ViewHolderFizzlink) viewHolder;
                comment = profile.getComment();
                setBasicView(comment, viewHolderFizzlink.mCivPict, viewHolderFizzlink.mTvName, viewHolderFizzlink.mTvDate, viewHolderFizzlink.mLikeContainer, viewHolderFizzlink.mTvSumLike);
                setProgressMapping(comment);
                if (AlbusUtils.getSlinkFromJson(comment.getStatusComment(), ServerMessageDataStorage.SLINK) == null) {
                    viewHolderFizzlink.mTvComment.setText(this.mContext.getResources().getString(R.string.upload_fizzlink));
                } else {
                    imageThumbURI = AlbusUtils.getSlinkFromJson(comment.getStatusComment(), ServerMessageDataStorage.MESSAGE);
                    if (imageThumbURI == null || imageThumbURI.compareTo("") == 0) {
                        viewHolderFizzlink.mTvComment.setVisibility(VT_BCAST_IMAGE_STATUS);
                    } else {
                        viewHolderFizzlink.mTvComment.setText(AlbusUtils.getSlinkFromJson(comment.getStatusComment(), ServerMessageDataStorage.MESSAGE));
                    }
                }
                viewHolderFizzlink.mTvFizzTitle.setText(AlbusUtils.getSlinkFromJson(comment.getStatusComment(), FriendListDataStorage.FILENAME));
                viewHolderFizzlink.mTvFizzDesc.setText(AlbusUtils.getSlinkFromJson(comment.getStatusComment(), "filesize") + " - Fizzlink");
                imageThumbURI = AlbusUtils.getSlinkFromJson(comment.getStatusComment(), TaskDataStorage.FILE_PATH);
                if (!(imageThumbURI == null || imageThumbURI.equals(""))) {
                    viewHolderFizzlink.mIvFizzIcon.setImageResource(AlbusUtils.getIconFileThumb(imageThumbURI));
                }
                viewHolderFizzlink.getCommentView().setTag(Integer.valueOf(i));
                viewHolderFizzlink.mLlFizzContainer.setTag(Integer.valueOf(i));
                return;
            case VT_STIKER_MESSAGE_STATUS /*11*/:
                ViewHolderBasic viewHolderBasic = (ViewHolderBasic) viewHolder;
                comment = profile.getComment();
                setBasicView(comment, viewHolderBasic.mCivPict, viewHolderBasic.mTvName, viewHolderBasic.mTvDate, viewHolderBasic.mLikeContainer, viewHolderBasic.mTvSumLike);
                setProgressMapping(comment);
                viewHolderBasic.getCommentView().setTag(this.mItems.get(0));
                return;
            case VT_QUOTE /*12*/:
                ViewHolderQuote viewHolderQuote = (ViewHolderQuote) viewHolder;
                comment = profile.getComment();
                setBasicView(comment, viewHolderQuote.mCivPict, viewHolderQuote.mTvName, viewHolderQuote.mTvDate, viewHolderQuote.mLikeContainer, viewHolderQuote.mTvSumLike);
                setProgressMapping(comment);
                Quote quoteJSONStringDecoder = QuoteUtils.quoteJSONStringDecoder(comment.getStatusComment());
                if (quoteJSONStringDecoder != null) {
                    viewHolderQuote.mTvQuoteName.setText(SmiledText.getSmiledText(this.mContext, quoteJSONStringDecoder.getSenderName(), viewHolderQuote.mTvQuoteName));
                    viewHolderQuote.mTvQuoteText.setText(SmiledText.getSmiledText(this.mContext, '\"' + quoteJSONStringDecoder.getQuoteMessage() + '\"', viewHolderQuote.mTvQuoteText));
                    CFLinkify.addLinks(viewHolderQuote.mTvQuoteText, CFLinkify.NIC | VT_BCAST_VOICE_STATUS);
                    viewHolderQuote.mTvComment.setText(SmiledText.getSmiledText(this.mContext, quoteJSONStringDecoder.getMyMessage(), viewHolderQuote.mTvComment));
                    CFLinkify.addLinks(viewHolderQuote.mTvComment, CFLinkify.NIC | VT_BCAST_VOICE_STATUS);
                } else {
                    viewHolderQuote.mTvQuoteText.setText("");
                }
                viewHolderQuote.getCommentView().setTag(Integer.valueOf(i));
                return;
            case VT_VOICE_FILE /*13*/:
            case VT_IMAGE_FILE /*14*/:
                ViewHolderFile viewHolderFile = (ViewHolderFile) viewHolder;
                comment = profile.getComment();
                setBasicView(comment, viewHolderFile.mCivPict, viewHolderFile.mTvName, viewHolderFile.mTvDate, viewHolderFile.mLikeContainer, viewHolderFile.mTvSumLike);
                setProgressMapping(comment);
                if (comment.getCountCommentLike() > 0) {
                    viewHolderFile.mLikeContainer.setVisibility(0);
                    viewHolderFile.mTvSumLike.setText("" + comment.getCountCommentLike());
                } else {
                    viewHolderFile.mLikeContainer.setVisibility(VT_BCAST_IMAGE_STATUS);
                }
                viewHolderFile.mIvThumbFile.setImageResource(getAttachFileIcon(viewHolder.getItemViewType()));
                i2 = comment.getProgressUploaded();
                if (i2 <= 0) {
                    viewHolderFile.mProgressBar.setVisibility(VT_BCAST_IMAGE_STATUS);
                    viewHolderFile.mIvDownload.setVisibility(0);
                    viewHolderFile.mTvFileName.setText(getAttachFileMsg(viewHolder.getItemViewType()));
                } else if (i2 == VT_PERSONAL_STATUS) {
                    viewHolderFile.mProgressBar.setVisibility(0);
                    viewHolderFile.mProgressBar.setIndeterminate(true);
                    viewHolderFile.mIvDownload.setVisibility(VT_BCAST_IMAGE_STATUS);
                    viewHolderFile.mTvFileName.setText(this.mContext.getString(R.string.downloading) + " 0%");
                } else if (i2 <= 100 && i2 > VT_PERSONAL_STATUS) {
                    viewHolderFile.mProgressBar.setVisibility(0);
                    viewHolderFile.mProgressBar.setProgress(i2);
                    viewHolderFile.mProgressBar.setIndeterminate(false);
                    viewHolderFile.mIvDownload.setVisibility(VT_BCAST_IMAGE_STATUS);
                    viewHolderFile.mTvFileName.setText(this.mContext.getString(R.string.downloading) + " " + i2 + "%");
                }
                viewHolderFile.getCommentView().setTag(Integer.valueOf(i));
                viewHolderFile.mLlAttachContainer.setTag(Integer.valueOf(i));
                viewHolderFile.mIvDownload.setTag(Integer.valueOf(i));
                return;
            case VT_DUMMY /*15*/:
                return;
            default:
                Log.d(TAG, "on comment");
                ViewHolderComment viewHolderComment = (ViewHolderComment) viewHolder;
                comment = profile.getComment();
                setBasicView(comment, viewHolderComment.mCivPict, viewHolderComment.mTvName, viewHolderComment.mTvDate, viewHolderComment.mLikeContainer, viewHolderComment.mTvSumLike);
                setProgressMapping(comment);
                viewHolderComment.mTvComment.setText(SmiledText.getSmiledText(this.mContext, comment.getStatusComment(), viewHolderComment.mTvComment));
                CFLinkify.addLinks(viewHolderComment.mTvComment, CFLinkify.NIC | VT_BCAST_VOICE_STATUS);
                viewHolderComment.getCommentView().setTag(Integer.valueOf(i));
                return;
        }
    }

    public ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
        switch (i) {
            case VT_PERSONAL_STATUS /*1*/:
                return new ViewHolderStatus(LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_profile_status, viewGroup, false));
            case VT_NO_COMMENT /*2*/:
                return new ViewHolderViewCmnt(LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_profile_viewcomment, viewGroup, false));
            case VT_PROMOTE_CONTACT /*6*/:
                return new ViewHolderContact(LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_profile_promotecontact, viewGroup, false));
            case VT_BCAST_VOICE_STATUS /*7*/:
                return new ViewHolderVoice(LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_profile_voice, viewGroup, false));
            case VT_BCAST_IMAGE_STATUS /*8*/:
                return new ViewHolderPicture(LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_profile_attachpicture, viewGroup, false));
            case VT_LONG_STATUS_COMMENT /*9*/:
                return new ViewHolderLongComment(LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_profile_longmsg, viewGroup, false));
            case VT_SHARE_SLINK_AT_COMMENT /*10*/:
                return new ViewHolderFizzlink(LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_profile_fizzlink, viewGroup, false));
            case VT_STIKER_MESSAGE_STATUS /*11*/:
                return new ViewHolderBasic(LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_profile_sticker, viewGroup, false));
            case VT_QUOTE /*12*/:
                return new ViewHolderQuote(LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_profile_quote, viewGroup, false));
            case VT_VOICE_FILE /*13*/:
            case VT_IMAGE_FILE /*14*/:
                return new ViewHolderFile(LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_profile_file, viewGroup, false));
            case VT_DUMMY /*15*/:
                return new ViewHolderBasic(LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_profile_dummy, viewGroup, false));
            default:
                return new ViewHolderComment(LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_profile_comment, viewGroup, false));
        }
    }

    public void setChatBar(ChatsBottomBarView chatsBottomBarView) {
        this.mChatBar = chatsBottomBarView;
    }

    public void setProgress(Map map, Map map2) {
        this.mProgressMap = map;
        this.mProgressStateMap = map2;
    }

    public void setUpdateProgress(String str, int i, int i2) {
        this.mProgressMap.put(str, Integer.valueOf(i));
        this.mProgressStateMap.put(str, Integer.valueOf(i2));
    }
}
