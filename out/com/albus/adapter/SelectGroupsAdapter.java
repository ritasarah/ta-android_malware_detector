package com.albus.adapter;

import android.app.Activity;
import android.net.Uri;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.albus.activity.CustomActionBarPageActivity;
import com.albus.imagespan.SmiledText;
import com.albus.media.GroupPhotoLoader;
import com.albus.view.CircleImageView;
import com.catfiz.R;
import com.catfiz.model.Group;
import com.catfiz.util.Log;
import com.catfiz.util.MediaFilePath;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.json.JSONArray;

public class SelectGroupsAdapter extends BaseAdapter {
    private static final String TAG = "SelectGroupsAdapter";
    private Activity mActivity = null;
    private List mData = null;
    private GroupPhotoLoader mGroupPhotoLoader = null;
    private List mGroupsSelected = null;
    private ViewHolder mHolder = null;
    private boolean mIsSelectAll = false;
    private boolean mIsUnSelectAll = false;
    private HashMap mSelectedData = null;

    class ViewHolder {
        private CheckBox checkbox;
        private LinearLayout llItem;
        private CircleImageView rivIcon;
        private TextView tvName;
        private TextView tvStatus;

        private ViewHolder() {
        }
    }

    public SelectGroupsAdapter(Activity activity, List list, GroupPhotoLoader groupPhotoLoader) {
        this.mActivity = activity;
        this.mData = list;
        this.mGroupsSelected = new ArrayList();
        this.mGroupPhotoLoader = groupPhotoLoader;
    }

    public int getCount() {
        return this.mData.size();
    }

    public Object getItem(int i) {
        return Integer.valueOf(i);
    }

    public long getItemId(int i) {
        return (long) i;
    }

    public JSONArray getSelectionId() {
        JSONArray jSONArray = new JSONArray();
        for (int i = 0; i < this.mGroupsSelected.size(); i++) {
            jSONArray.put(((Group) this.mGroupsSelected.get(i)).getGroupID().toString());
        }
        return jSONArray;
    }

    public JSONArray getSelectionName() {
        Log.d(TAG, "get name on mfriend selescted length : " + this.mGroupsSelected.size());
        JSONArray jSONArray = new JSONArray();
        for (int i = 0; i < this.mGroupsSelected.size(); i++) {
            jSONArray.put(((Group) this.mGroupsSelected.get(i)).getName().toString());
        }
        return jSONArray;
    }

    public View getView(int i, View view, ViewGroup viewGroup) {
        this.mHolder = new ViewHolder();
        Group group = (Group) this.mData.get(i);
        if (view == null) {
            view = ((LayoutInflater) this.mActivity.getSystemService("layout_inflater")).inflate(R.layout.item_select_friend, this.mHolder.llItem);
            this.mHolder.rivIcon = (CircleImageView) view.findViewById(R.id.riv_img);
            this.mHolder.tvName = (TextView) view.findViewById(R.id.tv_name);
            this.mHolder.tvStatus = (TextView) view.findViewById(R.id.tv_status);
            this.mHolder.checkbox = (CheckBox) view.findViewById(R.id.cb_item_list);
            this.mHolder.checkbox.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    Log.d(SelectGroupsAdapter.TAG, "onclick checkbox");
                    CheckBox checkBox = (CheckBox) view;
                    Group group = (Group) checkBox.getTag();
                    if (group.isSelected()) {
                        checkBox.setBackgroundResource(R.color.transparent);
                        Log.d(SelectGroupsAdapter.TAG, "value of selected id which is remove = " + group.getGroupID());
                        SelectGroupsAdapter.this.mGroupsSelected.remove(group);
                        Log.d(SelectGroupsAdapter.TAG, "value of selected friend after delete= " + SelectGroupsAdapter.this.mGroupsSelected.size());
                        ((CustomActionBarPageActivity) SelectGroupsAdapter.this.mActivity).callBtnActionSelectGroup(SelectGroupsAdapter.this.mGroupsSelected);
                        SelectGroupsAdapter.this.mIsSelectAll = false;
                        ((CustomActionBarPageActivity) SelectGroupsAdapter.this.mActivity).SelectAll();
                        group.setSelected(false);
                        return;
                    }
                    Log.d(SelectGroupsAdapter.TAG, "value of selected id which is adding = " + group.getGroupID());
                    SelectGroupsAdapter.this.mGroupsSelected.add(group);
                    Log.d(SelectGroupsAdapter.TAG, "value of selected friend after delete : " + SelectGroupsAdapter.this.mGroupsSelected.size());
                    checkBox.setBackgroundResource(R.drawable.bg_selected);
                    ((CustomActionBarPageActivity) SelectGroupsAdapter.this.mActivity).callBtnActionSelectGroup(SelectGroupsAdapter.this.mGroupsSelected);
                    SelectGroupsAdapter.this.mIsUnSelectAll = false;
                    if (SelectGroupsAdapter.this.mGroupsSelected.size() == SelectGroupsAdapter.this.getCount()) {
                        ((CustomActionBarPageActivity) SelectGroupsAdapter.this.mActivity).UnselectAll();
                    }
                    group.setSelected(true);
                }
            });
            view.setTag(this.mHolder);
        } else {
            this.mHolder = (ViewHolder) view.getTag();
        }
        if (this.mData.size() <= 0) {
            Log.d(TAG, "No Data");
        } else {
            if (this.mGroupPhotoLoader != null) {
                Object path = MediaFilePath.getPath(this.mActivity, Uri.parse(group.getImageThumbURI()));
                if (path.isEmpty()) {
                    path = group.getImagePath();
                }
                this.mGroupPhotoLoader.loadImage(path, this.mHolder.rivIcon);
            }
            this.mHolder.tvName.setText(SmiledText.getSmiledText(this.mActivity, group.getName(), this.mHolder.tvName));
            this.mHolder.tvStatus.setText(SmiledText.getSmiledText(this.mActivity, group.getNotes(), this.mHolder.tvStatus));
            if (this.mIsSelectAll) {
                this.mHolder.checkbox.setBackgroundResource(R.drawable.bg_selected);
                this.mHolder.checkbox.setChecked(true);
            }
            if (this.mIsUnSelectAll) {
                this.mHolder.checkbox.setBackgroundResource(R.color.transparent);
                this.mHolder.checkbox.setChecked(false);
            }
            if (group.isSelected()) {
                Log.d(TAG, "selected id is = " + group.getName());
                this.mHolder.checkbox.setBackgroundResource(R.drawable.bg_selected);
            } else {
                this.mHolder.checkbox.setBackgroundResource(R.color.transparent);
            }
            this.mHolder.checkbox.setTag(group);
        }
        return view;
    }

    public void removeAllSelected() {
        this.mGroupsSelected.clear();
        for (int i = 0; i < getCount(); i++) {
            ((Group) this.mData.get(i)).setSelected(false);
        }
        ((CustomActionBarPageActivity) this.mActivity).callBtnActionSelectGroup(this.mGroupsSelected);
        this.mIsSelectAll = false;
        this.mIsUnSelectAll = true;
        notifyDataSetChanged();
    }

    public void removeSelection(int i) {
        this.mSelectedData.remove(Integer.valueOf(i));
        notifyDataSetChanged();
    }

    public void setAllSelected() {
        this.mGroupsSelected.clear();
        for (int i = 0; i < getCount(); i++) {
            if (!((Group) this.mData.get(i)).isSelected()) {
                ((Group) this.mData.get(i)).setSelected(true);
            }
            this.mGroupsSelected.add(this.mData.get(i));
        }
        ((CustomActionBarPageActivity) this.mActivity).callBtnActionSelectGroup(this.mGroupsSelected);
        this.mIsSelectAll = true;
        this.mIsUnSelectAll = false;
        notifyDataSetChanged();
    }
}
