package com.albus.adapter;

import android.content.Context;
import android.content.Intent;
import android.support.v4.app.DialogFragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.albus.activity.CategoryActivity;
import com.albus.activity.CustomActionBarPageActivity;
import com.albus.activity.FriendsActivity;
import com.catfiz.R;
import com.catfiz.model.Category;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.util.Log;
import java.util.List;
import java.util.Locale;

public class CategoryDialogAdapter extends BaseAdapter {
    private static final String TAG = "CategoryDialogAdapter";
    private Context mContext = null;
    private List mData = null;
    private DialogFragment mDialog = null;
    private Category mUser = null;
    private int page = 0;
    private int viewChoose;

    class ViewHolder {
        private Category category;
        private CheckBox cbChoose;
        private LinearLayout llItem;
        private TextView tvFriendCount;
        private TextView tvName;

        private ViewHolder() {
        }
    }

    public CategoryDialogAdapter(int i, Context context, DialogFragment dialogFragment, List list, int i2) {
        this.mContext = context;
        this.mData = list;
        this.mDialog = dialogFragment;
        this.viewChoose = i2;
        this.page = i;
    }

    public int getCount() {
        return this.mData.size();
    }

    public Object getItem(int i) {
        return Integer.valueOf(i);
    }

    public long getItemId(int i) {
        return (long) i;
    }

    public View getView(int i, View view, ViewGroup viewGroup) {
        ViewHolder viewHolder;
        Category category = (Category) this.mData.get(i);
        getItemViewType(i);
        if (view == null) {
            LayoutInflater layoutInflater = (LayoutInflater) this.mContext.getSystemService("layout_inflater");
            ViewHolder viewHolder2 = new ViewHolder();
            view = layoutInflater.inflate(R.layout.item_category, null);
            viewHolder2.tvName = (TextView) view.findViewById(R.id.tv_name);
            viewHolder2.tvFriendCount = (TextView) view.findViewById(R.id.tv_sum);
            viewHolder2.llItem = (LinearLayout) view.findViewById(R.id.ll_container_category);
            viewHolder2.cbChoose = (CheckBox) view.findViewById(R.id.cb_item_list);
            if (this.viewChoose == 45) {
                viewHolder2.cbChoose.setVisibility(0);
            } else {
                viewHolder2.cbChoose.setVisibility(8);
            }
            viewHolder2.llItem.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    ViewHolder viewHolder = (ViewHolder) view.getTag();
                    if (viewHolder == null) {
                        return;
                    }
                    if (CategoryDialogAdapter.this.viewChoose == 44) {
                        CategoryDialogAdapter.this.mDialog.dismiss();
                        if (viewHolder.category.getID() != 1) {
                            Log.d(CategoryDialogAdapter.TAG, "open friend on category = " + viewHolder.category.getID());
                            Intent intent = new Intent(CategoryDialogAdapter.this.mContext, CategoryActivity.class);
                            intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, viewHolder.category.getID());
                            intent.putExtra(CatfishDataStorage.NIC_NAME, viewHolder.category.getName());
                            CategoryDialogAdapter.this.mContext.startActivity(intent);
                        }
                    } else if (CategoryDialogAdapter.this.viewChoose == 51) {
                        CategoryDialogAdapter.this.mDialog.dismiss();
                        ((CustomActionBarPageActivity) CategoryDialogAdapter.this.mContext).setSelectFriendData(viewHolder.category.getID(), viewHolder.category.getName());
                    } else if (viewHolder.cbChoose.isChecked()) {
                        viewHolder.cbChoose.setChecked(false);
                        viewHolder.category.setSelected(false);
                        if (CategoryDialogAdapter.this.page == 51) {
                            ((CategoryActivity) CategoryDialogAdapter.this.mContext).removeDialog(viewHolder.category.getID());
                            ((CategoryActivity) CategoryDialogAdapter.this.mContext).setRemovedID(viewHolder.category.getID());
                            return;
                        }
                        ((FriendsActivity) CategoryDialogAdapter.this.mContext).removeDialog(viewHolder.category.getID());
                        ((FriendsActivity) CategoryDialogAdapter.this.mContext).setRemovedID(viewHolder.category.getID());
                    } else {
                        viewHolder.cbChoose.setChecked(true);
                        if (CategoryDialogAdapter.this.page == 51) {
                            ((CategoryActivity) CategoryDialogAdapter.this.mContext).setCategoryID(viewHolder.category.getID());
                        } else {
                            ((FriendsActivity) CategoryDialogAdapter.this.mContext).setCategoryID(viewHolder.category.getID());
                        }
                        viewHolder.category.setSelected(true);
                    }
                }
            });
            viewHolder2.cbChoose.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    Category category = (Category) view.getTag();
                    if (category.isSelected()) {
                        Log.d(CategoryDialogAdapter.TAG, "value of selected id which is remove = " + category.getID());
                        category.setSelected(false);
                        if (CategoryDialogAdapter.this.page == 51) {
                            ((CategoryActivity) CategoryDialogAdapter.this.mContext).removeDialog(category.getID());
                            ((CategoryActivity) CategoryDialogAdapter.this.mContext).setRemovedID(category.getID());
                            return;
                        }
                        ((FriendsActivity) CategoryDialogAdapter.this.mContext).removeDialog(category.getID());
                        ((FriendsActivity) CategoryDialogAdapter.this.mContext).setRemovedID(category.getID());
                        return;
                    }
                    Log.d(CategoryDialogAdapter.TAG, "value of selected id which is adding = " + category.getID());
                    if (CategoryDialogAdapter.this.page == 51) {
                        ((CategoryActivity) CategoryDialogAdapter.this.mContext).setCategoryID(category.getID());
                    } else {
                        ((FriendsActivity) CategoryDialogAdapter.this.mContext).setCategoryID(category.getID());
                    }
                    category.setSelected(true);
                }
            });
            view.setTag(viewHolder2);
            viewHolder = viewHolder2;
        } else {
            viewHolder = (ViewHolder) view.getTag();
        }
        if (this.mData.size() <= 0) {
            Log.d(TAG, "No data");
        } else {
            viewHolder.category = category;
            CharSequence name = category.getName();
            if (name.equals("Fizz")) {
                name = this.mContext.getString(R.string.all);
            }
            viewHolder.tvName.setText(name);
            viewHolder.tvFriendCount.setText(category.getFriendCount() + " " + this.mContext.getString(R.string.Friends).toLowerCase(Locale.US));
            viewHolder.cbChoose.setTag(category);
            if (this.viewChoose != 51) {
                if (i == 0) {
                    viewHolder.cbChoose.setEnabled(false);
                } else {
                    viewHolder.cbChoose.setEnabled(true);
                }
            }
            if (category.isSelected()) {
                viewHolder.cbChoose.setChecked(true);
            } else {
                viewHolder.cbChoose.setChecked(false);
            }
        }
        return view;
    }

    public int getViewTypeCount() {
        return 2;
    }
}
