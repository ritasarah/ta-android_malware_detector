package com.albus.adapter;

import android.app.Activity;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.albus.activity.AlbusMainActivity;
import com.albus.activity.ProfilesImageViewerActivity;
import com.albus.cfspan.CFLinkify;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.AlbusDialog.OnUpdatesClickedListener;
import com.albus.dialog.AlbusDialogInterface;
import com.albus.imagespan.HtmlSpanCache;
import com.albus.imagespan.SmiledText;
import com.albus.keys.CacheKeys;
import com.albus.media.ThumbnailLoader;
import com.albus.media.UserPhotoLoader;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.view.CircleImageView;
import com.albus.view.CustomImageView;
import com.catfiz.R;
import com.catfiz.adapter.CatfizBaseAdapter;
import com.catfiz.base.Catfiz;
import com.catfiz.base.Constant;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.model.Update;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishService;
import com.catfiz.service.CatfishService.UpdateRecent;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.util.Log;
import com.catfiz.util.MimeTypeParser;
import java.io.File;
import java.util.List;
import org.apache.http.protocol.HTTP;

public class UpdatesAdapter extends CatfizBaseAdapter {
    private static final String TAG = "UpdatesAdapter";
    private static final int VT_COUNT = 13;
    private static final int VT_OTHER = 12;
    private static final int VT_UPDATE_ACCEPT_FRIEND = 9;
    private static final int VT_UPDATE_ACCEPT_FRIEND_DOWN = 11;
    private static final int VT_UPDATE_ACCEPT_FRIEND_UP = 10;
    private static final int VT_UPDATE_NAME = 3;
    private static final int VT_UPDATE_NAME_DOWN = 5;
    private static final int VT_UPDATE_NAME_UP = 4;
    private static final int VT_UPDATE_PHOTO = 6;
    private static final int VT_UPDATE_PHOTO_DOWN = 8;
    private static final int VT_UPDATE_PHOTO_UP = 7;
    private static final int VT_UPDATE_STATUS = 0;
    private static final int VT_UPDATE_STATUS_DOWN = 2;
    private static final int VT_UPDATE_STATUS_UP = 1;
    private Activity mActivity = null;
    private List mData = null;
    private LayoutInflater mInflater = null;
    private ThumbnailLoader mThumbnailLoader;
    private Update mUpdates;
    private UserPhotoLoader mUserPhotoLoader = null;
    public boolean mWaitLoad = false;

    /* synthetic */ class AnonymousClass7 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishService$UpdateRecent = new int[UpdateRecent.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.STATUSUPDT.ordinal()] = UpdatesAdapter.VT_UPDATE_STATUS_UP;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.SELFSTATUSUPDT.ordinal()] = UpdatesAdapter.VT_UPDATE_STATUS_DOWN;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.USERNAMEUPDT.ordinal()] = UpdatesAdapter.VT_UPDATE_NAME;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.SELFUSERNAMEUPDT.ordinal()] = UpdatesAdapter.VT_UPDATE_NAME_UP;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.PHOTOUPDT.ordinal()] = UpdatesAdapter.VT_UPDATE_NAME_DOWN;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.SELFPHOTOUPDT.ordinal()] = UpdatesAdapter.VT_UPDATE_PHOTO;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.ACCEPTFRIEND.ordinal()] = UpdatesAdapter.VT_UPDATE_PHOTO_UP;
            } catch (NoSuchFieldError e7) {
            }
        }
    }

    class UpdatesClickedDialog implements AlbusDialogInterface {
        private UpdatesClickedDialog() {
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            final String string = bundle.getString(CatfishRESTAPI.CFCOMPACT_STICKERID);
            final String string2 = bundle.getString(CatfishDataStorage.NIC_NAME);
            final int i2 = bundle.getInt(MimeTypeParser.TAG_TYPE);
            AlbusDialog.setOnUpdatesItemClicked(new OnUpdatesClickedListener() {
                public void onGoChatClicked() {
                    if (i2 == UpdateRecent.STATUSUPDT.ordinal() || i2 == UpdateRecent.SELFSTATUSUPDT.ordinal()) {
                        ((AlbusMainActivity) UpdatesAdapter.this.mActivity).goToComment(string, UpdatesAdapter.VT_UPDATE_STATUS, false);
                    } else {
                        ((AlbusMainActivity) UpdatesAdapter.this.mActivity).goToChat(UpdatesAdapter.VT_UPDATE_STATUS, string, string2, false, UpdatesAdapter.VT_UPDATE_STATUS, UpdatesAdapter.VT_UPDATE_STATUS, false);
                    }
                }

                public void onGoProfileClicked() {
                    ((AlbusMainActivity) UpdatesAdapter.this.mActivity).goToProfile(string);
                }
            });
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    class ViewHolder {
        private CustomImageView civChangePP;
        private ImageButton ibComment;
        private ImageButton ibLike;
        private LinearLayout llContainer;
        private Update mUpdate;
        private String mUserID;
        private CircleImageView rivIcon;
        private RelativeLayout rlBottomBtn;
        private RelativeLayout rlContent;
        private TextView tvChangeName;
        private TextView tvChangeStatus;
        private TextView tvDate;
        private TextView tvSumComment;
        private TextView tvSumLike;
        private TextView tvUpdate;
        private View viewDown;
        private View viewUp;

        private ViewHolder() {
        }
    }

    public UpdatesAdapter(Activity activity, List list, UserPhotoLoader userPhotoLoader) {
        this.mActivity = activity;
        this.mData = list;
        this.mUserPhotoLoader = userPhotoLoader;
        this.mThumbnailLoader = ((AlbusMainActivity) activity).getThumbnailLoader();
    }

    public int getCount() {
        return !getAdapterVisibility() ? VT_UPDATE_STATUS : this.mData.size();
    }

    public Object getItem(int i) {
        return this.mData.get(i);
    }

    public long getItemId(int i) {
        return (long) this.mData.indexOf(getItem(i));
    }

    public int getItemViewType(int i) {
        switch (AnonymousClass7.$SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.values()[((Update) this.mData.get(i)).getUpdateAction()].ordinal()]) {
            case VT_UPDATE_STATUS_UP /*1*/:
            case VT_UPDATE_STATUS_DOWN /*2*/:
                return i == 0 ? ((AlbusMainActivity) this.mActivity).getVerify() ? VT_UPDATE_STATUS : VT_UPDATE_STATUS_UP : i == getCount() + -1 ? VT_UPDATE_STATUS_DOWN : VT_UPDATE_STATUS;
            case VT_UPDATE_NAME /*3*/:
            case VT_UPDATE_NAME_UP /*4*/:
                return i == 0 ? ((AlbusMainActivity) this.mActivity).getVerify() ? VT_UPDATE_NAME : VT_UPDATE_NAME_UP : i == getCount() + -1 ? VT_UPDATE_NAME_DOWN : VT_UPDATE_NAME;
            case VT_UPDATE_NAME_DOWN /*5*/:
            case VT_UPDATE_PHOTO /*6*/:
                return i == 0 ? ((AlbusMainActivity) this.mActivity).getVerify() ? VT_UPDATE_PHOTO : VT_UPDATE_PHOTO_UP : i == getCount() + -1 ? VT_UPDATE_PHOTO_DOWN : VT_UPDATE_PHOTO;
            case VT_UPDATE_PHOTO_UP /*7*/:
                return i == 0 ? ((AlbusMainActivity) this.mActivity).getVerify() ? VT_UPDATE_ACCEPT_FRIEND : VT_UPDATE_ACCEPT_FRIEND_UP : i == getCount() + -1 ? VT_UPDATE_ACCEPT_FRIEND_DOWN : VT_UPDATE_ACCEPT_FRIEND;
            default:
                return VT_OTHER;
        }
    }

    public View getView(int i, View view, ViewGroup viewGroup) {
        final ViewHolder viewHolder;
        String str = "";
        str = "";
        this.mUpdates = (Update) this.mData.get(i);
        int itemViewType = getItemViewType(i);
        Log.d(TAG, "-- getView: pos: " + i + " --");
        if (view == null) {
            LayoutInflater layoutInflater = (LayoutInflater) this.mActivity.getSystemService("layout_inflater");
            viewHolder = new ViewHolder();
            switch (itemViewType) {
                case VT_UPDATE_STATUS /*0*/:
                case VT_UPDATE_STATUS_UP /*1*/:
                case VT_UPDATE_STATUS_DOWN /*2*/:
                    view = layoutInflater.inflate(R.layout.item_updates_status, null);
                    viewHolder.llContainer = (LinearLayout) view.findViewById(R.id.ll_updates);
                    viewHolder.rlContent = (RelativeLayout) view.findViewById(R.id.rl_bgcard);
                    viewHolder.tvDate = (TextView) view.findViewById(R.id.tv_date);
                    viewHolder.rivIcon = (CircleImageView) view.findViewById(R.id.riv_img);
                    viewHolder.tvUpdate = (TextView) view.findViewById(R.id.tv_update);
                    viewHolder.ibComment = (ImageButton) view.findViewById(R.id.ib_comment);
                    viewHolder.ibLike = (ImageButton) view.findViewById(R.id.ib_like);
                    viewHolder.tvSumLike = (TextView) view.findViewById(R.id.tv_sum_like);
                    viewHolder.tvSumComment = (TextView) view.findViewById(R.id.tv_sum_comment);
                    viewHolder.viewUp = view.findViewById(R.id.view_up);
                    viewHolder.viewDown = view.findViewById(R.id.view_down);
                    viewHolder.tvChangeStatus = (TextView) view.findViewById(R.id.tv_change_status);
                    final int i2 = i;
                    viewHolder.ibLike.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            Update update = (Update) UpdatesAdapter.this.mData.get(((Integer) view.getTag()).intValue());
                            CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
                            catfishPreferences.edit().putBoolean(Constant.NOTIF_LIKE, false).commit();
                            long j;
                            String recipientID;
                            User matchFriendData;
                            if ((update.getRecipientID().equals(CatfishService.getUserPIN()) ? catfishPreferences.getInt(Constant.IS_LIKE_MY_STATUS, -1) : update.isUserLike()) == UpdatesAdapter.VT_UPDATE_STATUS_UP) {
                                viewHolder.ibLike.setImageResource(R.drawable.ic_like_off);
                                j = catfishPreferences.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0);
                                recipientID = update.getRecipientID();
                                if (recipientID.equals(CatfishService.getUserPIN())) {
                                    catfishPreferences.edit().putInt(Constant.IS_LIKE_MY_STATUS, -1).commit();
                                    catfishPreferences.edit().putInt(FriendListDataStorage.LIKESTATUS, catfishPreferences.getInt(FriendListDataStorage.LIKESTATUS, UpdatesAdapter.VT_UPDATE_STATUS) - 1).commit();
                                } else {
                                    update.setUserLike(-1);
                                    matchFriendData = Catfiz.matchFriendData(recipientID);
                                    if (matchFriendData != null) {
                                        matchFriendData.setStatusLike(matchFriendData.getStatusLike() - 1);
                                        Log.d(UpdatesAdapter.TAG, "name:" + update.getRecipientName() + " likecount:" + matchFriendData.getStatusLike());
                                    }
                                }
                                ((AlbusMainActivity) UpdatesAdapter.this.mActivity).setLike(-1, j, update.getRecipientID(), i2);
                            } else {
                                viewHolder.ibLike.setImageResource(R.drawable.ic_like_on);
                                j = update.getStatusSequence();
                                recipientID = update.getRecipientID();
                                if (recipientID.equals(CatfishService.getUserPIN())) {
                                    catfishPreferences.edit().putInt(Constant.IS_LIKE_MY_STATUS, UpdatesAdapter.VT_UPDATE_STATUS_UP).commit();
                                    catfishPreferences.edit().putInt(FriendListDataStorage.LIKESTATUS, catfishPreferences.getInt(FriendListDataStorage.LIKESTATUS, UpdatesAdapter.VT_UPDATE_STATUS) + UpdatesAdapter.VT_UPDATE_STATUS_UP).commit();
                                } else {
                                    update.setUserLike(UpdatesAdapter.VT_UPDATE_STATUS_UP);
                                    matchFriendData = Catfiz.matchFriendData(recipientID);
                                    if (matchFriendData != null) {
                                        matchFriendData.setStatusLike(matchFriendData.getStatusLike() + UpdatesAdapter.VT_UPDATE_STATUS_UP);
                                        Log.d(UpdatesAdapter.TAG, "name:" + update.getRecipientName() + " likecount:" + matchFriendData.getStatusLike());
                                    }
                                }
                                update.setHasNewLike(true);
                                ((AlbusMainActivity) UpdatesAdapter.this.mActivity).setLike(UpdatesAdapter.VT_UPDATE_STATUS_UP, j, update.getRecipientID(), i2);
                            }
                            UpdatesAdapter.this.notifyDataSetChanged();
                        }
                    });
                    viewHolder.ibComment.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            Update update = (Update) view.getTag();
                            ((AlbusMainActivity) UpdatesAdapter.this.mActivity).goToComment(viewHolder.mUserID, UpdatesAdapter.VT_UPDATE_STATUS, true);
                        }
                    });
                    viewHolder.tvSumLike.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            Update update = (Update) view.getTag();
                            CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
                            catfishPreferences.edit().putInt(Constant.PREV_NOTIF_LIKE, catfishPreferences.getInt(FriendListDataStorage.LIKESTATUS, UpdatesAdapter.VT_UPDATE_STATUS)).commit();
                            catfishPreferences.edit().putBoolean(AlbusModelObject.LIKE_FIRST, false).commit();
                            ((AlbusMainActivity) UpdatesAdapter.this.mActivity).goToWhoLike(update.getRecipientID());
                        }
                    });
                    break;
                case VT_UPDATE_NAME /*3*/:
                case VT_UPDATE_NAME_UP /*4*/:
                case VT_UPDATE_NAME_DOWN /*5*/:
                    view = layoutInflater.inflate(R.layout.item_updates_name, null);
                    viewHolder.llContainer = (LinearLayout) view.findViewById(R.id.ll_updates);
                    viewHolder.rlContent = (RelativeLayout) view.findViewById(R.id.rl_bgcard);
                    viewHolder.tvDate = (TextView) view.findViewById(R.id.tv_date);
                    viewHolder.rivIcon = (CircleImageView) view.findViewById(R.id.riv_img);
                    viewHolder.tvUpdate = (TextView) view.findViewById(R.id.tv_update);
                    viewHolder.viewUp = view.findViewById(R.id.view_up);
                    viewHolder.viewDown = view.findViewById(R.id.view_down);
                    viewHolder.tvChangeName = (TextView) view.findViewById(R.id.tv_change_name);
                    break;
                case VT_UPDATE_PHOTO /*6*/:
                case VT_UPDATE_PHOTO_UP /*7*/:
                case VT_UPDATE_PHOTO_DOWN /*8*/:
                    view = layoutInflater.inflate(R.layout.item_updates_photo, null);
                    viewHolder.llContainer = (LinearLayout) view.findViewById(R.id.ll_updates);
                    viewHolder.rlContent = (RelativeLayout) view.findViewById(R.id.rl_bgcard);
                    viewHolder.tvDate = (TextView) view.findViewById(R.id.tv_date);
                    viewHolder.rivIcon = (CircleImageView) view.findViewById(R.id.riv_img);
                    viewHolder.tvUpdate = (TextView) view.findViewById(R.id.tv_update);
                    viewHolder.viewUp = view.findViewById(R.id.view_up);
                    viewHolder.viewDown = view.findViewById(R.id.view_down);
                    viewHolder.civChangePP = (CustomImageView) view.findViewById(R.id.civ_change_pp);
                    viewHolder.civChangePP.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            Update update = (Update) view.getTag();
                            Intent intent = new Intent(UpdatesAdapter.this.mActivity, ProfilesImageViewerActivity.class);
                            intent.putExtra(HTTP.IDENTITY_CODING, UpdatesAdapter.VT_UPDATE_STATUS);
                            File userProfilePhotoFile = update.getUpdateAction() == UpdateRecent.SELFPHOTOUPDT.ordinal() ? CatfishPhotoStorage.getUserProfilePhotoFile(UpdatesAdapter.this.mActivity) : CatfishPhotoStorage.getFriendProfilePhotoFile(UpdatesAdapter.this.mActivity, update.getRecipientID());
                            if (update.getRecipientID().isEmpty()) {
                                intent.putExtra(CatfishDataStorage.NIC_NAME, ((AlbusMainActivity) UpdatesAdapter.this.mActivity).getMyName().toString());
                            } else {
                                intent.putExtra(CatfishDataStorage.NIC_NAME, update.getRecipientName());
                            }
                            if (userProfilePhotoFile != null) {
                                intent.putExtra(AlbusModelObject.IMAGE, userProfilePhotoFile.getAbsolutePath());
                                UpdatesAdapter.this.mActivity.startActivityForResult(intent, 23);
                                return;
                            }
                            Log.e(UpdatesAdapter.TAG, "NULL PHOTO FRIEND");
                        }
                    });
                    break;
                case VT_UPDATE_ACCEPT_FRIEND /*9*/:
                case VT_UPDATE_ACCEPT_FRIEND_UP /*10*/:
                case VT_UPDATE_ACCEPT_FRIEND_DOWN /*11*/:
                case VT_OTHER /*12*/:
                    view = layoutInflater.inflate(R.layout.item_updates_accept_friend, null);
                    viewHolder.llContainer = (LinearLayout) view.findViewById(R.id.ll_updates);
                    viewHolder.rlContent = (RelativeLayout) view.findViewById(R.id.rl_bgcard);
                    viewHolder.tvDate = (TextView) view.findViewById(R.id.tv_date);
                    viewHolder.rivIcon = (CircleImageView) view.findViewById(R.id.riv_img);
                    viewHolder.tvUpdate = (TextView) view.findViewById(R.id.tv_update);
                    viewHolder.viewUp = view.findViewById(R.id.view_up);
                    viewHolder.viewDown = view.findViewById(R.id.view_down);
                    break;
            }
            viewHolder.llContainer.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    ViewHolder viewHolder = (ViewHolder) view.getTag();
                    if (viewHolder != null && viewHolder.mUpdate != null) {
                        Bundle bundle = new Bundle();
                        bundle.putInt(AlbusModelObject.DIALOG, UpdatesAdapter.VT_UPDATE_PHOTO);
                        bundle.putInt(MimeTypeParser.TAG_TYPE, viewHolder.mUpdate.getUpdateAction());
                        if (viewHolder.mUpdate.getUpdateAction() == UpdateRecent.SELFSTATUSUPDT.ordinal() || viewHolder.mUpdate.getUpdateAction() == UpdateRecent.STATUSUPDT.ordinal()) {
                            ((AlbusMainActivity) UpdatesAdapter.this.mActivity).goToComment(viewHolder.mUserID, UpdatesAdapter.VT_UPDATE_STATUS, false);
                        } else if (viewHolder.mUpdate.getUpdateAction() == UpdateRecent.SELFPHOTOUPDT.ordinal() || viewHolder.mUpdate.getUpdateAction() == UpdateRecent.SELFUSERNAMEUPDT.ordinal()) {
                            ((AlbusMainActivity) UpdatesAdapter.this.mActivity).goToProfile(CatfishService.getUserPIN());
                        } else {
                            bundle.putString(CatfishDataStorage.NIC_NAME, viewHolder.mUpdate.getUserName());
                            bundle.putString(CatfishRESTAPI.CFCOMPACT_STICKERID, viewHolder.mUpdate.getUserID());
                            AlbusDialog.showDialog(UpdatesAdapter.VT_UPDATE_PHOTO, new UpdatesClickedDialog(), UpdatesAdapter.this.mActivity, bundle, ((AlbusMainActivity) UpdatesAdapter.this.mActivity).getSupportFragmentManager());
                        }
                    }
                }
            });
            viewHolder.rivIcon.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    if (((Update) view.getTag()).getUpdateAction() == UpdateRecent.SELFPHOTOUPDT.ordinal()) {
                        ((AlbusMainActivity) UpdatesAdapter.this.mActivity).goToProfile(CatfishService.getUserPIN());
                    } else {
                        ((AlbusMainActivity) UpdatesAdapter.this.mActivity).goToProfile(viewHolder.mUserID);
                    }
                }
            });
            view.setTag(viewHolder);
        } else {
            viewHolder = (ViewHolder) view.getTag();
        }
        if (this.mData.size() > 0) {
            this.mUpdates = (Update) this.mData.get(i);
            str = "";
            CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
            viewHolder.mUpdate = this.mUpdates;
            if (this.mUpdates.getRecipientID() == null) {
                this.mUpdates.setRecipientId("");
            }
            String userID = (this.mUpdates.getRecipientID().isEmpty() || this.mUpdates.getRecipientID().equals("null")) ? this.mUpdates.getUserID() : this.mUpdates.getRecipientID();
            viewHolder.mUserID = userID;
            String namekey = CacheKeys.namekey(userID, this.mUpdates.getStatusSequence());
            String namefromkey = CacheKeys.namefromkey(userID, this.mUpdates.getStatusSequence());
            String statuskey = CacheKeys.statuskey(userID, this.mUpdates.getStatusSequence());
            String photoprofilekey = CacheKeys.photoprofilekey(userID, this.mUpdates.getStatusSequence());
            String newfriendkey = CacheKeys.newfriendkey(userID, this.mUpdates.getStatusSequence());
            if (!this.mUpdates.isVerifiedView()) {
                String str2;
                int i3;
                String str3;
                int i4;
                if (userID.equals(CatfishService.getUserPIN())) {
                    str2 = ((AlbusMainActivity) this.mActivity).getMyName().toString();
                    int i5 = catfishPreferences.getInt(Constant.IS_LIKE_MY_STATUS, -1);
                    int i6 = catfishPreferences.getInt(FriendListDataStorage.LIKESTATUS, VT_UPDATE_STATUS);
                    if (this.mUserPhotoLoader.loadUserPhoto(userID, viewHolder.rivIcon, !this.mWaitLoad) != 0) {
                        addPendingUpdate();
                        i3 = i5;
                        str3 = str2;
                        i4 = i6;
                    } else {
                        i3 = i5;
                        str3 = str2;
                        i4 = i6;
                    }
                } else {
                    String recipientName = this.mUpdates.getRecipientName();
                    i4 = this.mUpdates.isUserLike();
                    User matchFriendData = Catfiz.matchFriendData(userID);
                    i3 = matchFriendData != null ? matchFriendData.getStatusLike() : VT_UPDATE_STATUS;
                    if (this.mUserPhotoLoader.loadFriendPhoto(userID, viewHolder.rivIcon, !this.mWaitLoad) != 0) {
                        addPendingUpdate();
                    }
                    str3 = recipientName;
                    int i7 = i4;
                    i4 = i3;
                    i3 = i7;
                }
                viewHolder.tvDate.setText(AlbusUtils.getLastTimeActivities("" + this.mUpdates.getUpdateTime(), this.mActivity));
                switch (itemViewType) {
                    case VT_UPDATE_STATUS_UP /*1*/:
                    case VT_UPDATE_NAME_UP /*4*/:
                    case VT_UPDATE_PHOTO_UP /*7*/:
                    case VT_UPDATE_ACCEPT_FRIEND_UP /*10*/:
                        viewHolder.rlContent.setVisibility(VT_UPDATE_STATUS);
                        viewHolder.viewUp.setVisibility(VT_UPDATE_PHOTO_DOWN);
                        break;
                    case VT_UPDATE_STATUS_DOWN /*2*/:
                    case VT_UPDATE_NAME_DOWN /*5*/:
                    case VT_UPDATE_PHOTO_DOWN /*8*/:
                    case VT_UPDATE_ACCEPT_FRIEND_DOWN /*11*/:
                        viewHolder.rlContent.setVisibility(VT_UPDATE_STATUS);
                        viewHolder.viewDown.setVisibility(VT_UPDATE_STATUS);
                        break;
                    case VT_OTHER /*12*/:
                        viewHolder.viewDown.setVisibility(VT_UPDATE_PHOTO_DOWN);
                        viewHolder.viewUp.setVisibility(VT_UPDATE_PHOTO_DOWN);
                        viewHolder.rlContent.setVisibility(VT_UPDATE_PHOTO_DOWN);
                        break;
                }
                CharSequence charSequence;
                CharSequence charSequence2;
                switch (itemViewType) {
                    case VT_UPDATE_STATUS /*0*/:
                    case VT_UPDATE_STATUS_UP /*1*/:
                    case VT_UPDATE_STATUS_DOWN /*2*/:
                        if (userID.equals(CatfishService.getUserPIN())) {
                            if (catfishPreferences.getBoolean(Constant.NOTIF_COMMENT, false)) {
                                viewHolder.tvSumComment.setTextColor(this.mActivity.getResources().getColor(R.color.blue));
                            } else {
                                viewHolder.tvSumComment.setTextColor(this.mActivity.getResources().getColor(R.color.transparent54));
                            }
                            if (catfishPreferences.getBoolean(Constant.NOTIF_LIKE, false)) {
                                viewHolder.tvSumComment.setTextColor(this.mActivity.getResources().getColor(R.color.blue));
                                viewHolder.tvSumLike.setTextColor(this.mActivity.getResources().getColor(R.color.red));
                            } else {
                                viewHolder.tvSumComment.setTextColor(this.mActivity.getResources().getColor(R.color.transparent54));
                                viewHolder.tvSumLike.setTextColor(this.mActivity.getResources().getColor(R.color.transparent54));
                            }
                        } else {
                            viewHolder.tvSumComment.setTextColor(this.mActivity.getResources().getColor(R.color.transparent54));
                            viewHolder.tvSumLike.setTextColor(this.mActivity.getResources().getColor(R.color.transparent54));
                        }
                        if (i3 > 0) {
                            viewHolder.ibLike.setImageResource(R.drawable.ic_like_on);
                        } else {
                            viewHolder.ibLike.setImageResource(R.drawable.ic_like_off);
                        }
                        viewHolder.tvUpdate.setText(HtmlSpanCache.fromHtml(statuskey, "<font color='#21000000'><b>" + str3 + "</b></font>" + "<font color='#8A000000'> " + this.mActivity.getResources().getString(R.string.updated_status) + "</font>"));
                        viewHolder.tvChangeStatus.setText(SmiledText.getSmiledText(this.mActivity, statuskey, this.mUpdates.getStatusUpdate(), viewHolder.tvChangeStatus));
                        CFLinkify.addLinks(viewHolder.tvChangeStatus, CFLinkify.NIC | VT_UPDATE_PHOTO_UP);
                        i3 = this.mUpdates.getCountStatus();
                        if (i4 == VT_UPDATE_STATUS_UP) {
                            charSequence = i4 + " " + this.mActivity.getString(R.string.like);
                            viewHolder.tvSumLike.setVisibility(VT_UPDATE_STATUS);
                            viewHolder.tvSumLike.setText(charSequence);
                        } else if (i4 > VT_UPDATE_STATUS_UP) {
                            charSequence = i4 + " " + this.mActivity.getString(R.string.likes);
                            viewHolder.tvSumLike.setVisibility(VT_UPDATE_STATUS);
                            viewHolder.tvSumLike.setText(charSequence);
                        } else {
                            viewHolder.tvSumLike.setVisibility(VT_UPDATE_PHOTO_DOWN);
                        }
                        if (i3 == VT_UPDATE_STATUS_UP) {
                            charSequence2 = i3 + " " + this.mActivity.getString(R.string.comment);
                            viewHolder.tvSumComment.setVisibility(VT_UPDATE_STATUS);
                            viewHolder.tvSumComment.setText(charSequence2);
                        } else if (i3 > VT_UPDATE_STATUS_UP) {
                            charSequence2 = i3 + " " + this.mActivity.getString(R.string.comments);
                            viewHolder.tvSumComment.setVisibility(VT_UPDATE_STATUS);
                            viewHolder.tvSumComment.setText(charSequence2);
                        } else {
                            viewHolder.tvSumComment.setVisibility(VT_UPDATE_PHOTO_DOWN);
                        }
                        viewHolder.tvSumLike.setTag(this.mUpdates);
                        viewHolder.rivIcon.setTag(this.mUpdates);
                        viewHolder.tvUpdate.setTag(this.mUpdates);
                        viewHolder.ibComment.setTag(this.mUpdates);
                        viewHolder.ibLike.setTag(Integer.valueOf(i));
                        if (this.mUpdates.hasNewComment()) {
                            viewHolder.tvSumComment.setTextColor(this.mActivity.getResources().getColor(R.color.blue));
                        } else {
                            viewHolder.tvSumComment.setTextColor(this.mActivity.getResources().getColor(R.color.transparent54));
                        }
                        if (!this.mUpdates.hasNewLike()) {
                            viewHolder.tvSumLike.setTextColor(this.mActivity.getResources().getColor(R.color.transparent54));
                            break;
                        }
                        viewHolder.tvSumLike.setTextColor(this.mActivity.getResources().getColor(R.color.red));
                        break;
                    case VT_UPDATE_NAME /*3*/:
                    case VT_UPDATE_NAME_UP /*4*/:
                    case VT_UPDATE_NAME_DOWN /*5*/:
                        Log.d(TAG, "id:" + this.mUpdates.getUserID() + " name:" + this.mUpdates.getUserName());
                        Log.d(TAG, "id:" + this.mUpdates.getRecipientID() + " name:" + this.mUpdates.getRecipientName());
                        charSequence2 = this.mUpdates.getRecipientName();
                        if (charSequence2 == null) {
                            charSequence2 = "";
                        }
                        charSequence = this.mUpdates.getUserName();
                        if (charSequence == null) {
                            charSequence = "";
                        }
                        str3 = "<font color='#21000000'><b>" + charSequence2 + "</b></font>" + "<font color='#8A000000'> " + this.mActivity.getResources().getString(R.string.changed_name) + "</font>";
                        viewHolder.tvUpdate.setText(HtmlSpanCache.fromHtml(namekey, str3));
                        str2 = this.mActivity.getString(R.string.updates_change_name);
                        Log.d(TAG, "update:" + str3);
                        viewHolder.tvChangeName.setText(HtmlSpanCache.fromHtml(namefromkey, str2.replace("[updates_val]", charSequence).replace("[name]", charSequence2)));
                        viewHolder.rivIcon.setTag(this.mUpdates);
                        viewHolder.tvUpdate.setTag(this.mUpdates);
                        break;
                    case VT_UPDATE_PHOTO /*6*/:
                    case VT_UPDATE_PHOTO_UP /*7*/:
                    case VT_UPDATE_PHOTO_DOWN /*8*/:
                        File friendProfilePhotoFile;
                        switch (AnonymousClass7.$SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.values()[this.mUpdates.getUpdateAction()].ordinal()]) {
                            case VT_UPDATE_NAME_DOWN /*5*/:
                                viewHolder.tvUpdate.setText(HtmlSpanCache.fromHtml(photoprofilekey, "<font color='#21000000'><b>" + str3 + "</b></font>" + "<font color='#8A000000'> " + this.mActivity.getResources().getString(R.string.changed_profile_picture) + "</font>"));
                                friendProfilePhotoFile = CatfishPhotoStorage.getFriendProfilePhotoFile(this.mActivity, userID);
                                if (friendProfilePhotoFile != null) {
                                    if (this.mThumbnailLoader.loadImage((Object) "file://" + friendProfilePhotoFile.getAbsolutePath(), viewHolder.civChangePP, !this.mWaitLoad) != 0) {
                                        addPendingUpdate();
                                        break;
                                    }
                                }
                                break;
                            case VT_UPDATE_PHOTO /*6*/:
                                viewHolder.tvUpdate.setText(HtmlSpanCache.fromHtml(photoprofilekey, "<font color='#21000000'><b>" + str3 + "</b></font>" + "<font color='#8A000000'> " + this.mActivity.getResources().getString(R.string.changed_profile_picture) + "</font>"));
                                friendProfilePhotoFile = CatfishPhotoStorage.getUserProfilePhotoFile(this.mActivity);
                                if (friendProfilePhotoFile != null) {
                                    if (this.mThumbnailLoader.loadImage((Object) "file://" + friendProfilePhotoFile.getAbsolutePath(), viewHolder.civChangePP, !this.mWaitLoad) != 0) {
                                        addPendingUpdate();
                                        break;
                                    }
                                }
                                break;
                        }
                        viewHolder.rivIcon.setTag(this.mUpdates);
                        viewHolder.tvUpdate.setTag(this.mUpdates);
                        viewHolder.civChangePP.setTag(this.mUpdates);
                        break;
                    case VT_UPDATE_ACCEPT_FRIEND /*9*/:
                    case VT_UPDATE_ACCEPT_FRIEND_UP /*10*/:
                    case VT_UPDATE_ACCEPT_FRIEND_DOWN /*11*/:
                        viewHolder.tvUpdate.setText(HtmlSpanCache.fromHtml(newfriendkey, "<font color='#21000000'><b>" + this.mUpdates.getUserName() + "</b></font>" + "<font color='#8A000000'> " + this.mActivity.getResources().getString(R.string.is_new_friend) + "</font>"));
                        viewHolder.rivIcon.setTag(this.mUpdates);
                        viewHolder.tvUpdate.setTag(this.mUpdates);
                        break;
                    default:
                        break;
                }
            }
            viewHolder.rlContent.setVisibility(VT_UPDATE_PHOTO_DOWN);
            viewHolder.viewUp.setVisibility(VT_UPDATE_PHOTO_DOWN);
            viewHolder.viewDown.setVisibility(VT_UPDATE_PHOTO_DOWN);
        }
        return view;
    }

    public int getViewTypeCount() {
        return VT_COUNT;
    }

    public void notifyDataSetChanged() {
        super.notifyDataSetChanged();
        SmiledText.clearAllSmiledTextCache();
    }
}
