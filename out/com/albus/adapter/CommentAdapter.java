package com.albus.adapter;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.net.Uri;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.SeekBar;
import android.widget.TextView;
import com.albus.activity.CommentActivity;
import com.albus.activity.FizzlinkFileViewerActivity;
import com.albus.cfspan.CFLinkify;
import com.albus.imagespan.SmiledText;
import com.albus.media.ThumbnailLoader;
import com.albus.media.UserPhotoLoader;
import com.albus.util.AlbusAudioPlayer;
import com.albus.util.AlbusAudioPlayer.onAudioStateChange;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.util.LongMessageWorker;
import com.albus.util.QuoteUtils;
import com.albus.view.ChatItemStreamView;
import com.albus.view.CircleImageView;
import com.catfiz.R;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.media.PromotedPhotoLoader;
import com.catfiz.model.Comment;
import com.catfiz.model.Quote;
import com.catfiz.model.User;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.CatfishService;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.svcpersistent.TaskDataStorage;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;

public class CommentAdapter extends BaseAdapter {
    private static int BUBBLE_IMAGE_HEIGHT_LANDSCAPE = 0;
    private static int BUBBLE_IMAGE_HEIGHT_PORTRAIT = 0;
    private static int BUBBLE_IMAGE_WIDTH_NORMAL = 0;
    private static final String TAG = "CommentAdapter";
    private AlbusAudioPlayer mAudioPlayer = null;
    private Comment mComment = null;
    private Context mContext = null;
    private List mData = null;
    private LongMessageWorker mLongMessageWorker = null;
    private Map mProgressMap = new HashMap();
    private Map mProgressStateMap = new HashMap();
    private String mRoomName = null;
    private ThumbnailLoader mThumbnailLoader = null;
    private UserPhotoLoader mUserPhotoLoader = null;

    /* synthetic */ class AnonymousClass10 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus = new int[MessageDeliveryStatus.values().length];
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType = new int[MessageType.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus[MessageDeliveryStatus.BCASTRECEIVED.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus[MessageDeliveryStatus.BCASTSENT.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.PROMOTECONTACT.ordinal()] = 1;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTVOICESTATUS.ordinal()] = 2;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTIMAGESTATUS.ordinal()] = 3;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SHARE_SLINK_AT_COMMENT.ordinal()] = 4;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.LONGSTATUSCOMMENT.ordinal()] = 5;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.STIKER_MESSAGE_STATUS.ordinal()] = 6;
            } catch (NoSuchFieldError e8) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.QUOTE.ordinal()] = 7;
            } catch (NoSuchFieldError e9) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTVIDEOSTATUS.ordinal()] = 8;
            } catch (NoSuchFieldError e10) {
            }
        }
    }

    class ViewHolder {
        private ImageView fileDownload;
        private ImageButton ibVoicePlayer;
        private ImageView ivThumbFile;
        private ImageView ivThumbPic;
        private LinearLayout llAttachContact;
        private LinearLayout llAttachContainer;
        private LinearLayout llAttachFile;
        private LinearLayout llLikeComment;
        private Comment mComment;
        private ImageView mIvFizzIcon;
        private LinearLayout mLlFizzlinkContainer;
        private LinearLayout mLlQuote;
        private LinearLayout mLlSticker;
        private TextView mTvFizzDesc;
        private TextView mTvFizzTitle;
        private TextView mTvQuote;
        private TextView mTvQuoteName;
        private ProgressBar progressBarFile;
        private CircleImageView rivIcon;
        private CircleImageView rivSingleContactPic;
        private RelativeLayout rlAttachVoice;
        private RelativeLayout rlItem;
        private SeekBar sbPlayback;
        private TextView tvComment;
        private TextView tvCommentDate;
        private TextView tvContactMsg;
        private TextView tvContactName;
        private TextView tvDuration;
        private TextView tvFileName;
        private TextView tvName;
        private TextView tvReadMore;
        private TextView tvSumCommLike;
        private View viewDivider;
        private ChatItemStreamView vpAttachVideo;

        private ViewHolder() {
            this.mLlSticker = null;
            this.mLlQuote = null;
            this.mTvQuoteName = null;
            this.mTvQuote = null;
        }
    }

    public CommentAdapter(Context context, List list, ThumbnailLoader thumbnailLoader, UserPhotoLoader userPhotoLoader, LongMessageWorker longMessageWorker, String str) {
        this.mContext = context;
        this.mData = list;
        this.mUserPhotoLoader = userPhotoLoader;
        this.mThumbnailLoader = thumbnailLoader;
        this.mLongMessageWorker = longMessageWorker;
        this.mAudioPlayer = new AlbusAudioPlayer();
        this.mRoomName = str;
        BUBBLE_IMAGE_WIDTH_NORMAL = (int) context.getResources().getDimension(R.dimen.bubble_thumbnail_dimen_normal);
        BUBBLE_IMAGE_HEIGHT_PORTRAIT = (int) context.getResources().getDimension(R.dimen.bubble_image_height_portrait);
        BUBBLE_IMAGE_HEIGHT_LANDSCAPE = (int) context.getResources().getDimension(R.dimen.bubble_image_height_lansdcape);
    }

    private void handleClick(Comment comment) {
        switch (AnonymousClass10.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageDeliveryStatus[MessageDeliveryStatus.values()[comment.getDeliveryStatus()].ordinal()]) {
            case e.b /*1*/:
            case e.c /*2*/:
                switch (AnonymousClass10.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[comment.getMessageType()].ordinal()]) {
                    case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                        ((CommentActivity) this.mContext).handleFileComment(comment, comment.getImageFilePath());
                        return;
                    case Utils.FILE_TYPE_INSTALLER /*8*/:
                        ((CommentActivity) this.mContext).handleFileComment(comment, comment.getDataFilePath());
                        return;
                    default:
                        return;
                }
            default:
                if (!(this.mProgressMap == null || this.mProgressStateMap == null)) {
                    this.mProgressMap.put(comment.getId() + "", Integer.valueOf(1));
                    this.mProgressStateMap.put(comment.getId() + "", Integer.valueOf(1));
                    notifyDataSetChanged();
                }
                ((CommentActivity) this.mContext).downloadCommentAttachedFile(comment);
                return;
        }
    }

    private void setViewAttachPhoto(String str, ImageView imageView) {
        String str2 = "";
        if (str.contains("file://")) {
            str = str.replace("file://", "");
        }
        Options options = new Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(str, options);
        int i = options.outWidth;
        int i2 = options.outHeight;
        if (i > i2) {
            imageView.setLayoutParams(new LayoutParams(BUBBLE_IMAGE_WIDTH_NORMAL, BUBBLE_IMAGE_HEIGHT_LANDSCAPE));
        } else if (i < i2) {
            imageView.setLayoutParams(new LayoutParams(BUBBLE_IMAGE_WIDTH_NORMAL, BUBBLE_IMAGE_HEIGHT_PORTRAIT));
        } else if (i == i2) {
            imageView.setLayoutParams(new LayoutParams(BUBBLE_IMAGE_WIDTH_NORMAL, BUBBLE_IMAGE_WIDTH_NORMAL));
        }
    }

    public int getCount() {
        return this.mData.size();
    }

    public Object getItem(int i) {
        return this.mData.get(i);
    }

    public long getItemId(int i) {
        return (long) this.mData.indexOf(getItem(i));
    }

    public View getView(final int i, View view, ViewGroup viewGroup) {
        final ViewHolder viewHolder;
        boolean z = true;
        this.mComment = (Comment) this.mData.get(i);
        if (view == null) {
            view = ((LayoutInflater) this.mContext.getSystemService("layout_inflater")).inflate(R.layout.item_comment, null);
            viewHolder = new ViewHolder();
            viewHolder.tvComment = (TextView) view.findViewById(R.id.tv_comment);
            viewHolder.rlItem = (RelativeLayout) view.findViewById(R.id.rl_status_container);
            viewHolder.rivIcon = (CircleImageView) view.findViewById(R.id.riv_img);
            viewHolder.tvName = (TextView) view.findViewById(R.id.tv_name);
            viewHolder.tvCommentDate = (TextView) view.findViewById(R.id.tv_date);
            viewHolder.viewDivider = view.findViewById(R.id.view_strut);
            viewHolder.llLikeComment = (LinearLayout) view.findViewById(R.id.ll_like_container_comm);
            viewHolder.tvSumCommLike = (TextView) view.findViewById(R.id.tv_sum_like_comment);
            viewHolder.tvReadMore = (TextView) view.findViewById(R.id.tv_read_more);
            viewHolder.vpAttachVideo = (ChatItemStreamView) view.findViewById(R.id.vp_attach_video);
            viewHolder.llAttachContainer = (LinearLayout) view.findViewById(R.id.ll_attach);
            viewHolder.llAttachFile = (LinearLayout) view.findViewById(R.id.ll_attach_file);
            viewHolder.tvFileName = (TextView) view.findViewById(R.id.tv_file_attach_name);
            viewHolder.ivThumbFile = (ImageView) view.findViewById(R.id.iv_thumb_attach_file);
            viewHolder.fileDownload = (ImageView) view.findViewById(R.id.iv_attach_file_download);
            viewHolder.progressBarFile = (ProgressBar) view.findViewById(R.id.pb_attach_file);
            viewHolder.ivThumbPic = (ImageView) view.findViewById(R.id.iv_thumb_attach_pic);
            viewHolder.llAttachContact = (LinearLayout) view.findViewById(R.id.ll_attach_contact);
            viewHolder.rivSingleContactPic = (CircleImageView) view.findViewById(R.id.riv_attach_contact_single);
            viewHolder.tvContactName = (TextView) view.findViewById(R.id.tv_attached_contact_name);
            viewHolder.tvContactMsg = (TextView) view.findViewById(R.id.tv_attached_contact_msg);
            viewHolder.rlAttachVoice = (RelativeLayout) view.findViewById(R.id.rl_attach_voice);
            viewHolder.tvDuration = (TextView) view.findViewById(R.id.tv_durations);
            viewHolder.ibVoicePlayer = (ImageButton) view.findViewById(R.id.ib_play);
            viewHolder.sbPlayback = (SeekBar) view.findViewById(R.id.sb_playback);
            viewHolder.mLlSticker = (LinearLayout) view.findViewById(R.id.ll_sticker);
            viewHolder.mLlQuote = (LinearLayout) view.findViewById(R.id.ll_quote);
            viewHolder.mTvQuoteName = (TextView) view.findViewById(R.id.tv_quote_name);
            viewHolder.mTvQuote = (TextView) view.findViewById(R.id.tv_quote);
            viewHolder.mLlFizzlinkContainer = (LinearLayout) view.findViewById(R.id.ll_fizzlink);
            viewHolder.mIvFizzIcon = (ImageView) view.findViewById(R.id.iv_fizz_icon);
            viewHolder.mTvFizzTitle = (TextView) view.findViewById(R.id.tv_fizz_title);
            viewHolder.mTvFizzDesc = (TextView) view.findViewById(R.id.tv_fizz_desc);
            viewHolder.ibVoicePlayer.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    Comment comment = (Comment) view.getTag();
                    Log.d(CommentAdapter.TAG, "Voice path:" + comment.getVoiceFilePath());
                    CommentAdapter.this.mAudioPlayer.setOnAudioStateChange(new onAudioStateChange() {
                        public void onAudioFinished(int i) {
                            CommentAdapter.this.mAudioPlayer.getDurationHandler().post(new Runnable() {
                                public void run() {
                                    CommentAdapter.this.notifyDataSetChanged();
                                }
                            });
                        }

                        public void onAudioPaused(int i) {
                            Log.d(CommentAdapter.TAG, "onAudioPaused:" + i);
                        }

                        public void onAudioPlaying(final int i, final int i2) {
                            CommentAdapter.this.mAudioPlayer.getDurationHandler().post(new Runnable() {
                                public void run() {
                                    viewHolder.sbPlayback.setProgress(i2);
                                    viewHolder.tvDuration.setText(AlbusUtils.milliSecondsToTimer((long) (i - i2)));
                                }
                            });
                        }

                        public void onAudioPrepared(final int i) {
                            CommentAdapter.this.mAudioPlayer.getDurationHandler().post(new Runnable() {
                                public void run() {
                                    viewHolder.ibVoicePlayer.setImageResource(R.drawable.ic_stop_dark);
                                    viewHolder.sbPlayback.setMax(i);
                                }
                            });
                        }

                        public void onAudioStoped(int i, int i2) {
                            CommentAdapter.this.mAudioPlayer.getDurationHandler().post(new Runnable() {
                                public void run() {
                                    CommentAdapter.this.notifyDataSetChanged();
                                }
                            });
                        }
                    });
                    if (CommentAdapter.this.mAudioPlayer.getPlaying()) {
                        CommentAdapter.this.mAudioPlayer.Stop();
                        if (CommentAdapter.this.mAudioPlayer.getLastPlayedID() != comment.getSequence()) {
                            CommentAdapter.this.mAudioPlayer.setLastPlayedID(comment.getSequence());
                            CommentAdapter.this.mAudioPlayer.setDataSouce(comment.getVoiceFilePath());
                            CommentAdapter.this.mAudioPlayer.Play();
                            return;
                        }
                        return;
                    }
                    CommentAdapter.this.mAudioPlayer.setLastPlayedID(comment.getSequence());
                    CommentAdapter.this.mAudioPlayer.setDataSouce(comment.getVoiceFilePath());
                    CommentAdapter.this.mAudioPlayer.Play();
                }
            });
            viewHolder.llAttachContact.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    ((CommentActivity) CommentAdapter.this.mContext).commentPromoteHandle((User) view.getTag());
                }
            });
            viewHolder.llAttachFile.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    CommentAdapter.this.handleClick((Comment) view.getTag());
                }
            });
            viewHolder.fileDownload.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    CommentAdapter.this.handleClick((Comment) view.getTag());
                }
            });
            viewHolder.ivThumbPic.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    Comment comment = (Comment) view.getTag();
                    ((CommentActivity) CommentAdapter.this.mContext).handleFileComment(comment, comment.getImageFilePath());
                }
            });
            viewHolder.rlItem.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    ViewHolder viewHolder = (ViewHolder) view.getTag();
                    if (viewHolder == null) {
                        Log.e(CommentAdapter.TAG, "fail to get holder object from view");
                    } else if (viewHolder.mComment != null) {
                        ((CommentActivity) CommentAdapter.this.mContext).mFragment.commentClickLikeCheck(viewHolder.mComment, i);
                    }
                }
            });
            viewHolder.tvReadMore.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    Comment comment = (Comment) view.getTag();
                    viewHolder.tvReadMore.setVisibility(8);
                    if (CommentAdapter.this.mLongMessageWorker != null) {
                        CommentAdapter.this.mLongMessageWorker.loadMessage(String.valueOf(comment.getSequence()), viewHolder.tvComment, true);
                        viewHolder.tvComment.setMaxLines(ActivityChooserViewAdapter.MAX_ACTIVITY_COUNT_UNLIMITED);
                    }
                }
            });
            viewHolder.rivIcon.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    Comment comment = (Comment) view.getTag();
                    User user = new User(comment.getSender().getId());
                    user.setName(comment.getSender().getName());
                    ((CommentActivity) CommentAdapter.this.mContext).commentEnterProfileHandle(user);
                }
            });
            viewHolder.mLlFizzlinkContainer.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    Comment comment = (Comment) view.getTag();
                    Intent intent = new Intent(CommentAdapter.this.mContext, FizzlinkFileViewerActivity.class);
                    try {
                        intent.putExtra(TaskDataStorage.TIMESTAMP, Long.parseLong(AlbusUtils.getSlinkFromJson(comment.getStatusComment(), TaskDataStorage.TIMESTAMP)));
                    } catch (NumberFormatException e) {
                    }
                    String slinkFromJson = AlbusUtils.getSlinkFromJson(comment.getStatusComment(), "simplelink");
                    if (slinkFromJson == null || slinkFromJson.compareTo("") == 0) {
                        slinkFromJson = AlbusUtils.getSlinkFromJson(comment.getStatusComment(), ServerMessageDataStorage.SLINK);
                        if (slinkFromJson != null) {
                            slinkFromJson = Uri.parse(slinkFromJson).getLastPathSegment();
                        }
                    }
                    intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, comment.getSender().getId());
                    intent.putExtra(ServerMessageDataStorage.SEQUENCE, comment.getSequence());
                    intent.putExtra(ServerMessageDataStorage.SLINK, slinkFromJson);
                    intent.putExtra(TaskDataStorage.FILE_PATH, AlbusUtils.getSlinkFromJson(comment.getStatusComment(), TaskDataStorage.FILE_PATH));
                    intent.putExtra(AlbusModelObject.INTENT_ROOM, CommentAdapter.this.mRoomName);
                    CommentAdapter.this.mContext.startActivity(intent);
                }
            });
            view.setTag(viewHolder);
        } else {
            viewHolder = (ViewHolder) view.getTag();
        }
        if (this.mData.size() <= 0) {
            Log.d(TAG, "No Comment Data");
        } else {
            viewHolder.mComment = this.mComment;
            viewHolder.viewDivider.setVisibility(0);
            viewHolder.rlItem.setVisibility(0);
            viewHolder.mLlFizzlinkContainer.setVisibility(8);
            viewHolder.tvName.setText(SmiledText.getSmiledText(this.mContext, this.mComment.getSender().getName(), viewHolder.tvName));
            viewHolder.tvCommentDate.setText(AlbusUtils.getLastChatTimeActivities("" + this.mComment.getSequence(), this.mContext, true));
            viewHolder.rivIcon.setTag(this.mComment);
            if (this.mComment.getCountCommentLike() > 0) {
                viewHolder.llLikeComment.setVisibility(0);
                viewHolder.tvSumCommLike.setText("" + this.mComment.getCountCommentLike());
            } else {
                viewHolder.llLikeComment.setVisibility(8);
            }
            int intValue;
            if (this.mProgressStateMap.containsKey(this.mComment.getId() + "")) {
                intValue = ((Integer) this.mProgressStateMap.get(this.mComment.getId() + "")).intValue();
                this.mComment.setIsUploadFailed(intValue != 1);
            } else {
                intValue = 0;
            }
            if (this.mProgressMap.containsKey(this.mComment.getId() + "")) {
                Integer num = (Integer) this.mProgressMap.get(this.mComment.getId() + "");
                if (num.intValue() > 100 || r4 == 3) {
                    this.mProgressMap.remove(this.mComment.getId() + "");
                    this.mProgressStateMap.remove(this.mComment.getId() + "");
                    this.mComment.setProgressUploaded(0);
                } else if (num.intValue() > 0) {
                    this.mComment.setProgressUploaded(num.intValue());
                }
                Log.d(TAG, "progresss : " + this.mComment.getId() + ", progresss : " + num);
            }
            String str;
            String str2;
            int progressUploaded;
            switch (AnonymousClass10.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[this.mComment.getMessageType()].ordinal()]) {
                case e.b /*1*/:
                    String str3;
                    Bitmap promotedProfilePhotoBitmapOnly;
                    viewHolder.tvComment.setVisibility(8);
                    viewHolder.tvReadMore.setVisibility(8);
                    viewHolder.mLlQuote.setVisibility(8);
                    viewHolder.llAttachContainer.setVisibility(0);
                    viewHolder.llAttachContact.setVisibility(0);
                    viewHolder.rlAttachVoice.setVisibility(8);
                    viewHolder.ivThumbPic.setVisibility(8);
                    viewHolder.llAttachFile.setVisibility(8);
                    viewHolder.mLlSticker.setVisibility(8);
                    if (!this.mComment.getSender().getId().equals(CatfishService.getUserPIN())) {
                        z = false;
                    }
                    List listUsersFromJSON = AlbusUtils.getListUsersFromJSON(this.mComment.getStatusComment());
                    str = "";
                    str2 = "";
                    if (listUsersFromJSON != null) {
                        if (listUsersFromJSON.size() > 0) {
                            viewHolder.llAttachContact.setTag(listUsersFromJSON.get(0));
                            str = ((User) listUsersFromJSON.get(0)).getId();
                            str2 = ((User) listUsersFromJSON.get(0)).getName();
                            str3 = str;
                            if (!z) {
                                if (str3.equals(CatfishService.getUserPIN())) {
                                    viewHolder.tvContactName.setText(SmiledText.getSmiledText(this.mContext, str2, viewHolder.tvContactName));
                                    viewHolder.tvContactMsg.setText(this.mContext.getResources().getString(R.string.pool_msg_attach_me_promoted));
                                    if (this.mUserPhotoLoader != null) {
                                        this.mUserPhotoLoader.loadUserPhoto(str3, viewHolder.rivSingleContactPic);
                                        break;
                                    }
                                }
                                viewHolder.tvContactName.setText(SmiledText.getSmiledText(this.mContext, str2, viewHolder.tvContactName));
                                viewHolder.tvContactMsg.setText(this.mContext.getResources().getString(R.string.msg_attach_contact_recv));
                                promotedProfilePhotoBitmapOnly = CatfishPhotoStorage.getPromotedProfilePhotoBitmapOnly(this.mContext, str3, (float) PromotedPhotoLoader.DEFAULT_PROFILEPHOTO_SIZE);
                                if (promotedProfilePhotoBitmapOnly != null) {
                                    viewHolder.rivSingleContactPic.setImageBitmap(promotedProfilePhotoBitmapOnly);
                                    break;
                                }
                            }
                            viewHolder.tvContactName.setText(SmiledText.getSmiledText(this.mContext, str2, viewHolder.tvContactName));
                            viewHolder.tvContactMsg.setText(this.mContext.getResources().getString(R.string.msg_attach_contact_sent));
                            if (this.mUserPhotoLoader != null) {
                                this.mUserPhotoLoader.loadFriendPhoto(str3, viewHolder.rivSingleContactPic);
                                break;
                            }
                        }
                        Log.d(TAG, "Something wrong with contact JSON!");
                    }
                    str3 = str;
                    if (!z) {
                        viewHolder.tvContactName.setText(SmiledText.getSmiledText(this.mContext, str2, viewHolder.tvContactName));
                        viewHolder.tvContactMsg.setText(this.mContext.getResources().getString(R.string.msg_attach_contact_sent));
                        if (this.mUserPhotoLoader != null) {
                            this.mUserPhotoLoader.loadFriendPhoto(str3, viewHolder.rivSingleContactPic);
                        }
                    } else if (str3.equals(CatfishService.getUserPIN())) {
                        viewHolder.tvContactName.setText(SmiledText.getSmiledText(this.mContext, str2, viewHolder.tvContactName));
                        viewHolder.tvContactMsg.setText(this.mContext.getResources().getString(R.string.pool_msg_attach_me_promoted));
                        if (this.mUserPhotoLoader != null) {
                            this.mUserPhotoLoader.loadUserPhoto(str3, viewHolder.rivSingleContactPic);
                        }
                    } else {
                        viewHolder.tvContactName.setText(SmiledText.getSmiledText(this.mContext, str2, viewHolder.tvContactName));
                        viewHolder.tvContactMsg.setText(this.mContext.getResources().getString(R.string.msg_attach_contact_recv));
                        promotedProfilePhotoBitmapOnly = CatfishPhotoStorage.getPromotedProfilePhotoBitmapOnly(this.mContext, str3, (float) PromotedPhotoLoader.DEFAULT_PROFILEPHOTO_SIZE);
                        if (promotedProfilePhotoBitmapOnly != null) {
                            viewHolder.rivSingleContactPic.setImageBitmap(promotedProfilePhotoBitmapOnly);
                        }
                    }
                    break;
                case e.c /*2*/:
                    viewHolder.tvComment.setVisibility(8);
                    viewHolder.tvReadMore.setVisibility(8);
                    viewHolder.mLlQuote.setVisibility(8);
                    viewHolder.llAttachContainer.setVisibility(0);
                    viewHolder.llAttachContact.setVisibility(8);
                    viewHolder.ivThumbPic.setVisibility(8);
                    viewHolder.mLlSticker.setVisibility(8);
                    if (!(this.mComment.getSender().getId().equals(CatfishService.getUserPIN()))) {
                        if (this.mComment.getDeliveryStatus() != MessageDeliveryStatus.BCASTRECEIVED.ordinal()) {
                            viewHolder.rlAttachVoice.setVisibility(8);
                            viewHolder.llAttachFile.setVisibility(0);
                            viewHolder.ivThumbFile.setImageResource(R.drawable.ic_voice_dark);
                            progressUploaded = this.mComment.getProgressUploaded();
                            if (progressUploaded <= 0) {
                                viewHolder.progressBarFile.setVisibility(8);
                                viewHolder.fileDownload.setVisibility(0);
                                viewHolder.tvFileName.setText(this.mContext.getString(R.string.voice_received));
                            } else if (progressUploaded == 1) {
                                viewHolder.progressBarFile.setVisibility(0);
                                viewHolder.progressBarFile.setIndeterminate(true);
                                viewHolder.fileDownload.setVisibility(8);
                                viewHolder.tvFileName.setText(this.mContext.getString(R.string.downloading) + " 0%");
                            } else if (progressUploaded <= 100 && progressUploaded > 1) {
                                viewHolder.progressBarFile.setVisibility(0);
                                viewHolder.progressBarFile.setProgress(progressUploaded);
                                viewHolder.progressBarFile.setIndeterminate(false);
                                viewHolder.fileDownload.setVisibility(8);
                                viewHolder.tvFileName.setText(this.mContext.getString(R.string.downloading) + " " + progressUploaded + "%");
                            }
                            viewHolder.llAttachFile.setTag(this.mComment);
                            viewHolder.fileDownload.setTag(this.mComment);
                            break;
                        }
                        viewHolder.rlAttachVoice.setVisibility(0);
                        viewHolder.llAttachFile.setVisibility(8);
                        viewHolder.tvDuration.setText(AlbusAudioPlayer.getDurationFromAudioFile(this.mContext, this.mComment.getVoiceFilePath()));
                        viewHolder.ibVoicePlayer.setImageResource(R.drawable.ic_play_dark);
                        viewHolder.sbPlayback.setProgress(0);
                        viewHolder.ibVoicePlayer.setTag(this.mComment);
                        break;
                    }
                    viewHolder.rlAttachVoice.setVisibility(0);
                    viewHolder.llAttachFile.setVisibility(8);
                    viewHolder.tvDuration.setText(AlbusAudioPlayer.getDurationFromAudioFile(this.mContext, this.mComment.getVoiceFilePath()));
                    viewHolder.ibVoicePlayer.setImageResource(R.drawable.ic_play_dark);
                    viewHolder.sbPlayback.setProgress(0);
                    viewHolder.ibVoicePlayer.setTag(this.mComment);
                    break;
                case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                    viewHolder.tvReadMore.setVisibility(8);
                    viewHolder.mLlQuote.setVisibility(8);
                    viewHolder.llAttachContainer.setVisibility(0);
                    viewHolder.llAttachContact.setVisibility(8);
                    viewHolder.rlAttachVoice.setVisibility(8);
                    viewHolder.mLlSticker.setVisibility(8);
                    viewHolder.mLlSticker.setVisibility(8);
                    str = this.mComment.getImageThumbURI();
                    if (!(this.mComment.getSender().getId().equals(CatfishService.getUserPIN()))) {
                        if (this.mComment.getDeliveryStatus() != MessageDeliveryStatus.BCASTRECEIVED.ordinal()) {
                            viewHolder.tvComment.setVisibility(8);
                            viewHolder.ivThumbPic.setVisibility(8);
                            viewHolder.llAttachFile.setVisibility(0);
                            viewHolder.ivThumbFile.setImageResource(R.drawable.ic_photo_dark);
                            progressUploaded = this.mComment.getProgressUploaded();
                            if (progressUploaded <= 0) {
                                viewHolder.progressBarFile.setVisibility(8);
                                viewHolder.fileDownload.setVisibility(0);
                                viewHolder.tvFileName.setText(this.mContext.getString(R.string.image_received));
                            } else if (progressUploaded == 1) {
                                viewHolder.progressBarFile.setVisibility(0);
                                viewHolder.progressBarFile.setIndeterminate(true);
                                viewHolder.fileDownload.setVisibility(8);
                                viewHolder.tvFileName.setText(this.mContext.getString(R.string.downloading) + " 0%");
                            } else if (progressUploaded <= 100 && progressUploaded > 1) {
                                viewHolder.progressBarFile.setVisibility(0);
                                viewHolder.progressBarFile.setProgress(progressUploaded);
                                viewHolder.progressBarFile.setIndeterminate(false);
                                viewHolder.fileDownload.setVisibility(8);
                                viewHolder.tvFileName.setText(this.mContext.getString(R.string.downloading) + " " + progressUploaded + "%");
                            }
                            viewHolder.llAttachFile.setTag(this.mComment);
                            viewHolder.fileDownload.setTag(this.mComment);
                            break;
                        }
                        viewHolder.ivThumbPic.setVisibility(0);
                        viewHolder.llAttachFile.setVisibility(8);
                        setViewAttachPhoto(str, viewHolder.ivThumbPic);
                        if (this.mThumbnailLoader != null) {
                            this.mThumbnailLoader.loadImage((Object) str, viewHolder.ivThumbPic);
                        }
                        str2 = this.mComment.getStatusComment();
                        if (str2.isEmpty()) {
                            viewHolder.tvComment.setVisibility(8);
                        } else {
                            viewHolder.tvComment.setVisibility(0);
                            viewHolder.tvComment.setText(SmiledText.getSmiledText(this.mContext, str2, viewHolder.tvComment));
                            CFLinkify.addLinks(viewHolder.tvComment, CFLinkify.NIC | 7);
                        }
                        viewHolder.ivThumbPic.setTag(this.mComment);
                        break;
                    }
                    viewHolder.ivThumbPic.setVisibility(0);
                    viewHolder.llAttachFile.setVisibility(8);
                    setViewAttachPhoto(str, viewHolder.ivThumbPic);
                    if (this.mThumbnailLoader != null) {
                        this.mThumbnailLoader.loadImage((Object) str, viewHolder.ivThumbPic);
                    }
                    str2 = this.mComment.getStatusComment();
                    if (str2.isEmpty()) {
                        viewHolder.tvComment.setVisibility(8);
                    } else {
                        viewHolder.tvComment.setVisibility(0);
                        viewHolder.tvComment.setText(SmiledText.getSmiledText(this.mContext, str2, viewHolder.tvComment));
                        CFLinkify.addLinks(viewHolder.tvComment, CFLinkify.NIC | 7);
                    }
                    viewHolder.ivThumbPic.setTag(this.mComment);
                    break;
                case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                    viewHolder.tvComment.setVisibility(0);
                    viewHolder.tvReadMore.setVisibility(8);
                    viewHolder.mLlQuote.setVisibility(8);
                    viewHolder.llAttachContainer.setVisibility(0);
                    viewHolder.mLlFizzlinkContainer.setVisibility(0);
                    viewHolder.llAttachContact.setVisibility(8);
                    viewHolder.rlAttachVoice.setVisibility(8);
                    viewHolder.ivThumbPic.setVisibility(8);
                    viewHolder.llAttachFile.setVisibility(8);
                    viewHolder.mLlSticker.setVisibility(8);
                    viewHolder.mLlFizzlinkContainer.setTag(this.mComment);
                    if (AlbusUtils.getSlinkFromJson(this.mComment.getStatusComment(), ServerMessageDataStorage.SLINK) == null) {
                        viewHolder.tvComment.setText(this.mContext.getResources().getString(R.string.upload_fizzlink));
                    } else {
                        str2 = AlbusUtils.getSlinkFromJson(this.mComment.getStatusComment(), ServerMessageDataStorage.MESSAGE);
                        if (str2 == null || str2.compareTo("") == 0) {
                            viewHolder.tvComment.setVisibility(8);
                        } else {
                            viewHolder.tvComment.setText(AlbusUtils.getSlinkFromJson(this.mComment.getStatusComment(), ServerMessageDataStorage.MESSAGE));
                        }
                    }
                    viewHolder.mTvFizzTitle.setText(AlbusUtils.getSlinkFromJson(this.mComment.getStatusComment(), FriendListDataStorage.FILENAME));
                    viewHolder.mTvFizzDesc.setText(AlbusUtils.getSlinkFromJson(this.mComment.getStatusComment(), "filesize") + " - Fizzlink");
                    str2 = AlbusUtils.getSlinkFromJson(this.mComment.getStatusComment(), TaskDataStorage.FILE_PATH);
                    if (!(str2 == null || str2.equals(""))) {
                        viewHolder.mIvFizzIcon.setImageResource(AlbusUtils.getIconFileThumb(str2));
                        break;
                    }
                    break;
                case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                    viewHolder.tvComment.setVisibility(0);
                    viewHolder.llAttachContainer.setVisibility(8);
                    viewHolder.tvReadMore.setVisibility(8);
                    viewHolder.mLlQuote.setVisibility(8);
                    viewHolder.mLlSticker.setVisibility(8);
                    viewHolder.tvReadMore.setTag(this.mComment);
                    viewHolder.tvReadMore.setVisibility(0);
                    viewHolder.tvComment.setText(SmiledText.getSmiledText(this.mContext, this.mComment.getStatusComment(), viewHolder.tvComment));
                    CFLinkify.addLinks(viewHolder.tvComment, CFLinkify.NIC | 7);
                    break;
                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                    viewHolder.tvComment.setVisibility(8);
                    viewHolder.tvReadMore.setVisibility(8);
                    viewHolder.mLlQuote.setVisibility(8);
                    viewHolder.llAttachContainer.setVisibility(8);
                    viewHolder.llAttachContact.setVisibility(8);
                    viewHolder.rlAttachVoice.setVisibility(8);
                    viewHolder.ivThumbPic.setVisibility(8);
                    viewHolder.llAttachFile.setVisibility(8);
                    viewHolder.mLlSticker.setVisibility(0);
                    break;
                case SimpleLog.LOG_LEVEL_OFF /*7*/:
                    break;
                default:
                    viewHolder.tvComment.setVisibility(0);
                    viewHolder.llAttachContainer.setVisibility(8);
                    viewHolder.tvReadMore.setVisibility(8);
                    viewHolder.mLlSticker.setVisibility(8);
                    if (!QuoteUtils.isQuoteMessage(this.mComment.getStatusComment())) {
                        viewHolder.mLlQuote.setVisibility(8);
                        viewHolder.tvComment.setText(SmiledText.getSmiledText(this.mContext, this.mComment.getStatusComment(), viewHolder.tvComment));
                        CFLinkify.addLinks(viewHolder.tvComment, CFLinkify.NIC | 7);
                        break;
                    }
                    viewHolder.mLlQuote.setVisibility(0);
                    Quote quoteJSONStringDecoder = QuoteUtils.quoteJSONStringDecoder(this.mComment.getStatusComment());
                    if (quoteJSONStringDecoder == null) {
                        viewHolder.mTvQuote.setText("");
                        break;
                    }
                    viewHolder.mTvQuoteName.setText(SmiledText.getSmiledText(this.mContext, quoteJSONStringDecoder.getSenderName(), viewHolder.mTvQuoteName));
                    viewHolder.mTvQuote.setText(SmiledText.getSmiledText(this.mContext, '\"' + quoteJSONStringDecoder.getQuoteMessage() + '\"', viewHolder.mTvQuote));
                    CFLinkify.addLinks(viewHolder.mTvQuote, CFLinkify.NIC | 7);
                    viewHolder.tvComment.setText(SmiledText.getSmiledText(this.mContext, quoteJSONStringDecoder.getMyMessage(), viewHolder.tvComment));
                    CFLinkify.addLinks(viewHolder.tvComment, CFLinkify.NIC | 7);
                    break;
            }
            switch (AnonymousClass10.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[this.mComment.getMessageType()].ordinal()]) {
                case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                    viewHolder.tvComment.setMaxLines(8);
                    break;
                default:
                    viewHolder.tvComment.setMaxLines(ActivityChooserViewAdapter.MAX_ACTIVITY_COUNT_UNLIMITED);
                    LongMessageWorker.cancelPotentialWork(null, viewHolder.tvComment);
                    break;
            }
            if (this.mUserPhotoLoader != null) {
                if (this.mComment.getSender().getId().equals(CatfishService.getUserPIN())) {
                    this.mUserPhotoLoader.loadUserPhoto(this.mComment.getSender().getId(), viewHolder.rivIcon);
                } else {
                    this.mUserPhotoLoader.loadFriendPhoto(this.mComment.getSender().getId(), viewHolder.rivIcon);
                }
            }
        }
        return view;
    }

    public void setProgress(Map map, Map map2) {
        this.mProgressMap = map;
        this.mProgressStateMap = map2;
    }

    public void setUpdateProgress(String str, int i, int i2) {
        this.mProgressMap.put(str, Integer.valueOf(i));
        this.mProgressStateMap.put(str, Integer.valueOf(i2));
    }
}
