package com.albus.adapter;

import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.support.v4.content.LocalBroadcastManager;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.TextView;
import com.albus.activity.ChatGroupConvActivity;
import com.albus.activity.FizzlinkFileViewerActivity;
import com.albus.fragment.GroupConvListFragment;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.view.ChatItemLeftView;
import com.albus.view.ChatItemLeftView.OnItemLeftClickListener;
import com.albus.view.ChatItemLeftView.OnItemLeftLongClickListener;
import com.albus.view.ChatItemRightView;
import com.albus.view.ChatItemRightView.OnItemRightClickListener;
import com.albus.view.ChatItemRightView.OnItemRightLongClickListener;
import com.catfiz.R;
import com.catfiz.intents.BroadcastIntents;
import com.catfiz.model.Message;
import com.catfiz.model.User;
import com.catfiz.pool.PoolDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.CatfishService;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.svcpersistent.TaskDataStorage;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.apache.http.protocol.HTTP;

public class GroupConvListAdapter extends BaseAdapter {
    private static final String TAG = "GroupConvListAdapter";
    private Context mContext = null;
    private List mData = null;
    private int mFirstItemToShow = 0;
    private int mLastReadMsgPos = 0;
    private int mMaxMsg;
    private List mMessagesFull = new ArrayList();
    private Message mMsg = null;
    private Map mProgressMap = new HashMap();
    private Map mProgressStateMap = new HashMap();
    private String mRoomName = null;
    private HashMap mSelection = null;
    private int mUnreadCount = 0;

    /* synthetic */ class AnonymousClass6 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType = new int[MessageType.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.PERSONCONTACT.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTCONFERENCE_LONGMESSAGE.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.LONG_MESSAGE.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.DATASEND_WCOMMENT.ordinal()] = 4;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTCONFERENCE.ordinal()] = 5;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTCONFERENCE_VIDEO.ordinal()] = 6;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.QUOTE.ordinal()] = 7;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SHARE_SLINK_AT_POOL.ordinal()] = 8;
            } catch (NoSuchFieldError e8) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.PING.ordinal()] = 9;
            } catch (NoSuchFieldError e9) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.STIKER_MESSAGE_POOL.ordinal()] = 10;
            } catch (NoSuchFieldError e10) {
            }
        }
    }

    class ViewHolder {
        private ChatItemLeftView cvChatItemLeft;
        private ChatItemRightView cvChatItemRight;
        private TextView llShowMore;

        private ViewHolder() {
        }
    }

    public GroupConvListAdapter(Context context, List list, String str) {
        this.mContext = context;
        this.mData = list;
        this.mSelection = new HashMap();
        this.mRoomName = str;
    }

    private void getPreviousMsg() {
        Log.d(TAG, "mMessagesFull:" + this.mMessagesFull.size() + " mData" + this.mData.size());
        this.mData.clear();
        int i = this.mFirstItemToShow - 100;
        Log.d(TAG, "mFirstItemToShow:" + this.mFirstItemToShow + " nextIndex" + i);
        if (i > 0) {
            Log.d(TAG, "id>0 mMsg:" + this.mData.size());
            for (int i2 = i - 1; i2 < this.mMessagesFull.size(); i2++) {
                this.mData.add(this.mMessagesFull.get(i2));
            }
            Log.d(TAG, "id>0 mMsg_after:" + this.mData.size());
            this.mFirstItemToShow = i;
            notifyDataSetChanged();
            if (((ChatGroupConvActivity) this.mContext).getGroupFragment() != null) {
                ((ChatGroupConvActivity) this.mContext).getGroupFragment().setSelection(100);
                return;
            }
            return;
        }
        Log.d(TAG, "mMsg:" + this.mData.size());
        this.mData.addAll(this.mMessagesFull);
        this.mMessagesFull.clear();
        Log.d(TAG, "mMsg_after:" + this.mData.size());
        notifyDataSetChanged();
        if (((ChatGroupConvActivity) this.mContext).getGroupFragment() != null) {
            ((ChatGroupConvActivity) this.mContext).getGroupFragment().setSelection(this.mFirstItemToShow - 1);
        }
    }

    private boolean hasMessageToShowMore() {
        return this.mMessagesFull.size() > 0;
    }

    private void seeFizzlinkDetail(Message message) {
        Intent intent = new Intent(this.mContext, FizzlinkFileViewerActivity.class);
        Log.d(TAG, "--- Fizzlink Message: " + message.getText());
        try {
            intent.putExtra(TaskDataStorage.TIMESTAMP, Long.parseLong(AlbusUtils.getSlinkFromJson(message.getText(), TaskDataStorage.TIMESTAMP)));
        } catch (NumberFormatException e) {
        }
        String slinkFromJson = AlbusUtils.getSlinkFromJson(message.getText(), "simplelink");
        if (slinkFromJson == null || slinkFromJson.compareTo("") == 0) {
            slinkFromJson = AlbusUtils.getSlinkFromJson(message.getText(), ServerMessageDataStorage.SLINK);
            if (slinkFromJson != null) {
                slinkFromJson = Uri.parse(slinkFromJson).getLastPathSegment();
            }
        }
        Log.d(TAG, "--- Fizzlink Message: slink: " + slinkFromJson);
        intent.putExtra(ServerMessageDataStorage.SLINK, slinkFromJson);
        intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, message.getSender().getId());
        intent.putExtra(PoolDataStorage.TOPIC_KEY, message.getTopicKey());
        intent.putExtra(ServerMessageDataStorage.SEQUENCE, message.getSequence());
        intent.putExtra(TaskDataStorage.FILE_PATH, AlbusUtils.getSlinkFromJson(message.getText(), TaskDataStorage.FILE_PATH));
        intent.putExtra(AlbusModelObject.INTENT_ROOM, this.mRoomName);
        this.mContext.startActivity(intent);
    }

    public void deleteSelection() {
        for (int size = this.mData.size() - 1; size >= 0; size--) {
            if (isPositionChecked(size)) {
                Log.d(TAG, "the index of message that will be deleted is : " + size);
                this.mData.remove(size);
                this.mSelection.remove(Integer.valueOf(size));
                notifyDataSetChanged();
            }
        }
    }

    public int getCount() {
        return this.mData.size();
    }

    public Object getItem(int i) {
        return this.mData.get(i);
    }

    public long getItemId(int i) {
        return 0;
    }

    public int getItemViewType(int i) {
        return ((Message) this.mData.get(i)).getSender().getId().equals(CatfishService.getUserPIN()) ? 0 : 1;
    }

    public View getView(int i, View view, ViewGroup viewGroup) {
        ViewHolder viewHolder;
        this.mMsg = (Message) this.mData.get(i);
        if (view == null) {
            view = ((LayoutInflater) this.mContext.getSystemService("layout_inflater")).inflate(R.layout.item_chat_view, null);
            ViewHolder viewHolder2 = new ViewHolder();
            viewHolder2.llShowMore = (TextView) view.findViewById(R.id.ll_show_more);
            viewHolder2.cvChatItemRight = (ChatItemRightView) view.findViewById(R.id.custom_chat_right);
            viewHolder2.cvChatItemLeft = (ChatItemLeftView) view.findViewById(R.id.custom_chat_left);
            viewHolder2.cvChatItemRight.setParams(2, this.mRoomName);
            viewHolder2.cvChatItemLeft.setParams(2, false, this.mRoomName);
            viewHolder2.llShowMore.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    GroupConvListFragment groupFragment = ((ChatGroupConvActivity) GroupConvListAdapter.this.mContext).getGroupFragment();
                    if (groupFragment != null) {
                        groupFragment.openShowMore();
                    }
                }
            });
            viewHolder2.cvChatItemLeft.setOnItemLeftLongClickListener(new OnItemLeftLongClickListener() {
                public void onItemLongClicked(View view) {
                    ((ChatGroupConvActivity) GroupConvListAdapter.this.mContext).showItemLongClickDialog((Message) view.getTag());
                }
            });
            viewHolder2.cvChatItemLeft.setOnItemLeftClickListener(new OnItemLeftClickListener() {
                public void onAttachCancelClicked(Message message, int i) {
                    String id = message.getSender().getId();
                    long poolSequence = message.getPoolSequence();
                    long poolDataFileSeq = message.getPoolDataFileSeq();
                    Intent intent = null;
                    switch (i) {
                        case e.b /*1*/:
                        case e.c /*2*/:
                        case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                            if (id.compareTo(CatfishService.getUserPIN()) != 0) {
                                intent = new Intent(BroadcastIntents.ACTION_CANCEL_POOL_DOWNLOAD);
                                intent.putExtra(ServerMessageDataStorage.SEQUENCE, poolDataFileSeq);
                                GroupConvListAdapter.this.mProgressStateMap.put("" + poolDataFileSeq, Integer.valueOf(3));
                                break;
                            }
                            intent = new Intent(BroadcastIntents.ACTION_CANCEL_POOL_UPLOAD);
                            intent.putExtra(ServerMessageDataStorage.SEQUENCE, poolSequence);
                            GroupConvListAdapter.this.mProgressStateMap.put("" + poolSequence, Integer.valueOf(3));
                            break;
                        case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                            intent = new Intent(BroadcastIntents.ACTION_CANCEL_FIZZLINK_DOWNLOAD);
                            intent.putExtra(ServerMessageDataStorage.SEQUENCE, poolDataFileSeq);
                            GroupConvListAdapter.this.mProgressStateMap.put("" + poolDataFileSeq, Integer.valueOf(3));
                            break;
                    }
                    LocalBroadcastManager.getInstance(GroupConvListAdapter.this.mContext).sendBroadcast(intent);
                    GroupConvListAdapter.this.notifyDataSetChanged();
                }

                public void onAttachDownloadClicked(Message message) {
                    ((ChatGroupConvActivity) GroupConvListAdapter.this.mContext).downloadConferenceFile(message);
                    if (GroupConvListAdapter.this.mProgressMap != null && GroupConvListAdapter.this.mProgressStateMap != null) {
                        GroupConvListAdapter.this.mProgressMap.put(message.getSequence() + "", Integer.valueOf(1));
                        GroupConvListAdapter.this.mProgressStateMap.put(message.getSequence() + "", Integer.valueOf(1));
                        GroupConvListAdapter.this.notifyDataSetChanged();
                    }
                }

                public void onAttachFileClicked(Message message) {
                    ((ChatGroupConvActivity) GroupConvListAdapter.this.mContext).handleFileMessage(message);
                }

                public void onAttachPicClicked(Message message) {
                    ((ChatGroupConvActivity) GroupConvListAdapter.this.mContext).handleFileMessage(message);
                }

                public void onFizzlinkClicked(Message message) {
                    GroupConvListAdapter.this.seeFizzlinkDetail(message);
                }

                public void onItemChatClicked(Message message) {
                    ((ChatGroupConvActivity) GroupConvListAdapter.this.mContext).messageActionHandle(message);
                }

                public void onProfilePicClicked(Message message) {
                    User user = new User(message.getSender().getId());
                    user.setName(message.getSender().getName());
                    ((ChatGroupConvActivity) GroupConvListAdapter.this.mContext).gotoUserProfile(user);
                }
            });
            viewHolder2.cvChatItemRight.setOnItemRightLongClickListener(new OnItemRightLongClickListener() {
                public void onItemLongClicked(View view) {
                    ((ChatGroupConvActivity) GroupConvListAdapter.this.mContext).showItemLongClickDialog((Message) view.getTag());
                }
            });
            viewHolder2.cvChatItemRight.setOnItemRightClickListener(new OnItemRightClickListener() {
                public void onAttachCancelClicked(Message message) {
                    long sequence = message.getSequence();
                    Intent intent = new Intent(BroadcastIntents.ACTION_CANCEL_POOL_UPLOAD);
                    GroupConvListAdapter.this.mProgressStateMap.put(sequence + "", Integer.valueOf(3));
                    intent.putExtra(ServerMessageDataStorage.SEQUENCE, sequence);
                    LocalBroadcastManager.getInstance(GroupConvListAdapter.this.mContext).sendBroadcast(intent);
                    Log.d(GroupConvListAdapter.TAG, "cancel button has invoked");
                    GroupConvListAdapter.this.notifyDataSetChanged();
                }

                public void onAttachFileClicked(Message message) {
                    ((ChatGroupConvActivity) GroupConvListAdapter.this.mContext).handleFileMessage(message);
                }

                public void onAttachPicClicked(Message message) {
                    ((ChatGroupConvActivity) GroupConvListAdapter.this.mContext).handleFileMessage(message);
                }

                public void onFizzlinkClicked(Message message) {
                    GroupConvListAdapter.this.seeFizzlinkDetail(message);
                }

                public void onItemChatClicked(Message message) {
                    ((ChatGroupConvActivity) GroupConvListAdapter.this.mContext).messageActionHandle(message);
                }

                public void onProfilePicClicked(Message message) {
                    ((ChatGroupConvActivity) GroupConvListAdapter.this.mContext).gotoUserProfile(new User(message.getSender().getId()));
                }

                public void onRetryUploadClicked(Message message) {
                    ((ChatGroupConvActivity) GroupConvListAdapter.this.mContext).retryUploadMessage(message);
                }
            });
            view.setTag(viewHolder2);
            viewHolder = viewHolder2;
        } else {
            viewHolder = (ViewHolder) view.getTag();
        }
        if (i == 0) {
            Log.d(TAG, "max:" + this.mMaxMsg + " size:" + this.mData.size());
            if (this.mMaxMsg > this.mData.size()) {
                Log.d(TAG, "has message to show more");
                viewHolder.llShowMore.setVisibility(0);
            }
        } else if (viewHolder.llShowMore.getVisibility() == 0) {
            viewHolder.llShowMore.setVisibility(8);
        }
        if (this.mData.size() <= 0) {
            Log.d(TAG, "No Message Data");
        } else {
            viewHolder.cvChatItemLeft.setTag(this.mMsg);
            viewHolder.cvChatItemRight.setTag(this.mMsg);
            int intValue;
            if (this.mProgressStateMap.containsKey(this.mMsg.getSequence() + "")) {
                intValue = ((Integer) this.mProgressStateMap.get(this.mMsg.getSequence() + "")).intValue();
                this.mMsg.setIsUploadFailed(intValue != 1);
                this.mMsg.setProgressUploadDownloadState(intValue);
            } else {
                intValue = 0;
            }
            if (this.mProgressMap.containsKey(this.mMsg.getSequence() + "")) {
                Integer num = (Integer) this.mProgressMap.get(this.mMsg.getSequence() + "");
                if (num.intValue() > 100 || r3 == 3) {
                    this.mProgressMap.remove(this.mMsg.getSequence() + "");
                    this.mProgressStateMap.remove(this.mMsg.getSequence() + "");
                    this.mMsg.setProgressUploadDownload(0);
                } else if (num.intValue() > 0) {
                    this.mMsg.setProgressUploadDownload(num.intValue());
                }
                Log.d(TAG, "progresss : " + this.mMsg.getSequence() + "progresss : " + num);
            }
            if (getItemViewType(i) == 0) {
                viewHolder.cvChatItemLeft.setVisibility(8);
                viewHolder.cvChatItemRight.setVisibility(0);
                viewHolder.cvChatItemRight.setMyLayout(this.mSelection, i);
                switch (AnonymousClass6.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[this.mMsg.getType()].ordinal()]) {
                    case e.b /*1*/:
                        viewHolder.cvChatItemRight.onPoolContactMsg();
                        break;
                    case e.c /*2*/:
                    case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                        viewHolder.cvChatItemRight.onNormalMsg(true);
                        break;
                    case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                    case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                        viewHolder.cvChatItemRight.onAttachMsg();
                        break;
                    case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                        viewHolder.cvChatItemRight.onAttachVideo();
                        break;
                    case SimpleLog.LOG_LEVEL_OFF /*7*/:
                        viewHolder.cvChatItemRight.onQuoteMsg();
                        break;
                    case Utils.FILE_TYPE_INSTALLER /*8*/:
                        Log.d(TAG, "--- FIZZLINK ---");
                        viewHolder.cvChatItemRight.onFizzlinkMsg();
                        break;
                    default:
                        viewHolder.cvChatItemRight.onNormalMsg(false);
                        break;
                }
                viewHolder.cvChatItemRight.additionalProcess();
            } else {
                Log.d(TAG, " message type : " + this.mMsg.getType());
                viewHolder.cvChatItemRight.setVisibility(8);
                viewHolder.cvChatItemLeft.setVisibility(0);
                viewHolder.cvChatItemLeft.setSenderLayout(this.mSelection, i);
                switch (AnonymousClass6.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[this.mMsg.getType()].ordinal()]) {
                    case e.b /*1*/:
                        viewHolder.cvChatItemLeft.onPoolContactMsg();
                        break;
                    case e.c /*2*/:
                    case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                        viewHolder.cvChatItemLeft.onNormalMsg(true);
                        break;
                    case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                    case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                        viewHolder.cvChatItemLeft.onAttachMsg();
                        break;
                    case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                        Log.d(TAG, "on attach video");
                        viewHolder.cvChatItemLeft.onAttachVideo();
                        break;
                    case SimpleLog.LOG_LEVEL_OFF /*7*/:
                        viewHolder.cvChatItemLeft.onQuoteMsg();
                        break;
                    case Utils.FILE_TYPE_INSTALLER /*8*/:
                        Log.d(TAG, "--- FIZZLINK ---");
                        viewHolder.cvChatItemLeft.onFizzlinkMsg();
                        break;
                    case HTTP.HT /*9*/:
                        viewHolder.cvChatItemLeft.onPingMsg();
                        break;
                    case HTTP.LF /*10*/:
                        Log.d(TAG, "-- STICKER --");
                        viewHolder.cvChatItemLeft.onStickerMsg();
                        break;
                    default:
                        viewHolder.cvChatItemLeft.onNormalMsg(false);
                        break;
                }
                viewHolder.cvChatItemLeft.additionalProcess();
            }
        }
        return view;
    }

    public boolean isPositionChecked(int i) {
        Boolean bool = (Boolean) this.mSelection.get(Integer.valueOf(i));
        Log.v("checked", i + " result = " + bool);
        return bool == null ? false : bool.booleanValue();
    }

    public void removeAllSelection() {
        this.mSelection.clear();
        notifyDataSetChanged();
        Log.d(TAG, "remove all selection");
    }

    public void removeSelection(int i) {
        this.mSelection.remove(Integer.valueOf(i));
        notifyDataSetChanged();
    }

    public void setCancelFizlink(String str) {
        if (this.mProgressStateMap != null) {
            this.mProgressStateMap.put(str, Integer.valueOf(3));
        }
    }

    public void setFirstVisibleItem(int i) {
        this.mFirstItemToShow = i;
    }

    public void setLastReadMsgPos(int i) {
        this.mLastReadMsgPos = i;
    }

    public void setMaxMsg(int i) {
        this.mMaxMsg = i;
        Log.d(TAG, "msg count:" + this.mMaxMsg);
    }

    public void setMessageFull(List list) {
        this.mMessagesFull.addAll(list);
    }

    public void setNewSelection(int i, boolean z) {
        this.mSelection.put(Integer.valueOf(i), Boolean.valueOf(z));
        notifyDataSetChanged();
    }

    public void setProgress(Map map, Map map2) {
        this.mProgressMap = map;
        this.mProgressStateMap = map2;
    }

    public void setUnreadMsgCount(int i) {
        this.mUnreadCount = i;
        if (i > 0 && this.mData.size() > 0 && i < this.mData.size()) {
            ((Message) this.mData.get(this.mData.size() - this.mUnreadCount)).setIsUnread(true);
            ((Message) this.mData.get(this.mData.size() - this.mUnreadCount)).setUnreadMsgCount(i);
        }
    }

    public void setUpdateProgress(String str, int i, int i2) {
        this.mProgressMap.put(str, Integer.valueOf(i));
        this.mProgressStateMap.put(str, Integer.valueOf(i2));
    }
}
