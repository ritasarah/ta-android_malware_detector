package com.albus.adapter;

import android.app.Activity;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.albus.activity.ChatGroupConvActivity;
import com.albus.activity.ProfilesActivity;
import com.albus.activity.ProfilesFriendActivity;
import com.albus.activity.ProfilesGroupActivity;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.AlbusDialogInterface;
import com.albus.imagespan.SmiledText;
import com.albus.media.UserPhotoLoader;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.util.GroupMemberMenuModel;
import com.albus.view.CircleImageView;
import com.catfiz.R;
import com.catfiz.base.Catfiz;
import com.catfiz.base.Constant;
import com.catfiz.model.Group;
import com.catfiz.model.Profile;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishService;
import com.catfiz.util.Log;
import java.util.List;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.apache.http.protocol.HTTP;

public class ProfileGroupAdapter extends BaseAdapter {
    private static final String TAG = "ProfileGroupAdapter";
    private Activity mActivity = null;
    private List mData = null;
    private Profile mListItemValue = null;
    private UserPhotoLoader mUserPhotoLoader = null;
    private ViewHolder mVh = null;

    class ProfileGroupDialog implements AlbusDialogInterface {
        private GroupMemberMenuModel mMenu;

        public ProfileGroupDialog(GroupMemberMenuModel groupMemberMenuModel) {
            this.mMenu = groupMemberMenuModel;
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, final DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            TextView textView = (TextView) view.findViewById(R.id.tv_menu_title);
            TextView textView2 = (TextView) view.findViewById(R.id.tv_menu_profile);
            TextView textView3 = (TextView) view.findViewById(R.id.tv_menu_chat);
            TextView textView4 = (TextView) view.findViewById(R.id.tv_menu_remove_member);
            TextView textView5 = (TextView) view.findViewById(R.id.tv_menu_set_admin);
            Log.d(ProfileGroupAdapter.TAG, this.mMenu.getUser().getId() + " isfriend = " + this.mMenu.isFriend());
            textView.setText(this.mMenu.getUser().getName());
            if (this.mMenu.getGroup().getOwner().getId().equals(CatfishService.getUserPIN())) {
                textView4.setVisibility(0);
            } else {
                textView4.setVisibility(8);
            }
            textView5.setVisibility(8);
            if (this.mMenu.isFriend()) {
                textView2.setText(context.getResources().getString(R.string.menu_profile));
                textView3.setVisibility(0);
                textView2.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        User matchFriendData = Catfiz.matchFriendData(ProfileGroupDialog.this.mMenu.getUser().getId());
                        Log.d(ProfileGroupAdapter.TAG, "goToProfile:" + matchFriendData.getName() + "," + matchFriendData.getStatusSequence() + "," + matchFriendData.getStatusdate());
                        Intent intent = new Intent(ProfileGroupAdapter.this.mActivity, ProfilesFriendActivity.class);
                        intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, matchFriendData.getId());
                        intent.putExtra(CatfishDataStorage.NIC_NAME, matchFriendData.getName());
                        intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, matchFriendData.getStatusSequence());
                        intent.putExtra(AlbusModelObject.STATUS_LIKE, matchFriendData.getStatusLike());
                        intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, matchFriendData.isMeLikeThisStatus());
                        intent.putExtra(HTTP.IDENTITY_CODING, 5);
                        ProfileGroupAdapter.this.mActivity.startActivity(intent);
                        dialogFragment.dismiss();
                    }
                });
                textView3.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        Intent intent = new Intent(ProfileGroupAdapter.this.mActivity, ChatGroupConvActivity.class);
                        intent.putExtra(AlbusModelObject.PAGE, 1);
                        intent.putExtra(HTTP.IDENTITY_CODING, 14);
                        intent.putExtra(CatfishDataStorage.NIC_NAME, ProfileGroupDialog.this.mMenu.getUser().getName());
                        intent.putExtra(AlbusModelObject.FRIEND_ID, ProfileGroupDialog.this.mMenu.getUser().getId());
                        ProfileGroupAdapter.this.mActivity.startActivity(intent);
                        dialogFragment.dismiss();
                    }
                });
            } else {
                textView2.setText(context.getResources().getString(R.string.menu_add_friend));
                textView3.setVisibility(8);
                textView2.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        ((ProfilesGroupActivity) ProfileGroupAdapter.this.mActivity).requestAddFriend(ProfileGroupDialog.this.mMenu.getUser().getId());
                        dialogFragment.dismiss();
                    }
                });
            }
            textView4.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    ((ProfilesGroupActivity) ProfileGroupAdapter.this.mActivity).removeGroupMember(ProfileGroupDialog.this.mMenu.getGroup(), ProfileGroupDialog.this.mMenu.getUser(), ProfileGroupDialog.this.mMenu.getPosition());
                    dialogFragment.dismiss();
                }
            });
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    class ViewHolder {
        private ImageButton ibMenu;
        private ImageView ivIcon;
        private ImageView ivIconField;
        private ImageView ivIconList;
        private ImageView ivIconName;
        private LinearLayout llContainer;
        private LinearLayout llContainerTitle;
        private LinearLayout llItemProfile;
        private CircleImageView rivIcon;
        private LinearLayout rlItem;
        private RelativeLayout rlItemDynamic;
        private RelativeLayout rlItemDynamicList;
        private TextView tvMemberName;
        private TextView tvName;
        private TextView tvNic;
        private TextView tvStatus;
        private TextView tvTagHolder;
        private TextView tvTitle;
        private TextView tvValue;
        private View viewDiv;

        private ViewHolder() {
        }
    }

    public ProfileGroupAdapter(Activity activity, List list, UserPhotoLoader userPhotoLoader) {
        this.mActivity = activity;
        this.mData = list;
        this.mUserPhotoLoader = userPhotoLoader;
    }

    private void OpenGalleryExpand() {
    }

    public int getCount() {
        return this.mData.size();
    }

    public Object getItem(int i) {
        return Integer.valueOf(i);
    }

    public long getItemId(int i) {
        return (long) i;
    }

    public View getView(int i, View view, ViewGroup viewGroup) {
        this.mVh = new ViewHolder();
        this.mListItemValue = (Profile) this.mData.get(i);
        if (view == null) {
            view = ((LayoutInflater) this.mActivity.getSystemService("layout_inflater")).inflate(R.layout.item_profile_group, viewGroup, false);
            this.mVh.tvTitle = (TextView) view.findViewById(R.id.tv_profile_name);
            this.mVh.tvNic = (TextView) view.findViewById(R.id.tv_profile_desc);
            this.mVh.llContainerTitle = (LinearLayout) view.findViewById(R.id.ll_container_title);
            this.mVh.tvTagHolder = (TextView) view.findViewById(R.id.tag_holder);
            this.mVh.viewDiv = view.findViewById(R.id.view_line);
            this.mVh.tvName = (TextView) view.findViewById(R.id.tv_name_list_item);
            this.mVh.tvValue = (TextView) view.findViewById(R.id.tv_value);
            this.mVh.ivIconList = (ImageView) view.findViewById(R.id.iv_icon_list_item);
            this.mVh.ivIcon = (ImageView) view.findViewById(R.id.iv_icon_item);
            this.mVh.ivIconName = (ImageView) view.findViewById(R.id.iv_title_icon);
            this.mVh.ivIconField = (ImageView) view.findViewById(R.id.iv_icon_field);
            this.mVh.llItemProfile = (LinearLayout) view.findViewById(R.id.ll_profile_item_view);
            this.mVh.llContainer = (LinearLayout) view.findViewById(R.id.ll_container);
            this.mVh.rlItemDynamic = (RelativeLayout) view.findViewById(R.id.rl_item_dinamic);
            this.mVh.rlItemDynamicList = (RelativeLayout) view.findViewById(R.id.rl_item_dinamic_list);
            this.mVh.rivIcon = (CircleImageView) view.findViewById(R.id.riv_img);
            this.mVh.tvMemberName = (TextView) view.findViewById(R.id.tv_member_name);
            this.mVh.tvStatus = (TextView) view.findViewById(R.id.tv_member_status);
            this.mVh.rlItem = (LinearLayout) view.findViewById(R.id.ll_panel_member);
            this.mVh.ibMenu = (ImageButton) view.findViewById(R.id.ib_menu);
            this.mVh.tvNic.setVisibility(8);
            this.mVh.rlItem.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    String str = (String) ((TextView) view.findViewById(R.id.tv_member_name)).getTag();
                    ((Long) ((TextView) view.findViewById(R.id.tv_member_status)).getTag()).longValue();
                    if (str.equals(CatfishService.getUserPIN())) {
                        ProfileGroupAdapter.this.mActivity.startActivity(new Intent(ProfileGroupAdapter.this.mActivity, ProfilesActivity.class));
                        return;
                    }
                    GroupMemberMenuModel groupMemberMenuModel = (GroupMemberMenuModel) ((ImageButton) view.findViewById(R.id.ib_menu)).getTag();
                    Bundle bundle = new Bundle();
                    bundle.putInt(AlbusModelObject.DIALOG, 33);
                    AlbusDialog.showDialog(33, new ProfileGroupDialog(groupMemberMenuModel), ProfileGroupAdapter.this.mActivity, bundle, ((ProfilesGroupActivity) ProfileGroupAdapter.this.mActivity).getSupportFragmentManager());
                }
            });
            this.mVh.ibMenu.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    GroupMemberMenuModel groupMemberMenuModel = (GroupMemberMenuModel) view.getTag();
                    Bundle bundle = new Bundle();
                    bundle.putInt(AlbusModelObject.DIALOG, 33);
                    AlbusDialog.showDialog(33, new ProfileGroupDialog(groupMemberMenuModel), ProfileGroupAdapter.this.mActivity, bundle, ((ProfilesGroupActivity) ProfileGroupAdapter.this.mActivity).getSupportFragmentManager());
                }
            });
            view.setTag(this.mVh);
        } else {
            this.mVh = (ViewHolder) view.getTag();
        }
        Group group = this.mListItemValue.getGroup();
        int listItemType = this.mListItemValue.getListItemType();
        this.mVh.tvTagHolder.setTag(Integer.valueOf(listItemType));
        switch (listItemType) {
            case e.b /*1*/:
                Log.d(TAG, "PG_NAME");
                this.mVh.llContainerTitle.setVisibility(0);
                this.mVh.llContainer.setVisibility(8);
                this.mVh.llItemProfile.setVisibility(0);
                this.mVh.rlItem.setVisibility(8);
                this.mVh.tvTitle.setText(SmiledText.getSmiledText(this.mActivity, group.getName(), this.mVh.tvTitle));
                if (group.getType().equals(Constant.GROUP_OPEN)) {
                    this.mVh.ivIconName.setVisibility(0);
                    this.mVh.tvNic.setText(this.mActivity.getResources().getString(R.string.open_group));
                } else {
                    this.mVh.tvNic.setText(this.mActivity.getResources().getString(R.string.close_group));
                    this.mVh.ivIconName.setVisibility(4);
                }
                this.mVh.rlItemDynamicList.setVisibility(8);
                this.mVh.rlItemDynamic.setVisibility(8);
                break;
            case e.c /*2*/:
                Log.d(TAG, "PG_INVITE");
                this.mVh.llContainerTitle.setVisibility(8);
                this.mVh.llContainer.setVisibility(0);
                this.mVh.llItemProfile.setVisibility(0);
                this.mVh.rlItem.setVisibility(8);
                this.mVh.tvName.setText(R.string.invite);
                this.mVh.tvName.setTextAppearance(this.mActivity, R.style.Subhead2.Black);
                this.mVh.ivIconList.setVisibility(4);
                this.mVh.ivIconField.setVisibility(0);
                this.mVh.ivIconField.setImageResource(R.drawable.df_create_new);
                this.mVh.rlItemDynamicList.setVisibility(0);
                this.mVh.rlItemDynamic.setVisibility(8);
                this.mVh.viewDiv.setVisibility(8);
                break;
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                Log.d(TAG, "PG_MEMBER");
                this.mVh.llContainerTitle.setVisibility(8);
                this.mVh.llContainer.setVisibility(0);
                this.mVh.llItemProfile.setVisibility(0);
                this.mVh.rlItem.setVisibility(8);
                String string = this.mActivity.getResources().getString(R.string.member_count);
                CharSequence charSequence = (group.getMembersCount() <= 1 || !AlbusUtils.isLocale("en")) ? "" + group.getMembersCount() + " " + string : "" + group.getMembersCount() + " " + string + "s";
                this.mVh.tvName.setText(charSequence);
                this.mVh.tvName.setTextAppearance(this.mActivity, R.style.Body2.Trans);
                this.mVh.ivIconList.setVisibility(0);
                this.mVh.ivIconList.setImageResource(R.drawable.ic_search_dark);
                this.mVh.ivIconField.setVisibility(8);
                this.mVh.rlItemDynamicList.setVisibility(0);
                this.mVh.rlItemDynamic.setVisibility(8);
                this.mVh.viewDiv.setVisibility(8);
                break;
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                Log.d(TAG, "PG_NOTE");
                this.mVh.llContainerTitle.setVisibility(8);
                this.mVh.llContainer.setVisibility(0);
                this.mVh.llItemProfile.setVisibility(0);
                this.mVh.rlItem.setVisibility(8);
                this.mVh.tvValue.setText(SmiledText.getSmiledText(this.mActivity, group.getNotes(), this.mVh.tvValue));
                if (group.getType().equals(Constant.GROUP_CLOSE)) {
                    this.mVh.ivIcon.setVisibility(4);
                } else {
                    this.mVh.ivIcon.setVisibility(0);
                }
                this.mVh.rlItemDynamicList.setVisibility(8);
                this.mVh.rlItemDynamic.setVisibility(0);
                this.mVh.viewDiv.setVisibility(0);
                break;
            case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                Log.d(TAG, "PG_SHARED");
                break;
            case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                User user = this.mListItemValue.getUser();
                this.mVh.llContainerTitle.setVisibility(8);
                this.mVh.llContainer.setVisibility(0);
                this.mVh.llItemProfile.setVisibility(8);
                this.mVh.rlItem.setVisibility(0);
                this.mVh.rlItemDynamicList.setVisibility(8);
                this.mVh.rlItemDynamic.setVisibility(8);
                User owner = group.getOwner();
                this.mVh.rivIcon.setImageResource(R.drawable.df_pict);
                Log.d(TAG, "name:" + user.getName());
                this.mVh.tvMemberName.setText(SmiledText.getSmiledText(this.mActivity, user.getName(), this.mVh.tvMemberName));
                this.mVh.tvMemberName.setTag(user.getId());
                this.mVh.tvStatus.setTag(Long.valueOf(user.getStatusSequence()));
                GroupMemberMenuModel groupMemberMenuModel = new GroupMemberMenuModel();
                groupMemberMenuModel.setUser(user);
                groupMemberMenuModel.setGroup(group);
                groupMemberMenuModel.setIsFriend(((ProfilesGroupActivity) this.mActivity).checkIsFriends(groupMemberMenuModel));
                groupMemberMenuModel.setPosition(i);
                this.mVh.ibMenu.setTag(groupMemberMenuModel);
                Log.d(TAG, "id=" + user.getId() + " owner=" + owner.getName() + "-" + owner.getId());
                if (user.getId().equals(owner.getId())) {
                    this.mVh.tvStatus.setVisibility(0);
                    this.mVh.tvStatus.setText(this.mActivity.getString(R.string.owner_created).replace("[time]", AlbusUtils.getLastChatTimeActivities("" + group.getCreateDate(), this.mActivity, false)));
                } else {
                    this.mVh.tvStatus.setVisibility(8);
                }
                if (user.getId().equals(CatfishService.getUserPIN())) {
                    this.mVh.ibMenu.setVisibility(8);
                    if (this.mUserPhotoLoader != null) {
                        this.mUserPhotoLoader.loadUserPhoto(user.getId(), this.mVh.rivIcon);
                    }
                } else {
                    this.mVh.ibMenu.setVisibility(0);
                    if (this.mUserPhotoLoader != null) {
                        this.mUserPhotoLoader.loadFriendPhoto(user.getId(), this.mVh.rivIcon);
                    }
                }
                this.mVh.viewDiv.setVisibility(8);
                break;
        }
        return view;
    }

    public boolean isEnabled(int i) {
        Group group = ((Profile) this.mData.get(i)).getGroup();
        int listItemType = ((Profile) this.mData.get(i)).getListItemType();
        return group.getType().equals(Constant.GROUP_OPEN) ? super.isEnabled(i) : listItemType == 1 ? super.isEnabled(i) : listItemType == 3 ? super.isEnabled(i) : false;
    }
}
