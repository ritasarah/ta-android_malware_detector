package com.albus.media.videoplayer.internal;

import android.os.Parcel;
import com.catfiz.util.Log;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Set;
import java.util.TimeZone;

public class Metadata {
    public static final int ALBUM = 8;
    public static final int ALBUM_ART = 18;
    public static final int ANY = 0;
    public static final int ARTIST = 9;
    public static final int AUDIO_BIT_RATE = 21;
    public static final int AUDIO_CODEC = 26;
    public static final int AUDIO_SAMPLE_RATE = 23;
    public static final int AUTHOR = 10;
    public static final int BIT_RATE = 20;
    public static final int BOOLEAN_VAL = 3;
    public static final int BYTE_ARRAY_VAL = 7;
    public static final int CD_TRACK_MAX = 16;
    public static final int CD_TRACK_NUM = 15;
    public static final int COMMENT = 6;
    public static final int COMPOSER = 11;
    public static final int COPYRIGHT = 7;
    public static final int DATE = 13;
    public static final int DATE_VAL = 6;
    public static final int DOUBLE_VAL = 5;
    public static final int DRM_CRIPPLED = 31;
    public static final int DURATION = 14;
    private static final int FIRST_CUSTOM = 8192;
    public static final int GENRE = 12;
    public static final int INTEGER_VAL = 2;
    private static final int LAST_SYSTEM = 31;
    private static final int LAST_TYPE = 7;
    public static final int LONG_VAL = 4;
    public static final Set MATCH_ALL = Collections.singleton(Integer.valueOf(ANY));
    public static final Set MATCH_NONE = Collections.EMPTY_SET;
    public static final int MIME_TYPE = 25;
    public static final int NUM_TRACKS = 30;
    public static final int PAUSE_AVAILABLE = 1;
    public static final int RATING = 17;
    public static final int SEEK_AVAILABLE = 4;
    public static final int SEEK_BACKWARD_AVAILABLE = 2;
    public static final int SEEK_FORWARD_AVAILABLE = 3;
    public static final int STRING_VAL = 1;
    private static final String TAG = "media.Metadata";
    public static final int TITLE = 5;
    public static final int VIDEO_BIT_RATE = 22;
    public static final int VIDEO_CODEC = 27;
    public static final int VIDEO_FRAME = 19;
    public static final int VIDEO_FRAME_RATE = 24;
    public static final int VIDEO_HEIGHT = 28;
    public static final int VIDEO_WIDTH = 29;
    private static final int kInt32Size = 4;
    private static final int kMetaHeaderSize = 8;
    private static final int kMetaMarker = 1296389185;
    private static final int kRecordHeaderSize = 12;
    private final HashMap mKeyToPosMap = new HashMap();
    private Parcel mParcel;

    private boolean checkMetadataId(int i) {
        if (i > 0 && (LAST_SYSTEM >= i || i >= FIRST_CUSTOM)) {
            return true;
        }
        Log.e(TAG, "Invalid metadata ID " + i);
        return false;
    }

    private void checkType(int i, int i2) {
        this.mParcel.setDataPosition(((Integer) this.mKeyToPosMap.get(Integer.valueOf(i))).intValue());
        int readInt = this.mParcel.readInt();
        if (readInt != i2) {
            throw new IllegalStateException("Wrong type " + i2 + " but got " + readInt);
        }
    }

    public static int firstCustomId() {
        return FIRST_CUSTOM;
    }

    public static int lastSytemId() {
        return LAST_SYSTEM;
    }

    public static int lastType() {
        return LAST_TYPE;
    }

    private boolean scanAllRecords(Parcel parcel, int i) {
        boolean z;
        this.mKeyToPosMap.clear();
        int i2 = ANY;
        while (i > kRecordHeaderSize) {
            int dataPosition = parcel.dataPosition();
            int readInt = parcel.readInt();
            if (readInt <= kRecordHeaderSize) {
                Log.e(TAG, "Record is too short");
                z = true;
                break;
            }
            int readInt2 = parcel.readInt();
            if (!checkMetadataId(readInt2)) {
                z = true;
                break;
            } else if (this.mKeyToPosMap.containsKey(Integer.valueOf(readInt2))) {
                Log.e(TAG, "Duplicate metadata ID found");
                z = true;
                break;
            } else {
                this.mKeyToPosMap.put(Integer.valueOf(readInt2), Integer.valueOf(parcel.dataPosition()));
                readInt2 = parcel.readInt();
                if (readInt2 <= 0 || readInt2 > LAST_TYPE) {
                    Log.e(TAG, "Invalid metadata type " + readInt2);
                    z = true;
                    break;
                }
                parcel.setDataPosition(dataPosition + readInt);
                i -= readInt;
                i2 += STRING_VAL;
            }
        }
        z = ANY;
        if (i == 0 && !r2) {
            return true;
        }
        Log.e(TAG, "Ran out of data or error on record " + i2);
        this.mKeyToPosMap.clear();
        return false;
    }

    public boolean getBoolean(int i) {
        checkType(i, SEEK_FORWARD_AVAILABLE);
        return this.mParcel.readInt() == STRING_VAL;
    }

    public byte[] getByteArray(int i) {
        checkType(i, LAST_TYPE);
        return this.mParcel.createByteArray();
    }

    public Date getDate(int i) {
        checkType(i, DATE_VAL);
        long readLong = this.mParcel.readLong();
        String readString = this.mParcel.readString();
        if (readString.length() == 0) {
            return new Date(readLong);
        }
        Calendar instance = Calendar.getInstance(TimeZone.getTimeZone(readString));
        instance.setTimeInMillis(readLong);
        return instance.getTime();
    }

    public double getDouble(int i) {
        checkType(i, TITLE);
        return this.mParcel.readDouble();
    }

    public int getInt(int i) {
        checkType(i, SEEK_BACKWARD_AVAILABLE);
        return this.mParcel.readInt();
    }

    public long getLong(int i) {
        checkType(i, kInt32Size);
        return this.mParcel.readLong();
    }

    public String getString(int i) {
        checkType(i, STRING_VAL);
        return this.mParcel.readString();
    }

    public boolean has(int i) {
        if (checkMetadataId(i)) {
            return this.mKeyToPosMap.containsKey(Integer.valueOf(i));
        }
        throw new IllegalArgumentException("Invalid key: " + i);
    }

    public Set keySet() {
        return this.mKeyToPosMap.keySet();
    }

    public boolean parse(Parcel parcel) {
        if (parcel.dataAvail() < kMetaHeaderSize) {
            Log.e(TAG, "Not enough data " + parcel.dataAvail());
            return false;
        }
        int dataPosition = parcel.dataPosition();
        int readInt = parcel.readInt();
        if (parcel.dataAvail() + kInt32Size < readInt || readInt < kMetaHeaderSize) {
            Log.e(TAG, "Bad size " + readInt + " avail " + parcel.dataAvail() + " position " + dataPosition);
            parcel.setDataPosition(dataPosition);
            return false;
        }
        int readInt2 = parcel.readInt();
        if (readInt2 != kMetaMarker) {
            Log.e(TAG, "Marker missing " + Integer.toHexString(readInt2));
            parcel.setDataPosition(dataPosition);
            return false;
        } else if (scanAllRecords(parcel, readInt - 8)) {
            this.mParcel = parcel;
            return true;
        } else {
            parcel.setDataPosition(dataPosition);
            return false;
        }
    }
}
