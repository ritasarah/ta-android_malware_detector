package com.albus.media.videoplayer;

import android.content.Context;
import android.os.Handler;
import android.os.Message;
import android.support.v4.media.TransportMediator;
import android.util.AttributeSet;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.view.WindowManager.LayoutParams;
import android.widget.FrameLayout;
import android.widget.ProgressBar;
import android.widget.SeekBar;
import android.widget.SeekBar.OnSeekBarChangeListener;
import android.widget.TextView;
import com.albus.media.videoplayer.internal.PolicyManager;
import com.catfiz.R;
import com.catfiz.consts.CatfizMsgTypes;
import com.catfiz.service.VoiceBcastUploadExecutor;
import com.catfiz.util.Log;
import java.lang.ref.WeakReference;
import java.util.Formatter;
import java.util.Locale;
import org.apache.http.conn.routing.HttpRouteDirector;

public class MediaController extends FrameLayout {
    private static final int FADE_OUT = 1;
    private static final int SHOW_PROGRESS = 2;
    private static final String TAG = "MediaController";
    private static MCHandler mHandler = null;
    private static final int sDefaultTimeout = 3000;
    private View mAnchor;
    private Context mContext;
    private TextView mCurrentTime;
    private View mDecor;
    private LayoutParams mDecorLayoutParams;
    private boolean mDragging;
    private TextView mEndTime;
    private OnClickListener mFfwdListener;
    StringBuilder mFormatBuilder;
    Formatter mFormatter;
    private boolean mFromXml;
    private boolean mListenersSet;
    private OnClickListener mNextListener;
    private OnClickListener mPauseListener;
    private MediaPlayerControl mPlayer;
    private OnClickListener mPrevListener;
    private ProgressBar mProgress;
    private OnClickListener mRewListener;
    private View mRoot;
    private OnSeekBarChangeListener mSeekListener;
    private boolean mShowing;
    private OnTouchListener mTouchListener;
    private boolean mUseFastForward;
    private Window mWindow;
    private WindowManager mWindowManager;

    class MCHandler extends Handler {
        private WeakReference mThisClassRef = null;

        public MCHandler(MediaController mediaController) {
            this.mThisClassRef = new WeakReference(mediaController);
        }

        public void handleMessage(Message message) {
            if (this.mThisClassRef != null) {
                MediaController mediaController = (MediaController) this.mThisClassRef.get();
                if (mediaController != null) {
                    switch (message.what) {
                        case MediaController.FADE_OUT /*1*/:
                            mediaController.hide();
                            return;
                        case MediaController.SHOW_PROGRESS /*2*/:
                            int access$100 = mediaController.setProgress();
                            if (!mediaController.mDragging && mediaController.mShowing && mediaController.mPlayer.isPlaying()) {
                                sendMessageDelayed(obtainMessage(MediaController.SHOW_PROGRESS), (long) (1000 - (access$100 % CatfizMsgTypes.NICSUBTYPE_PARTNER)));
                                return;
                            }
                            return;
                        default:
                            return;
                    }
                }
            }
        }
    }

    public interface MediaPlayerControl {
        boolean canPause();

        boolean canSeekBackward();

        boolean canSeekForward();

        int getAudioSessionId();

        int getBufferPercentage();

        int getCurrentPosition();

        int getDuration();

        boolean isPlaying();

        void pause();

        void seekTo(int i);

        void setFullscreen(boolean z);

        void start();
    }

    public MediaController(Context context) {
        this(context, true);
    }

    public MediaController(Context context, AttributeSet attributeSet) {
        super(context, attributeSet);
        this.mTouchListener = new OnTouchListener() {
            public boolean onTouch(View view, MotionEvent motionEvent) {
                if (motionEvent.getAction() == 0 && MediaController.this.mShowing) {
                    MediaController.this.hide();
                }
                return false;
            }
        };
        this.mPauseListener = new OnClickListener() {
            public void onClick(View view) {
                MediaController.this.doPauseResume();
                MediaController.this.show(MediaController.sDefaultTimeout);
            }
        };
        this.mSeekListener = new OnSeekBarChangeListener() {
            public void onProgressChanged(SeekBar seekBar, int i, boolean z) {
                if (z) {
                    long duration = (((long) MediaController.this.mPlayer.getDuration()) * ((long) i)) / 1000;
                    MediaController.this.mPlayer.seekTo((int) duration);
                    if (MediaController.this.mCurrentTime != null) {
                        MediaController.this.mCurrentTime.setText(MediaController.this.stringForTime((int) duration));
                    }
                }
            }

            public void onStartTrackingTouch(SeekBar seekBar) {
                MediaController.this.show(3600000);
                MediaController.this.mDragging = true;
                MediaController.mHandler.removeMessages(MediaController.SHOW_PROGRESS);
            }

            public void onStopTrackingTouch(SeekBar seekBar) {
                MediaController.this.mDragging = false;
                MediaController.this.setProgress();
                MediaController.this.show(MediaController.sDefaultTimeout);
                MediaController.mHandler.sendEmptyMessage(MediaController.SHOW_PROGRESS);
            }
        };
        this.mRewListener = new OnClickListener() {
            public void onClick(View view) {
                MediaController.this.mPlayer.seekTo(MediaController.this.mPlayer.getCurrentPosition() - 5000);
                MediaController.this.setProgress();
                MediaController.this.show(MediaController.sDefaultTimeout);
            }
        };
        this.mFfwdListener = new OnClickListener() {
            public void onClick(View view) {
                MediaController.this.mPlayer.seekTo(MediaController.this.mPlayer.getCurrentPosition() + 15000);
                MediaController.this.setProgress();
                MediaController.this.show(MediaController.sDefaultTimeout);
            }
        };
        this.mRoot = this;
        this.mContext = context;
        this.mUseFastForward = true;
        this.mFromXml = true;
        mHandler = new MCHandler(this);
    }

    public MediaController(Context context, boolean z) {
        super(context);
        this.mTouchListener = /* anonymous class already generated */;
        this.mPauseListener = /* anonymous class already generated */;
        this.mSeekListener = /* anonymous class already generated */;
        this.mRewListener = /* anonymous class already generated */;
        this.mFfwdListener = /* anonymous class already generated */;
        this.mContext = context;
        this.mUseFastForward = z;
        initFloatingWindowLayout();
        initFloatingWindow();
        mHandler = new MCHandler(this);
    }

    private void doPauseResume() {
        if (this.mPlayer.isPlaying()) {
            this.mPlayer.pause();
        } else {
            this.mPlayer.start();
        }
    }

    private void initControllerView(View view) {
        this.mProgress = (ProgressBar) view.findViewById(R.id.mediacontroller_progress);
        if (this.mProgress != null) {
            if (this.mProgress instanceof SeekBar) {
                ((SeekBar) this.mProgress).setOnSeekBarChangeListener(this.mSeekListener);
            }
            this.mProgress.setMax(CatfizMsgTypes.NICSUBTYPE_PARTNER);
        }
        this.mEndTime = (TextView) view.findViewById(R.id.time);
        this.mCurrentTime = (TextView) view.findViewById(R.id.time_current);
        this.mFormatBuilder = new StringBuilder();
        this.mFormatter = new Formatter(this.mFormatBuilder, Locale.getDefault());
    }

    private void initFloatingWindow() {
        this.mWindowManager = (WindowManager) this.mContext.getSystemService("window");
        try {
            this.mWindow = PolicyManager.makenewwindow(this.mContext);
            this.mWindow.setWindowManager(this.mWindowManager, null, null);
            this.mWindow.requestFeature(FADE_OUT);
            this.mDecor = this.mWindow.getDecorView();
            this.mDecor.setOnTouchListener(this.mTouchListener);
            this.mWindow.setContentView(this);
            this.mWindow.setBackgroundDrawableResource(17170445);
            this.mWindow.setVolumeControlStream(3);
            setFocusable(true);
            setFocusableInTouchMode(true);
            setDescendantFocusability(VoiceBcastUploadExecutor.mChunkMaxSize);
            requestFocus();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void initFloatingWindowLayout() {
        this.mDecorLayoutParams = new LayoutParams();
        LayoutParams layoutParams = this.mDecorLayoutParams;
        layoutParams.gravity = 51;
        layoutParams.height = -2;
        layoutParams.x = 0;
        layoutParams.format = -3;
        layoutParams.type = CatfizMsgTypes.NICSUBTYPE_PARTNER;
        layoutParams.flags |= 8519712;
        layoutParams.token = null;
        layoutParams.windowAnimations = 0;
    }

    private void installPrevNextListeners() {
    }

    private int setProgress() {
        if (this.mPlayer == null || this.mDragging) {
            return 0;
        }
        int currentPosition = this.mPlayer.getCurrentPosition();
        int duration = this.mPlayer.getDuration();
        if (this.mProgress != null) {
            if (duration > 0) {
                this.mProgress.setProgress((int) ((1000 * ((long) currentPosition)) / ((long) duration)));
            }
            this.mProgress.setSecondaryProgress(this.mPlayer.getBufferPercentage() * 10);
        }
        if (this.mEndTime != null) {
            this.mEndTime.setText(stringForTime(duration));
        }
        if (this.mCurrentTime == null) {
            return currentPosition;
        }
        this.mCurrentTime.setText(stringForTime(currentPosition));
        return currentPosition;
    }

    private String stringForTime(int i) {
        int i2 = i / CatfizMsgTypes.NICSUBTYPE_PARTNER;
        int i3 = i2 % 60;
        int i4 = (i2 / 60) % 60;
        i2 /= 3600;
        this.mFormatBuilder.setLength(0);
        if (i2 > 0) {
            return this.mFormatter.format("%d:%02d:%02d", new Object[]{Integer.valueOf(i2), Integer.valueOf(i4), Integer.valueOf(i3)}).toString();
        }
        Object[] objArr = new Object[SHOW_PROGRESS];
        objArr[0] = Integer.valueOf(i4);
        objArr[FADE_OUT] = Integer.valueOf(i3);
        return this.mFormatter.format("%02d:%02d", objArr).toString();
    }

    private void updateFloatingWindowLayout() {
        int[] iArr = new int[SHOW_PROGRESS];
        this.mAnchor.getLocationOnScreen(iArr);
        this.mDecor.measure(MeasureSpec.makeMeasureSpec(this.mAnchor.getWidth(), RtlSpacingHelper.UNDEFINED), MeasureSpec.makeMeasureSpec(this.mAnchor.getHeight(), RtlSpacingHelper.UNDEFINED));
        LayoutParams layoutParams = this.mDecorLayoutParams;
        layoutParams.width = this.mAnchor.getWidth();
        layoutParams.x = iArr[0] + ((this.mAnchor.getWidth() - layoutParams.width) / SHOW_PROGRESS);
        layoutParams.y = (iArr[FADE_OUT] + this.mAnchor.getHeight()) - this.mDecor.getMeasuredHeight();
    }

    public boolean dispatchKeyEvent(KeyEvent keyEvent) {
        int keyCode = keyEvent.getKeyCode();
        boolean z = keyEvent.getRepeatCount() == 0 && keyEvent.getAction() == 0;
        if (keyCode == 79 || keyCode == 85 || keyCode == 62) {
            if (!z) {
                return true;
            }
            doPauseResume();
            show(sDefaultTimeout);
            return true;
        } else if (keyCode == TransportMediator.KEYCODE_MEDIA_PLAY) {
            if (!z || this.mPlayer.isPlaying()) {
                return true;
            }
            this.mPlayer.start();
            show(sDefaultTimeout);
            return true;
        } else if (keyCode == 86 || keyCode == TransportMediator.KEYCODE_MEDIA_PAUSE) {
            if (!z || !this.mPlayer.isPlaying()) {
                return true;
            }
            this.mPlayer.pause();
            show(sDefaultTimeout);
            return true;
        } else if (keyCode == 25 || keyCode == 24 || keyCode == 164 || keyCode == 27) {
            return super.dispatchKeyEvent(keyEvent);
        } else {
            if (keyCode != 4 && keyCode != 82) {
                show(sDefaultTimeout);
                return super.dispatchKeyEvent(keyEvent);
            } else if (!z) {
                return true;
            } else {
                hide();
                return true;
            }
        }
    }

    public void hide() {
        if (this.mAnchor != null && this.mShowing) {
            try {
                mHandler.removeMessages(SHOW_PROGRESS);
                this.mWindowManager.removeView(this.mDecor);
            } catch (IllegalArgumentException e) {
                Log.d(TAG, "already removed");
            }
            this.mShowing = false;
        }
    }

    public boolean isShowing() {
        return this.mShowing;
    }

    protected View makeControllerView() {
        this.mRoot = ((LayoutInflater) this.mContext.getSystemService("layout_inflater")).inflate(R.layout.videoplayer_media_controller, null);
        initControllerView(this.mRoot);
        return this.mRoot;
    }

    public void onFinishInflate() {
        if (this.mRoot != null) {
            initControllerView(this.mRoot);
        }
    }

    public boolean onTouchEvent(MotionEvent motionEvent) {
        switch (motionEvent.getAction()) {
            case e.a /*0*/:
                show(0);
                break;
            case FADE_OUT /*1*/:
                show(sDefaultTimeout);
                break;
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                hide();
                break;
        }
        return true;
    }

    public boolean onTrackballEvent(MotionEvent motionEvent) {
        show(sDefaultTimeout);
        return false;
    }

    public void setAnchorView(View view) {
        this.mAnchor = view;
        ViewGroup.LayoutParams layoutParams = new FrameLayout.LayoutParams(-1, -1);
        removeAllViews();
        addView(makeControllerView(), layoutParams);
    }

    public void setEnabled(boolean z) {
        if (this.mProgress != null) {
            this.mProgress.setEnabled(z);
        }
        super.setEnabled(z);
    }

    public void setMediaPlayer(MediaPlayerControl mediaPlayerControl) {
        this.mPlayer = mediaPlayerControl;
    }

    public void setPrevNextListeners(OnClickListener onClickListener, OnClickListener onClickListener2) {
        this.mNextListener = onClickListener;
        this.mPrevListener = onClickListener2;
        this.mListenersSet = true;
        if (this.mRoot != null) {
            installPrevNextListeners();
        }
    }

    public void show() {
        show(sDefaultTimeout);
    }

    public void show(int i) {
        if (!(this.mShowing || this.mAnchor == null)) {
            setProgress();
            updateFloatingWindowLayout();
            this.mWindowManager.addView(this.mDecor, this.mDecorLayoutParams);
            this.mShowing = true;
        }
        mHandler.sendEmptyMessage(SHOW_PROGRESS);
        Message obtainMessage = mHandler.obtainMessage(FADE_OUT);
        if (i != 0) {
            mHandler.removeMessages(FADE_OUT);
            mHandler.sendMessageDelayed(obtainMessage, (long) i);
        }
    }
}
