package com.albus.media;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.graphics.PointF;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.ScaleGestureDetector;
import android.view.ScaleGestureDetector.SimpleOnScaleGestureListener;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.View.OnTouchListener;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;

public class ScaleImageView extends ImageView {
    static final int CLICK = 3;
    static final int DRAG = 1;
    static final int NONE = 0;
    private static final String TAG = "ScaleImageView";
    static final int ZOOM = 2;
    float bmHeight;
    float bmWidth;
    float bottom;
    Context context;
    float height;
    PointF last = new PointF();
    float[] m;
    ScaleGestureDetector mScaleDetector;
    Matrix matrix = new Matrix();
    float maxScale = 4.0f;
    float minScale = 1.0f;
    int mode = NONE;
    float origHeight;
    float origWidth;
    float redundantXSpace;
    float redundantYSpace;
    float right;
    float saveScale = 1.0f;
    PointF start = new PointF();
    float width;

    class ScaleListener extends SimpleOnScaleGestureListener {
        private ScaleListener() {
        }

        public boolean onScale(ScaleGestureDetector scaleGestureDetector) {
            float scaleFactor = scaleGestureDetector.getScaleFactor();
            float f = ScaleImageView.this.saveScale;
            ScaleImageView scaleImageView = ScaleImageView.this;
            scaleImageView.saveScale *= scaleFactor;
            if (ScaleImageView.this.saveScale > ScaleImageView.this.maxScale) {
                ScaleImageView.this.saveScale = ScaleImageView.this.maxScale;
                scaleFactor = ScaleImageView.this.maxScale / f;
            } else if (ScaleImageView.this.saveScale < ScaleImageView.this.minScale) {
                ScaleImageView.this.saveScale = ScaleImageView.this.minScale;
                scaleFactor = ScaleImageView.this.minScale / f;
            }
            ScaleImageView.this.right = ((ScaleImageView.this.width * ScaleImageView.this.saveScale) - ScaleImageView.this.width) - ((ScaleImageView.this.redundantXSpace * 2.0f) * ScaleImageView.this.saveScale);
            ScaleImageView.this.bottom = ((ScaleImageView.this.height * ScaleImageView.this.saveScale) - ScaleImageView.this.height) - ((ScaleImageView.this.redundantYSpace * 2.0f) * ScaleImageView.this.saveScale);
            float f2;
            if (ScaleImageView.this.origWidth * ScaleImageView.this.saveScale <= ScaleImageView.this.width || ScaleImageView.this.origHeight * ScaleImageView.this.saveScale <= ScaleImageView.this.height) {
                ScaleImageView.this.matrix.postScale(scaleFactor, scaleFactor, ScaleImageView.this.width / 2.0f, ScaleImageView.this.height / 2.0f);
                if (scaleFactor < 1.0f) {
                    ScaleImageView.this.matrix.getValues(ScaleImageView.this.m);
                    f = ScaleImageView.this.m[ScaleImageView.ZOOM];
                    f2 = ScaleImageView.this.m[5];
                    if (scaleFactor < 1.0f) {
                        if (((float) Math.round(ScaleImageView.this.origWidth * ScaleImageView.this.saveScale)) < ScaleImageView.this.width) {
                            if (f2 < (-ScaleImageView.this.bottom)) {
                                ScaleImageView.this.matrix.postTranslate(0.0f, -(ScaleImageView.this.bottom + f2));
                            } else if (f2 > 0.0f) {
                                ScaleImageView.this.matrix.postTranslate(0.0f, -f2);
                            }
                        } else if (f < (-ScaleImageView.this.right)) {
                            ScaleImageView.this.matrix.postTranslate(-(f + ScaleImageView.this.right), 0.0f);
                        } else if (f > 0.0f) {
                            ScaleImageView.this.matrix.postTranslate(-f, 0.0f);
                        }
                    }
                }
            } else {
                ScaleImageView.this.matrix.postScale(scaleFactor, scaleFactor, scaleGestureDetector.getFocusX(), scaleGestureDetector.getFocusY());
                ScaleImageView.this.matrix.getValues(ScaleImageView.this.m);
                f = ScaleImageView.this.m[ScaleImageView.ZOOM];
                f2 = ScaleImageView.this.m[5];
                if (scaleFactor < 1.0f) {
                    if (f < (-ScaleImageView.this.right)) {
                        ScaleImageView.this.matrix.postTranslate(-(f + ScaleImageView.this.right), 0.0f);
                    } else if (f > 0.0f) {
                        ScaleImageView.this.matrix.postTranslate(-f, 0.0f);
                    }
                    if (f2 < (-ScaleImageView.this.bottom)) {
                        ScaleImageView.this.matrix.postTranslate(0.0f, -(ScaleImageView.this.bottom + f2));
                    } else if (f2 > 0.0f) {
                        ScaleImageView.this.matrix.postTranslate(0.0f, -f2);
                    }
                }
            }
            return true;
        }

        public boolean onScaleBegin(ScaleGestureDetector scaleGestureDetector) {
            ScaleImageView.this.mode = ScaleImageView.ZOOM;
            return true;
        }
    }

    public ScaleImageView(Context context, AttributeSet attributeSet) {
        super(context, attributeSet);
        super.setClickable(true);
        this.context = context;
        this.mScaleDetector = new ScaleGestureDetector(context, new ScaleListener());
        this.matrix.setTranslate(1.0f, 1.0f);
        this.m = new float[9];
        setImageMatrix(this.matrix);
        setScaleType(ScaleType.MATRIX);
        setOnTouchListener(new OnTouchListener() {
            public boolean onTouch(View view, MotionEvent motionEvent) {
                float f = 0.0f;
                ScaleImageView.this.mScaleDetector.onTouchEvent(motionEvent);
                ScaleImageView.this.matrix.getValues(ScaleImageView.this.m);
                float f2 = ScaleImageView.this.m[ScaleImageView.ZOOM];
                float f3 = ScaleImageView.this.m[5];
                PointF pointF = new PointF(motionEvent.getX(), motionEvent.getY());
                switch (motionEvent.getAction()) {
                    case ScaleImageView.NONE /*0*/:
                        ScaleImageView.this.last.set(motionEvent.getX(), motionEvent.getY());
                        ScaleImageView.this.start.set(ScaleImageView.this.last);
                        ScaleImageView.this.mode = ScaleImageView.DRAG;
                        break;
                    case ScaleImageView.DRAG /*1*/:
                        ScaleImageView.this.mode = ScaleImageView.NONE;
                        int abs = (int) Math.abs(pointF.y - ScaleImageView.this.start.y);
                        if (((int) Math.abs(pointF.x - ScaleImageView.this.start.x)) < ScaleImageView.CLICK && abs < ScaleImageView.CLICK) {
                            ScaleImageView.this.performClick();
                            break;
                        }
                    case ScaleImageView.ZOOM /*2*/:
                        if (ScaleImageView.this.mode == ScaleImageView.ZOOM || (ScaleImageView.this.mode == ScaleImageView.DRAG && ScaleImageView.this.saveScale > ScaleImageView.this.minScale)) {
                            float f4 = pointF.x - ScaleImageView.this.last.x;
                            float f5 = pointF.y - ScaleImageView.this.last.y;
                            float round = (float) Math.round(ScaleImageView.this.origHeight * ScaleImageView.this.saveScale);
                            if (((float) Math.round(ScaleImageView.this.origWidth * ScaleImageView.this.saveScale)) < ScaleImageView.this.width) {
                                if (f3 + f5 > 0.0f) {
                                    f5 = -f3;
                                } else if (f3 + f5 < (-ScaleImageView.this.bottom)) {
                                    f5 = -(ScaleImageView.this.bottom + f3);
                                }
                            } else if (round >= ScaleImageView.this.height) {
                                if (f2 + f4 > 0.0f) {
                                    f4 = -f2;
                                } else if (f2 + f4 < (-ScaleImageView.this.right)) {
                                    f4 = -(ScaleImageView.this.right + f2);
                                }
                                if (f3 + f5 > 0.0f) {
                                    f5 = -f3;
                                    f = f4;
                                } else if (f3 + f5 < (-ScaleImageView.this.bottom)) {
                                    f5 = -(ScaleImageView.this.bottom + f3);
                                    f = f4;
                                } else {
                                    f = f4;
                                }
                            } else if (f2 + f4 > 0.0f) {
                                f = -f2;
                                f5 = 0.0f;
                            } else if (f2 + f4 < (-ScaleImageView.this.right)) {
                                f = -(ScaleImageView.this.right + f2);
                                f5 = 0.0f;
                            } else {
                                f5 = 0.0f;
                                f = f4;
                            }
                            ScaleImageView.this.matrix.postTranslate(f, f5);
                            ScaleImageView.this.last.set(pointF.x, pointF.y);
                            break;
                        }
                    case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                        ScaleImageView.this.last.set(motionEvent.getX(), motionEvent.getY());
                        ScaleImageView.this.start.set(ScaleImageView.this.last);
                        ScaleImageView.this.mode = ScaleImageView.ZOOM;
                        break;
                    case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                        ScaleImageView.this.mode = ScaleImageView.NONE;
                        break;
                }
                ScaleImageView.this.setImageMatrix(ScaleImageView.this.matrix);
                ScaleImageView.this.invalidate();
                return true;
            }
        });
    }

    protected void onMeasure(int i, int i2) {
        super.onMeasure(i, i2);
        this.width = (float) MeasureSpec.getSize(i);
        this.height = (float) MeasureSpec.getSize(i2);
        float min = Math.min(this.width / this.bmWidth, this.height / this.bmHeight);
        this.matrix.setScale(min, min);
        setImageMatrix(this.matrix);
        this.saveScale = 1.0f;
        this.redundantYSpace = this.height - (this.bmHeight * min);
        this.redundantXSpace = this.width - (min * this.bmWidth);
        this.redundantYSpace /= 2.0f;
        this.redundantXSpace /= 2.0f;
        this.matrix.postTranslate(this.redundantXSpace, this.redundantYSpace);
        this.origWidth = this.width - (this.redundantXSpace * 2.0f);
        this.origHeight = this.height - (this.redundantYSpace * 2.0f);
        this.right = ((this.width * this.saveScale) - this.width) - ((this.redundantXSpace * 2.0f) * this.saveScale);
        this.bottom = ((this.height * this.saveScale) - this.height) - ((this.redundantYSpace * 2.0f) * this.saveScale);
        setImageMatrix(this.matrix);
    }

    public void setImageBitmap(Bitmap bitmap) {
        super.setImageBitmap(bitmap);
        if (bitmap != null) {
            this.bmWidth = (float) bitmap.getWidth();
            this.bmHeight = (float) bitmap.getHeight();
        }
    }

    public void setMaxZoom(float f) {
        this.maxScale = f;
    }
}
