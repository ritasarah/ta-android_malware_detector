package com.albus.media;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.support.v4.app.FragmentActivity;
import android.support.v4.util.LruCache;
import com.albus.media.RetainFragment.ObjectFinalizer;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.io.File;

public class ImageCache implements ObjectFinalizer {
    private static final boolean DEFAULT_CLEAR_DISK_CACHE_ON_START = false;
    private static final CompressFormat DEFAULT_COMPRESS_FORMAT = CompressFormat.JPEG;
    private static final int DEFAULT_COMPRESS_QUALITY = 70;
    private static final boolean DEFAULT_DISK_CACHE_ENABLED = true;
    private static final int DEFAULT_DISK_CACHE_SIZE = 10485760;
    private static final boolean DEFAULT_MEM_CACHE_ENABLED = true;
    private static final int DEFAULT_MEM_CACHE_SIZE = 5242880;
    private static final String TAG = "ImageCache";
    private DiskLruCache mDiskCache = null;
    private BitmapLruCacheImpl mMemoryCache = null;

    class BitmapLruCacheImpl extends LruCache {
        private int mTotalEvicted;

        public BitmapLruCacheImpl(int i) {
            super(i);
        }

        public void enterEvict() {
            this.mTotalEvicted = 0;
        }

        protected void entryRemoved(boolean z, String str, Bitmap bitmap, Bitmap bitmap2) {
            if (bitmap != null && z && bitmap2 == null) {
                this.mTotalEvicted++;
                Log.d(ImageCache.TAG, "BITMAP Key=" + str + ": EVICTED");
            }
            super.entryRemoved(z, str, bitmap, bitmap2);
        }

        public int leaveEvict() {
            return this.mTotalEvicted;
        }

        protected int sizeOf(String str, Bitmap bitmap) {
            return Utils.getBitmapSize(bitmap);
        }
    }

    public class ImageCacheParams {
        public boolean clearDiskCacheOnStart = ImageCache.DEFAULT_CLEAR_DISK_CACHE_ON_START;
        public CompressFormat compressFormat = ImageCache.DEFAULT_COMPRESS_FORMAT;
        public int compressQuality = ImageCache.DEFAULT_COMPRESS_QUALITY;
        public boolean diskCacheEnabled = ImageCache.DEFAULT_CLEAR_DISK_CACHE_ON_START;
        public int diskCacheSize = ImageCache.DEFAULT_DISK_CACHE_SIZE;
        public int memCacheSize = ImageCache.DEFAULT_MEM_CACHE_SIZE;
        public boolean memoryCacheEnabled = ImageCache.DEFAULT_MEM_CACHE_ENABLED;
        public String uniqueName;

        public ImageCacheParams(String str) {
            this.uniqueName = str;
        }
    }

    public ImageCache(Context context, ImageCacheParams imageCacheParams) {
        init(context, imageCacheParams);
    }

    public ImageCache(Context context, String str) {
        init(context, new ImageCacheParams(str));
    }

    public static ImageCache findOrCreateCache(FragmentActivity fragmentActivity, ImageCacheParams imageCacheParams) {
        ImageCache imageCache;
        RetainFragment findOrCreateRetainFragment = RetainFragment.findOrCreateRetainFragment(fragmentActivity.getSupportFragmentManager());
        try {
            imageCache = (ImageCache) findOrCreateRetainFragment.getObject();
        } catch (ClassCastException e) {
            imageCache = null;
        }
        if (imageCache == null) {
            Log.d(TAG, "Image Cache NOT FOUND !!!: CREATE NEW");
            imageCache = new ImageCache((Context) fragmentActivity, imageCacheParams);
            findOrCreateRetainFragment.setObject(imageCache);
            return imageCache;
        }
        Log.d(TAG, "Image Cache FOUND !!!: REUSE");
        return imageCache;
    }

    public static ImageCache findOrCreateCache(FragmentActivity fragmentActivity, String str) {
        return findOrCreateCache(fragmentActivity, new ImageCacheParams(str));
    }

    private void init(Context context, ImageCacheParams imageCacheParams) {
        File diskCacheDir = DiskLruCache.getDiskCacheDir(context, imageCacheParams.uniqueName);
        if (imageCacheParams.diskCacheEnabled) {
            this.mDiskCache = DiskLruCache.openCache(context, diskCacheDir, (long) imageCacheParams.diskCacheSize);
            this.mDiskCache.setCompressParams(imageCacheParams.compressFormat, imageCacheParams.compressQuality);
            if (imageCacheParams.clearDiskCacheOnStart) {
                this.mDiskCache.clearCache();
            }
        }
        if (imageCacheParams.memoryCacheEnabled) {
            this.mMemoryCache = new BitmapLruCacheImpl(imageCacheParams.memCacheSize) {
                protected int sizeOf(String str, Bitmap bitmap) {
                    return Utils.getBitmapSize(bitmap);
                }
            };
        }
    }

    public void addBitmapToCache(String str, Bitmap bitmap) {
        if (str != null && bitmap != null && !bitmap.isRecycled()) {
            if (this.mMemoryCache != null && this.mMemoryCache.get(str) == null) {
                try {
                    this.mMemoryCache.put(str, bitmap);
                } catch (Exception e) {
                    this.mMemoryCache.evictAll();
                }
            }
            if (this.mDiskCache != null && !this.mDiskCache.containsKey(str)) {
                this.mDiskCache.put(str, bitmap);
            }
        }
    }

    public void clearCaches() {
        if (this.mDiskCache != null) {
            this.mDiskCache.clearCache();
        }
        if (this.mMemoryCache != null) {
            this.mMemoryCache.evictAll();
        }
    }

    public Bitmap getBitmapFromDiskCache(String str) {
        return this.mDiskCache != null ? this.mDiskCache.get(str) : null;
    }

    public Bitmap getBitmapFromMemCache(String str) {
        if (this.mMemoryCache != null) {
            Bitmap bitmap = (Bitmap) this.mMemoryCache.get(str);
            if (bitmap != null) {
                if (!bitmap.isRecycled()) {
                    return bitmap;
                }
                this.mMemoryCache.remove(str);
                return null;
            }
        }
        return null;
    }

    public void onObjectDestroyed() {
        if (this.mMemoryCache != null) {
            this.mMemoryCache.enterEvict();
            this.mMemoryCache.evictAll();
            Log.d(TAG, "--- TOTAL OBJECT EVICTED: " + this.mMemoryCache.leaveEvict() + " ---");
        }
    }

    public void removeCache(String str) {
        if (this.mMemoryCache != null) {
            this.mMemoryCache.remove(str);
        }
    }
}
