package com.albus.fragment;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.v4.app.ListFragment;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.RecyclerView.OnScrollListener;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import com.albus.activity.AlbusMainActivity;
import com.albus.adapter.RecyclerUpdatesAdapter;
import com.albus.media.UserPhotoLoader;
import com.albus.util.AlbusModelObject;
import com.catfiz.R;
import com.catfiz.app.CatfizListFragment;
import com.catfiz.base.Callback.OnSendLikeCallback;
import com.catfiz.base.Callback.UpdatesFetchRecentNews;
import com.catfiz.base.Catfiz;
import com.catfiz.base.Constant;
import com.catfiz.base.ICatfiz;
import com.catfiz.base.ICatfiz.ICatfizUpdates;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.model.Update;
import com.catfiz.service.CatfishService;
import com.catfiz.service.CatfishService.UpdateRecent;
import com.catfiz.signal.Signal;
import com.catfiz.signal.SignalBinderUpdate;
import com.catfiz.util.Log;
import java.io.File;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;

public class UpdatesFragment extends CatfizListFragment implements ICatfiz, ICatfizUpdates {
    private static final String LAST_UPDATES = "last_update_time";
    private static final String RECEIVE_TIME = "status_receive_time";
    private static final String TAG = UpdatesFragment.class.getSimpleName();
    private RecyclerUpdatesAdapter mAdapter = null;
    private Catfiz mCatfiz = null;
    private boolean mFirstDown = true;
    private boolean mFirstUp = true;
    private boolean mHasNewUpdate = false;
    private LinearLayout mLlDfUpdates = null;
    private int mPage = 0;
    private RecyclerView mRecyclerView = null;
    public List mUpdatesData = null;
    private UserPhotoLoader mUserPhotoLoader = null;

    /* synthetic */ class AnonymousClass2 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishService$UpdateRecent = new int[UpdateRecent.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.PHOTOUPDT.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.SELFPHOTOUPDT.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
        }
    }

    public class OnSendLikeCb implements OnSendLikeCallback {
        private String mId = null;
        private int mIsLike = 0;
        private WeakReference mThisFragmentRef;

        public OnSendLikeCb(ListFragment listFragment, String str, int i) {
            this.mThisFragmentRef = new WeakReference(listFragment);
            this.mId = str;
            this.mIsLike = i;
        }

        public void onData(int i) {
        }

        public void onError() {
        }

        public void onSuccess() {
            ((UpdatesFragment) this.mThisFragmentRef.get()).mHasNewUpdate = true;
            if (this.mId.equals(CatfishService.getUserPIN())) {
                CatfishService.getCatfishPreferences().edit().putInt(Constant.IS_LIKE_MY_STATUS, this.mIsLike).commit();
            }
        }
    }

    public class UserFetchRecentNewsCb implements UpdatesFetchRecentNews {
        private WeakReference mThisFragmentRef;

        public UserFetchRecentNewsCb(ListFragment listFragment) {
            this.mThisFragmentRef = new WeakReference(listFragment);
        }

        public void onData(List list) {
            UpdatesFragment updatesFragment = (UpdatesFragment) this.mThisFragmentRef.get();
            if (updatesFragment != null) {
                Update update;
                Log.d(UpdatesFragment.TAG, "start updating data");
                updatesFragment.mUpdatesData.clear();
                for (int i = 0; i < list.size(); i++) {
                    Log.d(UpdatesFragment.TAG, "id updates = " + ((Update) list.get(i)).getUserID() + "updates action= " + ((Update) list.get(i)).getUpdateAction());
                }
                if (!updatesFragment.mCatfiz.isAccountVerified()) {
                    Log.d(UpdatesFragment.TAG, "dummy view");
                    update = new Update();
                    update.setVerfiedView(true);
                    updatesFragment.mUpdatesData.add(update);
                }
                if (list.size() > 0) {
                    Log.d(UpdatesFragment.TAG, "update with isi");
                    for (Update update2 : list) {
                        if (update2.getUpdateAction() == UpdateRecent.USERNAMEUPDT.ordinal() || update2.getUpdateAction() == UpdateRecent.SELFUSERNAMEUPDT.ordinal()) {
                            if (CatfishService.getCatfishPreferences().getBoolean(AlbusModelObject.SHOW_CHANGED_NAME, false)) {
                                updatesFragment.mUpdatesData.add(update2);
                            }
                        } else if (update2.getUpdateAction() != UpdateRecent.POOLPHOTOUPDT.ordinal() || update2.getUpdateAction() != UpdateRecent.POOLTITLEUPDT.ordinal() || update2.getUpdateAction() != UpdateRecent.POOLDESCUPDT.ordinal()) {
                            updatesFragment.mUpdatesData.add(update2);
                        }
                    }
                }
                if (updatesFragment.mUpdatesData.size() == 0) {
                    updatesFragment.setDfView(true);
                } else {
                    updatesFragment.setDfView(false);
                }
                if (updatesFragment.mAdapter != null) {
                    Log.d(UpdatesFragment.TAG, "updates data = " + list.size());
                    updatesFragment.mAdapter.notifyDataSetChanged();
                }
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    private void initView() {
        this.mUserPhotoLoader = ((AlbusMainActivity) getActivity()).getUserPhotoLoader();
        this.mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
        this.mAdapter = new RecyclerUpdatesAdapter(getActivity(), this.mUpdatesData, this.mUserPhotoLoader);
        this.mRecyclerView.setAdapter(this.mAdapter);
        this.mRecyclerView.addOnScrollListener(new OnScrollListener() {
            public void onScrollStateChanged(RecyclerView recyclerView, int i) {
                super.onScrollStateChanged(recyclerView, i);
                ((AlbusMainActivity) UpdatesFragment.this.getActivity()).getMainFragment().getScrollHandle().onScrollStateChanged(i);
            }

            public void onScrolled(RecyclerView recyclerView, int i, int i2) {
                super.onScrolled(recyclerView, i, i2);
                ((AlbusMainActivity) UpdatesFragment.this.getActivity()).getMainFragment().getScrollHandle().onScrolled(i, i2, ((LinearLayoutManager) recyclerView.getLayoutManager()).findFirstVisibleItemPosition());
            }
        });
    }

    public static UpdatesFragment newInstance() {
        return new UpdatesFragment();
    }

    public void getAllData() {
        if (this.mHasNewUpdate) {
            this.mHasNewUpdate = false;
            PreferenceManager.getDefaultSharedPreferences(getActivity()).edit().putString(LAST_UPDATES, "" + System.currentTimeMillis()).commit();
            this.mCatfiz.updatesFetchRecentNews(new UserFetchRecentNewsCb(this));
        }
    }

    public void onActivityCreated(Bundle bundle) {
        super.onActivityCreated(bundle);
        Log.d(TAG, ">>>>>>>> onActivityCreated:" + TAG);
    }

    public void onActivityResult(int i, int i2, Intent intent) {
        super.onActivityResult(i, i2, intent);
        Log.d(TAG, ">>>>>>>> onActivityResult:" + TAG + " :" + i2 + " :" + i);
        getActivity();
        if (i2 == -1) {
            getAllData();
        }
    }

    public void onCatfizStarted() {
        Log.d(TAG, ">>>>>>>> onCatfizStarted:" + TAG);
        this.mHasNewUpdate = true;
        getAllData();
    }

    public void onCatfizStopped() {
    }

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        Log.d(TAG, ">>>>>>>> onCreate:" + TAG);
        this.mCatfiz = new Catfiz(getActivity(), this, new SignalBinderUpdate());
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        Log.d(TAG, ">>>>>>>> onCreateView:" + TAG);
        View inflate = layoutInflater.inflate(R.layout.fragment_updates, viewGroup, false);
        this.mLlDfUpdates = (LinearLayout) inflate.findViewById(R.id.ll_no_updates);
        this.mRecyclerView = (RecyclerView) inflate.findViewById(R.id.recyclerView);
        this.mUpdatesData = new ArrayList();
        setContainerView(viewGroup);
        initView();
        return inflate;
    }

    public void onDestroy() {
        super.onDestroy();
        Log.d(TAG, ">>>>>>>> onDestroy:" + TAG);
        this.mRecyclerView = null;
        this.mUpdatesData = null;
        this.mCatfiz.destroy();
    }

    public void onDestroyView() {
        super.onDestroyView();
        Log.d(TAG, ">>>>>>>> onDestroyView:" + TAG);
    }

    public void onPause() {
        super.onPause();
        Log.d(TAG, ">>>>>>>> onPause:" + TAG);
        this.mCatfiz.finish();
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        Log.d(TAG, ">>>>>>>> onResume:" + TAG);
        this.mCatfiz.start();
        if (this.mCatfiz.isCatfizStarted()) {
            this.mHasNewUpdate = true;
            getAllData();
        }
    }

    public boolean onSignalEvent(Signal signal) {
        Log.d(TAG, "onSignalEvent : " + Signal.values()[signal.ordinal()]);
        return false;
    }

    public boolean onSignalEventNewUpdates(int i, String str) {
        Log.d(TAG, "onSignalEventNewUpdates: " + UpdateRecent.values()[i] + ", key: " + str);
        switch (AnonymousClass2.$SwitchMap$com$catfiz$service$CatfishService$UpdateRecent[UpdateRecent.values()[i].ordinal()]) {
            case e.b /*1*/:
            case e.c /*2*/:
                this.mUserPhotoLoader.clearCache();
                ((AlbusMainActivity) getActivity()).getThumbnailLoader().clearCache();
                break;
        }
        SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());
        String string = defaultSharedPreferences.getString(RECEIVE_TIME, "0");
        String string2 = defaultSharedPreferences.getString(LAST_UPDATES, "0");
        Log.d(TAG, "last:" + string2 + " receive:" + string);
        if (string.equals("0")) {
            Log.d(TAG, "update data");
            this.mHasNewUpdate = true;
            getAllData();
        } else {
            long currentTimeMillis = System.currentTimeMillis();
            long parseLong = Long.parseLong(string2);
            long parseLong2 = Long.parseLong(string);
            if (parseLong == 0) {
                defaultSharedPreferences.edit().putString(LAST_UPDATES, "" + currentTimeMillis).commit();
            } else if (currentTimeMillis - parseLong >= parseLong2) {
                this.mHasNewUpdate = true;
                getAllData();
            }
        }
        return true;
    }

    public void onStop() {
        super.onStop();
        Log.d(TAG, ">>>>>>>> onStop:" + TAG);
        this.mCatfiz.finish();
    }

    public void realignToolbar() {
        Log.d(TAG, "~~~~~~~~~ realignToolbar:" + TAG);
        if (((LinearLayoutManager) this.mRecyclerView.getLayoutManager()).findFirstVisibleItemPosition() <= 0) {
            Log.d(TAG, "~~~~~~~~~ DO DO DO:" + TAG);
            ((AlbusMainActivity) getActivity()).getMainFragment().getScrollHandle().forceShowToolbar();
        }
    }

    public void refreshAdapter() {
        this.mAdapter.refresh();
    }

    public void refreshPP(String str) {
        if (this.mCatfiz == null || !this.mCatfiz.isCatfizStarted()) {
            Log.e(TAG, "[BUG] broadcast (mPPFReceier) too early. please check");
            return;
        }
        Log.d(TAG, "refreshPP = " + str);
        File userProfilePhotoFile;
        if (str.equals(CatfishService.getUserPIN())) {
            this.mUserPhotoLoader.clearCache();
            userProfilePhotoFile = CatfishPhotoStorage.getUserProfilePhotoFile(getActivity());
            if (userProfilePhotoFile != null) {
                ((AlbusMainActivity) getActivity()).getThumbnailLoader().removeCache("file://" + userProfilePhotoFile.getAbsolutePath());
            }
        } else {
            this.mUserPhotoLoader.removeCacheFriendPhoto(str);
            userProfilePhotoFile = CatfishPhotoStorage.getFriendProfilePhotoFile(getActivity(), str);
            if (userProfilePhotoFile != null) {
                ((AlbusMainActivity) getActivity()).getThumbnailLoader().removeCache("file://" + userProfilePhotoFile.getAbsolutePath());
            }
        }
        this.mAdapter.refresh();
    }

    public void sendLike(int i, long j, String str, int i2) {
        this.mCatfiz.userFriendLikeUpdate(str, i, j, new OnSendLikeCb(this, str, i));
    }

    public void setDfView(boolean z) {
        if (z) {
            this.mLlDfUpdates.setVisibility(0);
        } else {
            this.mLlDfUpdates.setVisibility(8);
        }
    }
}
