package com.albus.fragment;

import android.app.NotificationManager;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.TabLayout;
import android.support.design.widget.TabLayout.OnTabSelectedListener;
import android.support.design.widget.TabLayout.Tab;
import android.support.v4.app.Fragment;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.support.v7.app.ActionBar;
import android.support.v7.widget.Toolbar;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.view.animation.DecelerateInterpolator;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.albus.activity.AlbusMainActivity;
import com.albus.activity.AlbusMainActivity.OnMultipleDeleteHomeViewEvent;
import com.albus.activity.CreateGroupActivity;
import com.albus.activity.CustomActionBarPageActivity;
import com.albus.adapter.HomePagerAdapter;
import com.albus.imagespan.SmiledText;
import com.albus.media.CroppedPhotoLoader;
import com.albus.util.AlbusModelObject;
import com.albus.view.CircleImageView;
import com.albus.view.CustomViewPager;
import com.catfiz.R;
import com.catfiz.base.Constant;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.model.User;
import com.catfiz.service.CatfishService;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import org.apache.http.protocol.HTTP;

public class HomeFragment extends Fragment implements OnClickListener {
    private static final int TAB_CHATS = 1;
    private static final int TAB_GROUPS = 2;
    private static final int TAB_UNDEFINED = -1;
    private static final int TAB_UPDATES = 0;
    protected static final String TAG = HomeFragment.class.getSimpleName();
    private HomePagerAdapter mAdapter = null;
    private int mCurrentPage = TAB_CHATS;
    private FloatingActionButton mFabChats = null;
    private FloatingActionButton mFabGroups = null;
    private FloatingActionButton mFabUpdates = null;
    private ImageView mIvNotifLike = null;
    private LinearLayout mLlNotifChat = null;
    private LinearLayout mLlNotifComment = null;
    private LinearLayout mLlNotifGroup = null;
    private SharedPreferences mPref = null;
    private int mPreviousPage = TAB_CHATS;
    private ActionBar mRedAB = null;
    private Toolbar mRedToolbar = null;
    private LinearLayout mRedToolbarContainer = null;
    private CircleImageView mRivPp = null;
    private RelativeLayout mRlHome = null;
    private View mRoot = null;
    private ScrollHandle mScrollHandle = null;
    private TabLayout mTabLayout = null;
    private LinearLayout mToolbarContainer = null;
    private int mToolbarHeight = 0;
    private TextView mTvBtnChat = null;
    private TextView mTvBtnGroup = null;
    private TextView mTvNotifChat = null;
    private TextView mTvNotifComment = null;
    private TextView mTvNotifGroup = null;
    private TextView mTvTitle = null;
    private TextView mTvTitleWhiteTb = null;
    private CustomViewPager mViewPager = null;
    private ActionBar mWhiteAB = null;
    private Toolbar mWhiteToolbar = null;
    private LinearLayout mWhiteToolbarContainer = null;
    private boolean mbAfterResume = false;
    private Tab tabChat = null;
    private Tab tabGroup = null;

    public abstract class ScrollHandle {
        private static final int TOOLBAR_HIDE_THRESHOLD = 20;
        private static final int TOOLBAR_SHOW_THRESHOLD = 50;
        private boolean mDisableScroll = false;
        private int mToolbarHeight = 0;
        private int mToolbarOffset = 0;
        private int mToolbarScrolledDistance = 0;
        private boolean mToolbarVisible = true;

        public ScrollHandle(Context context) {
            this.mToolbarHeight = (int) context.getResources().getDimension(R.dimen.actionbar);
        }

        private void clipToolbarOffset() {
            if (this.mToolbarOffset > this.mToolbarHeight) {
                this.mToolbarOffset = this.mToolbarHeight;
            } else if (this.mToolbarOffset < 0) {
                this.mToolbarOffset = 0;
            }
        }

        private void setToolbarInvisible() {
            if (this.mToolbarOffset < this.mToolbarHeight) {
                onToolbarHide();
                this.mToolbarOffset = this.mToolbarHeight;
            }
            this.mToolbarVisible = false;
        }

        private void setToolbarVisible() {
            if (this.mToolbarOffset > 0) {
                onToolbarShow();
                this.mToolbarOffset = 0;
            }
            this.mToolbarVisible = true;
        }

        public void disableScroll(boolean z) {
            this.mDisableScroll = z;
        }

        public void forceShowToolbar() {
            onToolbarShow();
            this.mToolbarOffset = 0;
            this.mToolbarScrolledDistance = 0;
            this.mToolbarVisible = true;
        }

        public boolean getToolbarVisibility() {
            return this.mToolbarVisible;
        }

        public void onScrollStateChanged(int i) {
            Log.d(HomeFragment.TAG, "~~~ Scroll onScrollStateChanged:" + i);
            if (!this.mDisableScroll && i == 0) {
                if (this.mToolbarScrolledDistance < this.mToolbarHeight) {
                    setToolbarVisible();
                } else if (this.mToolbarVisible) {
                    if (this.mToolbarOffset > TOOLBAR_HIDE_THRESHOLD) {
                        setToolbarInvisible();
                    } else {
                        setToolbarVisible();
                    }
                } else if (this.mToolbarHeight - this.mToolbarOffset > TOOLBAR_SHOW_THRESHOLD) {
                    setToolbarVisible();
                } else {
                    setToolbarInvisible();
                }
            }
        }

        public void onScrolled(int i, int i2, int i3) {
            if (!this.mDisableScroll) {
                clipToolbarOffset();
                onToolbarMoved(this.mToolbarOffset);
                if ((this.mToolbarOffset < this.mToolbarHeight && i2 > 0) || (this.mToolbarOffset > 0 && i2 < 0)) {
                    this.mToolbarOffset += i2;
                }
                if (this.mToolbarScrolledDistance < 0) {
                    this.mToolbarScrolledDistance = 0;
                } else {
                    this.mToolbarScrolledDistance += i2;
                }
            }
        }

        public abstract void onToolbarHide();

        public abstract void onToolbarMoved(int i);

        public abstract void onToolbarShow();
    }

    private void changeFAB(int i) {
        Log.d(TAG, "position:" + i);
        switch (i) {
            case TAB_UNDEFINED /*-1*/:
                if (this.mFabChats.isShown()) {
                    this.mFabChats.hide();
                }
                if (this.mFabGroups.isShown()) {
                    this.mFabGroups.hide();
                }
                if (this.mFabUpdates.isShown()) {
                    this.mFabUpdates.hide();
                    return;
                }
                return;
            case e.a /*0*/:
                if (!this.mFabUpdates.isShown()) {
                    this.mFabUpdates.show();
                }
                if (this.mFabChats.isShown()) {
                    this.mFabChats.hide();
                }
                if (this.mFabGroups.isShown()) {
                    this.mFabGroups.hide();
                    return;
                }
                return;
            case TAB_CHATS /*1*/:
                if (!this.mFabChats.isShown()) {
                    this.mFabChats.show();
                }
                if (this.mFabGroups.isShown()) {
                    this.mFabGroups.hide();
                }
                if (this.mFabUpdates.isShown()) {
                    this.mFabUpdates.hide();
                    return;
                }
                return;
            case TAB_GROUPS /*2*/:
                if (!this.mFabGroups.isShown()) {
                    this.mFabGroups.show();
                }
                if (this.mFabChats.isShown()) {
                    this.mFabChats.hide();
                }
                if (this.mFabUpdates.isShown()) {
                    this.mFabUpdates.hide();
                    return;
                }
                return;
            default:
                return;
        }
    }

    private void initFABS() {
        this.mFabChats = (FloatingActionButton) this.mRoot.findViewById(R.id.fab_chats);
        this.mFabGroups = (FloatingActionButton) this.mRoot.findViewById(R.id.fab_groups);
        this.mFabUpdates = (FloatingActionButton) this.mRoot.findViewById(R.id.fab_updates);
        this.mFabChats.setOnClickListener(this);
        this.mFabGroups.setOnClickListener(this);
        this.mFabUpdates.setOnClickListener(this);
        this.mFabChats.show();
        this.mFabGroups.hide();
        this.mFabUpdates.hide();
    }

    private void moveTabsEvent(View view, int i) {
        Log.d(TAG, "move tab: " + i);
        this.mCurrentPage = i;
        this.mAdapter.setCurrentPage(i);
        NotificationManager notificationManager = (NotificationManager) getActivity().getSystemService("notification");
        notificationManager.cancel(AlbusModelObject.FRIENDREQUEST_NOTIFICATION_ID);
        notificationManager.cancel(AlbusModelObject.NEWFRIEND_NOTIFICATION_ID);
        if (i != 0) {
            if (i == TAB_CHATS) {
                notificationManager.cancel(AlbusModelObject.NEWMESSAGE_NOTIFICATION_ID);
                return;
            }
            notificationManager.cancel(AlbusModelObject.HAS_TOPIC_NEED_TO_NOTIF_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.HAS_TOPIC_DELETED_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.POOL_NEWMESSAGE_NOTIFICATION_ID);
        }
    }

    public static HomeFragment newInstance() {
        return new HomeFragment();
    }

    public void changeChatNotif(int i) {
        if (i > 0) {
            this.mLlNotifChat.setVisibility(0);
            this.mTvNotifChat.setText("" + i);
            return;
        }
        this.mLlNotifChat.setVisibility(8);
    }

    public void changeGroupNotif(int i) {
        if (i > 0) {
            this.mLlNotifGroup.setVisibility(0);
            this.mTvNotifGroup.setText(i > 99 ? "99+" : "" + i);
            return;
        }
        this.mLlNotifGroup.setVisibility(8);
    }

    public void enterSearchMode() {
        this.mAdapter.enterSearchMode();
    }

    public void eventIncomingCommentLike(int i, int i2) {
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        int i3 = catfishPreferences.getInt(Constant.PREV_NOTIF_LIKE, 0);
        int i4 = catfishPreferences.getInt(Constant.PREV_NOTIF_LIKE, 0);
        int i5 = catfishPreferences.getInt(FriendListDataStorage.LIKESTATUS, 0);
        boolean z = catfishPreferences.getBoolean(AlbusModelObject.LIKE_FIRST, false);
        if (i > i3) {
            Log.d(TAG, "unread new comment : " + i + "unread like : " + i2);
            this.mLlNotifComment.setVisibility(0);
            Log.d(TAG, "unread prev like : " + i4);
            if (i2 <= 0 || !z) {
                Log.d(TAG, "show comment view notif");
                catfishPreferences.edit().putInt(Constant.PREV_NOTIF_LIKE, i).commit();
                catfishPreferences.edit().putInt(Constant.PREV_NOTIF_LIKE, i5).commit();
                catfishPreferences.edit().putBoolean(AlbusModelObject.LIKE_FIRST, true).commit();
                this.mIvNotifLike.setVisibility(8);
                this.mTvNotifComment.setVisibility(0);
                this.mTvNotifComment.setText("" + i);
                return;
            }
            Log.d(TAG, "show like view notif");
            this.mIvNotifLike.setVisibility(0);
            this.mTvNotifComment.setVisibility(8);
            catfishPreferences.edit().putBoolean(AlbusModelObject.LIKE_FIRST, false).commit();
        } else if (i == i3) {
            Log.d(TAG, "unread comment : " + i);
            Log.d(TAG, "unread like : " + i2);
            this.mLlNotifComment.setVisibility(0);
            if (i2 > 0) {
                Log.d(TAG, "show like view notif");
                catfishPreferences.edit().putBoolean(AlbusModelObject.LIKE_FIRST, true).commit();
                this.mIvNotifLike.setVisibility(0);
                this.mTvNotifComment.setVisibility(8);
                return;
            }
            Log.d(TAG, "show comment view notif");
            if (i > 0) {
                catfishPreferences.edit().putInt(Constant.PREV_NOTIF_LIKE, i5).commit();
                this.mIvNotifLike.setVisibility(8);
                this.mTvNotifComment.setVisibility(0);
                this.mTvNotifComment.setText("" + i);
                return;
            }
            this.mLlNotifComment.setVisibility(8);
        } else {
            this.mLlNotifComment.setVisibility(8);
        }
    }

    public ScrollHandle getScrollHandle() {
        return this.mScrollHandle;
    }

    public void hideToolbar() {
        this.mToolbarContainer.animate().translationY((float) (-this.mToolbarHeight)).setInterpolator(new AccelerateInterpolator(2.0f)).start();
    }

    public void leaveSearchMode() {
        this.mAdapter.leaveSearchMode();
    }

    public void limitListView(String str, boolean z) {
        this.mAdapter.limitListView(str, z);
    }

    public void moveToolbar(int i) {
        this.mToolbarContainer.setTranslationY((float) (-i));
    }

    public void onClick(View view) {
        Intent intent;
        switch (view.getId()) {
            case R.id.fab_chats:
                intent = new Intent(getActivity(), CustomActionBarPageActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 14);
                getActivity().startActivityForResult(intent, 11);
                return;
            case R.id.fab_groups:
                getActivity().startActivity(new Intent(getActivity(), CreateGroupActivity.class));
                return;
            case R.id.fab_updates:
                intent = new Intent(getActivity(), CustomActionBarPageActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 24);
                intent.putExtra(HTTP.IDENTITY_CODING, 0);
                getActivity().startActivity(intent);
                return;
            case R.id.rl_profile:
                ((AlbusMainActivity) getActivity()).launchMyProfile();
                return;
            default:
                return;
        }
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        Log.d(TAG, ">>>>>>>> onCreateView:" + TAG);
        this.mRoot = layoutInflater.inflate(R.layout.activity_home, viewGroup, false);
        this.mPref = PreferenceManager.getDefaultSharedPreferences(getActivity());
        this.mViewPager = (CustomViewPager) this.mRoot.findViewById(R.id.vb_pager);
        initFABS();
        setMainToolbar();
        this.mAdapter = new HomePagerAdapter(getChildFragmentManager(), getContext());
        this.mViewPager.setAdapter(this.mAdapter);
        int intExtra = getActivity().getIntent().getIntExtra(AlbusModelObject.PAGE, TAB_CHATS);
        Log.d(TAG, "current page=" + intExtra);
        this.mViewPager.setCurrentItem(intExtra);
        this.mAdapter.setCurrentPage(intExtra);
        changeFAB(intExtra);
        this.mViewPager.setOffscreenPageLimit(TAB_GROUPS);
        this.mViewPager.addOnPageChangeListener(new OnPageChangeListener() {
            public void onPageScrollStateChanged(int i) {
                switch (i) {
                    case e.a /*0*/:
                        ((AlbusMainActivity) HomeFragment.this.getActivity()).setPage(HomeFragment.this.mViewPager.getCurrentItem());
                        return;
                    default:
                        return;
                }
            }

            public void onPageScrolled(int i, float f, int i2) {
            }

            public void onPageSelected(int i) {
                Log.d(HomeFragment.TAG, "onTabSelected:" + i);
                ((AlbusMainActivity) HomeFragment.this.getActivity()).collapseActionMenuSearch();
                HomeFragment.this.moveTabsEvent(null, i);
                HomeFragment.this.changeFAB(i);
            }
        });
        this.mScrollHandle = new ScrollHandle(getActivity()) {
            public void onToolbarHide() {
                HomeFragment.this.hideToolbar();
            }

            public void onToolbarMoved(int i) {
                HomeFragment.this.moveToolbar(i);
            }

            public void onToolbarShow() {
                HomeFragment.this.showToolbar();
            }
        };
        this.mTabLayout = (TabLayout) this.mRoot.findViewById(R.id.tabLayout);
        this.mTabLayout.setupWithViewPager(this.mViewPager);
        this.mTabLayout.setOnTabSelectedListener(new OnTabSelectedListener() {
            public void onTabReselected(Tab tab) {
            }

            public void onTabSelected(Tab tab) {
                int position = tab.getPosition();
                if (position == HomeFragment.TAB_CHATS) {
                    HomeFragment.this.mTvBtnChat.setTextColor(HomeFragment.this.getResources().getColor(R.color.white));
                } else if (position == HomeFragment.TAB_GROUPS) {
                    HomeFragment.this.mTvBtnGroup.setTextColor(HomeFragment.this.getResources().getColor(R.color.white));
                }
                HomeFragment.this.mViewPager.setCurrentItem(position);
                boolean toolbarVisibility = HomeFragment.this.getScrollHandle().getToolbarVisibility();
                Log.d(HomeFragment.TAG, "onTabSelected:" + position + " " + toolbarVisibility);
                if (!toolbarVisibility) {
                    HomeFragment.this.mAdapter.notifyChildPageChanged();
                }
            }

            public void onTabUnselected(Tab tab) {
                int position = tab.getPosition();
                if (position == HomeFragment.TAB_CHATS) {
                    HomeFragment.this.mTvBtnChat.setTextColor(HomeFragment.this.getResources().getColor(R.color.white54));
                } else if (position == HomeFragment.TAB_GROUPS) {
                    HomeFragment.this.mTvBtnGroup.setTextColor(HomeFragment.this.getResources().getColor(R.color.white54));
                }
            }
        });
        this.tabChat = this.mTabLayout.getTabAt(TAB_CHATS);
        this.tabChat.setCustomView(this.mAdapter.getTabView(TAB_CHATS, 0));
        this.tabGroup = this.mTabLayout.getTabAt(TAB_GROUPS);
        this.tabGroup.setCustomView(this.mAdapter.getTabView(TAB_GROUPS, 0));
        View customView = this.tabChat.getCustomView();
        this.mTvBtnChat = (TextView) customView.findViewById(R.id.text1);
        this.mLlNotifChat = (LinearLayout) customView.findViewById(R.id.ll_notif_chatTab);
        this.mTvNotifChat = (TextView) customView.findViewById(R.id.tv_notif_chatTab);
        customView = this.tabGroup.getCustomView();
        this.mTvBtnGroup = (TextView) customView.findViewById(R.id.text1);
        this.mLlNotifGroup = (LinearLayout) customView.findViewById(R.id.ll_notif_chatTab);
        this.mTvNotifGroup = (TextView) customView.findViewById(R.id.tv_notif_chatTab);
        if (this.mTabLayout.getSelectedTabPosition() == TAB_CHATS) {
            this.mTvBtnChat.setTextColor(getResources().getColor(R.color.white));
        } else if (this.mTabLayout.getSelectedTabPosition() == TAB_GROUPS) {
            this.mTvBtnGroup.setTextColor(getResources().getColor(R.color.white));
        }
        ((AlbusMainActivity) getActivity()).setOnMultipleDeleteHomeViewEvent(new OnMultipleDeleteHomeViewEvent() {
            public void onEnterMultipleDelete() {
                HomeFragment.this.setMultipleDeleteToolbar();
                HomeFragment.this.getScrollHandle().disableScroll(true);
                HomeFragment.this.getScrollHandle().forceShowToolbar();
                HomeFragment.this.changeFAB(HomeFragment.TAB_UNDEFINED);
                HomeFragment.this.mViewPager.setPagingEnabled(false);
            }

            public void onExitMultipleDelete() {
                HomeFragment.this.setMainToolbar();
                HomeFragment.this.getScrollHandle().disableScroll(false);
                HomeFragment.this.changeFAB(HomeFragment.this.mCurrentPage);
                HomeFragment.this.mViewPager.setPagingEnabled(true);
            }

            public void onSelectItem(int i, int i2) {
                HomeFragment.this.setWhiteToolbarText("" + i);
            }
        });
        return this.mRoot;
    }

    public void onDestroy() {
        super.onDestroy();
        Log.d(TAG, ">>>>>>>> onDestroy:" + TAG);
        this.mRoot = null;
        this.mRedToolbar = null;
        this.mWhiteToolbar = null;
        this.mRedAB = null;
        this.mWhiteAB = null;
    }

    public void onPause() {
        super.onPause();
        Log.d(TAG, ">>>>>>>> onPause:" + TAG);
    }

    public void onResume() {
        int i;
        super.onResume();
        Log.d(TAG, ">>>>>>>> onResume:" + TAG + " :" + this.mbAfterResume);
        int i2;
        if (this.mbAfterResume) {
            i2 = this.mPref.getInt(AlbusModelObject.PAGE_HOME, TAB_CHATS);
            Log.d(TAG, "resume current page=" + i2);
            this.mViewPager.setCurrentItem(i2);
            this.mAdapter.setCurrentPage(i2);
            i = i2;
        } else {
            i2 = getActivity().getIntent().getIntExtra(AlbusModelObject.PAGE, TAB_CHATS);
            Log.d(TAG, "resume current page=" + i2);
            this.mbAfterResume = true;
            this.mViewPager.setCurrentItem(i2);
            i = i2;
        }
        NotificationManager notificationManager = (NotificationManager) getActivity().getSystemService("notification");
        notificationManager.cancel(AlbusModelObject.FRIENDREQUEST_NOTIFICATION_ID);
        notificationManager.cancel(AlbusModelObject.NEWFRIEND_NOTIFICATION_ID);
        if (i == TAB_CHATS) {
            notificationManager.cancel(AlbusModelObject.NEWMESSAGE_NOTIFICATION_ID);
        } else if (i == 3) {
            notificationManager.cancel(AlbusModelObject.HAS_TOPIC_NEED_TO_NOTIF_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.HAS_TOPIC_DELETED_NOTIFICATION_ID);
            notificationManager.cancel(AlbusModelObject.POOL_NEWMESSAGE_NOTIFICATION_ID);
        }
    }

    public void onStart() {
        super.onStart();
        Log.d(TAG, ">>>>>>>> onStart:" + TAG);
    }

    public void onStop() {
        super.onStop();
        Log.d(TAG, ">>>>>>>> onStop:" + TAG);
    }

    public void refreshAllFriendsPhoto(String str) {
        if (this.mAdapter != null) {
            this.mAdapter.refreshAllFriendsPhoto(str);
        }
    }

    public void sendLike(int i, long j, String str, int i2) {
        if (this.mAdapter != null) {
            UpdatesFragment fragmentUpdate = this.mAdapter.getFragmentUpdate();
            if (fragmentUpdate != null) {
                fragmentUpdate.sendLike(i, j, str, i2);
            }
        }
    }

    public void setABData(User user) {
        String gender = user.getGender();
        this.mTvTitle.setText(SmiledText.getSmiledText(getActivity(), user.getName(), this.mTvTitle));
        if (!gender.equals(null) || !gender.equals("")) {
            if (user.getGender().equals("Female")) {
                this.mRivPp.setBackgroundResource(R.drawable.df_pict2);
            } else {
                this.mRivPp.setBackgroundResource(R.drawable.df_pict);
            }
        }
    }

    public void setCurrentPagePref() {
        Log.d(TAG, "page=" + this.mViewPager.getCurrentItem());
        this.mPref.edit().putInt(AlbusModelObject.PAGE_HOME, this.mViewPager.getCurrentItem()).commit();
    }

    public void setMainToolbar() {
        boolean z;
        if (this.mRedToolbar == null) {
            this.mRedToolbar = (Toolbar) this.mRoot.findViewById(R.id.tb_actionbar);
            this.mToolbarHeight = (int) getActivity().getResources().getDimension(R.dimen.actionbar);
            z = true;
        } else {
            z = false;
        }
        ((AlbusMainActivity) getActivity()).setSupportActionBar(this.mRedToolbar);
        if (this.mRedAB == null) {
            this.mRedAB = ((AlbusMainActivity) getActivity()).getSupportActionBar();
            this.mRedAB.setDisplayShowTitleEnabled(false);
            this.mRedAB.setDisplayShowCustomEnabled(true);
            this.mRedAB.setDisplayShowHomeEnabled(false);
            this.mRedAB.setCustomView(((AlbusMainActivity) getActivity()).getLayoutInflater().inflate(R.layout.ic_pp_home, null));
            this.mTvTitle = (TextView) this.mRedAB.getCustomView().findViewById(R.id.tv_title);
            this.mRivPp = (CircleImageView) this.mRedAB.getCustomView().findViewById(R.id.riv_img);
            this.mRlHome = (RelativeLayout) this.mRedAB.getCustomView().findViewById(R.id.rl_profile);
            this.mLlNotifComment = (LinearLayout) this.mRedAB.getCustomView().findViewById(R.id.ll_notif_comment);
            this.mTvNotifComment = (TextView) this.mRedAB.getCustomView().findViewById(R.id.tv_notif_comment);
            this.mIvNotifLike = (ImageView) this.mRedAB.getCustomView().findViewById(R.id.iv_notif_like);
            this.mRedToolbarContainer = (LinearLayout) this.mRoot.findViewById(R.id.ll_toolbar_red);
            this.mWhiteToolbarContainer = (LinearLayout) this.mRoot.findViewById(R.id.ll_toolbar_white);
            this.mToolbarContainer = (LinearLayout) this.mRoot.findViewById(R.id.ll_toolbar_container);
            this.mToolbarContainer.bringToFront();
            this.mRlHome.setOnClickListener(this);
        }
        this.mWhiteToolbarContainer.setVisibility(8);
        this.mRedToolbarContainer.setVisibility(0);
        if (!z) {
            Animation alphaAnimation = new AlphaAnimation(0.0f, 1.0f);
            alphaAnimation.setInterpolator(new AccelerateInterpolator());
            alphaAnimation.setDuration(300);
            this.mRedToolbarContainer.setAnimation(alphaAnimation);
        }
    }

    public void setMultipleDeleteToolbar() {
        if (this.mWhiteToolbar == null) {
            this.mWhiteToolbar = (Toolbar) this.mRoot.findViewById(R.id.tb_actionbar_white);
        }
        ((AlbusMainActivity) getActivity()).setSupportActionBar(this.mWhiteToolbar);
        if (this.mWhiteAB == null) {
            this.mWhiteAB = ((AlbusMainActivity) getActivity()).getSupportActionBar();
            this.mWhiteAB.setDisplayHomeAsUpEnabled(true);
            this.mWhiteAB.setDisplayShowTitleEnabled(false);
            this.mWhiteAB.setDisplayShowCustomEnabled(true);
            View inflate = ((AlbusMainActivity) getActivity()).getLayoutInflater().inflate(R.layout.custom_simple_actionbar, null);
            this.mWhiteAB.setCustomView(inflate);
            this.mTvTitleWhiteTb = (TextView) inflate.findViewById(R.id.tv_title_blue);
            Configuration configuration = getActivity().getResources().getConfiguration();
            if (Utils.hasJellyBeanMR1() && configuration.getLayoutDirection() == TAB_CHATS) {
                this.mWhiteAB.setHomeAsUpIndicator((int) R.drawable.ic_back_dark_reverse);
            } else {
                this.mWhiteAB.setHomeAsUpIndicator((int) R.drawable.ic_back_dark);
            }
        }
        this.mRedToolbarContainer.setVisibility(8);
        this.mWhiteToolbarContainer.setVisibility(0);
        Animation alphaAnimation = new AlphaAnimation(1.0f, 0.0f);
        alphaAnimation.setInterpolator(new AccelerateInterpolator());
        alphaAnimation.setDuration(100);
        this.mRedToolbarContainer.setAnimation(alphaAnimation);
    }

    public void setPageActive(int i) {
        this.mViewPager.setCurrentItem(i, true);
        this.mAdapter.setCurrentPage(i);
    }

    public void setWhiteToolbarText(String str) {
        this.mTvTitleWhiteTb.setText(str);
    }

    public void showToolbar() {
        this.mToolbarContainer.animate().translationY(0.0f).setInterpolator(new DecelerateInterpolator(2.0f)).start();
    }

    public void updateUserPic(User user, boolean z) {
        if (z) {
            CroppedPhotoLoader croppedPhotoLoader = ((AlbusMainActivity) getActivity()).getCroppedPhotoLoader();
            croppedPhotoLoader.clearLocalCache();
            croppedPhotoLoader.loadImage((Object) CatfishPhotoStorage.getPhotoStorageDir(getActivity()) + "/" + CatfishService.getUserPIN() + "_temp", this.mRivPp);
            return;
        }
        ((AlbusMainActivity) getActivity()).getUserPhotoLoader().loadUserPhoto(user, this.mRivPp);
    }
}
