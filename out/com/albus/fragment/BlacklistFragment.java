package com.albus.fragment;

import android.os.Bundle;
import android.support.v4.app.ListFragment;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.albus.adapter.BlacklistAdapter;
import com.albus.media.ImageCache.ImageCacheParams;
import com.albus.media.UserPhotoLoader;
import com.catfiz.R;
import com.catfiz.base.Callback.UserFetchBlackListCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.base.ICatfiz.ICatfizBlacklist;
import com.catfiz.signal.Signal;
import com.catfiz.signal.SignalBinderBlacklist;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.util.ArrayList;
import java.util.List;

public class BlacklistFragment extends ListFragment implements ICatfiz, ICatfizBlacklist {
    private static final String TAG = "BlacklistFragment";
    private BlacklistAdapter mAdapter = null;
    private List mBlackData = null;
    private Catfiz mCatfiz = null;
    private ImageView mIv = null;
    private RelativeLayout mRlDfView = null;
    private TextView mTv = null;
    private TextView mTvHint = null;
    private UserPhotoLoader mUserPhotoLoader = null;

    public static BlacklistFragment newInstance() {
        return new BlacklistFragment();
    }

    public void getAllData() {
        this.mCatfiz.userFetchBlackList(new UserFetchBlackListCallback() {
            public void onData(List list) {
                Log.d(BlacklistFragment.TAG, "size: " + list.size());
                BlacklistFragment.this.mBlackData.clear();
                BlacklistFragment.this.mBlackData.addAll(list);
                BlacklistFragment.this.mAdapter.notifyDataSetChanged();
                if (BlacklistFragment.this.mBlackData.size() <= 0) {
                    BlacklistFragment.this.setDfView(true);
                } else {
                    BlacklistFragment.this.setDfView(false);
                }
            }

            public void onError() {
                Log.d(BlacklistFragment.TAG, "get blacklist data error");
            }

            public void onSuccess() {
                Log.d(BlacklistFragment.TAG, "get blacklist data success");
            }
        });
    }

    public void onCatfizStarted() {
        getAllData();
    }

    public void onCatfizStopped() {
    }

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        this.mCatfiz = new Catfiz(getActivity(), this, new SignalBinderBlacklist(), "BlacklistFragment-SignalAction");
        Log.d(TAG, "on create blacklist fragment");
        ImageCacheParams imageCacheParams = new ImageCacheParams("");
        imageCacheParams.memCacheSize = (AccessibilityNodeInfoCompat.ACTION_DISMISS * Utils.getMemoryClass(getActivity())) / 3;
        imageCacheParams.diskCacheEnabled = false;
        this.mUserPhotoLoader = new UserPhotoLoader(getActivity(), imageCacheParams);
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        Log.d(TAG, "onCreateView BlacklistFragment");
        View inflate = layoutInflater.inflate(R.layout.fragment_listview, viewGroup, false);
        this.mRlDfView = (RelativeLayout) inflate.findViewById(R.id.rl_df_content);
        this.mTv = (TextView) inflate.findViewById(R.id.tv_hint);
        this.mIv = (ImageView) inflate.findViewById(R.id.iv_nofriend);
        this.mTvHint = (TextView) inflate.findViewById(R.id.tv_title);
        this.mBlackData = new ArrayList();
        this.mAdapter = new BlacklistAdapter(getActivity(), this.mBlackData, this.mUserPhotoLoader);
        setListAdapter(this.mAdapter);
        return inflate;
    }

    public void onDestroy() {
        super.onDestroy();
        this.mCatfiz.destroy();
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.start();
        }
        refreshData();
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    public boolean onSignalNameReady() {
        refreshData();
        return true;
    }

    public void onStop() {
        super.onStop();
        this.mCatfiz.finish();
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.stop();
        }
    }

    public void refreshData() {
        if (this.mCatfiz.isCatfizStarted()) {
            getAllData();
        }
    }

    public void setDfView(boolean z) {
        if (z) {
            this.mRlDfView.setVisibility(0);
            this.mTv.setVisibility(8);
            this.mIv.setVisibility(8);
            this.mTvHint.setText(getActivity().getString(R.string.noblacklist_name));
            return;
        }
        this.mRlDfView.setVisibility(8);
    }
}
