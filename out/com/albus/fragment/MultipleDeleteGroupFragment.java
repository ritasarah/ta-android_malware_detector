package com.albus.fragment;

import android.os.Bundle;
import android.support.v4.app.ListFragment;
import android.view.ActionMode;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView.MultiChoiceModeListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.LinearLayout;
import android.widget.ListView;
import com.albus.adapter.GroupListAdapter;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.DialogUI;
import com.albus.media.GroupPhotoLoader;
import com.albus.media.ImageCache;
import com.albus.media.ImageCache.ImageCacheParams;
import com.albus.util.AlbusModelObject;
import com.catfiz.R;
import com.catfiz.base.Callback.UserFetchGroupsCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.model.Group;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.signal.Signal;
import com.catfiz.util.Log;
import com.catfiz.util.MimeTypeParser;
import com.catfiz.util.Utils;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class MultipleDeleteGroupFragment extends ListFragment implements ICatfiz {
    private static final String TAG = "MultipleDeleteGroupFragment";
    private GroupListAdapter mAdapter = null;
    private MenuItem mAllItem = null;
    private Catfiz mCatfiz = null;
    private MenuItem mClearItem = null;
    private int mCountSelected = 0;
    private MenuItem mDeleteItem = null;
    private MenuItem mDropItem = null;
    private GroupPhotoLoader mGroupPhotoLoader = null;
    private List mGroups = new ArrayList();
    private LinearLayout mLlDfChat = null;
    private LinearLayout mLlDfGroup = null;
    private LinearLayout mLlDfView = null;
    private ActionMode mMode = null;
    private int mSelectState = -1;
    private int mSelected = -1;
    private Map mSelectedGroup = null;

    public class FetchGroupCB implements UserFetchGroupsCallback {
        private WeakReference mThisFragmentRef;

        public FetchGroupCB(MultipleDeleteGroupFragment multipleDeleteGroupFragment) {
            this.mThisFragmentRef = new WeakReference(multipleDeleteGroupFragment);
        }

        public void onData(List list) {
            MultipleDeleteGroupFragment multipleDeleteGroupFragment = (MultipleDeleteGroupFragment) this.mThisFragmentRef.get();
            if (multipleDeleteGroupFragment == null) {
                Log.d(MultipleDeleteGroupFragment.TAG, "FetchGroupCB weak Ref is null");
                return;
            }
            multipleDeleteGroupFragment.mGroups.clear();
            if (list.size() > 0) {
                multipleDeleteGroupFragment.setDfView(false);
                for (Group add : list) {
                    multipleDeleteGroupFragment.mGroups.add(add);
                }
                multipleDeleteGroupFragment.mAdapter.notifyDataSetChanged();
            }
            multipleDeleteGroupFragment.getListView().setItemChecked(multipleDeleteGroupFragment.mSelected, true);
            multipleDeleteGroupFragment.getListView().setSelection(multipleDeleteGroupFragment.mSelected);
            multipleDeleteGroupFragment.mSelectedGroup.put(Integer.valueOf(multipleDeleteGroupFragment.mSelected), ((Group) list.get(multipleDeleteGroupFragment.mSelected)).getGroupID());
            if (multipleDeleteGroupFragment.mGroups.size() > 0) {
                multipleDeleteGroupFragment.setDfView(false);
            } else {
                multipleDeleteGroupFragment.setDfView(true);
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    private void firstchoice() {
        getListView().setMultiChoiceModeListener(new MultiChoiceModeListener() {
            private int mCountSelected = 0;

            public boolean onActionItemClicked(ActionMode actionMode, MenuItem menuItem) {
                int i = 0;
                MultipleDeleteGroupFragment.this.mMode = actionMode;
                Bundle bundle;
                String str;
                switch (menuItem.getItemId()) {
                    case 16908332:
                        actionMode.finish();
                        MultipleDeleteGroupFragment.this.getActivity().finish();
                        break;
                    case R.id.pick_allgroup:
                        ListView listView = MultipleDeleteGroupFragment.this.getListView();
                        if (this.mCountSelected >= MultipleDeleteGroupFragment.this.mAdapter.getCount()) {
                            for (int i2 = 0; i2 < MultipleDeleteGroupFragment.this.mAdapter.getCount(); i2++) {
                                listView.setItemChecked(i2, false);
                            }
                            break;
                        }
                        while (i < MultipleDeleteGroupFragment.this.mAdapter.getCount()) {
                            listView.setItemChecked(i, true);
                            i++;
                        }
                        break;
                    case R.id.multi_item_drop_group:
                    case R.id.multi_item_delete:
                        bundle = new Bundle();
                        bundle.putInt(AlbusModelObject.DIALOG, 2);
                        bundle.putInt(AlbusModelObject.VALUE, this.mCountSelected);
                        bundle.putInt(MimeTypeParser.TAG_TYPE, MultipleDeleteGroupFragment.this.mSelectState);
                        str = "";
                        for (Entry value : MultipleDeleteGroupFragment.this.mSelectedGroup.entrySet()) {
                            str = str + ((String) value.getValue()) + "_";
                        }
                        if (MultipleDeleteGroupFragment.this.mSelectState == 0) {
                            Log.d(MultipleDeleteGroupFragment.TAG, "SELECT_ONLY_MINE:" + str);
                        } else {
                            Log.d(MultipleDeleteGroupFragment.TAG, "SELECT_ONLY_OTHER:" + str);
                        }
                        bundle.putString(AlbusModelObject.SELECTED_FRIENDID, str);
                        AlbusDialog.showDialog(2, new DialogUI().getDialogInterface(), MultipleDeleteGroupFragment.this.getActivity(), bundle, MultipleDeleteGroupFragment.this.getActivity().getSupportFragmentManager());
                        break;
                    case R.id.multi_item_clear:
                        bundle = new Bundle();
                        bundle.putInt(AlbusModelObject.DIALOG, 2);
                        bundle.putInt(AlbusModelObject.VALUE, this.mCountSelected);
                        bundle.putInt(MimeTypeParser.TAG_TYPE, -1);
                        str = "";
                        for (Entry value2 : MultipleDeleteGroupFragment.this.mSelectedGroup.entrySet()) {
                            str = str + ((String) value2.getValue()) + "_";
                        }
                        bundle.putString(AlbusModelObject.SELECTED_FRIENDID, str);
                        AlbusDialog.showDialog(2, new DialogUI().getDialogInterface(), MultipleDeleteGroupFragment.this.getActivity(), bundle, MultipleDeleteGroupFragment.this.getActivity().getSupportFragmentManager());
                        break;
                }
                return true;
            }

            public boolean onCreateActionMode(ActionMode actionMode, Menu menu) {
                MultipleDeleteGroupFragment.this.getActivity().getMenuInflater().inflate(R.menu.actionbar_multiple_select, menu);
                MultipleDeleteGroupFragment.this.mAllItem = menu.findItem(R.id.pick_allgroup);
                MultipleDeleteGroupFragment.this.mAllItem.setVisible(true);
                MultipleDeleteGroupFragment.this.mDropItem = menu.findItem(R.id.multi_item_drop_group);
                MultipleDeleteGroupFragment.this.mDropItem.setVisible(true);
                MultipleDeleteGroupFragment.this.mClearItem = menu.findItem(R.id.multi_item_clear);
                MultipleDeleteGroupFragment.this.mClearItem.setVisible(true);
                MultipleDeleteGroupFragment.this.mDeleteItem = menu.findItem(R.id.multi_item_delete);
                MultipleDeleteGroupFragment.this.mDeleteItem.setVisible(true);
                return true;
            }

            public void onDestroyActionMode(ActionMode actionMode) {
                MultipleDeleteGroupFragment.this.getActivity().finish();
            }

            public void onItemCheckedStateChanged(ActionMode actionMode, int i, long j, boolean z) {
                Log.d(MultipleDeleteGroupFragment.TAG, "position = " + i + " id = " + j + " isChecked = " + z);
                this.mCountSelected = MultipleDeleteGroupFragment.this.getListView().getCheckedItemCount();
                if (z) {
                    MultipleDeleteGroupFragment.this.mAdapter.setNewSelection(i, z);
                    Log.v("checked", i + " checked");
                    MultipleDeleteGroupFragment.this.mSelectedGroup.put(Integer.valueOf(i), MultipleDeleteGroupFragment.this.mAdapter.getId(i));
                } else {
                    MultipleDeleteGroupFragment.this.mAdapter.removeSelection(i);
                    Log.v("checked", i + " unchecked");
                    MultipleDeleteGroupFragment.this.mSelectedGroup.remove(Integer.valueOf(i));
                }
                MultipleDeleteGroupFragment.this.setSelectState();
                actionMode.setTitle("" + this.mCountSelected);
            }

            public boolean onPrepareActionMode(ActionMode actionMode, Menu menu) {
                return false;
            }
        });
        getListView().setOnItemClickListener(new OnItemClickListener() {
            public void onItemClick(AdapterView adapterView, View view, int i, long j) {
                MultipleDeleteGroupFragment.this.getListView().setItemChecked(i, !MultipleDeleteGroupFragment.this.mAdapter.isPositionChecked(i));
            }
        });
    }

    public static MultipleDeleteGroupFragment newInstance(Bundle bundle) {
        MultipleDeleteGroupFragment multipleDeleteGroupFragment = new MultipleDeleteGroupFragment();
        multipleDeleteGroupFragment.mSelected = bundle.getInt(CatfishRESTAPI.CFCOMPACT_STICKERID);
        return multipleDeleteGroupFragment;
    }

    private void setSelectState() {
        this.mSelectState = -1;
        for (Entry value : this.mSelectedGroup.entrySet()) {
            String str = (String) value.getValue();
            Log.d(TAG, "Group to check:" + str);
            if (str.split(":")[0].equals(this.mCatfiz.getUser().getId())) {
                if (this.mSelectState == -1 || this.mSelectState == 0) {
                    this.mSelectState = 0;
                    this.mDropItem.setVisible(false);
                    this.mDeleteItem.setVisible(true);
                } else {
                    this.mSelectState = 2;
                    this.mDropItem.setVisible(false);
                    this.mDeleteItem.setVisible(false);
                }
            } else if (this.mSelectState == -1 || this.mSelectState == 1) {
                this.mSelectState = 1;
                this.mDropItem.setVisible(true);
                this.mDeleteItem.setVisible(false);
            } else {
                this.mSelectState = 2;
                this.mDropItem.setVisible(false);
                this.mDeleteItem.setVisible(false);
            }
        }
        Log.d(TAG, "Show:" + this.mSelectState);
    }

    public void deleteSelectedGroup() {
        this.mAdapter.deleteSelection();
        this.mMode.finish();
        getActivity().finish();
    }

    public void getAllData() {
        this.mCatfiz.userFetchGroups(new FetchGroupCB(this));
    }

    public void onActivityCreated(Bundle bundle) {
        super.onActivityCreated(bundle);
        this.mGroupPhotoLoader = new GroupPhotoLoader(getActivity());
        ImageCacheParams imageCacheParams = new ImageCacheParams("");
        imageCacheParams.memCacheSize = Utils.getMaxMemory() / 8;
        imageCacheParams.diskCacheEnabled = false;
        this.mGroupPhotoLoader.setImageCache(ImageCache.findOrCreateCache(getActivity(), imageCacheParams));
        this.mAdapter = new GroupListAdapter(getActivity(), this.mGroups, this.mGroupPhotoLoader, R.layout.item_chat_group, 100);
        setListAdapter(this.mAdapter);
        getListView().setChoiceMode(3);
        if (getListView().getChoiceMode() == 3) {
            firstchoice();
        }
        this.mSelectedGroup = new HashMap();
    }

    public void onCatfizStarted() {
        getAllData();
    }

    public void onCatfizStopped() {
    }

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        this.mCatfiz = new Catfiz(getActivity(), this);
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        View inflate = layoutInflater.inflate(R.layout.fragment_chat_group, viewGroup, false);
        this.mLlDfView = (LinearLayout) inflate.findViewById(R.id.ll_df_content);
        this.mLlDfChat = (LinearLayout) inflate.findViewById(R.id.ll_df_chat);
        this.mLlDfGroup = (LinearLayout) inflate.findViewById(R.id.ll_df_group);
        inflate.findViewById(R.id.view_shadow).setVisibility(0);
        return inflate;
    }

    public void onDestroy() {
        super.onDestroy();
        this.mCatfiz.destroy();
        Log.d(TAG, "onDestroy");
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
        Log.d(TAG, "onResume");
        if (this.mCatfiz.isCatfizStarted()) {
            getAllData();
        }
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    public void onStop() {
        super.onStop();
        this.mCatfiz.finish();
        Log.d(TAG, "onStop");
    }

    public void setDfView(boolean z) {
        if (z) {
            this.mLlDfView.setVisibility(0);
            this.mLlDfChat.setVisibility(8);
            this.mLlDfGroup.setVisibility(0);
            return;
        }
        this.mLlDfView.setVisibility(8);
    }
}
