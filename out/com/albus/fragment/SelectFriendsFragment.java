package com.albus.fragment;

import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.ListFragment;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;
import com.albus.activity.AlbusMainActivity;
import com.albus.activity.BroadcastActivity;
import com.albus.activity.CategoryActivity;
import com.albus.activity.CustomActionBarPageActivity;
import com.albus.activity.ProfilesGroupActivity;
import com.albus.adapter.CategoryDialogAdapter;
import com.albus.adapter.SelectFriendsAdapter;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.AlbusDialogInterface;
import com.albus.media.ImageCache.ImageCacheParams;
import com.albus.media.UserPhotoLoader;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.view.CustomActionbarView;
import com.albus.view.CustomActionbarView.OnActionbarButtonClicked;
import com.albus.view.CustomActionbarView.OnActionbarMenuButtonClicked;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Callback.FetchCategoryCallback;
import com.catfiz.base.Callback.FetchGroupCallback;
import com.catfiz.base.Callback.FetchUserCategoryCallback;
import com.catfiz.base.Callback.UserFetchFriendsCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.localstorage.ChunkStorage;
import com.catfiz.model.Group;
import com.catfiz.model.Message;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.PinManagerV2;
import com.catfiz.signal.Signal;
import com.catfiz.util.FizzlinkUtil;
import com.catfiz.util.Log;
import com.catfiz.util.MediaFilePath;
import com.catfiz.util.MimeTypeParser;
import com.catfiz.util.Utils;
import java.io.File;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.apache.http.cookie.ClientCookie;
import org.apache.http.protocol.HTTP;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class SelectFriendsFragment extends ListFragment implements ICatfiz {
    private static final String TAG = SelectFriendsFragment.class.getSimpleName();
    private CustomActionbarView mActionbar = null;
    private SelectFriendsAdapter mAdapter = null;
    private int mCategoryId = -1;
    private Catfiz mCatfiz = null;
    private EditText mEtSearch = null;
    private List mFriends = null;
    private List mFriendsSearchHelper = null;
    private Group mGroup = null;
    private ImageButton mIbClear = null;
    private String mId;
    private int mIdentity = -1;
    private String mImagePath = "";
    private boolean mIsSelected = false;
    private String mName = "";
    private int mPage = -1;
    private List mRemovedId = new ArrayList();
    private RelativeLayout mRlDfView = null;
    private List mSelectedFriends = null;
    private List mSelectedFriendsId = null;
    private String mSharedText = null;
    private TextView mTvSumFriend = null;
    private TextView mTvTitle = null;
    private String mType = null;
    private Uri mUri = null;
    private UserPhotoLoader mUserPhotoLoader = null;

    public class FetchFriendsCb implements UserFetchFriendsCallback {
        private WeakReference mThisFragmentRef;

        public FetchFriendsCb(ListFragment listFragment) {
            this.mThisFragmentRef = new WeakReference(listFragment);
        }

        public void onData(List list) {
            SelectFriendsFragment selectFriendsFragment = (SelectFriendsFragment) this.mThisFragmentRef.get();
            if (selectFriendsFragment == null) {
                Log.d(SelectFriendsFragment.TAG, "FetchFriendsCb weak Ref is null");
                return;
            }
            selectFriendsFragment.mFriends.clear();
            selectFriendsFragment.mFriends.addAll(list);
            selectFriendsFragment.mFriendsSearchHelper.clear();
            selectFriendsFragment.mFriendsSearchHelper.addAll(list);
            selectFriendsFragment.checkSelectedFriend();
            if (selectFriendsFragment.mPage != 33) {
                selectFriendsFragment.activeSelectAllButton();
            }
            selectFriendsFragment.mAdapter.notifyDataSetChanged();
            Log.d(SelectFriendsFragment.TAG, "data friends = " + selectFriendsFragment.mFriends.size());
            selectFriendsFragment.mTvSumFriend.setText("" + selectFriendsFragment.mFriends.size());
            if (selectFriendsFragment.mFriends.size() <= 0) {
                selectFriendsFragment.setDfView(true);
            } else {
                selectFriendsFragment.setDfView(false);
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    class FetchGroupProfileCb implements FetchGroupCallback {
        private WeakReference mThisFragRef;

        public FetchGroupProfileCb(SelectFriendsFragment selectFriendsFragment) {
            this.mThisFragRef = new WeakReference(selectFriendsFragment);
        }

        public void onData(Group group, String str) {
            SelectFriendsFragment selectFriendsFragment = (SelectFriendsFragment) this.mThisFragRef.get();
            if (selectFriendsFragment != null) {
                if (group != null) {
                    selectFriendsFragment.mGroup = group;
                    Log.d(SelectFriendsFragment.TAG, "Success get:" + group.getName() + " " + group.getNotes());
                    return;
                }
                Log.d(SelectFriendsFragment.TAG, "Fail get group data");
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    class ListCategoryDialog implements AlbusDialogInterface {
        CategoryDialogAdapter adapter;
        List categories;

        private ListCategoryDialog() {
            this.adapter = null;
            this.categories = new ArrayList();
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, final DialogFragment dialogFragment, View view, Bundle bundle, final Context context) {
            final ListView listView = (ListView) view.findViewById(R.id.listview);
            view.findViewById(R.id.ll_bottom_btn).setVisibility(8);
            SelectFriendsFragment.this.mRemovedId.clear();
            SelectFriendsFragment.this.mCatfiz.FetchCategory(new FetchCategoryCallback() {
                public void onData(List list) {
                    ListCategoryDialog.this.categories.addAll(list);
                    ListCategoryDialog.this.adapter = new CategoryDialogAdapter(18, context, dialogFragment, ListCategoryDialog.this.categories, 51);
                    listView.setAdapter(ListCategoryDialog.this.adapter);
                }

                public void onError() {
                }

                public void onSuccess() {
                }
            });
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    private void activeSelectAllButton() {
        if (this.mIdentity != 34 && this.mIdentity != 56 && this.mPage != 49) {
            if (this.mFriends.size() > 0) {
                this.mActionbar.setSelectAllButton(true);
            } else {
                this.mActionbar.setSelectAllButton(false);
            }
        }
    }

    private void backToGroupProfile() {
        Intent intent = new Intent(getActivity(), ProfilesGroupActivity.class);
        intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, this.mGroup.getGroupID());
        intent.putExtra(CatfishDataStorage.NIC_NAME, this.mGroup.getName());
        intent.putExtra(AlbusModelObject.IMAGE, this.mGroup.getImagePath());
        intent.putExtra(AlbusModelObject.OWNER, this.mGroup.getOwner().getId());
        startActivity(intent.setFlags(335544320));
    }

    private void checkSelectedFriend() {
        if (this.mSelectedFriends.size() > 0) {
            for (User user : this.mSelectedFriends) {
                for (User user2 : this.mFriends) {
                    if (user2.getId().equals(user.getId())) {
                        user2.setSelected(true);
                        break;
                    }
                }
            }
        }
    }

    private void checkSelectedFriends() {
        this.mSelectedFriendsId.clear();
        if (this.mIdentity == 18 || this.mIdentity == 52) {
            String stringExtra = getActivity().getIntent().getStringExtra(AlbusModelObject.SELECTED_FRIENDID);
            Log.d(TAG, "friend id = " + stringExtra);
            try {
                JSONArray jSONArray = new JSONArray(stringExtra);
                if (jSONArray.length() != 0) {
                    for (int i = 0; i < jSONArray.length(); i++) {
                        for (int i2 = 0; i2 < this.mFriends.size(); i2++) {
                            if (jSONArray.get(i).equals(((User) this.mFriends.get(i2)).getId())) {
                                Log.d(TAG, "selected id from broadcast before = " + jSONArray.get(i).toString());
                                ((User) this.mFriends.get(i2)).setSelected(true);
                                this.mSelectedFriendsId.add(this.mFriends.get(i));
                            } else {
                                Log.d(TAG, "not selected id from broadcast before");
                            }
                        }
                    }
                    ((CustomActionBarPageActivity) getActivity()).callBtnActionSelectFriend(this.mSelectedFriendsId);
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
    }

    private void editSelectedFriend() {
        this.mFriends.clear();
        String stringExtra = getActivity().getIntent().getStringExtra(AlbusModelObject.SELECTED_FRIENDID);
        Log.d(TAG, "edit selected friend value : " + stringExtra);
        if (stringExtra != null) {
            try {
                JSONArray jSONArray = new JSONArray(stringExtra);
                if (jSONArray.length() != 0) {
                    for (int i = 0; i < jSONArray.length(); i++) {
                        User matchFriendData = Catfiz.matchFriendData(jSONArray.get(i).toString());
                        if (matchFriendData != null) {
                            this.mFriends.add(matchFriendData);
                        }
                    }
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
    }

    public static SelectFriendsFragment newInstance(Bundle bundle) {
        SelectFriendsFragment selectFriendsFragment = new SelectFriendsFragment();
        selectFriendsFragment.mName = bundle.getString(CatfishDataStorage.NIC_NAME);
        selectFriendsFragment.mImagePath = bundle.getString(AlbusModelObject.IMAGE);
        selectFriendsFragment.mCategoryId = bundle.getInt(AlbusModelObject.CATEGORY_ID);
        selectFriendsFragment.mUri = (Uri) bundle.getParcelable(ChunkStorage.DATA_TABLE_NAME);
        selectFriendsFragment.mType = bundle.getString(MimeTypeParser.TAG_TYPE);
        selectFriendsFragment.mSharedText = bundle.getString(AlbusModelObject.TEXT);
        return selectFriendsFragment;
    }

    private void sendViaExternalAppsToFriend() {
        String str = "";
        Message message = new Message();
        Log.d(TAG, "Uri: " + this.mUri);
        Log.d(TAG, "SharedText: " + this.mSharedText);
        if (this.mUri != null) {
            String str2;
            if (this.mType.startsWith("video/")) {
                str2 = AlbusModelObject.DATA_TYPE_VIDEO;
            } else {
                str2 = ChunkStorage.DATA_TABLE_NAME;
                message.setAttacType(1);
            }
            String path = MediaFilePath.getPath(getActivity(), this.mUri);
            if (new File(path).exists()) {
                Log.d(TAG, "sendViaExternalAppsToFriend: pathFile: " + path);
                for (int i = 0; i < this.mSelectedFriends.size(); i++) {
                    this.mCatfiz.chatSendAttachedMessage(new User(((User) this.mSelectedFriends.get(i)).getId()), message, path, str2, getActivity(), new Callback() {
                        public void onError() {
                            Log.d(SelectFriendsFragment.TAG, "Error Send Attached Message!");
                            SelectFriendsFragment.this.getActivity().finish();
                        }

                        public void onSuccess() {
                            SelectFriendsFragment.this.getActivity().finish();
                        }
                    });
                }
                return;
            }
            Log.e(TAG, "Operation not supported");
            AlbusUtils.setToastView(getActivity(), getString(R.string.error_generic));
            getActivity().finish();
        } else if (this.mSharedText != null) {
            Log.d(TAG, "sendViaExternalAppsToFriend: text: " + this.mSharedText);
            message.setText(this.mSharedText);
            for (int i2 = 0; i2 < this.mSelectedFriends.size(); i2++) {
                this.mCatfiz.chatSendMessage(new User(((User) this.mSelectedFriends.get(i2)).getId()), message, new Callback() {
                    public void onError() {
                        Log.d(SelectFriendsFragment.TAG, "Error Send Attached Message!");
                        SelectFriendsFragment.this.getActivity().finish();
                    }

                    public void onSuccess() {
                        SelectFriendsFragment.this.getActivity().finish();
                    }
                });
            }
        } else {
            getActivity().finish();
        }
    }

    private void setFirstSelectedriendToCategory() {
        String[] strArr = new String[this.mSelectedFriends.size()];
        for (int i = 0; i < this.mSelectedFriends.size(); i++) {
            strArr[i] = ((User) this.mSelectedFriends.get(i)).getId();
        }
        this.mCatfiz.addCategoryMultiple(this.mCategoryId, this.mCategoryId, strArr, new Callback() {
            public void onError() {
            }

            public void onSuccess() {
            }
        });
        Intent intent = new Intent(getActivity(), CategoryActivity.class);
        intent.putExtra(CatfishDataStorage.NIC_NAME, this.mName);
        intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, this.mCategoryId);
        startActivity(intent);
        ((CustomActionBarPageActivity) getActivity()).finish();
    }

    private void setSelectedriendToCategory() {
        int i = 0;
        String[] strArr = new String[this.mSelectedFriends.size()];
        for (int i2 = 0; i2 < this.mSelectedFriends.size(); i2++) {
            strArr[i2] = ((User) this.mSelectedFriends.get(i2)).getId();
        }
        String[] strArr2 = new String[getRemovedId().size()];
        while (i < getRemovedId().size()) {
            strArr2[i] = (String) getRemovedId().get(i);
            i++;
        }
        if (strArr2.length > 0) {
            this.mCatfiz.deleteFromCategoryMultiple(this.mCategoryId, strArr2, null);
        }
        if (strArr.length > 0) {
            this.mCatfiz.addCategoryMultiple(this.mCategoryId, this.mCategoryId, strArr, null);
        }
        ((CustomActionBarPageActivity) getActivity()).finish();
    }

    private void shareFizzlinkToFriends() {
        String string;
        int i;
        String stringExtra = getActivity().getIntent().getStringExtra("slinkuri");
        String stringExtra2 = getActivity().getIntent().getStringExtra("android.intent.extra.TEXT");
        if (stringExtra == null || stringExtra.equals("")) {
            try {
                string = new JSONObject(stringExtra2).getString("simplelink");
            } catch (JSONException e) {
                e.printStackTrace();
            }
            for (i = 0; i < this.mSelectedFriends.size(); i++) {
                stringExtra = ((User) this.mSelectedFriends.get(i)).getId();
                Log.d(TAG, "fizzlink:" + string);
                if (string != null || string.compareTo("") == 0) {
                    Log.d(TAG, "friendpin:" + stringExtra);
                    this.mCatfiz.shareAndSaveFizzlink(getActivity(), stringExtra, stringExtra2, new Callback() {
                        public void onError() {
                        }

                        public void onSuccess() {
                            AlbusUtils.setToastView(SelectFriendsFragment.this.getActivity(), SelectFriendsFragment.this.getString(R.string.fizzlink_sent));
                            SelectFriendsFragment.this.getActivity().finish();
                        }
                    });
                } else {
                    Log.d(TAG, "share fizzlink msg :" + stringExtra2);
                    this.mCatfiz.shareFizzlink(stringExtra, stringExtra2, new Callback() {
                        public void onError() {
                        }

                        public void onSuccess() {
                            AlbusUtils.setToastView(SelectFriendsFragment.this.getActivity(), SelectFriendsFragment.this.getString(R.string.fizzlink_sent));
                            SelectFriendsFragment.this.getActivity().finish();
                        }
                    });
                }
            }
        }
        string = stringExtra;
        for (i = 0; i < this.mSelectedFriends.size(); i++) {
            stringExtra = ((User) this.mSelectedFriends.get(i)).getId();
            Log.d(TAG, "fizzlink:" + string);
            if (string != null) {
            }
            Log.d(TAG, "friendpin:" + stringExtra);
            this.mCatfiz.shareAndSaveFizzlink(getActivity(), stringExtra, stringExtra2, /* anonymous class already generated */);
        }
    }

    public void activateBtnFunction(List list) {
        Log.d(TAG, "set selected friend value to action bar : " + list.size());
        for (User id : list) {
            Log.d(TAG, "selected id is = " + id.getId());
        }
        if (this.mPage != 33) {
            this.mSelectedFriends.clear();
            if (list == null || list.size() <= 0) {
                this.mActionbar.setOnActionBtnDeactivated();
                this.mActionbar.setTitle("");
                return;
            }
            this.mActionbar.setOnActionBtnActivated();
            this.mActionbar.setTitle("" + list.size());
            this.mSelectedFriends.addAll(list);
        }
    }

    public void chatSendContacts() {
        this.mCatfiz.chatSendContacts(new User(this.mId), this.mSelectedFriends, new Callback() {
            public void onError() {
                Log.d(SelectFriendsFragment.TAG, "Fail Send Contact Friends");
            }

            public void onSuccess() {
                Log.d(SelectFriendsFragment.TAG, "Success Send Contact Friends:" + SelectFriendsFragment.this.mId);
                Intent intent = SelectFriendsFragment.this.getActivity().getIntent();
                FragmentActivity activity = SelectFriendsFragment.this.getActivity();
                SelectFriendsFragment.this.getActivity();
                activity.setResult(-1, intent);
                ((CustomActionBarPageActivity) SelectFriendsFragment.this.getActivity()).finish();
            }
        });
    }

    public void commentPromoteFriend(User user, long j, String str) {
        this.mCatfiz.sendAttachedComment(str, user.getId(), j, "contact", "", getActivity(), new Callback() {
            public void onError() {
                Log.d(SelectFriendsFragment.TAG, "Fail Promote Friend");
            }

            public void onSuccess() {
                Log.d(SelectFriendsFragment.TAG, "Success Promote Friend");
                Intent intent = SelectFriendsFragment.this.getActivity().getIntent();
                FragmentActivity activity = SelectFriendsFragment.this.getActivity();
                SelectFriendsFragment.this.getActivity();
                activity.setResult(-1, intent);
                ((CustomActionBarPageActivity) SelectFriendsFragment.this.getActivity()).finish();
            }
        });
    }

    public void getAllData() {
        if (this.mIdentity == 5 || this.mIdentity == 11) {
            this.mCatfiz.fetchGroup(getActivity().getIntent().getStringExtra(CatfishRESTAPI.CFCOMPACT_STICKERID), new FetchGroupProfileCb(this));
        }
        this.mCatfiz.userFetchFriends(new FetchFriendsCb(this));
    }

    public List getRemovedId() {
        Log.d(TAG, "removed category : " + this.mRemovedId);
        List arrayList = new ArrayList();
        Set hashSet = new HashSet();
        for (String str : this.mRemovedId) {
            if (hashSet.add(str)) {
                arrayList.add(str);
            }
        }
        return arrayList;
    }

    public void groupCreateTopic() {
        Group group = new Group();
        group.setName(this.mName);
        group.setNotes(getActivity().getResources().getString(R.string.group_default_notes));
        User user = this.mCatfiz.getUser();
        List list = this.mSelectedFriends;
        list.add(0, user);
        group.setMembers(list);
        group.setImagePath(this.mImagePath);
        this.mCatfiz.groupCreateTopic(group, new Callback() {
            public void onError() {
                Log.d(SelectFriendsFragment.TAG, "Fail Create Topic");
            }

            public void onSuccess() {
                Log.d(SelectFriendsFragment.TAG, "Success Create Topic");
                Intent intent = new Intent(SelectFriendsFragment.this.getActivity(), AlbusMainActivity.class);
                intent.setFlags(603979776);
                intent.putExtra(AlbusModelObject.PAGE, 2);
                SelectFriendsFragment.this.startActivity(intent);
                SelectFriendsFragment.this.getActivity().finish();
            }
        });
    }

    public void groupInviteFriends() {
        Group group = new Group(this.mId);
        group.setMembers(this.mSelectedFriends);
        Log.d(TAG, "" + group.getName());
        this.mCatfiz.groupInviteConference(group, new Callback() {
            public void onError() {
                Log.d(SelectFriendsFragment.TAG, "Fail Invite Friends");
            }

            public void onSuccess() {
                Log.d(SelectFriendsFragment.TAG, "Success Invite Friends");
            }
        });
    }

    public void groupPromoteFriend(User user) {
        this.mCatfiz.groupPromoteFriend(new Group(this.mId), user, new Callback() {
            public void onError() {
                Log.d(SelectFriendsFragment.TAG, "Fail Promote Friend");
            }

            public void onSuccess() {
                Log.d(SelectFriendsFragment.TAG, "Success Promote Friend");
                Intent intent = SelectFriendsFragment.this.getActivity().getIntent();
                FragmentActivity activity = SelectFriendsFragment.this.getActivity();
                SelectFriendsFragment.this.getActivity();
                activity.setResult(-1, intent);
                ((CustomActionBarPageActivity) SelectFriendsFragment.this.getActivity()).finish();
            }
        });
    }

    public void limitListView(String str, boolean z) {
        if (str.length() > 0) {
            if (z) {
                this.mFriends.clear();
                this.mFriends.addAll(this.mFriendsSearchHelper);
            }
            Collection arrayList = new ArrayList();
            for (User user : this.mFriends) {
                if (user != null) {
                    String name = user.getName();
                    if (!(name == null || name.isEmpty() || !name.toLowerCase().contains(str.toLowerCase()))) {
                        arrayList.add(user);
                    }
                }
            }
            this.mFriends.clear();
            this.mFriends.addAll(arrayList);
            checkSelectedFriend();
            if (this.mPage != 33) {
                activeSelectAllButton();
            }
            this.mAdapter.notifyDataSetChanged();
            return;
        }
        getAllData();
    }

    public void onActivityCreated(Bundle bundle) {
        super.onActivityCreated(bundle);
        getListView().setChoiceMode(2);
        View inflate = getActivity().getLayoutInflater().inflate(R.layout.header_list, null, false);
        this.mTvSumFriend = (TextView) inflate.findViewById(R.id.tv_sum);
        this.mTvTitle = (TextView) inflate.findViewById(R.id.tv_title);
        inflate.findViewById(R.id.view_devide).setVisibility(8);
        this.mTvSumFriend.setVisibility(0);
        this.mTvTitle.setVisibility(0);
        getListView().addHeaderView(inflate, null, false);
        editSelectedFriend();
        checkSelectedFriends();
        this.mAdapter = new SelectFriendsAdapter(getActivity(), this.mFriends, this.mSelectedFriendsId, this.mUserPhotoLoader);
        setListAdapter(this.mAdapter);
    }

    public void onCatfizStarted() {
        getAllData();
    }

    public void onCatfizStopped() {
    }

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        this.mCatfiz = new Catfiz(getActivity(), this);
        this.mPage = ((CustomActionBarPageActivity) getActivity()).getPage();
        this.mIdentity = ((CustomActionBarPageActivity) getActivity()).getIdentity();
        this.mId = getActivity().getIntent().getStringExtra(CatfishRESTAPI.CFCOMPACT_STICKERID);
        Log.d(TAG, "" + this.mId);
        ImageCacheParams imageCacheParams = new ImageCacheParams("");
        imageCacheParams.memCacheSize = (AccessibilityNodeInfoCompat.ACTION_DISMISS * Utils.getMemoryClass(getActivity())) / 3;
        imageCacheParams.diskCacheEnabled = false;
        this.mUserPhotoLoader = new UserPhotoLoader(getActivity(), imageCacheParams);
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        View inflate = layoutInflater.inflate(R.layout.fragment_select_friends, viewGroup, false);
        this.mIbClear = (ImageButton) inflate.findViewById(R.id.ib_clear);
        this.mEtSearch = (EditText) inflate.findViewById(R.id.et_search);
        this.mRlDfView = (RelativeLayout) inflate.findViewById(R.id.rl_df_content);
        this.mGroup = new Group();
        this.mActionbar = (CustomActionbarView) inflate.findViewById(R.id.custom_actionbar);
        this.mActionbar.setOnActionbarButtonClickListener(new OnActionbarButtonClicked() {
            public void onBtnActionActiveClicked() {
                Intent intent;
                switch (SelectFriendsFragment.this.mIdentity) {
                    case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                        SelectFriendsFragment.this.groupInviteFriends();
                        SelectFriendsFragment.this.backToGroupProfile();
                        return;
                    case HTTP.LF /*10*/:
                        SelectFriendsFragment.this.groupCreateTopic();
                        return;
                    case PinManagerV2.REGCODE_HASOLDACC /*11*/:
                        Log.d(SelectFriendsFragment.TAG, "upload group pp success");
                        SelectFriendsFragment.this.groupInviteFriends();
                        SelectFriendsFragment.this.getActivity().finish();
                        return;
                    case FizzlinkUtil.S_AAC /*18*/:
                        Log.d(SelectFriendsFragment.TAG, "bring back selected friend to broadcast : " + SelectFriendsFragment.this.mAdapter.getSelectionId().toString());
                        intent = SelectFriendsFragment.this.getActivity().getIntent();
                        intent.putExtra(AlbusModelObject.SELECTED_FRIEND, SelectFriendsFragment.this.mAdapter.getSelectionName().toString());
                        intent.putExtra(AlbusModelObject.SELECTED_FRIENDID, SelectFriendsFragment.this.mAdapter.getSelectionId().toString());
                        FragmentActivity activity = SelectFriendsFragment.this.getActivity();
                        SelectFriendsFragment.this.getActivity();
                        activity.setResult(-1, intent);
                        ((CustomActionBarPageActivity) SelectFriendsFragment.this.getActivity()).finish();
                        return;
                    case R.styleable.Theme_actionModePasteDrawable /*34*/:
                        SelectFriendsFragment.this.chatSendContacts();
                        return;
                    case R.styleable.Theme_actionModePopupWindowStyle /*39*/:
                        SelectFriendsFragment.this.sendShareToFriendStatus();
                        return;
                    case R.styleable.Theme_textAppearanceLargePopupMenu /*40*/:
                        SelectFriendsFragment.this.sendShareToFriend();
                        return;
                    case R.styleable.Theme_actionButtonStyle /*49*/:
                        SelectFriendsFragment.this.shareFizzlinkToFriends();
                        return;
                    case R.styleable.Theme_selectableItemBackground /*52*/:
                        SelectFriendsFragment.this.setSelectedriendToCategory();
                        return;
                    case R.styleable.Theme_borderlessButtonStyle /*54*/:
                        SelectFriendsFragment.this.setFirstSelectedriendToCategory();
                        return;
                    case R.styleable.Theme_dividerHorizontal /*56*/:
                        SelectFriendsFragment.this.sendViaExternalAppsToFriend();
                        return;
                    default:
                        intent = new Intent(SelectFriendsFragment.this.getActivity(), BroadcastActivity.class);
                        intent.putExtra(AlbusModelObject.SELECTED_FRIEND, SelectFriendsFragment.this.mAdapter.getSelectionName().toString());
                        intent.putExtra(AlbusModelObject.SELECTED_FRIENDID, SelectFriendsFragment.this.mAdapter.getSelectionId().toString());
                        intent.setFlags(603979776);
                        SelectFriendsFragment.this.startActivity(intent);
                        return;
                }
            }

            public void onBtnCloseClicked() {
                switch (SelectFriendsFragment.this.mIdentity) {
                    case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                        Log.d(SelectFriendsFragment.TAG, "back from invite");
                        SelectFriendsFragment.this.backToGroupProfile();
                        return;
                    case R.styleable.Theme_borderlessButtonStyle /*54*/:
                        Intent intent = new Intent(SelectFriendsFragment.this.getActivity(), CategoryActivity.class);
                        intent.putExtra(CatfishDataStorage.NIC_NAME, SelectFriendsFragment.this.mName);
                        intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, SelectFriendsFragment.this.mCategoryId);
                        SelectFriendsFragment.this.startActivity(intent);
                        SelectFriendsFragment.this.getActivity().finish();
                        return;
                    default:
                        SelectFriendsFragment.this.getActivity().finish();
                        return;
                }
            }
        });
        this.mActionbar.setOnActionbarMenuButtonClickListener(new OnActionbarMenuButtonClicked() {
            public void onBtnCategoryClicked() {
                Bundle bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 51);
                AlbusDialog.showDialog(51, new ListCategoryDialog(), SelectFriendsFragment.this.getActivity(), bundle, SelectFriendsFragment.this.getActivity().getSupportFragmentManager());
            }

            public void onBtnSelectAllClicked() {
                if (SelectFriendsFragment.this.mIsSelected) {
                    SelectFriendsFragment.this.mAdapter.removeAllSelected();
                    SelectFriendsFragment.this.mIsSelected = false;
                    return;
                }
                SelectFriendsFragment.this.mAdapter.setAllSelected();
                SelectFriendsFragment.this.mIsSelected = true;
            }
        });
        if (this.mPage == 11) {
            this.mActionbar.setButtonInvite();
            this.mActionbar.setCategoryButton();
        } else if (this.mPage == 49 || this.mIdentity == 56) {
            this.mActionbar.setButtonSend();
            this.mActionbar.setSelectAllButton(false);
            this.mActionbar.setCategoryButton();
        } else if (this.mPage == 34 || this.mPage == 56) {
            this.mActionbar.setButtonSend();
            if (this.mIdentity == 34) {
                this.mActionbar.setSelectAllButton(false);
            }
        } else if (this.mPage == 33) {
            this.mActionbar.setNoButton();
            this.mActionbar.setCategoryButton(true);
            this.mActionbar.setTitle(getActivity().getString(R.string.group_friend_promote));
        } else if (this.mPage == 53 || this.mPage == 54) {
            this.mActionbar.setButtonOk();
        } else {
            this.mActionbar.setButtonNext();
            this.mActionbar.setCategoryButton();
        }
        Log.d(TAG, "~~~~~ Data:" + this.mPage + " " + this.mIdentity);
        this.mEtSearch.requestFocus();
        this.mIbClear.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                SelectFriendsFragment.this.mEtSearch.setText("");
                SelectFriendsFragment.this.mEtSearch.clearFocus();
            }
        });
        this.mFriends = new ArrayList();
        this.mFriendsSearchHelper = new ArrayList();
        this.mSelectedFriends = new ArrayList();
        this.mSelectedFriendsId = new ArrayList();
        this.mEtSearch.requestFocus();
        this.mEtSearch.addTextChangedListener(new TextWatcher() {
            public void afterTextChanged(Editable editable) {
            }

            public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
            }

            public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                String obj = SelectFriendsFragment.this.mEtSearch.getText().toString();
                boolean z = i3 == 0 || i2 > i3;
                SelectFriendsFragment.this.limitListView(obj, z);
            }
        });
        this.mEtSearch.setOnEditorActionListener(new OnEditorActionListener() {
            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
                if (keyEvent != null && keyEvent.getAction() != 0) {
                    return false;
                }
                if (keyEvent != null && i != 6 && keyEvent.getKeyCode() != 66) {
                    return false;
                }
                if (!(keyEvent == null || keyEvent.isShiftPressed())) {
                    SelectFriendsFragment.this.mEtSearch.clearFocus();
                }
                return true;
            }
        });
        return inflate;
    }

    public void onDestroy() {
        super.onDestroy();
        this.mCatfiz.destroy();
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
        if (this.mCatfiz.isCatfizStarted()) {
            limitListView(this.mEtSearch.getText().toString(), false);
        }
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.start();
        }
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    public void onStop() {
        super.onStop();
        this.mCatfiz.finish();
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.stop();
        }
    }

    public void sendShareToFriend() {
        String stringExtra = getActivity().getIntent().getStringExtra(ClientCookie.PATH_ATTR);
        Message message = new Message("");
        for (User chatSendAttachedMessage : this.mSelectedFriends) {
            this.mCatfiz.chatSendAttachedMessage(chatSendAttachedMessage, message, stringExtra, ChunkStorage.DATA_TABLE_NAME, getActivity(), new Callback() {
                public void onError() {
                }

                public void onSuccess() {
                    AlbusUtils.setToastView(SelectFriendsFragment.this.getActivity(), SelectFriendsFragment.this.getString(R.string.share_qrcode_success));
                    SelectFriendsFragment.this.getActivity().finish();
                }
            });
        }
    }

    public void sendShareToFriendStatus() {
        String str = AlbusModelObject.IMAGE;
        String stringExtra = getActivity().getIntent().getStringExtra(ClientCookie.PATH_ATTR);
        if ((stringExtra != null && stringExtra.endsWith(".jpg")) || stringExtra.endsWith(".jpeg") || stringExtra.endsWith(".JPG") || stringExtra.endsWith(".JPEG")) {
            str = AlbusModelObject.DATA_TYPE_IMAGE;
        }
        for (User user : this.mSelectedFriends) {
            Log.d(TAG, "share qrcode to status of friend : " + user.getId());
            this.mCatfiz.shareQrCodeToFriendStatus(getActivity(), user.getId(), stringExtra, "", user.getStatusSequence(), str, new Callback() {
                public void onError() {
                }

                public void onSuccess() {
                    AlbusUtils.setToastView(SelectFriendsFragment.this.getActivity(), SelectFriendsFragment.this.getString(R.string.share_qrcode_success));
                    SelectFriendsFragment.this.getActivity().finish();
                }
            });
        }
    }

    public void setDataFriendBasedOnDialog(int i, final String str) {
        Log.d(TAG, "setDataFriendBasedOnDialog: " + i + " " + str);
        if (i == 1) {
            getAllData();
        } else {
            this.mCatfiz.FetchUserOnCategory(i, new FetchUserCategoryCallback() {
                public void onData(List list) {
                    SelectFriendsFragment.this.mFriends.clear();
                    SelectFriendsFragment.this.mFriendsSearchHelper.clear();
                    SelectFriendsFragment.this.mFriends.addAll(list);
                    SelectFriendsFragment.this.mFriendsSearchHelper.addAll(list);
                    SelectFriendsFragment.this.checkSelectedFriend();
                    SelectFriendsFragment.this.mAdapter.notifyDataSetChanged();
                    SelectFriendsFragment.this.mTvSumFriend.setText("" + list.size());
                    SelectFriendsFragment.this.mTvTitle.setText(str);
                }

                public void onError() {
                }

                public void onSuccess() {
                }
            });
        }
    }

    public void setDfView(boolean z) {
        if (z) {
            this.mRlDfView.setVisibility(0);
        } else {
            this.mRlDfView.setVisibility(8);
        }
    }

    public void setRemovedID(String str) {
        this.mRemovedId.add(str);
    }

    public void setSelect() {
        this.mIsSelected = false;
    }

    public void setSelectAll() {
        this.mIsSelected = false;
        this.mActionbar.setTitle("" + this.mSelectedFriends.size());
    }

    public void setUnselect() {
        this.mIsSelected = true;
    }

    public void setUnselectAll() {
        this.mIsSelected = true;
        this.mActionbar.setTitle("");
    }
}
