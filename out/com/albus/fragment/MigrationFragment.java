package com.albus.fragment;

import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.Fragment;
import android.text.Html;
import android.text.method.LinkMovementMethod;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.TextView.BufferType;
import com.albus.activity.RegisterActivity;
import com.albus.activity.RegisterSettingProfileActivity;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.AlbusDialog.OnActionClickListener;
import com.albus.dialog.AlbusDialogInterface;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.view.CustomEdittext;
import com.albus.view.CustomEdittext.OnActionEdittextChange;
import com.catfiz.R;
import com.catfiz.base.Callback.RegistrationCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.model.Account;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishService;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.signal.Signal;
import com.catfiz.signal.SignalBinderRegistration;
import com.catfiz.util.Log;

public class MigrationFragment extends Fragment implements OnClickListener, ICatfiz {
    private static final String TAG = "MigrationFragment";
    private Button mBtnRegister = null;
    private Catfiz mCatfiz = null;
    private CustomEdittext mCetEmail = null;
    private CustomEdittext mCetEmailCek;
    private CustomEdittext mCetPass = null;
    private String mEmail = null;
    private Handler mHandler = new Handler();
    private long mIdle = 1250;
    private boolean mIsFinished = false;
    private boolean mIsPassCorrect = false;
    private long mLastEdit = 0;
    private LinearLayout mLlProgress = null;
    private String mPass = null;
    private View mShadow = null;
    private Runnable mShowError = null;
    private TextView mTvTerm = null;

    /* synthetic */ class AnonymousClass6 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$signal$Signal = new int[Signal.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$signal$Signal[Signal.ACCOUNT_REGISTERED.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
        }
    }

    class verifyDialog implements AlbusDialogInterface {
        private verifyDialog() {
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            AlbusDialog.setOnActionClickListener(i, new OnActionClickListener() {
                public void onActionNoListener() {
                    MigrationFragment.this.EnableRegister();
                    MigrationFragment.this.mCetEmail.requestFocus();
                }

                public void onActionYesListener() {
                    ((RegisterActivity) MigrationFragment.this.getActivity()).dismissKeyboard(MigrationFragment.this.mCetEmail);
                    ((RegisterActivity) MigrationFragment.this.getActivity()).dismissKeyboard(MigrationFragment.this.mCetPass);
                    MigrationFragment.this.mCetEmail.clearFocus();
                    MigrationFragment.this.mCetPass.clearFocus();
                    MigrationFragment.this.mLlProgress.setVisibility(0);
                    MigrationFragment.this.mShadow.setVisibility(0);
                    MigrationFragment.this.executeRegister();
                    MigrationFragment.this.DisableRegister();
                }
            });
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    private void DisableRegister() {
        this.mBtnRegister.setEnabled(false);
        this.mBtnRegister.setBackgroundResource(R.drawable.bg_btn_blue_disable);
    }

    private void EnableRegister() {
        this.mBtnRegister.setEnabled(true);
        this.mBtnRegister.setBackgroundResource(R.drawable.button_blue_onclick);
    }

    private void executeRegister() {
        Account account = new Account();
        account.setEmail(this.mEmail);
        account.setPassword(this.mPass);
        CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
        catfishPreferences.edit().putString(CatfishRESTAPI.CFCOMPACT_EMAIL, this.mEmail).commit();
        catfishPreferences.edit().putString(CatfishRESTAPI.CFCOMPACT_USERKEY, this.mPass).commit();
        this.mCatfiz.setAccount(account);
        this.mCatfiz.accountRegisterExisting(account, new RegistrationCallback() {
            public void onAlreadyRegistered() {
                MigrationFragment.this.DisableRegister();
                MigrationFragment.this.mLlProgress.setVisibility(8);
                MigrationFragment.this.mShadow.setVisibility(8);
                MigrationFragment.this.startActivity(new Intent(MigrationFragment.this.getActivity().getApplicationContext(), RegisterSettingProfileActivity.class).setFlags(268468224));
            }

            public void onError() {
                MigrationFragment.this.EnableRegister();
                AlbusUtils.setToastView(MigrationFragment.this.getActivity(), MigrationFragment.this.getString(R.string.register_error));
                MigrationFragment.this.mLlProgress.setVisibility(8);
                MigrationFragment.this.mShadow.setVisibility(8);
            }

            public void onSuccess() {
                MigrationFragment.this.DisableRegister();
                MigrationFragment.this.mLlProgress.setVisibility(8);
                MigrationFragment.this.mShadow.setVisibility(8);
                MigrationFragment.this.startActivity(new Intent(MigrationFragment.this.getActivity().getApplicationContext(), RegisterSettingProfileActivity.class).setFlags(268468224));
            }
        });
    }

    public static MigrationFragment newInstance() {
        return new MigrationFragment();
    }

    public void onCatfizStarted() {
        Log.d(TAG, "onCatfizStarted MigrationFragment");
    }

    public void onCatfizStopped() {
        Log.d(TAG, "onCatfizStopped MigrationFragment");
    }

    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.btn_register:
                if (AlbusUtils.isNetworkAvailable(getActivity())) {
                    this.mCetPass.clearFocus();
                    this.mCetEmail.clearFocus();
                    Bundle bundle = new Bundle();
                    bundle.putInt(AlbusModelObject.DIALOG, 41);
                    bundle.putString(CatfishRESTAPI.CFCOMPACT_EMAIL, this.mEmail);
                    AlbusDialog.showDialog(41, new verifyDialog(), getActivity(), bundle, getActivity().getSupportFragmentManager());
                    return;
                }
                AlbusUtils.setToastView(getActivity(), getString(R.string.check_connection));
                return;
            default:
                return;
        }
    }

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        this.mCatfiz = new Catfiz(getActivity(), this, new SignalBinderRegistration());
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        Log.d(TAG, "onCreateView MigrationFragment");
        View inflate = layoutInflater.inflate(R.layout.fragment_migrate, viewGroup, false);
        this.mBtnRegister = (Button) inflate.findViewById(R.id.btn_register);
        this.mTvTerm = (TextView) inflate.findViewById(R.id.tv_term);
        this.mLlProgress = (LinearLayout) inflate.findViewById(R.id.ll_dialog);
        this.mShadow = inflate.findViewById(R.id.view_shadow);
        this.mTvTerm.setText(Html.fromHtml(getString(R.string.reg_click_terms, getString(R.string.terms_url))), BufferType.SPANNABLE);
        this.mTvTerm.setMovementMethod(LinkMovementMethod.getInstance());
        this.mCetEmail = (CustomEdittext) inflate.findViewById(R.id.cet_email);
        this.mCetEmail.setEmailInput(getString(R.string.your_email));
        this.mCetEmail.setOnActionEdittextChangeClickListener(new OnActionEdittextChange() {
            public void onTextChanged(EditText editText) {
                MigrationFragment.this.mEmail = editText.getText().toString();
                if (MigrationFragment.this.mPass != null) {
                    MigrationFragment.this.validateEdittext();
                }
                if (MigrationFragment.this.mCetEmailCek.getEmailText() != null && !MigrationFragment.this.mCetEmailCek.getEmailText().equals("") && !MigrationFragment.this.mCetEmailCek.getEmailText().equals(MigrationFragment.this.mEmail)) {
                    MigrationFragment.this.mCetEmailCek.setErrorView(MigrationFragment.this.getString(R.string.email_invalid));
                }
            }
        });
        this.mCetEmailCek = (CustomEdittext) inflate.findViewById(R.id.cet_email_cek);
        this.mCetEmailCek.setEmailInput(getString(R.string.confirm_email));
        this.mCetEmailCek.setOnActionEdittextChangeClickListener(new OnActionEdittextChange() {
            public void onTextChanged(EditText editText) {
                String emailText = MigrationFragment.this.mCetEmail.getEmailText();
                String obj = editText.getText().toString();
                if (emailText == null || emailText.equals("")) {
                    MigrationFragment.this.mCetEmail.setErrorView(MigrationFragment.this.getString(R.string.email_invalid));
                } else if (obj == null) {
                } else {
                    if (obj.equals(emailText)) {
                        MigrationFragment.this.mCetEmailCek.hideErrorView();
                    } else {
                        MigrationFragment.this.mCetEmailCek.setErrorView(MigrationFragment.this.getString(R.string.email_invalid));
                    }
                }
            }
        });
        this.mCetPass = (CustomEdittext) inflate.findViewById(R.id.cet_pass);
        this.mCetPass.setPassInput(getString(R.string.password));
        this.mShowError = new Runnable() {
            public void run() {
                if (System.currentTimeMillis() > (MigrationFragment.this.mLastEdit + MigrationFragment.this.mIdle) - 500 && !MigrationFragment.this.mIsFinished) {
                    MigrationFragment.this.mCetPass.setErrorView(MigrationFragment.this.getString(R.string.pass_6));
                    MigrationFragment.this.mIsPassCorrect = false;
                }
            }
        };
        this.mCetPass.setOnActionEdittextChangeClickListener(new OnActionEdittextChange() {
            public void onTextChanged(EditText editText) {
                MigrationFragment.this.mPass = editText.getText().toString();
                if (MigrationFragment.this.mEmail == null) {
                    MigrationFragment.this.DisableRegister();
                } else if (AlbusUtils.isEmailValid(MigrationFragment.this.mEmail)) {
                    if (MigrationFragment.this.mPass.length() >= 6) {
                        MigrationFragment.this.mCetPass.hideErrorView();
                        MigrationFragment.this.mIsPassCorrect = true;
                        MigrationFragment.this.mIsFinished = true;
                    } else {
                        MigrationFragment.this.mIsFinished = false;
                        MigrationFragment.this.mIsPassCorrect = false;
                        MigrationFragment.this.mCetPass.hideErrorView();
                        MigrationFragment.this.mLastEdit = System.currentTimeMillis();
                        MigrationFragment.this.mHandler.postDelayed(MigrationFragment.this.mShowError, MigrationFragment.this.mIdle);
                    }
                    MigrationFragment.this.validateEdittext();
                }
            }
        });
        this.mBtnRegister.setOnClickListener(this);
        this.mShadow.setOnClickListener(null);
        return inflate;
    }

    public void onDestroy() {
        super.onDestroy();
        this.mCatfiz.destroy();
    }

    public void onRegisterProgress() {
        Log.d(TAG, "onRegisterProgress MigrationFragment");
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
    }

    public boolean onSignalEvent(Signal signal) {
        switch (AnonymousClass6.$SwitchMap$com$catfiz$signal$Signal[signal.ordinal()]) {
            case e.b /*1*/:
                this.mCatfiz.reInit();
                startActivity(new Intent(getActivity().getApplicationContext(), RegisterSettingProfileActivity.class).setFlags(268468224));
                break;
        }
        return false;
    }

    public void onStop() {
        super.onStop();
        this.mCatfiz.finish();
    }

    public void validateEdittext() {
        if (this.mIsPassCorrect && AlbusUtils.isEmailValid(this.mEmail)) {
            EnableRegister();
        } else {
            DisableRegister();
        }
    }
}
