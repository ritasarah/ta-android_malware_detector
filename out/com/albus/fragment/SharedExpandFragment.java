package com.albus.fragment;

import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.ActionMode;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView.MultiChoiceModeListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.GridView;
import com.albus.activity.SharedExpandActivity;
import com.albus.activity.SharedViewerActivity;
import com.albus.adapter.SharedExpandAdapter;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.DialogUI;
import com.albus.util.AlbusModelObject;
import com.catfiz.R;
import com.catfiz.util.Log;
import java.util.ArrayList;
import org.apache.http.protocol.HTTP;

public class SharedExpandFragment extends Fragment implements MultiChoiceModeListener {
    private static final String TAG = "GalleryExpandFragment";
    private ActionMode mAMode = null;
    private int[] mData = null;
    private SharedExpandAdapter mGeaAdapter = null;
    private GridView mGv = null;
    private int mSelectCount = 0;

    public static SharedExpandFragment newInstance() {
        return new SharedExpandFragment();
    }

    public void closeActionMode() {
        this.mAMode.finish();
    }

    public boolean onActionItemClicked(ActionMode actionMode, MenuItem menuItem) {
        this.mAMode = actionMode;
        switch (menuItem.getItemId()) {
            case R.id.multi_item_share:
                ArrayList arrayList = new ArrayList();
                Intent intent = new Intent();
                intent.setAction("android.intent.action.SEND_MULTIPLE");
                intent.putParcelableArrayListExtra("android.intent.extra.STREAM", arrayList);
                intent.setType("image/*");
                startActivity(Intent.createChooser(intent, "Share images to.."));
                break;
            case R.id.multi_item_delete:
                Bundle bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 15);
                bundle.putInt(AlbusModelObject.VALUE, this.mSelectCount);
                AlbusDialog.showDialog(15, new DialogUI().getDialogInterface(), getActivity(), bundle, getActivity().getSupportFragmentManager());
                break;
        }
        return false;
    }

    public boolean onCreateActionMode(ActionMode actionMode, Menu menu) {
        getActivity().getMenuInflater().inflate(R.menu.actionbar_multiple_select, menu);
        return true;
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        View inflate = layoutInflater.inflate(R.layout.fragment_gallery_expand, viewGroup, false);
        this.mData = ((SharedExpandActivity) getActivity()).getImageResID();
        Log.d(TAG, "data - 0= " + this.mData[0]);
        this.mGv = (GridView) inflate.findViewById(R.id.grid);
        this.mGeaAdapter = new SharedExpandAdapter(this.mData, getActivity());
        this.mGv.setAdapter(this.mGeaAdapter);
        this.mGv.setChoiceMode(3);
        this.mGv.setMultiChoiceModeListener(this);
        this.mGv.setDrawSelectorOnTop(true);
        this.mGv.setOnItemClickListener(new OnItemClickListener() {
            public void onItemClick(AdapterView adapterView, View view, int i, long j) {
                Intent intent = new Intent(SharedExpandFragment.this.getActivity(), SharedViewerActivity.class);
                intent.putExtra(HTTP.IDENTITY_CODING, 19);
                intent.putExtra(AlbusModelObject.IMAGE, SharedExpandFragment.this.mData);
                intent.putExtra(AlbusModelObject.POSITION, i);
                Log.d(SharedExpandFragment.TAG, "position= " + i);
                Log.d(SharedExpandFragment.TAG, "Data image = " + SharedExpandFragment.this.mData);
                SharedExpandFragment.this.startActivity(intent);
            }
        });
        return inflate;
    }

    public void onDestroyActionMode(ActionMode actionMode) {
        this.mGeaAdapter.clearSelection();
    }

    public void onItemCheckedStateChanged(ActionMode actionMode, int i, long j, boolean z) {
        this.mSelectCount = this.mGv.getCheckedItemCount();
        if (z) {
            this.mGeaAdapter.setNewSelection(i, z);
            actionMode.setTitle("" + this.mSelectCount);
            return;
        }
        this.mGeaAdapter.removeSelection(i);
        actionMode.setTitle("" + this.mSelectCount);
    }

    public boolean onPrepareActionMode(ActionMode actionMode, Menu menu) {
        menu.getItem(0).setVisible(true);
        return false;
    }
}
