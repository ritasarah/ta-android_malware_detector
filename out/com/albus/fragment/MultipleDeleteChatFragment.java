package com.albus.fragment;

import android.os.Bundle;
import android.support.v4.app.ListFragment;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.view.ActionMode;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView.MultiChoiceModeListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.LinearLayout;
import android.widget.ListView;
import com.albus.adapter.ChatListAdapter;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.DialogUI;
import com.albus.media.ImageCache.ImageCacheParams;
import com.albus.media.UserPhotoLoader;
import com.albus.util.AlbusModelObject;
import com.catfiz.R;
import com.catfiz.base.Callback.PrivateFetchActiveFriendsCallback;
import com.catfiz.base.Callback.UserFetchOfficalsCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.model.User;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.signal.Signal;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class MultipleDeleteChatFragment extends ListFragment implements ICatfiz {
    private static final String TAG = "MultipleDeleteChatFragment";
    private ChatListAdapter mAdapter = null;
    private Catfiz mCatfiz = null;
    private List mChats = new ArrayList();
    private int mCountSelected = 0;
    private MenuItem mDeleteItem = null;
    private List mFriends = new ArrayList();
    private LinearLayout mLlDfChat = null;
    private LinearLayout mLlDfGroup = null;
    private LinearLayout mLlDfView = null;
    private ActionMode mMode = null;
    private List mOfficials = new ArrayList();
    private int mSelected = -1;
    private Map mSelectedUser = null;
    private UserPhotoLoader mUserPhotoLoader = null;

    public class FetchActiveFriends implements PrivateFetchActiveFriendsCallback {
        private WeakReference mThisFragmentRef;

        public FetchActiveFriends(MultipleDeleteChatFragment multipleDeleteChatFragment) {
            this.mThisFragmentRef = new WeakReference(multipleDeleteChatFragment);
        }

        public void onData(List list) {
            MultipleDeleteChatFragment multipleDeleteChatFragment = (MultipleDeleteChatFragment) this.mThisFragmentRef.get();
            if (multipleDeleteChatFragment == null) {
                Log.d(MultipleDeleteChatFragment.TAG, "FetchActiveFriends weak Ref is null");
                return;
            }
            multipleDeleteChatFragment.mChats.clear();
            if (list.size() > 0) {
                User user;
                for (User user2 : list) {
                    multipleDeleteChatFragment.mChats.add(user2);
                }
                multipleDeleteChatFragment.mFriends.clear();
                multipleDeleteChatFragment.mFriends.addAll(multipleDeleteChatFragment.mChats);
                if (multipleDeleteChatFragment.mOfficials.size() > 0) {
                    multipleDeleteChatFragment.mFriends.addAll(multipleDeleteChatFragment.mOfficials);
                    for (int i = 0; i < multipleDeleteChatFragment.mFriends.size(); i++) {
                        User user3 = (User) multipleDeleteChatFragment.mFriends.get(i);
                        for (int i2 = i; i2 < multipleDeleteChatFragment.mFriends.size(); i2++) {
                            user2 = (User) multipleDeleteChatFragment.mFriends.get(i2);
                            if (user3.getLastChatActivity().compareTo(user2.getLastChatActivity()) < 0) {
                                multipleDeleteChatFragment.mFriends.add(i, user2);
                                multipleDeleteChatFragment.mFriends.remove(i + 1);
                                multipleDeleteChatFragment.mFriends.add(i2, user3);
                                multipleDeleteChatFragment.mFriends.remove(i2 + 1);
                                user3 = user2;
                            }
                        }
                    }
                }
            }
            if (multipleDeleteChatFragment.mFriends.size() <= 0 || multipleDeleteChatFragment.mFriends.size() <= multipleDeleteChatFragment.mSelected) {
                multipleDeleteChatFragment.setDfView(true);
            } else {
                multipleDeleteChatFragment.getListView().setItemChecked(multipleDeleteChatFragment.mSelected, true);
                multipleDeleteChatFragment.getListView().setSelection(multipleDeleteChatFragment.mSelected);
                multipleDeleteChatFragment.mSelectedUser.put(Integer.valueOf(multipleDeleteChatFragment.mSelected), ((User) multipleDeleteChatFragment.mFriends.get(multipleDeleteChatFragment.mSelected)).getId());
                multipleDeleteChatFragment.setDfView(false);
            }
            multipleDeleteChatFragment.mAdapter.notifyDataSetChanged();
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    public class FetchOfficialsCB implements UserFetchOfficalsCallback {
        private WeakReference mThisFragmentRef;

        public FetchOfficialsCB(MultipleDeleteChatFragment multipleDeleteChatFragment) {
            this.mThisFragmentRef = new WeakReference(multipleDeleteChatFragment);
        }

        public void onData(List list) {
            MultipleDeleteChatFragment multipleDeleteChatFragment = (MultipleDeleteChatFragment) this.mThisFragmentRef.get();
            if (multipleDeleteChatFragment == null) {
                Log.d(MultipleDeleteChatFragment.TAG, "FetchOfficialsCB weak Ref is null");
                return;
            }
            multipleDeleteChatFragment.mOfficials.clear();
            if (list.size() > 0) {
                User user;
                for (User user2 : list) {
                    multipleDeleteChatFragment.mOfficials.add(user2);
                }
                multipleDeleteChatFragment.mFriends.clear();
                multipleDeleteChatFragment.mFriends.addAll(multipleDeleteChatFragment.mOfficials);
                if (multipleDeleteChatFragment.mChats.size() > 0) {
                    multipleDeleteChatFragment.mFriends.addAll(multipleDeleteChatFragment.mChats);
                    for (int i = 0; i < multipleDeleteChatFragment.mFriends.size(); i++) {
                        User user3 = (User) multipleDeleteChatFragment.mFriends.get(i);
                        for (int i2 = i; i2 < multipleDeleteChatFragment.mFriends.size(); i2++) {
                            user2 = (User) multipleDeleteChatFragment.mFriends.get(i2);
                            if (user3.getLastChatActivity().compareTo(user2.getLastChatActivity()) < 0) {
                                multipleDeleteChatFragment.mFriends.add(i, user2);
                                multipleDeleteChatFragment.mFriends.remove(i + 1);
                                multipleDeleteChatFragment.mFriends.add(i2, user3);
                                multipleDeleteChatFragment.mFriends.remove(i2 + 1);
                                user3 = user2;
                            }
                        }
                    }
                }
            }
            if (multipleDeleteChatFragment.mFriends.size() <= 0 || multipleDeleteChatFragment.mFriends.size() <= multipleDeleteChatFragment.mSelected) {
                multipleDeleteChatFragment.setDfView(true);
            } else {
                multipleDeleteChatFragment.getListView().setItemChecked(multipleDeleteChatFragment.mSelected, true);
                multipleDeleteChatFragment.getListView().setSelection(multipleDeleteChatFragment.mSelected);
                multipleDeleteChatFragment.mSelectedUser.put(Integer.valueOf(multipleDeleteChatFragment.mSelected), ((User) multipleDeleteChatFragment.mFriends.get(multipleDeleteChatFragment.mSelected)).getId());
                multipleDeleteChatFragment.setDfView(false);
            }
            multipleDeleteChatFragment.mAdapter.notifyDataSetChanged();
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    private void firstchoice() {
        getListView().setMultiChoiceModeListener(new MultiChoiceModeListener() {
            public boolean onActionItemClicked(ActionMode actionMode, MenuItem menuItem) {
                int i = 0;
                MultipleDeleteChatFragment.this.mMode = actionMode;
                switch (menuItem.getItemId()) {
                    case 16908332:
                        actionMode.finish();
                        MultipleDeleteChatFragment.this.getActivity().finish();
                        break;
                    case R.id.pick_allfriend:
                        ListView listView = MultipleDeleteChatFragment.this.getListView();
                        if (MultipleDeleteChatFragment.this.mCountSelected >= MultipleDeleteChatFragment.this.mAdapter.getCount()) {
                            for (int i2 = 0; i2 < MultipleDeleteChatFragment.this.mAdapter.getCount(); i2++) {
                                listView.setItemChecked(i2, false);
                            }
                            break;
                        }
                        while (i < MultipleDeleteChatFragment.this.mAdapter.getCount()) {
                            listView.setItemChecked(i, true);
                            i++;
                        }
                        break;
                    case R.id.multi_item_delete_chat:
                        Bundle bundle = new Bundle();
                        bundle.putInt(AlbusModelObject.DIALOG, 1);
                        bundle.putInt(AlbusModelObject.VALUE, MultipleDeleteChatFragment.this.mCountSelected);
                        String str = "";
                        for (Entry value : MultipleDeleteChatFragment.this.mSelectedUser.entrySet()) {
                            str = str + ((String) value.getValue()) + ":";
                        }
                        bundle.putString(AlbusModelObject.SELECTED_FRIENDID, str);
                        AlbusDialog.showDialog(1, new DialogUI().getDialogInterface(), MultipleDeleteChatFragment.this.getActivity(), bundle, MultipleDeleteChatFragment.this.getActivity().getSupportFragmentManager());
                        break;
                }
                return true;
            }

            public boolean onCreateActionMode(ActionMode actionMode, Menu menu) {
                MultipleDeleteChatFragment.this.getActivity().getMenuInflater().inflate(R.menu.actionbar_multiple_select, menu);
                menu.setGroupVisible(R.id.multi_select3, true);
                MultipleDeleteChatFragment.this.mDeleteItem = menu.findItem(R.id.multi_item_clear);
                MultipleDeleteChatFragment.this.mDeleteItem.setVisible(false);
                return true;
            }

            public void onDestroyActionMode(ActionMode actionMode) {
                MultipleDeleteChatFragment.this.getActivity().finish();
            }

            public void onItemCheckedStateChanged(ActionMode actionMode, int i, long j, boolean z) {
                MultipleDeleteChatFragment.this.mCountSelected = MultipleDeleteChatFragment.this.getListView().getCheckedItemCount();
                if (z) {
                    MultipleDeleteChatFragment.this.mAdapter.setNewSelection(i, z);
                    Log.v("checked", i + " checked");
                    MultipleDeleteChatFragment.this.mSelectedUser.put(Integer.valueOf(i), MultipleDeleteChatFragment.this.mAdapter.getId(i));
                    Log.d(MultipleDeleteChatFragment.TAG, "id selected = " + MultipleDeleteChatFragment.this.mAdapter.getId(i));
                } else {
                    MultipleDeleteChatFragment.this.mAdapter.removeSelection(i);
                    Log.v("checked", i + " unchecked");
                    MultipleDeleteChatFragment.this.mSelectedUser.remove(Integer.valueOf(i));
                    Log.d(MultipleDeleteChatFragment.TAG, "id selected = " + MultipleDeleteChatFragment.this.mAdapter.getId(i));
                }
                actionMode.setTitle("" + MultipleDeleteChatFragment.this.mCountSelected);
            }

            public boolean onPrepareActionMode(ActionMode actionMode, Menu menu) {
                return false;
            }
        });
        getListView().setOnItemClickListener(new OnItemClickListener() {
            public void onItemClick(AdapterView adapterView, View view, int i, long j) {
                MultipleDeleteChatFragment.this.getListView().setItemChecked(i, !MultipleDeleteChatFragment.this.mAdapter.isPositionChecked(i));
            }
        });
    }

    public static MultipleDeleteChatFragment newInstance(Bundle bundle) {
        MultipleDeleteChatFragment multipleDeleteChatFragment = new MultipleDeleteChatFragment();
        multipleDeleteChatFragment.mSelected = bundle.getInt(CatfishRESTAPI.CFCOMPACT_STICKERID);
        return multipleDeleteChatFragment;
    }

    public void deleteSelectedChat() {
        this.mAdapter.deleteSelection();
        this.mMode.finish();
        getActivity().setResult(-1);
        getActivity().finish();
    }

    public void deleteSelectedItem() {
        this.mAdapter.deleteSelection();
    }

    public void getAllData() {
        this.mCatfiz.chatFetchOfficials(new FetchOfficialsCB(this));
        this.mCatfiz.chatFetchActiveFriends(new FetchActiveFriends(this));
    }

    public void onActivityCreated(Bundle bundle) {
        super.onActivityCreated(bundle);
        getListView().setChoiceMode(3);
        this.mAdapter = new ChatListAdapter(getActivity(), this.mFriends, R.layout.item_chat_group, 100, this.mUserPhotoLoader);
        setListAdapter(this.mAdapter);
        if (getListView().getChoiceMode() == 3) {
            firstchoice();
        }
        this.mSelectedUser = new HashMap();
    }

    public void onCatfizStarted() {
        getAllData();
    }

    public void onCatfizStopped() {
    }

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        Log.d(TAG, "onCreate ChatFragment");
        this.mCatfiz = new Catfiz(getActivity(), this);
        ImageCacheParams imageCacheParams = new ImageCacheParams("");
        imageCacheParams.memCacheSize = (AccessibilityNodeInfoCompat.ACTION_DISMISS * Utils.getMemoryClass(getActivity())) / 3;
        imageCacheParams.diskCacheEnabled = false;
        this.mUserPhotoLoader = new UserPhotoLoader(getActivity(), imageCacheParams);
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        View inflate = layoutInflater.inflate(R.layout.fragment_chat_group, viewGroup, false);
        this.mLlDfView = (LinearLayout) inflate.findViewById(R.id.ll_df_content);
        this.mLlDfChat = (LinearLayout) inflate.findViewById(R.id.ll_df_chat);
        this.mLlDfGroup = (LinearLayout) inflate.findViewById(R.id.ll_df_group);
        inflate.findViewById(R.id.view_shadow).setVisibility(0);
        return inflate;
    }

    public void onDestroy() {
        super.onDestroy();
        this.mCatfiz.destroy();
        Log.d(TAG, "onDestroy");
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
        Log.d(TAG, "onResume");
        if (this.mCatfiz.isCatfizStarted()) {
            getAllData();
        }
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.start();
        }
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    public void onStop() {
        super.onStop();
        this.mCatfiz.finish();
        Log.d(TAG, "onStop");
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.stop();
        }
    }

    public void setDfView(boolean z) {
        if (z) {
            this.mLlDfView.setVisibility(0);
            this.mLlDfChat.setVisibility(0);
            this.mLlDfGroup.setVisibility(8);
            return;
        }
        this.mLlDfView.setVisibility(8);
    }
}
