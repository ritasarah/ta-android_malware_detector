package com.albus.fragment;

import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.Fragment;
import android.view.Display;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.albus.activity.CustomActionBarPageActivity;
import com.albus.activity.MenuActivity;
import com.albus.activity.ScanQrCodeActivity;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.AlbusDialog.OnShareButtonListener.OnShareQRButtonListener;
import com.albus.dialog.AlbusDialogInterface;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.b.a.a;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.media.StorageDir;
import com.catfiz.qrlib.data.Contents.Type;
import com.catfiz.qrlib.qrcode.QRCodeEncoder;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishService;
import com.catfiz.signal.Signal;
import com.catfiz.util.CFURLSpan;
import com.catfiz.util.ImageViewSaver;
import com.catfiz.util.Log;
import java.io.File;
import org.apache.http.cookie.ClientCookie;
import org.apache.http.protocol.HTTP;

public class QrcodeViewFragment extends Fragment implements OnClickListener, ICatfiz {
    private static final String TAG = "QrcodeViewFragment";
    private RelativeLayout mBottomBar = null;
    private Button mBtnSave = null;
    private Button mBtnScan = null;
    private Button mBtnShare = null;
    private Catfiz mCatfiz = null;
    private Intent mIntent = null;
    private ImageView mIvQrcode = null;
    private RelativeLayout mRlCopyNic = null;
    private TextView mTvNic = null;
    private TextView mTvQRScanMsg = null;
    private String mUserpin = null;

    class QRCodeDialog implements AlbusDialogInterface {
        private Uri mUri;

        public QRCodeDialog(Uri uri) {
            this.mUri = uri;
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, final DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            AlbusDialog.setOnShareButtonClicked(new OnShareQRButtonListener() {
                public void onSaveToGallery() {
                    if (QrcodeViewFragment.this.mIvQrcode != null) {
                        String mediaDir = StorageDir.getMediaDir(9);
                        new File(mediaDir).mkdirs();
                        mediaDir = mediaDir + QrcodeViewFragment.this.getActivity().getString(R.string.my_nic);
                        ImageViewSaver.saveView(QrcodeViewFragment.this.mIvQrcode, mediaDir);
                        AlbusUtils.setToastView(QrcodeViewFragment.this.getActivity(), QrcodeViewFragment.this.getString(R.string.saveqrcode_success) + mediaDir);
                    }
                }

                public void onShareToFriendClicked() {
                    dialogFragment.dismiss();
                    String path = QRCodeDialog.this.mUri.getPath();
                    Intent intent = new Intent(QrcodeViewFragment.this.getActivity(), CustomActionBarPageActivity.class);
                    intent.putExtra(AlbusModelObject.PAGE, 34);
                    intent.putExtra(HTTP.IDENTITY_CODING, 40);
                    intent.putExtra(ClientCookie.PATH_ATTR, path);
                    QrcodeViewFragment.this.startActivity(intent);
                }

                public void onShareToMyStatusClicked() {
                    long j = CatfishService.getCatfishPreferences().getLong(CatfishService.USERSTATUS_SEQ_PREF, 0);
                    String str = AlbusModelObject.IMAGE;
                    QRCodeDialog.this.mUri.getPath();
                    AlbusUtils.setToastView(QrcodeViewFragment.this.getActivity(), QrcodeViewFragment.this.getString(R.string.share_qrcode_success));
                    QrcodeViewFragment.this.mCatfiz.shareQrCodeToMyStatus(QrcodeViewFragment.this.getActivity(), QRCodeDialog.this.mUri, "", j, str, new Callback() {
                        public void onError() {
                        }

                        public void onSuccess() {
                            AlbusUtils.setToastView(QrcodeViewFragment.this.getActivity(), QrcodeViewFragment.this.getString(R.string.share_qrcode_success));
                            dialogFragment.dismiss();
                        }
                    });
                }

                public void onShareToPoolClicked() {
                    dialogFragment.dismiss();
                    String path = QRCodeDialog.this.mUri.getPath();
                    Intent intent = new Intent(QrcodeViewFragment.this.getActivity(), CustomActionBarPageActivity.class);
                    intent.putExtra(AlbusModelObject.PAGE, 41);
                    intent.putExtra(HTTP.IDENTITY_CODING, 42);
                    intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, QrcodeViewFragment.this.mUserpin);
                    intent.putExtra(ClientCookie.PATH_ATTR, path);
                    QrcodeViewFragment.this.startActivity(intent);
                }
            });
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    private void getQRCodeImg() {
        Display defaultDisplay = ((WindowManager) getActivity().getSystemService("window")).getDefaultDisplay();
        int width = defaultDisplay.getWidth();
        int height = defaultDisplay.getHeight();
        if (width >= height) {
            width = height;
        }
        try {
            this.mIvQrcode.setImageBitmap(new QRCodeEncoder("http://nic.catfiz.com/" + this.mUserpin, null, Type.TEXT, a.QR_CODE.toString(), (width * 7) / 8).encodeAsBitmap());
        } catch (Throwable e) {
            Log.e(TAG, "Could not encode barcode", e);
        } catch (Throwable e2) {
            Log.e(TAG, "Could not encode barcode", e2);
        }
    }

    public static QrcodeViewFragment newInstance() {
        return new QrcodeViewFragment();
    }

    public void onCatfizStarted() {
    }

    public void onCatfizStopped() {
    }

    public void onClick(View view) {
        String mediaDir;
        switch (view.getId()) {
            case R.id.btn_scan:
                startActivity(new Intent(getActivity(), ScanQrCodeActivity.class));
                return;
            case R.id.btn_save:
                if (this.mIvQrcode != null) {
                    mediaDir = StorageDir.getMediaDir(9);
                    new File(mediaDir).mkdirs();
                    mediaDir = mediaDir + getActivity().getString(R.string.my_nic);
                    ImageViewSaver.saveView(this.mIvQrcode, mediaDir);
                    AlbusUtils.setToastView(getActivity(), getString(R.string.saveqrcode_success) + mediaDir);
                    return;
                }
                return;
            case R.id.btn_share:
                if (this.mIvQrcode != null) {
                    mediaDir = CatfishPhotoStorage.getImageStorageDir(getActivity());
                    new File(mediaDir).mkdirs();
                    mediaDir = mediaDir + "/" + this.mUserpin;
                    ImageViewSaver.saveView(this.mIvQrcode, mediaDir);
                    Uri fromFile = Uri.fromFile(new File(mediaDir + ".png"));
                    Bundle bundle = new Bundle();
                    bundle.putInt(AlbusModelObject.DIALOG, 34);
                    AlbusDialog.showDialog(34, new QRCodeDialog(fromFile), getActivity(), bundle, ((MenuActivity) getActivity()).getSupportFragmentManager());
                    return;
                }
                return;
            case R.id.rl_nic:
                AlbusUtils.copyToClipboard(getActivity(), CFURLSpan.NIC_SCHEME + this.mUserpin);
                AlbusUtils.setToastView(getActivity(), getString(R.string.nic_copied));
                return;
            default:
                return;
        }
    }

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        this.mCatfiz = new Catfiz(getActivity(), this);
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        View inflate = layoutInflater.inflate(R.layout.fragment_qrcode, viewGroup, false);
        this.mIvQrcode = (ImageView) inflate.findViewById(R.id.iv_qr_code);
        this.mTvNic = (TextView) inflate.findViewById(R.id.tv_nic);
        this.mBtnScan = (Button) inflate.findViewById(R.id.btn_scan);
        this.mBtnShare = (Button) inflate.findViewById(R.id.btn_share);
        this.mBtnSave = (Button) inflate.findViewById(R.id.btn_save);
        this.mRlCopyNic = (RelativeLayout) inflate.findViewById(R.id.rl_nic);
        this.mBottomBar = (RelativeLayout) inflate.findViewById(R.id.bottom_button);
        this.mTvQRScanMsg = (TextView) inflate.findViewById(R.id.tv_qr_scan_msg);
        this.mIntent = getActivity().getIntent();
        this.mUserpin = this.mIntent.getStringExtra(CatfishRESTAPI.CFCOMPACT_STICKERID);
        this.mTvNic.setText("NIC : " + this.mUserpin);
        this.mIntent.getIntExtra(AlbusModelObject.PAGE, -1);
        if (!this.mUserpin.equals(CatfishService.getUserPIN())) {
            this.mBtnShare.setVisibility(8);
            this.mBtnSave.setVisibility(8);
            this.mTvQRScanMsg.setVisibility(8);
            LayoutParams layoutParams = new LinearLayout.LayoutParams(-2, -2);
            layoutParams.weight = 1.0f;
            layoutParams.gravity = 17;
            this.mBtnScan.setLayoutParams(layoutParams);
        }
        if (this.mIntent != null) {
            getQRCodeImg();
        }
        this.mRlCopyNic.setOnClickListener(this);
        this.mBtnScan.setOnClickListener(this);
        this.mBtnShare.setOnClickListener(this);
        this.mBtnSave.setOnClickListener(this);
        return inflate;
    }

    public void onRegisterProgress() {
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }
}
