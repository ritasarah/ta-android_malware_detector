package com.albus.fragment;

import android.app.Dialog;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnKeyListener;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.util.DisplayMetrics;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.albus.activity.CustomActionBarPageActivity;
import com.albus.activity.FizzlinkFileViewerActivity;
import com.albus.activity.ProfilesImageViewerActivity;
import com.albus.cfspan.CFLinkify;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.AlbusDialog.OnActionClickListener;
import com.albus.dialog.AlbusDialog.OnChooserTypeFile;
import com.albus.dialog.AlbusDialog.OnShareButtonListener;
import com.albus.dialog.AlbusDialogInterface;
import com.albus.imagespan.SmiledText;
import com.albus.media.ThumbnailLoader;
import com.albus.media.UserPhotoLoader;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.view.ChatItemStreamView;
import com.albus.view.ChatItemStreamView.DownloadVideo;
import com.albus.view.CircleImageView;
import com.albus.view.MusicPlayerView;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Callback.FizzlinkDownloadDetails;
import com.catfiz.base.Callback.FizzlinkInfo;
import com.catfiz.base.Callback.StreamHasThumbnailCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz.ICatfizUploadDownloadProgress;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.media.ImageReScaler;
import com.catfiz.model.Fizzlink;
import com.catfiz.model.Message;
import com.catfiz.model.User;
import com.catfiz.pool.PoolDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishService;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.signal.Signal;
import com.catfiz.signal.SignalBinderFizzlink;
import com.catfiz.svcpersistent.TaskDataStorage;
import com.catfiz.util.Log;
import com.catfiz.util.ObjectLockManager;
import com.catfiz.util.Utils;
import java.io.File;
import java.lang.ref.WeakReference;
import java.util.HashMap;
import java.util.Map;
import org.apache.http.protocol.HTTP;
import org.json.JSONException;
import org.json.JSONObject;

public class FizzlinkFileViewerFragment extends Fragment implements ICatfizUploadDownloadProgress {
    private static final int DATATYPE_AUDIO = 1;
    private static final int DATATYPE_DATA = 4;
    private static final int DATATYPE_IMAGE = 2;
    private static final int DATATYPE_TEXT = 5;
    private static final int DATATYPE_UNKNOWN = 0;
    private static final int DATATYPE_VIDEO = 3;
    private static final HashMap LocalDataTypeMap = new HashMap();
    private static final String ROOM_NAME = "Fizzlink Detail";
    private static final String TAG = "FizzlinkFileViewerFragment";
    private static Handler mHandler = new Handler();
    private Catfiz mCatfiz;
    private String mDescription;
    private Dialog mDialog;
    private RelativeLayout mDownloadContainer;
    private String mFileName;
    private int mFileSize;
    private String mFilepath = "";
    private Fizzlink mFizzlink;
    private ImageButton mIbDlCancel;
    private ImageButton mIbDownload;
    private boolean mIsCancel = false;
    private ImageView mIvIcon;
    private String mLink = "";
    private LinearLayout mLlPlayBtn;
    private LinearLayout mLlProgress;
    private LocalImageLoader mLocalImageLoader;
    private MusicPlayerView mMpvPlayer;
    private ProgressBar mPbDownload;
    private UserPhotoLoader mPhotoLoader;
    private CircleImageView mRivPP;
    private RelativeLayout mRlDownload;
    private Runnable mRunnable = null;
    private String mSenderName;
    private String mSenderPin;
    private long mSequence;
    private View mShadow;
    private long mTimestamp = 0;
    private String mTopicKey;
    private TextView mTvCaption;
    private TextView mTvDate;
    private TextView mTvDlProgress;
    private TextView mTvDlTitle;
    private TextView mTvNoFile;
    private TextView mTvOwner;
    private TextView mTvSize;
    private TextView mTvTitle;
    private ChatItemStreamView mVideoStream;

    class FizzlinkDialog implements AlbusDialogInterface {
        private String mFizzLink;
        private long mSequence;

        public FizzlinkDialog(long j) {
            this.mSequence = j;
        }

        public FizzlinkDialog(String str) {
            this.mFizzLink = str;
        }

        private String getJSONText() {
            String str = this.mFizzLink;
            Log.d(FizzlinkFileViewerFragment.TAG, "slink:" + str);
            if (str == null || str.compareTo("0") == 0) {
                return "";
            }
            JSONObject jSONObject = new JSONObject();
            try {
                jSONObject.put(ServerMessageDataStorage.SLINK, "catfiz://fl.catfiz.com/" + str);
                jSONObject.put(ServerMessageDataStorage.MESSAGE, FizzlinkFileViewerFragment.this.mDescription);
                jSONObject.put(FriendListDataStorage.FILENAME, new File(FizzlinkFileViewerFragment.this.mFilepath).getName());
                jSONObject.put("filesize", AlbusUtils.getFileSize(FizzlinkFileViewerFragment.this.mFileSize));
                jSONObject.put(TaskDataStorage.FILE_PATH, FizzlinkFileViewerFragment.this.mFilepath);
                jSONObject.put(TaskDataStorage.TIMESTAMP, FizzlinkFileViewerFragment.this.mTimestamp);
                jSONObject.put("simplelink", this.mFizzLink);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return jSONObject.toString();
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, final DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            switch (i) {
                case R.styleable.Theme_spinnerDropDownItemStyle /*47*/:
                    AlbusDialog.setOnShareButtonClicked(new OnShareButtonListener() {
                        public void onShareToFriendClicked() {
                            dialogFragment.dismiss();
                            Intent intent = new Intent(FizzlinkFileViewerFragment.this.getActivity(), CustomActionBarPageActivity.class);
                            intent.putExtra(AlbusModelObject.PAGE, 49);
                            intent.putExtra(HTTP.IDENTITY_CODING, 49);
                            intent.putExtra("android.intent.extra.TEXT", FizzlinkDialog.this.getJSONText());
                            intent.putExtra(ServerMessageDataStorage.SLINK, true);
                            intent.putExtra("slinkuri", FizzlinkDialog.this.mFizzLink);
                            FizzlinkFileViewerFragment.this.startActivity(intent);
                        }

                        public void onShareToMyStatusClicked() {
                            String access$2300 = FizzlinkDialog.this.mFizzLink;
                            long j = CatfishService.getCatfishPreferences().getLong(CatfishService.USERSTATUS_SEQ_PREF, 0);
                            String access$2200 = FizzlinkDialog.this.getJSONText();
                            if (access$2300 == null || access$2300.compareTo("") == 0) {
                                FizzlinkFileViewerFragment.this.mCatfiz.shareAndSaveFizzlink(FizzlinkFileViewerFragment.this.getActivity(), CatfishService.getUserPIN(), access$2200, new Callback() {
                                    public void onError() {
                                    }

                                    public void onSuccess() {
                                        AlbusUtils.setToastView(FizzlinkFileViewerFragment.this.getActivity(), "Success Share Fizzlink");
                                    }
                                });
                            } else {
                                Log.d(FizzlinkFileViewerFragment.TAG, "Send fizzlink" + access$2200 + " to :" + j);
                                FizzlinkFileViewerFragment.this.mCatfiz.shareFizzlinkToMyStatus(new Callback() {
                                    public void onError() {
                                    }

                                    public void onSuccess() {
                                        AlbusUtils.setToastView(FizzlinkFileViewerFragment.this.getActivity(), "Success Share Fizzlink");
                                    }
                                }, access$2200, j);
                            }
                            dialogFragment.dismiss();
                        }

                        public void onShareToPoolClicked() {
                            dialogFragment.dismiss();
                            Intent intent = new Intent(FizzlinkFileViewerFragment.this.getActivity(), CustomActionBarPageActivity.class);
                            intent.putExtra(AlbusModelObject.PAGE, 41);
                            intent.putExtra(HTTP.IDENTITY_CODING, 49);
                            intent.putExtra("android.intent.extra.TEXT", FizzlinkDialog.this.getJSONText());
                            intent.putExtra(ServerMessageDataStorage.SLINK, true);
                            intent.putExtra("slinkuri", FizzlinkDialog.this.mFizzLink);
                            FizzlinkFileViewerFragment.this.startActivity(intent);
                        }
                    });
                    return;
                case R.styleable.Theme_homeAsUpIndicator /*48*/:
                    AlbusDialog.setChooserTypeFile(new OnChooserTypeFile() {
                        public void onAudioType() {
                            try {
                                FizzlinkFileViewerFragment.this.startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("audio/*"), FizzlinkFileViewerFragment.DATATYPE_AUDIO);
                            } catch (ActivityNotFoundException e) {
                                AlbusUtils.setToastView(FizzlinkFileViewerFragment.this.getActivity(), FizzlinkFileViewerFragment.this.getString(R.string.file_manager_check));
                            }
                        }

                        public void onFileType() {
                            try {
                                FizzlinkFileViewerFragment.this.startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("application/*|text/*"), FizzlinkFileViewerFragment.DATATYPE_AUDIO);
                            } catch (ActivityNotFoundException e) {
                                AlbusUtils.setToastView(FizzlinkFileViewerFragment.this.getActivity(), FizzlinkFileViewerFragment.this.getString(R.string.file_manager_check));
                            }
                        }

                        public void onImageType() {
                            try {
                                FizzlinkFileViewerFragment.this.startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("image/*"), FizzlinkFileViewerFragment.DATATYPE_AUDIO);
                            } catch (ActivityNotFoundException e) {
                                AlbusUtils.setToastView(FizzlinkFileViewerFragment.this.getActivity(), FizzlinkFileViewerFragment.this.getString(R.string.file_manager_check));
                            }
                        }

                        public void onVideoType() {
                            try {
                                FizzlinkFileViewerFragment.this.startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("video/*"), FizzlinkFileViewerFragment.DATATYPE_AUDIO);
                            } catch (ActivityNotFoundException e) {
                                AlbusUtils.setToastView(FizzlinkFileViewerFragment.this.getActivity(), FizzlinkFileViewerFragment.this.getString(R.string.file_manager_check));
                            }
                        }
                    });
                    return;
                case R.styleable.Theme_activityChooserViewStyle /*57*/:
                    AlbusDialog.setOnActionClickListener(57, new OnActionClickListener() {
                        public void onActionNoListener() {
                        }

                        public void onActionYesListener() {
                            FizzlinkFileViewerFragment.this.deleteFizzlink(FizzlinkDialog.this.mSequence);
                        }
                    });
                    return;
                default:
                    return;
            }
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    class FizzlinkThumbClick implements OnClickListener {
        private FizzlinkThumbClick() {
        }

        public void onClick(View view) {
            int access$800 = FizzlinkFileViewerFragment.this.getDataType(FizzlinkFileViewerFragment.this.mFilepath);
            if (access$800 == 0 || access$800 == FizzlinkFileViewerFragment.DATATYPE_DATA) {
                Uri uri;
                if (FizzlinkFileViewerFragment.this.mSenderPin.equals(CatfishService.getUserPIN())) {
                    String str;
                    Uri fromFile;
                    if (FizzlinkFileViewerFragment.this.isFileExist(FizzlinkFileViewerFragment.this.mFilepath)) {
                        fromFile = Uri.fromFile(new File(FizzlinkFileViewerFragment.this.mFilepath));
                        str = AlbusUtils.getmimetype(fromFile);
                        uri = fromFile;
                    } else {
                        fromFile = Uri.fromFile(new File(FizzlinkFileViewerFragment.this.getActivity().getIntent().getStringExtra(TaskDataStorage.FILE_PATH)));
                        str = AlbusUtils.getmimetype(fromFile);
                        uri = fromFile;
                    }
                    ((FizzlinkFileViewerActivity) FizzlinkFileViewerFragment.this.getActivity()).openFile(uri, str);
                } else if (FizzlinkFileViewerFragment.this.isFileExist(FizzlinkFileViewerFragment.this.mFilepath)) {
                    uri = Uri.fromFile(new File(FizzlinkFileViewerFragment.this.mFilepath));
                    ((FizzlinkFileViewerActivity) FizzlinkFileViewerFragment.this.getActivity()).openFile(uri, AlbusUtils.getmimetype(uri));
                } else {
                    Log.e(FizzlinkFileViewerFragment.TAG, "path not exists: " + FizzlinkFileViewerFragment.this.mFilepath);
                }
            } else if (FizzlinkFileViewerFragment.this.mSenderPin.equals(CatfishService.getUserPIN())) {
                r0 = new Intent(FizzlinkFileViewerFragment.this.getActivity(), ProfilesImageViewerActivity.class);
                r0.putExtra(HTTP.IDENTITY_CODING, 19);
                if (FizzlinkFileViewerFragment.this.isFileExist(FizzlinkFileViewerFragment.this.mFilepath)) {
                    r0.putExtra(AlbusModelObject.IMAGE, FizzlinkFileViewerFragment.this.mFilepath);
                } else {
                    r0.putExtra(AlbusModelObject.IMAGE, FizzlinkFileViewerFragment.this.getActivity().getIntent().getStringExtra(TaskDataStorage.FILE_PATH));
                }
                r0.putExtra(AlbusModelObject.SENDER_NAME, FizzlinkFileViewerFragment.this.mSenderName);
                r0.putExtra(AlbusModelObject.INTENT_ROOM, FizzlinkFileViewerFragment.ROOM_NAME);
                FizzlinkFileViewerFragment.this.startActivityForResult(r0, R.styleable.Theme_ratingBarStyle);
            } else if (FizzlinkFileViewerFragment.this.isFileExist(FizzlinkFileViewerFragment.this.mFilepath)) {
                r0 = new Intent(FizzlinkFileViewerFragment.this.getActivity(), ProfilesImageViewerActivity.class);
                r0.putExtra(HTTP.IDENTITY_CODING, 19);
                r0.putExtra(AlbusModelObject.IMAGE, FizzlinkFileViewerFragment.this.mFilepath);
                r0.putExtra(AlbusModelObject.SENDER_NAME, FizzlinkFileViewerFragment.this.mSenderName);
                r0.putExtra(AlbusModelObject.INTENT_ROOM, FizzlinkFileViewerFragment.ROOM_NAME);
                FizzlinkFileViewerFragment.this.startActivityForResult(r0, R.styleable.Theme_ratingBarStyle);
            }
        }
    }

    class LocalImageLoader extends ThumbnailLoader {
        private int mRequiredSize;

        public LocalImageLoader(Context context) {
            super(context);
            DisplayMetrics displayMetrics = new DisplayMetrics();
            ((FragmentActivity) this.mContext).getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
            this.mRequiredSize = displayMetrics.heightPixels < displayMetrics.widthPixels ? displayMetrics.heightPixels : displayMetrics.widthPixels;
        }

        protected Bitmap processBitmap(Object obj) {
            return ImageReScaler.rescaleFromFilePath(String.valueOf(obj), this.mRequiredSize);
        }
    }

    class OnStreamHasThumbnail implements StreamHasThumbnailCallback {
        private String mLink = null;
        private WeakReference thisFragmentRef = null;
        private WeakReference vidStreamViewRef = null;

        public OnStreamHasThumbnail(FizzlinkFileViewerFragment fizzlinkFileViewerFragment, ChatItemStreamView chatItemStreamView, String str) {
            this.thisFragmentRef = new WeakReference(fizzlinkFileViewerFragment);
            this.vidStreamViewRef = new WeakReference(chatItemStreamView);
            this.mLink = str;
        }

        public void onError() {
        }

        public void onStreamHasThumbnail(String str, int i) {
            FizzlinkFileViewerFragment fizzlinkFileViewerFragment = (FizzlinkFileViewerFragment) this.thisFragmentRef.get();
            ChatItemStreamView chatItemStreamView = (ChatItemStreamView) this.vidStreamViewRef.get();
            if (fizzlinkFileViewerFragment != null && chatItemStreamView != null && fizzlinkFileViewerFragment.mVideoStream == chatItemStreamView) {
                File thumbStream = CatfishPhotoStorage.getThumbStream(fizzlinkFileViewerFragment.getActivity(), this.mLink);
                if (thumbStream != null) {
                    chatItemStreamView.setThumbnail(thumbStream.getAbsolutePath());
                }
            }
        }

        public void onSuccess() {
        }
    }

    static {
        LocalDataTypeMap.put(".jpg", Integer.valueOf(DATATYPE_IMAGE));
        LocalDataTypeMap.put(".jpeg", Integer.valueOf(DATATYPE_IMAGE));
        LocalDataTypeMap.put(".png", Integer.valueOf(DATATYPE_IMAGE));
        LocalDataTypeMap.put(".tiff", Integer.valueOf(DATATYPE_IMAGE));
        LocalDataTypeMap.put(".gif", Integer.valueOf(DATATYPE_IMAGE));
        LocalDataTypeMap.put(".webp", Integer.valueOf(DATATYPE_IMAGE));
        LocalDataTypeMap.put(".bmp", Integer.valueOf(DATATYPE_IMAGE));
        LocalDataTypeMap.put(".svg", Integer.valueOf(DATATYPE_IMAGE));
        LocalDataTypeMap.put(".3ga", Integer.valueOf(DATATYPE_AUDIO));
        LocalDataTypeMap.put(".mp3", Integer.valueOf(DATATYPE_AUDIO));
        LocalDataTypeMap.put(".mp2", Integer.valueOf(DATATYPE_AUDIO));
        LocalDataTypeMap.put(".ogg", Integer.valueOf(DATATYPE_AUDIO));
        LocalDataTypeMap.put(".amr", Integer.valueOf(DATATYPE_AUDIO));
        LocalDataTypeMap.put(".m4a", Integer.valueOf(DATATYPE_AUDIO));
        LocalDataTypeMap.put(".aac", Integer.valueOf(DATATYPE_AUDIO));
        LocalDataTypeMap.put(".flac", Integer.valueOf(DATATYPE_AUDIO));
        LocalDataTypeMap.put(".3gp", Integer.valueOf(DATATYPE_VIDEO));
        LocalDataTypeMap.put(".3gpp", Integer.valueOf(DATATYPE_VIDEO));
        LocalDataTypeMap.put(".3gpp2", Integer.valueOf(DATATYPE_VIDEO));
        LocalDataTypeMap.put(".mp4", Integer.valueOf(DATATYPE_VIDEO));
        LocalDataTypeMap.put(".m4v", Integer.valueOf(DATATYPE_VIDEO));
        LocalDataTypeMap.put(".mkv", Integer.valueOf(DATATYPE_VIDEO));
        LocalDataTypeMap.put(".mpg", Integer.valueOf(DATATYPE_VIDEO));
        LocalDataTypeMap.put(".mpeg", Integer.valueOf(DATATYPE_VIDEO));
        LocalDataTypeMap.put(".wmv", Integer.valueOf(DATATYPE_VIDEO));
        LocalDataTypeMap.put(".flv", Integer.valueOf(DATATYPE_VIDEO));
        LocalDataTypeMap.put(".ogv", Integer.valueOf(DATATYPE_VIDEO));
        LocalDataTypeMap.put(".avi", Integer.valueOf(DATATYPE_VIDEO));
        LocalDataTypeMap.put(".webm", Integer.valueOf(DATATYPE_VIDEO));
        LocalDataTypeMap.put(".apk", Integer.valueOf(DATATYPE_DATA));
        LocalDataTypeMap.put(".stacktrace", Integer.valueOf(DATATYPE_DATA));
    }

    private void changeButtonDownload() {
        if (isFileExist(this.mFilepath)) {
            this.mRlDownload.setVisibility(8);
            this.mTvDlTitle.setText(getActivity().getResources().getString(R.string.redownload_upercase));
            return;
        }
        this.mRlDownload.setVisibility(8);
    }

    private void closeDialog() {
        if (this.mDialog != null) {
            this.mDialog.dismiss();
        }
        this.mDialog = null;
    }

    private int getDataType(String str) {
        int i = DATATYPE_UNKNOWN;
        Log.d(TAG, "path:" + str);
        if (!(str == null || str.equals(""))) {
            Log.d(TAG, "path:" + str);
            String extension = Utils.getExtension(str);
            if (extension == null) {
                Log.d(TAG, "extension: NULL, type:" + DATATYPE_UNKNOWN);
            } else {
                if (LocalDataTypeMap.containsKey(extension)) {
                    i = ((Integer) LocalDataTypeMap.get(extension)).intValue();
                }
                Log.d(TAG, "extension:" + extension + ", type:" + i);
            }
        }
        return i;
    }

    private void getFizzlinkChace() {
        this.mCatfiz.requestFizzlinkChace(new FizzlinkDownloadDetails() {
            public void onData(Fizzlink fizzlink) {
                if (fizzlink.isNoData()) {
                    Log.d(FizzlinkFileViewerFragment.TAG, "No fizzlink info in DB.");
                    FizzlinkFileViewerFragment.this.getFizzlinkInfo(false);
                    return;
                }
                FizzlinkFileViewerFragment.this.mFilepath = fizzlink.getFilePath();
                FizzlinkFileViewerFragment.this.mFileSize = fizzlink.getDataSize();
                FizzlinkFileViewerFragment.this.mFileName = fizzlink.getFileName();
                FizzlinkFileViewerFragment.this.mSenderName = fizzlink.getSenderName();
                String description = fizzlink.getDescription();
                FizzlinkFileViewerFragment.this.mDescription = AlbusUtils.getSlinkFromJson(description, AlbusModelObject.INTENT_DESC);
                if (FizzlinkFileViewerFragment.this.mDescription == null) {
                    FizzlinkFileViewerFragment.this.mDescription = description;
                }
                FizzlinkFileViewerFragment.this.mSenderPin = fizzlink.getSenderPin();
                FizzlinkFileViewerFragment.this.mTimestamp = fizzlink.getTimeStamp().longValue();
                Log.d(FizzlinkFileViewerFragment.TAG, "getFizzlinkChace:FilePath: " + FizzlinkFileViewerFragment.this.mFilepath);
                FizzlinkFileViewerFragment.this.setFizzlinkData();
            }

            public void onError() {
            }

            public void onSuccess() {
            }
        }, this.mLink);
    }

    private void getFizzlinkInfo(final boolean z) {
        if (!z) {
            loadingDialog();
            if (this.mRunnable != null) {
                mHandler.removeCallbacks(this.mRunnable);
            }
            this.mRunnable = new Runnable() {
                public void run() {
                    Context activity = FizzlinkFileViewerFragment.this.getActivity();
                    if (activity != null) {
                        AlbusUtils.setToastView(activity, "Please check your internet connection!");
                        activity.finish();
                    }
                    FizzlinkFileViewerFragment.this.mRunnable = null;
                }
            };
            mHandler.postDelayed(this.mRunnable, 20000);
        }
        this.mCatfiz.getFizzlinkInfo(new FizzlinkInfo() {
            public void onData(String str, String str2, int i, String[] strArr) {
                FizzlinkFileViewerFragment.this.mFilepath = str2;
                FizzlinkFileViewerFragment.this.mFileSize = i;
                FizzlinkFileViewerFragment.this.mFileName = str;
                if (strArr != null) {
                    FizzlinkFileViewerFragment.this.mSenderName = strArr[FizzlinkFileViewerFragment.DATATYPE_IMAGE];
                }
                if (strArr != null) {
                    FizzlinkFileViewerFragment.this.mSenderPin = strArr[FizzlinkFileViewerFragment.DATATYPE_VIDEO];
                }
                if (strArr != null) {
                    String msgFromJson = FizzlinkFileViewerFragment.this.getMsgFromJson(strArr[FizzlinkFileViewerFragment.DATATYPE_AUDIO], AlbusModelObject.INTENT_DESC);
                    FizzlinkFileViewerFragment.this.mDescription = AlbusUtils.getSlinkFromJson(msgFromJson, AlbusModelObject.INTENT_DESC);
                    if (FizzlinkFileViewerFragment.this.mDescription == null) {
                        FizzlinkFileViewerFragment.this.mDescription = msgFromJson;
                    }
                }
                FizzlinkFileViewerFragment.this.setFizzlinkData();
                FizzlinkFileViewerFragment.this.closeDialog();
                if (!z && FizzlinkFileViewerFragment.this.mRunnable != null) {
                    FizzlinkFileViewerFragment.mHandler.removeCallbacks(FizzlinkFileViewerFragment.this.mRunnable);
                    FizzlinkFileViewerFragment.this.mRunnable = null;
                }
            }

            public void onError() {
                Log.e(FizzlinkFileViewerFragment.TAG, "Error when get fizzlink info.");
                if (FizzlinkFileViewerFragment.this.getActivity() != null) {
                    FizzlinkFileViewerFragment.this.getActivity().finish();
                }
            }

            public void onSuccess() {
            }
        }, this.mLink);
    }

    private void getStream() {
        this.mCatfiz.getStreamThumbnailDownload(this.mLink, new OnStreamHasThumbnail(this, this.mVideoStream, this.mLink));
    }

    private boolean isFileExist(String str) {
        Log.d(TAG, "path:" + str);
        if (str == null) {
            return false;
        }
        File file = new File(str);
        Log.d(TAG, "path:" + file.getAbsolutePath() + " isexist:" + file.exists() + " length:" + file.length() + "-" + this.mFileSize);
        if (file.isFile() && file.length() == ((long) this.mFileSize)) {
            Log.d(TAG, "isfileexist:true");
            return true;
        }
        Log.d(TAG, "isfileexist:false");
        return false;
    }

    private void loadingDialog() {
        this.mDialog = new Dialog(getActivity(), 16973941);
        View inflate = getActivity().getLayoutInflater().inflate(R.layout.dialog_loading, null);
        this.mDialog.setOnKeyListener(new OnKeyListener() {
            public boolean onKey(DialogInterface dialogInterface, int i, KeyEvent keyEvent) {
                if (i == FizzlinkFileViewerFragment.DATATYPE_DATA) {
                    if (FizzlinkFileViewerFragment.this.mDialog != null) {
                        FizzlinkFileViewerFragment.this.mDialog.dismiss();
                    }
                    FizzlinkFileViewerFragment.this.mDialog = null;
                    FizzlinkFileViewerFragment.this.getActivity().finish();
                }
                return true;
            }
        });
        this.mDialog.setCanceledOnTouchOutside(false);
        this.mDialog.setContentView(inflate);
        this.mDialog.show();
    }

    public static FizzlinkFileViewerFragment newInstance(Bundle bundle) {
        FizzlinkFileViewerFragment fizzlinkFileViewerFragment = new FizzlinkFileViewerFragment();
        fizzlinkFileViewerFragment.mTimestamp = bundle.getLong(TaskDataStorage.TIMESTAMP);
        fizzlinkFileViewerFragment.mLink = bundle.getString(ServerMessageDataStorage.SLINK);
        fizzlinkFileViewerFragment.mSenderPin = bundle.getString(CatfishRESTAPI.CFCOMPACT_STICKERID);
        fizzlinkFileViewerFragment.mTopicKey = bundle.getString(PoolDataStorage.TOPIC_KEY);
        fizzlinkFileViewerFragment.mSequence = bundle.getLong(ServerMessageDataStorage.SEQUENCE);
        Log.d(TAG, "slink:" + fizzlinkFileViewerFragment.mLink);
        return fizzlinkFileViewerFragment;
    }

    private void setFizzlinkData() {
        int i;
        this.mTvTitle.setText(this.mFileName);
        this.mTvSize.setText(AlbusUtils.getFileSize(this.mFileSize));
        this.mTvDate.setText(AlbusUtils.getTimeAndDate(this.mTimestamp));
        if (this.mSenderName != null) {
            this.mTvOwner.setText(this.mSenderName);
        }
        if (this.mDescription != null) {
            this.mTvCaption.setText(SmiledText.getSmiledText(getActivity(), this.mDescription, this.mTvCaption));
            CFLinkify.addLinks(this.mTvCaption, CFLinkify.NIC | 7);
        }
        User user = new User();
        if (this.mSenderPin != null) {
            user.setId(this.mSenderPin);
        }
        if (this.mSenderPin == null || !this.mSenderPin.equals(CatfishService.getUserPIN())) {
            ((FizzlinkFileViewerActivity) getActivity()).hideMenuDelete();
            this.mPhotoLoader.loadFriendPhoto(user, this.mRivPP);
        } else {
            this.mPhotoLoader.loadUserPhoto(user, this.mRivPP);
        }
        if (isFileExist(this.mFilepath)) {
            i = DATATYPE_AUDIO;
            this.mRlDownload.setVisibility(8);
        } else {
            this.mRlDownload.setVisibility(DATATYPE_UNKNOWN);
            i = DATATYPE_UNKNOWN;
        }
        switch (getDataType(this.mFilepath)) {
            case DATATYPE_UNKNOWN /*0*/:
                this.mIvIcon.setVisibility(DATATYPE_UNKNOWN);
                this.mIvIcon.setImageResource(AlbusUtils.getIconFileThumb(this.mFilepath));
                this.mTvNoFile.setVisibility(DATATYPE_UNKNOWN);
                if (i == 0) {
                    this.mTvNoFile.setText(getActivity().getString(R.string.fizzlink_download_file));
                    break;
                }
                this.mTvNoFile.setText(getActivity().getString(R.string.tap_openfile));
                this.mIvIcon.setOnClickListener(new FizzlinkThumbClick());
                break;
            case DATATYPE_AUDIO /*1*/:
                setStreamParam(this.mFilepath, this.mSenderName, this.mDescription);
                break;
            case DATATYPE_IMAGE /*2*/:
                this.mIvIcon.setVisibility(DATATYPE_UNKNOWN);
                if (i == 0) {
                    this.mIvIcon.setOnClickListener(null);
                    this.mIvIcon.setImageResource(AlbusUtils.getIconFileThumb(this.mFilepath));
                    this.mTvNoFile.setVisibility(DATATYPE_UNKNOWN);
                    break;
                }
                this.mIvIcon.setOnClickListener(new FizzlinkThumbClick());
                this.mLocalImageLoader.loadImage((Object) this.mFilepath, this.mIvIcon);
                this.mTvNoFile.setVisibility(8);
                break;
            case DATATYPE_VIDEO /*3*/:
                setStreamParam(this.mFilepath, this.mSenderName, this.mDescription);
                break;
            case DATATYPE_DATA /*4*/:
                this.mIvIcon.setVisibility(DATATYPE_UNKNOWN);
                if (i != 0) {
                    this.mIvIcon.setOnClickListener(new FizzlinkThumbClick());
                    this.mTvNoFile.setVisibility(8);
                } else {
                    this.mTvNoFile.setVisibility(DATATYPE_UNKNOWN);
                }
                this.mIvIcon.setImageResource(AlbusUtils.getIconFileThumb(this.mFilepath));
                break;
        }
        File thumbStream = CatfishPhotoStorage.getThumbStream(getActivity(), this.mLink);
        if (thumbStream != null) {
            Log.d(TAG, "filefizz not null");
            this.mVideoStream.setThumbnail(thumbStream.getAbsolutePath());
            return;
        }
        Log.d(TAG, "filefizz null");
        getStream();
    }

    private void setStreamParam(String str, String str2, String str3) {
        this.mVideoStream.setVisibility(DATATYPE_UNKNOWN);
        long longExtra = getActivity().getIntent().getLongExtra(ServerMessageDataStorage.SEQUENCE, 0);
        String stringExtra = getActivity().getIntent().getStringExtra(AlbusModelObject.INTENT_ROOM);
        if (stringExtra == null) {
            stringExtra = ROOM_NAME;
        }
        Log.d(TAG, "roomname:" + stringExtra);
        if (isFileExist(str)) {
            Log.d(TAG, "file exist" + new File("/" + str).getAbsolutePath());
            this.mVideoStream.setParams(str, longExtra, stringExtra, str2, str3, true);
            return;
        }
        Log.d(TAG, "file not exist: set param stream: slink: " + this.mLink);
        this.mVideoStream.setParamsStream(null, this.mLink, longExtra, stringExtra, str2, str3, true);
    }

    public void deleteFizzlink(long j) {
        this.mCatfiz.deleteSingleFizzlink(j, new Callback() {
            public void onError() {
            }

            public void onSuccess() {
            }
        });
        getActivity().finish();
    }

    public void downloadFizzlink() {
        Message message = new Message();
        message.setSequence(getActivity().getIntent().getLongExtra(ServerMessageDataStorage.SEQUENCE, 0));
        message.setSender(new User(this.mSenderPin));
        message.setTopicKey(this.mTopicKey);
        message.setSequence(this.mSequence);
        Fizzlink fizzlink = new Fizzlink();
        fizzlink.setDataSize(this.mFileSize);
        fizzlink.setLink(this.mLink);
        fizzlink.setFileName(this.mFileName);
        fizzlink.setFilePath(this.mFilepath);
        message.setFizzlink(fizzlink);
        message.setSlink(this.mLink);
        this.mCatfiz.fizzlinkDownload(message, new Callback() {
            public void onError() {
            }

            public void onSuccess() {
            }
        });
    }

    public void downloadFizzlinkAndViewThis() {
        downloadFizzlink();
        this.mDownloadContainer.setVisibility(DATATYPE_UNKNOWN);
        this.mRlDownload.setVisibility(DATATYPE_DATA);
        this.mVideoStream.hideBtnDownload();
    }

    public String getMsgFromJson(String str, String str2) {
        if (str == null || str.length() <= 0) {
            return "No Caption";
        }
        try {
            JSONObject jSONObject = new JSONObject(str);
            if (!jSONObject.has(str2)) {
                return str;
            }
            str = jSONObject.getString(str2);
            Log.e(TAG, "get[what=" + str2 + "]: " + str);
            return str;
        } catch (Exception e) {
            Log.e(TAG, "Error: " + e.toString());
            return str.equals("") ? "No Caption" : str;
        }
    }

    public String getSenderPin() {
        return this.mSenderPin;
    }

    public void onCatfizStarted() {
        Log.d(TAG, "slink:" + this.mLink);
        getFizzlinkChace();
    }

    public void onCatfizStopped() {
    }

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        this.mCatfiz = new Catfiz(getActivity(), this, new SignalBinderFizzlink());
        this.mLocalImageLoader = new LocalImageLoader(getActivity());
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        View inflate = layoutInflater.inflate(R.layout.fragment_fizzlink_file_viewer, viewGroup, false);
        this.mIvIcon = (ImageView) inflate.findViewById(R.id.iv_icon_file);
        this.mVideoStream = (ChatItemStreamView) inflate.findViewById(R.id.vp_video);
        this.mTvTitle = (TextView) inflate.findViewById(R.id.tv_title);
        this.mTvSize = (TextView) inflate.findViewById(R.id.tv_size);
        this.mTvDate = (TextView) inflate.findViewById(R.id.tv_date);
        this.mRlDownload = (RelativeLayout) inflate.findViewById(R.id.rl_download);
        this.mTvDlTitle = (TextView) inflate.findViewById(R.id.tv_buttonTitle);
        this.mTvOwner = (TextView) inflate.findViewById(R.id.tv_owner);
        this.mTvCaption = (TextView) inflate.findViewById(R.id.tv_caption);
        this.mRivPP = (CircleImageView) inflate.findViewById(R.id.riv_dp);
        this.mShadow = inflate.findViewById(R.id.view_shadow);
        this.mLlProgress = (LinearLayout) inflate.findViewById(R.id.ll_dialog);
        this.mDownloadContainer = (RelativeLayout) inflate.findViewById(R.id.rl_download_progress);
        this.mPbDownload = (ProgressBar) inflate.findViewById(R.id.pb_download);
        this.mTvDlProgress = (TextView) inflate.findViewById(R.id.tv_dl_progress);
        this.mIbDlCancel = (ImageButton) inflate.findViewById(R.id.ib_cancel);
        this.mIbDownload = (ImageButton) inflate.findViewById(R.id.ib_download);
        this.mTvNoFile = (TextView) inflate.findViewById(R.id.tv_no_file);
        this.mMpvPlayer = (MusicPlayerView) inflate.findViewById(R.id.music_player);
        if (this.mTimestamp != 0) {
            this.mTvDate.setText(AlbusUtils.getTimeAndDate(this.mTimestamp));
        }
        Log.d(TAG, "senderpin:" + this.mSenderPin);
        this.mIbDownload.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                FizzlinkFileViewerFragment.this.mDownloadContainer.setVisibility(FizzlinkFileViewerFragment.DATATYPE_UNKNOWN);
                FizzlinkFileViewerFragment.this.mRlDownload.setVisibility(FizzlinkFileViewerFragment.DATATYPE_DATA);
                FizzlinkFileViewerFragment.this.mIbDownload.setVisibility(8);
                FizzlinkFileViewerFragment.this.mTvDlProgress.setText(FizzlinkFileViewerFragment.this.getActivity().getString(R.string.downloading));
                FizzlinkFileViewerFragment.this.downloadFizzlink();
            }
        });
        this.mRlDownload.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                FizzlinkFileViewerFragment.this.mDownloadContainer.setVisibility(FizzlinkFileViewerFragment.DATATYPE_UNKNOWN);
                FizzlinkFileViewerFragment.this.mRlDownload.setVisibility(FizzlinkFileViewerFragment.DATATYPE_DATA);
                FizzlinkFileViewerFragment.this.downloadFizzlink();
            }
        });
        this.mIbDlCancel.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                FizzlinkFileViewerFragment.this.mDownloadContainer.setVisibility(8);
                FizzlinkFileViewerFragment.this.mRlDownload.setVisibility(FizzlinkFileViewerFragment.DATATYPE_UNKNOWN);
                ObjectLockManager.releaseLockKey("download:" + FizzlinkFileViewerFragment.this.mLink);
                FizzlinkFileViewerFragment.this.mIsCancel = true;
            }
        });
        this.mVideoStream.setDownloadVideoListener(new DownloadVideo() {
            public void onDownloadVideo() {
                FizzlinkFileViewerFragment.this.downloadFizzlink();
                FizzlinkFileViewerFragment.this.mDownloadContainer.setVisibility(FizzlinkFileViewerFragment.DATATYPE_UNKNOWN);
                FizzlinkFileViewerFragment.this.mRlDownload.setVisibility(FizzlinkFileViewerFragment.DATATYPE_DATA);
                FizzlinkFileViewerFragment.this.mVideoStream.hideBtnDownload();
            }
        });
        return inflate;
    }

    public void onDestroy() {
        super.onDestroy();
        this.mCatfiz.destroy();
    }

    public boolean onHasProgressUploadDownNUpload(Map map, Map map2) {
        Log.d(TAG, "progress:");
        return false;
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    public void onStop() {
        super.onStop();
        this.mCatfiz.finish();
    }

    public boolean onUpdateProgressDownloadNUpload(String str, int i, int i2) {
        Log.d(TAG, "progress:" + i);
        if (!(i2 == 0 || i2 == DATATYPE_AUDIO)) {
            this.mDownloadContainer.setVisibility(8);
            this.mRlDownload.setVisibility(8);
            getFizzlinkInfo(true);
        }
        this.mTvDlProgress.setText(getActivity().getString(R.string.downloading) + " " + i + "% " + AlbusUtils.getFileSize((this.mFileSize * i) / 100) + "/" + AlbusUtils.getFileSize(this.mFileSize));
        this.mPbDownload.setProgress(i);
        return false;
    }

    public void setPhotoLoader(UserPhotoLoader userPhotoLoader) {
        this.mPhotoLoader = userPhotoLoader;
    }

    public void showDeleteFizzlinkDialog(long j) {
        Bundle bundle = new Bundle();
        bundle.putInt(AlbusModelObject.DIALOG, 57);
        AlbusDialog.showDialog(57, new FizzlinkDialog(j), getActivity(), bundle, ((FizzlinkFileViewerActivity) getActivity()).getSupportFragmentManager());
    }

    public void showShareDialog() {
        Bundle bundle = new Bundle();
        bundle.putInt(AlbusModelObject.DIALOG, 47);
        AlbusDialog.showDialog(47, new FizzlinkDialog(this.mLink), getActivity(), bundle, ((FizzlinkFileViewerActivity) getActivity()).getSupportFragmentManager());
    }

    public void stopPlayer() {
        this.mMpvPlayer.stopPlayer();
    }
}
