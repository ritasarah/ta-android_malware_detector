package com.albus.fragment;

import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.graphics.Rect;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.preference.PreferenceManager;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.ListFragment;
import android.support.v4.content.LocalBroadcastManager;
import android.view.ActionMode;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.widget.AbsListView;
import android.widget.AbsListView.MultiChoiceModeListener;
import android.widget.AbsListView.OnScrollListener;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import com.albus.activity.ChatGroupConvActivity;
import com.albus.activity.CustomActionBarPageActivity;
import com.albus.adapter.ChatConvListAdapter;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.AlbusDialog.OnAttachItemListener;
import com.albus.dialog.AlbusDialog.OnChooserTypeFile;
import com.albus.dialog.AlbusDialog.OnChooserVideoResolutionListener;
import com.albus.dialog.AlbusDialog.OnShareButtonListener;
import com.albus.dialog.AlbusDialogInterface;
import com.albus.dialog.DialogUI;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.util.PendingStateUtils;
import com.albus.util.QuoteUtils;
import com.albus.util.WriteMsgToExternalStorage;
import com.albus.view.ChatsBottomBarView;
import com.albus.view.ChatsBottomBarView.onAttachmentClickListener;
import com.albus.view.ChatsBottomBarView.onEmojiPanelComponentListener;
import com.albus.view.ChatsBottomBarView.onPanelEmojiAnimation;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Callback.FetchFriendCallback;
import com.catfiz.base.Callback.PrivateFetchMessagesCallback;
import com.catfiz.base.Callback.PrivateFetchMessagesCountCallback;
import com.catfiz.base.Callback.ProgressUploadDownload;
import com.catfiz.base.Callback.StreamHasThumbnailCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz.ICatfizNewMessage;
import com.catfiz.base.ICatfiz.ICatfizUpdateProgress;
import com.catfiz.intents.BroadcastIntents;
import com.catfiz.localstorage.ChunkStorage;
import com.catfiz.media.RingtonePlayer;
import com.catfiz.media.StorageDir;
import com.catfiz.model.FileMetaInfo;
import com.catfiz.model.Fizzlink;
import com.catfiz.model.Message;
import com.catfiz.model.Quote;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.service.LongMessageExecutor;
import com.catfiz.service.PinManagerV2;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.signal.Signal;
import com.catfiz.signal.SignalBinderGeneral;
import com.catfiz.sticker.StickerDataStorage;
import com.catfiz.svcpersistent.TaskDataStorage;
import com.catfiz.util.FileUtils;
import com.catfiz.util.Log;
import com.catfiz.util.MediaFilePath;
import com.catfiz.util.Utils;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.LangUtils;
import org.json.JSONException;
import org.json.JSONObject;

public class ChatConvListFragment extends ListFragment implements MultiChoiceModeListener, ICatfizNewMessage, ICatfizUpdateProgress {
    private static final String TAG = ChatConvListFragment.class.getSimpleName();
    private static Handler mHandler = new Handler();
    private ActionMode mAMode = null;
    private ChatConvListAdapter mAdapter = null;
    private int mAllMsgCount;
    public ChatsBottomBarView mBottomBar = null;
    private Catfiz mCatfiz = null;
    private ListView mChatListView = null;
    private int mCountSelected = 0;
    private int mCurrentMessageType = 1;
    public String mFilePathToSend = "";
    public Uri mFileUri = null;
    public Uri mFileUriHelper = null;
    private int mFirstItemToShow = 0;
    private String mFriend = null;
    private String mFriendName = null;
    public boolean mHasNewMessage = false;
    private int mHeightDiffHelper = 0;
    private boolean mIsOfficial;
    private boolean mIsStickerFirstPreview;
    private int mLastFirstVisible = 0;
    private LinearLayout mLlAttachImage = null;
    private LinearLayout mLlSticker;
    private int mMaxCurrentList;
    private List mMessages = null;
    private List mMessagesFull = null;
    private ActionMode mMode = null;
    private Message mMsgHelper = null;
    private SharedPreferences mPref;
    private View mRootView = null;
    private int mUnreadCount = 0;
    private boolean mbFirstEnter = true;

    /* synthetic */ class AnonymousClass14 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType = new int[MessageType.values().length];
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$signal$Signal = new int[Signal.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTMESSAGE.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTVOICE.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.PERSONCONTACT.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.PHOTOSEND_WCOMMENT.ordinal()] = 4;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.DATASEND_WCOMMENT.ordinal()] = 5;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SHARE_SLINK.ordinal()] = 6;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SVG_EMOTICONS.ordinal()] = 7;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.STIKER_MESSAGE.ordinal()] = 8;
            } catch (NoSuchFieldError e8) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.VIDEO_STREAMING.ordinal()] = 9;
            } catch (NoSuchFieldError e9) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.MESSAGE.ordinal()] = 10;
            } catch (NoSuchFieldError e10) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.PING.ordinal()] = 11;
            } catch (NoSuchFieldError e11) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.LONG_MESSAGE.ordinal()] = 12;
            } catch (NoSuchFieldError e12) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTCONFERENCE_LONGMESSAGE.ordinal()] = 13;
            } catch (NoSuchFieldError e13) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.QUOTE.ordinal()] = 14;
            } catch (NoSuchFieldError e14) {
            }
            try {
                $SwitchMap$com$catfiz$signal$Signal[Signal.CHAT_BLITZ.ordinal()] = 1;
            } catch (NoSuchFieldError e15) {
            }
            try {
                $SwitchMap$com$catfiz$signal$Signal[Signal.CHAT_DELIVERY_UPDATE.ordinal()] = 2;
            } catch (NoSuchFieldError e16) {
            }
            try {
                $SwitchMap$com$catfiz$signal$Signal[Signal.CHAT_TYPING.ordinal()] = 3;
            } catch (NoSuchFieldError e17) {
            }
        }
    }

    class ChatViewDialog implements AlbusDialogInterface {
        private Message mMsg;

        public ChatViewDialog(Message message) {
            this.mMsg = message;
        }

        private String getJSONText(Message message) {
            String slinkFromJson = AlbusUtils.getSlinkFromJson(this.mMsg.getText(), ServerMessageDataStorage.SLINK);
            Log.d(ChatConvListFragment.TAG, "slink:" + slinkFromJson);
            if (slinkFromJson == null || slinkFromJson.isEmpty() || slinkFromJson.compareTo("0") == 0) {
                return "";
            }
            JSONObject jSONObject = new JSONObject();
            try {
                jSONObject.put(ServerMessageDataStorage.SLINK, "catfiz://fl.catfiz.com/" + slinkFromJson);
                jSONObject.put(ServerMessageDataStorage.MESSAGE, AlbusUtils.getSlinkFromJson(this.mMsg.getText(), ServerMessageDataStorage.MESSAGE));
                jSONObject.put(FriendListDataStorage.FILENAME, AlbusUtils.getSlinkFromJson(this.mMsg.getText(), FriendListDataStorage.FILENAME));
                jSONObject.put("filesize", AlbusUtils.getSlinkFromJson(this.mMsg.getText(), "filesize"));
                jSONObject.put(TaskDataStorage.FILE_PATH, AlbusUtils.getSlinkFromJson(this.mMsg.getText(), "fiepath"));
                jSONObject.put(TaskDataStorage.TIMESTAMP, AlbusUtils.getSlinkFromJson(this.mMsg.getText(), TaskDataStorage.TIMESTAMP));
                jSONObject.put("simplelink", AlbusUtils.getSlinkFromJson(this.mMsg.getText(), "simplelink"));
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return jSONObject.toString();
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            switch (i) {
                case LangUtils.HASH_OFFSET /*37*/:
                    AlbusDialog.setOnAttachItemClicked(new OnAttachItemListener() {
                        public void onAttachVideoCamClicked() {
                            Intent intent = new Intent("android.media.action.VIDEO_CAPTURE");
                            if (intent.resolveActivity(((ChatGroupConvActivity) ChatConvListFragment.this.getActivity()).getPackageManager()) != null) {
                                intent.putExtra("android.intent.extra.durationLimit", AlbusModelObject.VIDEO_DURATION_UPLOAD_LIMIT);
                                ChatConvListFragment.this.startActivityForResult(intent, 6);
                            }
                        }

                        public void onAttachVideoFileClicked() {
                            try {
                                ChatConvListFragment.this.startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("video/*"), 24);
                            } catch (ActivityNotFoundException e) {
                                AlbusUtils.setToastView(ChatConvListFragment.this.getActivity(), ChatConvListFragment.this.getString(R.string.file_manager_check));
                            }
                        }
                    });
                    return;
                case R.styleable.Theme_actionModePopupWindowStyle /*39*/:
                    String slinkFromJson;
                    TextView textView = (TextView) view.findViewById(R.id.tv_chooser1);
                    TextView textView2 = (TextView) view.findViewById(R.id.tv_chooser2);
                    TextView textView3 = (TextView) view.findViewById(R.id.tv_chooser3);
                    TextView textView4 = (TextView) view.findViewById(R.id.tv_chooser4);
                    TextView textView5 = (TextView) view.findViewById(R.id.tv_chooser5);
                    TextView textView6 = (TextView) view.findViewById(R.id.tv_chooser6);
                    TextView textView7 = (TextView) view.findViewById(R.id.tv_chooser8);
                    TextView textView8 = (TextView) view.findViewById(R.id.tv_chooser9);
                    ((TextView) view.findViewById(R.id.tv_name)).setVisibility(8);
                    textView.setVisibility(8);
                    textView5.setVisibility(8);
                    textView8.setVisibility(8);
                    textView3.setVisibility(0);
                    textView2.setVisibility(0);
                    textView4.setVisibility(0);
                    final String text = this.mMsg.getText();
                    final int type = this.mMsg.getType();
                    boolean isEmpty = text.isEmpty();
                    switch (AnonymousClass14.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[type].ordinal()]) {
                        case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                        case PinManagerV2.REGCODE_HASOLDACC /*11*/:
                            textView2.setVisibility(8);
                            textView3.setVisibility(8);
                            break;
                        case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                        case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                        case HTTP.HT /*9*/:
                            textView6.setVisibility(0);
                            textView7.setVisibility(0);
                            textView6.setText(ChatConvListFragment.this.getResources().getString(R.string.share_to_friends));
                            textView7.setText(ChatConvListFragment.this.getResources().getString(R.string.share_to_pools));
                            if (!this.mMsg.getVoiceFilePath().isEmpty()) {
                                textView3.setVisibility(8);
                                textView2.setVisibility(8);
                            }
                            if (!isEmpty && FileMetaInfo.isFileMetaInfoValid(text) && FileMetaInfo.metaInfoBuilder(text).getCaption().isEmpty()) {
                                isEmpty = true;
                                break;
                            }
                        case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                            if (textView6.getVisibility() == 8) {
                                textView6.setVisibility(0);
                                textView7.setVisibility(0);
                                textView6.setText(ChatConvListFragment.this.getResources().getString(R.string.share_to_friends));
                                textView7.setText(ChatConvListFragment.this.getResources().getString(R.string.share_to_pools));
                            }
                            if (AlbusUtils.getSlinkFromJson(text, ServerMessageDataStorage.SLINK) == null) {
                                isEmpty = true;
                                break;
                            }
                            slinkFromJson = AlbusUtils.getSlinkFromJson(text, ServerMessageDataStorage.MESSAGE);
                            if (slinkFromJson == null || slinkFromJson.isEmpty()) {
                                isEmpty = true;
                                break;
                            }
                        case Utils.FILE_TYPE_INSTALLER /*8*/:
                            textView.setVisibility(8);
                            textView2.setVisibility(8);
                            textView3.setVisibility(8);
                            break;
                        case PinManagerV2.REGCODE_MAX /*12*/:
                            isEmpty = false;
                            textView2.setVisibility(8);
                            if (MessageDeliveryStatus.values()[this.mMsg.getDeliveryStatus()] == MessageDeliveryStatus.DROP) {
                                textView8.setVisibility(0);
                                break;
                            }
                            break;
                        default:
                            if (MessageDeliveryStatus.values()[this.mMsg.getDeliveryStatus()] == MessageDeliveryStatus.DROP) {
                                textView8.setVisibility(0);
                                break;
                            }
                            break;
                    }
                    textView3.setText(R.string.copy_chat);
                    textView4.setText(R.string.delete_chat);
                    textView2.setText(R.string.quote);
                    slinkFromJson = ChatConvListFragment.this.getString(R.string.btn_resend).toLowerCase();
                    textView8.setText((slinkFromJson.substring(0, 1).toUpperCase() + slinkFromJson.substring(1)) + " " + ChatConvListFragment.this.getString(R.string.Message));
                    if (isEmpty) {
                        textView3.setVisibility(8);
                        textView2.setVisibility(8);
                        textView8.setVisibility(8);
                    }
                    if (ChatConvListFragment.this.mIsOfficial) {
                        textView2.setVisibility(8);
                        textView8.setVisibility(8);
                    }
                    final DialogFragment dialogFragment2 = dialogFragment;
                    textView3.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment2.dismiss();
                            Log.d(ChatConvListFragment.TAG, "Copy process:" + type + " " + text + " " + FileMetaInfo.isFileMetaInfoValid(text));
                            String str;
                            switch (AnonymousClass14.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[type].ordinal()]) {
                                case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                                case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                                case HTTP.HT /*9*/:
                                    str = "";
                                    str = FileMetaInfo.isFileMetaInfoValid(text) ? FileMetaInfo.metaInfoBuilder(text).getCaption() : text;
                                    AlbusUtils.copyToClipboard(ChatConvListFragment.this.getActivity(), str);
                                    Log.d(ChatConvListFragment.TAG, "Copy text:" + str);
                                    break;
                                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                                    if (AlbusUtils.getSlinkFromJson(text, ServerMessageDataStorage.SLINK) != null) {
                                        str = AlbusUtils.getSlinkFromJson(text, ServerMessageDataStorage.MESSAGE);
                                        if (str != null) {
                                            AlbusUtils.copyToClipboard(ChatConvListFragment.this.getActivity(), str);
                                            break;
                                        }
                                    }
                                    break;
                                case PinManagerV2.REGCODE_MAX /*12*/:
                                case HTTP.CR /*13*/:
                                    AlbusUtils.copyToClipboard(ChatConvListFragment.this.getActivity(), LongMessageExecutor.getLongMessage(ChatViewDialog.this.mMsg.getSequence()));
                                    break;
                                case R.styleable.Toolbar_titleMarginEnd /*14*/:
                                    Quote quoteJSONStringDecoder = QuoteUtils.quoteJSONStringDecoder(text);
                                    if (quoteJSONStringDecoder != null) {
                                        AlbusUtils.copyToClipboard(ChatConvListFragment.this.getActivity(), quoteJSONStringDecoder.getMyMessage());
                                        break;
                                    }
                                    break;
                                default:
                                    AlbusUtils.copyToClipboard(ChatConvListFragment.this.getActivity(), text);
                                    break;
                            }
                            AlbusUtils.setToastView(ChatConvListFragment.this.getActivity(), ChatConvListFragment.this.getString(R.string.text_copied));
                        }
                    });
                    dialogFragment2 = dialogFragment;
                    textView4.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment2.dismiss();
                            Log.d(ChatConvListFragment.TAG, "delete seq=" + ChatViewDialog.this.mMsg.getSequence());
                            ChatConvListFragment.this.mCatfiz.deleteSingleChatMessage(ChatConvListFragment.this.mFriend, ChatViewDialog.this.mMsg.getSequence(), new PrivateFetchMessagesCallback() {
                                public void onData(List list) {
                                }

                                public void onError() {
                                    Log.d(ChatConvListFragment.TAG, "onError() delete message");
                                }

                                public void onSuccess() {
                                    ChatConvListFragment.this.getAllData(false, false);
                                    Log.d(ChatConvListFragment.TAG, "onSuccess() delete message");
                                }
                            });
                            PendingStateUtils.setPendingState(ChatConvListFragment.this.getActivity(), 0);
                        }
                    });
                    dialogFragment2 = dialogFragment;
                    textView8.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment2.dismiss();
                            Log.d(ChatConvListFragment.TAG, "resend seq=" + ChatViewDialog.this.mMsg.getSequence());
                            if (MessageType.values()[ChatViewDialog.this.mMsg.getType()] == MessageType.MESSAGE) {
                                ChatConvListFragment.this.mCatfiz.resendSingleChatMessage(ChatConvListFragment.this.mFriend, ChatViewDialog.this.mMsg.getSequence(), text, new PrivateFetchMessagesCallback() {
                                    public void onData(List list) {
                                    }

                                    public void onError() {
                                        Log.d(ChatConvListFragment.TAG, "onError() resend message");
                                    }

                                    public void onSuccess() {
                                        ChatConvListFragment.this.getAllData(false, true);
                                        Log.d(ChatConvListFragment.TAG, "onSuccess() resend message");
                                    }
                                });
                            } else if (MessageType.values()[ChatViewDialog.this.mMsg.getType()] == MessageType.QUOTE) {
                                ChatConvListFragment.this.mCatfiz.resendChatQuote(ChatConvListFragment.this.mFriend, ChatViewDialog.this.mMsg.getSequence(), text, new PrivateFetchMessagesCallback() {
                                    public void onData(List list) {
                                    }

                                    public void onError() {
                                        Log.d(ChatConvListFragment.TAG, "onError() resend message");
                                    }

                                    public void onSuccess() {
                                        ChatConvListFragment.this.getAllData(false, true);
                                        Log.d(ChatConvListFragment.TAG, "onSuccess() resend message");
                                    }
                                });
                            }
                        }
                    });
                    dialogFragment2 = dialogFragment;
                    textView2.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment2.dismiss();
                            Log.d(ChatConvListFragment.TAG, "onQuoted Message:" + type + " " + text);
                            ChatConvListFragment.this.mBottomBar.setQuote(ChatViewDialog.this.mMsg);
                            ChatConvListFragment.this.setAttachedData(7, "");
                            ChatConvListFragment.this.mMsgHelper = ChatViewDialog.this.mMsg;
                        }
                    });
                    dialogFragment2 = dialogFragment;
                    textView6.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment2.dismiss();
                            String formatFromMessage = Fizzlink.formatFromMessage(ChatViewDialog.this.mMsg);
                            if (formatFromMessage == null) {
                                Log.e(ChatConvListFragment.TAG, "ERROR: invalid fizzlink message");
                                return;
                            }
                            Log.d(ChatConvListFragment.TAG, "fizzlink message is :" + formatFromMessage);
                            Intent intent = new Intent(ChatConvListFragment.this.getActivity(), CustomActionBarPageActivity.class);
                            intent.putExtra(AlbusModelObject.PAGE, 49);
                            intent.putExtra(HTTP.IDENTITY_CODING, 49);
                            intent.putExtra("android.intent.extra.TEXT", formatFromMessage);
                            intent.putExtra(ServerMessageDataStorage.SLINK, true);
                            intent.putExtra("slinkuri", ChatViewDialog.this.mMsg.getSlink());
                            intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, ChatViewDialog.this.mMsg.getSender().getId());
                            ChatConvListFragment.this.startActivity(intent);
                        }
                    });
                    dialogFragment2 = dialogFragment;
                    textView7.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment2.dismiss();
                            dialogFragment2.dismiss();
                            String formatFromMessage = Fizzlink.formatFromMessage(ChatViewDialog.this.mMsg);
                            if (formatFromMessage == null) {
                                Log.e(ChatConvListFragment.TAG, "ERROR: invalid fizzlink message");
                                return;
                            }
                            Intent intent = new Intent(ChatConvListFragment.this.getActivity(), CustomActionBarPageActivity.class);
                            intent.putExtra(AlbusModelObject.PAGE, 41);
                            intent.putExtra(HTTP.IDENTITY_CODING, 49);
                            intent.putExtra("android.intent.extra.TEXT", formatFromMessage);
                            intent.putExtra(ServerMessageDataStorage.SLINK, true);
                            intent.putExtra("slinkuri", ChatViewDialog.this.mMsg.getSlink());
                            ChatConvListFragment.this.startActivity(intent);
                        }
                    });
                    return;
                case R.styleable.Theme_selectableItemBackground /*52*/:
                    AlbusDialog.setOnChooserVideoResolutionClicked(new OnChooserVideoResolutionListener() {
                        public void onVideoHighResolution() {
                        }

                        public void onVideoLowResolution() {
                        }
                    });
                    return;
                default:
                    return;
            }
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    class CheckChatUnreadCb implements FetchFriendCallback {
        private WeakReference mThisFragmentRef;

        public CheckChatUnreadCb(ChatConvListFragment chatConvListFragment) {
            this.mThisFragmentRef = new WeakReference(chatConvListFragment);
        }

        public void onData(User user, String str) {
            if (((ChatConvListFragment) this.mThisFragmentRef.get()) != null && user != null) {
                int haveUnreadItem = user.getHaveUnreadItem();
                int unreadCount = user.getUnreadCount();
                Log.d(ChatConvListFragment.TAG, "~~~CheckUserChatCb:" + haveUnreadItem + " " + unreadCount);
                if (haveUnreadItem > 0 && unreadCount > 0) {
                    ChatConvListFragment.this.getAllData(false, true);
                }
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    public class FetchMessagesWithLimitCB implements PrivateFetchMessagesCallback {
        private boolean mIsCheckTyping = false;
        private boolean mIsShowMore = false;
        private boolean mScrollToLastPos = false;
        private WeakReference mThisFragmentRef;

        public FetchMessagesWithLimitCB(ChatConvListFragment chatConvListFragment, boolean z, boolean z2, boolean z3) {
            this.mThisFragmentRef = new WeakReference(chatConvListFragment);
            this.mIsCheckTyping = z;
            this.mScrollToLastPos = z2;
            this.mIsShowMore = z3;
        }

        public void onData(List list) {
            ChatConvListFragment chatConvListFragment = (ChatConvListFragment) this.mThisFragmentRef.get();
            if (chatConvListFragment == null) {
                Log.d(ChatConvListFragment.TAG, "FetchMessagesCB weak Ref is null");
                return;
            }
            Log.d(ChatConvListFragment.TAG, ">>>> FETCH_MESSAGE_CB size:" + list.size());
            if (PendingStateUtils.getPendingState(chatConvListFragment.getActivity()) != 0 || list.size() > 0) {
                if (this.mScrollToLastPos && chatConvListFragment.mMessages.size() != list.size()) {
                    Log.d(ChatConvListFragment.TAG, "Scroll Here!");
                }
                int size = chatConvListFragment.mMessages.size();
                if (this.mIsShowMore) {
                    Collections.reverse(chatConvListFragment.mMessages);
                    Collections.reverse(list);
                    chatConvListFragment.mMessages.addAll(list);
                    Collections.reverse(chatConvListFragment.mMessages);
                } else {
                    chatConvListFragment.mMessages.clear();
                    chatConvListFragment.mMessages.addAll(list);
                }
                chatConvListFragment.mAdapter.notifyDataSetChanged();
                if (this.mIsShowMore) {
                    size = chatConvListFragment.mAllMsgCount - size;
                    Log.d(ChatConvListFragment.TAG, "all:" + chatConvListFragment.mAllMsgCount + " size:" + chatConvListFragment.mMessages.size() + " diff:" + size);
                    if (size >= 10) {
                        chatConvListFragment.getListView().setSelection(100);
                    } else {
                        chatConvListFragment.getListView().setSelection(size);
                    }
                } else {
                    chatConvListFragment.getListView().setSelection(chatConvListFragment.mAdapter.getCount() - 1);
                }
                if (this.mIsCheckTyping) {
                    chatConvListFragment.checkIsTyping();
                }
                PendingStateUtils.resetPendingState(chatConvListFragment.getActivity());
                if (chatConvListFragment.mUnreadCount > 0) {
                    chatConvListFragment.mCatfiz.chatNotifyMessageRead(chatConvListFragment.mFriend, null);
                    return;
                }
                return;
            }
            Log.d(ChatConvListFragment.TAG, "FetchMessagesCB size:" + list.size() + " DELETE CHATS NOW");
            ((ChatGroupConvActivity) chatConvListFragment.getActivity()).clearUserChat();
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    class FizzlinkDialog implements AlbusDialogInterface {
        private Fizzlink mFizz;
        private Message mMessage;

        public FizzlinkDialog(Fizzlink fizzlink) {
            this.mFizz = fizzlink;
        }

        public FizzlinkDialog(Message message) {
            this.mMessage = message;
        }

        private String getJSONText(Message message) {
            String slink = message.getSlink();
            Log.d(ChatConvListFragment.TAG, "slink:" + slink);
            if (slink.compareTo("0") == 0 || slink == null) {
                return "";
            }
            Fizzlink fizzlink = message.getFizzlink();
            JSONObject jSONObject = new JSONObject();
            try {
                jSONObject.put(ServerMessageDataStorage.SLINK, "catfiz://fl.catfiz.com/" + slink);
                jSONObject.put(ServerMessageDataStorage.MESSAGE, fizzlink.getMessage());
                jSONObject.put(FriendListDataStorage.FILENAME, fizzlink.getFileName());
                jSONObject.put("filesize", fizzlink.getDataSize());
                jSONObject.put(TaskDataStorage.FILE_PATH, fizzlink.getFilePath());
                jSONObject.put(TaskDataStorage.TIMESTAMP, System.currentTimeMillis() + "");
                jSONObject.put("simplelink", message.getSlink());
            } catch (JSONException e) {
                e.printStackTrace();
            }
            slink = jSONObject.toString();
            Log.d(ChatConvListFragment.TAG, "result generate json text from message : " + slink);
            return slink;
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, final DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            switch (i) {
                case R.styleable.Theme_spinnerDropDownItemStyle /*47*/:
                    AlbusDialog.setOnShareButtonClicked(new OnShareButtonListener() {
                        public void onShareToFriendClicked() {
                            dialogFragment.dismiss();
                            Intent intent = new Intent(ChatConvListFragment.this.getActivity(), CustomActionBarPageActivity.class);
                            intent.putExtra(AlbusModelObject.PAGE, 49);
                            intent.putExtra(HTTP.IDENTITY_CODING, 49);
                            intent.putExtra("android.intent.extra.TEXT", FizzlinkDialog.this.getJSONText(FizzlinkDialog.this.mMessage));
                            intent.putExtra(ServerMessageDataStorage.SLINK, true);
                            intent.putExtra("slinkuri", FizzlinkDialog.this.mMessage.getSlink());
                            intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, FizzlinkDialog.this.mMessage.getSender().getId());
                            ChatConvListFragment.this.startActivity(intent);
                        }

                        public void onShareToMyStatusClicked() {
                        }

                        public void onShareToPoolClicked() {
                            dialogFragment.dismiss();
                            Intent intent = new Intent(ChatConvListFragment.this.getActivity(), CustomActionBarPageActivity.class);
                            intent.putExtra(AlbusModelObject.PAGE, 41);
                            intent.putExtra(HTTP.IDENTITY_CODING, 49);
                            intent.putExtra("android.intent.extra.TEXT", FizzlinkDialog.this.getJSONText(FizzlinkDialog.this.mMessage));
                            intent.putExtra(ServerMessageDataStorage.SLINK, true);
                            intent.putExtra("slinkuri", FizzlinkDialog.this.mMessage.getSlink());
                            ChatConvListFragment.this.startActivityForResult(intent, 27);
                        }
                    });
                    return;
                case R.styleable.Theme_homeAsUpIndicator /*48*/:
                    AlbusDialog.setChooserTypeFile(new OnChooserTypeFile() {
                        public void onAudioType() {
                            try {
                                ChatConvListFragment.this.startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("audio/*"), 1);
                            } catch (ActivityNotFoundException e) {
                                AlbusUtils.setToastView(ChatConvListFragment.this.getActivity(), ChatConvListFragment.this.getString(R.string.file_manager_check));
                            }
                        }

                        public void onFileType() {
                            try {
                                ChatConvListFragment.this.startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("application/*|text/*"), 1);
                            } catch (ActivityNotFoundException e) {
                                AlbusUtils.setToastView(ChatConvListFragment.this.getActivity(), ChatConvListFragment.this.getString(R.string.file_manager_check));
                            }
                        }

                        public void onImageType() {
                            try {
                                ChatConvListFragment.this.startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("image/*"), 1);
                            } catch (ActivityNotFoundException e) {
                                AlbusUtils.setToastView(ChatConvListFragment.this.getActivity(), ChatConvListFragment.this.getString(R.string.file_manager_check));
                            }
                        }

                        public void onVideoType() {
                            try {
                                ChatConvListFragment.this.startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("video/*"), 1);
                            } catch (ActivityNotFoundException e) {
                                AlbusUtils.setToastView(ChatConvListFragment.this.getActivity(), ChatConvListFragment.this.getString(R.string.file_manager_check));
                            }
                        }
                    });
                    return;
                default:
                    return;
            }
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    private void checkIsTyping() {
        if (this.mMessages.size() > 0) {
            int size = this.mMessages.size() - 1;
            if (this.mCatfiz.isFriendOnTyping(this.mFriend)) {
                Log.d(TAG, "CHAT_TYPING write");
                if (((Message) this.mMessages.get(size)).getType() != MessageType.WRITING.ordinal()) {
                    this.mMessages.add(generateTypingMessage());
                    this.mAdapter.notifyDataSetChanged();
                    getListView().setSelection(size);
                    return;
                }
                return;
            }
            Log.d(TAG, "CHAT_TYPING not write");
            if (((Message) this.mMessages.get(size)).getType() == MessageType.WRITING.ordinal()) {
                this.mMessages.remove(size);
                this.mAdapter.notifyDataSetChanged();
            }
        }
    }

    private Message generateTypingMessage() {
        Message message = new Message();
        message.setText("");
        message.setSender(new User(this.mFriend));
        message.setType(MessageType.WRITING.ordinal());
        message.setDeliveryStatus(0);
        return message;
    }

    private void getChatData(boolean z, boolean z2, boolean z3) {
        this.mCatfiz.chatFetchMessagesCount(this.mFriend, new PrivateFetchMessagesCountCallback() {
            public void onData(int i) {
                Log.d(ChatConvListFragment.TAG, "Count:" + i);
                ChatConvListFragment.this.mAllMsgCount = i;
                ChatConvListFragment.this.mAdapter.setAllMsgCount(ChatConvListFragment.this.mAllMsgCount);
                ChatConvListFragment.this.mAdapter.notifyDataSetChanged();
            }

            public void onError() {
            }

            public void onSuccess() {
            }
        });
        if (z3) {
            this.mMaxCurrentList += this.mMaxCurrentList;
            this.mCatfiz.chatFetchMessagesWithLimit(this.mFriend, Long.parseLong(((Message) this.mMessages.get(0)).getTimeStamp()), 100, new FetchMessagesWithLimitCB(this, z, z2, z3));
            return;
        }
        this.mCatfiz.chatFetchMessagesWithLimit(this.mFriend, 0, this.mMaxCurrentList, new FetchMessagesWithLimitCB(this, z, z2, z3));
    }

    public static ChatConvListFragment newInstance() {
        return new ChatConvListFragment();
    }

    private void resetPendingState() {
        Log.d(TAG, "RESET PENDING STATE");
        this.mFileUriHelper = null;
        PendingStateUtils.resetPendingState(getActivity());
    }

    private void scrollToBottomHandler() {
        if (this.mMessages != null && this.mMessages.size() > 0) {
            mHandler.post(new Runnable() {
                public void run() {
                    ChatConvListFragment.this.getListView().setSelection(ChatConvListFragment.this.mMessages.size() - 1);
                }
            });
        }
    }

    private void setAttachedData(int i, String str) {
        this.mCurrentMessageType = i;
        this.mFilePathToSend = str;
    }

    public void cancelFizzlink(long j, String str) {
        Intent intent = new Intent(BroadcastIntents.ACTION_CANCEL_FIZZLINK_DOWNLOAD);
        intent.putExtra(ServerMessageDataStorage.SEQUENCE, j);
        LocalBroadcastManager.getInstance(getActivity()).sendBroadcast(intent);
        this.mAdapter.setCancelFizlink("" + j);
        this.mAdapter.notifyDataSetChanged();
    }

    public void checkIsScrolling() {
        getListView().setOnScrollListener(new OnScrollListener() {
            public void onScroll(AbsListView absListView, int i, int i2, int i3) {
                ChatConvListFragment.this.mLastFirstVisible = i;
                if (ChatConvListFragment.this.mLastFirstVisible <= i && ChatConvListFragment.this.mLastFirstVisible >= i) {
                }
            }

            public void onScrollStateChanged(AbsListView absListView, int i) {
            }
        });
    }

    public void deleteSelected() {
        this.mCountSelected = 0;
        this.mAdapter.deleteSelection();
        this.mMode.finish();
    }

    public void downloadFizzlink(long j, String str) {
        for (Message message : this.mMessages) {
            if (message.getSequence() == j) {
                downloadFizzlink(message);
                return;
            }
        }
    }

    public void downloadFizzlink(Message message) {
        String fileName = message.getFizzlink().getFileName();
        Log.d(TAG, "Fizz old FileName:" + fileName);
        switch (Utils.getFileTypeFromPath(fileName)) {
            case e.c /*2*/:
                fileName = StorageDir.getPrivateChatDir(4) + fileName;
                break;
            case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                fileName = StorageDir.getPrivateChatDir(1) + fileName;
                break;
        }
        Log.d(TAG, "Fizz new FileName:" + fileName);
        message.getFizzlink().setFilePath(fileName);
        this.mCatfiz.fizzlinkDownload(message, null);
    }

    public void finishMultiSelect() {
        if (this.mAMode != null) {
            this.mAMode.finish();
        }
    }

    public ActionMode getAcionModeActive() {
        return this.mAMode;
    }

    public void getAllData(boolean z, boolean z2) {
        getChatData(z, z2, false);
        this.mCatfiz.requestProgressUploadDownload(new ProgressUploadDownload() {
            public void onError() {
            }

            public boolean onHasProgressUploadDownNUpload(Map map, Map map2) {
                ChatConvListFragment.this.mAdapter.setProgress(map, map2);
                ChatConvListFragment.this.mAdapter.notifyDataSetChanged();
                return false;
            }

            public void onSuccess() {
            }

            public boolean onUpdateProgressDownloadNUpload(String str, int i, int i2) {
                Log.d(ChatConvListFragment.TAG, "onHasProgressUploadDownNUpload int");
                return false;
            }
        });
        this.mbFirstEnter = false;
    }

    public View getAttachView() {
        return this.mLlAttachImage;
    }

    public Uri getUriHelperData() {
        return this.mFileUriHelper;
    }

    public boolean onActionItemClicked(ActionMode actionMode, MenuItem menuItem) {
        this.mMode = actionMode;
        switch (menuItem.getItemId()) {
            case R.id.multi_item_copy:
                AlbusUtils.setToastView(getActivity(), getString(R.string.message_copied));
                break;
            case R.id.multi_item_delete:
                Bundle bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 4);
                bundle.putInt(AlbusModelObject.VALUE, this.mCountSelected);
                AlbusDialog.showDialog(4, new DialogUI().getDialogInterface(), getActivity(), bundle, getActivity().getSupportFragmentManager());
                Log.d(TAG, "show action delete");
                break;
        }
        return true;
    }

    public void onActivityCreated(Bundle bundle) {
        super.onActivityCreated(bundle);
        this.mAdapter = new ChatConvListAdapter(getActivity(), this.mMessages, this.mIsOfficial, this.mFriendName);
        setListAdapter(this.mAdapter);
        this.mAdapter.notifyDataSetChanged();
    }

    public void onActivityResult(int i, int i2, Intent intent) {
        super.onActivityResult(i, i2, intent);
        Log.d(TAG, "onActivityResult(chat): " + i + " " + i2);
        if (i2 == -1) {
            String path;
            switch (i) {
                case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                    if (this.mFileUriHelper == null) {
                        Log.d(TAG, "onActivityResult(chat), mFileUriHelper NULL");
                        return;
                    }
                    path = MediaFilePath.getPath(getActivity(), this.mFileUriHelper);
                    this.mBottomBar.setAttachFile(path);
                    Log.d(TAG, "Photo cam path:" + path);
                    setAttachedData(2, path);
                    return;
                case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                    path = MediaFilePath.getPath(getActivity(), intent.getData());
                    this.mBottomBar.setAttachFile(path);
                    Log.d(TAG, "Photo file path:" + path);
                    setAttachedData(4, path);
                    return;
                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                    Uri data = intent.getData();
                    this.mFileUriHelper = data;
                    path = MediaFilePath.getPath(getActivity(), data);
                    this.mBottomBar.setAttachFile(path);
                    Log.d(TAG, "Video path:" + path);
                    setAttachedData(3, path);
                    return;
                case PinManagerV2.REGCODE_MAX /*12*/:
                    path = MediaFilePath.getPath(getActivity(), intent.getData());
                    this.mBottomBar.setAttachFile(path);
                    Log.d(TAG, "File path:" + path);
                    setAttachedData(4, path);
                    return;
                case R.styleable.Toolbar_subtitleTextColor /*24*/:
                    path = MediaFilePath.getPath(getActivity(), intent.getData());
                    this.mBottomBar.setAttachFile(path);
                    Log.d(TAG, "File path:" + path);
                    setAttachedData(3, path);
                    return;
                case R.styleable.Theme_actionMenuTextAppearance /*25*/:
                    break;
                case R.styleable.Theme_actionModeStyle /*27*/:
                    AlbusUtils.setToastView(getActivity(), getString(R.string.fizzlink_sent));
                    break;
                default:
                    return;
            }
            mHandler.post(new Runnable() {
                public void run() {
                    ChatConvListFragment.this.getAllData(false, true);
                }
            });
        }
    }

    public void onCatfizStarted() {
        Log.d(TAG, "onCatfizStarted");
        getAllData(true, true);
    }

    public void onCatfizStopped() {
    }

    public void onConfigurationChanged(Configuration configuration) {
        super.onConfigurationChanged(configuration);
        if (configuration.orientation == 2) {
            Log.d(TAG, "~~~~~~~~~~~~~~~~~ Landscape");
        } else if (configuration.orientation == 1) {
            Log.d(TAG, "~~~~~~~~~~~~~~~~~ Portrait");
            mHandler.post(new Runnable() {
                public void run() {
                    if (ChatConvListFragment.this.mFileUriHelper != null) {
                        String path = MediaFilePath.getPath(ChatConvListFragment.this.getActivity(), ChatConvListFragment.this.mFileUriHelper);
                        if (path != null) {
                            Log.d(ChatConvListFragment.TAG, ">>>>>>>>>> DATA:" + path + ", mFileUriHelper:" + ChatConvListFragment.this.mFileUriHelper);
                            switch (Utils.getFileTypeFromPath(path)) {
                                case e.b /*1*/:
                                    ChatConvListFragment.this.mBottomBar.setAttachFile(path);
                                    ChatConvListFragment.this.setAttachedData(2, path);
                                    break;
                                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                                    ChatConvListFragment.this.mBottomBar.setAttachFile(path);
                                    ChatConvListFragment.this.setAttachedData(3, path);
                                    break;
                                default:
                                    Log.d(ChatConvListFragment.TAG, "!!!! DATA NONE");
                                    break;
                            }
                            ChatConvListFragment.this.resetPendingState();
                            return;
                        }
                        Log.d(ChatConvListFragment.TAG, "!!!! PATH NULL");
                        return;
                    }
                    Log.d(ChatConvListFragment.TAG, "!!!! URI HELPER NULL");
                }
            });
        }
    }

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        Log.d(TAG, "onCreate " + TAG);
        this.mCatfiz = new Catfiz(getActivity(), this, new SignalBinderGeneral());
    }

    public boolean onCreateActionMode(ActionMode actionMode, Menu menu) {
        getActivity().getMenuInflater().inflate(R.menu.actionbar_multiple_select, menu);
        menu.setGroupVisible(R.id.multi_select2, true);
        this.mAMode = actionMode;
        return true;
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        Log.d(TAG, "onCreateView " + TAG);
        final View inflate = layoutInflater.inflate(R.layout.fragment_chat_group_view, viewGroup, false);
        this.mRootView = inflate;
        this.mIsOfficial = getActivity().getIntent().getBooleanExtra(AlbusModelObject.IS_OFFICIAL, false);
        this.mUnreadCount = getActivity().getIntent().getIntExtra(AlbusModelObject.UNREAD_COUNT, 0);
        this.mBottomBar = (ChatsBottomBarView) inflate.findViewById(R.id.cv_bottom_bar);
        this.mLlSticker = (LinearLayout) inflate.findViewById(R.id.ll_sticker_notif);
        this.mPref = PreferenceManager.getDefaultSharedPreferences(getActivity());
        this.mPref.edit().putBoolean(StickerDataStorage.STICKER_TABLE_NAME, true).commit();
        this.mIsStickerFirstPreview = this.mPref.getBoolean(StickerDataStorage.STICKER_TABLE_NAME, true);
        if (this.mIsOfficial) {
            this.mBottomBar.setVisibility(8);
        } else {
            this.mBottomBar.setOnEmojiPanelAnimation(new onPanelEmojiAnimation() {
                public void onPanelDown() {
                }

                public void onPanelDownFinished() {
                }

                public void onPanelUp(View view) {
                    ((ChatGroupConvActivity) ChatConvListFragment.this.getActivity()).dismissKeyboard(view);
                }

                public void onPanelUpFinished(View view) {
                    ChatConvListFragment.this.mChatListView = ChatConvListFragment.this.getListView();
                    ChatConvListFragment.this.mAdapter.notifyDataSetChanged();
                    ChatConvListFragment.this.mChatListView.clearFocus();
                    ChatConvListFragment.this.mChatListView.post(new Runnable() {
                        public void run() {
                            ChatConvListFragment.this.mChatListView.setSelection(ChatConvListFragment.this.mAdapter.getCount() - 1);
                        }
                    });
                }
            });
            this.mBottomBar.setOnEmojiPanelComponentListener(new onEmojiPanelComponentListener() {
                public void onBtnKeyboardPressed(View view) {
                    ((ChatGroupConvActivity) ChatConvListFragment.this.getActivity()).showKeyboard(view);
                }

                public void onBtnSendPressed(String str) {
                    final Message message = new Message(AlbusUtils.removeUnecessaryHtmlTag(str));
                    if (ChatConvListFragment.this.mCurrentMessageType == 1) {
                        Log.d(ChatConvListFragment.TAG, "Will Send MESSAGE_TYPE_PLAIN");
                        ChatConvListFragment.this.mCatfiz.chatSendMessage(new User(ChatConvListFragment.this.mFriend), message, new Callback() {
                            public void onError() {
                                Log.d(ChatConvListFragment.TAG, "Error Send Message");
                            }

                            public void onSuccess() {
                                Log.d(ChatConvListFragment.TAG, "Success Send Message:" + message.getText());
                                ChatConvListFragment.this.getAllData(false, true);
                            }
                        });
                    } else if (ChatConvListFragment.this.mCurrentMessageType == 7) {
                        r0 = QuoteUtils.quoteJSONStringBuilder(ChatConvListFragment.this.mMsgHelper, message.getText());
                        Log.d(ChatConvListFragment.TAG, "Will Send MESSAGE_TYPE_QUOTED:" + r0);
                        ChatConvListFragment.this.mCatfiz.chatSendQuote(new User(ChatConvListFragment.this.mFriend), new Message(r0), new Callback() {
                            public void onError() {
                                Log.d(ChatConvListFragment.TAG, "Error Send Message");
                            }

                            public void onSuccess() {
                                Log.d(ChatConvListFragment.TAG, "Success Send Message");
                                ChatConvListFragment.this.getAllData(false, true);
                            }
                        });
                        ChatConvListFragment.this.mBottomBar.closeAttachAndEmoPanel();
                        ChatConvListFragment.this.setAttachedData(1, "");
                        ChatConvListFragment.this.mMsgHelper = null;
                    } else {
                        String str2;
                        r0 = "";
                        switch (ChatConvListFragment.this.mCurrentMessageType) {
                            case e.c /*2*/:
                                Log.d(ChatConvListFragment.TAG, "Will Send MESSAGE_TYPE_PHOTO:" + ChatConvListFragment.this.mFilePathToSend);
                                r0 = AlbusModelObject.DATA_TYPE_IMAGE;
                                break;
                            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                                Log.d(ChatConvListFragment.TAG, "Will Send MESSAGE_TYPE_VIDEO:" + ChatConvListFragment.this.mFilePathToSend);
                                r0 = AlbusModelObject.DATA_TYPE_VIDEO;
                                break;
                            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                                Log.d(ChatConvListFragment.TAG, "Will Send MESSAGE_TYPE_FILE:" + ChatConvListFragment.this.mFilePathToSend);
                                r0 = ChunkStorage.DATA_TABLE_NAME;
                                message.setAttacType(1);
                                break;
                        }
                        switch (Utils.getFileTypeFromPath(ChatConvListFragment.this.mFilePathToSend)) {
                            case e.c /*2*/:
                            case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                                str2 = AlbusModelObject.DATA_TYPE_VIDEO;
                                break;
                            default:
                                Log.d(ChatConvListFragment.TAG, "Message will be send as it be:" + ChatConvListFragment.this.mFilePathToSend);
                                str2 = r0;
                                break;
                        }
                        ChatConvListFragment.this.mCatfiz.chatSendAttachedMessage(new User(ChatConvListFragment.this.mFriend), message, ChatConvListFragment.this.mFilePathToSend, str2, ChatConvListFragment.this.getActivity(), new Callback() {
                            public void onError() {
                                Log.d(ChatConvListFragment.TAG, "Error Send Attached Message!");
                            }

                            public void onSuccess() {
                                Log.d(ChatConvListFragment.TAG, "Success Send Attached Message:" + ChatConvListFragment.this.mFilePathToSend);
                                ChatConvListFragment.this.getAllData(false, true);
                            }
                        });
                        ChatConvListFragment.this.mBottomBar.closeAttachAndEmoPanel();
                        ChatConvListFragment.this.setAttachedData(1, "");
                        ChatConvListFragment.this.resetPendingState();
                    }
                    ChatConvListFragment.this.mHasNewMessage = true;
                }

                public void onBtnStickerActive(ImageButton imageButton, boolean z) {
                    if (z) {
                        imageButton.setImageResource(R.drawable.ic_emot_dark);
                        ChatConvListFragment.this.scrollToBottomHandler();
                        Log.d(ChatConvListFragment.TAG, "on emo btn clicked, position:" + (ChatConvListFragment.this.getListView().getCount() - 1));
                        return;
                    }
                    imageButton.setImageResource(R.drawable.ic_sticker_dark);
                    if (ChatConvListFragment.this.mIsStickerFirstPreview) {
                        ChatConvListFragment.this.mPref.edit().putBoolean(StickerDataStorage.STICKER_TABLE_NAME, false).commit();
                        ChatConvListFragment.this.mIsStickerFirstPreview = false;
                    }
                }

                public void onEditTextFocusChanged() {
                    ((ChatGroupConvActivity) ChatConvListFragment.this.getActivity()).finishActionMode();
                    ChatConvListFragment.this.scrollToBottomHandler();
                }
            });
            this.mBottomBar.setOnAttachmentClickListener(new onAttachmentClickListener() {
                public void onCancelAttachmentClicked() {
                    ChatConvListFragment.this.setAttachedData(1, "");
                }

                public void onContactPIN() {
                    Intent intent = new Intent(ChatConvListFragment.this.getActivity(), CustomActionBarPageActivity.class);
                    intent.putExtra(AlbusModelObject.PAGE, 34);
                    intent.putExtra(HTTP.IDENTITY_CODING, 34);
                    intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, ChatConvListFragment.this.mFriend);
                    ChatConvListFragment.this.startActivityForResult(intent, 25);
                }

                public void onFileAttachmentClicked() {
                    try {
                        ChatConvListFragment.this.startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("*/*"), 12);
                    } catch (ActivityNotFoundException e) {
                        AlbusUtils.setToastView(ChatConvListFragment.this.getActivity(), ChatConvListFragment.this.getString(R.string.file_manager_check));
                    }
                }

                public void onFizzlinkAttachmentClicked() {
                    Intent intent = new Intent(ChatConvListFragment.this.getActivity(), CustomActionBarPageActivity.class);
                    intent.putExtra(AlbusModelObject.PAGE, 57);
                    intent.putExtra(HTTP.IDENTITY_CODING, 1);
                    intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, ChatConvListFragment.this.mFriend);
                    ChatConvListFragment.this.startActivityForResult(intent, 27);
                }

                public void onMusicAttachmentClicked() {
                    try {
                        ChatConvListFragment.this.startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("audio/*"), 24);
                    } catch (ActivityNotFoundException e) {
                        AlbusUtils.setToastView(ChatConvListFragment.this.getActivity(), ChatConvListFragment.this.getString(R.string.file_manager_check));
                    }
                }

                public void onPhotoAttachmentClicked(Uri uri) {
                    Bundle bundle = new Bundle();
                    bundle.putInt(AlbusModelObject.DIALOG, 36);
                    AlbusDialog.showDialog(36, new DialogUI().getDialogInterface(), ChatConvListFragment.this.getActivity(), bundle, ChatConvListFragment.this.getActivity().getSupportFragmentManager());
                    ChatConvListFragment.this.mFileUriHelper = uri;
                }

                public void onSendBlitz() {
                    ChatConvListFragment.this.mCatfiz.chatSendBlitz(new User(ChatConvListFragment.this.mFriend), new Callback() {
                        public void onError() {
                        }

                        public void onSuccess() {
                            ChatConvListFragment.this.mAdapter.notifyDataSetChanged();
                            ChatConvListFragment.this.getAllData(false, true);
                        }
                    });
                }

                public void onVideoAttachmentClicked() {
                    Bundle bundle = new Bundle();
                    bundle.putInt(AlbusModelObject.DIALOG, 37);
                    AlbusDialog.showDialog(37, new ChatViewDialog(null), ChatConvListFragment.this.getActivity(), bundle, ChatConvListFragment.this.getActivity().getSupportFragmentManager());
                }

                public void onVoiceAttachmentClicked(String str) {
                    ChatConvListFragment.this.mCatfiz.chatSendAttachedMessage(new User(ChatConvListFragment.this.mFriend), new Message(""), str, AlbusModelObject.DATA_TYPE_VOICE, ChatConvListFragment.this.getActivity(), new Callback() {
                        public void onError() {
                            Log.d(ChatConvListFragment.TAG, "Error Send Attached Voice Message!");
                        }

                        public void onSuccess() {
                            Log.d(ChatConvListFragment.TAG, "Success Send Attached Voice Message");
                            ChatConvListFragment.this.mAdapter.notifyDataSetChanged();
                            ChatConvListFragment.this.getAllData(false, true);
                            ChatConvListFragment.this.mBottomBar.closeAttachAndEmoPanel();
                            ChatConvListFragment.this.setAttachedData(1, "");
                        }
                    });
                }
            });
        }
        this.mFriend = getActivity().getIntent().getStringExtra(AlbusModelObject.FRIEND_ID).toUpperCase(Locale.US);
        Log.d(TAG, "friend id : " + this.mFriend);
        this.mFriendName = getActivity().getIntent().getStringExtra(CatfishDataStorage.NIC_NAME);
        this.mMessages = new ArrayList();
        this.mMessagesFull = new ArrayList();
        this.mBottomBar.setParams(0, this.mFriend);
        this.mMaxCurrentList = 100;
        inflate.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
            public void onGlobalLayout() {
                Rect rect = new Rect();
                inflate.getWindowVisibleDisplayFrame(rect);
                int height = inflate.getRootView().getHeight();
                int i = height - (rect.bottom - rect.top);
                if (ChatConvListFragment.this.mHeightDiffHelper != i) {
                    ChatConvListFragment.this.mHeightDiffHelper = i;
                    Log.d(ChatConvListFragment.TAG, "ScreenHeight:" + height + ", Keyboard heightDiff:" + i);
                    if (i > ((int) (((float) height) * AlbusModelObject.PROBABLY_SOFT_KEYBOARD_HEIGHT_RATIO))) {
                        ChatConvListFragment.this.mBottomBar.onKeyboardEmoShowState(true);
                    } else {
                        ChatConvListFragment.this.mBottomBar.onKeyboardEmoShowState(false);
                    }
                }
            }
        });
        Log.d(TAG, "end of onCreateView " + TAG);
        return inflate;
    }

    public void onDestroy() {
        Log.d(TAG, "onDestroy");
        super.onDestroy();
        this.mCatfiz.destroy();
        this.mRootView = null;
    }

    public void onDestroyActionMode(ActionMode actionMode) {
        this.mAdapter.removeAllSelection();
    }

    public void onItemCheckedStateChanged(ActionMode actionMode, int i, long j, boolean z) {
        this.mCountSelected = getListView().getCheckedItemCount();
        if (z) {
            this.mAdapter.setNewSelection(i, z);
            actionMode.setTitle("" + this.mCountSelected);
            return;
        }
        this.mAdapter.removeSelection(i);
        actionMode.setTitle("" + this.mCountSelected);
    }

    public void onPause() {
        super.onPause();
        Log.d(TAG, "onPause");
    }

    public boolean onPrepareActionMode(ActionMode actionMode, Menu menu) {
        return false;
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        Log.d(TAG, "onResume");
        this.mCatfiz.start();
        if (!this.mbFirstEnter) {
            this.mCatfiz.chatFetchFriend(this.mFriend, new CheckChatUnreadCb(this));
        }
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    public boolean onSignalEventNewMessage(Signal signal, User user, int i, String str) {
        Log.d(TAG, "onSignalEventNewMessage: " + signal + ", " + i + ", " + str);
        if (this.mFriend != null) {
            switch (AnonymousClass14.$SwitchMap$com$catfiz$signal$Signal[Signal.values()[signal.ordinal()].ordinal()]) {
                case e.b /*1*/:
                    getAllData(false, true);
                    break;
                case e.c /*2*/:
                    getAllData(false, false);
                    break;
                case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                    checkIsTyping();
                    break;
            }
            if (user.getId() != null && !user.getId().isEmpty()) {
                if (this.mFriend.compareTo(user.getId()) == 0) {
                    switch (AnonymousClass14.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[i].ordinal()]) {
                        case e.b /*1*/:
                        case e.c /*2*/:
                            getAllData(false, true);
                            RingtonePlayer.play(getActivity().getApplicationContext());
                            break;
                        case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                        case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                        case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                        case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                        case SimpleLog.LOG_LEVEL_OFF /*7*/:
                        case Utils.FILE_TYPE_INSTALLER /*8*/:
                        case HTTP.HT /*9*/:
                        case HTTP.LF /*10*/:
                            this.mCatfiz.chatNotifyMessageRead(this.mFriend, null);
                            getAllData(false, true);
                            RingtonePlayer.play(getActivity().getApplicationContext());
                            break;
                        default:
                            break;
                    }
                }
                Log.d(TAG, "onSignalEventNewMessage: Not on this friend");
            } else {
                Log.e(TAG, "onSignalEventNewMessage: Invalid sender ???");
            }
        }
        return false;
    }

    public boolean onSignalUpdateProgress(Signal signal, String str, int i, int i2) {
        this.mAdapter.setUpdateProgress(str, i, i2);
        this.mAdapter.notifyDataSetChanged();
        return false;
    }

    public boolean onSignalUpdateProgress(Signal signal, Map map, Map map2) {
        this.mAdapter.setProgress(map, map2);
        this.mAdapter.notifyDataSetChanged();
        return false;
    }

    public void onStop() {
        super.onStop();
        Log.d(TAG, "onStop");
        this.mCatfiz.finish();
    }

    public void playStream(long j, String str, String str2) {
    }

    public void refreshData() {
        this.mAdapter.notifyDataSetChanged();
    }

    public void retryUploadMessage(Message message) {
        String str;
        Log.d(TAG, "Should retry send chat message");
        String imageFilePath = message.getImageFilePath();
        if (imageFilePath.isEmpty()) {
            imageFilePath = message.getVoiceFilePath();
        }
        String dataFilePath = imageFilePath.isEmpty() ? message.getDataFilePath() : imageFilePath;
        if (FileMetaInfo.isFileMetaInfoValid(message.getText())) {
            message.setText(FileMetaInfo.metaInfoBuilder(message.getText()).getCaption());
        }
        imageFilePath = "";
        switch (Utils.getFileTypeFromPath(dataFilePath)) {
            case e.b /*1*/:
                str = AlbusModelObject.DATA_TYPE_IMAGE;
                break;
            case e.c /*2*/:
            case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                str = AlbusModelObject.DATA_TYPE_VIDEO;
                break;
            default:
                str = ChunkStorage.DATA_TABLE_NAME;
                break;
        }
        Log.d(TAG, "Resend:" + str + " " + dataFilePath);
        this.mCatfiz.chatReSendAttachedMessage(new User(this.mFriend), message, dataFilePath, str, getActivity(), new Callback() {
            public void onError() {
                Log.d(ChatConvListFragment.TAG, "Error ReSend Attached Message!");
            }

            public void onSuccess() {
                Log.d(ChatConvListFragment.TAG, "Success ReSend Attached Message");
                ChatConvListFragment.this.getAllData(false, true);
            }
        });
    }

    public void saveChatConv(Intent intent) {
        try {
            this.mCatfiz.chatSaveConferenceMessages(this.mFriend, getActivity().getIntent().getStringExtra(CatfishDataStorage.NIC_NAME), FileUtils.getPath(getActivity(), intent.getData()), new Callback() {
                public void onError() {
                }

                public void onSuccess() {
                    AlbusUtils.setToastView(ChatConvListFragment.this.getActivity(), ChatConvListFragment.this.getString(R.string.savechat_success));
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            Log.e(TAG, "FAIL TO SAVE CONV");
        }
    }

    public void saveConversation() {
        AlbusUtils.setToastView(getActivity(), WriteMsgToExternalStorage.generateNote(getActivity(), "Message_" + this.mFriendName + "_" + this.mFriend, this.mMessages, this.mFriendName, false));
    }

    public void selectAttachedPhotoByCamera() {
        Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
        intent.putExtra("output", this.mFileUriHelper);
        startActivityForResult(intent, 4);
    }

    public void selectAttachedPhotoByFile() {
        try {
            startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("image/*"), 5);
        } catch (ActivityNotFoundException e) {
            AlbusUtils.setToastView(getActivity(), getString(R.string.file_manager_check));
        }
    }

    public void setListSelection(int i) {
        getListView().setSelection(i);
    }

    public void setListviewPosition(int i) {
        getListView().setSelection(i);
    }

    public void setSeekVideo(long j, int i) {
        for (Message message : this.mMessages) {
            if (message.getSequence() == j) {
                message.setSeek(i);
                break;
            }
        }
        this.mAdapter.notifyDataSetChanged();
    }

    public void shareFizzlink(long j, String str) {
        for (Message message : this.mMessages) {
            if (message.getSequence() == j) {
                message.getFizzlink().setLink(message.getSlink());
                Bundle bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 47);
                AlbusDialog.showDialog(47, new FizzlinkDialog(message), getActivity(), bundle, ((ChatGroupConvActivity) getActivity()).getSupportFragmentManager());
                return;
            }
        }
    }

    public void showItemLongClickDialog(Message message) {
        Bundle bundle = new Bundle();
        bundle.putString(ServerMessageDataStorage.MESSAGE, message.getText());
        bundle.putString(AlbusModelObject.FRIEND_ID, this.mFriend);
        bundle.putLong(ServerMessageDataStorage.SEQUENCE, message.getSequence());
        bundle.putInt(AlbusModelObject.DIALOG, 39);
        AlbusDialog.showDialog(39, new ChatViewDialog(message), getActivity(), bundle, getActivity().getSupportFragmentManager());
    }

    public void showMore() {
        getChatData(false, false, true);
    }

    public void streamThumbnailDownload(String str) {
        this.mCatfiz.getStreamThumbnailDownload(str, new StreamHasThumbnailCallback() {
            public void onError() {
            }

            public void onStreamHasThumbnail(String str, int i) {
                if (i == 1) {
                    Log.d(ChatConvListFragment.TAG, "thumbnail ready....: " + str);
                    ChatConvListFragment.this.getAllData(false, false);
                }
            }

            public void onSuccess() {
            }
        });
        Log.d(TAG, "download thumbnail");
    }
}
