package com.albus.fragment;

import android.app.ActivityManager.TaskDescription;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.ListFragment;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.TextView;
import com.albus.activity.ChatGroupConvActivity;
import com.albus.activity.CustomActionBarPageActivity;
import com.albus.activity.ProfilesFriendActivity;
import com.albus.adapter.ContactReceivedAdapter;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.AlbusDialog.OnAddButtonListener;
import com.albus.dialog.AlbusDialogInterface;
import com.albus.media.ImageCache.ImageCacheParams;
import com.albus.media.UserPhotoLoader;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Callback.UserFetchFriendsCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.localstorage.ChunkStorage;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishService;
import com.catfiz.signal.Signal;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.protocol.HTTP;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class ContactReceiveFragment extends ListFragment implements OnClickListener, ICatfiz {
    private static final String TAG = "ContactReceiveFragment";
    private ContactReceivedAdapter mAdapter = null;
    private Button mBtnAddAll = null;
    private Catfiz mCatfiz = null;
    private String mContact = null;
    private List mContacts = null;
    private ImageButton mIbHome = null;
    private UserPhotoLoader mUserPhotoLoader = null;

    class AddDialog implements AlbusDialogInterface {
        private AddDialog() {
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            AlbusDialog.setOnAddButtonClicked(new OnAddButtonListener() {
                public void onAddButtonClicked(String str) {
                    ((CustomActionBarPageActivity) ContactReceiveFragment.this.getActivity()).addFriend(str);
                    ContactReceiveFragment.this.mAdapter.notifyDataSetChanged();
                }
            });
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    class ContactReceiveDialog implements AlbusDialogInterface {
        private User mUser;

        public ContactReceiveDialog(User user) {
            this.mUser = user;
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, final DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            TextView textView = (TextView) view.findViewById(R.id.tv_menu_title);
            TextView textView2 = (TextView) view.findViewById(R.id.tv_menu_profile);
            TextView textView3 = (TextView) view.findViewById(R.id.tv_menu_chat);
            TextView textView4 = (TextView) view.findViewById(R.id.tv_menu_set_admin);
            ((TextView) view.findViewById(R.id.tv_menu_remove_member)).setVisibility(8);
            textView4.setVisibility(8);
            textView.setText(this.mUser.getName());
            textView2.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    dialogFragment.dismiss();
                    User matchFriendData = Catfiz.matchFriendData(ContactReceiveDialog.this.mUser.getId());
                    Log.d(ContactReceiveFragment.TAG, "goToProfile:" + matchFriendData.getName() + "," + matchFriendData.getStatusSequence() + "," + matchFriendData.getStatusdate());
                    Intent intent = new Intent(ContactReceiveFragment.this.getActivity(), ProfilesFriendActivity.class);
                    intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, matchFriendData.getId());
                    intent.putExtra(CatfishDataStorage.NIC_NAME, matchFriendData.getName());
                    intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, matchFriendData.getStatusSequence());
                    intent.putExtra(AlbusModelObject.STATUS_LIKE, matchFriendData.getStatusLike());
                    intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, matchFriendData.isMeLikeThisStatus());
                    intent.putExtra(HTTP.IDENTITY_CODING, 43);
                    ContactReceiveFragment.this.startActivity(intent);
                }
            });
            textView3.setOnClickListener(new OnClickListener() {
                public void onClick(View view) {
                    dialogFragment.dismiss();
                    Intent intent = new Intent(ContactReceiveFragment.this.getActivity(), ChatGroupConvActivity.class);
                    intent.putExtra(AlbusModelObject.PAGE, 1);
                    intent.putExtra(HTTP.IDENTITY_CODING, 14);
                    intent.putExtra(CatfishDataStorage.NIC_NAME, ContactReceiveDialog.this.mUser.getName());
                    intent.putExtra(AlbusModelObject.FRIEND_ID, ContactReceiveDialog.this.mUser.getId());
                    ContactReceiveFragment.this.startActivity(intent);
                }
            });
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    public class FetchContactOnFriendsCb implements UserFetchFriendsCallback {
        private WeakReference mThisFragmentRef;

        public FetchContactOnFriendsCb(ListFragment listFragment) {
            this.mThisFragmentRef = new WeakReference(listFragment);
        }

        public void onData(List list) {
            ContactReceiveFragment contactReceiveFragment = (ContactReceiveFragment) this.mThisFragmentRef.get();
            if (contactReceiveFragment != null) {
                try {
                    JSONArray jSONArray = new JSONArray(contactReceiveFragment.mContact);
                    Object obj = null;
                    for (int i = 0; i < jSONArray.length(); i++) {
                        User user = new User();
                        JSONObject jSONObject = jSONArray.getJSONObject(i);
                        String string = jSONObject.getString(CatfishDataStorage.NIC_NAME);
                        String string2 = jSONObject.getString(CatfishRESTAPI.CFCOMPACT_STICKERID);
                        Log.d(ContactReceiveFragment.TAG, "contact : " + string + "," + string2);
                        user.setName(string);
                        user.setId(string2);
                        if (string2.equals(CatfishService.getUserPIN())) {
                            user.setIsFriend(true);
                            contactReceiveFragment.mContacts.add(user);
                        } else {
                            int i2 = 0;
                            while (i2 < list.size()) {
                                if (((User) list.get(i2)).getId().equals(string2)) {
                                    user.setIsFriend(true);
                                    obj = null;
                                    break;
                                }
                                i2++;
                                int i3 = 1;
                            }
                            contactReceiveFragment.mContacts.add(user);
                        }
                    }
                    contactReceiveFragment.mAdapter.notifyDataSetChanged();
                    if (obj != null) {
                        contactReceiveFragment.mBtnAddAll.setEnabled(true);
                        contactReceiveFragment.mBtnAddAll.setTextColor(contactReceiveFragment.getActivity().getResources().getColor(R.color.yellow));
                        return;
                    }
                    contactReceiveFragment.mBtnAddAll.setEnabled(false);
                    contactReceiveFragment.mBtnAddAll.setTextColor(contactReceiveFragment.getActivity().getResources().getColor(R.color.yellow54));
                } catch (JSONException e) {
                    Log.d(ContactReceiveFragment.TAG, e.getMessage());
                    e.printStackTrace();
                }
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    public static ContactReceiveFragment newInstance(Bundle bundle) {
        ContactReceiveFragment contactReceiveFragment = new ContactReceiveFragment();
        contactReceiveFragment.mContact = bundle.getString(ChunkStorage.DATA_TABLE_NAME);
        return contactReceiveFragment;
    }

    public void onActivityCreated(Bundle bundle) {
        super.onActivityCreated(bundle);
        getListView().setOnItemClickListener(new OnItemClickListener() {
            public void onItemClick(AdapterView adapterView, View view, int i, long j) {
                if (((User) ContactReceiveFragment.this.mContacts.get(i)).getId().equals(CatfishService.getUserPIN())) {
                    AlbusUtils.setToastView(ContactReceiveFragment.this.getActivity(), ContactReceiveFragment.this.getActivity().getString(R.string.your_self));
                } else if (((User) ContactReceiveFragment.this.mContacts.get(i)).isMyFriend()) {
                    r1 = new Bundle();
                    r1.putInt(AlbusModelObject.DIALOG, 33);
                    AlbusDialog.showDialog(33, new ContactReceiveDialog((User) ContactReceiveFragment.this.mContacts.get(i)), ContactReceiveFragment.this.getActivity(), r1, ((CustomActionBarPageActivity) ContactReceiveFragment.this.getActivity()).getSupportFragmentManager());
                } else {
                    r1 = new Bundle();
                    r1.putString(CatfishDataStorage.NIC_NAME, ((User) ContactReceiveFragment.this.mContacts.get(i)).getName());
                    r1.putString(CatfishRESTAPI.CFCOMPACT_STICKERID, ((User) ContactReceiveFragment.this.mContacts.get(i)).getId());
                    r1.putInt(AlbusModelObject.DIALOG, 9);
                    AlbusDialog.showDialog(9, new AddDialog(), ContactReceiveFragment.this.getActivity(), r1, ((CustomActionBarPageActivity) ContactReceiveFragment.this.getActivity()).getSupportFragmentManager());
                }
            }
        });
    }

    public void onCatfizStarted() {
        Log.d(TAG, "Data:" + this.mContact);
        this.mCatfiz.userFetchFriends(new FetchContactOnFriendsCb(this));
    }

    public void onCatfizStopped() {
    }

    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.btn_action:
                for (int i = 0; i < this.mContacts.size(); i++) {
                    User user = (User) this.mContacts.get(i);
                    if (!user.isMyFriend()) {
                        this.mCatfiz.userRequestAddFriend(user.toString(), new Callback() {
                            public void onError() {
                            }

                            public void onSuccess() {
                            }
                        });
                    }
                }
                AlbusUtils.setToastView(getActivity(), getString(R.string.addall_contact));
                ((CustomActionBarPageActivity) getActivity()).finish();
                return;
            case R.id.ib_back:
                getActivity().finish();
                return;
            default:
                return;
        }
    }

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        Log.d(TAG, "onCreate ContactReceiveFragment");
        this.mCatfiz = new Catfiz(getActivity(), this);
        this.mContacts = new ArrayList();
        ImageCacheParams imageCacheParams = new ImageCacheParams("");
        imageCacheParams.memCacheSize = (AccessibilityNodeInfoCompat.ACTION_DISMISS * Utils.getMemoryClass(getActivity())) / 3;
        imageCacheParams.diskCacheEnabled = false;
        this.mUserPhotoLoader = new UserPhotoLoader(getActivity(), imageCacheParams);
        this.mAdapter = new ContactReceivedAdapter(getActivity(), this.mContacts, this.mUserPhotoLoader);
        setListAdapter(this.mAdapter);
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        View inflate = layoutInflater.inflate(R.layout.fragment_add_contacts, viewGroup, false);
        if (Utils.hasLollipop()) {
            getActivity().setTaskDescription(new TaskDescription(null, null, getResources().getColor(R.color.red)));
            Window window = getActivity().getWindow();
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.clearFlags(67108864);
            window.setStatusBarColor(getResources().getColor(R.color.red2));
        }
        this.mBtnAddAll = (Button) inflate.findViewById(R.id.btn_action);
        this.mIbHome = (ImageButton) inflate.findViewById(R.id.ib_back);
        this.mIbHome.setOnClickListener(this);
        this.mBtnAddAll.setOnClickListener(this);
        return inflate;
    }

    public void onDestroy() {
        super.onDestroy();
        this.mCatfiz.destroy();
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.start();
        }
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    public void onStop() {
        super.onStop();
        this.mCatfiz.finish();
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.stop();
        }
    }
}
