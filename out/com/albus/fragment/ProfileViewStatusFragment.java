package com.albus.fragment;

import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.text.Editable;
import android.text.InputFilter;
import android.text.InputFilter.LengthFilter;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.TextView;
import com.albus.activity.CommentActivity;
import com.albus.activity.CustomActionBarPageActivity;
import com.albus.activity.ProfilesActivity;
import com.albus.imagespan.SmiledText;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.view.ChatEditText;
import com.albus.view.ChatsBottomBarView;
import com.albus.view.ChatsBottomBarView.onEmojiPanelComponentListener;
import com.albus.view.ChatsBottomBarView.onPanelEmojiAnimation;
import com.albus.view.CustomActionbarView;
import com.albus.view.CustomActionbarView.OnActionbarButtonClicked;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Callback.UserFetchProfileCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.Constant;
import com.catfiz.base.ICatfiz;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishService;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.setting.CatfishPreferences;
import com.catfiz.signal.Signal;
import com.catfiz.util.Log;
import java.lang.ref.WeakReference;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.apache.http.HttpStatus;
import org.apache.http.protocol.HTTP;

public class ProfileViewStatusFragment extends Fragment implements ICatfiz {
    private static final String TAG = ProfileViewStatusFragment.class.getSimpleName();
    private CustomActionbarView mActionbar = null;
    public ChatsBottomBarView mBottomBar = null;
    private Catfiz mCatfiz = null;
    private ChatEditText mEtStatus = null;
    private ImageButton mIbEmoticon = null;
    private String mSetDate = null;
    private String mSetStatus = null;
    private TextView mTvCount = null;
    private User mUser = null;

    public class FetchProfileBackToCommentCb implements UserFetchProfileCallback {
        private WeakReference mThisFragmentRef;

        public FetchProfileBackToCommentCb(Fragment fragment) {
            this.mThisFragmentRef = new WeakReference(fragment);
        }

        public void onData(User user) {
            ProfileViewStatusFragment profileViewStatusFragment = (ProfileViewStatusFragment) this.mThisFragmentRef.get();
            if (profileViewStatusFragment != null) {
                profileViewStatusFragment.getActivity().finish();
                CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
                Intent intent = new Intent(profileViewStatusFragment.getActivity(), CommentActivity.class);
                intent.putExtra(CatfishDataStorage.NIC_NAME, user.getName());
                intent.putExtra(FriendListDataStorage.STATUS, user.getStatus());
                intent.putExtra(AlbusModelObject.DATE, user.getStatusdate());
                intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, CatfishService.getUserPIN());
                intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, catfishPreferences.getLong(CatfishService.USERSTATUS_SEQ_PREF, 0));
                intent.putExtra(AlbusModelObject.STATUS_LIKE, catfishPreferences.getInt(FriendListDataStorage.LIKESTATUS, 0));
                intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, catfishPreferences.getInt(Constant.IS_LIKE_MY_STATUS, 0));
                if (profileViewStatusFragment.getActivity().getIntent().getIntExtra(HTTP.IDENTITY_CODING, -1) == 31) {
                    intent.putExtra(HTTP.IDENTITY_CODING, 0);
                }
                profileViewStatusFragment.getActivity().startActivity(intent.setFlags(335544320));
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    public class FetchStatusOnProfileCb implements UserFetchProfileCallback {
        private WeakReference mThisFragmentRef;

        public FetchStatusOnProfileCb(Fragment fragment) {
            this.mThisFragmentRef = new WeakReference(fragment);
        }

        public void onData(User user) {
            ProfileViewStatusFragment profileViewStatusFragment = (ProfileViewStatusFragment) this.mThisFragmentRef.get();
            if (profileViewStatusFragment != null) {
                profileViewStatusFragment.mUser = user;
                profileViewStatusFragment.mSetStatus = profileViewStatusFragment.mUser.getStatus();
                profileViewStatusFragment.mEtStatus.setText(SmiledText.getSmiledText(profileViewStatusFragment.getActivity(), user.getStatus(), profileViewStatusFragment.mEtStatus));
                profileViewStatusFragment.mEtStatus.selectAll();
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    public static ProfileViewStatusFragment newInstance() {
        return new ProfileViewStatusFragment();
    }

    public void backHome() {
        int intExtra = getActivity().getIntent().getIntExtra(HTTP.IDENTITY_CODING, -1);
        if (intExtra == 3) {
            startActivity(new Intent(getActivity(), ProfilesActivity.class).setFlags(335544320));
        } else if (intExtra == 0) {
            getActivity().finish();
        } else {
            this.mCatfiz.userFetchProfile(new FetchProfileBackToCommentCb(this));
        }
    }

    public void onCatfizStarted() {
        this.mCatfiz.userFetchProfile(new FetchStatusOnProfileCb(this));
    }

    public void onCatfizStopped() {
    }

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        this.mCatfiz = new Catfiz(getActivity(), this);
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        View inflate = layoutInflater.inflate(R.layout.fragment_profile_status_view, viewGroup, false);
        this.mActionbar = (CustomActionbarView) inflate.findViewById(R.id.custom_actionbar);
        this.mBottomBar = (ChatsBottomBarView) inflate.findViewById(R.id.cv_bottom_bar);
        this.mEtStatus = (ChatEditText) inflate.findViewById(R.id.et_value);
        this.mEtStatus.setSelectAllOnFocus(true);
        this.mTvCount = (TextView) inflate.findViewById(R.id.tv_count);
        this.mTvCount.setText("0/500");
        this.mEtStatus.setFilters(new InputFilter[]{new LengthFilter(HttpStatus.SC_INTERNAL_SERVER_ERROR)});
        this.mActionbar.setButtonUpdate();
        this.mActionbar.setOnActionBtnDeactivated();
        this.mActionbar.setOnActionbarButtonClickListener(new OnActionbarButtonClicked() {
            public void onBtnActionActiveClicked() {
                if (AlbusUtils.isNetworkAvailable(ProfileViewStatusFragment.this.getActivity())) {
                    ProfileViewStatusFragment.this.mSetStatus = AlbusUtils.removeUnecessaryHtmlTag(ProfileViewStatusFragment.this.mEtStatus.getText().toString());
                    final CatfishPreferences catfishPreferences = CatfishService.getCatfishPreferences();
                    catfishPreferences.edit().putInt(Constant.IS_LIKE_MY_STATUS, 0).commit();
                    new CatfishDataStorage(ProfileViewStatusFragment.this.getActivity()).resetUnreadStatusCommentCount();
                    catfishPreferences.edit().putInt(Constant.PREV_NOTIF_LIKE, catfishPreferences.getInt(FriendListDataStorage.LIKESTATUS, 0)).commit();
                    ProfileViewStatusFragment.this.mSetDate = new SimpleDateFormat("HH:mm, dd MMM yyyy").format(new Date());
                    Log.d(ProfileViewStatusFragment.TAG, "value status baru : " + ProfileViewStatusFragment.this.mSetStatus);
                    Log.d(ProfileViewStatusFragment.TAG, "value date baru: " + ProfileViewStatusFragment.this.mSetDate);
                    ProfileViewStatusFragment.this.mCatfiz.userProfileUpdate(ProfileViewStatusFragment.this.mUser, ProfileViewStatusFragment.this.mSetStatus, ProfileViewStatusFragment.this.mSetDate, new Callback() {
                        public void onError() {
                            ((CustomActionBarPageActivity) ProfileViewStatusFragment.this.getActivity()).dismissKeyboard(ProfileViewStatusFragment.this.mEtStatus);
                        }

                        public void onSuccess() {
                            catfishPreferences.edit().putInt(FriendListDataStorage.LIKESTATUS, 0).commit();
                            catfishPreferences.edit().putInt(Constant.PREV_NOTIF_LIKE, 0).commit();
                            AlbusUtils.setToastView(ProfileViewStatusFragment.this.getActivity(), ProfileViewStatusFragment.this.getString(R.string.update_status_success));
                            ProfileViewStatusFragment.this.backHome();
                            ((CustomActionBarPageActivity) ProfileViewStatusFragment.this.getActivity()).dismissKeyboard(ProfileViewStatusFragment.this.mEtStatus);
                        }
                    });
                    return;
                }
                AlbusUtils.setToastView(ProfileViewStatusFragment.this.getActivity(), ProfileViewStatusFragment.this.getString(R.string.check_connection));
            }

            public void onBtnCloseClicked() {
                ProfileViewStatusFragment.this.backHome();
                ((CustomActionBarPageActivity) ProfileViewStatusFragment.this.getActivity()).dismissKeyboard(ProfileViewStatusFragment.this.mEtStatus);
            }
        });
        this.mBottomBar.setEditProfileStatus(true, this.mEtStatus);
        this.mBottomBar.setOnEmojiPanelAnimation(new onPanelEmojiAnimation() {
            public void onPanelDown() {
            }

            public void onPanelDownFinished() {
            }

            public void onPanelUp(View view) {
                ((CustomActionBarPageActivity) ProfileViewStatusFragment.this.getActivity()).dismissKeyboard(view);
            }

            public void onPanelUpFinished(View view) {
            }
        });
        this.mBottomBar.setOnEmojiPanelComponentListener(new onEmojiPanelComponentListener() {
            public void onBtnKeyboardPressed(View view) {
                ((CustomActionBarPageActivity) ProfileViewStatusFragment.this.getActivity()).showKeyboard(ProfileViewStatusFragment.this.mEtStatus);
            }

            public void onBtnSendPressed(String str) {
            }

            public void onBtnStickerActive(ImageButton imageButton, boolean z) {
            }

            public void onEditTextFocusChanged() {
            }
        });
        this.mEtStatus.addTextChangedListener(new TextWatcher() {
            public void afterTextChanged(Editable editable) {
            }

            public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
            }

            public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                int length = ProfileViewStatusFragment.this.mEtStatus.getText().length();
                ProfileViewStatusFragment.this.mTvCount.setText(length + "/" + HttpStatus.SC_INTERNAL_SERVER_ERROR);
                if (!ProfileViewStatusFragment.this.mEtStatus.isFocused() || length < HttpStatus.SC_INTERNAL_SERVER_ERROR) {
                    String trim = AlbusUtils.removeUnecessaryHtmlTag(ProfileViewStatusFragment.this.mEtStatus.getText().toString()).trim();
                    if (trim.isEmpty() || trim.equals(ProfileViewStatusFragment.this.mSetStatus)) {
                        ProfileViewStatusFragment.this.mActionbar.setOnActionBtnDeactivated();
                        return;
                    } else {
                        ProfileViewStatusFragment.this.mActionbar.setOnActionBtnActivated();
                        return;
                    }
                }
                AlbusUtils.setToastView(ProfileViewStatusFragment.this.getActivity(), ProfileViewStatusFragment.this.getString(R.string.reach_max_char_status).replace("[count]", "500"));
            }
        });
        this.mEtStatus.setOnFocusChangeListener(new OnFocusChangeListener() {
            public void onFocusChange(View view, boolean z) {
                ProfileViewStatusFragment.this.mBottomBar.customEdittextFocusChange(z);
                if (z) {
                    ((CustomActionBarPageActivity) ProfileViewStatusFragment.this.getActivity()).showKeyboard(ProfileViewStatusFragment.this.mEtStatus);
                }
            }
        });
        this.mEtStatus.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                ProfileViewStatusFragment.this.mBottomBar.closeEmo();
            }
        });
        return inflate;
    }

    public void onDestroy() {
        super.onDestroy();
        this.mCatfiz.destroy();
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    public void onStop() {
        super.onStop();
        this.mCatfiz.finish();
    }
}
