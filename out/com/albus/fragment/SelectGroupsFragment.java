package com.albus.fragment;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.ListFragment;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;
import com.albus.activity.CustomActionBarPageActivity;
import com.albus.adapter.SelectGroupsAdapter;
import com.albus.media.GroupPhotoLoader;
import com.albus.media.ImageCache;
import com.albus.media.ImageCache.ImageCacheParams;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.view.CustomActionbarView;
import com.albus.view.CustomActionbarView.OnActionbarButtonClicked;
import com.albus.view.CustomActionbarView.OnActionbarMenuButtonClicked;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Callback.UserFetchGroupsCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.localstorage.ChunkStorage;
import com.catfiz.model.Group;
import com.catfiz.model.Message;
import com.catfiz.pool.PoolDataUploadExecutor.PoolDataType;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.signal.Signal;
import com.catfiz.util.Log;
import com.catfiz.util.MediaFilePath;
import com.catfiz.util.MimeTypeParser;
import com.catfiz.util.Utils;
import java.io.File;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import org.apache.http.cookie.ClientCookie;

public class SelectGroupsFragment extends ListFragment implements ICatfiz {
    private static final String TAG = "SelectGroupsFragment";
    private CustomActionbarView mActionbar = null;
    private SelectGroupsAdapter mAdapter = null;
    private Catfiz mCatfiz = null;
    private EditText mEtSearch = null;
    private GroupPhotoLoader mGroupPhotoLoader = null;
    private List mGroups = null;
    private List mGroupsSearchHelper = null;
    private ImageButton mIbClear = null;
    private ImageButton mIbSelectAll = null;
    private int mIdentity = -1;
    private boolean mIsSelected = false;
    private int mPage = -1;
    private RelativeLayout mRlDfView = null;
    private List mSelectedGroup = null;
    private String mSharedText = null;
    private TextView mTvSumFriend;
    private TextView mTvTitle;
    private String mType = null;
    private Uri mUri = null;

    public class FetchGroupsCb implements UserFetchGroupsCallback {
        private WeakReference mThisFragmentRef;

        public FetchGroupsCb(ListFragment listFragment) {
            this.mThisFragmentRef = new WeakReference(listFragment);
        }

        public void onData(List list) {
            SelectGroupsFragment selectGroupsFragment = (SelectGroupsFragment) this.mThisFragmentRef.get();
            if (selectGroupsFragment != null) {
                selectGroupsFragment.mGroups.clear();
                if (list.size() > 0) {
                    selectGroupsFragment.setDfView(false);
                    for (Group add : list) {
                        selectGroupsFragment.mGroups.add(add);
                    }
                    selectGroupsFragment.mGroupsSearchHelper.clear();
                    selectGroupsFragment.mGroupsSearchHelper.addAll(selectGroupsFragment.mGroups);
                }
                selectGroupsFragment.checkSelectedFriend();
                selectGroupsFragment.activeSelectAllButton();
                selectGroupsFragment.mAdapter.notifyDataSetChanged();
                if (selectGroupsFragment.mGroups.size() > 0) {
                    selectGroupsFragment.setDfView(false);
                } else {
                    selectGroupsFragment.setDfView(true);
                }
                selectGroupsFragment.mTvSumFriend.setText("" + list.size());
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    private void activeSelectAllButton() {
    }

    private void checkSelectedFriend() {
        if (this.mSelectedGroup.size() > 0) {
            for (Group group : this.mSelectedGroup) {
                for (Group group2 : this.mGroups) {
                    if (group2.getGroupID().equals(group.getGroupID())) {
                        group2.setSelected(true);
                        break;
                    }
                }
            }
        }
    }

    public static SelectGroupsFragment newInstance(Bundle bundle) {
        SelectGroupsFragment selectGroupsFragment = new SelectGroupsFragment();
        selectGroupsFragment.mUri = (Uri) bundle.getParcelable(ChunkStorage.DATA_TABLE_NAME);
        selectGroupsFragment.mType = bundle.getString(MimeTypeParser.TAG_TYPE);
        selectGroupsFragment.mSharedText = bundle.getString(AlbusModelObject.TEXT);
        return selectGroupsFragment;
    }

    private void sendViaExternalAppsToToGroup() {
        Message message = new Message();
        if (this.mUri != null) {
            int ordinal;
            if (this.mType.startsWith("video/")) {
                ordinal = PoolDataType.VIDEO.ordinal();
            } else if (this.mType.startsWith("music/") || this.mType.startsWith("audio/")) {
                ordinal = PoolDataType.VIDEO.ordinal();
            } else {
                ordinal = PoolDataType.FILE.ordinal();
                message.setAttacType(1);
            }
            String path = MediaFilePath.getPath(getActivity(), this.mUri);
            if (new File(path).exists()) {
                for (Group groupSendAttachedMessage : this.mSelectedGroup) {
                    this.mCatfiz.groupSendAttachedMessage(groupSendAttachedMessage, message, path, ordinal, new Callback() {
                        public void onError() {
                            Log.d(SelectGroupsFragment.TAG, "Error Send Attached GroupMessage");
                            SelectGroupsFragment.this.getActivity().finish();
                        }

                        public void onSuccess() {
                            SelectGroupsFragment.this.getActivity().finish();
                        }
                    });
                }
                return;
            }
            Log.e(TAG, "Operation not supported");
            AlbusUtils.setToastView(getActivity(), getString(R.string.error_generic));
            getActivity().finish();
        } else if (this.mSharedText != null) {
            message.setText(this.mSharedText);
            for (Group groupSendMessage : this.mSelectedGroup) {
                this.mCatfiz.groupSendMessage(groupSendMessage, message, new Callback() {
                    public void onError() {
                        Log.d(SelectGroupsFragment.TAG, "Error Send Attached GroupMessage");
                        SelectGroupsFragment.this.getActivity().finish();
                    }

                    public void onSuccess() {
                        SelectGroupsFragment.this.getActivity().finish();
                    }
                });
            }
        } else {
            getActivity().finish();
        }
    }

    private void shareFizzlinkToGroup() {
        Intent intent = getActivity().getIntent();
        if (intent != null) {
            ArrayList arrayList = new ArrayList();
            for (Group groupID : this.mSelectedGroup) {
                arrayList.add(groupID.getGroupID());
            }
            String stringExtra = intent.getStringExtra("android.intent.extra.TEXT");
            intent.getBooleanExtra(ServerMessageDataStorage.SLINK, false);
            String stringExtra2 = intent.getStringExtra("slinkuri");
            if (stringExtra2 != null && !stringExtra2.isEmpty()) {
                Log.d(TAG, "slinkuri: [" + stringExtra2 + "]");
                this.mCatfiz.shareFizzlinkToGroup(arrayList, stringExtra, new Callback() {
                    public void onError() {
                        AlbusUtils.setToastView(SelectGroupsFragment.this.getActivity(), "Fail Share Fizzlink");
                    }

                    public void onSuccess() {
                        AlbusUtils.setToastView(SelectGroupsFragment.this.getActivity(), "Success Share Fizzlink");
                    }
                });
                getActivity().setResult(-1);
                getActivity().finish();
            } else if (stringExtra == null || stringExtra.isEmpty()) {
                AlbusUtils.setToastView(getActivity(), "Fail Share Fizzlink");
                getActivity().setResult(-1);
                getActivity().finish();
            } else {
                Log.d(TAG, "msg: [" + stringExtra + "]");
                this.mCatfiz.shareAndSaveFizzlinkToDBGroup(arrayList, stringExtra, getActivity(), new Callback() {
                    public void onError() {
                        AlbusUtils.setToastView(SelectGroupsFragment.this.getActivity(), "Fail to Share and Save Fizzlink");
                    }

                    public void onSuccess() {
                        AlbusUtils.setToastView(SelectGroupsFragment.this.getActivity(), "Success Share and Save Fizzlink");
                    }
                });
                getActivity().setResult(-1);
                getActivity().finish();
            }
        }
    }

    private void shareQRToPools() {
        final String stringExtra = getActivity().getIntent().getStringExtra(ClientCookie.PATH_ATTR);
        Message message = new Message("");
        for (Group groupSendAttachedMessage : this.mSelectedGroup) {
            this.mCatfiz.groupSendAttachedMessage(groupSendAttachedMessage, message, stringExtra, PoolDataType.IMAGE.ordinal(), new Callback() {
                public void onError() {
                    Log.d(SelectGroupsFragment.TAG, "Error Send Attached GroupMessage");
                    SelectGroupsFragment.this.getActivity().finish();
                }

                public void onSuccess() {
                    Log.d(SelectGroupsFragment.TAG, "Success Send Attached GroupMessage:" + stringExtra);
                    AlbusUtils.setToastView(SelectGroupsFragment.this.getActivity(), SelectGroupsFragment.this.getString(R.string.share_qrcode_success));
                    SelectGroupsFragment.this.getActivity().finish();
                }
            });
        }
    }

    public void activateBtnFunction(List list) {
        this.mSelectedGroup.clear();
        if (list == null || list.size() <= 0) {
            this.mActionbar.setOnActionBtnDeactivated();
            this.mActionbar.setTitle("");
            return;
        }
        this.mActionbar.setOnActionBtnActivated();
        this.mActionbar.setTitle("" + list.size());
        this.mSelectedGroup.addAll(list);
    }

    public void getAllData() {
        this.mCatfiz.userFetchGroups(new FetchGroupsCb(this));
    }

    public void limitListView(String str, boolean z) {
        if (str.length() > 0) {
            if (z) {
                this.mGroups.clear();
                this.mGroups.addAll(this.mGroupsSearchHelper);
            }
            Collection arrayList = new ArrayList();
            for (Group group : this.mGroups) {
                if (group != null) {
                    String name = group.getName();
                    if (!(name == null || name.isEmpty() || !name.toLowerCase().contains(str.toLowerCase()))) {
                        arrayList.add(group);
                    }
                }
            }
            this.mGroups.clear();
            this.mGroups.addAll(arrayList);
            checkSelectedFriend();
            activeSelectAllButton();
            this.mAdapter.notifyDataSetChanged();
            return;
        }
        getAllData();
    }

    public void onActivityCreated(Bundle bundle) {
        super.onActivityCreated(bundle);
        this.mGroupPhotoLoader = new GroupPhotoLoader(getActivity());
        ImageCacheParams imageCacheParams = new ImageCacheParams("");
        imageCacheParams.memCacheSize = Utils.getMaxMemory() / 8;
        imageCacheParams.diskCacheEnabled = false;
        this.mGroupPhotoLoader.setImageCache(ImageCache.findOrCreateCache(getActivity(), imageCacheParams));
        getListView().setChoiceMode(2);
        View inflate = getActivity().getLayoutInflater().inflate(R.layout.header_list, null, false);
        View findViewById = inflate.findViewById(R.id.view_devide);
        this.mTvSumFriend = (TextView) inflate.findViewById(R.id.tv_sum);
        this.mTvTitle = (TextView) inflate.findViewById(R.id.tv_title);
        this.mTvSumFriend.setVisibility(0);
        this.mTvTitle.setVisibility(0);
        findViewById.setVisibility(8);
        getListView().addHeaderView(inflate, null, false);
        this.mAdapter = new SelectGroupsAdapter(getActivity(), this.mGroups, this.mGroupPhotoLoader);
        setListAdapter(this.mAdapter);
    }

    public void onCatfizStarted() {
        getAllData();
    }

    public void onCatfizStopped() {
    }

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        this.mCatfiz = new Catfiz(getActivity(), this);
        this.mPage = ((CustomActionBarPageActivity) getActivity()).getPage();
        this.mIdentity = ((CustomActionBarPageActivity) getActivity()).getIdentity();
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        View inflate = layoutInflater.inflate(R.layout.fragment_select_friends, viewGroup, false);
        this.mIbClear = (ImageButton) inflate.findViewById(R.id.ib_clear);
        this.mEtSearch = (EditText) inflate.findViewById(R.id.et_search);
        this.mRlDfView = (RelativeLayout) inflate.findViewById(R.id.rl_df_content);
        this.mActionbar = (CustomActionbarView) inflate.findViewById(R.id.custom_actionbar);
        this.mActionbar.setOnActionbarButtonClickListener(new OnActionbarButtonClicked() {
            public void onBtnActionActiveClicked() {
                switch (SelectGroupsFragment.this.mIdentity) {
                    case R.styleable.Theme_dialogTheme /*42*/:
                        SelectGroupsFragment.this.shareQRToPools();
                        return;
                    case R.styleable.Theme_actionButtonStyle /*49*/:
                        SelectGroupsFragment.this.shareFizzlinkToGroup();
                        return;
                    case R.styleable.Theme_dividerHorizontal /*56*/:
                        SelectGroupsFragment.this.sendViaExternalAppsToToGroup();
                        return;
                    default:
                        return;
                }
            }

            public void onBtnCloseClicked() {
                SelectGroupsFragment.this.getActivity().finish();
            }
        });
        this.mActionbar.setOnActionbarMenuButtonClickListener(new OnActionbarMenuButtonClicked() {
            public void onBtnCategoryClicked() {
            }

            public void onBtnSelectAllClicked() {
                if (SelectGroupsFragment.this.mIsSelected) {
                    SelectGroupsFragment.this.mAdapter.removeAllSelected();
                    SelectGroupsFragment.this.mIsSelected = false;
                    return;
                }
                SelectGroupsFragment.this.mAdapter.setAllSelected();
                SelectGroupsFragment.this.mIsSelected = true;
            }
        });
        this.mIbSelectAll = (ImageButton) this.mActionbar.findViewById(R.id.ib_select);
        if (this.mPage == 41) {
            this.mActionbar.setButtonSend();
        }
        if (this.mIdentity == 56) {
            this.mActionbar.setButtonSend();
        }
        Log.d(TAG, "Please DISABLE select All button, It's HURTS");
        this.mActionbar.setSelectAllButton(false);
        this.mEtSearch.requestFocus();
        this.mIbClear.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                SelectGroupsFragment.this.mEtSearch.setText("");
                SelectGroupsFragment.this.mEtSearch.clearFocus();
            }
        });
        this.mGroups = new ArrayList();
        this.mGroupsSearchHelper = new ArrayList();
        this.mSelectedGroup = new ArrayList();
        this.mEtSearch.requestFocus();
        this.mEtSearch.addTextChangedListener(new TextWatcher() {
            public void afterTextChanged(Editable editable) {
            }

            public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
            }

            public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                String obj = SelectGroupsFragment.this.mEtSearch.getText().toString();
                boolean z = i3 == 0 || i2 > i3;
                SelectGroupsFragment.this.limitListView(obj, z);
            }
        });
        this.mEtSearch.setOnEditorActionListener(new OnEditorActionListener() {
            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
                if (keyEvent != null && keyEvent.getAction() != 0) {
                    return false;
                }
                if ((keyEvent != null && i != 6 && keyEvent.getKeyCode() != 66) || keyEvent == null || keyEvent.isShiftPressed()) {
                    return false;
                }
                SelectGroupsFragment.this.mEtSearch.clearFocus();
                return true;
            }
        });
        return inflate;
    }

    public void onDestroy() {
        super.onDestroy();
        this.mCatfiz.destroy();
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
        if (this.mCatfiz.isCatfizStarted()) {
            limitListView(this.mEtSearch.getText().toString(), false);
        }
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    public void onStop() {
        super.onStop();
        this.mCatfiz.finish();
    }

    public void setDfView(boolean z) {
        if (z) {
            this.mRlDfView.setVisibility(0);
        } else {
            this.mRlDfView.setVisibility(8);
        }
    }

    public void setSelect() {
        this.mIsSelected = false;
    }

    public void setSelectAll() {
        this.mIsSelected = false;
        this.mActionbar.setTitle("" + this.mSelectedGroup.size());
    }

    public void setUnselect() {
        this.mIsSelected = true;
    }

    public void setUnselectAll() {
        this.mIsSelected = true;
        this.mActionbar.setTitle("");
    }
}
