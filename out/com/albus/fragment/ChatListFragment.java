package com.albus.fragment;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.Fragment;
import android.support.v4.app.ListFragment;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.RecyclerView.OnScrollListener;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import com.albus.activity.AlbusMainActivity;
import com.albus.activity.AlbusMainActivity.OnExecuteDeleteChat;
import com.albus.activity.AlbusMainActivity.OnMultipleDeleteChatEvent;
import com.albus.adapter.RecyclerChatListAdapter;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.DialogUI;
import com.albus.util.AlbusModelObject;
import com.catfiz.R;
import com.catfiz.app.CatfizListFragment;
import com.catfiz.base.Callback;
import com.catfiz.base.Callback.PrivateFetchActiveFriendsCallback;
import com.catfiz.base.Callback.UserFetchOfficalsCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.base.ICatfiz.ICatfizNewMessage;
import com.catfiz.media.RingtonePlayer;
import com.catfiz.model.User;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.signal.Signal;
import com.catfiz.signal.SignalBinderChat;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.apache.http.protocol.HTTP;

public class ChatListFragment extends CatfizListFragment implements ICatfiz, ICatfizNewMessage {
    private static final int DELETE_FRIEND_ACTIVE = 100;
    private static final String TAG = ChatListFragment.class.getSimpleName();
    private static Handler mHandler = new Handler();
    private static int mUnreadOfficial = 0;
    private RecyclerChatListAdapter mAdapter = null;
    private Catfiz mCatfiz = null;
    private CompareUserActivity mCompareUserActivity = new CompareUserActivity();
    private CompareUserId mCompareUserId = new CompareUserId();
    private int mDeleteCountHelper = 0;
    private boolean mFirstDown = true;
    private boolean mFirstUp = true;
    private List mFriends = null;
    private List mFriendsSelected = null;
    private List mJoinList = null;
    private LinearLayout mLlDfChat = null;
    private LinearLayout mLlDfGroup = null;
    private LinearLayout mLlDfView = null;
    private RecyclerView mRecyclerView = null;
    private int mRequestgetAllData = 0;
    private RelativeLayout mRlLoading;
    private int mUnread;

    /* synthetic */ class AnonymousClass5 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType = new int[MessageType.values().length];
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$signal$Signal = new int[Signal.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$signal$Signal[Signal.CHAT_BLITZ.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$signal$Signal[Signal.CHAT_MESSAGE.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$signal$Signal[Signal.CHAT_DELIVERY_UPDATE.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$signal$Signal[Signal.CHAT_TYPING.ordinal()] = 4;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$signal$Signal[Signal.FRIEND_PROFILE_UPDATE.ordinal()] = 5;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTMESSAGE.ordinal()] = 1;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTVOICE.ordinal()] = 2;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.PERSONCONTACT.ordinal()] = 3;
            } catch (NoSuchFieldError e8) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.PHOTOSEND_WCOMMENT.ordinal()] = 4;
            } catch (NoSuchFieldError e9) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.DATASEND_WCOMMENT.ordinal()] = 5;
            } catch (NoSuchFieldError e10) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SHARE_SLINK.ordinal()] = 6;
            } catch (NoSuchFieldError e11) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SVG_EMOTICONS.ordinal()] = 7;
            } catch (NoSuchFieldError e12) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.STIKER_MESSAGE.ordinal()] = 8;
            } catch (NoSuchFieldError e13) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.NIC_MESSAGE.ordinal()] = 9;
            } catch (NoSuchFieldError e14) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.MESSAGE.ordinal()] = 10;
            } catch (NoSuchFieldError e15) {
            }
        }
    }

    class CompareUserActivity implements Comparator {
        private CompareUserActivity() {
        }

        public int compare(User user, User user2) {
            return user2.getLastChatActivity().compareTo(user.getLastChatActivity());
        }

        public boolean equals(Object obj) {
            return this == obj;
        }
    }

    class CompareUserId implements Comparator {
        private CompareUserId() {
        }

        public int compare(User user, User user2) {
            return user2.getId().compareTo(user.getId());
        }

        public boolean equals(Object obj) {
            return this == obj;
        }
    }

    public class FetchOfficialsCb implements UserFetchOfficalsCallback {
        private CompareUserActivity mCompareUserActivity = new CompareUserActivity();
        private WeakReference mThisFragmentRef;

        public FetchOfficialsCb(ListFragment listFragment) {
            this.mThisFragmentRef = new WeakReference(listFragment);
        }

        public void onData(List list) {
            ChatListFragment chatListFragment = (ChatListFragment) this.mThisFragmentRef.get();
            if (chatListFragment == null) {
                Log.d(ChatListFragment.TAG, "FetchOfficialsCb weak Ref is null");
                return;
            }
            if (list.size() > 0) {
                Log.d(ChatListFragment.TAG, "Add Officials to Join List");
                chatListFragment.addAllToJoinList(list);
            }
            chatListFragment.mCatfiz.chatFetchActiveFriends(new FetchPrivateChatCb(chatListFragment));
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    public class FetchPrivateChatCb implements PrivateFetchActiveFriendsCallback {
        private CompareUserActivity mCompareUserActivity = new CompareUserActivity();
        private WeakReference mThisFragmentRef;

        public FetchPrivateChatCb(Fragment fragment) {
            this.mThisFragmentRef = new WeakReference(fragment);
        }

        public void onData(List list) {
            ChatListFragment chatListFragment = (ChatListFragment) this.mThisFragmentRef.get();
            if (chatListFragment == null) {
                Log.d(ChatListFragment.TAG, "FetchPrivateChatCb weak Ref is null");
            } else if (chatListFragment.dequeueGetAllData()) {
                int access$1100;
                Log.d(ChatListFragment.TAG, "unreadChats:" + 0);
                if (list.size() > 0) {
                    Log.d(ChatListFragment.TAG, "Add Private chats to Join List");
                    access$1100 = chatListFragment.addAllToJoinList(list);
                } else {
                    access$1100 = 0;
                }
                if (chatListFragment.mJoinList.size() > 0) {
                    chatListFragment.setDfView(false);
                    Log.d(ChatListFragment.TAG, "Sort and Update!!!");
                    Collections.sort(chatListFragment.mJoinList, chatListFragment.mCompareUserId);
                    ((AlbusMainActivity) chatListFragment.getActivity()).updateNotifChat(access$1100);
                    chatListFragment.updateFriendsFromJoinList();
                    return;
                }
                ((AlbusMainActivity) chatListFragment.getActivity()).updateNotifChat(access$1100);
                chatListFragment.setDfView(true);
            } else {
                Log.d(ChatListFragment.TAG, "There is another job in queue: fetch again");
                list.clear();
                chatListFragment.doFetchAllData();
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    private int addAllToJoinList(List list) {
        if (this.mJoinList.size() == 0) {
            this.mUnread = 0;
        }
        for (User user : list) {
            user.setIsTyping(this.mCatfiz.isFriendOnTyping(user.getId()));
            this.mUnread += user.getUnreadCount();
            this.mJoinList.add(user);
        }
        list.clear();
        return this.mUnread;
    }

    private void clearQueue() {
        this.mRequestgetAllData = 0;
    }

    private boolean dequeueGetAllData() {
        this.mRequestgetAllData--;
        if (this.mRequestgetAllData > 0) {
            Log.d(TAG, "Dequeue --");
            this.mRequestgetAllData = 1;
            return false;
        }
        Log.d(TAG, "Dequeue .DONE.");
        return true;
    }

    private void doFetchAllData() {
        this.mJoinList.clear();
        this.mCatfiz.chatFetchOfficials(new FetchOfficialsCb(this));
    }

    private boolean enqueueGetAllData() {
        if (this.mRequestgetAllData > 0) {
            this.mRequestgetAllData++;
            return false;
        }
        this.mRequestgetAllData++;
        return true;
    }

    private void initOnStarted() {
        Log.d(TAG, ">>>>>>>> onCatfizStarted:" + TAG);
        getAllData();
    }

    private void initView() {
        setAdapterForSingleChoice();
        this.mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
        this.mRecyclerView.addOnScrollListener(new OnScrollListener() {
            public void onScrollStateChanged(RecyclerView recyclerView, int i) {
                super.onScrollStateChanged(recyclerView, i);
                ((AlbusMainActivity) ChatListFragment.this.getActivity()).getMainFragment().getScrollHandle().onScrollStateChanged(i);
            }

            public void onScrolled(RecyclerView recyclerView, int i, int i2) {
                super.onScrolled(recyclerView, i, i2);
                ((AlbusMainActivity) ChatListFragment.this.getActivity()).getMainFragment().getScrollHandle().onScrolled(i, i2, ((LinearLayoutManager) recyclerView.getLayoutManager()).findFirstVisibleItemPosition());
            }
        });
        ((AlbusMainActivity) getActivity()).setOnMultipleDeleteChatEvent(new OnMultipleDeleteChatEvent() {
            public void onDeleteChat() {
                Bundle bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 1);
                bundle.putInt(AlbusModelObject.VALUE, ChatListFragment.this.mFriendsSelected.size());
                AlbusDialog.showDialog(1, new DialogUI().getDialogInterface(), ChatListFragment.this.getActivity(), bundle, ChatListFragment.this.getActivity().getSupportFragmentManager());
            }

            public void onEnterMultipleDelete() {
                ChatListFragment.this.setAdapterForMultiChoice();
            }

            public void onExitMultipleDelete() {
                ChatListFragment.this.mFriendsSelected.clear();
                ChatListFragment.this.setAdapterForSingleChoice();
                ChatListFragment.this.mAdapter.removeAllSelected();
                ChatListFragment.this.mDeleteCountHelper = 0;
            }

            public void onSelectAllChat() {
                if ((ChatListFragment.this.mFriends.size() == ChatListFragment.this.mFriendsSelected.size() ? 1 : null) != null) {
                    ((AlbusMainActivity) ChatListFragment.this.getActivity()).exitMultipleDelete();
                } else {
                    ChatListFragment.this.mAdapter.setAllSelected();
                }
            }

            public void onSelectItem(int i, int i2) {
                if (ChatListFragment.this.mFriendsSelected.size() == 0) {
                    ((AlbusMainActivity) ChatListFragment.this.getActivity()).exitMultipleDelete();
                }
                if (i2 != 1) {
                    return;
                }
                if (i >= 4) {
                    ChatListFragment.this.mRecyclerView.scrollToPosition(i - 3);
                } else {
                    ChatListFragment.this.mRecyclerView.scrollToPosition(-1);
                }
            }
        });
        ((AlbusMainActivity) getActivity()).setOnExecuteDeleteChat(new OnExecuteDeleteChat() {
            public void deleteChats() {
                ChatListFragment.this.deleteChatMessages();
            }
        });
    }

    public static ChatListFragment newInstance(Bundle bundle) {
        ChatListFragment chatListFragment = new ChatListFragment();
        chatListFragment.setArguments(bundle);
        return chatListFragment;
    }

    private void setAdapterForMultiChoice() {
        this.mAdapter = null;
        this.mAdapter = new RecyclerChatListAdapter(getActivity(), this.mFriends, this.mFriendsSelected, 34);
        this.mRecyclerView.setAdapter(this.mAdapter);
        this.mAdapter.refresh();
    }

    private void setAdapterForSingleChoice() {
        this.mAdapter = null;
        this.mAdapter = new RecyclerChatListAdapter(getActivity(), this.mFriends, this.mFriendsSelected, 1);
        this.mRecyclerView.setAdapter(this.mAdapter);
        this.mAdapter.refresh();
    }

    public void checkIsTyping(User user) {
        if (this.mFriends.size() == this.mJoinList.size() && user != null && this.mJoinList.size() > 0) {
            int binarySearch = Collections.binarySearch(this.mJoinList, user, this.mCompareUserId);
            if (binarySearch >= 0) {
                ((User) this.mJoinList.get(binarySearch)).setIsTyping(user.isTyping());
                updateFriendsFromJoinList();
            }
        }
    }

    public void deleteChatMessages() {
        this.mDeleteCountHelper = 0;
        for (final User user : this.mFriendsSelected) {
            Log.d(TAG, "~~~ deleteChatMessages:" + user.getName());
            this.mCatfiz.chatDeleteConversation(user.getId(), new Callback() {
                public void onError() {
                }

                public void onSuccess() {
                    ChatListFragment.this.mFriends.remove(user);
                    ChatListFragment.this.mAdapter.notifyDataSetChanged();
                    ChatListFragment.this.mDeleteCountHelper = ChatListFragment.this.mDeleteCountHelper + 1;
                    if (ChatListFragment.this.mDeleteCountHelper >= ChatListFragment.this.mFriendsSelected.size()) {
                        ChatListFragment.mHandler.post(new Runnable() {
                            public void run() {
                                ChatListFragment.this.getAllData();
                            }
                        });
                    }
                }
            });
        }
        ((AlbusMainActivity) getActivity()).exitMultipleDelete();
    }

    public void enterSearchMode() {
    }

    public void getAllData() {
        if (!((AlbusMainActivity) getActivity()).isMultiDeleteMode()) {
            if (enqueueGetAllData()) {
                Log.d(TAG, "has new update and fetch data");
                this.mRlLoading.setVisibility(0);
                doFetchAllData();
                return;
            }
            Log.d(TAG, "Enqueue ++");
        }
    }

    public int getIndexFromJoinList(String str) {
        if (this.mJoinList == null) {
            return -1;
        }
        return Collections.binarySearch(this.mJoinList, new User(str), this.mCompareUserId);
    }

    public void leaveSearchMode() {
        limitListView("", false);
    }

    public void limitListView(String str, boolean z) {
        Log.d(TAG, " --- limitListView --- ");
        if (str.length() > 0) {
            if (z) {
                this.mFriends.clear();
                this.mFriends.addAll(this.mJoinList);
            }
            Collection arrayList = new ArrayList();
            for (User user : this.mFriends) {
                if (user != null) {
                    String name = user.getName();
                    if (!(name == null || name.isEmpty() || !name.toLowerCase().contains(str.toLowerCase(Locale.US)))) {
                        arrayList.add(user);
                    }
                }
            }
            this.mFriends.clear();
            this.mFriends.addAll(arrayList);
            this.mAdapter.refresh();
            return;
        }
        getAllData();
    }

    public void onActivityCreated(Bundle bundle) {
        super.onActivityCreated(bundle);
        Log.d(TAG, ">>>>>>>> onActivityCreated:" + TAG);
    }

    public void onActivityResult(int i, int i2, Intent intent) {
        super.onActivityResult(i, i2, intent);
        Log.d(TAG, ">>>>>>>> onActivityResult:" + TAG + ":" + i + " " + i2 + "--");
        if (i2 == -1 && i == DELETE_FRIEND_ACTIVE) {
            getAllData();
        }
    }

    public void onCatfizStarted() {
        initOnStarted();
    }

    public void onCatfizStopped() {
    }

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        Log.d(TAG, ">>>>>>>> onCreate:" + TAG);
        this.mCatfiz = new Catfiz(getActivity(), this, new SignalBinderChat());
        clearQueue();
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        Log.d(TAG, ">>>>>>>> onCreateView:" + TAG);
        View inflate = layoutInflater.inflate(R.layout.fragment_chat_group, viewGroup, false);
        this.mLlDfView = (LinearLayout) inflate.findViewById(R.id.ll_df_content);
        this.mLlDfChat = (LinearLayout) inflate.findViewById(R.id.ll_df_chat);
        this.mLlDfGroup = (LinearLayout) inflate.findViewById(R.id.ll_df_group);
        this.mRlLoading = (RelativeLayout) inflate.findViewById(R.id.loadingPanel);
        this.mRecyclerView = (RecyclerView) inflate.findViewById(R.id.recyclerView);
        setDfView(false);
        this.mJoinList = new ArrayList();
        this.mFriends = new ArrayList();
        this.mFriendsSelected = new ArrayList();
        setContainerView(viewGroup);
        initView();
        return inflate;
    }

    public void onDestroy() {
        super.onDestroy();
        Log.d(TAG, ">>>>>>>> onDestroy:" + TAG);
        this.mRecyclerView = null;
        this.mJoinList = null;
        this.mFriendsSelected = null;
        this.mFriends = null;
        this.mCatfiz.destroy();
    }

    public void onPause() {
        super.onPause();
        Log.d(TAG, ">>>>>>>> onPause:" + TAG);
        this.mCatfiz.finish();
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        Log.d(TAG, ">>>>>>>> onResume:" + TAG);
        clearQueue();
        this.mCatfiz.start();
        if (this.mCatfiz.isCatfizStarted()) {
            Log.d(TAG, "catfish started");
            initOnStarted();
        }
    }

    public boolean onSignalEvent(Signal signal) {
        Log.d(TAG, "onSignalEvent : " + Signal.values()[signal.ordinal()]);
        return false;
    }

    public boolean onSignalEventNewMessage(Signal signal, User user, int i, String str) {
        Log.d(TAG, "onSignalEventNewMessage: " + signal + ", " + i + ", " + str);
        switch (AnonymousClass5.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[i].ordinal()]) {
            case e.b /*1*/:
            case e.c /*2*/:
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
            case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
            case SimpleLog.LOG_LEVEL_FATAL /*6*/:
            case SimpleLog.LOG_LEVEL_OFF /*7*/:
            case Utils.FILE_TYPE_INSTALLER /*8*/:
            case HTTP.HT /*9*/:
            case HTTP.LF /*10*/:
                if (this.mCatfiz.isCatfizStarted()) {
                    getAllData();
                    RingtonePlayer.play(getActivity().getApplicationContext());
                    break;
                }
                break;
        }
        switch (AnonymousClass5.$SwitchMap$com$catfiz$signal$Signal[Signal.values()[signal.ordinal()].ordinal()]) {
            case e.b /*1*/:
            case e.c /*2*/:
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                getAllData();
                break;
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                checkIsTyping(user);
                break;
            case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                if (this.mFriends.size() == this.mJoinList.size() && user != null && this.mJoinList.size() > 0) {
                    int binarySearch = Collections.binarySearch(this.mJoinList, user, this.mCompareUserId);
                    if (binarySearch >= 0) {
                        int i2;
                        User user2 = (User) this.mJoinList.get(binarySearch);
                        if (user.getName().isEmpty()) {
                            i2 = 0;
                        } else {
                            user2.setName(user.getName());
                            i2 = 1;
                        }
                        if (!user.getStatus().isEmpty()) {
                            user2.setStatus(user.getStatus());
                            i2++;
                        }
                        if (i2 > 0) {
                            Log.d(TAG, "user: " + user2.getId() + ", name: " + user2.getName() + ": UPDATE");
                            updateFriendsFromJoinList();
                            break;
                        }
                    }
                    Log.d(TAG, "sender: " + user.getId() + ": NOT FOUND IN JOIN LIST");
                    break;
                }
                break;
        }
        return false;
    }

    public void onStop() {
        super.onStop();
        Log.d(TAG, ">>>>>>>> onStop:" + TAG);
    }

    public void realignToolbar() {
        Log.d(TAG, "~~~~~~~~~ realignToolbar:" + TAG);
        if (((LinearLayoutManager) this.mRecyclerView.getLayoutManager()).findFirstVisibleItemPosition() <= 0) {
            Log.d(TAG, "~~~~~~~~~~ DO DO DO:" + TAG);
            ((AlbusMainActivity) getActivity()).getMainFragment().getScrollHandle().forceShowToolbar();
        }
    }

    public void setDfView(boolean z) {
        if (z) {
            this.mLlDfView.setVisibility(0);
            this.mLlDfChat.setVisibility(0);
            this.mLlDfGroup.setVisibility(8);
            return;
        }
        this.mLlDfView.setVisibility(8);
    }

    public void updateFriendsFromJoinList() {
        Log.d(TAG, "Update Friend List from JoinList");
        this.mFriends.clear();
        this.mFriends.addAll(this.mJoinList);
        Collections.sort(this.mFriends, this.mCompareUserActivity);
        this.mAdapter.assignRowItems(this.mFriends);
        this.mAdapter.refresh();
        this.mRlLoading.setVisibility(8);
    }
}
