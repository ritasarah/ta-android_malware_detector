package com.albus.fragment;

import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Rect;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.ListFragment;
import android.support.v4.content.LocalBroadcastManager;
import android.view.ActionMode;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.widget.AbsListView.MultiChoiceModeListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.TextView;
import com.albus.activity.ChatGroupConvActivity;
import com.albus.activity.CustomActionBarPageActivity;
import com.albus.activity.MenuActivity;
import com.albus.adapter.GroupConvListAdapter;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.AlbusDialog.OnActionClickListener;
import com.albus.dialog.AlbusDialog.OnAttachItemListener;
import com.albus.dialog.AlbusDialog.OnChooserTypeFile;
import com.albus.dialog.AlbusDialog.OnChooserVideoResolutionListener;
import com.albus.dialog.AlbusDialog.OnShareButtonListener;
import com.albus.dialog.AlbusDialogInterface;
import com.albus.dialog.DialogUI;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.util.PendingStateUtils;
import com.albus.util.QuoteUtils;
import com.albus.util.WriteMsgToExternalStorage;
import com.albus.view.ChatsBottomBarView;
import com.albus.view.ChatsBottomBarView.onAttachmentClickListener;
import com.albus.view.ChatsBottomBarView.onEmojiPanelComponentListener;
import com.albus.view.ChatsBottomBarView.onPanelEmojiAnimation;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Callback.FetchGroupCallback;
import com.catfiz.base.Callback.FetchGroupMessagesCallback;
import com.catfiz.base.Callback.FetchGroupMessagesWithLimitCallback;
import com.catfiz.base.Callback.GroupMessageCountCallback;
import com.catfiz.base.Callback.OnGroupDeleted;
import com.catfiz.base.Callback.ProgressUploadDownload;
import com.catfiz.base.Callback.StreamHasThumbnailCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.base.ICatfiz.ICatfizNewMessageGroup;
import com.catfiz.base.ICatfiz.ICatfizUpdateProgress;
import com.catfiz.intents.BroadcastIntents;
import com.catfiz.media.StorageDir;
import com.catfiz.model.FileMetaInfo;
import com.catfiz.model.Fizzlink;
import com.catfiz.model.Group;
import com.catfiz.model.Message;
import com.catfiz.model.Quote;
import com.catfiz.pool.PoolDataUploadExecutor.PoolDataType;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.service.LongMessageExecutor;
import com.catfiz.service.PinManagerV2;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.signal.Signal;
import com.catfiz.signal.SignalBinderGroup;
import com.catfiz.svcpersistent.TaskDataStorage;
import com.catfiz.util.Log;
import com.catfiz.util.MediaFilePath;
import com.catfiz.util.Utils;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.LangUtils;
import org.json.JSONException;
import org.json.JSONObject;

public class GroupConvListFragment extends ListFragment implements MultiChoiceModeListener, ICatfiz, ICatfizNewMessageGroup, ICatfizUpdateProgress {
    private static final String TAG = GroupConvListFragment.class.getSimpleName();
    private static Handler mHandler = new Handler();
    private ListView chatListView = null;
    private GroupConvListAdapter mAdapter = null;
    public ChatsBottomBarView mBottomBar = null;
    private String mCaptionHelper = null;
    private Catfiz mCatfiz = null;
    private int mCountSelected = 0;
    private int mCurrentMessageType = 1;
    private String mFilePathToSend = "";
    private Uri mFileUriHelper = null;
    private Group mGroup = null;
    private int mHeightDiffHelper = 0;
    private View mLlAttachImage = null;
    private int mMaxList;
    private int mMaxMsg = 0;
    private List mMessages = null;
    private ActionMode mMode = null;
    private Message mMsgHelper = null;
    private int mUnreadMsg;
    private boolean mbFirstEnter = true;

    /* synthetic */ class AnonymousClass12 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType = new int[MessageType.values().length];
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$signal$Signal = new int[Signal.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.PERSONCONTACT.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTCONFERENCE_LONGMESSAGE.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.LONG_MESSAGE.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.DATASEND_WCOMMENT.ordinal()] = 4;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTCONFERENCE.ordinal()] = 5;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTCONFERENCE_VIDEO.ordinal()] = 6;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SHARE_SLINK_AT_POOL.ordinal()] = 7;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.STIKER_MESSAGE_POOL.ordinal()] = 8;
            } catch (NoSuchFieldError e8) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.QUOTE.ordinal()] = 9;
            } catch (NoSuchFieldError e9) {
            }
            try {
                $SwitchMap$com$catfiz$signal$Signal[Signal.GROUP_MESSAGE.ordinal()] = 1;
            } catch (NoSuchFieldError e10) {
            }
            try {
                $SwitchMap$com$catfiz$signal$Signal[Signal.GROUP_DELETED.ordinal()] = 2;
            } catch (NoSuchFieldError e11) {
            }
        }
    }

    class CheckGroupConvUnreadCb implements FetchGroupCallback {
        private WeakReference mThisFragmentRef;

        public CheckGroupConvUnreadCb(GroupConvListFragment groupConvListFragment) {
            this.mThisFragmentRef = new WeakReference(groupConvListFragment);
        }

        public void onData(Group group, String str) {
            if (((GroupConvListFragment) this.mThisFragmentRef.get()) != null && group != null) {
                int haveUnreadItem = group.getHaveUnreadItem();
                int unreadMessagescount = group.getUnreadMessagescount();
                Log.d(GroupConvListFragment.TAG, "~~~CheckGroupCb:" + haveUnreadItem + " " + unreadMessagescount);
                if (haveUnreadItem > 0 && unreadMessagescount > 0) {
                    GroupConvListFragment.this.getAllData(true);
                }
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    public class FetchMessagesWithLimitCB implements FetchGroupMessagesWithLimitCallback {
        private boolean mIsShowMore = false;
        private boolean mScrollToLastPos = false;
        private WeakReference mThisFragmentRef;

        public FetchMessagesWithLimitCB(GroupConvListFragment groupConvListFragment, boolean z, boolean z2) {
            this.mThisFragmentRef = new WeakReference(groupConvListFragment);
            this.mScrollToLastPos = z;
            this.mIsShowMore = z2;
        }

        public void onData(List list) {
            GroupConvListFragment groupConvListFragment = (GroupConvListFragment) this.mThisFragmentRef.get();
            if (groupConvListFragment == null) {
                Log.d(GroupConvListFragment.TAG, "FetchMessagesCB weak Ref is null");
                return;
            }
            Log.d(GroupConvListFragment.TAG, ">>>> FETCH_MESSAGE_CB size:" + list.size());
            int size = groupConvListFragment.mMessages.size();
            if (this.mIsShowMore) {
                Collections.reverse(groupConvListFragment.mMessages);
                Collections.reverse(list);
                groupConvListFragment.mMessages.addAll(list);
                Collections.reverse(groupConvListFragment.mMessages);
            } else {
                groupConvListFragment.mMessages.clear();
                groupConvListFragment.mMessages.addAll(list);
            }
            groupConvListFragment.mAdapter.setUnreadMsgCount(groupConvListFragment.mUnreadMsg);
            groupConvListFragment.mAdapter.notifyDataSetChanged();
            if (this.mScrollToLastPos) {
                if (groupConvListFragment.mUnreadMsg > 0) {
                    Log.d(GroupConvListFragment.TAG, "scrool to last read");
                    groupConvListFragment.getListView().setSelection(groupConvListFragment.mMessages.size() - groupConvListFragment.mUnreadMsg);
                    groupConvListFragment.mUnreadMsg = -1;
                    return;
                }
                Log.d(GroupConvListFragment.TAG, "scrool to bottom");
                groupConvListFragment.getListView().setSelection(groupConvListFragment.mAdapter.getCount() - 1);
            } else if (this.mIsShowMore) {
                size = groupConvListFragment.mMaxMsg - size;
                Log.d(GroupConvListFragment.TAG, "all:" + groupConvListFragment.mMaxMsg + " size:" + groupConvListFragment.mMessages.size() + " diff:" + size);
                if (size >= 100) {
                    groupConvListFragment.getListView().setSelection(100);
                } else {
                    groupConvListFragment.getListView().setSelection(size);
                }
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    class GroupDialog implements AlbusDialogInterface {
        private String mGroupId = null;
        private String mGroupName = null;
        private Message mMsg;

        public GroupDialog(Message message) {
            if (message != null) {
                this.mMsg = message;
                Log.d(GroupConvListFragment.TAG, "slink: [" + this.mMsg.getSlink() + "]");
            }
        }

        private String getJSONText(Message message) {
            String slink = message.getSlink();
            Log.d(GroupConvListFragment.TAG, "slink:" + slink);
            if (slink.compareTo("0") == 0 || slink == null) {
                return "";
            }
            Fizzlink fizzlink = message.getFizzlink();
            JSONObject jSONObject = new JSONObject();
            try {
                jSONObject.put(ServerMessageDataStorage.SLINK, "catfiz://fl.catfiz.com/" + slink);
                jSONObject.put(ServerMessageDataStorage.MESSAGE, fizzlink.getMessage());
                jSONObject.put(FriendListDataStorage.FILENAME, fizzlink.getFileName());
                jSONObject.put("filesize", fizzlink.getDataSize());
                jSONObject.put(TaskDataStorage.FILE_PATH, fizzlink.getFilePath());
                jSONObject.put(TaskDataStorage.TIMESTAMP, System.currentTimeMillis() + "");
                jSONObject.put("simplelink", message.getSlink());
            } catch (JSONException e) {
                e.printStackTrace();
            }
            slink = jSONObject.toString();
            Log.d(GroupConvListFragment.TAG, "result generate json text from message : " + slink);
            return slink;
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            final DialogFragment dialogFragment2;
            switch (i) {
                case LangUtils.HASH_OFFSET /*37*/:
                    AlbusDialog.setOnAttachItemClicked(new OnAttachItemListener() {
                        public void onAttachVideoCamClicked() {
                            Intent intent = new Intent("android.media.action.VIDEO_CAPTURE");
                            if (intent.resolveActivity(((ChatGroupConvActivity) GroupConvListFragment.this.getActivity()).getPackageManager()) != null) {
                                intent.putExtra("android.intent.extra.durationLimit", AlbusModelObject.VIDEO_DURATION_UPLOAD_LIMIT);
                                GroupConvListFragment.this.startActivityForResult(intent, 8);
                            }
                        }

                        public void onAttachVideoFileClicked() {
                            try {
                                GroupConvListFragment.this.startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("video/*"), 8);
                            } catch (ActivityNotFoundException e) {
                                AlbusUtils.setToastView(GroupConvListFragment.this.getActivity(), GroupConvListFragment.this.getString(R.string.file_manager_check));
                            }
                        }
                    });
                    return;
                case R.styleable.Theme_actionModePopupWindowStyle /*39*/:
                    String dataFilePath;
                    TextView textView = (TextView) view.findViewById(R.id.tv_chooser1);
                    TextView textView2 = (TextView) view.findViewById(R.id.tv_chooser2);
                    TextView textView3 = (TextView) view.findViewById(R.id.tv_chooser3);
                    TextView textView4 = (TextView) view.findViewById(R.id.tv_chooser4);
                    TextView textView5 = (TextView) view.findViewById(R.id.tv_chooser5);
                    TextView textView6 = (TextView) view.findViewById(R.id.tv_chooser6);
                    TextView textView7 = (TextView) view.findViewById(R.id.tv_chooser7);
                    TextView textView8 = (TextView) view.findViewById(R.id.tv_chooser8);
                    ((TextView) view.findViewById(R.id.tv_name)).setVisibility(8);
                    textView8.setVisibility(8);
                    textView.setVisibility(0);
                    if (this.mMsg.getLikeCount() > 0) {
                        textView7.setVisibility(0);
                    } else {
                        textView7.setVisibility(8);
                    }
                    textView3.setVisibility(0);
                    textView2.setVisibility(0);
                    textView4.setVisibility(0);
                    GroupConvListFragment.this.mCaptionHelper = this.mMsg.getText();
                    final int type = this.mMsg.getType();
                    boolean isEmpty = GroupConvListFragment.this.mCaptionHelper.isEmpty();
                    Object obj = this.mMsg.getDeliveryStatus() == MessageDeliveryStatus.CONFRCPENDINGDOWNLOAD.ordinal() ? 1 : null;
                    if (obj != null) {
                        try {
                            dataFilePath = this.mMsg.getDataFilePath();
                            String[] split = dataFilePath.split(":");
                            Log.d(GroupConvListFragment.TAG, "Not downloaded " + dataFilePath + " " + split.length);
                            if (split.length < 5) {
                                isEmpty = true;
                            } else {
                                GroupConvListFragment.this.mCaptionHelper = dataFilePath.substring(dataFilePath.lastIndexOf(":") + 1);
                            }
                        } catch (StringIndexOutOfBoundsException e) {
                            Log.w(GroupConvListFragment.TAG, "" + e.getMessage());
                        }
                    }
                    switch (AnonymousClass12.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[type].ordinal()]) {
                        case e.b /*1*/:
                            textView2.setVisibility(8);
                            textView3.setVisibility(8);
                            break;
                        case e.c /*2*/:
                        case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                            isEmpty = false;
                            textView2.setVisibility(8);
                            if (MessageDeliveryStatus.values()[this.mMsg.getDeliveryStatus()] == MessageDeliveryStatus.DROP) {
                                textView8.setVisibility(0);
                                break;
                            }
                            break;
                        case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                        case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                        case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                            textView5.setVisibility(0);
                            textView6.setVisibility(0);
                            textView5.setText(GroupConvListFragment.this.getResources().getString(R.string.share_to_friends));
                            textView6.setText(GroupConvListFragment.this.getResources().getString(R.string.share_to_pools));
                            if (!this.mMsg.getVoiceFilePath().isEmpty()) {
                                textView3.setVisibility(8);
                                textView2.setVisibility(8);
                            }
                            if (!isEmpty && obj == null && FileMetaInfo.isFileMetaInfoValid(GroupConvListFragment.this.mCaptionHelper) && FileMetaInfo.metaInfoBuilder(GroupConvListFragment.this.mCaptionHelper).getCaption().isEmpty()) {
                                isEmpty = true;
                                break;
                            }
                        case SimpleLog.LOG_LEVEL_OFF /*7*/:
                            if (textView5.getVisibility() == 8) {
                                textView5.setVisibility(0);
                                textView6.setVisibility(0);
                                textView5.setText(GroupConvListFragment.this.getResources().getString(R.string.share_to_friends));
                                textView6.setText(GroupConvListFragment.this.getResources().getString(R.string.share_to_pools));
                            }
                            if (AlbusUtils.getSlinkFromJson(GroupConvListFragment.this.mCaptionHelper, ServerMessageDataStorage.SLINK) == null) {
                                isEmpty = true;
                                break;
                            }
                            dataFilePath = AlbusUtils.getSlinkFromJson(GroupConvListFragment.this.mCaptionHelper, ServerMessageDataStorage.MESSAGE);
                            if (dataFilePath == null || dataFilePath.isEmpty()) {
                                isEmpty = true;
                                break;
                            }
                        case Utils.FILE_TYPE_INSTALLER /*8*/:
                            textView.setVisibility(8);
                            textView2.setVisibility(8);
                            textView3.setVisibility(8);
                            break;
                        default:
                            if (MessageDeliveryStatus.values()[this.mMsg.getDeliveryStatus()] == MessageDeliveryStatus.DROP) {
                                textView8.setVisibility(0);
                                break;
                            }
                            break;
                    }
                    textView3.setText(R.string.copy_chat);
                    textView4.setText(R.string.delete_chat);
                    dataFilePath = GroupConvListFragment.this.getString(R.string.btn_resend).toLowerCase();
                    textView8.setText((dataFilePath.substring(0, 1).toUpperCase() + dataFilePath.substring(1)) + " " + GroupConvListFragment.this.getString(R.string.Message));
                    if (isEmpty) {
                        textView3.setVisibility(8);
                        textView2.setVisibility(8);
                        textView8.setVisibility(8);
                    }
                    isEmpty = this.mMsg.getMeLikeThis();
                    if (isEmpty) {
                        textView.setText(R.string.unlike);
                    } else {
                        textView.setText(R.string.like);
                    }
                    textView7.setText(R.string.btn_wholike);
                    textView2.setText(R.string.quote);
                    dialogFragment2 = dialogFragment;
                    textView3.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment2.dismiss();
                            Log.d(GroupConvListFragment.TAG, "Copy process:" + type + " " + GroupConvListFragment.this.mCaptionHelper);
                            String str;
                            switch (AnonymousClass12.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[GroupDialog.this.mMsg.getType()].ordinal()]) {
                                case e.c /*2*/:
                                case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                                    AlbusUtils.copyToClipboard(GroupConvListFragment.this.getActivity(), LongMessageExecutor.getLongMessage(GroupDialog.this.mMsg.getSequence()));
                                    break;
                                case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                                case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                                    str = "";
                                    str = FileMetaInfo.isFileMetaInfoValid(GroupConvListFragment.this.mCaptionHelper) ? FileMetaInfo.metaInfoBuilder(GroupConvListFragment.this.mCaptionHelper).getCaption() : GroupConvListFragment.this.mCaptionHelper;
                                    AlbusUtils.copyToClipboard(GroupConvListFragment.this.getActivity(), str);
                                    Log.d(GroupConvListFragment.TAG, "Copy text:" + str);
                                    break;
                                case SimpleLog.LOG_LEVEL_OFF /*7*/:
                                    if (AlbusUtils.getSlinkFromJson(GroupConvListFragment.this.mCaptionHelper, ServerMessageDataStorage.SLINK) != null) {
                                        str = AlbusUtils.getSlinkFromJson(GroupConvListFragment.this.mCaptionHelper, ServerMessageDataStorage.MESSAGE);
                                        if (str != null) {
                                            AlbusUtils.copyToClipboard(GroupConvListFragment.this.getActivity(), str);
                                            break;
                                        }
                                    }
                                    break;
                                case HTTP.HT /*9*/:
                                    Quote quoteJSONStringDecoder = QuoteUtils.quoteJSONStringDecoder(GroupConvListFragment.this.mCaptionHelper);
                                    if (quoteJSONStringDecoder != null) {
                                        AlbusUtils.copyToClipboard(GroupConvListFragment.this.getActivity(), quoteJSONStringDecoder.getMyMessage());
                                        break;
                                    }
                                    break;
                                default:
                                    AlbusUtils.copyToClipboard(GroupConvListFragment.this.getActivity(), GroupConvListFragment.this.mCaptionHelper);
                                    break;
                            }
                            AlbusUtils.setToastView(GroupConvListFragment.this.getActivity(), GroupConvListFragment.this.getString(R.string.text_copied));
                        }
                    });
                    dialogFragment2 = dialogFragment;
                    textView4.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment2.dismiss();
                            Log.d(GroupConvListFragment.TAG, "seq=" + GroupDialog.this.mMsg.getSequence());
                            GroupConvListFragment.this.mCatfiz.groupDeleteSingleDiscuss(GroupConvListFragment.this.mGroup.getGroupID(), GroupDialog.this.mMsg.getSequence(), new Callback() {
                                public void onError() {
                                    Log.d(GroupConvListFragment.TAG, "onError() groupDeleteSingleDiscuss");
                                }

                                public void onSuccess() {
                                    Log.d(GroupConvListFragment.TAG, "onSuccess() groupDeleteSingleDiscuss");
                                    GroupConvListFragment.this.getAllData(false);
                                }
                            });
                        }
                    });
                    dialogFragment2 = dialogFragment;
                    textView8.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment2.dismiss();
                            Log.d(GroupConvListFragment.TAG, "seq=" + GroupDialog.this.mMsg.getSequence());
                            if (MessageType.values()[GroupDialog.this.mMsg.getType()] == MessageType.MESSAGE) {
                                GroupConvListFragment.this.mCatfiz.groupResendSingleDiscuss(GroupConvListFragment.this.mGroup.getGroupID(), GroupDialog.this.mMsg.getSequence(), GroupDialog.this.mMsg.getText(), new Callback() {
                                    public void onError() {
                                        Log.d(GroupConvListFragment.TAG, "onError() groupResendSingleDiscuss");
                                    }

                                    public void onSuccess() {
                                        Log.d(GroupConvListFragment.TAG, "onSuccess() groupResendSingleDiscuss");
                                        GroupConvListFragment.this.getAllData(true);
                                    }
                                });
                            } else if (MessageType.values()[GroupDialog.this.mMsg.getType()] == MessageType.QUOTE) {
                                Log.d(GroupConvListFragment.TAG, "Will Send MESSAGE_TYPE_QUOTED:" + GroupDialog.this.mMsg.getText());
                                GroupConvListFragment.this.mCatfiz.groupResendQuotedMessage(GroupConvListFragment.this.mGroup.getGroupID(), GroupDialog.this.mMsg.getSequence(), GroupDialog.this.mMsg.getText(), new Callback() {
                                    public void onError() {
                                        Log.d(GroupConvListFragment.TAG, "Error Send Message");
                                    }

                                    public void onSuccess() {
                                        Log.d(GroupConvListFragment.TAG, "Success Send Message");
                                        GroupConvListFragment.this.getAllData(true);
                                    }
                                });
                            }
                        }
                    });
                    dialogFragment2 = dialogFragment;
                    textView.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment2.dismiss();
                            GroupConvListFragment.this.mCatfiz.groupLikeConference(GroupConvListFragment.this.mGroup.getGroupID(), GroupDialog.this.mMsg.getSequence(), !isEmpty, new Callback() {
                                public void onError() {
                                    Log.d(GroupConvListFragment.TAG, "onError Like");
                                }

                                public void onSuccess() {
                                    Log.d(GroupConvListFragment.TAG, "onSuccess Like:" + (!isEmpty));
                                    GroupConvListFragment.this.getAllData(false);
                                }
                            });
                        }
                    });
                    dialogFragment2 = dialogFragment;
                    textView7.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment2.dismiss();
                            Intent intent = new Intent(GroupConvListFragment.this.getActivity(), MenuActivity.class);
                            intent.putExtra(AlbusModelObject.PAGE, 32);
                            intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, GroupDialog.this.mMsg.getSequence());
                            intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, isEmpty);
                            intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, GroupConvListFragment.this.mGroup.getGroupID());
                            intent.putExtra(HTTP.IDENTITY_CODING, 26);
                            GroupConvListFragment.this.getActivity().startActivity(intent);
                        }
                    });
                    dialogFragment2 = dialogFragment;
                    textView2.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment2.dismiss();
                            Log.d(GroupConvListFragment.TAG, "onQuoted Message:" + type + " " + GroupConvListFragment.this.mCaptionHelper);
                            GroupConvListFragment.this.mBottomBar.setQuote(GroupDialog.this.mMsg);
                            GroupConvListFragment.this.setAttachedData(7, "");
                            GroupConvListFragment.this.mMsgHelper = GroupDialog.this.mMsg;
                        }
                    });
                    dialogFragment2 = dialogFragment;
                    textView5.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment2.dismiss();
                            String formatFromMessage = Fizzlink.formatFromMessage(GroupDialog.this.mMsg);
                            if (formatFromMessage == null) {
                                Log.e(GroupConvListFragment.TAG, "ERROR: invalid fizzlink message");
                                return;
                            }
                            Intent intent = new Intent(GroupConvListFragment.this.getActivity(), CustomActionBarPageActivity.class);
                            intent.putExtra(AlbusModelObject.PAGE, 49);
                            intent.putExtra(HTTP.IDENTITY_CODING, 49);
                            intent.putExtra("android.intent.extra.TEXT", formatFromMessage);
                            intent.putExtra(ServerMessageDataStorage.SLINK, true);
                            intent.putExtra("slinkuri", GroupDialog.this.mMsg.getSlink());
                            intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, GroupDialog.this.mMsg.getSender().getId());
                            GroupConvListFragment.this.startActivity(intent);
                        }
                    });
                    dialogFragment2 = dialogFragment;
                    textView6.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment2.dismiss();
                            String formatFromMessage = Fizzlink.formatFromMessage(GroupDialog.this.mMsg);
                            if (formatFromMessage == null) {
                                Log.e(GroupConvListFragment.TAG, "ERROR: invalid fizzlink message");
                                return;
                            }
                            Intent intent = new Intent(GroupConvListFragment.this.getActivity(), CustomActionBarPageActivity.class);
                            intent.putExtra(AlbusModelObject.PAGE, 41);
                            intent.putExtra(HTTP.IDENTITY_CODING, 49);
                            intent.putExtra("android.intent.extra.TEXT", formatFromMessage);
                            intent.putExtra(ServerMessageDataStorage.SLINK, true);
                            intent.putExtra("slinkuri", GroupDialog.this.mMsg.getSlink());
                            GroupConvListFragment.this.startActivityForResult(intent, 27);
                        }
                    });
                    return;
                case R.styleable.Theme_textAppearanceLargePopupMenu /*40*/:
                    this.mGroupId = bundle.getString(CatfishRESTAPI.CFCOMPACT_STICKERID);
                    this.mGroupName = bundle.getString(AlbusModelObject.GROUP);
                    dialogFragment2 = dialogFragment;
                    AlbusDialog.setOnActionClickListener(i, new OnActionClickListener() {
                        public void onActionNoListener() {
                            dialogFragment2.dismiss();
                            GroupConvListFragment.this.mCatfiz.groupFetchMessages(GroupDialog.this.mGroupId, new FetchGroupMessagesCallback() {
                                public void onData(List list) {
                                    AlbusUtils.setToastView(GroupConvListFragment.this.getActivity(), WriteMsgToExternalStorage.generateNote(GroupConvListFragment.this.getActivity(), "Message_Group_" + GroupDialog.this.mGroupName, list, GroupDialog.this.mGroupName, true));
                                }

                                public void onError() {
                                }

                                public void onSuccess() {
                                }
                            }, true);
                            GroupConvListFragment.this.mCatfiz.deleteEmptyGroup(GroupDialog.this.mGroupId, new OnGroupDeleted() {
                                public void onError() {
                                }

                                public void onSuccess() {
                                    AlbusUtils.setToastView(GroupConvListFragment.this.getActivity(), GroupConvListFragment.this.getString(R.string.you_del_group));
                                    GroupConvListFragment.this.getActivity().finish();
                                }

                                public void onSuccess(String str) {
                                }
                            });
                        }

                        public void onActionYesListener() {
                            GroupConvListFragment.this.mCatfiz.deleteEmptyGroup(GroupDialog.this.mGroupId, new OnGroupDeleted() {
                                public void onError() {
                                }

                                public void onSuccess() {
                                    dialogFragment2.dismiss();
                                    AlbusUtils.setToastView(GroupConvListFragment.this.getActivity(), GroupConvListFragment.this.getString(R.string.you_del_group));
                                    GroupConvListFragment.this.getActivity().finish();
                                }

                                public void onSuccess(String str) {
                                }
                            });
                        }
                    });
                    return;
                case R.styleable.Theme_spinnerDropDownItemStyle /*47*/:
                    dialogFragment2 = dialogFragment;
                    AlbusDialog.setOnShareButtonClicked(new OnShareButtonListener() {
                        public void onShareToFriendClicked() {
                            dialogFragment2.dismiss();
                            Intent intent = new Intent(GroupConvListFragment.this.getActivity(), CustomActionBarPageActivity.class);
                            intent.putExtra(AlbusModelObject.PAGE, 49);
                            intent.putExtra(HTTP.IDENTITY_CODING, 49);
                            intent.putExtra("android.intent.extra.TEXT", GroupDialog.this.getJSONText(GroupDialog.this.mMsg));
                            intent.putExtra(ServerMessageDataStorage.SLINK, true);
                            intent.putExtra("slinkuri", GroupDialog.this.mMsg.getSlink());
                            intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, GroupDialog.this.mMsg.getSender().getId());
                            GroupConvListFragment.this.startActivity(intent);
                        }

                        public void onShareToMyStatusClicked() {
                        }

                        public void onShareToPoolClicked() {
                            dialogFragment2.dismiss();
                            Intent intent = new Intent(GroupConvListFragment.this.getActivity(), CustomActionBarPageActivity.class);
                            intent.putExtra(AlbusModelObject.PAGE, 41);
                            intent.putExtra(HTTP.IDENTITY_CODING, 49);
                            intent.putExtra("android.intent.extra.TEXT", GroupDialog.this.getJSONText(GroupDialog.this.mMsg));
                            intent.putExtra(ServerMessageDataStorage.SLINK, true);
                            intent.putExtra("slinkuri", GroupDialog.this.mMsg.getSlink());
                            GroupConvListFragment.this.startActivityForResult(intent, 27);
                        }
                    });
                    return;
                case R.styleable.Theme_homeAsUpIndicator /*48*/:
                    AlbusDialog.setChooserTypeFile(new OnChooserTypeFile() {
                        public void onAudioType() {
                            try {
                                GroupConvListFragment.this.startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("audio/*"), 1);
                            } catch (ActivityNotFoundException e) {
                                AlbusUtils.setToastView(GroupConvListFragment.this.getActivity(), GroupConvListFragment.this.getString(R.string.file_manager_check));
                            }
                        }

                        public void onFileType() {
                            try {
                                GroupConvListFragment.this.startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("application/*|text/*"), 1);
                            } catch (ActivityNotFoundException e) {
                                AlbusUtils.setToastView(GroupConvListFragment.this.getActivity(), GroupConvListFragment.this.getString(R.string.file_manager_check));
                            }
                        }

                        public void onImageType() {
                            try {
                                GroupConvListFragment.this.startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("image/*"), 1);
                            } catch (ActivityNotFoundException e) {
                                AlbusUtils.setToastView(GroupConvListFragment.this.getActivity(), GroupConvListFragment.this.getString(R.string.file_manager_check));
                            }
                        }

                        public void onVideoType() {
                            try {
                                GroupConvListFragment.this.startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("video/*"), 1);
                            } catch (ActivityNotFoundException e) {
                                AlbusUtils.setToastView(GroupConvListFragment.this.getActivity(), GroupConvListFragment.this.getString(R.string.file_manager_check));
                            }
                        }
                    });
                    return;
                case R.styleable.Theme_selectableItemBackground /*52*/:
                    AlbusDialog.setOnChooserVideoResolutionClicked(new OnChooserVideoResolutionListener() {
                        public void onVideoHighResolution() {
                        }

                        public void onVideoLowResolution() {
                        }
                    });
                    return;
                default:
                    return;
            }
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    private void getChatData(boolean z, boolean z2) {
        this.mCatfiz.getgroupMessagesCount(this.mGroup, new GroupMessageCountCallback() {
            public void onData(int i) {
                GroupConvListFragment.this.mMaxMsg = i;
                GroupConvListFragment.this.mAdapter.setMaxMsg(GroupConvListFragment.this.mMaxMsg);
                Log.d(GroupConvListFragment.TAG, "count msg:" + i);
                GroupConvListFragment.this.mAdapter.notifyDataSetChanged();
            }

            public void onError() {
            }

            public void onSuccess() {
            }
        });
        if (z2) {
            this.mCatfiz.groupFetchMessagesWithLimit(this.mGroup, new FetchMessagesWithLimitCB(this, z, true), Long.parseLong(((Message) this.mMessages.get(0)).getTimeStamp()), 100, true);
            return;
        }
        this.mCatfiz.groupFetchMessagesWithLimit(this.mGroup, new FetchMessagesWithLimitCB(this, z, false), 0, this.mMaxList, true);
    }

    public static GroupConvListFragment newInstance() {
        return new GroupConvListFragment();
    }

    private void resetPendingState() {
        Log.d(TAG, "RESET PENDING STATE");
        this.mFileUriHelper = null;
        PendingStateUtils.resetPendingState(getActivity());
    }

    private void scrollToBottomHandler() {
        if (this.mMessages != null && this.mMessages.size() > 0) {
            mHandler.post(new Runnable() {
                public void run() {
                    GroupConvListFragment.this.getListView().setSelection(GroupConvListFragment.this.mMessages.size() - 1);
                }
            });
        }
    }

    private void setAttachedData(int i, String str) {
        this.mCurrentMessageType = i;
        this.mFilePathToSend = str;
    }

    private void showDeleteGroupDialog(Group group) {
        Bundle bundle = new Bundle();
        bundle.putString(AlbusModelObject.GROUP, group.getName());
        bundle.putString(CatfishRESTAPI.CFCOMPACT_STICKERID, group.getGroupID());
        bundle.putInt(AlbusModelObject.DIALOG, 40);
        AlbusDialog.showDialog(40, new GroupDialog(null), getActivity(), bundle, ((ChatGroupConvActivity) getActivity()).getSupportFragmentManager());
    }

    public void cancelFizzlink(long j, String str) {
        Intent intent = new Intent(BroadcastIntents.ACTION_CANCEL_FIZZLINK_DOWNLOAD);
        intent.putExtra(ServerMessageDataStorage.SEQUENCE, j);
        LocalBroadcastManager.getInstance(getActivity()).sendBroadcast(intent);
        this.mAdapter.setCancelFizlink("" + j);
        this.mAdapter.notifyDataSetChanged();
    }

    public void deleteSelected() {
        this.mCountSelected = 0;
        this.mAdapter.deleteSelection();
        finishMultiSelect();
    }

    public void downloadFizzlink(long j, String str) {
        for (Message message : this.mMessages) {
            if (message.getSequence() == j) {
                downloadFizzlink(message);
                return;
            }
        }
    }

    public void downloadFizzlink(Message message) {
        String fileName = message.getFizzlink().getFileName();
        Log.d(TAG, "Fizz old FileName:" + fileName);
        switch (Utils.getFileTypeFromPath(fileName)) {
            case e.c /*2*/:
                fileName = StorageDir.getGroupChatDir(4) + fileName;
                break;
            case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                fileName = StorageDir.getGroupChatDir(1) + fileName;
                break;
        }
        Log.d(TAG, "Fizz new FileName:" + fileName);
        message.getFizzlink().setFilePath(fileName);
        this.mCatfiz.fizzlinkDownload(message, null);
    }

    public void finishMultiSelect() {
        if (this.mMode != null) {
            this.mMode.finish();
        }
    }

    public void getAllData(boolean z) {
        getChatData(z, false);
        this.mCatfiz.requestProgressUploadDownload(new ProgressUploadDownload() {
            public void onError() {
            }

            public boolean onHasProgressUploadDownNUpload(Map map, Map map2) {
                Log.d(GroupConvListFragment.TAG, "hasil map : " + map2.entrySet().toString());
                GroupConvListFragment.this.mAdapter.setProgress(map, map2);
                GroupConvListFragment.this.mAdapter.notifyDataSetChanged();
                return false;
            }

            public void onSuccess() {
            }

            public boolean onUpdateProgressDownloadNUpload(String str, int i, int i2) {
                Log.d(GroupConvListFragment.TAG, "onHasProgressUploadDownNUpload int");
                return false;
            }
        });
        this.mbFirstEnter = false;
    }

    public View getAttachView() {
        return this.mLlAttachImage;
    }

    public Uri getUriHelperData() {
        return this.mFileUriHelper;
    }

    public boolean onActionItemClicked(ActionMode actionMode, MenuItem menuItem) {
        this.mMode = actionMode;
        switch (menuItem.getItemId()) {
            case R.id.multi_item_copy:
                AlbusUtils.setToastView(getActivity(), getString(R.string.message_copied));
                break;
            case R.id.multi_item_delete:
                Bundle bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 5);
                bundle.putInt(AlbusModelObject.VALUE, this.mCountSelected);
                AlbusDialog.showDialog(5, new DialogUI().getDialogInterface(), getActivity(), bundle, getActivity().getSupportFragmentManager());
                Log.d(TAG, "show action delete");
                break;
        }
        return true;
    }

    public void onActivityCreated(Bundle bundle) {
        super.onActivityCreated(bundle);
        if (bundle == null) {
            Log.d(TAG, "onActivityCreated");
        } else {
            Log.d(TAG, "onActivityCreated: with saved instance");
        }
        this.mAdapter = new GroupConvListAdapter(getActivity(), this.mMessages, this.mGroup.getName());
        setListAdapter(this.mAdapter);
        getListView().setVerticalFadingEdgeEnabled(false);
        getListView().setChoiceMode(3);
        getListView().setMultiChoiceModeListener(this);
        getListView().setOnItemLongClickListener(new OnItemLongClickListener() {
            public boolean onItemLongClick(AdapterView adapterView, View view, int i, long j) {
                return true;
            }
        });
    }

    public void onActivityResult(int i, int i2, Intent intent) {
        super.onActivityResult(i, i2, intent);
        Log.d(TAG, "onActivityResult(group): " + i + " " + i2);
        if (i2 == -1) {
            String path;
            Uri data;
            switch (i) {
                case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                case SimpleLog.LOG_LEVEL_OFF /*7*/:
                    if (this.mFileUriHelper == null) {
                        Log.d(TAG, "onActivityResult(chat), mFileUriHelper NULL");
                        return;
                    }
                    path = MediaFilePath.getPath(getActivity(), this.mFileUriHelper);
                    this.mBottomBar.setAttachFile(path);
                    Log.d(TAG, "Photo cam path:" + path);
                    setAttachedData(2, path);
                    return;
                case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                    path = MediaFilePath.getPath(getActivity(), intent.getData());
                    this.mBottomBar.setAttachFile(path);
                    Log.d(TAG, "Photo file path:" + path);
                    setAttachedData(2, path);
                    return;
                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                case Utils.FILE_TYPE_INSTALLER /*8*/:
                    Log.d(TAG, "Video uri :  " + intent.getData());
                    data = intent.getData();
                    this.mFileUriHelper = data;
                    path = MediaFilePath.getPath(getActivity(), data);
                    this.mBottomBar.setAttachFile(path);
                    Log.d(TAG, "Video path:" + path);
                    setAttachedData(3, path);
                    return;
                case HTTP.HT /*9*/:
                    break;
                case PinManagerV2.REGCODE_MAX /*12*/:
                    Log.d(TAG, "File uri :  " + intent.getData());
                    path = MediaFilePath.getPath(getActivity(), intent.getData());
                    this.mBottomBar.setAttachFile(path);
                    Log.d(TAG, "File path:" + path);
                    setAttachedData(4, path);
                    return;
                case R.styleable.Theme_actionModeStyle /*27*/:
                    AlbusUtils.setToastView(getActivity(), getString(R.string.fizzlink_sent));
                    break;
                case R.styleable.Theme_actionModeCloseButtonStyle /*28*/:
                case R.styleable.Theme_actionModeBackground /*29*/:
                    Log.d(TAG, "Video uri :  " + intent.getData());
                    data = intent.getData();
                    this.mFileUriHelper = data;
                    path = MediaFilePath.getPath(getActivity(), data);
                    this.mBottomBar.setAttachFile(path);
                    Log.d(TAG, "Video path:" + path);
                    setAttachedData(3, path);
                    return;
                default:
                    Log.d(TAG, "onActivityResult(group):UNHANDLED: " + i + " " + i2);
                    return;
            }
            getAllData(true);
        }
    }

    public void onCatfizStarted() {
        Log.d(TAG, "onCatfizStarted");
        getAllData(true);
    }

    public void onCatfizStopped() {
        Log.d(TAG, "onCatfizStopped");
    }

    public void onConfigurationChanged(Configuration configuration) {
        super.onConfigurationChanged(configuration);
        if (configuration.orientation == 2) {
            Log.d(TAG, "~~~~~~~~~~~~~~~~~ Landscape");
        } else if (configuration.orientation == 1) {
            Log.d(TAG, "~~~~~~~~~~~~~~~~~ Portrait");
            mHandler.post(new Runnable() {
                public void run() {
                    if (GroupConvListFragment.this.mFileUriHelper != null) {
                        String path = MediaFilePath.getPath(GroupConvListFragment.this.getActivity(), GroupConvListFragment.this.mFileUriHelper);
                        if (path != null) {
                            Log.d(GroupConvListFragment.TAG, ">>>>>>>>>> DATA:" + path + ", mFileUriHelper:" + GroupConvListFragment.this.mFileUriHelper);
                            switch (Utils.getFileTypeFromPath(path)) {
                                case e.b /*1*/:
                                    GroupConvListFragment.this.mBottomBar.setAttachFile(path);
                                    GroupConvListFragment.this.setAttachedData(2, path);
                                    break;
                                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                                    GroupConvListFragment.this.mBottomBar.setAttachFile(path);
                                    GroupConvListFragment.this.setAttachedData(3, path);
                                    break;
                                default:
                                    Log.d(GroupConvListFragment.TAG, "!!!! DATA NONE");
                                    break;
                            }
                            GroupConvListFragment.this.resetPendingState();
                            return;
                        }
                        Log.d(GroupConvListFragment.TAG, "!!!! PATH NULL");
                        return;
                    }
                    Log.d(GroupConvListFragment.TAG, "!!!! URI HELPER NULL");
                }
            });
        }
    }

    public void onCreate(Bundle bundle) {
        Log.d(TAG, "onCreate " + TAG);
        super.onCreate(bundle);
        this.mCatfiz = new Catfiz(getActivity(), this, new SignalBinderGroup());
    }

    public boolean onCreateActionMode(ActionMode actionMode, Menu menu) {
        getActivity().getMenuInflater().inflate(R.menu.actionbar_multiple_select, menu);
        menu.setGroupVisible(R.id.multi_select2, true);
        return true;
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        Log.d(TAG, "onCreateView " + TAG);
        final View inflate = layoutInflater.inflate(R.layout.fragment_chat_group_view, viewGroup, false);
        this.mBottomBar = (ChatsBottomBarView) inflate.findViewById(R.id.cv_bottom_bar);
        this.mBottomBar.setOnEmojiPanelAnimation(new onPanelEmojiAnimation() {
            public void onPanelDown() {
            }

            public void onPanelDownFinished() {
            }

            public void onPanelUp(View view) {
                ((ChatGroupConvActivity) GroupConvListFragment.this.getActivity()).dismissKeyboard(view);
                GroupConvListFragment.this.chatListView = GroupConvListFragment.this.getListView();
                GroupConvListFragment.this.mAdapter.notifyDataSetChanged();
                GroupConvListFragment.this.chatListView.clearFocus();
                GroupConvListFragment.this.chatListView.post(new Runnable() {
                    public void run() {
                        GroupConvListFragment.this.chatListView.setSelection(GroupConvListFragment.this.mAdapter.getCount() - 1);
                    }
                });
            }

            public void onPanelUpFinished(View view) {
            }
        });
        this.mBottomBar.setOnEmojiPanelComponentListener(new onEmojiPanelComponentListener() {
            public void onBtnKeyboardPressed(View view) {
                ((ChatGroupConvActivity) GroupConvListFragment.this.getActivity()).showKeyboard(view);
            }

            public void onBtnSendPressed(String str) {
                final Message message = new Message(AlbusUtils.removeUnecessaryHtmlTag(str));
                if (GroupConvListFragment.this.mCurrentMessageType == 1) {
                    Log.d(GroupConvListFragment.TAG, "Will Send MESSAGE_TYPE_PLAIN");
                    GroupConvListFragment.this.mCatfiz.groupSendMessage(GroupConvListFragment.this.mGroup, message, new Callback() {
                        public void onError() {
                            Log.d(GroupConvListFragment.TAG, "Error Send Message");
                        }

                        public void onSuccess() {
                            Log.d(GroupConvListFragment.TAG, "Success Send Message:" + message.getText());
                            GroupConvListFragment.this.getAllData(true);
                        }
                    });
                } else if (GroupConvListFragment.this.mCurrentMessageType == 7) {
                    String quoteJSONStringBuilder = QuoteUtils.quoteJSONStringBuilder(GroupConvListFragment.this.mMsgHelper, message.getText());
                    Log.d(GroupConvListFragment.TAG, "Will Send MESSAGE_TYPE_QUOTED:" + quoteJSONStringBuilder);
                    GroupConvListFragment.this.mCatfiz.groupSendQuotedMessage(GroupConvListFragment.this.mGroup, new Message(quoteJSONStringBuilder), new Callback() {
                        public void onError() {
                            Log.d(GroupConvListFragment.TAG, "Error Send Message");
                        }

                        public void onSuccess() {
                            Log.d(GroupConvListFragment.TAG, "Success Send Message");
                            GroupConvListFragment.this.getAllData(true);
                        }
                    });
                    GroupConvListFragment.this.mBottomBar.closeAttachAndEmoPanel();
                    GroupConvListFragment.this.setAttachedData(1, "");
                    GroupConvListFragment.this.mMsgHelper = null;
                } else {
                    int i = 0;
                    switch (GroupConvListFragment.this.mCurrentMessageType) {
                        case e.c /*2*/:
                            Log.d(GroupConvListFragment.TAG, "Will Send MESSAGE_TYPE_PHOTO:" + GroupConvListFragment.this.mFilePathToSend);
                            i = PoolDataType.IMAGE.ordinal();
                            break;
                        case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                            Log.d(GroupConvListFragment.TAG, "Will Send MESSAGE_TYPE_VIDEO:" + GroupConvListFragment.this.mFilePathToSend);
                            i = PoolDataType.VIDEO.ordinal();
                            break;
                        case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                            Log.d(GroupConvListFragment.TAG, "Will Send MESSAGE_TYPE_FILE:" + GroupConvListFragment.this.mFilePathToSend);
                            i = PoolDataType.FILE.ordinal();
                            message.setAttacType(1);
                            break;
                        case Utils.FILE_TYPE_INSTALLER /*8*/:
                            Log.d(GroupConvListFragment.TAG, "Will Send MESSAGE_TYPE_VIDEO:" + GroupConvListFragment.this.mFilePathToSend);
                            i = PoolDataType.VIDEO.ordinal();
                            break;
                    }
                    switch (Utils.getFileTypeFromPath(GroupConvListFragment.this.mFilePathToSend)) {
                        case e.c /*2*/:
                        case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                            i = PoolDataType.VIDEO.ordinal();
                            break;
                        default:
                            Log.d(GroupConvListFragment.TAG, "Message will be send as it be:" + GroupConvListFragment.this.mFilePathToSend);
                            break;
                    }
                    GroupConvListFragment.this.mCatfiz.groupSendAttachedMessage(GroupConvListFragment.this.mGroup, message, GroupConvListFragment.this.mFilePathToSend, Utils.getExtension(GroupConvListFragment.this.mFilePathToSend).equals(".gif") ? PoolDataType.FILE.ordinal() : i, new Callback() {
                        public void onError() {
                            Log.d(GroupConvListFragment.TAG, "Error Send Attached GroupMessage");
                        }

                        public void onSuccess() {
                            Log.d(GroupConvListFragment.TAG, "Success Send Attached GroupMessage:" + GroupConvListFragment.this.mFilePathToSend);
                            GroupConvListFragment.this.getAllData(true);
                        }
                    });
                    GroupConvListFragment.this.mBottomBar.closeAttachAndEmoPanel();
                    GroupConvListFragment.this.setAttachedData(1, "");
                    GroupConvListFragment.this.resetPendingState();
                }
            }

            public void onBtnStickerActive(ImageButton imageButton, boolean z) {
                if (z) {
                    imageButton.setImageResource(R.drawable.ic_emot_dark);
                    GroupConvListFragment.this.scrollToBottomHandler();
                    return;
                }
                imageButton.setImageResource(R.drawable.ic_sticker_dark);
            }

            public void onEditTextFocusChanged() {
                ((ChatGroupConvActivity) GroupConvListFragment.this.getActivity()).finishActionMode();
                GroupConvListFragment.this.scrollToBottomHandler();
            }
        });
        this.mBottomBar.setOnAttachmentClickListener(new onAttachmentClickListener() {
            public void onCancelAttachmentClicked() {
                GroupConvListFragment.this.setAttachedData(1, "");
            }

            public void onContactPIN() {
                Intent intent = new Intent(GroupConvListFragment.this.getActivity(), CustomActionBarPageActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 33);
                intent.putExtra(HTTP.IDENTITY_CODING, 33);
                intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, GroupConvListFragment.this.mGroup.getGroupID());
                GroupConvListFragment.this.startActivityForResult(intent, 9);
            }

            public void onFileAttachmentClicked() {
                try {
                    GroupConvListFragment.this.startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("*/*"), 12);
                } catch (ActivityNotFoundException e) {
                    AlbusUtils.setToastView(GroupConvListFragment.this.getActivity(), GroupConvListFragment.this.getString(R.string.file_manager_check));
                }
            }

            public void onFizzlinkAttachmentClicked() {
                Intent intent = new Intent(GroupConvListFragment.this.getActivity(), CustomActionBarPageActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 57);
                intent.putExtra(HTTP.IDENTITY_CODING, 2);
                intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, GroupConvListFragment.this.mGroup.getGroupID());
                GroupConvListFragment.this.startActivityForResult(intent, 27);
            }

            public void onMusicAttachmentClicked() {
                try {
                    GroupConvListFragment.this.startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("audio/*"), 28);
                } catch (ActivityNotFoundException e) {
                    AlbusUtils.setToastView(GroupConvListFragment.this.getActivity(), GroupConvListFragment.this.getString(R.string.file_manager_check));
                }
            }

            public void onPhotoAttachmentClicked(Uri uri) {
                Bundle bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 36);
                AlbusDialog.showDialog(36, new DialogUI().getDialogInterface(), GroupConvListFragment.this.getActivity(), bundle, GroupConvListFragment.this.getActivity().getSupportFragmentManager());
                GroupConvListFragment.this.mFileUriHelper = uri;
            }

            public void onSendBlitz() {
            }

            public void onVideoAttachmentClicked() {
                Bundle bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 37);
                AlbusDialog.showDialog(37, new GroupDialog(null), GroupConvListFragment.this.getActivity(), bundle, GroupConvListFragment.this.getActivity().getSupportFragmentManager());
            }

            public void onVoiceAttachmentClicked(String str) {
                GroupConvListFragment.this.mCatfiz.groupSendAttachedMessage(GroupConvListFragment.this.mGroup, new Message(""), str, PoolDataType.VOICE.ordinal(), new Callback() {
                    public void onError() {
                        Log.d(GroupConvListFragment.TAG, "Error Send Attached Voice GroupMessage!");
                    }

                    public void onSuccess() {
                        Log.d(GroupConvListFragment.TAG, "Success Send Attached Voice GroupMessage");
                        GroupConvListFragment.this.getAllData(true);
                        GroupConvListFragment.this.mBottomBar.closeAttachAndEmoPanel();
                        GroupConvListFragment.this.setAttachedData(1, "");
                    }
                });
            }
        });
        this.mMessages = new ArrayList();
        String toUpperCase = getActivity().getIntent().getStringExtra(CatfishRESTAPI.CFCOMPACT_STICKERID).toUpperCase(Locale.US);
        this.mGroup = new Group(toUpperCase);
        this.mGroup.setName(getActivity().getIntent().getStringExtra(CatfishDataStorage.NIC_NAME));
        this.mGroup.setDeleted(getActivity().getIntent().getBooleanExtra(AlbusModelObject.IS_DELETED, false));
        this.mMaxList = 100;
        this.mUnreadMsg = getActivity().getIntent().getIntExtra(AlbusModelObject.UNREAD_MSG, 0);
        while (this.mUnreadMsg > this.mMaxList) {
            this.mMaxList += this.mMaxList;
        }
        this.mBottomBar.setParams(1, toUpperCase.replace(":", "_"));
        inflate.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
            public void onGlobalLayout() {
                Rect rect = new Rect();
                inflate.getWindowVisibleDisplayFrame(rect);
                int height = inflate.getRootView().getHeight();
                int i = height - (rect.bottom - rect.top);
                if (GroupConvListFragment.this.mHeightDiffHelper != i) {
                    GroupConvListFragment.this.mHeightDiffHelper = i;
                    Log.d(GroupConvListFragment.TAG, "ScreenHeight:" + height + ", Keyboard heightDiff:" + i);
                    if (i > ((int) (((float) height) * AlbusModelObject.PROBABLY_SOFT_KEYBOARD_HEIGHT_RATIO))) {
                        GroupConvListFragment.this.mBottomBar.onKeyboardEmoShowState(true);
                    } else {
                        GroupConvListFragment.this.mBottomBar.onKeyboardEmoShowState(false);
                    }
                }
            }
        });
        Log.d(TAG, "end of onCreateView " + TAG);
        return inflate;
    }

    public void onDestroy() {
        super.onDestroy();
        Log.d(TAG, "onDestroy");
        this.mCatfiz.destroy();
    }

    public void onDestroyActionMode(ActionMode actionMode) {
        this.mAdapter.removeAllSelection();
    }

    public void onItemCheckedStateChanged(ActionMode actionMode, int i, long j, boolean z) {
        this.mCountSelected = getListView().getCheckedItemCount();
        if (z) {
            this.mAdapter.setNewSelection(i, z);
            actionMode.setTitle("" + this.mCountSelected);
            return;
        }
        this.mAdapter.removeSelection(i);
        actionMode.setTitle("" + this.mCountSelected);
    }

    public void onPause() {
        super.onPause();
        Log.d(TAG, "onPause");
    }

    public boolean onPrepareActionMode(ActionMode actionMode, Menu menu) {
        return false;
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        Log.d(TAG, "onResume");
        this.mCatfiz.start();
        if (this.mGroup.isDeleted()) {
            showDeleteGroupDialog(this.mGroup);
        }
        if (!this.mbFirstEnter) {
            this.mCatfiz.fetchGroup(this.mGroup.getGroupID(), new CheckGroupConvUnreadCb(this));
        }
    }

    public void onSaveInstanceState(Bundle bundle) {
        super.onSaveInstanceState(bundle);
        Log.d(TAG, "**** WOW....SIMPAAN....****");
    }

    public boolean onSignalEvent(Signal signal) {
        Log.d(TAG, "onSignalEvent:" + signal);
        switch (AnonymousClass12.$SwitchMap$com$catfiz$signal$Signal[signal.ordinal()]) {
            case e.b /*1*/:
                if (this.mCatfiz.isCatfizStarted()) {
                    getChatData(false, false);
                    break;
                }
                break;
            case e.c /*2*/:
                if (this.mCatfiz.isCatfizStarted() && this.mGroup.getGroupID().equals(this.mGroup.getGroupID())) {
                    this.mGroup.setDeleted(true);
                    showDeleteGroupDialog(this.mGroup);
                    break;
                }
        }
        return true;
    }

    public boolean onSignalEventNewMessageGroup(Signal signal, String str) {
        Log.d(TAG, "onSignalEventNewMessageGroup: " + signal + " " + str);
        if (!(this.mGroup.getGroupID() == null || this.mGroup.getGroupID().isEmpty() || !this.mGroup.getGroupID().equals(str))) {
            Log.e(TAG, "THIS ROOM, PROCEED");
            switch (AnonymousClass12.$SwitchMap$com$catfiz$signal$Signal[Signal.values()[signal.ordinal()].ordinal()]) {
                case e.b /*1*/:
                    getChatData(false, false);
                    break;
                default:
                    break;
            }
        }
        return false;
    }

    public boolean onSignalUpdateProgress(Signal signal, String str, int i, int i2) {
        this.mAdapter.setUpdateProgress(str, i, i2);
        Log.d(TAG, "progresss : " + str + "progresss : " + i + "state " + i2);
        this.mAdapter.notifyDataSetChanged();
        return false;
    }

    public boolean onSignalUpdateProgress(Signal signal, Map map, Map map2) {
        this.mAdapter.setProgress(map, map2);
        Log.d(TAG, "on has progress upload download : ");
        this.mAdapter.notifyDataSetChanged();
        return false;
    }

    public void onStart() {
        super.onStart();
        Log.d(TAG, "onStart");
    }

    public void onStop() {
        super.onStop();
        Log.d(TAG, "onStop");
        this.mCatfiz.finish();
    }

    public void onViewStateRestored(Bundle bundle) {
        super.onViewStateRestored(bundle);
        Log.d(TAG, "**** NAH...KEMBALI BOS...****");
    }

    public void openShowMore() {
        this.mMaxList += 100;
        getChatData(false, true);
    }

    public void refreshData() {
        this.mAdapter.notifyDataSetChanged();
    }

    public void retryUploadMessage(Message message) {
        int ordinal;
        Log.d(TAG, "Should retry send group message");
        String imageFilePath = message.getImageFilePath();
        if (imageFilePath.isEmpty()) {
            imageFilePath = message.getVoiceFilePath();
        }
        String dataFilePath = imageFilePath.isEmpty() ? message.getDataFilePath() : imageFilePath;
        if (FileMetaInfo.isFileMetaInfoValid(message.getText())) {
            message.setText(FileMetaInfo.metaInfoBuilder(message.getText()).getCaption());
        }
        switch (Utils.getFileTypeFromPath(dataFilePath)) {
            case e.c /*2*/:
            case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                ordinal = PoolDataType.VIDEO.ordinal();
                break;
            default:
                ordinal = PoolDataType.FILE.ordinal();
                break;
        }
        Log.d(TAG, "Resend:" + ordinal + " " + dataFilePath);
        this.mCatfiz.groupReSendAttachedMessage(this.mGroup, message, dataFilePath, ordinal, new Callback() {
            public void onError() {
                Log.d(GroupConvListFragment.TAG, "Error Send Attached GroupMessage");
            }

            public void onSuccess() {
                Log.d(GroupConvListFragment.TAG, "Success Send Attached GroupMessage:");
                GroupConvListFragment.this.getAllData(true);
            }
        });
    }

    public void saveConversation() {
        AlbusUtils.setToastView(getActivity(), WriteMsgToExternalStorage.generateNote(getActivity(), ("Message_" + this.mGroup.getName() + "_" + this.mGroup.getGroupID()).replace(":", "-"), this.mMessages, this.mGroup.getName(), true));
    }

    public void selectAttachedPhotoByCamera() {
        Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
        intent.putExtra("output", this.mFileUriHelper);
        startActivityForResult(intent, 4);
    }

    public void selectAttachedPhotoByFile() {
        try {
            startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("image/*"), 5);
        } catch (ActivityNotFoundException e) {
            AlbusUtils.setToastView(getActivity(), getString(R.string.file_manager_check));
        }
    }

    public void setListSelection(int i) {
        getListView().setSelection(i);
    }

    public void shareFizzlink(long j, String str) {
        for (Message message : this.mMessages) {
            if (message.getSequence() == j) {
                message.getFizzlink().setLink(message.getSlink());
                Bundle bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 47);
                AlbusDialog.showDialog(47, new GroupDialog(message), getActivity(), bundle, ((ChatGroupConvActivity) getActivity()).getSupportFragmentManager());
                return;
            }
        }
    }

    public void showItemLongClickDialog(Message message) {
        Bundle bundle = new Bundle();
        bundle.putString(ServerMessageDataStorage.MESSAGE, message.getText());
        bundle.putString(AlbusModelObject.FRIEND_ID, this.mGroup.getGroupID());
        bundle.putLong(ServerMessageDataStorage.SEQUENCE, message.getSequence());
        bundle.putInt(AlbusModelObject.DIALOG, 39);
        AlbusDialog.showDialog(39, new GroupDialog(message), getActivity(), bundle, getActivity().getSupportFragmentManager());
    }

    public void streamThumbnailDownload(String str) {
        this.mCatfiz.getStreamThumbnailDownload(str, new StreamHasThumbnailCallback() {
            public void onError() {
            }

            public void onStreamHasThumbnail(String str, int i) {
                if (i == 1) {
                    Log.d(GroupConvListFragment.TAG, "thumbnail ready....: " + str);
                    GroupConvListFragment.this.getAllData(false);
                }
            }

            public void onSuccess() {
            }
        });
        Log.d(TAG, "download thumbnail");
    }
}
