package com.albus.fragment;

import android.os.Bundle;
import android.support.v4.app.ListFragment;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;
import com.albus.activity.CustomActionBarPageActivity;
import com.albus.adapter.SelectFizzlinkAdapter;
import com.albus.view.CustomActionbarView;
import com.albus.view.CustomActionbarView.OnActionbarButtonClicked;
import com.albus.view.CustomActionbarView.OnActionbarMenuButtonClicked;
import com.catfiz.R;
import com.catfiz.base.Callback.FizzlinkUploadedList;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.model.Fizzlink;
import com.catfiz.signal.Signal;
import com.catfiz.util.Log;
import java.io.File;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class SelectFizzlinkFragment extends ListFragment implements ICatfiz {
    private static final String TAG = SelectFizzlinkFragment.class.getSimpleName();
    private CustomActionbarView mActionbar = null;
    private SelectFizzlinkAdapter mAdapter = null;
    private Catfiz mCatfiz = null;
    private EditText mEtSearch = null;
    private List mFizzlink = null;
    private List mFizzlinkSearchHelper = null;
    private ImageButton mIbClear = null;
    private int mIdentity = -1;
    private boolean mIsSelected = false;
    private int mPage = -1;
    private RelativeLayout mRlDfView = null;

    public class FetchFizzlinkCb implements FizzlinkUploadedList {
        private WeakReference mThisFragmentRef;

        public FetchFizzlinkCb(SelectFizzlinkFragment selectFizzlinkFragment) {
            this.mThisFragmentRef = new WeakReference(selectFizzlinkFragment);
        }

        public void onData(List list) {
            SelectFizzlinkFragment selectFizzlinkFragment = (SelectFizzlinkFragment) this.mThisFragmentRef.get();
            if (selectFizzlinkFragment != null) {
                selectFizzlinkFragment.mFizzlink.clear();
                selectFizzlinkFragment.mFizzlink.addAll(list);
                selectFizzlinkFragment.mFizzlinkSearchHelper.clear();
                selectFizzlinkFragment.mFizzlinkSearchHelper.addAll(list);
                if (list.size() > 0) {
                    selectFizzlinkFragment.setDfView(false);
                } else {
                    selectFizzlinkFragment.setDfView(true);
                }
                selectFizzlinkFragment.mAdapter.notifyDataSetChanged();
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    public static SelectFizzlinkFragment newInstance(Bundle bundle) {
        return new SelectFizzlinkFragment();
    }

    public void getAllData() {
        this.mCatfiz.getUploadedFizzlink(new FetchFizzlinkCb(this));
    }

    public void limitListView(String str, boolean z) {
        if (str.length() > 0) {
            if (z) {
                this.mFizzlink.clear();
                this.mFizzlink.addAll(this.mFizzlinkSearchHelper);
            }
            Collection arrayList = new ArrayList();
            for (Fizzlink fizzlink : this.mFizzlink) {
                if (fizzlink != null) {
                    String name = new File(fizzlink.getFilePath()).getName();
                    if (!(name == null || name.isEmpty() || !name.toLowerCase().contains(str.toLowerCase()))) {
                        arrayList.add(fizzlink);
                    }
                }
            }
            this.mFizzlink.clear();
            this.mFizzlink.addAll(arrayList);
            this.mAdapter.notifyDataSetChanged();
            return;
        }
        getAllData();
    }

    public void onActivityCreated(Bundle bundle) {
        super.onActivityCreated(bundle);
        getListView().setChoiceMode(1);
        this.mAdapter = new SelectFizzlinkAdapter(getActivity(), this.mFizzlink);
        setListAdapter(this.mAdapter);
    }

    public void onCatfizStarted() {
        getAllData();
    }

    public void onCatfizStopped() {
    }

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        this.mCatfiz = new Catfiz(getActivity(), this);
        this.mPage = ((CustomActionBarPageActivity) getActivity()).getPage();
        this.mIdentity = ((CustomActionBarPageActivity) getActivity()).getIdentity();
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        Log.d(TAG, "onCreateView:" + TAG);
        View inflate = layoutInflater.inflate(R.layout.fragment_select_fizzlink, viewGroup, false);
        this.mIbClear = (ImageButton) inflate.findViewById(R.id.ib_clear);
        this.mEtSearch = (EditText) inflate.findViewById(R.id.et_search);
        this.mRlDfView = (RelativeLayout) inflate.findViewById(R.id.rl_df_content);
        this.mActionbar = (CustomActionbarView) inflate.findViewById(R.id.custom_actionbar);
        this.mActionbar.setOnActionbarButtonClickListener(new OnActionbarButtonClicked() {
            public void onBtnActionActiveClicked() {
                SelectFizzlinkFragment.this.mIdentity;
            }

            public void onBtnCloseClicked() {
                SelectFizzlinkFragment.this.getActivity().finish();
            }
        });
        this.mActionbar.setOnActionbarMenuButtonClickListener(new OnActionbarMenuButtonClicked() {
            public void onBtnCategoryClicked() {
            }

            public void onBtnSelectAllClicked() {
                if (!SelectFizzlinkFragment.this.mIsSelected) {
                }
            }
        });
        this.mActionbar.setNoButton();
        this.mActionbar.setTitle(getActivity().getString(R.string.attach_fizzlink));
        this.mEtSearch.requestFocus();
        this.mIbClear.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                SelectFizzlinkFragment.this.mEtSearch.setText("");
                SelectFizzlinkFragment.this.mEtSearch.clearFocus();
            }
        });
        this.mFizzlink = new ArrayList();
        this.mFizzlinkSearchHelper = new ArrayList();
        this.mEtSearch.requestFocus();
        this.mEtSearch.addTextChangedListener(new TextWatcher() {
            public void afterTextChanged(Editable editable) {
            }

            public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
            }

            public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                String obj = SelectFizzlinkFragment.this.mEtSearch.getText().toString();
                boolean z = i3 == 0 || i2 > i3;
                SelectFizzlinkFragment.this.limitListView(obj, z);
            }
        });
        this.mEtSearch.setOnEditorActionListener(new OnEditorActionListener() {
            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
                if (keyEvent != null && keyEvent.getAction() != 0) {
                    return false;
                }
                if ((keyEvent != null && i != 6 && keyEvent.getKeyCode() != 66) || keyEvent == null || keyEvent.isShiftPressed()) {
                    return false;
                }
                SelectFizzlinkFragment.this.mEtSearch.clearFocus();
                return true;
            }
        });
        return inflate;
    }

    public void onDestroy() {
        super.onDestroy();
        this.mCatfiz.destroy();
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
        if (this.mCatfiz.isCatfizStarted()) {
            limitListView(this.mEtSearch.getText().toString(), false);
        }
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    public void onStop() {
        super.onStop();
        this.mCatfiz.finish();
    }

    public void setDfView(boolean z) {
        if (z) {
            this.mRlDfView.setVisibility(0);
        } else {
            this.mRlDfView.setVisibility(8);
        }
    }
}
