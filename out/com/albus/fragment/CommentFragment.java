package com.albus.fragment;

import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Rect;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.Fragment;
import android.support.v4.app.ListFragment;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.TextView;
import com.albus.activity.ChatGroupConvActivity;
import com.albus.activity.CommentActivity;
import com.albus.activity.CustomActionBarPageActivity;
import com.albus.activity.MenuActivity;
import com.albus.activity.ProfilesActivity;
import com.albus.activity.ProfilesFriendActivity;
import com.albus.adapter.CommentAdapter;
import com.albus.cfspan.CFLinkify;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.AlbusDialog.OnAttachItemListener;
import com.albus.dialog.AlbusDialog.OnChooserVideoResolutionListener;
import com.albus.dialog.AlbusDialogInterface;
import com.albus.dialog.DialogUI;
import com.albus.imagespan.SmiledText;
import com.albus.media.ImageCache;
import com.albus.media.ImageCache.ImageCacheParams;
import com.albus.media.ThumbnailLoader;
import com.albus.media.UserPhotoLoader;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.util.LongMessageCache;
import com.albus.util.LongMessageCache.LongMessageCacheParams;
import com.albus.util.LongMessageWorker;
import com.albus.util.PendingStateUtils;
import com.albus.util.QuoteUtils;
import com.albus.view.ChatsBottomBarView;
import com.albus.view.ChatsBottomBarView.onAttachmentClickListener;
import com.albus.view.ChatsBottomBarView.onEmojiPanelComponentListener;
import com.albus.view.ChatsBottomBarView.onPanelEmojiAnimation;
import com.albus.view.CircleImageView;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Callback.FetchFriendCallback;
import com.catfiz.base.Callback.FetchStatusComment;
import com.catfiz.base.Callback.GetCountCallback;
import com.catfiz.base.Callback.ProgressUploadDownload;
import com.catfiz.base.Callback.UserFetchStatusLike;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.base.ICatfiz.ICatfizNewMessage;
import com.catfiz.base.ICatfiz.ICatfizUpdateProgress;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.model.Comment;
import com.catfiz.model.Quote;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.CatfishService;
import com.catfiz.service.FriendListDataStorage;
import com.catfiz.service.LongMessageExecutor;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.signal.Signal;
import com.catfiz.signal.SignalBinderComment;
import com.catfiz.util.Log;
import com.catfiz.util.MediaFilePath;
import com.catfiz.util.Utils;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.LangUtils;

public class CommentFragment extends ListFragment implements ICatfiz, ICatfizNewMessage, ICatfizUpdateProgress {
    private static final String TAG = CommentFragment.class.getSimpleName();
    private static Handler mHandler = new Handler();
    private CommentAdapter mAdapter = null;
    public ChatsBottomBarView mBottomBar = null;
    private Catfiz mCatfiz = null;
    private List mComment = null;
    private Comment mCommentHelper = null;
    private ListView mCommentListView = null;
    private int mCurrentMessageType = 1;
    public String mFilePathToSend = "";
    private Uri mFileUriHelper = null;
    private int mHeightDiffHelper = 0;
    private ImageButton mIbLike = null;
    private String mId = "";
    private int mIsMeLikeStatus = 0;
    private LongMessageWorker mLongMessageWorker = null;
    private String mName = "";
    private String mReceiverId = "";
    private CircleImageView mRivIcon = null;
    private boolean mScrollLastComment;
    private String mStatus = "";
    private int mStatusLike = 0;
    private long mStatusSequence = 0;
    private ThumbnailLoader mThumbnailLoader = null;
    private TextView mTvDate = null;
    private TextView mTvName = null;
    private TextView mTvStatus = null;
    public TextView mTvSumCommStatus = null;
    private TextView mTvSumLike = null;
    private UserPhotoLoader mUserPhotoLoader = null;
    private boolean mbFirstEnter = true;
    private boolean mfromButtonComment = false;

    /* synthetic */ class AnonymousClass19 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType = new int[MessageType.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.PROMOTECONTACT.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTVOICESTATUS.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTVIDEOSTATUS.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTIMAGESTATUS.ordinal()] = 4;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SHARE_SLINK_AT_COMMENT.ordinal()] = 5;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.LONGSTATUSCOMMENT.ordinal()] = 6;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.STIKER_MESSAGE_STATUS.ordinal()] = 7;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.LONG_MESSAGE.ordinal()] = 8;
            } catch (NoSuchFieldError e8) {
            }
        }
    }

    class CheckCommentUnreadCb implements FetchFriendCallback {
        private WeakReference mThisFragmentRef;

        public CheckCommentUnreadCb(CommentFragment commentFragment) {
            this.mThisFragmentRef = new WeakReference(commentFragment);
        }

        public void onData(User user, String str) {
            if (((CommentFragment) this.mThisFragmentRef.get()) != null && user != null) {
                int unreadStatusComment = user.getUnreadStatusComment();
                Log.d(CommentFragment.TAG, "~~~CheckCommentUnreadCb:" + unreadStatusComment);
                if (unreadStatusComment > 0) {
                    CommentFragment.this.getAllData(true);
                }
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    class CommentClickedDialog implements AlbusDialogInterface {
        private Comment mComment;
        private boolean mIsMeLikeThis = false;

        public CommentClickedDialog(Comment comment, boolean z) {
            this.mComment = comment;
            this.mIsMeLikeThis = z;
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
            Log.d(CommentFragment.TAG, "onShowDialog: " + i);
            switch (i) {
                case R.styleable.Theme_dialogTheme /*42*/:
                    final String id = this.mComment.getSender().getId();
                    final long sequence = this.mComment.getSequence();
                    TextView textView = (TextView) view.findViewById(R.id.tv_name);
                    TextView textView2 = (TextView) view.findViewById(R.id.tv_chooser1);
                    TextView textView3 = (TextView) view.findViewById(R.id.tv_chooser2);
                    TextView textView4 = (TextView) view.findViewById(R.id.tv_chooser3);
                    TextView textView5 = (TextView) view.findViewById(R.id.tv_chooser4);
                    TextView textView6 = (TextView) view.findViewById(R.id.tv_chooser5);
                    textView4.setText(R.string.copy_cmnt);
                    textView.setText(R.string.comment_menu);
                    textView5.setText(R.string.delete_cmnt);
                    textView6.setText(R.string.btn_wholike);
                    textView2.setText(R.string.like);
                    textView3.setText(R.string.quote_cmnt);
                    textView2.setVisibility(0);
                    textView3.setVisibility(0);
                    textView4.setVisibility(0);
                    final int messageType = this.mComment.getMessageType();
                    final String statusComment = this.mComment.getStatusComment();
                    boolean isEmpty = statusComment.isEmpty();
                    Log.d(CommentFragment.TAG, "Delivery:" + this.mComment.getDeliveryStatus());
                    switch (AnonymousClass19.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[messageType].ordinal()]) {
                        case e.b /*1*/:
                        case e.c /*2*/:
                        case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                            isEmpty = true;
                            break;
                        case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                            if (!(this.mComment.getDeliveryStatus() == MessageDeliveryStatus.BCASTRECEIVED.ordinal() || this.mComment.getDeliveryStatus() == MessageDeliveryStatus.BCASTSENT.ordinal())) {
                                isEmpty = true;
                                break;
                            }
                        case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                            if (AlbusUtils.getSlinkFromJson(statusComment, ServerMessageDataStorage.SLINK) != null) {
                                if (AlbusUtils.getSlinkFromJson(statusComment, ServerMessageDataStorage.MESSAGE).isEmpty()) {
                                    isEmpty = true;
                                    break;
                                }
                            }
                            isEmpty = true;
                            break;
                            break;
                        case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                            isEmpty = false;
                            textView3.setVisibility(8);
                            break;
                        case SimpleLog.LOG_LEVEL_OFF /*7*/:
                            textView3.setVisibility(8);
                            textView4.setVisibility(8);
                            break;
                    }
                    if (isEmpty) {
                        textView4.setVisibility(8);
                        textView3.setVisibility(8);
                    }
                    if (bundle.getBoolean(AlbusModelObject.OWNER) || id.equals(CatfishService.getUserPIN())) {
                        textView5.setVisibility(0);
                    } else {
                        textView5.setVisibility(8);
                    }
                    if (this.mIsMeLikeThis) {
                        textView2.setText(CommentFragment.this.getActivity().getString(R.string.unlike));
                    } else {
                        textView2.setText(CommentFragment.this.getActivity().getString(R.string.like));
                    }
                    if (bundle.getInt(AlbusModelObject.LIKE_COUNT) > 0) {
                        textView6.setVisibility(0);
                    } else {
                        textView6.setVisibility(8);
                    }
                    final DialogFragment dialogFragment2 = dialogFragment;
                    textView4.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment2.dismiss();
                            if (CommentClickedDialog.this.mComment.getStatusComment().equals("")) {
                                AlbusUtils.setToastView(CommentFragment.this.getActivity(), CommentFragment.this.getActivity().getString(R.string.nocopied));
                                return;
                            }
                            switch (AnonymousClass19.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[messageType].ordinal()]) {
                                case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                                    if (AlbusUtils.getSlinkFromJson(statusComment, ServerMessageDataStorage.SLINK) != null) {
                                        AlbusUtils.copyToClipboard(CommentFragment.this.getActivity(), AlbusUtils.getSlinkFromJson(statusComment, ServerMessageDataStorage.MESSAGE));
                                        break;
                                    }
                                    break;
                                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                                case Utils.FILE_TYPE_INSTALLER /*8*/:
                                    AlbusUtils.copyToClipboard(CommentFragment.this.getActivity(), LongMessageExecutor.getLongMessage(CommentClickedDialog.this.mComment.getSequence()));
                                    break;
                                default:
                                    if (!QuoteUtils.isQuoteMessage(statusComment)) {
                                        AlbusUtils.copyToClipboard(CommentFragment.this.getActivity(), statusComment);
                                        break;
                                    }
                                    Quote quoteJSONStringDecoder = QuoteUtils.quoteJSONStringDecoder(statusComment);
                                    if (quoteJSONStringDecoder != null) {
                                        AlbusUtils.copyToClipboard(CommentFragment.this.getActivity(), quoteJSONStringDecoder.getMyMessage());
                                        break;
                                    }
                                    break;
                            }
                            AlbusUtils.setToastView(CommentFragment.this.getActivity(), CommentFragment.this.getActivity().getString(R.string.text_copied));
                        }
                    });
                    final DialogFragment dialogFragment3 = dialogFragment;
                    textView5.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment3.dismiss();
                            ((CommentActivity) CommentFragment.this.getActivity()).mFragment.deleteComment(id, "{\"senderpin\":\"" + id + "\",\"sequence\":\"" + sequence + "\"}");
                        }
                    });
                    dialogFragment3 = dialogFragment;
                    textView2.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment3.dismiss();
                            CommentFragment.this.setLikeStatusComment(false, id, sequence);
                        }
                    });
                    dialogFragment2 = dialogFragment;
                    textView6.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment2.dismiss();
                            Intent intent = new Intent(CommentFragment.this.getActivity(), MenuActivity.class);
                            intent.putExtra(AlbusModelObject.PAGE, 32);
                            intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, sequence);
                            intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, CommentClickedDialog.this.mComment.isMeLikeThis());
                            intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, CommentClickedDialog.this.mComment.getSender().getId());
                            intent.putExtra(HTTP.IDENTITY_CODING, 1);
                            CommentFragment.this.getActivity().startActivity(intent);
                        }
                    });
                    dialogFragment2 = dialogFragment;
                    textView3.setOnClickListener(new OnClickListener() {
                        public void onClick(View view) {
                            dialogFragment2.dismiss();
                            Log.d(CommentFragment.TAG, "onQuoted Message:" + messageType + " " + CommentClickedDialog.this.mComment.getStatusComment());
                            CommentFragment.this.mBottomBar.setQuote(CommentClickedDialog.this.mComment);
                            CommentFragment.this.setAttachedData(7, "");
                            CommentFragment.this.mCommentHelper = CommentClickedDialog.this.mComment;
                        }
                    });
                    return;
                default:
                    return;
            }
        }
    }

    public class FetchStatusCommentCb implements FetchStatusComment {
        String comm = "";
        private WeakReference mThisFragmentRef;
        int sumComm = 0;

        public FetchStatusCommentCb(Fragment fragment) {
            this.mThisFragmentRef = new WeakReference(fragment);
        }

        public void onData(List list) {
            CommentFragment commentFragment = (CommentFragment) this.mThisFragmentRef.get();
            if (commentFragment == null) {
                Log.d(CommentFragment.TAG, "FetchStatusCommentCb weak Ref is null");
                return;
            }
            commentFragment.mComment.clear();
            Log.d(CommentFragment.TAG, "get data status comment:" + list.size());
            for (Comment itemType : list) {
                itemType.setItemType(1);
            }
            commentFragment.mComment.addAll(list);
            commentFragment.mAdapter.notifyDataSetChanged();
            if (commentFragment.mScrollLastComment) {
                commentFragment.getListView().setSelection(commentFragment.mAdapter.getCount() - 1);
            }
            this.sumComm = commentFragment.mComment.size();
            if (this.sumComm == 1) {
                this.comm = this.sumComm + " " + commentFragment.getActivity().getString(R.string.comment);
                commentFragment.mTvSumCommStatus.setVisibility(0);
                commentFragment.mTvSumCommStatus.setText(this.comm);
            } else if (commentFragment.mComment.size() > 1) {
                this.comm = this.sumComm + " " + commentFragment.getActivity().getString(R.string.comments);
                commentFragment.mTvSumCommStatus.setVisibility(0);
                commentFragment.mTvSumCommStatus.setText(this.comm);
            } else {
                commentFragment.mTvSumCommStatus.setVisibility(8);
            }
            if (commentFragment.mbFirstEnter) {
                commentFragment.mbFirstEnter = false;
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    class GotoUserProfileCb implements FetchFriendCallback {
        private WeakReference mThisFragRef;

        public GotoUserProfileCb(CommentFragment commentFragment) {
            this.mThisFragRef = new WeakReference(commentFragment);
        }

        public void onData(User user, String str) {
            CommentFragment commentFragment = (CommentFragment) this.mThisFragRef.get();
            if (commentFragment != null && user != null) {
                Log.d(CommentFragment.TAG, "FRIEND: " + str);
                Intent intent = new Intent(commentFragment.getActivity(), CommentActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 31);
                intent.putExtra(CatfishDataStorage.NIC_NAME, user.getName());
                intent.putExtra(FriendListDataStorage.STATUS, user.getStatus());
                intent.putExtra(AlbusModelObject.DATE, user.getStatusdate());
                intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, user.getId());
                intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, user.getStatusSequence());
                intent.putExtra(AlbusModelObject.STATUS_LIKE, user.getStatusLike());
                intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, user.isMeLikeThisStatus());
                intent.putExtra(HTTP.IDENTITY_CODING, 9);
                commentFragment.getActivity().startActivity(intent.setFlags(335544320));
            }
        }

        public void onError() {
            Log.e(CommentFragment.TAG, "Fail Go to user profile");
        }

        public void onSuccess() {
        }
    }

    class VideoClickedDialog implements AlbusDialogInterface {
        private VideoClickedDialog() {
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            Log.d(CommentFragment.TAG, "onCreateDialog: " + i);
            switch (i) {
                case R.styleable.Theme_selectableItemBackground /*52*/:
                    AlbusDialog.setOnChooserVideoResolutionClicked(new OnChooserVideoResolutionListener() {
                        public void onVideoHighResolution() {
                            Intent intent = new Intent("android.media.action.VIDEO_CAPTURE");
                            if (intent.resolveActivity(((CommentActivity) CommentFragment.this.getActivity()).getPackageManager()) != null) {
                                intent.putExtra("android.intent.extra.videoQuality", 1);
                                intent.putExtra("android.intent.extra.durationLimit", AlbusModelObject.VIDEO_DURATION_UPLOAD_LIMIT);
                                CommentFragment.this.startActivityForResult(intent, 8);
                            }
                        }

                        public void onVideoLowResolution() {
                            Intent intent = new Intent("android.media.action.VIDEO_CAPTURE");
                            if (intent.resolveActivity(((CommentActivity) CommentFragment.this.getActivity()).getPackageManager()) != null) {
                                intent.putExtra("android.intent.extra.videoQuality", 0);
                                intent.putExtra("android.intent.extra.durationLimit", AlbusModelObject.VIDEO_DURATION_UPLOAD_LIMIT);
                                CommentFragment.this.startActivityForResult(intent, 8);
                            }
                        }
                    });
                    return;
                default:
                    return;
            }
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
            Log.d(CommentFragment.TAG, "onShowDialog: " + i);
            switch (i) {
                case LangUtils.HASH_OFFSET /*37*/:
                    AlbusDialog.setOnAttachItemClicked(new OnAttachItemListener() {
                        public void onAttachVideoCamClicked() {
                            Bundle bundle = new Bundle();
                            bundle.putInt(AlbusModelObject.DIALOG, 52);
                            AlbusDialog.showDialog(52, new VideoClickedDialog(), CommentFragment.this.getActivity(), bundle, CommentFragment.this.getActivity().getSupportFragmentManager());
                        }

                        public void onAttachVideoFileClicked() {
                            try {
                                CommentFragment.this.startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("video/*"), 6);
                            } catch (ActivityNotFoundException e) {
                                AlbusUtils.setToastView(CommentFragment.this.getActivity(), CommentFragment.this.getString(R.string.file_manager_check));
                            }
                        }
                    });
                    return;
                case R.styleable.Theme_selectableItemBackground /*52*/:
                    AlbusDialog.setOnChooserVideoResolutionClicked(new OnChooserVideoResolutionListener() {
                        public void onVideoHighResolution() {
                            Intent intent = new Intent("android.media.action.VIDEO_CAPTURE");
                            if (intent.resolveActivity(((ChatGroupConvActivity) CommentFragment.this.getActivity()).getPackageManager()) != null) {
                                intent.putExtra("android.intent.extra.videoQuality", 1);
                                intent.putExtra("android.intent.extra.durationLimit", AlbusModelObject.VIDEO_DURATION_UPLOAD_LIMIT);
                                CommentFragment.this.startActivityForResult(intent, 8);
                            }
                        }

                        public void onVideoLowResolution() {
                            Intent intent = new Intent("android.media.action.VIDEO_CAPTURE");
                            if (intent.resolveActivity(((ChatGroupConvActivity) CommentFragment.this.getActivity()).getPackageManager()) != null) {
                                intent.putExtra("android.intent.extra.videoQuality", 0);
                                intent.putExtra("android.intent.extra.durationLimit", AlbusModelObject.VIDEO_DURATION_UPLOAD_LIMIT);
                                CommentFragment.this.startActivityForResult(intent, 8);
                            }
                        }
                    });
                    return;
                default:
                    return;
            }
        }
    }

    private void checkUnreadCommentLike() {
        Log.d(TAG, "!!!!checkUnreadCommentLike:" + this.mbFirstEnter + " " + this.mId);
        if (!this.mbFirstEnter) {
            if (this.mId != null && this.mId.equals(CatfishService.getUserPIN())) {
                this.mCatfiz.requestUnreadStatusCommentCount(new GetCountCallback() {
                    public void onData(final int i) {
                        CommentFragment.this.mCatfiz.requestUnreadStatusLikeCount(new GetCountCallback() {
                            public void onData(int i) {
                                Log.d(CommentFragment.TAG, "~~~checkUnreadCommentLike:" + i + " " + i);
                                if (i > 0 || i > 0) {
                                    CommentFragment.this.getAllData(true);
                                }
                            }

                            public void onError() {
                            }

                            public void onSuccess() {
                            }
                        });
                    }

                    public void onError() {
                    }

                    public void onSuccess() {
                    }
                });
            } else if (this.mId != null) {
                this.mCatfiz.chatFetchFriend(this.mId, new CheckCommentUnreadCb(this));
            }
        }
    }

    public static CommentFragment newInstance(Bundle bundle) {
        CommentFragment commentFragment = new CommentFragment();
        commentFragment.mId = bundle.getString(CatfishRESTAPI.CFCOMPACT_STICKERID);
        commentFragment.mName = bundle.getString(CatfishDataStorage.NIC_NAME);
        commentFragment.mStatus = bundle.getString(FriendListDataStorage.STATUS);
        commentFragment.mReceiverId = bundle.getString(CatfishRESTAPI.CFCOMPACT_STICKERID);
        commentFragment.mStatusLike = bundle.getInt(AlbusModelObject.STATUS_LIKE);
        commentFragment.mIsMeLikeStatus = bundle.getInt(AlbusModelObject.ME_LIKE_STATUS);
        commentFragment.mStatusSequence = bundle.getLong(AlbusModelObject.STATUS_SEQUENCE, 0);
        commentFragment.mfromButtonComment = bundle.getBoolean(AlbusModelObject.IS_FROM_BUTTON_COMMENT, false);
        return commentFragment;
    }

    private void reloadComment() {
        getActivity().finish();
        this.mCatfiz.chatFetchFriend(this.mId, new GotoUserProfileCb(this));
    }

    private void resetPendingState() {
        Log.d(TAG, "RESET PENDING STATE");
        this.mFileUriHelper = null;
        PendingStateUtils.resetPendingState(getActivity());
    }

    private void scrollToBottomHandler() {
        if (this.mComment != null && this.mComment.size() > 0) {
            mHandler.post(new Runnable() {
                public void run() {
                    CommentFragment.this.getListView().setSelection(CommentFragment.this.mComment.size() - 1);
                }
            });
        }
    }

    private void setAttachedData(int i, String str) {
        this.mCurrentMessageType = i;
        this.mFilePathToSend = str;
    }

    private void setShowliked() {
        CharSequence charSequence;
        if (this.mStatusLike == 1) {
            charSequence = this.mStatusLike + " " + getActivity().getString(R.string.like);
            this.mTvSumLike.setVisibility(0);
            this.mTvSumLike.setText(charSequence);
        } else if (this.mStatusLike > 1) {
            charSequence = this.mStatusLike + " " + getActivity().getString(R.string.likes);
            this.mTvSumLike.setVisibility(0);
            this.mTvSumLike.setText(charSequence);
        } else {
            this.mTvSumLike.setVisibility(8);
        }
    }

    private void updateProfile() {
        this.mTvName.setText(SmiledText.getSmiledText(getActivity(), this.mName, this.mTvName));
        this.mTvStatus.setText(SmiledText.getSmiledText(getActivity(), this.mStatus, this.mTvStatus));
        CFLinkify.addLinks(this.mTvStatus, CFLinkify.NIC | 7);
        if (this.mId.equals(CatfishService.getUserPIN())) {
            this.mRivIcon.setImageBitmap(CatfishPhotoStorage.getUserProfilePhotoBitmap(getActivity()));
        } else {
            this.mRivIcon.setImageBitmap(CatfishPhotoStorage.getFriendProfilePhotoBitmap(getActivity(), this.mId));
        }
        this.mTvDate.setText(AlbusUtils.getLastTimeActivities(this.mStatusSequence, getActivity()));
        if (this.mIsMeLikeStatus == 1) {
            this.mIbLike.setImageResource(R.drawable.ic_like_on);
        } else {
            this.mIbLike.setImageResource(R.drawable.ic_like_off);
        }
        setShowliked();
    }

    public void clearAllComments() {
        this.mCatfiz.clearAllStatusComment(this.mId, this.mStatusSequence, new FetchStatusComment() {
            public void onData(List list) {
                CommentFragment.this.mComment.clear();
                CommentFragment.this.mComment.addAll(list);
                CommentFragment.this.mTvSumCommStatus.setVisibility(8);
                CommentFragment.this.mAdapter.notifyDataSetChanged();
            }

            public void onError() {
            }

            public void onSuccess() {
            }
        });
    }

    public void commentClickEvent(Comment comment, int i, boolean z) {
        boolean z2 = this.mId.equals(CatfishService.getUserPIN());
        Log.d(TAG, "status id = " + this.mId + "owner id = " + CatfishService.getUserPIN());
        Bundle bundle = new Bundle();
        bundle.putInt(AlbusModelObject.POSITION, i);
        bundle.putBoolean(AlbusModelObject.OWNER, z2);
        bundle.putLong(AlbusModelObject.STATUS_SEQUENCE, this.mStatusSequence);
        Log.d(TAG, "status seq fragment = " + this.mStatusSequence + "status seq data = " + comment.getSequence());
        bundle.putBoolean(AlbusModelObject.LIKE_THIS, comment.isLikeThisComment());
        bundle.putInt(AlbusModelObject.LIKE_COUNT, comment.getCountCommentLike());
        bundle.putInt(AlbusModelObject.DIALOG, 42);
        AlbusDialog.showDialog(42, new CommentClickedDialog(comment, z), getActivity(), bundle, ((CommentActivity) getActivity()).getSupportFragmentManager());
    }

    public void commentClickLikeCheck(final Comment comment, final int i) {
        this.mCatfiz.requestUserLikeList("scl:", comment.getSequence(), comment.getSender().getId(), new UserFetchStatusLike() {
            public void onData(List list) {
                boolean z;
                for (User id : list) {
                    if (id.getId().equals(CatfishService.getUserPIN())) {
                        z = true;
                        break;
                    }
                }
                z = false;
                Log.d(CommentFragment.TAG, "isMeLikeThis:" + z);
                CommentFragment.this.commentClickEvent(comment, i, z);
            }

            public void onError() {
            }

            public void onSuccess() {
            }
        });
    }

    public void deleteComment(String str, String str2) {
        this.mCatfiz.deleteStatusComment(str, str2, this.mStatusSequence, new Callback() {
            public void onError() {
            }

            public void onSuccess() {
                CommentFragment.this.getAllData(false);
            }
        });
    }

    public void getAllData(boolean z) {
        Log.d(TAG, "get status comment:" + this.mStatusSequence);
        this.mScrollLastComment = z;
        this.mCatfiz.requestStatusComment(this.mStatusSequence, this.mId, new FetchStatusCommentCb(this));
        this.mCatfiz.requestProgressUploadDownload(new ProgressUploadDownload() {
            public void onError() {
            }

            public boolean onHasProgressUploadDownNUpload(Map map, Map map2) {
                Log.d(CommentFragment.TAG, "onHasProgressUploadDownNUpload <Map>");
                CommentFragment.this.mAdapter.setProgress(map, map2);
                CommentFragment.this.mAdapter.notifyDataSetChanged();
                return false;
            }

            public void onSuccess() {
            }

            public boolean onUpdateProgressDownloadNUpload(String str, int i, int i2) {
                Log.d(CommentFragment.TAG, "onHasProgressUploadDownNUpload int");
                return false;
            }
        });
        if (this.mId != null && !this.mId.equals(CatfishService.getUserPIN())) {
            this.mCatfiz.setUnreadStatusComment(this.mId, null);
        }
    }

    public String getName() {
        return this.mName;
    }

    public long getStatusSeq() {
        return this.mStatusSequence;
    }

    public void goToProfile(String str) {
        if (str.equals(CatfishService.getUserPIN())) {
            startActivity(new Intent(getActivity(), ProfilesActivity.class));
            return;
        }
        User matchFriendData = Catfiz.matchFriendData(str);
        Log.d(TAG, "goToProfile:" + matchFriendData.getName() + "," + matchFriendData.getStatusSequence() + "," + matchFriendData.getStatusdate());
        Intent intent = new Intent(getActivity(), ProfilesFriendActivity.class);
        intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, matchFriendData.getId());
        intent.putExtra(CatfishDataStorage.NIC_NAME, matchFriendData.getName());
        intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, matchFriendData.getStatusSequence());
        intent.putExtra(AlbusModelObject.STATUS_LIKE, matchFriendData.getStatusLike());
        intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, matchFriendData.isMeLikeThisStatus());
        startActivity(intent);
    }

    public void onActivityCreated(Bundle bundle) {
        super.onActivityCreated(bundle);
        getListView().setVerticalFadingEdgeEnabled(false);
        View inflate = getActivity().getLayoutInflater().inflate(R.layout.item_comment_status, null, false);
        this.mTvName = (TextView) inflate.findViewById(R.id.tv_name);
        this.mTvDate = (TextView) inflate.findViewById(R.id.tv_date);
        this.mTvStatus = (TextView) inflate.findViewById(R.id.tv_status);
        this.mTvSumCommStatus = (TextView) inflate.findViewById(R.id.tv_sum_comment);
        this.mTvSumLike = (TextView) inflate.findViewById(R.id.tv_sum_like);
        this.mIbLike = (ImageButton) inflate.findViewById(R.id.ib_like);
        this.mRivIcon = (CircleImageView) inflate.findViewById(R.id.riv_img);
        getListView().addHeaderView(inflate, null, false);
        updateProfile();
        this.mIbLike.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                Log.d(CommentFragment.TAG, "is me like this = " + CommentFragment.this.mIsMeLikeStatus);
                if (CommentFragment.this.mIsMeLikeStatus == 1) {
                    ((CommentActivity) CommentFragment.this.getActivity()).sendLike(-1, CommentFragment.this.mId, CommentFragment.this.mStatusSequence);
                    CommentFragment.this.mStatusLike = CommentFragment.this.mStatusLike - 1;
                    CommentFragment.this.mIsMeLikeStatus = -1;
                    CommentFragment.this.mIbLike.setImageResource(R.drawable.ic_like_off);
                    CommentFragment.this.setShowliked();
                    return;
                }
                ((CommentActivity) CommentFragment.this.getActivity()).sendLike(1, CommentFragment.this.mId, CommentFragment.this.mStatusSequence);
                CommentFragment.this.mStatusLike = CommentFragment.this.mStatusLike + 1;
                CommentFragment.this.mIsMeLikeStatus = 1;
                CommentFragment.this.mIbLike.setImageResource(R.drawable.ic_like_on);
                CommentFragment.this.setShowliked();
            }
        });
        this.mTvSumLike.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                Intent intent = new Intent(CommentFragment.this.getActivity(), MenuActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 32);
                intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, CommentFragment.this.mStatusSequence);
                intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, CommentFragment.this.mIsMeLikeStatus);
                intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, CommentFragment.this.mId);
                CommentFragment.this.getActivity().startActivityForResult(intent, 18);
            }
        });
        this.mRivIcon.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                CommentFragment.this.goToProfile(CommentFragment.this.mId);
            }
        });
        this.mAdapter = new CommentAdapter(getActivity(), this.mComment, this.mThumbnailLoader, this.mUserPhotoLoader, this.mLongMessageWorker, this.mName);
        setListAdapter(this.mAdapter);
    }

    public void onActivityResult(int i, int i2, Intent intent) {
        super.onActivityResult(i, i2, intent);
        if (i2 == -1) {
            String path;
            switch (i) {
                case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                case SimpleLog.LOG_LEVEL_OFF /*7*/:
                    if (this.mFileUriHelper == null) {
                        Log.d(TAG, "onActivityResult(chat), mFileUriHelper NULL");
                        return;
                    }
                    path = MediaFilePath.getPath(getActivity(), this.mFileUriHelper);
                    this.mBottomBar.setAttachFile(path);
                    Log.d(TAG, "Photo cam path:" + path);
                    setAttachedData(2, path);
                    return;
                case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                    path = MediaFilePath.getPath(getActivity(), intent.getData());
                    this.mBottomBar.setAttachFile(path);
                    Log.d(TAG, "Photo file path:" + path);
                    setAttachedData(2, path);
                    return;
                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                case Utils.FILE_TYPE_INSTALLER /*8*/:
                    Uri data = intent.getData();
                    this.mFileUriHelper = data;
                    path = MediaFilePath.getPath(getActivity(), data);
                    this.mBottomBar.setAttachFile(path);
                    Log.d(TAG, "Video path:" + path);
                    setAttachedData(3, path);
                    return;
                case HTTP.HT /*9*/:
                    break;
                case R.styleable.Theme_actionModeStyle /*27*/:
                    AlbusUtils.setToastView(getActivity(), getString(R.string.fizzlink_sent));
                    break;
                default:
                    return;
            }
            mHandler.post(new Runnable() {
                public void run() {
                    CommentFragment.this.getAllData(true);
                }
            });
        }
    }

    public void onCatfizStarted() {
        getAllData(true);
        this.mCatfiz.setRecentUpdateOpen(this.mId, null);
    }

    public void onCatfizStopped() {
    }

    public void onConfigurationChanged(Configuration configuration) {
        super.onConfigurationChanged(configuration);
        if (configuration.orientation == 2) {
            Log.d(TAG, "~~~~~~~~~~~~~~~~~ Landscape");
        } else if (configuration.orientation == 1) {
            Log.d(TAG, "~~~~~~~~~~~~~~~~~ Portrait");
            mHandler.post(new Runnable() {
                public void run() {
                    if (CommentFragment.this.mFileUriHelper != null) {
                        String path = MediaFilePath.getPath(CommentFragment.this.getActivity(), CommentFragment.this.mFileUriHelper);
                        if (path != null) {
                            Log.d(CommentFragment.TAG, ">>>>>>>>>> DATA:" + path + ", mFileUriHelper:" + CommentFragment.this.mFileUriHelper);
                            switch (Utils.getFileTypeFromPath(path)) {
                                case e.b /*1*/:
                                    CommentFragment.this.mBottomBar.setAttachFile(path);
                                    CommentFragment.this.setAttachedData(2, path);
                                    break;
                                case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                                    CommentFragment.this.mBottomBar.setAttachFile(path);
                                    CommentFragment.this.setAttachedData(3, path);
                                    break;
                                default:
                                    Log.d(CommentFragment.TAG, "!!!! DATA NONE");
                                    break;
                            }
                            CommentFragment.this.resetPendingState();
                            return;
                        }
                        Log.d(CommentFragment.TAG, "!!!! PATH NULL");
                        return;
                    }
                    Log.d(CommentFragment.TAG, "!!!! URI HELPER NULL");
                }
            });
        }
    }

    public void onCreate(Bundle bundle) {
        Log.d(TAG, "onCreate:" + this.mId + " " + TAG);
        super.onCreate(bundle);
        this.mCatfiz = new Catfiz(getActivity(), this, new SignalBinderComment());
        LongMessageCacheParams longMessageCacheParams = new LongMessageCacheParams("");
        longMessageCacheParams.memCacheSize = (Utils.getMemoryClass(getActivity()) * AccessibilityNodeInfoCompat.ACTION_DISMISS) / 3;
        longMessageCacheParams.diskCacheEnabled = false;
        this.mLongMessageWorker = new LongMessageWorker(getActivity());
        this.mLongMessageWorker.setLongMessageCache(LongMessageCache.findOrCreateCache(getActivity(), longMessageCacheParams));
        this.mLongMessageWorker.setLoadingMessage(getString(R.string.loading_message));
        ImageCacheParams imageCacheParams = new ImageCacheParams("");
        imageCacheParams.memCacheSize = (Utils.getMemoryClass(getActivity()) * AccessibilityNodeInfoCompat.ACTION_DISMISS) / 3;
        imageCacheParams.diskCacheEnabled = false;
        this.mThumbnailLoader = new ThumbnailLoader(getActivity());
        this.mThumbnailLoader.setImageCache(ImageCache.findOrCreateCache(getActivity(), imageCacheParams));
        this.mUserPhotoLoader = new UserPhotoLoader(getActivity(), imageCacheParams);
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        Log.d(TAG, "onCreateView " + TAG);
        final View inflate = layoutInflater.inflate(R.layout.fragment_comment, viewGroup, false);
        this.mBottomBar = (ChatsBottomBarView) inflate.findViewById(R.id.cv_bottom_bar);
        this.mBottomBar.setStatusComment();
        this.mBottomBar.setOnEmojiPanelAnimation(new onPanelEmojiAnimation() {
            public void onPanelDown() {
            }

            public void onPanelDownFinished() {
            }

            public void onPanelUp(View view) {
                ((CommentActivity) CommentFragment.this.getActivity()).dismissKeyboard(view);
            }

            public void onPanelUpFinished(View view) {
                CommentFragment.this.mCommentListView = CommentFragment.this.getListView();
                CommentFragment.this.mAdapter.notifyDataSetChanged();
                CommentFragment.this.mCommentListView.clearFocus();
                CommentFragment.this.mCommentListView.post(new Runnable() {
                    public void run() {
                        CommentFragment.this.mCommentListView.setSelection(CommentFragment.this.mAdapter.getCount() - 1);
                    }
                });
            }
        });
        this.mBottomBar.setOnEmojiPanelComponentListener(new onEmojiPanelComponentListener() {
            public void onBtnKeyboardPressed(View view) {
                ((CommentActivity) CommentFragment.this.getActivity()).showKeyboard(view);
            }

            public void onBtnSendPressed(String str) {
                if (CommentFragment.this.mCurrentMessageType == 1) {
                    CommentFragment.this.mCatfiz.sendStatusComment(CommentFragment.this.mReceiverId, AlbusUtils.removeUnecessaryHtmlTag(str), CommentFragment.this.mStatusSequence, new Callback() {
                        public void onError() {
                            Log.d(CommentFragment.TAG, " onError() Send comment");
                        }

                        public void onSuccess() {
                            Log.d(CommentFragment.TAG, " onSuccess() Send comment");
                            CommentFragment.this.getAllData(true);
                        }
                    });
                } else if (CommentFragment.this.mCurrentMessageType == 7) {
                    String quoteJSONStringBuilder = QuoteUtils.quoteJSONStringBuilder(CommentFragment.this.mCommentHelper, str);
                    Log.d(CommentFragment.TAG, "Will Send MESSAGE_TYPE_QUOTED:" + quoteJSONStringBuilder);
                    CommentFragment.this.mCatfiz.sendStatusComment(CommentFragment.this.mReceiverId, quoteJSONStringBuilder, CommentFragment.this.mStatusSequence, new Callback() {
                        public void onError() {
                            Log.d(CommentFragment.TAG, " onError() Send comment");
                        }

                        public void onSuccess() {
                            Log.d(CommentFragment.TAG, " onSuccess() Send comment");
                            CommentFragment.this.getAllData(true);
                        }
                    });
                    CommentFragment.this.mBottomBar.closeAttachAndEmoPanel();
                    CommentFragment.this.setAttachedData(1, "");
                    CommentFragment.this.mCommentHelper = null;
                } else {
                    String str2 = "";
                    switch (CommentFragment.this.mCurrentMessageType) {
                        case e.c /*2*/:
                            Log.d(CommentFragment.TAG, "Will Send MESSAGE_TYPE_PHOTO:" + CommentFragment.this.mFilePathToSend);
                            str2 = AlbusModelObject.DATA_TYPE_PHOTO;
                            break;
                        case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                            Log.d(CommentFragment.TAG, "Will Send MESSAGE_TYPE_VIDEO:" + CommentFragment.this.mFilePathToSend);
                            str2 = AlbusModelObject.DATA_TYPE_VIDEO;
                            break;
                    }
                    if (str2.isEmpty()) {
                        Log.d(CommentFragment.TAG, "Error Set Attached type!");
                    } else {
                        CommentFragment.this.mCatfiz.sendAttachedComment(CommentFragment.this.mReceiverId, AlbusUtils.removeUnecessaryHtmlTag(str), CommentFragment.this.mStatusSequence, str2, CommentFragment.this.mFilePathToSend, CommentFragment.this.getActivity(), new Callback() {
                            public void onError() {
                                Log.d(CommentFragment.TAG, "Error Send Attached:" + CommentFragment.this.mFilePathToSend);
                            }

                            public void onSuccess() {
                                Log.d(CommentFragment.TAG, "Success Send Attached:" + CommentFragment.this.mFilePathToSend);
                                CommentFragment.this.getAllData(true);
                            }
                        });
                    }
                    CommentFragment.this.mBottomBar.closeAttachAndEmoPanel();
                    CommentFragment.this.setAttachedData(1, "");
                    CommentFragment.this.resetPendingState();
                }
            }

            public void onBtnStickerActive(ImageButton imageButton, boolean z) {
                if (z) {
                    imageButton.setImageResource(R.drawable.ic_emot_dark);
                    CommentFragment.this.scrollToBottomHandler();
                    Log.d(CommentFragment.TAG, "on emo btn clicked, position:" + (CommentFragment.this.getListView().getCount() - 1));
                    return;
                }
                imageButton.setImageResource(R.drawable.ic_sticker_dark);
            }

            public void onEditTextFocusChanged() {
                CommentFragment.this.scrollToBottomHandler();
            }
        });
        this.mBottomBar.setOnAttachmentClickListener(new onAttachmentClickListener() {
            public void onCancelAttachmentClicked() {
                CommentFragment.this.setAttachedData(1, "");
            }

            public void onContactPIN() {
                Intent intent = new Intent(CommentFragment.this.getActivity(), CustomActionBarPageActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 33);
                intent.putExtra(HTTP.IDENTITY_CODING, 33);
                intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, CommentFragment.this.mId);
                intent.putExtra(ServerMessageDataStorage.SEQUENCE, CommentFragment.this.mStatusSequence);
                CommentFragment.this.startActivityForResult(intent, 9);
            }

            public void onFileAttachmentClicked() {
            }

            public void onFizzlinkAttachmentClicked() {
                Intent intent = new Intent(CommentFragment.this.getActivity(), CustomActionBarPageActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 57);
                intent.putExtra(HTTP.IDENTITY_CODING, 31);
                intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, CommentFragment.this.mReceiverId);
                intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, CommentFragment.this.mStatusSequence);
                CommentFragment.this.startActivityForResult(intent, 27);
            }

            public void onMusicAttachmentClicked() {
            }

            public void onPhotoAttachmentClicked(Uri uri) {
                Bundle bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 36);
                bundle.putInt(AlbusModelObject.PAGE, 31);
                AlbusDialog.showDialog(36, new DialogUI().getDialogInterface(), CommentFragment.this.getActivity(), bundle, CommentFragment.this.getActivity().getSupportFragmentManager());
                CommentFragment.this.mFileUriHelper = uri;
            }

            public void onSendBlitz() {
            }

            public void onVideoAttachmentClicked() {
                Bundle bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 37);
                AlbusDialog.showDialog(37, new VideoClickedDialog(), CommentFragment.this.getActivity(), bundle, CommentFragment.this.getActivity().getSupportFragmentManager());
            }

            public void onVoiceAttachmentClicked(String str) {
                CommentFragment.this.mCatfiz.sendAttachedComment(CommentFragment.this.mReceiverId, "", CommentFragment.this.mStatusSequence, AlbusModelObject.DATA_TYPE_VOICE, str, CommentFragment.this.getActivity(), new Callback() {
                    public void onError() {
                        Log.d(CommentFragment.TAG, "Error Send Attached Voice Comment!");
                    }

                    public void onSuccess() {
                        Log.d(CommentFragment.TAG, "Success Send Attached Voice Comment");
                        CommentFragment.this.getAllData(true);
                        CommentFragment.this.mBottomBar.closeAttachAndEmoPanel();
                        CommentFragment.this.setAttachedData(1, "");
                    }
                });
            }
        });
        this.mComment = new ArrayList();
        this.mBottomBar.setParams(3, this.mId);
        inflate.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
            public void onGlobalLayout() {
                Rect rect = new Rect();
                inflate.getWindowVisibleDisplayFrame(rect);
                int height = inflate.getRootView().getHeight();
                int i = height - (rect.bottom - rect.top);
                if (CommentFragment.this.mHeightDiffHelper != i) {
                    CommentFragment.this.mHeightDiffHelper = i;
                    Log.d(CommentFragment.TAG, "ScreenHeight:" + height + ", Keyboard heightDiff:" + i);
                    if (i > ((int) (((float) height) * AlbusModelObject.PROBABLY_SOFT_KEYBOARD_HEIGHT_RATIO))) {
                        CommentFragment.this.mBottomBar.onKeyboardEmoShowState(true);
                    } else {
                        CommentFragment.this.mBottomBar.onKeyboardEmoShowState(false);
                    }
                }
            }
        });
        Log.d(TAG, "end of onCreateView " + TAG);
        return inflate;
    }

    public void onDestroy() {
        super.onDestroy();
        this.mCatfiz.destroy();
        this.mThumbnailLoader = null;
    }

    public void onPause() {
        super.onPause();
        if (this.mThumbnailLoader != null) {
            this.mThumbnailLoader.setExitTasksEarly(true);
        }
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.start();
        }
        if (this.mThumbnailLoader != null) {
            this.mThumbnailLoader.setExitTasksEarly(false);
        }
        checkUnreadCommentLike();
        if (this.mbFirstEnter) {
            this.mCommentListView = getListView();
            this.mAdapter.notifyDataSetChanged();
            this.mCommentListView.clearFocus();
            if (this.mfromButtonComment) {
                this.mCommentListView.post(new Runnable() {
                    public void run() {
                        CommentFragment.this.mCommentListView.setSelection(CommentFragment.this.mAdapter.getCount() - 1);
                    }
                });
                this.mBottomBar.setEditTextRequestFocus();
            } else if (this.mAdapter.getCount() > 0) {
                this.mCommentListView.post(new Runnable() {
                    public void run() {
                        CommentFragment.this.mCommentListView.setSelection(0);
                    }
                });
            }
        }
    }

    public boolean onSignalEvent(Signal signal) {
        Log.d(TAG, "onSignalEvent: " + signal);
        if (signal == Signal.STATUS_COMMENT_MESSAGE) {
            getAllData(true);
        }
        return true;
    }

    public boolean onSignalEventNewMessage(Signal signal, User user, int i, String str) {
        Log.d(TAG, "onSignalEventNewMessage: " + signal + ", " + i + ", " + str);
        if (signal == Signal.CHAT_MESSAGE) {
            if (str == null || !str.equals(this.mId)) {
                Log.d(TAG, "Recipient NOT match friend ID");
            } else {
                Log.d(TAG, "Recipient match friend ID");
                getAllData(true);
            }
        }
        if (signal == Signal.FRIEND_PROFILE_UPDATE) {
            Log.d(TAG, "Friend Profile Updated:" + user.getId() + " " + user.getName());
            if (user.getId().equals(this.mId)) {
                AlbusUtils.setToastView(getActivity(), getString(R.string.friend_profile_updated));
                reloadComment();
            }
        }
        return true;
    }

    public boolean onSignalUpdateProgress(Signal signal, String str, int i, int i2) {
        Log.d(TAG, "progresss<String, int> : " + str + ", progresss : " + i + ", state " + i2);
        this.mAdapter.setUpdateProgress(str, i, i2);
        this.mAdapter.notifyDataSetChanged();
        return false;
    }

    public boolean onSignalUpdateProgress(Signal signal, Map map, Map map2) {
        Log.d(TAG, "onSignalUpdateProgress<map>");
        this.mAdapter.setProgress(map, map2);
        this.mAdapter.notifyDataSetChanged();
        return false;
    }

    public void onStart() {
        super.onStart();
        if (this.mThumbnailLoader != null) {
            this.mThumbnailLoader.setExitTasksEarly(false);
        }
    }

    public void onStop() {
        super.onStop();
        this.mCatfiz.finish();
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.stop();
        }
    }

    public void selectAttachedPhotoByCamera() {
        Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
        intent.putExtra("output", this.mFileUriHelper);
        startActivityForResult(intent, 4);
    }

    public void selectAttachedPhotoByFile() {
        try {
            startActivityForResult(new Intent("android.intent.action.GET_CONTENT").setType("image/*"), 5);
        } catch (ActivityNotFoundException e) {
            AlbusUtils.setToastView(getActivity(), getString(R.string.file_manager_check));
        }
    }

    public void setLikeStatusComment(boolean z, String str, long j) {
        this.mCatfiz.setlikeStatusComment(z, str, this.mStatusSequence, j, str, new Callback() {
            public void onError() {
            }

            public void onSuccess() {
                CommentFragment.mHandler.post(new Runnable() {
                    public void run() {
                        CommentFragment.this.getAllData(false);
                    }
                });
            }
        });
    }
}
