package com.albus.fragment;

import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.ListFragment;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.albus.activity.MenuActivity;
import com.albus.adapter.FriendsAdapter;
import com.albus.media.ImageCache.ImageCacheParams;
import com.albus.media.UserPhotoLoader;
import com.albus.util.AlbusModelObject;
import com.catfiz.R;
import com.catfiz.base.Callback.UserFetchFriendsCallback;
import com.catfiz.base.Callback.UserFetchFriendsRequestCallback;
import com.catfiz.base.Callback.UserFetchGroupsCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.Constant.FriendsType;
import com.catfiz.base.ICatfiz;
import com.catfiz.model.Group;
import com.catfiz.model.Notification;
import com.catfiz.model.User;
import com.catfiz.signal.Signal;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Locale;

public class FriendsFragment extends ListFragment implements ICatfiz {
    private static final String TAG = FriendsFragment.class.getSimpleName();
    private FriendsAdapter mAdapter = null;
    private Catfiz mCatfiz = null;
    private List mFriends = null;
    private List mFriendsSearchHelper = null;
    private List mIncomingNotices = null;
    private LinearLayout mLlDfView = null;
    private LinearLayout mLlNotif = null;
    private String mNotices = null;
    private int mSumNewFriend = 0;
    private int mSumNewGroup = 0;
    private TextView mTvAll = null;
    private TextView mTvNotices = null;
    private TextView mTvSumFriend = null;
    private UserPhotoLoader mUserPhotoLoader = null;
    private View mViewSeperator = null;

    public class FetchFriendCb implements UserFetchFriendsCallback {
        private WeakReference mThisFragmentRef;

        public FetchFriendCb(ListFragment listFragment) {
            this.mThisFragmentRef = new WeakReference(listFragment);
        }

        public void onData(List list) {
            Log.d(FriendsFragment.TAG, "user size:" + list.size());
            FriendsFragment friendsFragment = (FriendsFragment) this.mThisFragmentRef.get();
            if (friendsFragment == null) {
                Log.d(FriendsFragment.TAG, "FetchFriendCb weak Ref is null");
                return;
            }
            friendsFragment.mFriends.clear();
            friendsFragment.mFriends.addAll(list);
            friendsFragment.mAdapter.notifyDataSetChanged();
            Log.d(FriendsFragment.TAG, "value mFriends = " + friendsFragment.mFriends.size());
            if (friendsFragment.mIncomingNotices.size() > 0 || list.size() > 0) {
                friendsFragment.setDfView(false);
                if (list.size() > 0) {
                    friendsFragment.mTvSumFriend.setVisibility(0);
                    friendsFragment.mTvSumFriend.setText("" + list.size());
                    friendsFragment.mTvAll.setVisibility(0);
                    return;
                }
                return;
            }
            friendsFragment.mTvSumFriend.setVisibility(8);
            friendsFragment.mTvAll.setVisibility(8);
            friendsFragment.setDfView(true);
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    public class FetchFriendRequestCb implements UserFetchFriendsRequestCallback {
        private WeakReference mThisFragmentRef;

        public FetchFriendRequestCb(ListFragment listFragment) {
            this.mThisFragmentRef = new WeakReference(listFragment);
        }

        public void onData(List list) {
            FriendsFragment friendsFragment = (FriendsFragment) this.mThisFragmentRef.get();
            if (friendsFragment == null) {
                Log.d(FriendsFragment.TAG, "FetchFriendRequestCb weak Ref is null");
                return;
            }
            friendsFragment.mSumNewFriend = 0;
            for (User user : list) {
                friendsFragment.mIncomingNotices.add(new Notification(user.getId(), user.getName(), FriendsType.FRIEND));
                friendsFragment.mSumNewFriend = friendsFragment.mSumNewFriend + 1;
                friendsFragment.mAdapter.notifyDataSetChanged();
            }
            friendsFragment.setNotificationStatus();
            Log.d(FriendsFragment.TAG, "value mSumNewFriend(FriendReq) = " + friendsFragment.mSumNewFriend);
            Log.d(FriendsFragment.TAG, "value notice = " + friendsFragment.mNotices);
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    public class FetchGroupInvitationCb implements UserFetchGroupsCallback {
        private WeakReference mThisFragmentRef;

        public FetchGroupInvitationCb(ListFragment listFragment) {
            this.mThisFragmentRef = new WeakReference(listFragment);
        }

        public void onData(List list) {
            FriendsFragment friendsFragment = (FriendsFragment) this.mThisFragmentRef.get();
            if (friendsFragment == null) {
                Log.d(FriendsFragment.TAG, "FetchGroupInvitationCb weak Ref is null");
                return;
            }
            friendsFragment.mSumNewGroup = 0;
            for (Group group : list) {
                friendsFragment.mIncomingNotices.add(new Notification(group.getGroupID(), group.getName(), FriendsType.GROUP));
                friendsFragment.mSumNewGroup = friendsFragment.mSumNewGroup + 1;
                friendsFragment.mAdapter.notifyDataSetChanged();
            }
            friendsFragment.setNotificationStatus();
            Log.d(FriendsFragment.TAG, "value mSumNewGroup(GroupInvite) = " + friendsFragment.mSumNewGroup);
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    public static FriendsFragment newInstance() {
        return new FriendsFragment();
    }

    private void setNotificationStatus() {
        String str = this.mSumNewFriend > 1 ? " " + getActivity().getString(R.string.Friends) : " " + getActivity().getString(R.string.Friend);
        String str2 = this.mSumNewGroup > 1 ? " " + getActivity().getString(R.string.Groups) : " " + getActivity().getString(R.string.Group);
        if (this.mSumNewFriend >= 1 && this.mSumNewGroup >= 1) {
            this.mNotices = this.mSumNewFriend + str + " " + getActivity().getString(R.string.and) + " " + this.mSumNewGroup + str2;
        } else if (this.mSumNewFriend >= 1) {
            this.mNotices = this.mSumNewFriend + str;
        } else if (this.mSumNewGroup >= 1) {
            this.mNotices = this.mSumNewGroup + str2;
        }
        Log.d(TAG, "incoming notices on friends size : " + this.mIncomingNotices.size());
        if (this.mIncomingNotices.size() > 0) {
            this.mLlNotif.setVisibility(0);
            this.mViewSeperator.setVisibility(0);
            this.mTvNotices.setText(this.mNotices);
            return;
        }
        Log.d(TAG, "hide notif friend");
        this.mLlNotif.setVisibility(8);
        this.mViewSeperator.setVisibility(8);
    }

    public void enterSearchMode() {
        Log.d(TAG, ">>> onEnterSearchMode");
        this.mFriendsSearchHelper = new ArrayList();
        this.mFriendsSearchHelper.addAll(this.mFriends);
    }

    public void fetchFriendsData() {
        Log.d(TAG, ">>> onFetchFriendsData");
        this.mCatfiz.userFetchFriends(new FetchFriendCb(this));
    }

    public void fetchNotificationData() {
        this.mIncomingNotices.clear();
        this.mCatfiz.userFetchFriendsRequest(new FetchFriendRequestCb(this));
        this.mCatfiz.userFetchPendingGroups(new FetchGroupInvitationCb(this));
    }

    public void getAllData() {
        Log.d(TAG, "getAllData friends");
        fetchNotificationData();
        fetchFriendsData();
    }

    public void leaveSearchMode() {
        Log.d(TAG, ">>> onLeaveSearchMode");
        this.mFriendsSearchHelper = null;
        getAllData();
    }

    public void limitListView(String str, boolean z) {
        if (str.length() > 0) {
            if (z) {
                this.mFriends.clear();
                this.mFriends.addAll(this.mFriendsSearchHelper);
            }
            Collection arrayList = new ArrayList();
            for (User user : this.mFriends) {
                if (user != null) {
                    String name = user.getName();
                    if (!(name == null || name.isEmpty() || !name.toLowerCase().contains(str.toLowerCase(Locale.US)))) {
                        arrayList.add(user);
                    }
                }
            }
            this.mFriends.clear();
            this.mFriends.addAll(arrayList);
            this.mAdapter.notifyDataSetChanged();
            return;
        }
        fetchFriendsData();
    }

    public void onActivityCreated(Bundle bundle) {
        super.onActivityCreated(bundle);
        Log.d(TAG, ">>>>>>>> onActivityCreated:" + TAG);
        View inflate = getActivity().getLayoutInflater().inflate(R.layout.header_list, null, false);
        this.mTvNotices = (TextView) inflate.findViewById(R.id.tv_notices);
        this.mTvSumFriend = (TextView) inflate.findViewById(R.id.tv_sum);
        this.mLlNotif = (LinearLayout) inflate.findViewById(R.id.ll_notif);
        this.mViewSeperator = inflate.findViewById(R.id.view_devide);
        this.mTvAll = (TextView) inflate.findViewById(R.id.tv_title);
        this.mLlNotif.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                Intent intent = new Intent(FriendsFragment.this.getActivity(), MenuActivity.class);
                intent.putExtra(AlbusModelObject.PAGE, 35);
                FriendsFragment.this.getActivity().startActivityForResult(intent, 17);
            }
        });
        getListView().addHeaderView(inflate, null, false);
        this.mAdapter = new FriendsAdapter(getActivity(), this.mFriends, 9);
        this.mAdapter.setUserPhotoLoader(this.mUserPhotoLoader);
        setListAdapter(this.mAdapter);
    }

    public void onCatfizStarted() {
        Log.d(TAG, ">>> onCatfizStarted");
        getAllData();
    }

    public void onCatfizStopped() {
    }

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        Log.d(TAG, ">>>>>>>> onCreate:" + TAG);
        this.mCatfiz = new Catfiz(getActivity(), this);
        ImageCacheParams imageCacheParams = new ImageCacheParams("");
        imageCacheParams.memCacheSize = (AccessibilityNodeInfoCompat.ACTION_DISMISS * Utils.getMemoryClass(getActivity())) / 3;
        imageCacheParams.diskCacheEnabled = false;
        this.mUserPhotoLoader = new UserPhotoLoader(getActivity(), imageCacheParams);
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        Log.d(TAG, ">>>>>>>> onCreateView:" + TAG);
        View inflate = layoutInflater.inflate(R.layout.fragment_friends, viewGroup, false);
        this.mLlDfView = (LinearLayout) inflate.findViewById(R.id.ll_df_content);
        this.mIncomingNotices = new ArrayList();
        this.mFriends = new ArrayList();
        return inflate;
    }

    public void onDestroy() {
        super.onDestroy();
        Log.d(TAG, ">>>>>>>> onDestroy:" + TAG);
        this.mFriendsSearchHelper = null;
        this.mIncomingNotices = null;
        this.mFriends = null;
        this.mCatfiz.destroy();
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        Log.d(TAG, ">>>>>>>> onResume:" + TAG);
        this.mCatfiz.start();
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.start();
        }
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    public void onStop() {
        super.onStop();
        Log.d(TAG, ">>>>>>>> onStop:" + TAG);
        this.mCatfiz.finish();
        if (this.mUserPhotoLoader != null) {
            this.mUserPhotoLoader.stop();
        }
    }

    public void removeListUnfriend(String str) {
        for (User user : this.mFriends) {
            if (user.getId().equals(str)) {
                this.mFriends.remove(user.getId());
            }
        }
        this.mAdapter.notifyDataSetChanged();
    }

    public void setDfView(boolean z) {
        if (z) {
            this.mLlDfView.setVisibility(0);
        } else {
            this.mLlDfView.setVisibility(8);
        }
    }

    public void updateData() {
        if (this.mCatfiz.isCatfizStarted()) {
            Log.d(TAG, "onUpdateData");
            getAllData();
        }
    }
}
