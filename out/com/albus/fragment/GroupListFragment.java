package com.albus.fragment;

import android.content.Context;
import android.content.DialogInterface;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.DialogFragment;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.RecyclerView.OnScrollListener;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.Toast;
import com.albus.activity.AlbusMainActivity;
import com.albus.activity.AlbusMainActivity.OnExecuteDeleteGroup;
import com.albus.activity.AlbusMainActivity.OnMultipleDeleteGroupEvent;
import com.albus.adapter.RecyclerGroupListAdapter;
import com.albus.dialog.AlbusDialog;
import com.albus.dialog.AlbusDialog.OnActionClickListener;
import com.albus.dialog.AlbusDialogInterface;
import com.albus.dialog.DialogUI;
import com.albus.media.GroupPhotoLoader;
import com.albus.media.ImageCache;
import com.albus.media.ImageCache.ImageCacheParams;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.util.WriteMsgToExternalStorage;
import com.catfiz.R;
import com.catfiz.app.CatfizListFragment;
import com.catfiz.base.Callback;
import com.catfiz.base.Callback.FetchGroupMessagesCallback;
import com.catfiz.base.Callback.OnGroupDeleted;
import com.catfiz.base.Callback.UserFetchGroupsCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.base.ICatfiz.ICatfizGroupDelete;
import com.catfiz.base.ICatfiz.ICatfizNewMessageGroup;
import com.catfiz.base.ICatfiz.ICatfizUpdateProgress;
import com.catfiz.model.Group;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.signal.Signal;
import com.catfiz.signal.SignalBinderGroup;
import com.catfiz.util.Log;
import com.catfiz.util.MimeTypeParser;
import com.catfiz.util.Utils;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Map;

public class GroupListFragment extends CatfizListFragment implements ICatfiz, ICatfizGroupDelete, ICatfizNewMessageGroup, ICatfizUpdateProgress {
    private static final String TAG = GroupListFragment.class.getSimpleName();
    private static Handler mHandler = new Handler();
    private RecyclerGroupListAdapter mAdapter = null;
    private Catfiz mCatfiz = null;
    private int mDeleteCountHelper = 0;
    private GroupPhotoLoader mGroupPhotoLoader = null;
    private List mGroupSelected = null;
    private List mGroups = null;
    private List mGroupsSearchHelper = null;
    private boolean mHasNewUpdate = false;
    private LinearLayout mLlDfChat = null;
    private LinearLayout mLlDfGroup = null;
    private LinearLayout mLlDfView = null;
    private boolean mPooldeletednotif = true;
    private RecyclerView mRecyclerView = null;

    /* synthetic */ class AnonymousClass7 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$signal$Signal = new int[Signal.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$signal$Signal[Signal.GROUP_MESSAGE.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$signal$Signal[Signal.GROUP_DELETED.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
        }
    }

    public class FetchGroupsCB implements UserFetchGroupsCallback {
        private WeakReference mThisFragmentRef;

        public FetchGroupsCB(GroupListFragment groupListFragment) {
            this.mThisFragmentRef = new WeakReference(groupListFragment);
        }

        public void onData(List list) {
            GroupListFragment groupListFragment = (GroupListFragment) this.mThisFragmentRef.get();
            if (groupListFragment != null) {
                groupListFragment.mGroups.clear();
                if (list.size() > 0) {
                    groupListFragment.setDfView(false);
                    int i = 0;
                    for (Group group : list) {
                        groupListFragment.mGroups.add(group);
                        if (group.getUnreadMessagescount() > 0 && group.getMessagesCount() > 0) {
                            i += group.getUnreadMessagescount();
                        }
                        if (group.isDeleted()) {
                            groupListFragment.showDeleteGroupDialog(group);
                        }
                    }
                    ((AlbusMainActivity) groupListFragment.getActivity()).updateNotifGroup(i);
                }
                groupListFragment.mAdapter.refresh();
                if (groupListFragment.mGroups.size() > 0) {
                    groupListFragment.setDfView(false);
                } else {
                    groupListFragment.setDfView(true);
                }
            }
        }

        public void onError() {
        }

        public void onSuccess() {
        }
    }

    class GroupListDialog implements AlbusDialogInterface {
        private String mGroupId;
        private String mGroupName;
        private String mInfo;

        private GroupListDialog() {
            this.mGroupId = null;
            this.mGroupName = null;
            this.mInfo = null;
        }

        public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
        }

        public void onCreateDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle, Context context) {
            this.mGroupId = bundle.getString(CatfishRESTAPI.CFCOMPACT_STICKERID);
            this.mGroupName = bundle.getString(AlbusModelObject.GROUP);
            AlbusDialog.setOnActionClickListener(i, new OnActionClickListener() {
                public void onActionNoListener() {
                    GroupListFragment.this.mCatfiz.groupFetchMessages(GroupListDialog.this.mGroupId, new FetchGroupMessagesCallback() {
                        public void onData(List list) {
                            GroupListDialog.this.mInfo = WriteMsgToExternalStorage.generateNote(GroupListFragment.this.getActivity(), "Message_Group_" + GroupListDialog.this.mGroupName, list, GroupListDialog.this.mGroupName, true);
                        }

                        public void onError() {
                        }

                        public void onSuccess() {
                        }
                    }, true);
                    GroupListFragment.this.mCatfiz.deleteEmptyGroup(GroupListDialog.this.mGroupId, new OnGroupDeleted() {
                        public void onError() {
                        }

                        public void onSuccess() {
                            Toast.makeText(GroupListFragment.this.getActivity(), GroupListDialog.this.mInfo + ", Success delete group", 0).show();
                            Log.d(GroupListFragment.TAG, "on no clicked");
                            GroupListFragment.this.mHasNewUpdate = true;
                            GroupListFragment.this.getAllData();
                        }

                        public void onSuccess(String str) {
                        }
                    });
                }

                public void onActionYesListener() {
                    GroupListFragment.this.mCatfiz.deleteEmptyGroup(GroupListDialog.this.mGroupId, new OnGroupDeleted() {
                        public void onError() {
                        }

                        public void onSuccess() {
                            Log.d(GroupListFragment.TAG, "on yes clicked");
                            Toast.makeText(GroupListFragment.this.getActivity(), "Success delete group", 0).show();
                            GroupListFragment.this.mHasNewUpdate = true;
                            GroupListFragment.this.getAllData();
                        }

                        public void onSuccess(String str) {
                        }
                    });
                }
            });
        }

        public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }

        public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
        }
    }

    private void initView() {
        ImageCacheParams imageCacheParams = new ImageCacheParams("");
        imageCacheParams.memCacheSize = Utils.getMaxMemory() / 8;
        imageCacheParams.diskCacheEnabled = false;
        this.mGroupPhotoLoader = new GroupPhotoLoader(getActivity());
        this.mGroupPhotoLoader.setImageCache(ImageCache.findOrCreateCache(getActivity(), imageCacheParams));
        setAdapterForSingleChoice();
        this.mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
        this.mRecyclerView.addOnScrollListener(new OnScrollListener() {
            public void onScrollStateChanged(RecyclerView recyclerView, int i) {
                super.onScrollStateChanged(recyclerView, i);
                ((AlbusMainActivity) GroupListFragment.this.getActivity()).getMainFragment().getScrollHandle().onScrollStateChanged(i);
            }

            public void onScrolled(RecyclerView recyclerView, int i, int i2) {
                super.onScrolled(recyclerView, i, i2);
                ((AlbusMainActivity) GroupListFragment.this.getActivity()).getMainFragment().getScrollHandle().onScrolled(i, i2, ((LinearLayoutManager) recyclerView.getLayoutManager()).findFirstVisibleItemPosition());
            }
        });
        ((AlbusMainActivity) getActivity()).setOnMultipleDeleteGroupEvent(new OnMultipleDeleteGroupEvent() {
            public void onClearGroupConv() {
                Bundle bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 2);
                bundle.putInt(AlbusModelObject.VALUE, GroupListFragment.this.mGroupSelected.size());
                bundle.putInt(MimeTypeParser.TAG_TYPE, -1);
                AlbusDialog.showDialog(2, new DialogUI().getDialogInterface(), GroupListFragment.this.getActivity(), bundle, GroupListFragment.this.getActivity().getSupportFragmentManager());
            }

            public void onDropGroup() {
                Bundle bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 2);
                bundle.putInt(AlbusModelObject.VALUE, GroupListFragment.this.mGroupSelected.size());
                bundle.putInt(MimeTypeParser.TAG_TYPE, 0);
                AlbusDialog.showDialog(2, new DialogUI().getDialogInterface(), GroupListFragment.this.getActivity(), bundle, GroupListFragment.this.getActivity().getSupportFragmentManager());
            }

            public void onEnterMultipleDelete() {
                Log.d(GroupListFragment.TAG, "~~~ onEnterMultipleDelete:" + GroupListFragment.TAG);
                GroupListFragment.this.setAdapterForMultiChoice();
            }

            public void onExitMultipleDelete() {
                Log.d(GroupListFragment.TAG, "~~~ onExitMultipleDelete:" + GroupListFragment.TAG);
                GroupListFragment.this.mGroupSelected.clear();
                GroupListFragment.this.setAdapterForSingleChoice();
                GroupListFragment.this.mAdapter.removeAllSelected();
                GroupListFragment.this.mDeleteCountHelper = 0;
            }

            public void onLeaveGroup() {
                Bundle bundle = new Bundle();
                bundle.putInt(AlbusModelObject.DIALOG, 2);
                bundle.putInt(AlbusModelObject.VALUE, GroupListFragment.this.mGroupSelected.size());
                bundle.putInt(MimeTypeParser.TAG_TYPE, 1);
                AlbusDialog.showDialog(2, new DialogUI().getDialogInterface(), GroupListFragment.this.getActivity(), bundle, GroupListFragment.this.getActivity().getSupportFragmentManager());
            }

            public void onSelectAllGroup() {
                if ((GroupListFragment.this.mGroups.size() == GroupListFragment.this.mGroupSelected.size() ? 1 : null) != null) {
                    ((AlbusMainActivity) GroupListFragment.this.getActivity()).exitMultipleDelete();
                } else {
                    GroupListFragment.this.mAdapter.setAllSelected();
                }
            }

            public void onSelectItem(int i, int i2) {
                if (GroupListFragment.this.mGroupSelected.size() == 0) {
                    ((AlbusMainActivity) GroupListFragment.this.getActivity()).exitMultipleDelete();
                }
                if (i2 != 3) {
                    return;
                }
                if (i >= 4) {
                    GroupListFragment.this.mRecyclerView.scrollToPosition(i - 3);
                } else {
                    GroupListFragment.this.mRecyclerView.scrollToPosition(-1);
                }
            }
        });
        ((AlbusMainActivity) getActivity()).setOnExecuteDeleteGroup(new OnExecuteDeleteGroup() {
            public void clearGroupConvs() {
                GroupListFragment.this.clearGroupConversation();
            }

            public void dropGroups() {
                GroupListFragment.this.deleteGroup();
            }

            public void leaveGroups() {
                GroupListFragment.this.leaveGroup();
            }
        });
    }

    public static GroupListFragment newInstance(Bundle bundle) {
        GroupListFragment groupListFragment = new GroupListFragment();
        groupListFragment.setArguments(bundle);
        return groupListFragment;
    }

    private void setAdapterForMultiChoice() {
        this.mAdapter = null;
        this.mAdapter = new RecyclerGroupListAdapter(getActivity(), this.mGroups, this.mGroupSelected, 34, this.mGroupPhotoLoader);
        this.mRecyclerView.setAdapter(this.mAdapter);
        this.mAdapter.refresh();
    }

    private void setAdapterForSingleChoice() {
        this.mAdapter = null;
        this.mAdapter = new RecyclerGroupListAdapter(getActivity(), this.mGroups, this.mGroupSelected, 2, this.mGroupPhotoLoader);
        this.mRecyclerView.setAdapter(this.mAdapter);
        this.mAdapter.refresh();
    }

    private void showDeleteGroupDialog(Group group) {
        Bundle bundle = new Bundle();
        bundle.putString(AlbusModelObject.GROUP, group.getName());
        bundle.putString(CatfishRESTAPI.CFCOMPACT_STICKERID, group.getGroupID());
        bundle.putInt(AlbusModelObject.DIALOG, 40);
        AlbusDialog.showDialog(40, new GroupListDialog(), getActivity(), bundle, ((AlbusMainActivity) getActivity()).getSupportFragmentManager());
    }

    public void clearGroupConversation() {
        Log.d(TAG, ">>> clearGroupConversation");
        this.mDeleteCountHelper = 0;
        for (Group groupID : this.mGroupSelected) {
            this.mCatfiz.groupClearConferenceMessages(groupID.getGroupID(), new Callback() {
                public void onError() {
                }

                public void onSuccess() {
                    GroupListFragment.this.mDeleteCountHelper = GroupListFragment.this.mDeleteCountHelper + 1;
                    if (GroupListFragment.this.mDeleteCountHelper >= GroupListFragment.this.mGroupSelected.size()) {
                        GroupListFragment.mHandler.post(new Runnable() {
                            public void run() {
                                GroupListFragment.this.getAllData();
                            }
                        });
                    }
                }
            });
        }
        AlbusUtils.setToastView(getActivity(), getActivity().getString(R.string.clear_all_group_chat));
        ((AlbusMainActivity) getActivity()).exitMultipleDelete();
    }

    public void deleteGroup() {
        Log.d(TAG, ">>> deleteGroup");
        this.mDeleteCountHelper = 0;
        for (final Group group : this.mGroupSelected) {
            this.mCatfiz.dropGroup(group.getGroupID(), new OnGroupDeleted() {
                public void onError() {
                }

                public void onSuccess() {
                    GroupListFragment.this.mGroups.remove(group);
                    GroupListFragment.this.mAdapter.notifyDataSetChanged();
                    GroupListFragment.this.mDeleteCountHelper = GroupListFragment.this.mDeleteCountHelper + 1;
                    if (GroupListFragment.this.mDeleteCountHelper >= GroupListFragment.this.mGroupSelected.size()) {
                        GroupListFragment.mHandler.post(new Runnable() {
                            public void run() {
                                GroupListFragment.this.getAllData();
                            }
                        });
                    }
                }

                public void onSuccess(String str) {
                }
            });
        }
        AlbusUtils.setToastView(getActivity(), getActivity().getString(R.string.you_del_group));
        ((AlbusMainActivity) getActivity()).exitMultipleDelete();
    }

    public void enterSearchMode() {
        Log.d(TAG, ">>> onEnterSearchMode");
        this.mGroupsSearchHelper = new ArrayList();
        this.mGroupsSearchHelper.addAll(this.mGroups);
    }

    public void getAllData() {
        if (!((AlbusMainActivity) getActivity()).isMultiDeleteMode()) {
            Log.d(TAG, "--- getAllData ---");
            if (this.mHasNewUpdate) {
                this.mHasNewUpdate = false;
                this.mCatfiz.userFetchGroups(new FetchGroupsCB(this));
            }
        }
    }

    public void leaveGroup() {
        Log.d(TAG, ">>> leaveGroup");
        this.mDeleteCountHelper = 0;
        for (final Group group : this.mGroupSelected) {
            this.mCatfiz.leaveGroup(group.getGroupID(), new OnGroupDeleted() {
                public void onError() {
                }

                public void onSuccess() {
                    GroupListFragment.this.mGroups.remove(group);
                    GroupListFragment.this.mAdapter.notifyDataSetChanged();
                    GroupListFragment.this.mDeleteCountHelper = GroupListFragment.this.mDeleteCountHelper + 1;
                    if (GroupListFragment.this.mDeleteCountHelper >= GroupListFragment.this.mGroupSelected.size()) {
                        GroupListFragment.mHandler.post(new Runnable() {
                            public void run() {
                                GroupListFragment.this.getAllData();
                            }
                        });
                    }
                }

                public void onSuccess(String str) {
                }
            });
        }
        AlbusUtils.setToastView(getActivity(), getActivity().getString(R.string.you_leave_group));
        ((AlbusMainActivity) getActivity()).exitMultipleDelete();
    }

    public void leaveSearchMode() {
        limitListView("", false);
    }

    public void limitListView(String str, boolean z) {
        Log.d(TAG, " --- limitListView --- ");
        if (str.length() > 0) {
            Collection arrayList = new ArrayList();
            for (Group group : this.mGroupsSearchHelper) {
                if (group != null) {
                    String name = group.getName();
                    if (!(name == null || name.isEmpty() || !name.toLowerCase().contains(str.toLowerCase(Locale.US)))) {
                        arrayList.add(group);
                    }
                }
            }
            this.mGroups.clear();
            this.mGroups.addAll(arrayList);
            this.mAdapter.refresh();
            return;
        }
        this.mHasNewUpdate = true;
        getAllData();
    }

    public void onActivityCreated(Bundle bundle) {
        super.onActivityCreated(bundle);
        Log.d(TAG, ">>>>>>>> onActivityCreated:" + TAG);
    }

    public void onCatfizStarted() {
        Log.d(TAG, ">>>>>>>> onCatfizstarted:" + TAG);
        this.mHasNewUpdate = true;
        getAllData();
    }

    public void onCatfizStopped() {
    }

    public void onCreate(Bundle bundle) {
        Log.d(TAG, ">>>>>>>> onCreate:" + TAG);
        super.onCreate(bundle);
        this.mCatfiz = new Catfiz(getActivity(), this, new SignalBinderGroup());
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        Log.d(TAG, ">>>>>>>> onCreateView:" + TAG);
        View inflate = layoutInflater.inflate(R.layout.fragment_chat_group, viewGroup, false);
        this.mLlDfView = (LinearLayout) inflate.findViewById(R.id.ll_df_content);
        this.mLlDfChat = (LinearLayout) inflate.findViewById(R.id.ll_df_chat);
        this.mLlDfGroup = (LinearLayout) inflate.findViewById(R.id.ll_df_group);
        this.mRecyclerView = (RecyclerView) inflate.findViewById(R.id.recyclerView);
        setDfView(false);
        this.mGroups = new ArrayList();
        this.mGroupSelected = new ArrayList();
        setContainerView(viewGroup);
        initView();
        return inflate;
    }

    public void onDestroy() {
        super.onDestroy();
        Log.d(TAG, ">>>>>>>> onDestroy:" + TAG);
        this.mRecyclerView = null;
        this.mGroups = null;
        this.mGroupsSearchHelper = null;
        this.mCatfiz.destroy();
    }

    public void onPause() {
        super.onPause();
        Log.d(TAG, ">>>>>>>> onPause:" + TAG);
        this.mCatfiz.finish();
        if (this.mGroupPhotoLoader != null) {
            this.mGroupPhotoLoader.setExitTasksEarly(true);
        }
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        Log.d(TAG, ">>>>>>>> onResume" + TAG);
        this.mCatfiz.start();
        if (this.mCatfiz.isCatfizStarted()) {
            this.mHasNewUpdate = true;
            getAllData();
        }
        if (this.mGroupPhotoLoader != null) {
            this.mGroupPhotoLoader.setExitTasksEarly(false);
        }
    }

    public boolean onSignalEvent(Signal signal) {
        Log.d(TAG, "onSignalEvent : " + Signal.values()[signal.ordinal()]);
        switch (AnonymousClass7.$SwitchMap$com$catfiz$signal$Signal[signal.ordinal()]) {
            case e.b /*1*/:
                if (this.mCatfiz.isCatfizStarted()) {
                    this.mHasNewUpdate = true;
                    getAllData();
                }
                return true;
            case e.c /*2*/:
                if (this.mCatfiz.isCatfizStarted() && this.mGroups != null && this.mGroups.size() > 0) {
                    for (Group group : this.mGroups) {
                        if (group.getGroupID().equals(group.getGroupID())) {
                            group.setDeleted(true);
                            showDeleteGroupDialog(group);
                            return true;
                        }
                    }
                    break;
                }
        }
        return false;
    }

    public boolean onSignalEventGroupDelete(Signal signal, Group group) {
        if (!this.mCatfiz.isCatfizStarted() || this.mGroups == null || this.mGroups.size() <= 0 || !group.getGroupID().equals(group.getGroupID())) {
            return false;
        }
        group.setDeleted(true);
        showDeleteGroupDialog(group);
        return true;
    }

    public boolean onSignalEventNewMessageGroup(Signal signal, String str) {
        Log.d(TAG, "onSignalEventNewMessageGroup: " + signal + " " + str);
        switch (AnonymousClass7.$SwitchMap$com$catfiz$signal$Signal[Signal.values()[signal.ordinal()].ordinal()]) {
            case e.b /*1*/:
                this.mHasNewUpdate = true;
                getAllData();
                break;
        }
        return false;
    }

    public boolean onSignalUpdateProgress(Signal signal, String str, int i, int i2) {
        Log.d(TAG, "--- onSignalUpdateProgress-2 ---");
        this.mAdapter.notifyDataSetChanged();
        return false;
    }

    public boolean onSignalUpdateProgress(Signal signal, Map map, Map map2) {
        Log.d(TAG, "--- onSignalUpdateProgress-1 ---");
        this.mAdapter.notifyDataSetChanged();
        return false;
    }

    public void onStart() {
        super.onStart();
        Log.d(TAG, ">>>>>>>> onStart:" + TAG);
    }

    public void onStop() {
        super.onStop();
        Log.d(TAG, ">>>>>>>> onStop:" + TAG);
    }

    public void realignToolbar() {
        Log.d(TAG, "~~~~~~~~~ realignToolbar:" + TAG);
        if (((LinearLayoutManager) this.mRecyclerView.getLayoutManager()).findFirstVisibleItemPosition() <= 0) {
            Log.d(TAG, "~~~~~~~~~ DO DO DO:" + TAG);
            ((AlbusMainActivity) getActivity()).getMainFragment().getScrollHandle().forceShowToolbar();
        }
    }

    public void setDfView(boolean z) {
        if (z) {
            this.mLlDfView.setVisibility(0);
            this.mLlDfChat.setVisibility(8);
            this.mLlDfGroup.setVisibility(0);
            return;
        }
        this.mLlDfView.setVisibility(8);
    }
}
