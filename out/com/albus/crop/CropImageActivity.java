package com.albus.crop;

import android.app.ActivityManager.TaskDescription;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.BitmapRegionDecoder;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Matrix.ScaleToFit;
import android.graphics.Rect;
import android.graphics.RectF;
import android.net.Uri;
import android.opengl.GLES10;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Handler;
import android.view.Window;
import com.albus.crop.ImageViewTouchBase.Recycler;
import com.albus.crop.MonitoredActivity.LifeCycleListener;
import com.albus.view.CustomActionbarView;
import com.albus.view.CustomActionbarView.OnActionbarButtonClicked;
import com.catfiz.R;
import com.catfiz.util.Utils;
import java.io.Closeable;
import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.CountDownLatch;
import org.apache.http.HttpStatus;
import rapid.decoder.e;
import rapid.decoder.p;

public class CropImageActivity extends MonitoredActivity {
    private static final boolean IN_MEMORY_CROP = (VERSION.SDK_INT < 10 ? true : IN_MEMORY_CROP);
    private static final int SIZE_DEFAULT = 820;
    private static final int SIZE_LIMIT = 1640;
    private int aspectX;
    private int aspectY;
    private HighlightView cropView;
    private int exifRotation;
    private final Handler handler = new Handler();
    private boolean isSaving;
    private CustomActionbarView mActionbar = null;
    private CropImageView mCropImageView;
    private int maxX;
    private int maxY;
    private RotateBitmap rotateBitmap;
    private int sampleSize;
    private Uri saveUri;
    private Uri sourceUri;

    class Cropper {
        private Cropper() {
        }

        private void makeDefault() {
            if (CropImageActivity.this.rotateBitmap != null) {
                int i;
                HighlightView highlightView = new HighlightView(CropImageActivity.this.mCropImageView);
                int width = CropImageActivity.this.rotateBitmap.getWidth();
                int height = CropImageActivity.this.rotateBitmap.getHeight();
                Rect rect = new Rect(0, 0, width, height);
                int min = (Math.min(width, height) * 4) / 5;
                if (CropImageActivity.this.aspectX == 0 || CropImageActivity.this.aspectY == 0) {
                    i = min;
                } else if (CropImageActivity.this.aspectX > CropImageActivity.this.aspectY) {
                    i = (CropImageActivity.this.aspectY * min) / CropImageActivity.this.aspectX;
                } else {
                    int i2 = min;
                    min = (CropImageActivity.this.aspectX * min) / CropImageActivity.this.aspectY;
                    i = i2;
                }
                width = (width - min) / 2;
                height = (height - i) / 2;
                RectF rectF = new RectF((float) width, (float) height, (float) (min + width), (float) (i + height));
                Matrix unrotatedMatrix = CropImageActivity.this.mCropImageView.getUnrotatedMatrix();
                boolean z = (CropImageActivity.this.aspectX == 0 || CropImageActivity.this.aspectY == 0) ? CropImageActivity.IN_MEMORY_CROP : true;
                highlightView.setup(unrotatedMatrix, rect, rectF, z);
                CropImageActivity.this.mCropImageView.add(highlightView);
            }
        }

        public void crop() {
            CropImageActivity.this.handler.post(new Runnable() {
                public void run() {
                    Cropper.this.makeDefault();
                    CropImageActivity.this.mCropImageView.invalidate();
                    if (CropImageActivity.this.mCropImageView.highlightViews.size() == 1) {
                        CropImageActivity.this.cropView = (HighlightView) CropImageActivity.this.mCropImageView.highlightViews.get(0);
                        CropImageActivity.this.cropView.setFocus(true);
                    }
                }
            });
        }
    }

    private int calculateBitmapSampleSize(Uri uri) {
        Closeable closeable = null;
        int i = 1;
        Options options = new Options();
        options.inJustDecodeBounds = true;
        try {
            closeable = getContentResolver().openInputStream(uri);
            BitmapFactory.decodeStream(closeable, null, options);
            int maxImageSize = getMaxImageSize();
            while (true) {
                if (options.outHeight / i <= maxImageSize && options.outWidth / i <= maxImageSize) {
                    return i;
                }
                i <<= 1;
            }
        } finally {
            CropUtil.closeSilently(closeable);
        }
    }

    private void clearImageView() {
        this.mCropImageView.clear();
        if (this.rotateBitmap != null) {
            this.rotateBitmap.recycle();
        }
        System.gc();
    }

    private Bitmap decodeRegionCrop(Rect rect, int i, int i2) {
        Closeable openInputStream;
        int k;
        Bitmap o;
        Throwable th;
        Throwable e;
        Throwable th2;
        Closeable closeable;
        Bitmap bitmap = null;
        float f = 0.0f;
        try {
            openInputStream = getContentResolver().openInputStream(this.sourceUri);
            try {
                int i3;
                p pVar;
                BitmapRegionDecoder bitmapRegionDecoder;
                if (VERSION.SDK_INT < 21) {
                    p a = e.a((InputStream) openInputStream);
                    int j = a.j();
                    k = a.k();
                    i3 = j;
                    pVar = a;
                    bitmapRegionDecoder = null;
                } else {
                    bitmapRegionDecoder = BitmapRegionDecoder.newInstance(openInputStream, IN_MEMORY_CROP);
                    k = bitmapRegionDecoder.getHeight();
                    i3 = bitmapRegionDecoder.getWidth();
                    pVar = null;
                }
                if (this.exifRotation != 0) {
                    Matrix matrix = new Matrix();
                    matrix.setRotate((float) (-this.exifRotation));
                    RectF rectF = new RectF();
                    matrix.mapRect(rectF, new RectF(rect));
                    float f2 = rectF.left < 0.0f ? (float) i3 : 0.0f;
                    if (rectF.top < 0.0f) {
                        f = (float) k;
                    }
                    rectF.offset(f2, f);
                    rect = new Rect((int) rectF.left, (int) rectF.top, (int) rectF.right, (int) rectF.bottom);
                }
                try {
                    Options options = new Options();
                    options.inSampleSize = this.sampleSize;
                    o = VERSION.SDK_INT < 21 ? pVar.a(rect).a(1.0f / ((float) this.sampleSize)).a(true).o() : bitmapRegionDecoder.decodeRegion(rect, options);
                    try {
                        if (rect.width() > i || rect.height() > i2) {
                            Matrix matrix2 = new Matrix();
                            matrix2.postScale(((float) i) / ((float) rect.width()), ((float) i2) / ((float) rect.height()));
                            o = Bitmap.createBitmap(o, 0, 0, o.getWidth(), o.getHeight(), matrix2, true);
                        }
                        CropUtil.closeSilently(openInputStream);
                    } catch (Throwable e2) {
                        th = e2;
                        bitmap = o;
                        th2 = th;
                        try {
                            throw new IllegalArgumentException("Rectangle " + rect + " is outside of the image (" + i3 + "," + k + "," + this.exifRotation + ")", th2);
                        } catch (Throwable th22) {
                            closeable = openInputStream;
                            Bitmap bitmap2 = bitmap;
                            e2 = th22;
                            o = bitmap2;
                            try {
                                Log.e("Error cropping image: " + e2.getMessage(), e2);
                                finish();
                                CropUtil.closeSilently(closeable);
                                return o;
                            } catch (Throwable th3) {
                                th22 = th3;
                                openInputStream = closeable;
                                CropUtil.closeSilently(openInputStream);
                                throw th22;
                            }
                        } catch (Throwable th222) {
                            th = th222;
                            o = bitmap;
                            e2 = th;
                            try {
                                Log.e("OOM cropping image: " + e2.getMessage(), e2);
                                setResultException(e2);
                                CropUtil.closeSilently(openInputStream);
                                return o;
                            } catch (Throwable th4) {
                                th222 = th4;
                                CropUtil.closeSilently(openInputStream);
                                throw th222;
                            }
                        }
                    } catch (IOException e3) {
                        e2 = e3;
                        closeable = openInputStream;
                        Log.e("Error cropping image: " + e2.getMessage(), e2);
                        finish();
                        CropUtil.closeSilently(closeable);
                        return o;
                    } catch (OutOfMemoryError e4) {
                        e2 = e4;
                        Log.e("OOM cropping image: " + e2.getMessage(), e2);
                        setResultException(e2);
                        CropUtil.closeSilently(openInputStream);
                        return o;
                    }
                    return o;
                } catch (IllegalArgumentException e5) {
                    th222 = e5;
                    throw new IllegalArgumentException("Rectangle " + rect + " is outside of the image (" + i3 + "," + k + "," + this.exifRotation + ")", th222);
                }
            } catch (Throwable th2222) {
                closeable = openInputStream;
                e2 = th2222;
                o = null;
                Log.e("Error cropping image: " + e2.getMessage(), e2);
                finish();
                CropUtil.closeSilently(closeable);
                return o;
            } catch (Throwable th22222) {
                th = th22222;
                o = null;
                e2 = th;
                Log.e("OOM cropping image: " + e2.getMessage(), e2);
                setResultException(e2);
                CropUtil.closeSilently(openInputStream);
                return o;
            }
        } catch (Throwable th222222) {
            closeable = null;
            e2 = th222222;
            o = null;
            Log.e("Error cropping image: " + e2.getMessage(), e2);
            finish();
            CropUtil.closeSilently(closeable);
            return o;
        } catch (Throwable th2222222) {
            openInputStream = null;
            e2 = th2222222;
            o = null;
            Log.e("OOM cropping image: " + e2.getMessage(), e2);
            setResultException(e2);
            CropUtil.closeSilently(openInputStream);
            return o;
        } catch (Throwable th5) {
            th2222222 = th5;
            openInputStream = null;
            CropUtil.closeSilently(openInputStream);
            throw th2222222;
        }
    }

    private int getMaxImageSize() {
        int maxTextureSize = getMaxTextureSize();
        return maxTextureSize == 0 ? SIZE_DEFAULT : Math.min(maxTextureSize, SIZE_LIMIT);
    }

    private int getMaxTextureSize() {
        int[] iArr = new int[1];
        GLES10.glGetIntegerv(3379, iArr, 0);
        return iArr[0];
    }

    private Bitmap inMemoryCrop(RotateBitmap rotateBitmap, Rect rect, int i, int i2) {
        Bitmap createBitmap;
        Throwable e;
        System.gc();
        try {
            createBitmap = Bitmap.createBitmap(i, i2, Config.RGB_565);
            try {
                Canvas canvas = new Canvas(createBitmap);
                RectF rectF = new RectF(0.0f, 0.0f, (float) rect.width(), (float) rect.height());
                Matrix matrix = new Matrix();
                matrix.setRectToRect(new RectF(rect), rectF, ScaleToFit.FILL);
                matrix.preConcat(rotateBitmap.getRotateMatrix());
                canvas.drawBitmap(rotateBitmap.getBitmap(), matrix, null);
            } catch (OutOfMemoryError e2) {
                e = e2;
                Log.e("OOM cropping image: " + e.getMessage(), e);
                setResultException(e);
                System.gc();
                clearImageView();
                return createBitmap;
            }
        } catch (Throwable e3) {
            Throwable th = e3;
            createBitmap = null;
            e = th;
            Log.e("OOM cropping image: " + e.getMessage(), e);
            setResultException(e);
            System.gc();
            clearImageView();
            return createBitmap;
        }
        clearImageView();
        return createBitmap;
    }

    private void initViews(final boolean z) {
        this.mActionbar = (CustomActionbarView) findViewById(R.id.custom_actionbar);
        this.mActionbar.setButtonSave();
        this.mActionbar.setOnActionBtnActivated();
        this.mActionbar.setOnActionbarButtonClickListener(new OnActionbarButtonClicked() {
            public void onBtnActionActiveClicked() {
                CropImageActivity.this.onSaveClicked(z);
            }

            public void onBtnCloseClicked() {
                CropImageActivity.this.setResult(0);
                CropImageActivity.this.finish();
            }
        });
        this.mCropImageView = (CropImageView) findViewById(R.id.crop_image);
        this.mCropImageView.context = this;
        this.mCropImageView.setRecycler(new Recycler() {
            public void recycle(Bitmap bitmap) {
                bitmap.recycle();
                System.gc();
            }
        });
    }

    private void onSaveClicked(boolean z) {
        if (this.cropView != null && !this.isSaving) {
            this.isSaving = true;
            final Rect scaledCropRect = this.cropView.getScaledCropRect((float) this.sampleSize);
            int width = scaledCropRect.width();
            int height = scaledCropRect.height();
            if (this.maxX > 0 && this.maxY > 0 && (width > this.maxX || height > this.maxY)) {
                float f = ((float) width) / ((float) height);
                if (((float) this.maxX) / ((float) this.maxY) > f) {
                    height = this.maxY;
                    width = (int) ((f * ((float) this.maxY)) + 0.5f);
                } else {
                    width = this.maxX;
                    height = (int) ((((float) this.maxX) / f) + 0.5f);
                }
            }
            if (!IN_MEMORY_CROP || this.rotateBitmap == null) {
                clearImageView();
                this.mCropImageView.highlightViews.clear();
                final boolean z2 = z;
                CropUtil.startBackgroundJob(this, null, "....", new Runnable() {
                    public void run() {
                        try {
                            final Bitmap access$900 = CropImageActivity.this.decodeRegionCrop(scaledCropRect, width, height);
                            CropImageActivity.this.handler.post(new Runnable() {
                                public void run() {
                                    if (access$900 != null) {
                                        CropImageActivity.this.mCropImageView.setImageRotateBitmapResetBase(new RotateBitmap(access$900, CropImageActivity.this.exifRotation), true);
                                        CropImageActivity.this.mCropImageView.center(true, true);
                                    }
                                }
                            });
                            if (access$900 != null) {
                                CropImageActivity.this.saveOutput(access$900, z2);
                            }
                            CropImageActivity.this.handler.post(new Runnable() {
                                public void run() {
                                    CropImageActivity.this.finish();
                                }
                            });
                        } catch (Throwable e) {
                            CropImageActivity.this.setResultException(e);
                            CropImageActivity.this.handler.post(new Runnable() {
                                public void run() {
                                    CropImageActivity.this.finish();
                                }
                            });
                        }
                    }
                }, this.handler);
                return;
            }
            Bitmap inMemoryCrop = inMemoryCrop(this.rotateBitmap, scaledCropRect, width, height);
            if (inMemoryCrop != null) {
                this.mCropImageView.setImageBitmapResetBase(inMemoryCrop, true);
                this.mCropImageView.center(true, true);
                this.mCropImageView.highlightViews.clear();
            }
            saveImage(inMemoryCrop, z);
        }
    }

    private void saveImage(final Bitmap bitmap, final boolean z) {
        if (bitmap != null) {
            CropUtil.startBackgroundJob(this, null, "....", new Runnable() {
                public void run() {
                    CropImageActivity.this.saveOutput(bitmap, z);
                }
            }, this.handler);
        } else {
            finish();
        }
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void saveOutput(final android.graphics.Bitmap r5, boolean r6) {
        /*
        r4 = this;
        r0 = r4.saveUri;
        if (r0 == 0) goto L_0x003d;
    L_0x0004:
        r1 = 0;
        r0 = r4.getContentResolver();	 Catch:{ IOException -> 0x0053 }
        r2 = r4.saveUri;	 Catch:{ IOException -> 0x0053 }
        r1 = r0.openOutputStream(r2);	 Catch:{ IOException -> 0x0053 }
        if (r1 == 0) goto L_0x001a;
    L_0x0011:
        if (r6 == 0) goto L_0x004b;
    L_0x0013:
        r0 = android.graphics.Bitmap.CompressFormat.PNG;	 Catch:{ IOException -> 0x0053 }
        r2 = 90;
        r5.compress(r0, r2, r1);	 Catch:{ IOException -> 0x0053 }
    L_0x001a:
        com.albus.crop.CropUtil.closeSilently(r1);
    L_0x001d:
        r0 = IN_MEMORY_CROP;
        if (r0 != 0) goto L_0x0038;
    L_0x0021:
        r0 = r4.getContentResolver();
        r1 = r4.sourceUri;
        r0 = com.albus.crop.CropUtil.getFromMediaUri(r4, r0, r1);
        r1 = r4.getContentResolver();
        r2 = r4.saveUri;
        r1 = com.albus.crop.CropUtil.getFromMediaUri(r4, r1, r2);
        com.albus.crop.CropUtil.copyExifRotation(r0, r1);
    L_0x0038:
        r0 = r4.saveUri;
        r4.setResultUri(r0);
    L_0x003d:
        r0 = r4.handler;
        r1 = new com.albus.crop.CropImageActivity$6;
        r1.<init>(r5);
        r0.post(r1);
        r4.finish();
        return;
    L_0x004b:
        r0 = android.graphics.Bitmap.CompressFormat.JPEG;	 Catch:{ IOException -> 0x0053 }
        r2 = 90;
        r5.compress(r0, r2, r1);	 Catch:{ IOException -> 0x0053 }
        goto L_0x001a;
    L_0x0053:
        r0 = move-exception;
        r4.setResultException(r0);	 Catch:{ all -> 0x0073 }
        r2 = new java.lang.StringBuilder;	 Catch:{ all -> 0x0073 }
        r2.<init>();	 Catch:{ all -> 0x0073 }
        r3 = "Cannot open file: ";
        r2 = r2.append(r3);	 Catch:{ all -> 0x0073 }
        r3 = r4.saveUri;	 Catch:{ all -> 0x0073 }
        r2 = r2.append(r3);	 Catch:{ all -> 0x0073 }
        r2 = r2.toString();	 Catch:{ all -> 0x0073 }
        com.albus.crop.Log.e(r2, r0);	 Catch:{ all -> 0x0073 }
        com.albus.crop.CropUtil.closeSilently(r1);
        goto L_0x001d;
    L_0x0073:
        r0 = move-exception;
        com.albus.crop.CropUtil.closeSilently(r1);
        throw r0;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.albus.crop.CropImageActivity.saveOutput(android.graphics.Bitmap, boolean):void");
    }

    private void setResultException(Throwable th) {
        setResult(HttpStatus.SC_NOT_FOUND, new Intent().putExtra(Extra.ERROR, th));
    }

    private void setResultUri(Uri uri) {
        setResult(-1, new Intent().putExtra("output", uri));
    }

    private void setupFromIntent() {
        Closeable closeable = null;
        Intent intent = getIntent();
        Bundle extras = intent.getExtras();
        if (extras != null) {
            this.aspectX = extras.getInt(Extra.ASPECT_X);
            this.aspectY = extras.getInt(Extra.ASPECT_Y);
            this.maxX = extras.getInt(Extra.MAX_X);
            this.maxY = extras.getInt(Extra.MAX_Y);
            this.saveUri = (Uri) extras.getParcelable("output");
        }
        this.sourceUri = intent.getData();
        if (this.sourceUri != null) {
            this.exifRotation = CropUtil.getExifRotation(CropUtil.getFromMediaUri(this, getContentResolver(), this.sourceUri));
            try {
                this.sampleSize = calculateBitmapSampleSize(this.sourceUri);
                closeable = getContentResolver().openInputStream(this.sourceUri);
                Options options = new Options();
                options.inSampleSize = this.sampleSize;
                this.rotateBitmap = new RotateBitmap(BitmapFactory.decodeStream(closeable, null, options), this.exifRotation);
            } catch (Throwable e) {
                Log.e("Error reading image: " + e.getMessage(), e);
                setResultException(e);
            } catch (Throwable e2) {
                Log.e("OOM reading image: " + e2.getMessage(), e2);
                setResultException(e2);
            } finally {
                CropUtil.closeSilently(closeable);
            }
        }
    }

    private void startCrop() {
        if (!isFinishing()) {
            this.mCropImageView.setImageRotateBitmapResetBase(this.rotateBitmap, true);
            CropUtil.startBackgroundJob(this, null, ".....", new Runnable() {
                public void run() {
                    final CountDownLatch countDownLatch = new CountDownLatch(1);
                    CropImageActivity.this.handler.post(new Runnable() {
                        public void run() {
                            if (CropImageActivity.this.mCropImageView.getScale() == 1.0f) {
                                CropImageActivity.this.mCropImageView.center(true, true);
                            }
                            countDownLatch.countDown();
                        }
                    });
                    try {
                        countDownLatch.await();
                        new Cropper().crop();
                    } catch (Throwable e) {
                        throw new RuntimeException(e);
                    }
                }
            }, this.handler);
        }
    }

    public /* bridge */ /* synthetic */ void addLifeCycleListener(LifeCycleListener lifeCycleListener) {
        super.addLifeCycleListener(lifeCycleListener);
    }

    public boolean isSaving() {
        return this.isSaving;
    }

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        Log.e("onCreate CropImageActivity");
        requestWindowFeature(1);
        setContentView(R.layout.crop_activity_crop);
        if (VERSION.SDK_INT < 21) {
            e.a((Context) this);
        }
        if (Utils.hasLollipop()) {
            setTaskDescription(new TaskDescription(null, null, getResources().getColor(R.color.red)));
            Window window = getWindow();
            window.addFlags(RtlSpacingHelper.UNDEFINED);
            window.clearFlags(67108864);
            window.setStatusBarColor(getResources().getColor(R.color.black13));
        }
        initViews(getIntent().getExtras().getBoolean("is_transparent", IN_MEMORY_CROP));
        setupFromIntent();
        if (this.rotateBitmap == null) {
            finish();
        } else {
            startCrop();
        }
    }

    protected void onDestroy() {
        super.onDestroy();
        if (this.rotateBitmap != null) {
            this.rotateBitmap.recycle();
        }
    }

    public boolean onSearchRequested() {
        return IN_MEMORY_CROP;
    }

    public /* bridge */ /* synthetic */ void removeLifeCycleListener(LifeCycleListener lifeCycleListener) {
        super.removeLifeCycleListener(lifeCycleListener);
    }
}
