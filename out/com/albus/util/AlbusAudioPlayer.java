package com.albus.util;

import android.content.Context;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Handler;
import com.catfiz.service.CatfishService;
import com.catfiz.util.Log;
import java.io.File;

public class AlbusAudioPlayer {
    public static final String STREAM_FL = "fl=";
    public static final String STREAM_USER = "user=DLFIZZAPP";
    private static final String TAG = AlbusAudioPlayer.class.getSimpleName();
    private onAudioStateChange mAudioStateChange;
    private String mDataSource;
    private Handler mDurationHandler;
    private boolean mIsPlay;
    private long mLastSeqPlayed;
    private MediaPlayer mMediaPlayer;
    private String mSlink;

    public interface onAudioStateChange {
        void onAudioFinished(int i);

        void onAudioPaused(int i);

        void onAudioPlaying(int i, int i2);

        void onAudioPrepared(int i);

        void onAudioStoped(int i, int i2);
    }

    public AlbusAudioPlayer() {
        this.mMediaPlayer = null;
        this.mIsPlay = false;
        this.mDataSource = null;
        this.mSlink = null;
        this.mLastSeqPlayed = 0;
        this.mDurationHandler = null;
        this.mDurationHandler = new Handler();
    }

    private String getAudioSource() {
        if (this.mDataSource == null && this.mSlink == null) {
            return "";
        }
        if (this.mDataSource != null) {
            File file = new File(this.mDataSource);
            if (file.isFile() && file.exists()) {
                Log.d(TAG, "Source is exists=" + this.mDataSource);
                return this.mDataSource;
            }
        }
        if (this.mSlink != null) {
            String str = ("http://" + CatfishService.getStreamingServer() + "/dlfizzlink?") + STREAM_USER + "&" + STREAM_FL + this.mSlink;
            Log.d(TAG, "Play streaming: " + str);
            return str;
        }
        Log.d(TAG, "No one of source is exists");
        return "";
    }

    public static String getDurationFromAudioFile(Context context, String str) {
        String str2 = "00:00";
        try {
            int duration = MediaPlayer.create(context, Uri.parse(str)).getDuration();
            Log.d(TAG, "time duration =" + AlbusUtils.milliSecondsToTimer((long) duration));
            str2 = AlbusUtils.milliSecondsToTimer((long) duration);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return str2;
    }

    public void Pause() {
        int i;
        if (this.mMediaPlayer == null || !this.mMediaPlayer.isPlaying()) {
            i = 0;
        } else {
            this.mMediaPlayer.pause();
            i = this.mMediaPlayer.getCurrentPosition();
        }
        setPlaying(false);
        this.mAudioStateChange.onAudioPaused(i);
    }

    public void Play() {
        this.mAudioStateChange.onAudioPrepared(0);
        new Thread(new Runnable() {
            public void run() {
                try {
                    AlbusAudioPlayer.this.mMediaPlayer = new MediaPlayer();
                    AlbusAudioPlayer.this.mMediaPlayer.setDataSource(AlbusAudioPlayer.this.getAudioSource());
                    AlbusAudioPlayer.this.mMediaPlayer.prepare();
                    AlbusAudioPlayer.this.mAudioStateChange.onAudioPrepared(AlbusAudioPlayer.this.mMediaPlayer.getDuration());
                    AlbusAudioPlayer.this.mMediaPlayer.start();
                    AlbusAudioPlayer.this.setPlaying(true);
                    while (AlbusAudioPlayer.this.mMediaPlayer.isPlaying()) {
                        synchronized (this) {
                            try {
                                int duration;
                                int currentPosition;
                                if (AlbusAudioPlayer.this.mMediaPlayer != null) {
                                    duration = AlbusAudioPlayer.this.mMediaPlayer.getDuration();
                                    currentPosition = AlbusAudioPlayer.this.mMediaPlayer.getCurrentPosition();
                                } else {
                                    currentPosition = 0;
                                    duration = 0;
                                }
                                AlbusAudioPlayer.this.mAudioStateChange.onAudioPlaying(duration, currentPosition);
                                wait(300);
                            } catch (InterruptedException e) {
                            }
                        }
                    }
                    try {
                        if (AlbusAudioPlayer.this.mMediaPlayer != null) {
                            AlbusAudioPlayer.this.mMediaPlayer.stop();
                            AlbusAudioPlayer.this.mAudioStateChange.onAudioFinished(AlbusAudioPlayer.this.mMediaPlayer.getDuration());
                        }
                        AlbusAudioPlayer.this.setPlaying(false);
                    } catch (Exception e2) {
                        Log.e(AlbusAudioPlayer.TAG, "mMediaPlayer Stop Error:" + e2.toString());
                    }
                    if (AlbusAudioPlayer.this.mMediaPlayer != null) {
                        AlbusAudioPlayer.this.mMediaPlayer.release();
                        AlbusAudioPlayer.this.mMediaPlayer = null;
                    }
                    AlbusAudioPlayer.this.setPlaying(false);
                    return;
                } catch (Exception e22) {
                    try {
                        Log.e(AlbusAudioPlayer.TAG, "mMediaPlayer Error:" + e22.toString());
                    } finally {
                        if (AlbusAudioPlayer.this.mMediaPlayer != null) {
                            AlbusAudioPlayer.this.mMediaPlayer.release();
                            AlbusAudioPlayer.this.mMediaPlayer = null;
                        }
                        AlbusAudioPlayer.this.setPlaying(false);
                    }
                }
            }
        }).start();
    }

    public void Stop() {
        int i;
        int i2;
        if (this.mMediaPlayer == null || !this.mMediaPlayer.isPlaying()) {
            i = 0;
            i2 = 0;
        } else {
            this.mMediaPlayer.stop();
            i2 = this.mMediaPlayer.getDuration();
            i = this.mMediaPlayer.getCurrentPosition();
            this.mMediaPlayer.release();
            this.mMediaPlayer = null;
        }
        setPlaying(false);
        this.mAudioStateChange.onAudioStoped(i2, i);
    }

    public Handler getDurationHandler() {
        return this.mDurationHandler;
    }

    public long getLastPlayedID() {
        return this.mLastSeqPlayed;
    }

    public boolean getPlaying() {
        return this.mIsPlay;
    }

    public void setDataSouce(String str) {
        this.mDataSource = str;
    }

    public void setFizzlink(String str) {
        this.mSlink = str;
    }

    public void setLastPlayedID(long j) {
        this.mLastSeqPlayed = j;
    }

    public void setOnAudioStateChange(onAudioStateChange com_albus_util_AlbusAudioPlayer_onAudioStateChange) {
        this.mAudioStateChange = com_albus_util_AlbusAudioPlayer_onAudioStateChange;
    }

    public void setPlaying(boolean z) {
        this.mIsPlay = z;
    }
}
