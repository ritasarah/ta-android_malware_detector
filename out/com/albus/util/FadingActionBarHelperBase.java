package com.albus.util;

import android.app.Activity;
import android.content.Context;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.Drawable.Callback;
import android.os.Build.VERSION;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.widget.AbsListView;
import android.widget.AbsListView.LayoutParams;
import android.widget.AbsListView.OnScrollListener;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import com.albus.imagespan.SmiledText;
import com.albus.view.CustomImageView;
import com.catfiz.R;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.lang.reflect.InvocationTargetException;

public abstract class FadingActionBarHelperBase {
    private static final String TAG = "FadingActionBarHelperBase";
    private int mActionBarBackgroundResId = 0;
    private CustomImageView mCivPp = null;
    private int mContentLayoutResId = 0;
    private Drawable mDrawableActionBarBackground = null;
    private Callback mDrawableCallback = new Callback() {
        public void invalidateDrawable(Drawable drawable) {
            FadingActionBarHelperBase.this.setActionBarBackgroundDrawable(drawable);
        }

        public void scheduleDrawable(Drawable drawable, Runnable runnable, long j) {
        }

        public void unscheduleDrawable(Drawable drawable, Runnable runnable) {
        }
    };
    private boolean mFirstGlobalLayoutPerformed = false;
    private FrameLayout mFlHeaderContainer = null;
    private FrameLayout mFlMarginView = null;
    private boolean mHasProfilePicture = false;
    private int mHeaderLayoutResId = 0;
    private int mHeaderOverlayLayoutResId = 0;
    private ImageButton mIbEdit = null;
    private LayoutInflater mInflater = null;
    private ImageView mIvDummy;
    private int mLastDampedScroll = 0;
    private int mLastHeaderHeight = -1;
    private int mLastScrollPosition;
    private boolean mLightActionBar = false;
    private ListView mList = null;
    private LinearLayout mLlDialog;
    private OnScrollListener mOnScrollListener = new OnScrollListener() {
        public void onScroll(AbsListView absListView, int i, int i2, int i3) {
            View childAt = absListView.getChildAt(0);
            if (childAt == null) {
                FadingActionBarHelperBase.this.onNewScroll(0, 1, 0);
            } else if (childAt != FadingActionBarHelperBase.this.mFlMarginView) {
                FadingActionBarHelperBase.this.onNewScroll(FadingActionBarHelperBase.this.mFlHeaderContainer.getHeight(), childAt.getHeight(), FadingActionBarHelperBase.this.mFlHeaderContainer.getHeight());
            } else {
                FadingActionBarHelperBase.this.onNewScroll(-childAt.getTop(), childAt.getBottom() - 168, FadingActionBarHelperBase.this.mFlHeaderContainer.getHeight());
                Log.d(FadingActionBarHelperBase.TAG, "-top.gettop = " + (-childAt.getTop()));
                Log.d(FadingActionBarHelperBase.TAG, "top.getbottom = " + childAt.getBottom());
            }
        }

        public void onScrollStateChanged(AbsListView absListView, int i) {
        }
    };
    private TextView mTvFakeName = null;
    private boolean mUseParallax = true;
    private View mViewContent = null;
    private View mViewHeader = null;
    private View mViewHeaderOverlay = null;
    private View mViewListViewBackground = null;

    private void addParallaxEffect(int i) {
        int i2 = (int) ((this.mUseParallax ? 0.5f : 1.0f) * ((float) i));
        this.mFlHeaderContainer.offsetTopAndBottom(this.mLastDampedScroll - i2);
        if (this.mViewListViewBackground != null) {
            this.mViewListViewBackground.offsetTopAndBottom(this.mLastScrollPosition - i);
        }
        if (this.mFirstGlobalLayoutPerformed) {
            this.mLastScrollPosition = i;
            this.mLastDampedScroll = i2;
        }
    }

    private View createListView(ListView listView) {
        ViewGroup viewGroup = (ViewGroup) this.mInflater.inflate(R.layout.abf_listview_panel, null);
        viewGroup.addView(this.mViewContent);
        this.mFlHeaderContainer = (FrameLayout) viewGroup.findViewById(R.id.fl_abf_header_panel);
        initializeGradient(this.mFlHeaderContainer);
        this.mFlHeaderContainer.addView(this.mViewHeader, 0);
        this.mFlMarginView = new FrameLayout(this.mList.getContext());
        this.mFlMarginView.setLayoutParams(new LayoutParams(-1, 0));
        this.mList.addHeaderView(this.mFlMarginView, null, false);
        this.mViewListViewBackground = viewGroup.findViewById(R.id.view_abf_listview_background);
        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) this.mViewListViewBackground.getLayoutParams();
        layoutParams.height = AlbusUtils.getDisplayHeight(this.mList.getContext());
        this.mViewListViewBackground.setLayoutParams(layoutParams);
        this.mList.setOnScrollListener(this.mOnScrollListener);
        return viewGroup;
    }

    private void initializeGradient(ViewGroup viewGroup) {
        View findViewById = viewGroup.findViewById(R.id.view_abf_gradient);
        int i = R.drawable.fab_gradient;
        if (this.mLightActionBar) {
            i = R.drawable.fab_gradient_light;
        }
        findViewById.setBackgroundResource(i);
    }

    private void onNewScroll(int i, int i2, int i3) {
        if (!isActionBarNull()) {
            int height = this.mFlHeaderContainer.getHeight();
            if (height != this.mLastHeaderHeight) {
                Log.d(TAG, "current header height=" + height);
                updateHeaderHeight(height);
            }
            height -= getActionBarHeight();
            float min = ((float) Math.min(Math.max(i - height, 0), height)) / ((float) height);
            Log.d(TAG, "headerhight : " + height);
            float min2 = ((float) Math.min(Math.max(i2, 0), height)) / ((float) height);
            int i4 = (int) (255.0f * min);
            Log.d(TAG, "nilai ratio : " + min);
            Log.d(TAG, "nilai pictratio : " + min2);
            Log.d(TAG, "nilai scrollPosition : " + i);
            if (Utils.hasHoneycomb()) {
                if (i >= height - 100) {
                    this.mDrawableActionBarBackground.setAlpha(i4 * 5);
                    Log.d(TAG, "start solid with alpha = " + i4);
                } else {
                    this.mDrawableActionBarBackground.setAlpha(i4);
                }
                if (i >= i3 - getActionBarHeight()) {
                    this.mTvFakeName.setAlpha(1.0f);
                    this.mDrawableActionBarBackground.setAlpha(0);
                } else {
                    this.mTvFakeName.setAlpha(0.0f);
                }
                this.mCivPp.setAlpha(min2);
                addParallaxEffect(i);
            }
        }
    }

    private void updateHeaderHeight(int i) {
        Log.d(TAG, "update header height=" + i);
        ViewGroup.LayoutParams layoutParams = this.mFlMarginView.getLayoutParams();
        layoutParams.height = i;
        this.mFlMarginView.setLayoutParams(layoutParams);
        if (this.mViewListViewBackground != null) {
            FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) this.mViewListViewBackground.getLayoutParams();
            layoutParams2.topMargin = i;
            this.mViewListViewBackground.setLayoutParams(layoutParams2);
        }
        this.mLastHeaderHeight = i;
    }

    public View HeadClick() {
        return this.mFlMarginView;
    }

    public final FadingActionBarHelperBase actionBarBackground(int i) {
        this.mActionBarBackgroundResId = i;
        return this;
    }

    public final FadingActionBarHelperBase actionBarBackground(Drawable drawable) {
        this.mDrawableActionBarBackground = drawable;
        return this;
    }

    public final FadingActionBarHelperBase contentLayout(int i) {
        this.mContentLayoutResId = i;
        return this;
    }

    public final FadingActionBarHelperBase contentView(View view) {
        this.mViewContent = view;
        return this;
    }

    public final View createView(Context context) {
        return createView(LayoutInflater.from(context));
    }

    public final View createView(LayoutInflater layoutInflater) {
        this.mInflater = layoutInflater;
        if (this.mViewContent == null) {
            this.mViewContent = layoutInflater.inflate(this.mContentLayoutResId, null);
            this.mList = (ListView) this.mViewContent.findViewById(16908298);
            this.mTvFakeName = (TextView) this.mViewContent.findViewById(R.id.tv_profile_name);
            this.mIbEdit = (ImageButton) this.mViewContent.findViewById(R.id.ib_update);
            this.mLlDialog = (LinearLayout) this.mViewContent.findViewById(R.id.ll_dialog);
        }
        if (this.mViewHeader == null) {
            this.mViewHeader = layoutInflater.inflate(this.mHeaderLayoutResId, null, false);
            this.mCivPp = (CustomImageView) this.mViewHeader.findViewById(R.id.civ_pp);
            this.mIvDummy = (ImageView) this.mViewHeader.findViewById(R.id.view_dummy);
        }
        View createListView = this.mList != null ? createListView(this.mList) : null;
        if (this.mViewHeaderOverlay == null && this.mHeaderOverlayLayoutResId != 0) {
            this.mViewHeaderOverlay = layoutInflater.inflate(this.mHeaderOverlayLayoutResId, this.mFlMarginView, false);
        }
        if (this.mViewHeaderOverlay != null) {
            this.mFlMarginView.addView(this.mViewHeaderOverlay);
        }
        this.mViewHeader.measure(MeasureSpec.makeMeasureSpec(-1, 1073741824), MeasureSpec.makeMeasureSpec(-2, 1073741824));
        Log.d(TAG, "header measure=" + this.mViewHeader.getMeasuredHeight());
        updateHeaderHeight(this.mViewHeader.getMeasuredHeight());
        createListView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
            public void onGlobalLayout() {
                int height = FadingActionBarHelperBase.this.mFlHeaderContainer.getHeight();
                if (!FadingActionBarHelperBase.this.mFirstGlobalLayoutPerformed && height != 0) {
                    Log.d(FadingActionBarHelperBase.TAG, "header height=" + height);
                    FadingActionBarHelperBase.this.updateHeaderHeight(height);
                    FadingActionBarHelperBase.this.mFirstGlobalLayoutPerformed = true;
                }
            }
        });
        return createListView;
    }

    protected abstract int getActionBarHeight();

    protected Object getActionBarWithReflection(Activity activity, String str) {
        try {
            return activity.getClass().getMethod(str, new Class[0]).invoke(activity, new Object[0]);
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            return null;
        } catch (IllegalArgumentException e2) {
            e2.printStackTrace();
            return null;
        } catch (IllegalAccessException e3) {
            e3.printStackTrace();
            return null;
        } catch (InvocationTargetException e4) {
            e4.printStackTrace();
            return null;
        } catch (ClassCastException e5) {
            e5.printStackTrace();
            return null;
        }
    }

    public LinearLayout getLoadingDialog() {
        return this.mLlDialog;
    }

    public CustomImageView getProfilePicture() {
        return this.mCivPp;
    }

    public boolean hasProfilePicture() {
        return this.mHasProfilePicture;
    }

    public final FadingActionBarHelperBase headerLayout(int i) {
        this.mHeaderLayoutResId = i;
        return this;
    }

    public final FadingActionBarHelperBase headerOverlayLayout(int i) {
        this.mHeaderOverlayLayoutResId = i;
        return this;
    }

    public final FadingActionBarHelperBase headerOverlayView(View view) {
        this.mViewHeaderOverlay = view;
        return this;
    }

    public final FadingActionBarHelperBase headerView(View view) {
        this.mViewHeader = view;
        return this;
    }

    public void hidePPDummy() {
        this.mIvDummy.setVisibility(8);
    }

    public void initActionBar(Activity activity) {
        if (this.mDrawableActionBarBackground == null) {
            this.mDrawableActionBarBackground = activity.getResources().getDrawable(this.mActionBarBackgroundResId);
        }
        setActionBarBackgroundDrawable(this.mDrawableActionBarBackground);
        if (VERSION.SDK_INT <= 16) {
            this.mDrawableActionBarBackground.setCallback(this.mDrawableCallback);
        }
        if (Utils.hasHoneycomb()) {
            this.mTvFakeName.setAlpha(0.0f);
            this.mDrawableActionBarBackground.setAlpha(0);
            this.mCivPp.setAlpha(1);
            return;
        }
        this.mTvFakeName.setBackgroundColor(RtlSpacingHelper.UNDEFINED);
        this.mCivPp.setBackgroundColor(0);
    }

    protected abstract boolean isActionBarNull();

    public final FadingActionBarHelperBase lightActionBar(boolean z) {
        this.mLightActionBar = z;
        return this;
    }

    public final FadingActionBarHelperBase parallax(boolean z) {
        this.mUseParallax = z;
        return this;
    }

    protected abstract void setActionBarBackgroundDrawable(Drawable drawable);

    public ImageButton setFab() {
        return this.mIbEdit;
    }

    public void setHeaderName(Context context, String str) {
        this.mTvFakeName.setText(SmiledText.getSmiledText(context, str, this.mTvFakeName));
    }

    public void setProfilePictureDrawable(Drawable drawable) {
        if (this.mCivPp == null || drawable == null) {
            this.mHasProfilePicture = false;
            return;
        }
        if (Utils.hasJellyBean()) {
            this.mCivPp.setBackground(drawable);
        } else {
            this.mCivPp.setBackgroundDrawable(drawable);
        }
        this.mHasProfilePicture = true;
    }
}
