package com.albus.util;

import com.catfiz.model.Comment;
import com.catfiz.model.FileMetaInfo;
import com.catfiz.model.Message;
import com.catfiz.model.Quote;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishRESTAPI.MessageDeliveryStatus;
import com.catfiz.service.CatfishRESTAPI.MessageType;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.util.Log;
import com.catfiz.util.MimeTypeParser;
import com.catfiz.util.Utils;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.json.JSONException;
import org.json.JSONObject;

public class QuoteUtils {
    private static final String TAG = "QuoteUtils";

    /* synthetic */ class AnonymousClass1 {
        static final /* synthetic */ int[] $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType = new int[MessageType.values().length];

        static {
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.DATASEND_WCOMMENT.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.PHOTOSEND_WCOMMENT.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTCONFERENCE.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.VIDEO_STREAMING.ordinal()] = 4;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.BCASTCONFERENCE_VIDEO.ordinal()] = 5;
            } catch (NoSuchFieldError e5) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SHARE_SLINK.ordinal()] = 6;
            } catch (NoSuchFieldError e6) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SHARE_SLINK_AT_COMMENT.ordinal()] = 7;
            } catch (NoSuchFieldError e7) {
            }
            try {
                $SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.SHARE_SLINK_AT_POOL.ordinal()] = 8;
            } catch (NoSuchFieldError e8) {
            }
        }
    }

    public static String formattedQuotedBuilder(Comment comment, boolean z) {
        Log.d(TAG, "formattedQuotedBuilder(Comment):" + comment.getMessageType());
        String statusComment = comment.getStatusComment();
        switch (AnonymousClass1.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[comment.getMessageType()].ordinal()]) {
            case SimpleLog.LOG_LEVEL_OFF /*7*/:
                if (AlbusUtils.getSlinkFromJson(statusComment, ServerMessageDataStorage.SLINK) != null) {
                    statusComment = AlbusUtils.getSlinkFromJson(statusComment, ServerMessageDataStorage.MESSAGE);
                    break;
                }
                break;
        }
        return formattedQuotedBuilder(statusComment, comment.getMessageType() == MessageType.QUOTE.ordinal(), z);
    }

    public static String formattedQuotedBuilder(Message message, boolean z) {
        boolean z2 = true;
        Log.d(TAG, "formattedQuotedBuilder:" + message.getType());
        String str = "";
        switch (AnonymousClass1.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[message.getType()].ordinal()]) {
            case e.b /*1*/:
            case e.c /*2*/:
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
            case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                if (!(message.getDeliveryStatus() == MessageDeliveryStatus.CONFRCPENDINGDOWNLOAD.ordinal())) {
                    str = message.getText();
                    if (!FileMetaInfo.isFileMetaInfoValid(str)) {
                        str = message.getText();
                        break;
                    }
                    str = FileMetaInfo.metaInfoBuilder(str).getCaption();
                    break;
                }
                try {
                    String dataFilePath = message.getDataFilePath();
                    String[] split = dataFilePath.split(":");
                    Log.d(TAG, "Not downloaded " + dataFilePath + " " + split.length);
                    if (split.length >= 5) {
                        str = dataFilePath.substring(dataFilePath.lastIndexOf(":") + 1);
                        break;
                    }
                    str = "";
                    break;
                } catch (StringIndexOutOfBoundsException e) {
                    break;
                }
            case SimpleLog.LOG_LEVEL_FATAL /*6*/:
            case SimpleLog.LOG_LEVEL_OFF /*7*/:
            case Utils.FILE_TYPE_INSTALLER /*8*/:
                if (AlbusUtils.getSlinkFromJson(message.getText(), ServerMessageDataStorage.SLINK) != null) {
                    str = AlbusUtils.getSlinkFromJson(message.getText(), ServerMessageDataStorage.MESSAGE);
                    break;
                }
                break;
            default:
                str = message.getText();
                break;
        }
        if (message.getType() != MessageType.QUOTE.ordinal()) {
            z2 = false;
        }
        return formattedQuotedBuilder(str, z2, z);
    }

    public static String formattedQuotedBuilder(String str, boolean z, boolean z2) {
        String str2 = "";
        if (!z) {
            z = isQuoteMessage(str);
        }
        if (!z) {
            return str;
        }
        Quote quoteJSONStringDecoder = quoteJSONStringDecoder(str);
        if (quoteJSONStringDecoder == null) {
            return str2;
        }
        str2 = "";
        return z2 ? quoteJSONStringDecoder.getQuoteMessage() : quoteJSONStringDecoder.getMyMessage();
    }

    public static boolean isQuoteMessage(String str) {
        if (str == null || str.length() <= 0) {
            return false;
        }
        try {
            JSONObject jSONObject = new JSONObject(str);
            return jSONObject.has(MimeTypeParser.TAG_TYPE) && jSONObject.getInt(MimeTypeParser.TAG_TYPE) == MessageType.QUOTE.ordinal();
        } catch (JSONException e) {
            return false;
        }
    }

    public static String quoteJSONStringBuilder(Comment comment, String str) {
        try {
            Log.d(TAG, "quoteJSONStringBuilder(Comment):" + comment.getMessageType());
            JSONObject jSONObject = new JSONObject();
            jSONObject.put(CatfishRESTAPI.CFCOMPACT_STICKERID, comment.getSender().getId());
            jSONObject.put(CatfishDataStorage.NIC_NAME, comment.getSender().getName());
            jSONObject.put(ServerMessageDataStorage.MESSAGE, str);
            jSONObject.put(MimeTypeParser.TAG_TYPE, MessageType.QUOTE.ordinal());
            boolean z = comment.getMessageType() == MessageType.QUOTE.ordinal();
            if (!z) {
                z = isQuoteMessage(comment.getStatusComment());
            }
            if (z) {
                Quote quoteJSONStringDecoder = quoteJSONStringDecoder(comment.getStatusComment());
                if (quoteJSONStringDecoder != null) {
                    jSONObject.put(AlbusModelObject.QUOTE, quoteJSONStringDecoder.getMyMessage());
                }
            } else {
                Object statusComment = comment.getStatusComment();
                switch (AnonymousClass1.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[comment.getMessageType()].ordinal()]) {
                    case SimpleLog.LOG_LEVEL_OFF /*7*/:
                        if (AlbusUtils.getSlinkFromJson(statusComment, ServerMessageDataStorage.SLINK) == null) {
                            jSONObject.put(AlbusModelObject.QUOTE, "");
                            break;
                        }
                        statusComment = AlbusUtils.getSlinkFromJson(statusComment, ServerMessageDataStorage.MESSAGE);
                        if (statusComment != null) {
                            jSONObject.put(AlbusModelObject.QUOTE, statusComment);
                            break;
                        }
                        break;
                }
                jSONObject.put(AlbusModelObject.QUOTE, statusComment);
            }
            return jSONObject.toString();
        } catch (JSONException e) {
            return "";
        }
    }

    public static String quoteJSONStringBuilder(Message message, String str) {
        Object obj = 1;
        try {
            Log.d(TAG, "quoteJSONStringBuilder:" + message.getType());
            JSONObject jSONObject = new JSONObject();
            jSONObject.put(CatfishRESTAPI.CFCOMPACT_STICKERID, message.getSender().getId());
            jSONObject.put(CatfishDataStorage.NIC_NAME, message.getSender().getName());
            jSONObject.put(ServerMessageDataStorage.MESSAGE, str);
            jSONObject.put(MimeTypeParser.TAG_TYPE, MessageType.QUOTE.ordinal());
            boolean z = message.getType() == MessageType.QUOTE.ordinal();
            if (!z) {
                z = isQuoteMessage(message.getText());
            }
            if (!z) {
                String text;
                switch (AnonymousClass1.$SwitchMap$com$catfiz$service$CatfishRESTAPI$MessageType[MessageType.values()[message.getType()].ordinal()]) {
                    case e.b /*1*/:
                    case e.c /*2*/:
                    case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                    case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                    case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                        if (message.getDeliveryStatus() != MessageDeliveryStatus.CONFRCPENDINGDOWNLOAD.ordinal()) {
                            obj = null;
                        }
                        if (obj == null) {
                            text = message.getText();
                            if (!FileMetaInfo.isFileMetaInfoValid(text)) {
                                jSONObject.put(AlbusModelObject.QUOTE, message.getText());
                                break;
                            }
                            jSONObject.put(AlbusModelObject.QUOTE, FileMetaInfo.metaInfoBuilder(text).getCaption());
                            break;
                        }
                        try {
                            text = message.getDataFilePath();
                            String[] split = text.split(":");
                            Log.d(TAG, "Not downloaded " + text + " " + split.length);
                            if (split.length >= 5) {
                                jSONObject.put(AlbusModelObject.QUOTE, text.substring(text.lastIndexOf(":") + 1));
                                break;
                            }
                            jSONObject.put(AlbusModelObject.QUOTE, "");
                            break;
                        } catch (StringIndexOutOfBoundsException e) {
                            break;
                        }
                    case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                    case SimpleLog.LOG_LEVEL_OFF /*7*/:
                    case Utils.FILE_TYPE_INSTALLER /*8*/:
                        text = message.getText();
                        if (AlbusUtils.getSlinkFromJson(text, ServerMessageDataStorage.SLINK) == null) {
                            jSONObject.put(AlbusModelObject.QUOTE, "");
                            break;
                        }
                        text = AlbusUtils.getSlinkFromJson(text, ServerMessageDataStorage.MESSAGE);
                        if (text != null) {
                            jSONObject.put(AlbusModelObject.QUOTE, text);
                            break;
                        }
                        break;
                    default:
                        jSONObject.put(AlbusModelObject.QUOTE, message.getText());
                        break;
                }
            }
            Quote quoteJSONStringDecoder = quoteJSONStringDecoder(message.getText());
            if (quoteJSONStringDecoder != null) {
                jSONObject.put(AlbusModelObject.QUOTE, quoteJSONStringDecoder.getMyMessage());
            }
            return jSONObject.toString();
        } catch (JSONException e2) {
            return "";
        }
    }

    public static Quote quoteJSONStringDecoder(String str) {
        if (str == null || str.length() <= 0) {
            return null;
        }
        try {
            JSONObject jSONObject = new JSONObject(str);
            Quote quote = new Quote();
            if (jSONObject.has(CatfishRESTAPI.CFCOMPACT_STICKERID)) {
                quote.setSenderID(jSONObject.getString(CatfishRESTAPI.CFCOMPACT_STICKERID));
            }
            if (jSONObject.has(CatfishDataStorage.NIC_NAME)) {
                quote.setSenderName(jSONObject.getString(CatfishDataStorage.NIC_NAME));
            }
            if (jSONObject.has(ServerMessageDataStorage.MESSAGE)) {
                quote.setMyMessage(jSONObject.getString(ServerMessageDataStorage.MESSAGE));
            }
            if (jSONObject.has(AlbusModelObject.QUOTE)) {
                quote.setQuoteMessage(jSONObject.getString(AlbusModelObject.QUOTE));
            }
            if (!jSONObject.has(MimeTypeParser.TAG_TYPE)) {
                return quote;
            }
            quote.setMessageType(jSONObject.getInt(MimeTypeParser.TAG_TYPE));
            return quote;
        } catch (JSONException e) {
            return null;
        }
    }
}
