package com.albus.util;

import android.media.MediaRecorder;
import android.media.MediaRecorder.OnInfoListener;
import android.os.Environment;
import android.os.Handler;
import android.view.View;
import android.widget.Chronometer;
import android.widget.ImageView;
import com.catfiz.R;
import com.catfiz.consts.CatfizMsgTypes;
import com.catfiz.media.StorageDir;
import com.catfiz.service.CatfishService;
import com.catfiz.util.Log;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class AlbusAudioRecorder {
    protected static final String TAG = "AlbusAudioRecorder";
    public static final String mCacheParentPath = (Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + CatfishService.FILE_PACKAGE_NAME_CATFIZ + "/voice/");
    private OnAlbusAudioRecorderAction mOnAlbusAudioRecorderAction = null;
    private String mPath;
    private Handler mTimerHandler = null;
    private final Runnable mUmplitudeUpdate = new Runnable() {
        public void run() {
            AlbusAudioRecorder.this.mOnAlbusAudioRecorderAction.onAmplitudeUpdate(AlbusAudioRecorder.this.recorder.getMaxAmplitude());
            AlbusAudioRecorder.this.tickTimer();
        }
    };
    final MediaRecorder recorder = new MediaRecorder();

    public interface OnAlbusAudioRecorderAction {
        void onAmplitudeUpdate(int i);

        void onFileSizeLimitAction();
    }

    public AlbusAudioRecorder(String str, int i) {
        String str2 = "";
        str2 = i == 0 ? StorageDir.getPrivateChatDir(2) : i == 1 ? StorageDir.getGroupChatDir(2) : mCacheParentPath;
        this.mPath = str2 + "rec." + new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date()) + ".amr";
        File file = new File(str2, ".nomedia");
        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        this.mTimerHandler = new Handler();
    }

    private void tickTimer() {
        this.mTimerHandler.postDelayed(this.mUmplitudeUpdate, 100);
    }

    public String getAudioPath() {
        return this.mPath.toString();
    }

    public void setOnAlbusAudioRecorderAction(OnAlbusAudioRecorderAction onAlbusAudioRecorderAction) {
        this.mOnAlbusAudioRecorderAction = onAlbusAudioRecorderAction;
    }

    public void start() {
        String externalStorageState = Environment.getExternalStorageState();
        if (externalStorageState.equals("mounted")) {
            File parentFile = new File(this.mPath).getParentFile();
            if (parentFile.exists() || parentFile.mkdirs()) {
                this.recorder.setAudioSource(1);
                this.recorder.setOutputFormat(1);
                this.recorder.setAudioEncoder(1);
                this.recorder.setOutputFile(this.mPath);
                this.recorder.setMaxFileSize(150000);
                this.recorder.setOnInfoListener(new OnInfoListener() {
                    public void onInfo(MediaRecorder mediaRecorder, int i, int i2) {
                        Log.d(AlbusAudioRecorder.TAG, " --- onInfo --- = " + i);
                        if (i == 801) {
                            if (AlbusAudioRecorder.this.mOnAlbusAudioRecorderAction != null) {
                                AlbusAudioRecorder.this.mOnAlbusAudioRecorderAction.onFileSizeLimitAction();
                            }
                            Log.d(AlbusAudioRecorder.TAG, " --- onInfo MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED --- ");
                        }
                    }
                });
                this.recorder.prepare();
                try {
                    this.recorder.start();
                    tickTimer();
                    return;
                } catch (Exception e) {
                    throw new IOException("Start failed.");
                }
            }
            throw new IOException("Path to file could not be created.");
        }
        throw new IOException("SD Card is not mounted.  It is " + externalStorageState + ".");
    }

    public void stop() {
        this.mTimerHandler.removeCallbacksAndMessages(null);
        this.recorder.stop();
        this.recorder.release();
    }

    public void updateVoiceLevelView(View view, int i) {
        if (i != 0) {
            ImageView imageView = (ImageView) view.findViewById(R.id.iv_attach_voice_bottom_bar);
            ((Chronometer) view.findViewById(R.id.chronometer1)).start();
            if (i > 20000) {
                imageView.setImageResource(R.drawable.df_voicegraph_6);
            } else if (i > 17000) {
                imageView.setImageResource(R.drawable.df_voicegraph_5);
            } else if (i > 14000) {
                imageView.setImageResource(R.drawable.df_voicegraph_4);
            } else if (i > 11000) {
                imageView.setImageResource(R.drawable.df_voicegraph_3);
            } else if (i > 8000) {
                imageView.setImageResource(R.drawable.df_voicegraph_2);
            } else if (i > CatfizMsgTypes.NICSUBTYPE_PUBLICANN) {
                imageView.setImageResource(R.drawable.df_voicegraph_1);
            } else {
                imageView.setImageResource(R.drawable.df_voicegraph_0);
            }
        }
    }
}
