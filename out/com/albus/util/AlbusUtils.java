package com.albus.util;

import android.content.ClipData;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.drawable.Drawable;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Build.VERSION;
import android.support.v4.media.session.PlaybackStateCompat;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.text.ClipboardManager;
import android.text.Html;
import android.text.Html.ImageGetter;
import android.text.Spanned;
import android.text.format.Time;
import android.util.Patterns;
import android.view.WindowManager;
import android.widget.TextView;
import android.widget.Toast;
import com.catfiz.R;
import com.catfiz.consts.CatfizMsgTypes;
import com.catfiz.localstorage.ChunkStorage;
import com.catfiz.model.User;
import com.catfiz.objectcomment.ObjectCommentDataStorage;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.util.Log;
import com.catfiz.util.Utils;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class AlbusUtils {
    private static final String TAG = "Utils";

    final class AnonymousClass1 implements ImageGetter {
        final /* synthetic */ Context val$mContextHelper;

        AnonymousClass1(Context context) {
            this.val$mContextHelper = context;
        }

        public Drawable getDrawable(String str) {
            Drawable drawable = this.val$mContextHelper.getResources().getDrawable(this.val$mContextHelper.getResources().getIdentifier("drawable/" + str.replace(".png", ""), null, this.val$mContextHelper.getPackageName()));
            drawable.setBounds(0, 0, drawable.getMinimumWidth() / 2, drawable.getMinimumHeight() / 2);
            return drawable;
        }
    }

    public static int calculateInSampleSize(Options options, int i, int i2) {
        int i3 = options.outHeight;
        int i4 = options.outWidth;
        int i5 = 1;
        if (i3 > i2 || i4 > i) {
            i3 /= 3;
            i4 /= 3;
            while (i3 / i5 > i2 && i4 / i5 > i) {
                i5 *= 2;
            }
        }
        return i5;
    }

    public static boolean copyFileUsingFileStreams(File file, File file2) {
        Throwable th;
        InputStream inputStream = null;
        OutputStream fileOutputStream;
        try {
            InputStream fileInputStream = new FileInputStream(file);
            try {
                fileOutputStream = new FileOutputStream(file2);
            } catch (Throwable th2) {
                th = th2;
                fileOutputStream = null;
                inputStream = fileInputStream;
                inputStream.close();
                fileOutputStream.close();
                throw th;
            }
            try {
                byte[] bArr = new byte[AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT];
                while (true) {
                    int read = fileInputStream.read(bArr);
                    if (read > 0) {
                        fileOutputStream.write(bArr, 0, read);
                    } else {
                        fileInputStream.close();
                        fileOutputStream.close();
                        return true;
                    }
                }
            } catch (Throwable th3) {
                th = th3;
                inputStream = fileInputStream;
                inputStream.close();
                fileOutputStream.close();
                throw th;
            }
        } catch (Throwable th4) {
            th = th4;
            fileOutputStream = null;
            inputStream.close();
            fileOutputStream.close();
            throw th;
        }
    }

    public static boolean copyToClipboard(Context context, String str) {
        try {
            if (VERSION.SDK_INT < 11) {
                ((ClipboardManager) context.getSystemService("clipboard")).setText(str);
            } else {
                ((android.content.ClipboardManager) context.getSystemService("clipboard")).setPrimaryClip(ClipData.newPlainText(context.getString(R.string.copy_pin), str));
            }
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public static float dpFromPx(Context context, float f) {
        return f / context.getResources().getDisplayMetrics().density;
    }

    public static boolean fileSizeExceedCheck(File file, long j) {
        return file.length() / PlaybackStateCompat.ACTION_PLAY_FROM_MEDIA_ID < j;
    }

    public static Bitmap getCompressedBitmap(String str) {
        Options options = new Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(str, options);
        options.inSampleSize = calculateInSampleSize(options, options.outWidth, options.outHeight);
        options.inJustDecodeBounds = false;
        options.inPreferredConfig = Config.RGB_565;
        options.inDither = true;
        return BitmapFactory.decodeFile(str, options);
    }

    public static String getDate() {
        return new SimpleDateFormat("HH:mm, dd MMM yyyy").format(new Date());
    }

    public static int getDisplayHeight(Context context) {
        return ((WindowManager) context.getSystemService("window")).getDefaultDisplay().getHeight();
    }

    public static int getDisplayWidth(Context context) {
        return ((WindowManager) context.getSystemService("window")).getDefaultDisplay().getWidth();
    }

    public static Drawable getDrawableForMimetype(Uri uri, String str, Context context) {
        if (str == null) {
            return null;
        }
        PackageManager packageManager = context.getPackageManager();
        Intent intent = new Intent("android.intent.action.VIEW");
        intent.setDataAndType(uri, str);
        List queryIntentActivities = packageManager.queryIntentActivities(intent, AccessibilityNodeInfoCompat.ACTION_CUT);
        return (queryIntentActivities == null || queryIntentActivities.size() <= 0) ? null : ((ResolveInfo) queryIntentActivities.get(queryIntentActivities.size() - 1)).loadIcon(packageManager);
    }

    public static String getFileSize(int i) {
        return Utils.getFileSize((long) i);
    }

    public static String getFileSize(long j) {
        String str = "";
        String[] strArr = new String[]{"B", "kB", "MB", "GB", "TB"};
        if (j <= 0) {
            return "0";
        }
        int log10 = (int) (Math.log10((double) j) / Math.log10(1024.0d));
        return new DecimalFormat("#,##0.#").format(((double) j) / Math.pow(1024.0d, (double) log10)) + " " + strArr[log10];
    }

    public static String getFileSize(File file) {
        return getFileSize(file.length());
    }

    public static int getIconFileThumb(String str) {
        switch (Utils.getFileTypeFromPath(str)) {
            case e.b /*1*/:
                return R.drawable.ic_tumb_image;
            case e.c /*2*/:
                return R.drawable.ic_tumb_audio;
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                return R.drawable.ic_tumb_pdf;
            case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                return R.drawable.ic_tumb_doc;
            case SimpleLog.LOG_LEVEL_FATAL /*6*/:
                return R.drawable.ic_tumb_video;
            case Utils.FILE_TYPE_INSTALLER /*8*/:
                return R.drawable.ic_tumb_apk;
            default:
                return R.drawable.ic_tumb_file;
        }
    }

    public static String getLastChatTimeActivities(String str, Context context, boolean z) {
        long currentTimeMillis = System.currentTimeMillis();
        long j = 0;
        try {
            j = Long.parseLong(str, 10);
        } catch (NumberFormatException e) {
            Log.d(TAG, "Error parse timestamp:" + e.getMessage());
        }
        int i = ((int) (currentTimeMillis - j)) / CatfizMsgTypes.NICSUBTYPE_PARTNER;
        int i2 = i % 60;
        i /= 60;
        i2 = i % 60;
        i /= 60;
        int i3 = i % 24;
        i /= 24;
        int i4 = i % 12;
        i /= 12;
        Calendar instance = Calendar.getInstance();
        instance.setTimeInMillis(j);
        Calendar instance2 = Calendar.getInstance();
        instance2.setTimeInMillis(currentTimeMillis);
        Time time = new Time();
        time.set(j);
        String string = context.getResources().getString(R.string.now);
        String[] stringArray = context.getResources().getStringArray(R.array.list_day);
        return i >= 1 ? time.format("%d %b %Y, %H:%M") : i4 > 7 ? time.format("%d %b, %H:%M") : (i4 < 1 || i4 > 7) ? (i3 == 1 || i3 > 1) ? instance2.get(7) == instance.get(7) ? time.format("%H:%M") : stringArray[instance.get(7)] + " " + time.format("%H:%M") : z ? i2 > 1 ? isLocale("en") ? String.valueOf(i2) + " " + context.getString(R.string.min) + "s" : String.valueOf(i2) + " " + context.getString(R.string.min) : i2 == 1 ? "1 " + context.getString(R.string.min) : string : time.format("%H:%M") : stringArray[instance.get(7)] + " " + time.format("%H:%M");
    }

    public static String getLastTimeActivities(long j, Context context) {
        return getTimeActivity(System.currentTimeMillis(), j, context);
    }

    public static String getLastTimeActivities(String str, Context context) {
        long currentTimeMillis = System.currentTimeMillis();
        long j = 0;
        try {
            j = Long.parseLong(str, 10);
        } catch (NumberFormatException e) {
            Log.d(TAG, "Error parse timestamp:" + e.getMessage());
        }
        return getTimeActivity(currentTimeMillis, j, context);
    }

    public static List getListUsersFromJSON(String str) {
        if (str == null || str.length() <= 0) {
            return null;
        }
        try {
            JSONObject jSONObject = new JSONObject(str);
            if (jSONObject.has("contacts")) {
                JSONArray jSONArray = jSONObject.getJSONArray("contacts");
                List arrayList = new ArrayList();
                for (int i = 0; i < jSONArray.length(); i++) {
                    Object obj;
                    JSONObject jSONObject2 = jSONArray.getJSONObject(i);
                    User user = new User();
                    if (jSONObject2.has("pin")) {
                        user.setId(jSONObject2.getString("pin"));
                        obj = 1;
                    } else {
                        obj = null;
                    }
                    if (jSONObject2.has(CatfishDataStorage.NIC_NAME)) {
                        user.setName(jSONObject2.getString(CatfishDataStorage.NIC_NAME));
                        obj = 1;
                    }
                    if (obj != null) {
                        arrayList.add(user);
                    }
                }
                return arrayList;
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static Drawable getMimeIcon(String str, Context context) {
        String toLowerCase = str.toLowerCase(Locale.US);
        Uri parse = Uri.parse(toLowerCase);
        Log.d(TAG, "uri=" + parse + " \n Path=" + toLowerCase);
        return getDrawableForMimetype(parse, getmimetype(parse), context);
    }

    public static String getSlinkFromJson(String str, String str2) {
        if (str == null || str.length() <= 0 || str2 == null || str2.length() <= 0) {
            return null;
        }
        try {
            JSONObject jSONObject = new JSONObject(str);
            if (str2.compareTo(ChunkStorage.DATA_TABLE_NAME) == 0) {
                return jSONObject.has(ServerMessageDataStorage.IMAGEPATH) ? jSONObject.getString(ServerMessageDataStorage.IMAGEPATH) : jSONObject.has(ObjectCommentDataStorage.DATAPATH) ? jSONObject.getString(ObjectCommentDataStorage.DATAPATH) : null;
            } else {
                if (!jSONObject.has(str2)) {
                    return null;
                }
                String string = jSONObject.getString(str2);
                Log.e(TAG, "getSlinkFromJson[what=" + str2 + "]:" + string);
                return string;
            }
        } catch (Exception e) {
            Log.e(TAG, "Error: " + e.toString());
            return null;
        }
    }

    public static Spanned getSpannedText(String str, Context context) {
        return Html.fromHtml(removeUnecessaryHtmlTag(str), new AnonymousClass1(context), null);
    }

    private static String getTimeActivity(long j, long j2, Context context) {
        int i = ((int) (j - j2)) / CatfizMsgTypes.NICSUBTYPE_PARTNER;
        int i2 = i % 60;
        i /= 60;
        i2 = i % 60;
        i /= 60;
        int i3 = i % 24;
        i /= 24;
        int i4 = i % 12;
        int i5 = i / 12;
        String string = context.getResources().getString(R.string.now);
        String[] stringArray = context.getResources().getStringArray(R.array.list_day);
        Calendar instance = Calendar.getInstance();
        instance.setTimeInMillis(j2);
        Calendar instance2 = Calendar.getInstance();
        instance2.setTimeInMillis(j);
        Time time = new Time();
        time.set(j2);
        return i5 >= 1 ? time.format("%d %b %Y") : i4 > 7 ? time.format("%d %b") : (i4 < 1 || i4 > 7) ? (i3 == 1 || i3 > 1) ? instance2.get(7) == instance.get(7) ? time.format("%H:%M") : stringArray[instance.get(7)] : i2 > 1 ? isLocale("en") ? String.valueOf(i2) + " " + context.getString(R.string.min) + "s" : String.valueOf(i2) + " " + context.getString(R.string.min) : i2 == 1 ? "1 " + context.getString(R.string.min) : string : stringArray[instance.get(7)];
    }

    public static String getTimeAndDate(long j) {
        try {
            Calendar instance = Calendar.getInstance();
            TimeZone timeZone = TimeZone.getDefault();
            instance.setTimeInMillis(j);
            instance.add(14, timeZone.getOffset(instance.getTimeInMillis()));
            String format = new SimpleDateFormat(" dd, MMM yyyy").format(instance.getTime());
            Time time = new Time();
            time.set(j);
            return time.format("%H:%M") + format;
        } catch (Exception e) {
            return "";
        }
    }

    public static String getmimetype(Uri uri) {
        return Utils.getmimetype(uri);
    }

    public static boolean isEmailValid(CharSequence charSequence) {
        return Patterns.EMAIL_ADDRESS.matcher(charSequence).matches();
    }

    public static boolean isLocale(String str) {
        return Locale.getDefault().getLanguage().equals(str);
    }

    public static boolean isNetworkAvailable(Context context) {
        NetworkInfo activeNetworkInfo = ((ConnectivityManager) context.getSystemService("connectivity")).getActiveNetworkInfo();
        return activeNetworkInfo != null && activeNetworkInfo.isConnected();
    }

    public static String milliSecondsToTimer(long j) {
        String str = "";
        String str2 = "";
        int i = (int) (j / 3600000);
        int i2 = ((int) (j % 3600000)) / 60000;
        int i3 = (int) (((j % 3600000) % 60000) / 1000);
        if (i > 0) {
            str = i + ":";
        }
        if (i3 < 10) {
            str2 = "0" + i3;
        } else if (i3 >= 0) {
            str2 = "" + i3;
        }
        return str + i2 + ":" + str2;
    }

    public static float pxFromDp(Context context, float f) {
        return context.getResources().getDisplayMetrics().density * f;
    }

    public static String removeUnecessaryHtmlTag(String str) {
        return str.replace("<u>", "").replace("</u>", "").replace("<p dir=ltr>", "").replace("<p dir=\"ltr\">", "").replace("<p>", "").replace("</p>", "").replace("<font color =\"#000000\">", "").replace("</font>", "").trim();
    }

    public static void setToastView(Context context, String str) {
        Toast makeText = Toast.makeText(context, "   " + str + "   ", 0);
        TextView textView = (TextView) makeText.getView().findViewById(16908299);
        if (textView != null) {
            textView.setGravity(17);
        }
        makeText.show();
    }

    public static boolean verifyPermissions(int[] iArr) {
        if (iArr.length < 1) {
            return false;
        }
        for (int i : iArr) {
            if (i != 0) {
                return false;
            }
        }
        return true;
    }
}
