package com.albus.dialog;

import android.content.Context;
import android.content.DialogInterface;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.text.Editable;
import android.text.InputFilter;
import android.text.InputFilter.LengthFilter;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import com.albus.dialog.AlbusDialog.OnActionClickListener;
import com.albus.dialog.AlbusDialog.OnFizzlinkUpload;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.catfiz.R;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.util.FizzlinkUtil;
import org.apache.http.HttpStatus;
import org.apache.http.conn.params.ConnManagerParams;
import org.apache.http.util.LangUtils;

public class CustomDialogFragment extends DialogFragment {
    private static final String TAG = "CustomDialogFragment";
    private OnActionClickListener mActionListener = null;
    private Context mContext = null;
    private int mDialogId = -1;
    private OnFizzlinkUpload mFizzlinkAction;
    private AlbusDialogInterface mIDialog = null;
    private String mName = null;
    private int mValue = -1;
    private View mView = null;

    private void DisableButton() {
        this.mView.findViewById(R.id.btn_action).setEnabled(false);
        this.mView.findViewById(R.id.btn_action).setBackgroundResource(R.drawable.bg_btn_blue_disable);
    }

    private void EnableButton() {
        this.mView.findViewById(R.id.btn_action).setEnabled(true);
        this.mView.findViewById(R.id.btn_action).setBackgroundResource(R.drawable.button_blue_onclick);
    }

    public static CustomDialogFragment newInstance(Bundle bundle) {
        CustomDialogFragment customDialogFragment = new CustomDialogFragment();
        customDialogFragment.mName = bundle.getString(CatfishDataStorage.NIC_NAME);
        customDialogFragment.mValue = bundle.getInt(AlbusModelObject.VALUE, -1);
        customDialogFragment.setArguments(bundle);
        return customDialogFragment;
    }

    private void setActionBtn() {
        this.mView.findViewById(R.id.btn_action).setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                CustomDialogFragment.this.mActionListener.onActionYesListener();
            }
        });
        this.mView.findViewById(R.id.btn_cancel).setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                CustomDialogFragment.this.mActionListener.onActionNoListener();
            }
        });
    }

    public void getValCustom(EditText editText) {
        editText.addTextChangedListener(new TextWatcher() {
            public void afterTextChanged(Editable editable) {
            }

            public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
            }

            public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                if (charSequence.equals("")) {
                    CustomDialogFragment.this.DisableButton();
                } else {
                    CustomDialogFragment.this.EnableButton();
                }
            }
        });
    }

    public void onCancel(DialogInterface dialogInterface) {
        if (this.mDialogId == 21) {
            this.mIDialog.onCancelDialog(21, dialogInterface, this.mContext);
        } else if (this.mDialogId == 22) {
            this.mIDialog.onCancelDialog(22, dialogInterface, this.mContext);
        }
        super.onCancel(dialogInterface);
    }

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        setStyle(1, 16973942);
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        this.mDialogId = getArguments().getInt(AlbusModelObject.DIALOG);
        final EditText editText;
        final TextView textView;
        Button button;
        switch (this.mDialogId) {
            case LangUtils.HASH_SEED /*17*/:
                this.mView = layoutInflater.inflate(R.layout.dialog_change_phone, viewGroup, false);
                this.mIDialog.onCreateDialog(17, this, this.mView, getArguments(), this.mContext);
                editText = (EditText) this.mView.findViewById(R.id.et_change_phone);
                final String obj = editText.getText().toString();
                editText.addTextChangedListener(new TextWatcher() {
                    public void afterTextChanged(Editable editable) {
                    }

                    public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                    }

                    public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                        if (editText.getText().toString().equals("")) {
                            CustomDialogFragment.this.DisableButton();
                            return;
                        }
                        CustomDialogFragment.this.EnableButton();
                        if (editText.getText().toString().equals(obj)) {
                            CustomDialogFragment.this.DisableButton();
                        }
                    }
                });
                setActionBtn();
                break;
            case FizzlinkUtil.S_AAC /*18*/:
                this.mView = layoutInflater.inflate(R.layout.dialog_change_gender, viewGroup, false);
                this.mIDialog.onCreateDialog(18, this, this.mView, getArguments(), this.mContext);
                break;
            case ConnManagerParams.DEFAULT_MAX_TOTAL_CONNECTIONS /*20*/:
                this.mView = layoutInflater.inflate(R.layout.dialog_input_value, viewGroup, false);
                this.mIDialog.onCreateDialog(20, this, this.mView, getArguments(), this.mContext);
                ((EditText) this.mView.findViewById(R.id.et_value)).addTextChangedListener(new TextWatcher() {
                    public void afterTextChanged(Editable editable) {
                    }

                    public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                    }

                    public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                        if (i3 == 10) {
                            CustomDialogFragment.this.EnableButton();
                        } else {
                            CustomDialogFragment.this.DisableButton();
                        }
                    }
                });
                setActionBtn();
                break;
            case R.styleable.Toolbar_navigationContentDescription /*21*/:
                this.mView = layoutInflater.inflate(R.layout.dialog_profile_custom_chooser, viewGroup, false);
                this.mIDialog.onCreateDialog(21, this, this.mView, getArguments(), this.mContext);
                getValCustom((EditText) this.mView.findViewById(R.id.et_custom_name));
                setActionBtn();
                break;
            case R.styleable.Toolbar_logoDescription /*22*/:
                this.mView = layoutInflater.inflate(R.layout.dialog_profile_custom_chooser, viewGroup, false);
                this.mIDialog.onCreateDialog(22, this, this.mView, getArguments(), this.mContext);
                break;
            case R.styleable.Toolbar_titleTextColor /*23*/:
                this.mView = layoutInflater.inflate(R.layout.dialog_add_list_profile, viewGroup, false);
                this.mIDialog.onCreateDialog(23, this, this.mView, getArguments(), this.mContext);
                break;
            case R.styleable.Theme_actionModeCopyDrawable /*33*/:
                this.mView = layoutInflater.inflate(R.layout.dialog_menu_group_member, viewGroup, false);
                this.mIDialog.onCreateDialog(33, this, this.mView, getArguments(), this.mContext);
                break;
            case R.styleable.Theme_dialogPreferredPadding /*43*/:
                this.mView = layoutInflater.inflate(R.layout.dialog_list_category, viewGroup, false);
                this.mIDialog.onCreateDialog(43, this, this.mView, getArguments(), this.mContext);
                break;
            case R.styleable.Theme_listDividerAlertDialog /*44*/:
                this.mView = layoutInflater.inflate(R.layout.dialog_input_value, viewGroup, false);
                this.mIDialog.onCreateDialog(44, this, this.mView, getArguments(), this.mContext);
                ((EditText) this.mView.findViewById(R.id.et_value)).setHint(this.mContext.getString(R.string.category_name));
                ((TextView) this.mView.findViewById(R.id.tv_title)).setText(this.mContext.getString(R.string.new_category));
                ((Button) this.mView.findViewById(R.id.btn_action)).setText(this.mContext.getString(R.string.btn_create));
                EnableButton();
                setActionBtn();
                break;
            case R.styleable.Theme_actionDropDownStyle /*45*/:
                this.mView = layoutInflater.inflate(R.layout.dialog_list_category, viewGroup, false);
                this.mIDialog.onCreateDialog(45, this, this.mView, getArguments(), this.mContext);
                break;
            case R.styleable.Theme_dropdownListPreferredItemHeight /*46*/:
                this.mView = layoutInflater.inflate(R.layout.dialog_input_value, viewGroup, false);
                this.mIDialog.onCreateDialog(46, this, this.mView, getArguments(), this.mContext);
                editText = (EditText) this.mView.findViewById(R.id.et_value);
                editText.setHint(this.mContext.getString(R.string.changed_name));
                editText.setText(this.mName);
                editText.setSelection(editText.getText().length());
                editText.addTextChangedListener(new TextWatcher() {
                    public void afterTextChanged(Editable editable) {
                    }

                    public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                    }

                    public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                        if (charSequence.equals(CustomDialogFragment.this.mName) && charSequence.equals("")) {
                            CustomDialogFragment.this.DisableButton();
                        } else {
                            CustomDialogFragment.this.EnableButton();
                        }
                    }
                });
                ((TextView) this.mView.findViewById(R.id.tv_title)).setText(this.mContext.getString(R.string.category_name));
                ((Button) this.mView.findViewById(R.id.btn_action)).setText(this.mContext.getString(R.string.btn_change));
                setActionBtn();
                break;
            case R.styleable.Theme_buttonBarButtonStyle /*51*/:
                this.mView = layoutInflater.inflate(R.layout.dialog_list_category, viewGroup, false);
                this.mIDialog.onCreateDialog(45, this, this.mView, getArguments(), this.mContext);
                break;
            case R.styleable.Theme_selectableItemBackgroundBorderless /*53*/:
                this.mView = layoutInflater.inflate(R.layout.dialog_fizzlink, viewGroup, false);
                this.mIDialog.onCreateDialog(53, this, this.mView, getArguments(), this.mContext);
                textView = (TextView) this.mView.findViewById(R.id.tv_count);
                textView.setText("0/500");
                final EditText editText2 = (EditText) this.mView.findViewById(R.id.et_fizz_edittext);
                button = (Button) this.mView.findViewById(R.id.btn_cancel);
                Button button2 = (Button) this.mView.findViewById(R.id.btn_action);
                editText2.setFilters(new InputFilter[]{new LengthFilter(HttpStatus.SC_INTERNAL_SERVER_ERROR)});
                editText2.addTextChangedListener(new TextWatcher() {
                    public void afterTextChanged(Editable editable) {
                    }

                    public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                    }

                    public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                        int length = editText2.getText().length();
                        textView.setText(length + "/" + HttpStatus.SC_INTERNAL_SERVER_ERROR);
                        if (editText2.isFocused() && length >= HttpStatus.SC_INTERNAL_SERVER_ERROR) {
                            AlbusUtils.setToastView(CustomDialogFragment.this.getActivity(), CustomDialogFragment.this.getString(R.string.reach_max_char_caption).replace("[count]", "500"));
                        }
                    }
                });
                button.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        CustomDialogFragment.this.dismiss();
                    }
                });
                button2.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        CustomDialogFragment.this.dismiss();
                        CustomDialogFragment.this.mFizzlinkAction.onUploadFizzlink(editText2.getText().toString());
                    }
                });
                break;
            case R.styleable.Theme_borderlessButtonStyle /*54*/:
                this.mView = layoutInflater.inflate(R.layout.dialog_upload_large, viewGroup, false);
                this.mIDialog.onCreateDialog(54, this, this.mView, getArguments(), this.mContext);
                textView = (TextView) this.mView.findViewById(R.id.tv_caption_title);
                TextView textView2 = (TextView) this.mView.findViewById(R.id.tv_decription);
                button = (Button) this.mView.findViewById(R.id.btn_cancel);
                CharSequence string = this.mContext.getString(R.string.warn_upload_large_file);
                CharSequence string2 = this.mContext.getString(R.string.warn_upload_large_file_desc_opt);
                if (this.mValue == 3) {
                    string = string.replace("[TYPE]", this.mContext.getString(R.string.video));
                    string2 = this.mContext.getString(R.string.warn_upload_large_video_desc) + "\n\n" + string2.replace("[types]", this.mContext.getString(R.string.video).toLowerCase() + "s");
                } else if (this.mValue == 4) {
                    string = string.replace("[TYPE]", this.mContext.getString(R.string.file));
                    string2 = this.mContext.getString(R.string.warn_upload_large_file_desc) + "\n\n" + string2.replace("[types]", this.mContext.getString(R.string.file).toLowerCase() + "s");
                }
                textView.setText(string);
                textView2.setText(string2);
                button.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        CustomDialogFragment.this.dismiss();
                    }
                });
                break;
            case R.styleable.Theme_dividerVertical /*55*/:
                this.mView = layoutInflater.inflate(R.layout.dialog_loading, viewGroup, false);
                this.mIDialog.onCreateDialog(55, this, this.mView, getArguments(), this.mContext);
                getDialog().setCanceledOnTouchOutside(false);
                break;
        }
        return this.mView;
    }

    public void onDismiss(DialogInterface dialogInterface) {
        if (this.mDialogId == 17) {
            this.mIDialog.onDismissDialog(17, this, this.mView, getArguments());
        } else if (this.mDialogId == 18) {
            this.mIDialog.onDismissDialog(18, this, this.mView, getArguments());
        } else if (this.mDialogId == 21) {
            this.mIDialog.onDismissDialog(21, this, this.mView, getArguments());
        } else if (this.mDialogId == 22) {
            this.mIDialog.onDismissDialog(22, this, this.mView, getArguments());
        } else if (this.mDialogId == 23) {
            this.mIDialog.onDismissDialog(23, this, this.mView, getArguments());
        } else if (this.mDialogId == 33) {
            this.mIDialog.onDismissDialog(33, this, this.mView, getArguments());
        } else if (this.mDialogId == 20) {
            this.mIDialog.onDismissDialog(33, this, this.mView, getArguments());
        } else if (this.mDialogId == 43) {
            this.mIDialog.onDismissDialog(43, this, this.mView, getArguments());
        } else if (this.mDialogId == 44) {
            this.mIDialog.onDismissDialog(44, this, this.mView, getArguments());
        } else if (this.mDialogId == 45) {
            this.mIDialog.onDismissDialog(45, this, this.mView, getArguments());
        } else if (this.mDialogId == 46) {
            this.mIDialog.onDismissDialog(46, this, this.mView, getArguments());
        } else if (this.mDialogId == 55) {
            this.mIDialog.onDismissDialog(55, this, this.mView, getArguments());
        }
        super.onDismiss(dialogInterface);
    }

    public void onStart() {
        if (this.mDialogId == 9) {
            this.mIDialog.onShowDialog(9, this, this.mView, getArguments());
        } else if (this.mDialogId == 10) {
            this.mIDialog.onShowDialog(10, this, this.mView, getArguments());
        } else if (this.mDialogId == 11) {
            this.mIDialog.onShowDialog(11, this, this.mView, getArguments());
        } else if (this.mDialogId == 17) {
            this.mIDialog.onShowDialog(17, this, this.mView, getArguments());
        } else if (this.mDialogId == 18) {
            this.mIDialog.onShowDialog(18, this, this.mView, getArguments());
        } else if (this.mDialogId == 21) {
            this.mIDialog.onShowDialog(21, this, this.mView, getArguments());
        } else if (this.mDialogId == 22) {
            this.mIDialog.onShowDialog(22, this, this.mView, getArguments());
        } else if (this.mDialogId == 23) {
            this.mIDialog.onShowDialog(23, this, this.mView, getArguments());
        } else if (this.mDialogId == 20) {
            this.mIDialog.onShowDialog(20, this, this.mView, getArguments());
        } else if (this.mDialogId == 43) {
            this.mIDialog.onShowDialog(43, this, this.mView, getArguments());
        } else if (this.mDialogId == 44) {
            this.mIDialog.onShowDialog(44, this, this.mView, getArguments());
        } else if (this.mDialogId == 45) {
            this.mIDialog.onShowDialog(45, this, this.mView, getArguments());
        } else if (this.mDialogId == 46) {
            this.mIDialog.onShowDialog(46, this, this.mView, getArguments());
        } else if (this.mDialogId == 55) {
            this.mIDialog.onShowDialog(55, this, this.mView, getArguments());
        }
        super.onStart();
    }

    public void setClickListener(OnActionClickListener onActionClickListener) {
        this.mActionListener = onActionClickListener;
    }

    public void setContext(Context context) {
        this.mContext = context;
    }

    public void setInterface(AlbusDialogInterface albusDialogInterface) {
        this.mIDialog = albusDialogInterface;
    }

    public void setOnFizzlink(OnFizzlinkUpload onFizzlinkUpload) {
        this.mFizzlinkAction = onFizzlinkUpload;
    }
}
