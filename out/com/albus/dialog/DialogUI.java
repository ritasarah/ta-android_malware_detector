package com.albus.dialog;

import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.text.Editable;
import android.text.Html;
import android.text.TextWatcher;
import android.util.Patterns;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import com.albus.activity.AlbusMainActivity;
import com.albus.activity.BroadcastActivity;
import com.albus.activity.CategoryActivity;
import com.albus.activity.ChatGroupConvActivity;
import com.albus.activity.CommentActivity;
import com.albus.activity.CreateGroupActivity;
import com.albus.activity.CustomActionBarPageActivity;
import com.albus.activity.FriendsActivity;
import com.albus.activity.MenuActivity;
import com.albus.activity.ProfilesActivity;
import com.albus.activity.ProfilesGroupActivity;
import com.albus.activity.ProfilesImageViewerActivity;
import com.albus.activity.RegisterSettingProfileActivity;
import com.albus.activity.SettingsMenuActivity;
import com.albus.activity.SharedExpandActivity;
import com.albus.imagespan.SmiledText;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.view.CustomImageView;
import com.catfiz.R;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.model.Group;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.PinManagerV2;
import com.catfiz.service.ServerMessageDataStorage;
import com.catfiz.util.FizzlinkUtil;
import com.catfiz.util.Log;
import com.catfiz.util.MimeTypeParser;
import com.catfiz.util.Utils;
import java.io.File;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.apache.http.protocol.HTTP;

public class DialogUI implements AlbusDialogInterface {
    private static final String TAG = DialogUI.class.getSimpleName();
    private Button mBtnAction = null;
    private Button mBtnCancel = null;
    private Context mContext = null;
    private DialogFragment mDialog = null;
    private DialogFragment mDialogPending = null;
    private CustomImageView mDialogPic = null;
    private EditText mEtName = null;
    private String mFriendId = null;
    private boolean mHideAddress = false;
    private boolean mHideEmail = false;
    private boolean mHideNote = false;
    private boolean mHidePhone = false;
    private boolean mHideWeb = false;
    private Intent mIntent = null;
    private ImageView mIvImgDummy;
    private String mMsg = null;
    private String mName = null;
    private int mPage = -1;
    private long mSequence = 0;
    private TextView mTvAlert = null;
    private TextView mTvChooser1 = null;
    private TextView mTvChooser2 = null;
    private TextView mTvName = null;
    private TextView mTvTitle = null;
    private int mType = -1;
    private int mValue = -1;

    private void DisableButton() {
        this.mBtnAction.setEnabled(false);
        this.mBtnAction.setBackgroundResource(R.drawable.bg_btn_blue_disable);
    }

    private void EnableButton() {
        this.mBtnAction.setEnabled(false);
        this.mBtnAction.setBackgroundResource(R.drawable.button_blue_onclick);
    }

    private void IntentExtraAdd() {
        Log.d(TAG, "open page fill add field value");
        this.mIntent.putExtra(AlbusModelObject.VALUE, "");
        this.mIntent.putExtra(AlbusModelObject.PAGE, 7);
        ((ProfilesActivity) this.mContext).startActivityForResult(this.mIntent, 11);
        this.mDialog.dismiss();
    }

    private void setPhotoProfile() {
        File friendProfilePhotoFile = CatfishPhotoStorage.getFriendProfilePhotoFile(this.mContext, this.mFriendId);
        Drawable drawable = null;
        if (friendProfilePhotoFile != null) {
            drawable = Drawable.createFromPath(friendProfilePhotoFile.getAbsolutePath());
        }
        if (drawable != null) {
            this.mDialogPic.setImageDrawable(drawable);
            this.mIvImgDummy.setVisibility(8);
            return;
        }
        this.mIvImgDummy.setVisibility(0);
    }

    public void BtnCancelListener() {
        this.mBtnCancel.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                DialogUI.this.mDialog.dismiss();
            }
        });
    }

    public AlbusDialogInterface getDialogInterface() {
        return this;
    }

    public void getValCustom() {
        this.mEtName.addTextChangedListener(new TextWatcher() {
            public void afterTextChanged(Editable editable) {
            }

            public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
            }

            public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                if (DialogUI.this.mEtName.getText().toString().equals("")) {
                    DialogUI.this.DisableButton();
                } else {
                    DialogUI.this.EnableButton();
                }
            }
        });
        this.mName = this.mEtName.getText().toString();
    }

    boolean isEmailValid(CharSequence charSequence) {
        return Patterns.EMAIL_ADDRESS.matcher(charSequence).matches();
    }

    public void onCancelDialog(int i, DialogInterface dialogInterface, Context context) {
    }

    public void onCreateDialog(int i, final DialogFragment dialogFragment, View view, Bundle bundle, final Context context) {
        this.mContext = context;
        this.mDialog = dialogFragment;
        this.mTvTitle = (TextView) view.findViewById(R.id.tv_title);
        this.mTvAlert = (TextView) view.findViewById(R.id.tv_notif);
        this.mTvName = (TextView) view.findViewById(R.id.tv_name);
        this.mBtnCancel = (Button) view.findViewById(R.id.btn_cancel);
        this.mBtnAction = (Button) view.findViewById(R.id.btn_action);
        this.mTvChooser1 = (TextView) view.findViewById(R.id.tv_chooser1);
        this.mTvChooser2 = (TextView) view.findViewById(R.id.tv_chooser2);
        this.mEtName = (EditText) view.findViewById(R.id.et_custom_name);
        this.mDialogPic = (CustomImageView) view.findViewById(R.id.civ_img);
        this.mName = bundle.getString(CatfishDataStorage.NIC_NAME);
        if (this.mName == null) {
            this.mName = "";
        }
        this.mSequence = bundle.getLong(ServerMessageDataStorage.SEQUENCE);
        this.mFriendId = bundle.getString(AlbusModelObject.FRIEND_ID);
        this.mValue = bundle.getInt(AlbusModelObject.VALUE);
        this.mType = bundle.getInt(MimeTypeParser.TAG_TYPE);
        this.mPage = bundle.getInt(AlbusModelObject.PAGE);
        CharSequence string;
        CharSequence charSequence;
        String str;
        CharSequence charSequence2;
        final int i2;
        Button button;
        Button button2;
        Button button3;
        final int i3;
        switch (i) {
            case e.a /*0*/:
                this.mTvAlert.setText(context.getResources().getString(R.string.broadcast_alert_notif));
                this.mBtnCancel.setText(context.getResources().getString(R.string.no_upercase));
                this.mBtnAction.setText(context.getResources().getString(R.string.yes_upercase));
                BtnCancelListener();
                this.mBtnAction.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        ((BroadcastActivity) context).backToHome();
                    }
                });
                return;
            case e.b /*1*/:
                this.mTvTitle.setVisibility(0);
                string = context.getResources().getString(R.string.delete_chat_notif);
                if (this.mValue > 1) {
                    charSequence = "Delete " + this.mValue + " " + context.getString(R.string.Chats) + "?";
                    string = string.replace("this chat", "these chats");
                } else {
                    charSequence = "Delete " + context.getString(R.string.Chat) + "?";
                }
                this.mTvTitle.setText(charSequence);
                this.mTvAlert.setText(string);
                BtnCancelListener();
                this.mBtnAction.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        ((AlbusMainActivity) context).deleteChats();
                        DialogUI.this.mDialog.dismiss();
                    }
                });
                return;
            case e.c /*2*/:
                Log.d(TAG, "DIALOG_MULTIPLE_DELETE_GROUP mType:" + this.mType);
                this.mTvTitle.setVisibility(0);
                str = "";
                str = "";
                str = "";
                String string2;
                if (this.mType == 0) {
                    string2 = context.getResources().getString(R.string.delete_pool_alert);
                    str = context.getResources().getString(R.string.delete_pool_notif);
                    if (this.mValue <= 1 || !AlbusUtils.isLocale("en")) {
                        string2 = string2.replace("[count]", "") + "?";
                    } else {
                        string2 = string2.replace("[count]", " " + this.mValue) + "'s?";
                        str = str.replace("this group", "these groups");
                    }
                    charSequence2 = string2;
                    charSequence = str;
                    string = context.getResources().getString(R.string.btn_delete);
                } else if (this.mType == 1) {
                    string2 = context.getResources().getString(R.string.leave_pool_alert);
                    str = context.getResources().getString(R.string.leave_pool_notif);
                    if (this.mValue <= 1 || !AlbusUtils.isLocale("en")) {
                        string2 = string2.replace("[count]", "") + "?";
                    } else {
                        string2 = string2.replace("[count]", " " + this.mValue) + "'s?";
                        str = str.replace("this group", "these groups");
                    }
                    r2 = string2;
                    r1 = str;
                    r0 = context.getResources().getString(R.string.leave_upercase);
                } else {
                    string2 = context.getResources().getString(R.string.delete_group_chat);
                    str = context.getResources().getString(R.string.delete_group_chat_notif);
                    if (this.mValue <= 1 || !AlbusUtils.isLocale("en")) {
                        string2 = string2.replace("[count]", "") + "?";
                    } else {
                        string2 = string2.replace("[count]", " " + this.mValue) + "'s?";
                        str = str.replace("this group", "these groups");
                    }
                    r2 = string2;
                    r1 = str;
                    r0 = context.getResources().getString(R.string.btn_clear);
                }
                this.mTvAlert.setText(charSequence);
                this.mTvTitle.setText(charSequence2);
                BtnCancelListener();
                this.mBtnAction.setText(string);
                this.mBtnAction.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        ((AlbusMainActivity) context).deleteGroups(DialogUI.this.mType);
                        DialogUI.this.mDialog.dismiss();
                    }
                });
                return;
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
                this.mTvChooser1.setText(context.getResources().getString(R.string.by_file));
                this.mTvChooser2.setText(context.getResources().getString(R.string.by_photo));
                this.mTvChooser1.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        if (context instanceof ProfilesActivity) {
                            ((ProfilesActivity) context).choosePhotoByFile();
                        } else {
                            ((ProfilesImageViewerActivity) context).choosePhotoByFile();
                        }
                    }
                });
                this.mTvChooser2.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        if (context instanceof ProfilesActivity) {
                            ((ProfilesActivity) context).capturePhotoCam();
                        } else {
                            ((ProfilesImageViewerActivity) context).capturePhotoCam();
                        }
                    }
                });
                this.mTvName.setVisibility(8);
                return;
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                oneOrMoreMsg();
                this.mTvAlert.setText(context.getString(R.string.delete) + " " + this.mValue + this.mMsg);
                BtnCancelListener();
                this.mBtnAction.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        ((ChatGroupConvActivity) context).finishActionMode();
                    }
                });
                return;
            case HttpRouteDirector.LAYER_PROTOCOL /*5*/:
                oneOrMoreMsg();
                this.mTvAlert.setText(context.getString(R.string.clear) + " " + this.mValue + this.mMsg + "\n" + context.getResources().getString(R.string.delete_group_notif));
                BtnCancelListener();
                this.mBtnAction.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        ((ChatGroupConvActivity) context).finishActionMode();
                    }
                });
                return;
            case SimpleLog.LOG_LEVEL_OFF /*7*/:
                Log.d(TAG, "unfriend view");
                final int i4 = bundle.getInt(CatfishRESTAPI.CFCOMPACT_STICKERID);
                charSequence = this.mContext.getResources().getString(R.string.unfried_msg_notif);
                String replaceAll = this.mContext.getResources().getString(R.string.unfried_title).replaceAll("\\[friend_name\\]", this.mName);
                Log.d(TAG, charSequence);
                this.mTvAlert.setText(charSequence);
                this.mTvTitle.setText(SmiledText.getSmiledText(this.mContext, replaceAll, this.mTvTitle));
                this.mTvTitle.setVisibility(0);
                this.mBtnAction.setText(context.getString(R.string.unfriend));
                this.mBtnAction.setAllCaps(true);
                BtnCancelListener();
                this.mBtnAction.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        if (i4 == 9) {
                            ((FriendsActivity) context).unfriend(DialogUI.this.mFriendId, DialogUI.this.mName);
                        } else {
                            ((CategoryActivity) context).unfriend(DialogUI.this.mFriendId, DialogUI.this.mName);
                        }
                    }
                });
                return;
            case Utils.FILE_TYPE_INSTALLER /*8*/:
                Log.d(TAG, "block new friend view");
                string = this.mContext.getResources().getString(R.string.block_friend_msg_notif);
                charSequence = this.mContext.getResources().getString(R.string.block_friend_title).replaceAll("\\[friend_name\\]", this.mName);
                Log.d(TAG, string);
                i2 = bundle.getInt(AlbusModelObject.POSITION);
                this.mTvAlert.setText(string);
                this.mTvTitle.setText(charSequence);
                this.mTvTitle.setVisibility(0);
                this.mBtnAction.setText(context.getResources().getString(R.string.block));
                this.mBtnAction.setAllCaps(true);
                BtnCancelListener();
                this.mBtnAction.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        ((MenuActivity) context).blockPendingfriend(DialogUI.this.mFriendId, DialogUI.this.mName, Long.valueOf(DialogUI.this.mSequence), i2);
                        DialogUI.this.mDialogPending.dismiss();
                    }
                });
                return;
            case HTTP.LF /*10*/:
                this.mDialogPending = dialogFragment;
                button = (Button) view.findViewById(R.id.btn_positive);
                button2 = (Button) view.findViewById(R.id.btn_negative);
                button3 = (Button) view.findViewById(R.id.btn_conditional);
                this.mIvImgDummy = (ImageView) view.findViewById(R.id.iv_img_dummy);
                i3 = bundle.getInt(AlbusModelObject.POSITION);
                this.mTvName.setText(SmiledText.getSmiledText(this.mContext, this.mName, this.mTvName));
                this.mTvAlert.setText(context.getString(R.string.df_acc_friend));
                button.setText(context.getString(R.string.btn_accept));
                button2.setText(context.getString(R.string.btn_decline));
                button3.setText(context.getString(R.string.btn_block));
                setPhotoProfile();
                button.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialogPending.dismiss();
                        ((MenuActivity) context).acceptFriend(DialogUI.this.mFriendId, DialogUI.this.mName, Long.valueOf(DialogUI.this.mSequence), i3);
                    }
                });
                button2.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialogPending.dismiss();
                        ((MenuActivity) context).declineFriend(DialogUI.this.mFriendId, DialogUI.this.mName, Long.valueOf(DialogUI.this.mSequence), i3);
                    }
                });
                button3.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        Bundle bundle = new Bundle();
                        bundle.putInt(AlbusModelObject.DIALOG, 8);
                        bundle.putString(CatfishDataStorage.NIC_NAME, DialogUI.this.mName);
                        bundle.putString(AlbusModelObject.FRIEND_ID, DialogUI.this.mFriendId);
                        bundle.putLong(ServerMessageDataStorage.SEQUENCE, DialogUI.this.mSequence);
                        bundle.putInt(AlbusModelObject.POSITION, i3);
                        AlbusDialog.showDialog(8, DialogUI.this, context, bundle, ((MenuActivity) context).getSupportFragmentManager());
                    }
                });
                return;
            case PinManagerV2.REGCODE_HASOLDACC /*11*/:
                this.mDialogPending = dialogFragment;
                button = (Button) view.findViewById(R.id.btn_conditional);
                button2 = (Button) view.findViewById(R.id.btn_positive);
                button3 = (Button) view.findViewById(R.id.btn_negative);
                this.mIvImgDummy = (ImageView) view.findViewById(R.id.iv_img_dummy);
                button.setText(context.getString(R.string.btn_delete));
                button2.setText(context.getString(R.string.btn_readd));
                this.mTvName.setText(SmiledText.getSmiledText(this.mContext, this.mName, this.mTvName));
                this.mTvAlert.setText(context.getResources().getString(R.string.df_pending_friend));
                button2.setBackgroundResource(R.drawable.button_onclick);
                button2.setTextColor(context.getResources().getColor(R.color.transparent54));
                setPhotoProfile();
                button3.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                    }
                });
                button.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        Bundle bundle = new Bundle();
                        bundle.putInt(AlbusModelObject.DIALOG, 12);
                        bundle.putString(AlbusModelObject.FRIEND_ID, DialogUI.this.mFriendId);
                        AlbusDialog.showDialog(12, DialogUI.this, context, bundle, ((CustomActionBarPageActivity) context).getSupportFragmentManager());
                    }
                });
                button2.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialogPending.dismiss();
                        ((CustomActionBarPageActivity) context).actionReadd(DialogUI.this.mFriendId);
                    }
                });
                return;
            case PinManagerV2.REGCODE_MAX /*12*/:
                this.mTvAlert.setText(context.getResources().getString(R.string.del_request));
                BtnCancelListener();
                this.mBtnAction.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        ((CustomActionBarPageActivity) context).deletePendingReq(DialogUI.this.mFriendId);
                        DialogUI.this.mDialogPending.dismiss();
                    }
                });
                return;
            case HTTP.CR /*13*/:
                this.mTvAlert.setText(context.getResources().getString(R.string.create_group_alert_notif));
                this.mBtnCancel.setText(context.getResources().getString(R.string.no_upercase));
                this.mBtnAction.setText(context.getResources().getString(R.string.yes_upercase));
                BtnCancelListener();
                this.mBtnAction.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        ((CreateGroupActivity) context).finish();
                    }
                });
                return;
            case R.styleable.Toolbar_titleMarginEnd /*14*/:
                this.mTvChooser1.setText(context.getResources().getString(R.string.by_file));
                this.mTvChooser2.setText(context.getResources().getString(R.string.by_photo));
                this.mTvChooser1.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        ((CreateGroupActivity) context).choosePhotoByFile();
                    }
                });
                this.mTvChooser2.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        ((CreateGroupActivity) context).capturePhotoCam();
                    }
                });
                this.mTvName.setVisibility(8);
                return;
            case R.styleable.Toolbar_titleMarginTop /*15*/:
                this.mTvAlert.setText(context.getResources().getString(R.string.delete_shared));
                BtnCancelListener();
                this.mBtnAction.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        ((SharedExpandActivity) context).closeAM();
                        DialogUI.this.mDialog.dismiss();
                    }
                });
                return;
            case FizzlinkUtil.S_MP3 /*16*/:
                i2 = bundle.getInt(CatfishRESTAPI.CFCOMPACT_STICKERID);
                i3 = bundle.getInt(AlbusModelObject.CATEGORY_ID);
                final String string3 = bundle.getString(AlbusModelObject.FRIEND_ID);
                this.mTvChooser1.setText(context.getString(R.string.unfriend));
                this.mTvChooser2.setText(context.getString(R.string.block));
                TextView textView = (TextView) view.findViewById(R.id.tv_chooser3);
                TextView textView2 = (TextView) view.findViewById(R.id.tv_chooser4);
                textView.setVisibility(0);
                textView.setText(context.getString(R.string.addTo));
                textView2.setText(context.getString(R.string.removeFrom));
                if (i2 == 9) {
                    textView2.setVisibility(8);
                } else {
                    textView2.setVisibility(0);
                    this.mTvChooser2.setVisibility(8);
                }
                this.mTvName.setText(this.mName);
                this.mTvChooser1.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        Log.d(DialogUI.TAG, "select unfriend");
                        DialogUI.this.mDialog.dismiss();
                        Bundle bundle = new Bundle();
                        bundle.putInt(AlbusModelObject.DIALOG, 7);
                        bundle.putString(CatfishDataStorage.NIC_NAME, DialogUI.this.mName);
                        bundle.putString(AlbusModelObject.FRIEND_ID, DialogUI.this.mFriendId);
                        bundle.putInt(CatfishRESTAPI.CFCOMPACT_STICKERID, i2);
                        if (i2 == 9) {
                            AlbusDialog.showDialog(7, DialogUI.this, context, bundle, ((FriendsActivity) context).getSupportFragmentManager());
                        } else {
                            AlbusDialog.showDialog(7, DialogUI.this, context, bundle, ((CategoryActivity) context).getSupportFragmentManager());
                        }
                    }
                });
                this.mTvChooser2.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        Log.d(DialogUI.TAG, "select block");
                        DialogUI.this.mDialog.dismiss();
                        Bundle bundle = new Bundle();
                        bundle.putInt(AlbusModelObject.DIALOG, 27);
                        bundle.putString(CatfishDataStorage.NIC_NAME, DialogUI.this.mName);
                        bundle.putString(AlbusModelObject.FRIEND_ID, DialogUI.this.mFriendId);
                        AlbusDialog.showDialog(27, DialogUI.this, context, bundle, ((FriendsActivity) context).getSupportFragmentManager());
                    }
                });
                textView.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        Log.d(DialogUI.TAG, "select move to category");
                        DialogUI.this.mDialog.dismiss();
                        Bundle bundle = new Bundle();
                        bundle.putInt(AlbusModelObject.DIALOG, 45);
                        bundle.putString(AlbusModelObject.FRIEND_ID, DialogUI.this.mFriendId);
                        bundle.putInt(CatfishRESTAPI.CFCOMPACT_STICKERID, i2);
                        if (i2 == 9) {
                            AlbusDialog.showDialog(45, DialogUI.this, context, bundle, ((FriendsActivity) context).getSupportFragmentManager());
                        } else {
                            AlbusDialog.showDialog(45, DialogUI.this, context, bundle, ((CategoryActivity) context).getSupportFragmentManager());
                        }
                    }
                });
                final DialogFragment dialogFragment2 = dialogFragment;
                final Context context2 = context;
                textView2.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        dialogFragment2.dismiss();
                        Bundle bundle = new Bundle();
                        bundle.putInt(AlbusModelObject.DIALOG, 50);
                        bundle.putInt(AlbusModelObject.CATEGORY_ID, i3);
                        bundle.putString(AlbusModelObject.FRIEND_ID, string3);
                        bundle.putString(CatfishDataStorage.NIC_NAME, DialogUI.this.mName);
                        AlbusDialog.showDialog(50, DialogUI.this, context2, bundle, ((CategoryActivity) context2).getSupportFragmentManager());
                    }
                });
                return;
            case FizzlinkUtil.S_FLAC /*19*/:
                string = context.getResources().getString(R.string.delete_group_chat_notif);
                charSequence = context.getResources().getString(R.string.delete_group_chat).replace("[count]", "") + "?";
                this.mTvAlert.setText(string);
                this.mTvTitle.setText(charSequence);
                this.mTvTitle.setVisibility(0);
                this.mBtnCancel.setText(context.getResources().getString(R.string.btn_cancel));
                this.mBtnAction.setText(context.getResources().getString(R.string.btn_clear));
                BtnCancelListener();
                this.mBtnAction.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        ((ChatGroupConvActivity) context).clearGroupChats();
                    }
                });
                return;
            case R.styleable.Toolbar_titleTextColor /*23*/:
                this.mIntent = new Intent(context, CustomActionBarPageActivity.class);
                LinearLayout linearLayout = (LinearLayout) view.findViewById(R.id.ll_phone);
                LinearLayout linearLayout2 = (LinearLayout) view.findViewById(R.id.ll_mail);
                LinearLayout linearLayout3 = (LinearLayout) view.findViewById(R.id.ll_address);
                LinearLayout linearLayout4 = (LinearLayout) view.findViewById(R.id.ll_web);
                LinearLayout linearLayout5 = (LinearLayout) view.findViewById(R.id.ll_note);
                if (this.mHidePhone) {
                    linearLayout.setVisibility(8);
                } else {
                    linearLayout.setVisibility(0);
                }
                if (this.mHideWeb) {
                    linearLayout4.setVisibility(8);
                } else {
                    linearLayout4.setVisibility(0);
                }
                if (this.mHideAddress) {
                    linearLayout3.setVisibility(8);
                } else {
                    linearLayout3.setVisibility(0);
                }
                if (this.mHideNote) {
                    linearLayout5.setVisibility(8);
                } else {
                    linearLayout5.setVisibility(0);
                }
                if (this.mHideEmail) {
                    linearLayout2.setVisibility(8);
                } else {
                    linearLayout5.setVisibility(0);
                }
                linearLayout.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mHidePhone = true;
                        DialogUI.this.mIntent.putExtra(AlbusModelObject.PAGE, 22);
                        ((ProfilesActivity) DialogUI.this.mContext).startActivity(DialogUI.this.mIntent);
                    }
                });
                linearLayout2.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mHideEmail = true;
                        DialogUI.this.mIntent.putExtra(AlbusModelObject.PAGE, 23);
                        ((ProfilesActivity) DialogUI.this.mContext).startActivity(DialogUI.this.mIntent);
                    }
                });
                linearLayout3.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mHideAddress = true;
                        DialogUI.this.mIntent.putExtra(AlbusModelObject.PAGE, 26);
                        ((ProfilesActivity) DialogUI.this.mContext).startActivity(DialogUI.this.mIntent);
                    }
                });
                linearLayout4.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mHideWeb = true;
                        DialogUI.this.mIntent.putExtra(AlbusModelObject.PAGE, 27);
                        ((ProfilesActivity) DialogUI.this.mContext).startActivity(DialogUI.this.mIntent);
                    }
                });
                linearLayout5.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mHideNote = true;
                        DialogUI.this.mIntent.putExtra(AlbusModelObject.PAGE, 28);
                        ((ProfilesActivity) DialogUI.this.mContext).startActivity(DialogUI.this.mIntent);
                    }
                });
                if (((ProfilesActivity) context).checkingActivated()) {
                    this.mDialog.dismiss();
                    return;
                }
                return;
            case R.styleable.Toolbar_subtitleTextColor /*24*/:
                this.mTvChooser1.setText(context.getResources().getString(R.string.by_file));
                this.mTvChooser2.setText(context.getResources().getString(R.string.by_photo));
                this.mTvChooser1.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        ((RegisterSettingProfileActivity) context).choosePhotoByFile();
                    }
                });
                this.mTvChooser2.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        ((RegisterSettingProfileActivity) context).capturePhotoCam();
                    }
                });
                this.mTvName.setVisibility(8);
                return;
            case R.styleable.Theme_actionMenuTextAppearance /*25*/:
                this.mTvChooser1.setText(context.getResources().getString(R.string.by_file));
                this.mTvChooser2.setText(context.getResources().getString(R.string.by_photo));
                this.mTvChooser1.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        ((ProfilesImageViewerActivity) context).choosePhotoByFile();
                    }
                });
                this.mTvChooser2.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        ((ProfilesImageViewerActivity) context).capturePhotoCam();
                    }
                });
                this.mTvName.setVisibility(8);
                return;
            case R.styleable.Theme_actionMenuTextColor /*26*/:
                this.mTvAlert.setText(Html.fromHtml(this.mContext.getResources().getString(R.string.remove_block_msg).replace("[friend_name]", this.mName)));
                button = (Button) view.findViewById(R.id.btn_conditional);
                button2 = (Button) view.findViewById(R.id.btn_positive);
                button3 = (Button) view.findViewById(R.id.btn_negative);
                this.mIvImgDummy = (ImageView) view.findViewById(R.id.iv_img_dummy);
                button.setVisibility(4);
                button2.setText(context.getResources().getString(R.string.btn_unblock));
                button3.setText(context.getResources().getString(R.string.btn_cancel));
                this.mTvName.setText(this.mName);
                setPhotoProfile();
                button3.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                    }
                });
                button2.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        ((SettingsMenuActivity) context).Unblock(DialogUI.this.mFriendId);
                    }
                });
                return;
            case R.styleable.Theme_actionModeStyle /*27*/:
                Log.d(TAG, "block friend view");
                string = this.mContext.getResources().getString(R.string.block_friend_msg_notif);
                charSequence = this.mContext.getResources().getString(R.string.block_friend_title).replaceAll("\\[friend_name\\]", this.mName);
                this.mTvAlert.setText(string);
                this.mTvTitle.setText(charSequence);
                this.mTvTitle.setVisibility(0);
                this.mBtnAction.setText(context.getResources().getString(R.string.block));
                this.mBtnAction.setAllCaps(true);
                BtnCancelListener();
                this.mBtnAction.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        ((FriendsActivity) context).blockfriend(DialogUI.this.mFriendId, DialogUI.this.mName);
                    }
                });
                return;
            case R.styleable.Theme_actionModeSplitBackground /*30*/:
                this.mDialogPending = dialogFragment;
                button = (Button) view.findViewById(R.id.btn_positive);
                button2 = (Button) view.findViewById(R.id.btn_negative);
                button3 = (Button) view.findViewById(R.id.btn_conditional);
                this.mIvImgDummy = (ImageView) view.findViewById(R.id.iv_img_dummy);
                button.setText(context.getString(R.string.btn_join));
                button2.setText(context.getString(R.string.btn_reject));
                button3.setVisibility(8);
                i2 = bundle.getInt(AlbusModelObject.POSITION);
                String str2 = context.getString(R.string.incoming_group_from) + " " + bundle.getString(AlbusModelObject.USER);
                this.mTvName.setText(this.mName);
                this.mTvAlert.setText(SmiledText.getSmiledText(this.mContext, str2, this.mTvAlert));
                setPhotoProfile();
                final Group group = new Group(this.mFriendId);
                group.setName(this.mName);
                button.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialogPending.dismiss();
                        ((MenuActivity) context).acceptGroup(group, i2);
                    }
                });
                button2.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialogPending.dismiss();
                        ((MenuActivity) context).rejectGroup(new Group(DialogUI.this.mFriendId), i2);
                    }
                });
                return;
            case R.styleable.Theme_actionModeCloseDrawable /*31*/:
                str = "";
                str = "";
                if (this.mType == 0) {
                    charSequence = context.getResources().getString(R.string.delete_pool_notif);
                    string = context.getResources().getString(R.string.delete_pool_alert).replace("[count]", "") + "?";
                    this.mBtnAction.setText(context.getResources().getString(R.string.btn_delete));
                } else {
                    charSequence = context.getResources().getString(R.string.leave_pool_notif);
                    string = context.getResources().getString(R.string.leave_pool_alert).replace("[count]", "") + "?";
                    this.mBtnAction.setText(context.getResources().getString(R.string.leave_upercase));
                }
                this.mTvAlert.setText(charSequence);
                this.mTvTitle.setText(string);
                this.mTvTitle.setVisibility(0);
                this.mBtnCancel.setText(context.getResources().getString(R.string.btn_cancel));
                BtnCancelListener();
                this.mBtnAction.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        if (DialogUI.this.mType == 0) {
                            if (DialogUI.this.mPage == 2) {
                                ((ChatGroupConvActivity) context).dropGroup();
                            } else if (DialogUI.this.mPage == 5) {
                                ((ProfilesGroupActivity) context).dropGroup();
                            }
                        } else if (DialogUI.this.mPage == 2) {
                            ((ChatGroupConvActivity) context).leaveGroup();
                        } else if (DialogUI.this.mPage == 5) {
                            ((ProfilesGroupActivity) context).leaveGroup();
                        }
                    }
                });
                return;
            case HTTP.SP /*32*/:
                this.mTvChooser1.setText(context.getResources().getString(R.string.by_file));
                this.mTvChooser2.setText(context.getResources().getString(R.string.by_photo));
                this.mTvChooser1.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        ((ProfilesGroupActivity) context).choosePhotoByFile();
                    }
                });
                this.mTvChooser2.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        ((ProfilesGroupActivity) context).capturePhotoCam();
                    }
                });
                this.mTvName.setVisibility(8);
                return;
            case R.styleable.Theme_actionModeSelectAllDrawable /*35*/:
                this.mTvChooser1.setText(context.getResources().getString(R.string.go_to_chat));
                this.mTvChooser2.setText(context.getResources().getString(R.string.go_to_profile));
                this.mTvName.setText(this.mName);
                Log.d(TAG, "Dialog Choose Promote:" + this.mPage);
                final User user = new User();
                user.setId(this.mFriendId);
                user.setName(this.mName);
                this.mTvChooser1.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        if (DialogUI.this.mPage == 31) {
                            ((CommentActivity) context).gotoUserChat(user);
                        } else {
                            ((ChatGroupConvActivity) context).gotoUserChat(user);
                        }
                    }
                });
                this.mTvChooser2.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        if (DialogUI.this.mPage == 31) {
                            ((CommentActivity) context).commentEnterProfileHandle(user);
                        } else {
                            ((ChatGroupConvActivity) context).gotoUserProfile(user);
                        }
                    }
                });
                return;
            case R.styleable.Theme_actionModeShareDrawable /*36*/:
                this.mTvChooser1.setText(context.getResources().getString(R.string.by_photo));
                this.mTvChooser2.setText(context.getResources().getString(R.string.by_file));
                Log.d(TAG, "Dialog Photo Chooser:" + this.mPage);
                this.mTvChooser1.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        if (DialogUI.this.mPage == 31) {
                            ((CommentActivity) context).selectAttachedPhotoByCamera();
                        } else {
                            ((ChatGroupConvActivity) context).selectAttachedPhotoByCamera();
                        }
                    }
                });
                this.mTvChooser2.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        DialogUI.this.mDialog.dismiss();
                        if (DialogUI.this.mPage == 31) {
                            ((CommentActivity) context).selectAttachedPhotoByFile();
                        } else {
                            ((ChatGroupConvActivity) context).selectAttachedPhotoByFile();
                        }
                    }
                });
                this.mTvName.setVisibility(8);
                return;
            case R.styleable.Theme_actionModeWebSearchDrawable /*38*/:
                string = context.getResources().getString(R.string.delete_chat_notif);
                charSequence = "Delete " + context.getString(R.string.Chat) + "?";
                this.mTvAlert.setText(string);
                this.mTvTitle.setText(charSequence);
                this.mTvTitle.setVisibility(0);
                this.mBtnCancel.setText(context.getResources().getString(R.string.btn_cancel));
                this.mBtnAction.setText(context.getResources().getString(R.string.btn_delete));
                BtnCancelListener();
                this.mBtnAction.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        ((ChatGroupConvActivity) context).clearUserChat();
                    }
                });
                return;
            case R.styleable.Theme_actionDropDownStyle /*45*/:
                final int i5 = bundle.getInt(CatfishRESTAPI.CFCOMPACT_STICKERID);
                ListView listView = (ListView) view.findViewById(R.id.listview);
                ((LinearLayout) view.findViewById(R.id.ll_bottom_btn)).setVisibility(0);
                if (i5 == 9) {
                    ((FriendsActivity) context).setAdapterDialog(i5, this.mFriendId, listView, context, dialogFragment);
                } else {
                    ((CategoryActivity) context).setAdapterDialog(i5, this.mFriendId, listView, context, dialogFragment);
                }
                this.mBtnAction.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        dialogFragment.dismiss();
                        if (i5 == 9) {
                            ((FriendsActivity) context).addToCategory(DialogUI.this.mFriendId);
                        } else {
                            ((CategoryActivity) context).addToCategory(DialogUI.this.mFriendId);
                        }
                    }
                });
                BtnCancelListener();
                return;
            case R.styleable.Theme_buttonBarStyle /*50*/:
                str = bundle.getString(AlbusModelObject.FRIEND_ID);
                charSequence = context.getString(R.string.no_upercase);
                charSequence2 = context.getString(R.string.yes_upercase);
                this.mTvAlert.setText(context.getString(R.string.delete) + " " + this.mName + " " + context.getString(R.string.from_category) + "?");
                this.mBtnCancel.setText(charSequence);
                this.mBtnAction.setText(charSequence2);
                BtnCancelListener();
                this.mBtnAction.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        dialogFragment.dismiss();
                        ((CategoryActivity) context).removeFrom(str);
                    }
                });
                return;
            default:
                return;
        }
    }

    public void onDismissDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
    }

    public void onShowDialog(int i, DialogFragment dialogFragment, View view, Bundle bundle) {
    }

    public void oneOrMoreMsg() {
        if (this.mValue > 1) {
            this.mMsg = " " + this.mContext.getString(R.string.Messages) + "?";
        } else {
            this.mMsg = " " + this.mContext.getString(R.string.Message) + "?";
        }
    }
}
