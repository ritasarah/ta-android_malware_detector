package com.albus.dialog;

import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.DialogFragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;
import com.albus.activity.ChatGroupConvActivity;
import com.albus.activity.ProfilesFriendActivity;
import com.albus.util.AlbusModelObject;
import com.albus.util.AlbusUtils;
import com.albus.view.CustomImageView;
import com.catfiz.R;
import com.catfiz.base.Callback;
import com.catfiz.base.Callback.NicProfileCallback;
import com.catfiz.base.Catfiz;
import com.catfiz.base.ICatfiz;
import com.catfiz.media.CatfishPhotoStorage;
import com.catfiz.model.User;
import com.catfiz.service.CatfishDataStorage;
import com.catfiz.service.CatfishRESTAPI;
import com.catfiz.service.CatfishService;
import com.catfiz.signal.Signal;
import com.catfiz.util.Log;
import java.util.Locale;

public class NicProfileDialog extends DialogFragment implements ICatfiz {
    private static final String TAG = "NicProfileDialog";
    private static Handler handler = new Handler();
    private CustomImageView civImg = null;
    private LinearLayout llLoading = null;
    private Catfiz mCatfiz = null;
    private Context mContext = null;
    private int mDialogId = -1;
    private boolean mFromOutside = false;
    private String mId = null;
    private boolean mIsFriend = false;
    private boolean mIsMe = false;
    private String mName = null;
    private User mUser = null;
    private View mView = null;
    private RelativeLayout rlAddFriend = null;
    private RelativeLayout rlContent = null;
    private RelativeLayout rlFriend = null;
    private TextView tvAlert = null;
    private TextView tvName = null;

    private void getProfile() {
        if (!this.mIsMe) {
            Log.d(TAG, "get profile");
            this.mCatfiz.userFetchNicProfile(this.mId, new NicProfileCallback() {
                public void onDataFriend(User user) {
                    NicProfileDialog.this.mUser = user;
                    NicProfileDialog.this.mIsFriend = true;
                    NicProfileDialog.this.refreshView();
                    NicProfileDialog.this.civImg.setImageBitmap(CatfishPhotoStorage.getFriendProfilePhotoBitmap(NicProfileDialog.this.getActivity(), NicProfileDialog.this.mId));
                    Log.d(NicProfileDialog.TAG, "get profile done");
                }

                public void onDataNotFriend(User user) {
                    NicProfileDialog.this.mUser = user;
                    NicProfileDialog.this.mIsFriend = false;
                    NicProfileDialog.this.refreshView();
                }

                public void onDataNotFriendCache(User user) {
                    NicProfileDialog.this.mUser = user;
                    NicProfileDialog.this.mIsFriend = false;
                    NicProfileDialog.this.refreshView();
                    NicProfileDialog.this.civImg.setImageBitmap(CatfishPhotoStorage.getFriendProfilePhotoBitmap(NicProfileDialog.this.getActivity(), NicProfileDialog.this.mId));
                }

                public void onError() {
                }

                public void onNicProfileNotfound() {
                    AlbusUtils.setToastView(NicProfileDialog.this.getActivity(), NicProfileDialog.this.getString(R.string.nic_not_found));
                    NicProfileDialog.this.dismiss();
                }

                public void onPictureSuccess() {
                    NicProfileDialog.this.civImg.setImageBitmap(CatfishPhotoStorage.getFriendProfilePhotoBitmap(NicProfileDialog.this.getActivity(), NicProfileDialog.this.mId));
                }

                public void onSuccess() {
                }
            });
        }
    }

    public static NicProfileDialog newInstance(Bundle bundle) {
        NicProfileDialog nicProfileDialog = new NicProfileDialog();
        nicProfileDialog.setArguments(bundle);
        nicProfileDialog.mName = bundle.getString(CatfishDataStorage.NIC_NAME);
        nicProfileDialog.mId = bundle.getString(CatfishRESTAPI.CFCOMPACT_STICKERID).toUpperCase(Locale.US);
        nicProfileDialog.mFromOutside = bundle.getBoolean(AlbusModelObject.IS_OUTSIDE, false);
        return nicProfileDialog;
    }

    private void refreshView() {
        this.mName = this.mUser.getName();
        this.tvName.setText(this.mName);
        this.llLoading.setVisibility(8);
        this.rlContent.setVisibility(0);
        if (this.mIsFriend) {
            this.rlFriend.setVisibility(0);
            this.rlAddFriend.setVisibility(8);
            this.tvAlert.setVisibility(8);
            return;
        }
        this.rlFriend.setVisibility(8);
        this.rlAddFriend.setVisibility(0);
        this.tvAlert.setVisibility(0);
    }

    public void onCatfizStarted() {
        getProfile();
    }

    public void onCatfizStopped() {
    }

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        setStyle(1, 16973942);
        this.mCatfiz = new Catfiz(getActivity(), this);
        this.mContext = getActivity();
        if (this.mId.equals(CatfishService.getUserPIN().toUpperCase(Locale.US))) {
            this.mIsMe = true;
            handler.post(new Runnable() {
                public void run() {
                    Toast.makeText(NicProfileDialog.this.getActivity(), NicProfileDialog.this.getResources().getString(R.string.my_nic), 0).show();
                    NicProfileDialog.this.dismiss();
                }
            });
        }
    }

    public View onCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle) {
        this.mView = layoutInflater.inflate(R.layout.dialog_nic_profile, viewGroup, false);
        this.rlContent = (RelativeLayout) this.mView.findViewById(R.id.rl_content);
        this.llLoading = (LinearLayout) this.mView.findViewById(R.id.ll_loading);
        this.tvName = (TextView) this.mView.findViewById(R.id.tv_name);
        this.civImg = (CustomImageView) this.mView.findViewById(R.id.civ_img);
        this.tvAlert = (TextView) this.mView.findViewById(R.id.tv_notif);
        Button button = (Button) this.mView.findViewById(R.id.btn_positive);
        Button button2 = (Button) this.mView.findViewById(R.id.btn_negative);
        ((Button) this.mView.findViewById(R.id.btn_conditional)).setVisibility(4);
        this.rlAddFriend = (RelativeLayout) this.mView.findViewById(R.id.rl_add_friend);
        this.rlFriend = (RelativeLayout) this.mView.findViewById(R.id.rl_friend);
        this.tvName.setText(this.mName);
        button2.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                NicProfileDialog.this.dismiss();
            }
        });
        button.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                NicProfileDialog.this.mCatfiz.userRequestAddFriend(NicProfileDialog.this.mId, new Callback() {
                    public void onError() {
                        Log.d(NicProfileDialog.TAG, "Error add friend");
                        NicProfileDialog.this.dismiss();
                    }

                    public void onSuccess() {
                        AlbusUtils.setToastView(NicProfileDialog.this.getActivity(), NicProfileDialog.this.getString(R.string.df_pending_friend));
                        NicProfileDialog.this.dismiss();
                    }
                });
            }
        });
        button = (Button) this.mView.findViewById(R.id.btn_profile);
        ((Button) this.mView.findViewById(R.id.btn_chat)).setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                Intent intent = new Intent(NicProfileDialog.this.getActivity(), ChatGroupConvActivity.class);
                intent.putExtra(AlbusModelObject.IS_OFFICIAL, false);
                intent.putExtra(AlbusModelObject.UNREAD_COUNT, 1);
                intent.putExtra(AlbusModelObject.FRIEND_ID, NicProfileDialog.this.mId);
                intent.putExtra(CatfishDataStorage.NIC_NAME, NicProfileDialog.this.mName);
                intent.putExtra(AlbusModelObject.PAGE, 1);
                NicProfileDialog.this.getActivity().startActivity(intent);
            }
        });
        button.setOnClickListener(new OnClickListener() {
            public void onClick(View view) {
                if (NicProfileDialog.this.mUser != null) {
                    Intent intent = new Intent(NicProfileDialog.this.mContext, ProfilesFriendActivity.class);
                    intent.putExtra(CatfishRESTAPI.CFCOMPACT_STICKERID, NicProfileDialog.this.mId);
                    intent.putExtra(CatfishDataStorage.NIC_NAME, NicProfileDialog.this.mName);
                    intent.putExtra(AlbusModelObject.STATUS_SEQUENCE, NicProfileDialog.this.mUser.getStatusSequence());
                    intent.putExtra(AlbusModelObject.STATUS_LIKE, NicProfileDialog.this.mUser.getStatusLike());
                    intent.putExtra(AlbusModelObject.ME_LIKE_STATUS, NicProfileDialog.this.mUser.isMeLikeThisStatus());
                    NicProfileDialog.this.getActivity().startActivity(intent);
                }
            }
        });
        return this.mView;
    }

    public void onDismiss(DialogInterface dialogInterface) {
        super.onDismiss(dialogInterface);
        this.mCatfiz.finish();
        this.mCatfiz.destroy();
        if (this.mFromOutside) {
            getActivity().finish();
        }
    }

    public void onRegisterProgress() {
    }

    public void onResume() {
        super.onResume();
        this.mCatfiz.start();
        if (this.mCatfiz.isCatfizStarted()) {
            getProfile();
        }
    }

    public boolean onSignalEvent(Signal signal) {
        return false;
    }

    public void onStart() {
        super.onStart();
    }

    public void setContext(Context context) {
        this.mContext = context;
    }
}
