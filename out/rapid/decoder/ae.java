package rapid.decoder;

import java.io.IOException;
import java.io.InputStream;
import rapid.decoder.b.v;

public class ae extends InputStream {
    private static final int a = 1024;
    private InputStream b;
    private byte[] c = new byte[a];
    private int d = 0;
    private int e;
    private int f = 0;
    private boolean g = true;
    private boolean h = false;
    private v i;
    private boolean j;

    public ae(InputStream inputStream) {
        this.b = inputStream;
    }

    private int a(byte[] bArr, int i, int i2) {
        int read = this.b.read(bArr, i, i2);
        if (this.i != null) {
            if (read == -1) {
                try {
                    this.i.close();
                } catch (IOException e) {
                }
                this.i = null;
            } else {
                this.i.write(bArr, i, read);
            }
        }
        return read;
    }

    public static ae a(InputStream inputStream) {
        return (!(inputStream instanceof ae) || ((ae) inputStream).c()) ? new ae(inputStream) : (ae) inputStream;
    }

    private void a(int i) {
        int i2 = this.d + i;
        if (i2 > this.c.length) {
            Object obj = new byte[(i2 * 2)];
            System.arraycopy(this.c, 0, obj, 0, this.d);
            this.c = obj;
        }
    }

    public InputStream a() {
        return this.b;
    }

    public void a(v vVar) {
        this.i = vVar;
        this.j = true;
    }

    public void a(boolean z) {
        this.j = z;
    }

    public void b() {
        this.g = false;
        this.h = true;
    }

    public boolean c() {
        return this.h;
    }

    public void close() {
        if (this.i != null) {
            try {
                if (this.j) {
                    this.i.close();
                } else {
                    this.i.a();
                }
            } catch (IOException e) {
            }
            this.i = null;
        }
        this.b.close();
    }

    public void d() {
        this.f = 0;
        this.e = 0;
    }

    public void mark(int i) {
        this.f = this.e;
        if (this.h && this.e + i > this.d) {
            this.g = true;
            if (this.c == null) {
                this.c = new byte[a];
                this.f = 0;
                this.e = 0;
                this.d = 0;
            }
        }
    }

    public boolean markSupported() {
        return true;
    }

    public int read() {
        int read;
        if (this.c != null) {
            if (this.e < this.d) {
                byte[] bArr = this.c;
                int i = this.e;
                this.e = i + 1;
                return bArr[i];
            } else if (this.g) {
                read = this.b.read();
                if (read < 0) {
                    return read;
                }
                a(1);
                byte[] bArr2 = this.c;
                int i2 = this.d;
                this.d = i2 + 1;
                bArr2[i2] = (byte) read;
                this.e = this.d;
                return read;
            }
        }
        read = this.b.read();
        if (this.i == null) {
            return read;
        }
        if (read == -1) {
            try {
                this.i.close();
            } catch (IOException e) {
            }
            this.i = null;
            return read;
        }
        this.i.write(read);
        return read;
    }

    public int read(byte[] bArr, int i, int i2) {
        if (this.c == null) {
            return a(bArr, i, i2);
        }
        int min;
        if (this.e < this.d) {
            min = Math.min(this.d - this.e, i2);
            System.arraycopy(this.c, this.e, bArr, i, min);
            this.e += min;
            i += min;
            i2 -= min;
            min += 0;
        } else {
            min = 0;
        }
        if (i2 <= 0) {
            return min;
        }
        int a = a(bArr, i, i2);
        if (a == -1) {
            return min != 0 ? min : -1;
        } else {
            if (this.g) {
                a(a);
                System.arraycopy(bArr, i, this.c, this.d, a);
                this.d += a;
                this.e = this.d;
            } else {
                this.c = null;
                if (this.h) {
                    this.g = false;
                }
            }
            return min + a;
        }
    }

    public void reset() {
        this.e = this.f;
    }
}
