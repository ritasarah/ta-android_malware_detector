package rapid.decoder;

import android.content.Context;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.Point;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Build.VERSION;
import android.text.TextUtils;
import android.view.WindowManager;
import android.widget.ImageView.ScaleType;
import com.catfiz.util.CFURLSpan;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.apache.http.HttpHost;
import org.apache.http.conn.routing.HttpRouteDirector;
import rapid.decoder.b.a;
import rapid.decoder.b.n;
import rapid.decoder.d.g;
import rapid.decoder.d.h;

public abstract class e extends x {
    static final String a = "Ratio should be positive.";
    protected static final Object b = new Object();
    protected static a c = null;
    static final Object d = new Object();
    static rapid.decoder.b.e e = null;
    private static final String l = "This type of uri requires Context. Use BitmapDecoder.from(Context, Uri) instead.";
    private static final String m = "/android_asset/";
    private static final long n = 8388608;
    private static final int o = 2;
    protected ArrayList f;
    protected float g = 1.0f;
    protected float h = 1.0f;
    protected C0009E i;
    protected Rect j;
    protected int k;
    private boolean p = false;
    private C0027r q;
    private int r;
    private int s;

    protected e() {
    }

    protected e(e eVar) {
        if (eVar.f != null) {
            this.f = new ArrayList(eVar.f);
        }
    }

    public static p a(Context context, Uri uri) {
        return a(context, uri, true);
    }

    public static p a(Context context, Uri uri, boolean z) {
        String scheme = uri.getScheme();
        int i = -1;
        switch (scheme.hashCode()) {
            case -368816979:
                if (scheme.equals("android.resource")) {
                    i = 0;
                    break;
                }
                break;
            case 101730:
                if (scheme.equals("ftp")) {
                    i = 4;
                    break;
                }
                break;
            case 3143036:
                if (scheme.equals("file")) {
                    i = 1;
                    break;
                }
                break;
            case 3213448:
                if (scheme.equals(HttpHost.DEFAULT_SCHEME_NAME)) {
                    i = o;
                    break;
                }
                break;
            case 99617003:
                if (scheme.equals(CFURLSpan.HTTPS_SCHEME)) {
                    i = 3;
                    break;
                }
                break;
        }
        switch (i) {
            case e.a /*0*/:
                if (context == null) {
                    throw new IllegalArgumentException(l);
                }
                Resources resources;
                String authority = uri.getAuthority();
                if (context.getPackageName().equals(authority)) {
                    resources = context.getResources();
                } else {
                    try {
                        resources = context.getPackageManager().getResourcesForApplication(authority);
                    } catch (NameNotFoundException e) {
                        return new M();
                    }
                }
                List pathSegments = uri.getPathSegments();
                int size = pathSegments.size();
                if (size == o && ((String) pathSegments.get(0)).equals("drawable")) {
                    i = resources.getIdentifier((String) pathSegments.get(1), "drawable", authority);
                } else if (size == 1 && TextUtils.isDigitsOnly((CharSequence) pathSegments.get(0))) {
                    try {
                        i = Integer.parseInt((String) pathSegments.get(0));
                    } catch (NumberFormatException e2) {
                        i = 0;
                    }
                } else {
                    i = 0;
                }
                return i == 0 ? new M() : new Y(resources, i).h(z);
            case e.b /*1*/:
                String path = uri.getPath();
                if (!path.startsWith(m)) {
                    return new B(path).h(z);
                }
                if (context != null) {
                    return new C0013a(context, path.substring(m.length())).b(uri).h(z);
                }
                throw new IllegalArgumentException(l);
            case o /*2*/:
            case HttpRouteDirector.TUNNEL_TARGET /*3*/:
            case HttpRouteDirector.TUNNEL_PROXY /*4*/:
                scheme = uri.toString();
                p pVar = null;
                synchronized (d) {
                    if (z) {
                        if (e != null) {
                            InputStream b = e.b(scheme);
                            if (b != null) {
                                pVar = new ab(b);
                                pVar.p = true;
                            }
                        }
                    }
                    if (pVar == null) {
                        pVar = new ab(new H(new C0017f(uri)));
                        if (z && e != null) {
                            pVar.a(e.a(scheme));
                        }
                    }
                }
                return pVar.b(uri).h(z);
            default:
                if (context != null) {
                    return new ab(new H(new C0018g(context.getContentResolver(), uri))).b(uri).h(z);
                }
                throw new IllegalArgumentException(l);
        }
    }

    public static p a(Context context, String str) {
        return a(context, Uri.parse(str));
    }

    public static p a(Context context, String str, boolean z) {
        return a(context, Uri.parse(str), z);
    }

    public static p a(Resources resources, int i) {
        return new Y(resources, i);
    }

    public static p a(Uri uri) {
        return a(null, uri, true);
    }

    public static p a(Uri uri, boolean z) {
        return a(null, uri, z);
    }

    public static p a(FileDescriptor fileDescriptor) {
        return new C(fileDescriptor);
    }

    public static p a(InputStream inputStream) {
        return new ab(inputStream);
    }

    public static p a(String str) {
        return a(str, true);
    }

    public static p a(String str, boolean z) {
        return str.contains("://") ? a(Uri.parse(str), z) : new B(str).h(z);
    }

    public static p a(C0012X c0012x) {
        return new ab(new H(new C0019h(c0012x)));
    }

    public static p a(byte[] bArr) {
        return new C0031v(bArr, 0, bArr.length);
    }

    public static p a(byte[] bArr, int i, int i2) {
        return new C0031v(bArr, i, i2);
    }

    private void a() {
        this.p = false;
        this.s = 0;
        this.r = 0;
    }

    public static void a(int i) {
        synchronized (b) {
            if (c != null) {
                try {
                    c.a();
                } catch (IllegalStateException e) {
                }
            }
            c = new a(i);
        }
    }

    public static void a(Context context) {
        Point point = (Point) n.d.e();
        rapid.decoder.c.a.a(((WindowManager) context.getSystemService("window")).getDefaultDisplay(), point);
        a(C0029t.a(point.x, point.y, VERSION.SDK_INT < 9 ? Config.RGB_565 : Config.ARGB_8888) * o);
        n.d.c(point);
    }

    public static void a(Context context, long j) {
        synchronized (d) {
            e = new rapid.decoder.b.e(context, "agu", j);
        }
    }

    public static boolean a(Object obj) {
        return C0016d.f(obj) ? C0016d.e(obj) : C0016d.d(obj);
    }

    public static e b(Bitmap bitmap) {
        return new C0028s(bitmap);
    }

    public static void b(Context context) {
        a(context, (long) n);
    }

    public static void f() {
        synchronized (b) {
            if (c != null) {
                try {
                    c.a();
                } catch (IllegalStateException e) {
                }
                c = null;
            }
        }
    }

    public static void g() {
        synchronized (b) {
            if (c != null) {
                try {
                    c.a();
                } catch (IllegalStateException e) {
                }
            }
        }
    }

    public static void h() {
        synchronized (d) {
            if (e != null) {
                e.a();
                e = null;
            }
        }
    }

    public static void i() {
        synchronized (d) {
            if (e != null) {
                e.b();
            }
        }
    }

    public static boolean x() {
        return C0016d.a();
    }

    public abstract Bitmap a(int i, int i2, Rect rect, Drawable drawable);

    protected Bitmap a(Bitmap bitmap) {
        if (this.q == null) {
            return bitmap;
        }
        Bitmap a = this.q.a(bitmap);
        if (a != bitmap) {
            bitmap.recycle();
        }
        return a;
    }

    public g a(int i, int i2, ScaleType scaleType) {
        return g.a(this, i, i2, scaleType);
    }

    public g a(int i, int i2, h hVar) {
        return hVar.a(this, i, i2);
    }

    public e a(float f) {
        return a(f, f);
    }

    public e a(float f, float f2) {
        if (f <= 0.0f || f2 <= 0.0f) {
            throw new IllegalArgumentException(a);
        }
        a();
        C0020o c0020o = this.f == null ? null : (C0020o) this.f.get(this.f.size() - 1);
        if (c0020o != null) {
            if (c0020o instanceof C0025m) {
                C0025m c0025m = (C0025m) c0020o;
                c0025m.a *= f;
                c0025m.b *= f2;
            } else if (c0020o instanceof C0023k) {
                C0023k c0023k = (C0023k) c0020o;
                c0023k.a *= f;
                c0023k.b *= f2;
            }
            return this;
        }
        a(C0023k.a(f, f2));
        return this;
    }

    public e a(int i, int i2) {
        if (i < 0) {
            throw new IllegalArgumentException("Invalid width");
        } else if (i2 < 0) {
            throw new IllegalArgumentException("Invalid height");
        } else if (i == 0 && i2 == 0) {
            throw new IllegalArgumentException();
        } else {
            a();
            C0020o c0020o = this.f == null ? null : (C0020o) this.f.get(this.f.size() - 1);
            if (c0020o != null) {
                if (c0020o instanceof C0025m) {
                    C0025m c0025m = (C0025m) c0020o;
                    c0025m.a = (float) i;
                    c0025m.b = (float) i2;
                    return this;
                } else if (c0020o instanceof C0023k) {
                    this.f.remove(this.f.size() - 1);
                }
            }
            a(C0025m.a((float) i, (float) i2));
            return this;
        }
    }

    public e a(int i, int i2, int i3, int i4) {
        if (i3 < i || i4 < i2) {
            throw new IllegalArgumentException();
        }
        a();
        C0020o c0020o = this.f == null ? null : (C0020o) this.f.get(this.f.size() - 1);
        if (c0020o == null || !(c0020o instanceof C0021i)) {
            a(C0021i.a(i, i2, i3, i4));
        } else {
            C0021i c0021i = (C0021i) c0020o;
            c0021i.a += i;
            c0021i.b += i2;
            c0021i.c = c0021i.a + (i3 - i);
            c0021i.d = c0021i.b + (i4 - i2);
        }
        return this;
    }

    public abstract e a(Config config);

    public e a(Rect rect) {
        return a(rect.left, rect.top, rect.right, rect.bottom);
    }

    public e a(C0027r c0027r) {
        this.q = c0027r;
        return this;
    }

    public abstract e a(boolean z);

    public void a(Canvas canvas, int i, int i2) {
        a(canvas, i, i2, i + l(), i2 + m());
    }

    public void a(Canvas canvas, int i, int i2, int i3, int i4) {
        Rect a = n.b.a(i, i2, i3, i4);
        a(canvas, a);
        n.b.c(a);
    }

    public abstract void a(Canvas canvas, Rect rect);

    protected void a(C0020o c0020o) {
        if (this.f == null) {
            this.f = new ArrayList(o);
        }
        this.f.add(c0020o);
        this.k = 0;
    }

    protected boolean a(e eVar) {
        if (this.f == null) {
            boolean z = eVar.f == null || eVar.f.isEmpty();
            return z;
        }
        if (this.f.size() != (eVar.f == null ? 0 : eVar.f.size())) {
            return false;
        }
        Iterator it = this.f.iterator();
        Iterator it2 = eVar.f.iterator();
        while (it.hasNext()) {
            if (!it2.hasNext()) {
                return false;
            }
            if (!((C0020o) it.next()).equals(it2.next())) {
                return false;
            }
        }
        return true;
    }

    public e b(int i, int i2) {
        return a(0, 0, i, i2);
    }

    public abstract e b(boolean z);

    public abstract e c(boolean z);

    public abstract e d();

    public /* synthetic */ x e() {
        return d();
    }

    protected void finalize() {
        try {
            n.b.c(this.j);
            if (this.f != null) {
                int size = this.f.size();
                for (int i = 0; i < size; i++) {
                    ((C0020o) this.f.get(i)).a();
                }
            }
            super.finalize();
        } catch (Throwable th) {
            super.finalize();
        }
    }

    public abstract int j();

    public abstract int k();

    public int l() {
        if (this.r != 0) {
            return this.r;
        }
        r();
        int a = this.i.a(((float) p()) * this.g);
        this.r = a;
        return a;
    }

    public int m() {
        if (this.s != 0) {
            return this.s;
        }
        r();
        int a = this.i.a(((float) q()) * this.h);
        this.s = a;
        return a;
    }

    public abstract Config n();

    public abstract Bitmap o();

    protected int p() {
        return this.j != null ? this.j.width() : j();
    }

    protected int q() {
        return this.j != null ? this.j.height() : k();
    }

    protected void r() {
        if (!this.p) {
            float v = v();
            this.h = v;
            this.g = v;
            this.i = C0009E.CEIL;
            if (this.j != null) {
                n.b.c(this.j);
            }
            this.j = null;
            this.p = true;
            if (this.f != null) {
                Iterator it = this.f.iterator();
                while (it.hasNext()) {
                    Object next = it.next();
                    if (next instanceof C0025m) {
                        float b;
                        C0025m c0025m = (C0025m) next;
                        int p = p();
                        int q = q();
                        if (c0025m.a == 0.0f) {
                            v = c0025m.b;
                            b = rapid.decoder.d.a.b((float) p, (float) q, v);
                        } else if (c0025m.b == 0.0f) {
                            b = c0025m.a;
                            v = rapid.decoder.d.a.a((float) p, (float) q, b);
                        } else {
                            b = c0025m.a;
                            v = c0025m.b;
                        }
                        this.g = b / ((float) p);
                        this.h = v / ((float) q);
                        this.i = C0009E.ROUND;
                    } else if (next instanceof C0023k) {
                        C0023k c0023k = (C0023k) next;
                        this.g *= c0023k.a;
                        this.h = c0023k.b * this.h;
                    } else if (next instanceof C0021i) {
                        C0021i c0021i = (C0021i) next;
                        if (this.j == null) {
                            this.j = (Rect) n.b.e();
                            this.j.left = Math.round(((float) c0021i.a) / this.g);
                            this.j.top = Math.round(((float) c0021i.b) / this.h);
                            this.j.right = Math.round(((float) c0021i.c) / this.g);
                            this.j.bottom = Math.round(((float) c0021i.d) / this.h);
                        } else {
                            this.j.left += Math.round(((float) c0021i.a) / this.g);
                            this.j.top += Math.round(((float) c0021i.b) / this.h);
                            this.j.right = this.j.left + Math.round(((float) (c0021i.c - c0021i.a)) / this.g);
                            this.j.bottom = this.j.top + Math.round(((float) (c0021i.d - c0021i.b)) / this.h);
                        }
                        this.g = ((float) (c0021i.c - c0021i.a)) / ((float) this.j.width());
                        this.h = ((float) (c0021i.d - c0021i.b)) / ((float) this.j.height());
                        this.i = C0009E.ROUND;
                    }
                }
            }
        }
    }

    protected int s() {
        return this.f == null ? 0 : this.f.hashCode();
    }

    public e t() {
        return a(true);
    }

    public e u() {
        return c(true);
    }

    protected float v() {
        return 1.0f;
    }

    public e w() {
        this.h = 1.0f;
        this.g = 1.0f;
        this.p = false;
        this.j = null;
        this.k = 0;
        this.f = null;
        return this;
    }
}
