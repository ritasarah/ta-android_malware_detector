package rapid.decoder;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

class H extends InputStream {
    protected InputStream a;
    private ac b;

    public H(ac acVar) {
        this.b = acVar;
    }

    public ac a() {
        return this.b;
    }

    public int available() {
        return b().available();
    }

    protected InputStream b() {
        if (this.a == null) {
            this.a = this.b.a();
            if (this.a == null) {
                this.a = new ByteArrayInputStream(new byte[0]);
            }
        }
        return this.a;
    }

    public void close() {
        if (this.a != null) {
            this.a.close();
        }
    }

    public void mark(int i) {
        b().mark(i);
    }

    public boolean markSupported() {
        return b().markSupported();
    }

    public int read() {
        return b().read();
    }

    public int read(byte[] bArr) {
        return b().read(bArr);
    }

    public int read(byte[] bArr, int i, int i2) {
        return b().read(bArr, i, i2);
    }

    public synchronized void reset() {
        b().reset();
    }

    public long skip(long j) {
        return b().skip(j);
    }
}
