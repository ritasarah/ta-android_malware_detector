package rapid.decoder.builtin;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory.Options;
import android.graphics.Rect;
import java.io.InputStream;

public class PngDecoder {
    private static boolean a;
    private static boolean b;
    private long c;

    public PngDecoder(InputStream inputStream) {
        this.c = createNativeDecoder(inputStream);
    }

    public static void a() {
        if (!a) {
            a = true;
            System.loadLibrary("png-decoder");
            init();
            b = true;
        } else if (!b) {
            throw new UnsatisfiedLinkError();
        }
    }

    private static native long createNativeDecoder(InputStream inputStream);

    private static native void destroyNativeDecoder(long j);

    private static native void init();

    private static native boolean nativeBegin(long j);

    private static native Bitmap nativeDecode(long j, int i, int i2, int i3, int i4, boolean z, Config config, Options options);

    private static native int nativeGetHeight(long j);

    private static native int nativeGetWidth(long j);

    private static native boolean nativeHasAlpha(long j);

    public Bitmap a(Rect rect, boolean z, Config config, Options options) {
        if (this.c != 0) {
            return rect == null ? nativeDecode(this.c, -1, -1, -1, -1, z, config, options) : nativeDecode(this.c, rect.left, rect.top, rect.right, rect.bottom, z, config, options);
        } else {
            throw new IllegalStateException();
        }
    }

    public void b() {
        if (this.c != 0) {
            destroyNativeDecoder(this.c);
            this.c = 0;
        }
    }

    public boolean c() {
        if (this.c != 0) {
            return nativeBegin(this.c);
        }
        throw new IllegalStateException();
    }

    public int d() {
        if (this.c != 0) {
            return nativeGetWidth(this.c);
        }
        throw new IllegalStateException();
    }

    public int e() {
        if (this.c != 0) {
            return nativeGetHeight(this.c);
        }
        throw new IllegalStateException();
    }

    public boolean f() {
        if (this.c != 0) {
            return nativeHasAlpha(this.c);
        }
        throw new IllegalStateException();
    }

    protected void finalize() {
        b();
        super.finalize();
    }
}
