package rapid.decoder.builtin;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory.Options;
import android.graphics.Rect;
import android.os.Build.VERSION;
import java.io.IOException;
import java.io.InputStream;
import rapid.decoder.ae;

public class a {
    private static final String a = "rectangle is outside the image";
    private ae b;
    private Rect c;
    private boolean d = true;

    public a(InputStream inputStream) {
        this.b = ae.a(inputStream);
    }

    private void a(int i, int i2) {
        if (this.c == null) {
            return;
        }
        if (this.c.left < 0 || this.c.top < 0 || this.c.right > i || this.c.bottom > i2) {
            throw new IllegalArgumentException(a);
        }
    }

    private static Config b(boolean z) {
        return z ? Config.ARGB_8888 : VERSION.SDK_INT >= 9 ? Config.ARGB_8888 : Config.RGB_565;
    }

    private Bitmap b(Options options) {
        Bitmap bitmap = null;
        JpegDecoder.a();
        JpegDecoder jpegDecoder = new JpegDecoder(this.b);
        try {
            if (jpegDecoder.c()) {
                if (options.mCancel) {
                    jpegDecoder.b();
                } else {
                    this.b.b();
                    a(jpegDecoder.d(), jpegDecoder.e());
                    bitmap = jpegDecoder.a(this.c, this.d, options.inPreferredConfig != null ? options.inPreferredConfig : b(false), options);
                    jpegDecoder.b();
                }
            }
            return bitmap;
        } finally {
            jpegDecoder.b();
        }
    }

    private Bitmap c(Options options) {
        Bitmap bitmap = null;
        PngDecoder.a();
        PngDecoder pngDecoder = new PngDecoder(this.b);
        try {
            if (pngDecoder.c()) {
                if (options.mCancel) {
                    pngDecoder.b();
                } else {
                    this.b.b();
                    a(pngDecoder.d(), pngDecoder.e());
                    bitmap = pngDecoder.a(this.c, this.d, options.inPreferredConfig != null ? options.inPreferredConfig : b(pngDecoder.f()), options);
                    pngDecoder.b();
                }
            }
            return bitmap;
        } finally {
            pngDecoder.b();
        }
    }

    public Bitmap a(Options options) {
        String str = options.outMimeType;
        if (str == null) {
            this.b.d();
            Bitmap c = c(options);
            if (c != null || options.mCancel) {
                return c;
            }
            this.b.d();
            return b(options);
        } else if (str.equals("image/png")) {
            this.b.d();
            return c(options);
        } else if (!str.equals("image/jpeg")) {
            return null;
        } else {
            this.b.d();
            return b(options);
        }
    }

    public InputStream a() {
        return this.b;
    }

    public void a(Rect rect) {
        this.c = rect;
    }

    public void a(boolean z) {
        this.d = z;
    }

    public void b() {
        try {
            this.b.close();
        } catch (IOException e) {
        }
    }
}
