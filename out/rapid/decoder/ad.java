package rapid.decoder;

import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.SystemClock;
import android.support.v4.view.MotionEventCompat;

public class ad extends Drawable {
    private static final int a = 0;
    private static final int b = 1;
    private static final int c = 2;
    private static final int d = 3;
    private int e = a;
    private Drawable f;
    private Drawable g;
    private long h = -1;
    private int i;
    private int j = MotionEventCompat.ACTION_MASK;
    private Runnable k;

    public ad(Drawable drawable, Drawable drawable2) {
        this.f = drawable;
        this.g = drawable2;
    }

    public void a(int i) {
        this.i = i;
        this.e = b;
        invalidateSelf();
    }

    public void a(Runnable runnable) {
        this.k = runnable;
    }

    public void draw(Canvas canvas) {
        int i = b;
        int i2 = a;
        if (this.e == 0) {
            if (this.f != null) {
                this.f.draw(canvas);
            }
        } else if (this.e == d) {
            this.g.draw(canvas);
        } else {
            if (this.e == b) {
                this.h = SystemClock.uptimeMillis();
                this.e = c;
                i = a;
            } else if (this.h >= 0) {
                float uptimeMillis = ((float) (SystemClock.uptimeMillis() - this.h)) / ((float) this.i);
                if (uptimeMillis < 1.0f) {
                    i = a;
                }
                i2 = (int) (Math.min(uptimeMillis, 1.0f) * 255.0f);
            } else {
                i = a;
            }
            if (i != 0) {
                this.e = d;
                this.g.draw(canvas);
                if (this.k != null) {
                    scheduleSelf(this.k, 0);
                    return;
                }
                return;
            }
            Drawable drawable = this.f;
            if (drawable != null) {
                drawable.setAlpha(255 - i2);
                drawable.draw(canvas);
                drawable.setAlpha(this.j);
            }
            if (i2 != 0) {
                drawable = this.g;
                drawable.setAlpha(i2);
                drawable.draw(canvas);
                drawable.setAlpha(this.j);
            }
            invalidateSelf();
        }
    }

    public int getIntrinsicHeight() {
        return this.f == null ? this.g.getIntrinsicHeight() : Math.max(this.f.getIntrinsicHeight(), this.g.getIntrinsicHeight());
    }

    public int getIntrinsicWidth() {
        return this.f == null ? this.g.getIntrinsicWidth() : Math.max(this.f.getIntrinsicWidth(), this.g.getIntrinsicWidth());
    }

    public int getOpacity() {
        return -3;
    }

    protected void onBoundsChange(Rect rect) {
        super.onBoundsChange(rect);
        if (this.f != null) {
            this.f.setBounds(rect);
        }
        this.g.setBounds(rect);
    }

    public void setAlpha(int i) {
        if (this.j != i) {
            this.j = i;
            if (this.f != null) {
                this.f.setAlpha(i);
            }
            this.g.setAlpha(i);
            invalidateSelf();
        }
    }

    public void setColorFilter(ColorFilter colorFilter) {
    }
}
