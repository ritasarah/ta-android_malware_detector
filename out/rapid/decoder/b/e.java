package rapid.decoder.b;

import android.content.Context;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.AsyncTask;
import android.os.Build.VERSION;
import android.os.Environment;
import android.os.StatFs;
import android.support.v4.view.MotionEventCompat;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class e {
    private final Object a = new Object();
    private g b;
    private Context c;
    private String d;
    private long e;
    private boolean f = true;

    public e(Context context, String str, long j) {
        int i;
        this.c = context;
        this.d = str;
        this.e = j;
        try {
            i = context.getPackageManager().getPackageInfo(context.getPackageName(), 0).versionCode;
        } catch (NameNotFoundException e) {
            i = 1;
        }
        AsyncTask fVar = new f(this);
        if (VERSION.SDK_INT >= 11) {
            fVar.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new Integer[]{Integer.valueOf(i)});
            return;
        }
        fVar.execute(new Integer[]{Integer.valueOf(i)});
    }

    private static long a(File file) {
        if (VERSION.SDK_INT >= 9) {
            return file.getUsableSpace();
        }
        StatFs statFs = new StatFs(file.getPath());
        return ((long) statFs.getAvailableBlocks()) * ((long) statFs.getBlockSize());
    }

    private static File a(Context context, String str) {
        String str2 = null;
        if ("mounted".equals(Environment.getExternalStorageState()) || !d()) {
            File externalCacheDir = context.getExternalCacheDir();
            if (externalCacheDir != null) {
                str2 = externalCacheDir.getPath();
            }
        }
        if (str2 == null) {
            str2 = context.getCacheDir().getPath();
        }
        return new File(str2 + File.separator + str);
    }

    private static String a(byte[] bArr) {
        StringBuilder stringBuilder = new StringBuilder();
        for (byte b : bArr) {
            String toHexString = Integer.toHexString(b & MotionEventCompat.ACTION_MASK);
            if (toHexString.length() == 1) {
                stringBuilder.append('0');
            }
            stringBuilder.append(toHexString);
        }
        return stringBuilder.toString();
    }

    private void a(int i) {
        synchronized (this.a) {
            try {
                if (this.b == null || this.b.d()) {
                    File a = a(this.c, this.d);
                    if (!a.exists() && !a.mkdirs()) {
                        this.f = a;
                        this.a.notifyAll();
                        return;
                    } else if (a(a) > this.e) {
                        try {
                            this.b = g.a(a, i, 2, this.e);
                        } catch (IOException e) {
                        }
                    }
                }
                this.f = false;
                this.a.notifyAll();
            } finally {
                this.f = false;
                this.a.notifyAll();
            }
        }
    }

    public static String c(String str) {
        try {
            MessageDigest instance = MessageDigest.getInstance("MD5");
            instance.update(str.getBytes());
            return a(instance.digest());
        } catch (NoSuchAlgorithmException e) {
            return String.valueOf(str.hashCode());
        }
    }

    private static boolean d() {
        return VERSION.SDK_INT < 9 || Environment.isExternalStorageRemovable();
    }

    public v a(String str) {
        Exception e;
        Throwable th;
        String c = c(str);
        synchronized (this.a) {
            while (this.f) {
                try {
                    this.a.wait();
                } catch (InterruptedException e2) {
                }
            }
            if (this.b != null) {
                OutputStream outputStream = null;
                try {
                    i b = this.b.b(c);
                    if (b != null) {
                        outputStream = b.c(0);
                        try {
                            DataOutputStream dataOutputStream = new DataOutputStream(outputStream);
                            dataOutputStream.writeUTF(str);
                            dataOutputStream.close();
                            v vVar = new v(this, b, b.c(1));
                            if (outputStream != null) {
                                try {
                                    outputStream.close();
                                } catch (IOException e3) {
                                }
                            }
                            return vVar;
                        } catch (Exception e4) {
                            e = e4;
                            try {
                                e.printStackTrace();
                                if (outputStream != null) {
                                    try {
                                        outputStream.close();
                                    } catch (IOException e5) {
                                    }
                                }
                                return null;
                            } catch (Throwable th2) {
                                th = th2;
                                if (outputStream != null) {
                                    try {
                                        outputStream.close();
                                    } catch (IOException e6) {
                                    }
                                }
                                throw th;
                            }
                        }
                    } else if (null != null) {
                        try {
                            outputStream.close();
                        } catch (IOException e7) {
                        }
                    }
                } catch (Exception e8) {
                    e = e8;
                    outputStream = null;
                    e.printStackTrace();
                    if (outputStream != null) {
                        outputStream.close();
                    }
                    return null;
                } catch (Throwable th3) {
                    th = th3;
                    outputStream = null;
                    if (outputStream != null) {
                        outputStream.close();
                    }
                    throw th;
                }
            }
            return null;
        }
    }

    public void a() {
        synchronized (this.a) {
            if (this.b != null) {
                try {
                    this.b.close();
                } catch (IOException e) {
                }
            }
        }
    }

    public InputStream b(String str) {
        Throwable th;
        InputStream inputStream = null;
        String c = c(str);
        synchronized (this.a) {
            while (this.f) {
                try {
                    this.a.wait();
                } catch (InterruptedException e) {
                }
            }
            if (this.b == null) {
            } else {
                InputStream inputStream2 = null;
                InputStream a;
                try {
                    l a2 = this.b.a(c);
                    if (a2 == null) {
                        if (inputStream != null) {
                            try {
                                inputStream2.close();
                            } catch (IOException e2) {
                            }
                        }
                    } else {
                        a = a2.a(0);
                        if (a == null) {
                            if (a != null) {
                                try {
                                    a.close();
                                } catch (IOException e3) {
                                }
                            }
                        } else {
                            try {
                                DataInputStream dataInputStream = new DataInputStream(a);
                                String readUTF = dataInputStream.readUTF();
                                dataInputStream.close();
                                if (readUTF.equals(str)) {
                                    inputStream = a2.a(1);
                                    if (a != null) {
                                        try {
                                            a.close();
                                        } catch (IOException e4) {
                                        }
                                    }
                                } else {
                                    if (a != null) {
                                        try {
                                            a.close();
                                        } catch (IOException e5) {
                                        }
                                    }
                                }
                            } catch (IOException e6) {
                                if (a != null) {
                                    try {
                                        a.close();
                                    } catch (IOException e7) {
                                    }
                                }
                                return inputStream;
                            } catch (Throwable th2) {
                                th = th2;
                                if (a != null) {
                                    try {
                                        a.close();
                                    } catch (IOException e8) {
                                    }
                                }
                                throw th;
                            }
                        }
                    }
                } catch (IOException e9) {
                    a = inputStream;
                    if (a != null) {
                        a.close();
                    }
                    return inputStream;
                } catch (Throwable th3) {
                    Throwable th4 = th3;
                    a = inputStream;
                    th = th4;
                    if (a != null) {
                        a.close();
                    }
                    throw th;
                }
            }
        }
        return inputStream;
    }

    public void b() {
        synchronized (this.a) {
            if (this.b != null) {
                try {
                    this.b.f();
                } catch (IOException e) {
                }
            }
        }
    }

    public void c() {
        synchronized (this.a) {
            if (this.b != null) {
                this.b.e();
            }
        }
    }
}
