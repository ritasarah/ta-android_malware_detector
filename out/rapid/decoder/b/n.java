package rapid.decoder.b;

import java.util.ArrayList;
import java.util.Iterator;

public abstract class n {
    public static final r a = new r();
    public static final u b = new u();
    public static final t c = new t();
    public static final s d = new s();
    public static final n e = new o();
    public static final n f = new p();
    public static final q g = new q();
    private static final int h = 4;
    private static ArrayList i;
    private Object[] j;
    private int k = 0;

    public n() {
        synchronized (n.class) {
            if (i == null) {
                i = new ArrayList();
            }
            i.add(this);
        }
    }

    public static void c() {
        synchronized (n.class) {
            if (i != null) {
                Iterator it = i.iterator();
                while (it.hasNext()) {
                    ((n) it.next()).f();
                }
            }
        }
    }

    Object a(boolean z) {
        Object b;
        synchronized (this) {
            if (this.j == null || this.k == 0) {
                b = b();
            } else {
                Object[] objArr = this.j;
                int i = this.k - 1;
                this.k = i;
                b = objArr[i];
                this.j[this.k] = null;
                if (z) {
                    b(b);
                }
            }
        }
        return b;
    }

    protected boolean a(Object obj) {
        return true;
    }

    protected abstract Object b();

    protected void b(Object obj) {
    }

    public void c(Object obj) {
        if (obj != null && a(obj)) {
            synchronized (this) {
                if (this.j == null) {
                    this.j = new Object[h];
                }
                if (this.k >= this.j.length) {
                    Object obj2 = new Object[(this.j.length * 2)];
                    System.arraycopy(this.j, 0, obj2, 0, this.j.length);
                    this.j = obj2;
                }
                Object[] objArr = this.j;
                int i = this.k;
                this.k = i + 1;
                objArr[i] = obj;
            }
        }
    }

    public Object d() {
        return a(true);
    }

    public Object e() {
        return a(false);
    }

    public void f() {
        synchronized (this) {
            this.j = null;
            this.k = 0;
        }
    }
}
