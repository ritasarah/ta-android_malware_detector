package catfiz.crypto.a;

import android.util.Base64;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.RSAPublicKeySpec;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.apache.http.protocol.HTTP;

public class a {
    public static final String a = "CryptoAPI";
    private static String b = "AAAAgJLPbKBPKeh6xP6iB_fa4400H0CfjMpZhlqaeK9mTOopghGzVOJXuDOCiW6GGHtrdCVePR6o58AdbQvsSevM_VlaPKiBBf0xQPB2l0QA3W_6jAnljGvpQOAaiYJANwtedFt7es4ZsRKZkj85gV5eIcq_ioVigHf474xYNe3_QX4hAAAAAwEAAQ==";
    private static BigInteger c = null;
    private static BigInteger d = null;
    private static PublicKey e = null;
    private static final int f = 128;
    private static final int g = 16;
    private static final int h = 16;
    private static final int i = 16;
    private static final int j = 2;
    private static final int k = 3;
    private byte[] l = new byte[i];
    private boolean m = false;

    private boolean a() {
        if (c == null || d == null) {
            byte[] decode = Base64.decode(b, 8);
            if (decode == null || decode.length <= 0) {
                return false;
            }
            ByteBuffer wrap = ByteBuffer.wrap(decode);
            int i = wrap.getInt();
            if (i <= 0) {
                return false;
            }
            byte[] bArr = new byte[i];
            wrap.get(bArr);
            int i2 = wrap.getInt();
            if (i2 <= 0) {
                return false;
            }
            byte[] bArr2 = new byte[i2];
            wrap.get(bArr2);
            c = new BigInteger(1, bArr);
            d = new BigInteger(bArr2);
            e = null;
        }
        if (e == null) {
            e = KeyFactory.getInstance("RSA").generatePublic(new RSAPublicKeySpec(c, d));
        }
        return true;
    }

    public String a(String str) {
        try {
            return a(str.getBytes(HTTP.UTF_8));
        } catch (UnsupportedEncodingException e) {
            catfiz.crypto.util.a.b(a, "UnsupportedEncodingException = " + e.getMessage());
            return null;
        }
    }

    public String a(byte[] bArr) {
        if (bArr == null || bArr.length == 0) {
            return null;
        }
        try {
            int length = (((bArr.length / i) + 1) * i) + 156;
            byte[] bArr2 = new byte[length];
            ByteBuffer wrap = ByteBuffer.wrap(bArr2);
            SecureRandom secureRandom = new SecureRandom();
            secureRandom.nextBytes(this.l);
            this.m = true;
            byte[] bArr3 = new byte[i];
            secureRandom.nextBytes(bArr3);
            a();
            Cipher instance = Cipher.getInstance("RSA/NONE/PKCS1Padding");
            instance.init(1, e);
            byte[] doFinal = instance.doFinal(this.l);
            wrap.putShort((short) 1);
            wrap.putShort((short) 2);
            wrap.putInt(length - 12);
            wrap.putInt(bArr.length);
            wrap.put(doFinal);
            wrap.put(bArr3);
            Key secretKeySpec = new SecretKeySpec(this.l, "AES");
            Cipher instance2 = Cipher.getInstance("AES/CBC/PKCS5Padding");
            instance2.init(1, secretKeySpec, new IvParameterSpec(bArr3));
            wrap.put(instance2.doFinal(bArr));
            byte[] encode = Base64.encode(bArr2, 0, bArr2.length, 10);
            return new String(encode, 0, encode.length);
        } catch (NoSuchAlgorithmException e) {
            catfiz.crypto.util.a.b(a, "NoSuchAlgorithmException error = " + e.getMessage());
            this.m = false;
            return null;
        } catch (InvalidKeySpecException e2) {
            catfiz.crypto.util.a.b(a, "InvalidKeySpecException error = " + e2.getMessage());
            this.m = false;
            return null;
        } catch (IllegalBlockSizeException e3) {
            catfiz.crypto.util.a.b(a, "IllegalBlockSizeException error = " + e3.getMessage());
            this.m = false;
            return null;
        } catch (NoSuchPaddingException e4) {
            catfiz.crypto.util.a.b(a, "NoSuchPaddingException error = " + e4.getMessage());
            this.m = false;
            return null;
        } catch (BadPaddingException e5) {
            catfiz.crypto.util.a.b(a, "BadPaddingException error = " + e5.getMessage());
            this.m = false;
            return null;
        } catch (InvalidKeyException e6) {
            catfiz.crypto.util.a.b(a, "InvalidKeyException error = " + e6.getMessage());
            this.m = false;
            return null;
        } catch (InvalidAlgorithmParameterException e7) {
            catfiz.crypto.util.a.b(a, "InvalidAlgorithmParameterException error = " + e7.getMessage());
            this.m = false;
            return null;
        }
    }

    public byte[] b(String str) {
        byte[] bArr = null;
        if (str != null) {
            try {
                if (str.length() != 0) {
                    if (this.m) {
                        catfiz.crypto.util.a.a(a, "Cipherdata = " + str);
                        byte[] decode = Base64.decode(str.getBytes(HTTP.UTF_8), 10);
                        ByteBuffer wrap = ByteBuffer.wrap(decode);
                        wrap.getShort();
                        short s = wrap.getShort();
                        wrap.getInt();
                        wrap.getInt();
                        if (s != (short) 3) {
                            catfiz.crypto.util.a.b(a, "Receive invalid packet type");
                        } else {
                            byte[] bArr2 = new byte[f];
                            wrap.get(bArr2);
                            byte[] bArr3 = new byte[i];
                            wrap.get(bArr3);
                            Key secretKeySpec = new SecretKeySpec(this.l, "AES");
                            Cipher instance = Cipher.getInstance("AES/CBC/NoPadding");
                            instance.init(j, secretKeySpec, new IvParameterSpec(bArr3));
                            bArr2 = instance.doFinal(bArr2);
                            catfiz.crypto.util.a.a(a, "AESKEY: " + new String(bArr2, 0, i));
                            secretKeySpec = new SecretKeySpec(bArr2, 0, i, "AES");
                            Cipher instance2 = Cipher.getInstance("AES/CBC/PKCS5Padding");
                            instance2.init(j, secretKeySpec, new IvParameterSpec(bArr3));
                            decode = new byte[(decode.length - wrap.position())];
                            wrap.get(decode);
                            wrap.clear();
                            bArr = instance2.doFinal(decode);
                        }
                    } else {
                        catfiz.crypto.util.a.b(a, "Fatal error, KEYC is not valid. is it correct object?");
                    }
                }
            } catch (IOException e) {
                catfiz.crypto.util.a.b(a, "IOException error = " + e.getMessage());
            } catch (NoSuchAlgorithmException e2) {
                catfiz.crypto.util.a.b(a, "NoSuchAlgorithmException error = " + e2.getMessage());
            } catch (NoSuchPaddingException e3) {
                catfiz.crypto.util.a.b(a, "NoSuchPaddingException error = " + e3.getMessage());
            } catch (InvalidKeyException e4) {
                catfiz.crypto.util.a.b(a, "InvalidKeyException error = " + e4.getMessage());
            } catch (IllegalBlockSizeException e5) {
                catfiz.crypto.util.a.b(a, "IllegalBlockSizeException error = " + e5.getMessage());
            } catch (BadPaddingException e6) {
                catfiz.crypto.util.a.b(a, "BadPaddingException error = " + e6.getMessage());
            } catch (InvalidAlgorithmParameterException e7) {
                catfiz.crypto.util.a.b(a, "InvalidAlgorithmParameterException error = " + e7.getMessage());
            }
        }
        return bArr;
    }
}
