package android.support.v7.preference;

import android.content.Context;
import android.content.Intent;
import android.os.Build.VERSION;
import android.util.AttributeSet;
import android.util.Xml;
import android.view.InflateException;
import java.util.HashMap;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

class PreferenceInflater {
    private static final HashMap CONSTRUCTOR_MAP = new HashMap();
    private static final Class[] CONSTRUCTOR_SIGNATURE = new Class[]{Context.class, AttributeSet.class};
    private static final String EXTRA_TAG_NAME = "extra";
    private static final String INTENT_TAG_NAME = "intent";
    private static final String TAG = "PreferenceInflater";
    private final Object[] mConstructorArgs = new Object[2];
    private final Context mContext;
    private String[] mDefaultPackages;
    private PreferenceManager mPreferenceManager;

    public PreferenceInflater(Context context, PreferenceManager preferenceManager) {
        this.mContext = context;
        init(preferenceManager);
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private android.support.v7.preference.Preference createItem(java.lang.String r8, java.lang.String[] r9, android.util.AttributeSet r10) {
        /*
        r7 = this;
        r1 = 0;
        r0 = CONSTRUCTOR_MAP;
        r0 = r0.get(r8);
        r0 = (java.lang.reflect.Constructor) r0;
        if (r0 != 0) goto L_0x0029;
    L_0x000b:
        r0 = r7.mContext;	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        r3 = r0.getClassLoader();	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        if (r9 == 0) goto L_0x0016;
    L_0x0013:
        r0 = r9.length;	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        if (r0 != 0) goto L_0x0035;
    L_0x0016:
        r1 = r3.loadClass(r8);	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
    L_0x001a:
        r0 = CONSTRUCTOR_SIGNATURE;	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        r0 = r1.getConstructor(r0);	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        r1 = 1;
        r0.setAccessible(r1);	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        r1 = CONSTRUCTOR_MAP;	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        r1.put(r8, r0);	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
    L_0x0029:
        r1 = r7.mConstructorArgs;	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        r2 = 1;
        r1[r2] = r10;	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        r0 = r0.newInstance(r1);	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        r0 = (android.support.v7.preference.Preference) r0;	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        return r0;
    L_0x0035:
        r4 = r9.length;	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        r0 = 0;
        r2 = r0;
        r0 = r1;
    L_0x0039:
        if (r2 >= r4) goto L_0x0055;
    L_0x003b:
        r5 = r9[r2];	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        r6 = new java.lang.StringBuilder;	 Catch:{ ClassNotFoundException -> 0x00a2, Exception -> 0x007d }
        r6.<init>();	 Catch:{ ClassNotFoundException -> 0x00a2, Exception -> 0x007d }
        r5 = r6.append(r5);	 Catch:{ ClassNotFoundException -> 0x00a2, Exception -> 0x007d }
        r5 = r5.append(r8);	 Catch:{ ClassNotFoundException -> 0x00a2, Exception -> 0x007d }
        r5 = r5.toString();	 Catch:{ ClassNotFoundException -> 0x00a2, Exception -> 0x007d }
        r1 = r3.loadClass(r5);	 Catch:{ ClassNotFoundException -> 0x00a2, Exception -> 0x007d }
    L_0x0052:
        r2 = r2 + 1;
        goto L_0x0039;
    L_0x0055:
        if (r1 != 0) goto L_0x001a;
    L_0x0057:
        if (r0 != 0) goto L_0x007c;
    L_0x0059:
        r0 = new android.view.InflateException;	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        r1 = new java.lang.StringBuilder;	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        r1.<init>();	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        r2 = r10.getPositionDescription();	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        r1 = r1.append(r2);	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        r2 = ": Error inflating class ";
        r1 = r1.append(r2);	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        r1 = r1.append(r8);	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        r1 = r1.toString();	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        r0.<init>(r1);	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
        throw r0;	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
    L_0x007a:
        r0 = move-exception;
        throw r0;
    L_0x007c:
        throw r0;	 Catch:{ ClassNotFoundException -> 0x007a, Exception -> 0x007d }
    L_0x007d:
        r0 = move-exception;
        r1 = new android.view.InflateException;
        r2 = new java.lang.StringBuilder;
        r2.<init>();
        r3 = r10.getPositionDescription();
        r2 = r2.append(r3);
        r3 = ": Error inflating class ";
        r2 = r2.append(r3);
        r2 = r2.append(r8);
        r2 = r2.toString();
        r1.<init>(r2);
        r1.initCause(r0);
        throw r1;
    L_0x00a2:
        r0 = move-exception;
        goto L_0x0052;
        */
        throw new UnsupportedOperationException("Method not decompiled: android.support.v7.preference.PreferenceInflater.createItem(java.lang.String, java.lang.String[], android.util.AttributeSet):android.support.v7.preference.Preference");
    }

    private Preference createItemFromTag(String str, AttributeSet attributeSet) {
        InflateException inflateException;
        try {
            return -1 == str.indexOf(46) ? onCreateItem(str, attributeSet) : createItem(str, null, attributeSet);
        } catch (InflateException e) {
            throw e;
        } catch (Throwable e2) {
            inflateException = new InflateException(attributeSet.getPositionDescription() + ": Error inflating class (not found)" + str);
            inflateException.initCause(e2);
            throw inflateException;
        } catch (Throwable e22) {
            inflateException = new InflateException(attributeSet.getPositionDescription() + ": Error inflating class " + str);
            inflateException.initCause(e22);
            throw inflateException;
        }
    }

    private void init(PreferenceManager preferenceManager) {
        this.mPreferenceManager = preferenceManager;
        if (VERSION.SDK_INT >= 14) {
            setDefaultPackages(new String[]{"android.support.v14.preference.", "android.support.v7.preference."});
            return;
        }
        setDefaultPackages(new String[]{"android.support.v7.preference."});
    }

    private PreferenceGroup onMergeRoots(PreferenceGroup preferenceGroup, PreferenceGroup preferenceGroup2) {
        if (preferenceGroup != null) {
            return preferenceGroup;
        }
        preferenceGroup2.onAttachedToHierarchy(this.mPreferenceManager);
        return preferenceGroup2;
    }

    private void rInflate(XmlPullParser xmlPullParser, Preference preference, AttributeSet attributeSet) {
        XmlPullParserException xmlPullParserException;
        int depth = xmlPullParser.getDepth();
        while (true) {
            int next = xmlPullParser.next();
            if ((next == 3 && xmlPullParser.getDepth() <= depth) || next == 1) {
                return;
            }
            if (next == 2) {
                String name = xmlPullParser.getName();
                if (INTENT_TAG_NAME.equals(name)) {
                    try {
                        preference.setIntent(Intent.parseIntent(getContext().getResources(), xmlPullParser, attributeSet));
                    } catch (Throwable e) {
                        xmlPullParserException = new XmlPullParserException("Error parsing preference");
                        xmlPullParserException.initCause(e);
                        throw xmlPullParserException;
                    }
                } else if (EXTRA_TAG_NAME.equals(name)) {
                    getContext().getResources().parseBundleExtra(EXTRA_TAG_NAME, attributeSet, preference.getExtras());
                    try {
                        skipCurrentTag(xmlPullParser);
                    } catch (Throwable e2) {
                        xmlPullParserException = new XmlPullParserException("Error parsing preference");
                        xmlPullParserException.initCause(e2);
                        throw xmlPullParserException;
                    }
                } else {
                    Preference createItemFromTag = createItemFromTag(name, attributeSet);
                    ((PreferenceGroup) preference).addItemFromInflater(createItemFromTag);
                    rInflate(xmlPullParser, createItemFromTag, attributeSet);
                }
            }
        }
    }

    private static void skipCurrentTag(XmlPullParser xmlPullParser) {
        int depth = xmlPullParser.getDepth();
        while (true) {
            int next = xmlPullParser.next();
            if (next == 1) {
                return;
            }
            if (next == 3 && xmlPullParser.getDepth() <= depth) {
                return;
            }
        }
    }

    public Context getContext() {
        return this.mContext;
    }

    public String[] getDefaultPackages() {
        return this.mDefaultPackages;
    }

    public Preference inflate(int i, PreferenceGroup preferenceGroup) {
        XmlPullParser xml = getContext().getResources().getXml(i);
        try {
            Preference inflate = inflate(xml, preferenceGroup);
            return inflate;
        } finally {
            xml.close();
        }
    }

    public Preference inflate(XmlPullParser xmlPullParser, PreferenceGroup preferenceGroup) {
        Preference onMergeRoots;
        synchronized (this.mConstructorArgs) {
            AttributeSet asAttributeSet = Xml.asAttributeSet(xmlPullParser);
            this.mConstructorArgs[0] = this.mContext;
            int next;
            do {
                try {
                    next = xmlPullParser.next();
                    if (next == 2) {
                        break;
                    }
                } catch (InflateException e) {
                    throw e;
                } catch (Throwable e2) {
                    InflateException inflateException = new InflateException(e2.getMessage());
                    inflateException.initCause(e2);
                    throw inflateException;
                } catch (Throwable e22) {
                    inflateException = new InflateException(xmlPullParser.getPositionDescription() + ": " + e22.getMessage());
                    inflateException.initCause(e22);
                    throw inflateException;
                }
            } while (next != 1);
            if (next != 2) {
                throw new InflateException(xmlPullParser.getPositionDescription() + ": No start tag found!");
            }
            onMergeRoots = onMergeRoots(preferenceGroup, (PreferenceGroup) createItemFromTag(xmlPullParser.getName(), asAttributeSet));
            rInflate(xmlPullParser, onMergeRoots, asAttributeSet);
        }
        return onMergeRoots;
    }

    protected Preference onCreateItem(String str, AttributeSet attributeSet) {
        return createItem(str, this.mDefaultPackages, attributeSet);
    }

    public void setDefaultPackages(String[] strArr) {
        this.mDefaultPackages = strArr;
    }
}
