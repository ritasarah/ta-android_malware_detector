package android.support.v7.preference;

import android.os.Handler;
import android.support.v7.widget.RecyclerView.Adapter;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import java.util.ArrayList;
import java.util.List;

public class PreferenceGroupAdapter extends Adapter implements OnPreferenceChangeInternalListener {
    private static final String TAG = "PreferenceGroupAdapter";
    private Handler mHandler = new Handler();
    private volatile boolean mIsSyncing = false;
    private PreferenceGroup mPreferenceGroup;
    private List mPreferenceLayouts;
    private List mPreferenceList;
    private List mPreferenceListInternal;
    private Runnable mSyncRunnable = new Runnable() {
        public void run() {
            PreferenceGroupAdapter.this.syncMyPreferences();
        }
    };
    private PreferenceLayout mTempPreferenceLayout = new PreferenceLayout();

    class PreferenceLayout {
        private String name;
        private int resId;
        private int widgetResId;

        private PreferenceLayout() {
        }

        public boolean equals(Object obj) {
            if (!(obj instanceof PreferenceLayout)) {
                return false;
            }
            PreferenceLayout preferenceLayout = (PreferenceLayout) obj;
            return this.resId == preferenceLayout.resId && this.widgetResId == preferenceLayout.widgetResId && TextUtils.equals(this.name, preferenceLayout.name);
        }

        public int hashCode() {
            return ((((this.resId + 527) * 31) + this.widgetResId) * 31) + this.name.hashCode();
        }
    }

    public PreferenceGroupAdapter(PreferenceGroup preferenceGroup) {
        this.mPreferenceGroup = preferenceGroup;
        this.mPreferenceGroup.setOnPreferenceChangeInternalListener(this);
        this.mPreferenceList = new ArrayList();
        this.mPreferenceListInternal = new ArrayList();
        this.mPreferenceLayouts = new ArrayList();
        setHasStableIds(true);
        syncMyPreferences();
    }

    private void addPreferenceClassName(Preference preference) {
        PreferenceLayout createPreferenceLayout = createPreferenceLayout(preference, null);
        if (!this.mPreferenceLayouts.contains(createPreferenceLayout)) {
            this.mPreferenceLayouts.add(createPreferenceLayout);
        }
    }

    private PreferenceLayout createPreferenceLayout(Preference preference, PreferenceLayout preferenceLayout) {
        if (preferenceLayout == null) {
            preferenceLayout = new PreferenceLayout();
        }
        preferenceLayout.name = preference.getClass().getName();
        preferenceLayout.resId = preference.getLayoutResource();
        preferenceLayout.widgetResId = preference.getWidgetLayoutResource();
        return preferenceLayout;
    }

    private void flattenPreferenceGroup(List list, PreferenceGroup preferenceGroup) {
        preferenceGroup.sortPreferences();
        int preferenceCount = preferenceGroup.getPreferenceCount();
        for (int i = 0; i < preferenceCount; i++) {
            Preference preference = preferenceGroup.getPreference(i);
            list.add(preference);
            addPreferenceClassName(preference);
            if (preference instanceof PreferenceGroup) {
                PreferenceGroup preferenceGroup2 = (PreferenceGroup) preference;
                if (preferenceGroup2.isOnSameScreenAsChildren()) {
                    flattenPreferenceGroup(list, preferenceGroup2);
                }
            }
            preference.setOnPreferenceChangeInternalListener(this);
        }
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void syncMyPreferences() {
        /*
        r3 = this;
        monitor-enter(r3);
        r0 = r3.mIsSyncing;	 Catch:{ all -> 0x0048 }
        if (r0 == 0) goto L_0x0007;
    L_0x0005:
        monitor-exit(r3);	 Catch:{ all -> 0x0048 }
    L_0x0006:
        return;
    L_0x0007:
        r0 = 1;
        r3.mIsSyncing = r0;	 Catch:{ all -> 0x0048 }
        monitor-exit(r3);	 Catch:{ all -> 0x0048 }
        r0 = new java.util.ArrayList;
        r1 = r3.mPreferenceListInternal;
        r1 = r1.size();
        r0.<init>(r1);
        r1 = r3.mPreferenceGroup;
        r3.flattenPreferenceGroup(r0, r1);
        r3.mPreferenceListInternal = r0;
        r0 = new java.util.ArrayList;
        r1 = r3.mPreferenceListInternal;
        r1 = r1.size();
        r0.<init>(r1);
        r3.mPreferenceList = r0;
        r0 = r3.mPreferenceListInternal;
        r1 = r0.iterator();
    L_0x0030:
        r0 = r1.hasNext();
        if (r0 == 0) goto L_0x004b;
    L_0x0036:
        r0 = r1.next();
        r0 = (android.support.v7.preference.Preference) r0;
        r2 = r0.isVisible();
        if (r2 == 0) goto L_0x0030;
    L_0x0042:
        r2 = r3.mPreferenceList;
        r2.add(r0);
        goto L_0x0030;
    L_0x0048:
        r0 = move-exception;
        monitor-exit(r3);	 Catch:{ all -> 0x0048 }
        throw r0;
    L_0x004b:
        r3.notifyDataSetChanged();
        monitor-enter(r3);
        r0 = 0;
        r3.mIsSyncing = r0;	 Catch:{ all -> 0x0057 }
        r3.notifyAll();	 Catch:{ all -> 0x0057 }
        monitor-exit(r3);	 Catch:{ all -> 0x0057 }
        goto L_0x0006;
    L_0x0057:
        r0 = move-exception;
        monitor-exit(r3);	 Catch:{ all -> 0x0057 }
        throw r0;
        */
        throw new UnsupportedOperationException("Method not decompiled: android.support.v7.preference.PreferenceGroupAdapter.syncMyPreferences():void");
    }

    public Preference getItem(int i) {
        return (i < 0 || i >= getItemCount()) ? null : (Preference) this.mPreferenceList.get(i);
    }

    public int getItemCount() {
        return this.mPreferenceList.size();
    }

    public long getItemId(int i) {
        return (i < 0 || i >= getItemCount()) ? Long.MIN_VALUE : getItem(i).getId();
    }

    public int getItemViewType(int i) {
        this.mTempPreferenceLayout = createPreferenceLayout(getItem(i), this.mTempPreferenceLayout);
        return this.mPreferenceLayouts.indexOf(this.mTempPreferenceLayout);
    }

    public void onBindViewHolder(PreferenceViewHolder preferenceViewHolder, int i) {
        getItem(i).onBindViewHolder(preferenceViewHolder);
    }

    public PreferenceViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
        PreferenceLayout preferenceLayout = (PreferenceLayout) this.mPreferenceLayouts.get(i);
        LayoutInflater from = LayoutInflater.from(viewGroup.getContext());
        View inflate = from.inflate(preferenceLayout.resId, viewGroup, false);
        ViewGroup viewGroup2 = (ViewGroup) inflate.findViewById(16908312);
        if (viewGroup2 != null) {
            if (preferenceLayout.widgetResId != 0) {
                from.inflate(preferenceLayout.widgetResId, viewGroup2);
            } else {
                viewGroup2.setVisibility(8);
            }
        }
        return new PreferenceViewHolder(inflate);
    }

    public void onPreferenceChange(Preference preference) {
        notifyDataSetChanged();
    }

    public void onPreferenceHierarchyChange(Preference preference) {
        this.mHandler.removeCallbacks(this.mSyncRunnable);
        this.mHandler.post(this.mSyncRunnable);
    }

    public void onPreferenceVisibilityChange(Preference preference) {
        int i;
        if (preference.isVisible()) {
            i = -1;
            for (Preference preference2 : this.mPreferenceListInternal) {
                if (preference.equals(preference2)) {
                    break;
                }
                i = preference2.isVisible() ? i + 1 : i;
            }
            this.mPreferenceList.add(i + 1, preference);
            notifyItemInserted(i + 1);
            return;
        }
        i = this.mPreferenceList.size();
        int i2 = 0;
        while (i2 < i && !preference.equals(this.mPreferenceList.get(i2))) {
            i2++;
        }
        this.mPreferenceList.remove(i2);
        notifyItemRemoved(i2);
    }
}
