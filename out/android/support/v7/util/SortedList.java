package android.support.v7.util;

import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;

public class SortedList {
    private static final int CAPACITY_GROWTH = 10;
    private static final int DELETION = 2;
    private static final int INSERTION = 1;
    public static final int INVALID_POSITION = -1;
    private static final int LOOKUP = 4;
    private static final int MIN_CAPACITY = 10;
    private BatchedCallback mBatchedCallback;
    private Callback mCallback;
    Object[] mData;
    private int mMergedSize;
    private Object[] mOldData;
    private int mOldDataSize;
    private int mOldDataStart;
    private int mSize;
    private final Class mTClass;

    public abstract class Callback implements Comparator {
        public abstract boolean areContentsTheSame(Object obj, Object obj2);

        public abstract boolean areItemsTheSame(Object obj, Object obj2);

        public abstract int compare(Object obj, Object obj2);

        public abstract void onChanged(int i, int i2);

        public abstract void onInserted(int i, int i2);

        public abstract void onMoved(int i, int i2);

        public abstract void onRemoved(int i, int i2);
    }

    public class BatchedCallback extends Callback {
        static final int TYPE_ADD = 1;
        static final int TYPE_CHANGE = 3;
        static final int TYPE_MOVE = 4;
        static final int TYPE_NONE = 0;
        static final int TYPE_REMOVE = 2;
        int mLastEventCount = SortedList.INVALID_POSITION;
        int mLastEventPosition = SortedList.INVALID_POSITION;
        int mLastEventType = TYPE_NONE;
        private final Callback mWrappedCallback;

        public BatchedCallback(Callback callback) {
            this.mWrappedCallback = callback;
        }

        public boolean areContentsTheSame(Object obj, Object obj2) {
            return this.mWrappedCallback.areContentsTheSame(obj, obj2);
        }

        public boolean areItemsTheSame(Object obj, Object obj2) {
            return this.mWrappedCallback.areItemsTheSame(obj, obj2);
        }

        public int compare(Object obj, Object obj2) {
            return this.mWrappedCallback.compare(obj, obj2);
        }

        public void dispatchLastEvent() {
            if (this.mLastEventType != 0) {
                switch (this.mLastEventType) {
                    case TYPE_ADD /*1*/:
                        this.mWrappedCallback.onInserted(this.mLastEventPosition, this.mLastEventCount);
                        break;
                    case TYPE_REMOVE /*2*/:
                        this.mWrappedCallback.onRemoved(this.mLastEventPosition, this.mLastEventCount);
                        break;
                    case TYPE_CHANGE /*3*/:
                        this.mWrappedCallback.onChanged(this.mLastEventPosition, this.mLastEventCount);
                        break;
                }
                this.mLastEventType = TYPE_NONE;
            }
        }

        public void onChanged(int i, int i2) {
            if (this.mLastEventType != TYPE_CHANGE || i > this.mLastEventPosition + this.mLastEventCount || i + i2 < this.mLastEventPosition) {
                dispatchLastEvent();
                this.mLastEventPosition = i;
                this.mLastEventCount = i2;
                this.mLastEventType = TYPE_CHANGE;
                return;
            }
            int i3 = this.mLastEventPosition + this.mLastEventCount;
            this.mLastEventPosition = Math.min(i, this.mLastEventPosition);
            this.mLastEventCount = Math.max(i3, i + i2) - this.mLastEventPosition;
        }

        public void onInserted(int i, int i2) {
            if (this.mLastEventType != TYPE_ADD || i < this.mLastEventPosition || i > this.mLastEventPosition + this.mLastEventCount) {
                dispatchLastEvent();
                this.mLastEventPosition = i;
                this.mLastEventCount = i2;
                this.mLastEventType = TYPE_ADD;
                return;
            }
            this.mLastEventCount += i2;
            this.mLastEventPosition = Math.min(i, this.mLastEventPosition);
        }

        public void onMoved(int i, int i2) {
            dispatchLastEvent();
            this.mWrappedCallback.onMoved(i, i2);
        }

        public void onRemoved(int i, int i2) {
            if (this.mLastEventType == TYPE_REMOVE && this.mLastEventPosition == i) {
                this.mLastEventCount += i2;
                return;
            }
            dispatchLastEvent();
            this.mLastEventPosition = i;
            this.mLastEventCount = i2;
            this.mLastEventType = TYPE_REMOVE;
        }
    }

    public SortedList(Class cls, Callback callback) {
        this(cls, callback, MIN_CAPACITY);
    }

    public SortedList(Class cls, Callback callback, int i) {
        this.mTClass = cls;
        this.mData = (Object[]) Array.newInstance(cls, i);
        this.mCallback = callback;
        this.mSize = 0;
    }

    private int add(Object obj, boolean z) {
        int i = 0;
        int findIndexOf = findIndexOf(obj, this.mData, 0, this.mSize, INSERTION);
        if (findIndexOf != INVALID_POSITION) {
            if (findIndexOf < this.mSize) {
                Object obj2 = this.mData[findIndexOf];
                if (this.mCallback.areItemsTheSame(obj2, obj)) {
                    if (this.mCallback.areContentsTheSame(obj2, obj)) {
                        this.mData[findIndexOf] = obj;
                        return findIndexOf;
                    }
                    this.mData[findIndexOf] = obj;
                    this.mCallback.onChanged(findIndexOf, INSERTION);
                    return findIndexOf;
                }
            }
            i = findIndexOf;
        }
        addToData(i, obj);
        if (z) {
            this.mCallback.onInserted(i, INSERTION);
        }
        return i;
    }

    private void addAllInternal(Object[] objArr) {
        int i = !(this.mCallback instanceof BatchedCallback) ? INSERTION : 0;
        if (i != 0) {
            beginBatchedUpdates();
        }
        this.mOldData = this.mData;
        this.mOldDataStart = 0;
        this.mOldDataSize = this.mSize;
        Arrays.sort(objArr, this.mCallback);
        int deduplicate = deduplicate(objArr);
        if (this.mSize == 0) {
            this.mData = objArr;
            this.mSize = deduplicate;
            this.mMergedSize = deduplicate;
            this.mCallback.onInserted(0, deduplicate);
        } else {
            merge(objArr, deduplicate);
        }
        this.mOldData = null;
        if (i != 0) {
            endBatchedUpdates();
        }
    }

    private void addToData(int i, Object obj) {
        if (i > this.mSize) {
            throw new IndexOutOfBoundsException("cannot add item to " + i + " because size is " + this.mSize);
        }
        if (this.mSize == this.mData.length) {
            Object[] objArr = (Object[]) Array.newInstance(this.mTClass, this.mData.length + MIN_CAPACITY);
            System.arraycopy(this.mData, 0, objArr, 0, i);
            objArr[i] = obj;
            System.arraycopy(this.mData, i, objArr, i + INSERTION, this.mSize - i);
            this.mData = objArr;
        } else {
            System.arraycopy(this.mData, i, this.mData, i + INSERTION, this.mSize - i);
            this.mData[i] = obj;
        }
        this.mSize += INSERTION;
    }

    private int deduplicate(Object[] objArr) {
        int i = INSERTION;
        if (objArr.length == 0) {
            throw new IllegalArgumentException("Input array must be non-empty");
        }
        int i2 = 0;
        int i3 = INSERTION;
        while (i < objArr.length) {
            Object obj = objArr[i];
            int compare = this.mCallback.compare(objArr[i2], obj);
            if (compare > 0) {
                throw new IllegalArgumentException("Input must be sorted in ascending order.");
            }
            if (compare == 0) {
                compare = findSameItem(obj, objArr, i2, i3);
                if (compare != INVALID_POSITION) {
                    objArr[compare] = obj;
                } else {
                    if (i3 != i) {
                        objArr[i3] = obj;
                    }
                    i3 += INSERTION;
                }
            } else {
                if (i3 != i) {
                    objArr[i3] = obj;
                }
                i2 = i3;
                i3 += INSERTION;
            }
            i += INSERTION;
        }
        return i3;
    }

    private int findIndexOf(Object obj, Object[] objArr, int i, int i2, int i3) {
        int i4 = i2;
        int i5 = i;
        while (i5 < i4) {
            int i6 = (i5 + i4) / DELETION;
            Object obj2 = objArr[i6];
            int compare = this.mCallback.compare(obj2, obj);
            if (compare < 0) {
                int i7 = i4;
                i4 = i6 + INSERTION;
                i6 = i7;
            } else if (compare != 0) {
                i4 = i5;
            } else if (this.mCallback.areItemsTheSame(obj2, obj)) {
                return i6;
            } else {
                i4 = linearEqualitySearch(obj, i6, i5, i4);
                return i3 == INSERTION ? i4 != INVALID_POSITION ? i4 : i6 : i4;
            }
            i5 = i4;
            i4 = i6;
        }
        if (i3 != INSERTION) {
            i5 = INVALID_POSITION;
        }
        return i5;
    }

    private int findSameItem(Object obj, Object[] objArr, int i, int i2) {
        for (int i3 = i; i3 < i2; i3 += INSERTION) {
            if (this.mCallback.areItemsTheSame(objArr[i3], obj)) {
                return i3;
            }
        }
        return INVALID_POSITION;
    }

    private int linearEqualitySearch(Object obj, int i, int i2, int i3) {
        int i4 = i + INVALID_POSITION;
        while (i4 >= i2) {
            Object obj2 = this.mData[i4];
            if (this.mCallback.compare(obj2, obj) != 0) {
                break;
            } else if (this.mCallback.areItemsTheSame(obj2, obj)) {
                return i4;
            } else {
                i4 += INVALID_POSITION;
            }
        }
        i4 = i + INSERTION;
        while (i4 < i3) {
            obj2 = this.mData[i4];
            if (this.mCallback.compare(obj2, obj) != 0) {
                break;
            } else if (this.mCallback.areItemsTheSame(obj2, obj)) {
                return i4;
            } else {
                i4 += INSERTION;
            }
        }
        return INVALID_POSITION;
    }

    private void merge(Object[] objArr, int i) {
        this.mData = (Object[]) Array.newInstance(this.mTClass, (this.mSize + i) + MIN_CAPACITY);
        this.mMergedSize = 0;
        int i2 = 0;
        while (true) {
            if (this.mOldDataStart >= this.mOldDataSize && i2 >= i) {
                return;
            }
            if (this.mOldDataStart == this.mOldDataSize) {
                int i3 = i - i2;
                System.arraycopy(objArr, i2, this.mData, this.mMergedSize, i3);
                this.mMergedSize += i3;
                this.mSize += i3;
                this.mCallback.onInserted(this.mMergedSize - i3, i3);
                return;
            } else if (i2 == i) {
                i2 = this.mOldDataSize - this.mOldDataStart;
                System.arraycopy(this.mOldData, this.mOldDataStart, this.mData, this.mMergedSize, i2);
                this.mMergedSize = i2 + this.mMergedSize;
                return;
            } else {
                Object obj = this.mOldData[this.mOldDataStart];
                Object obj2 = objArr[i2];
                int compare = this.mCallback.compare(obj, obj2);
                if (compare > 0) {
                    Object[] objArr2 = this.mData;
                    compare = this.mMergedSize;
                    this.mMergedSize = compare + INSERTION;
                    objArr2[compare] = obj2;
                    this.mSize += INSERTION;
                    i2 += INSERTION;
                    this.mCallback.onInserted(this.mMergedSize + INVALID_POSITION, INSERTION);
                } else if (compare == 0 && this.mCallback.areItemsTheSame(obj, obj2)) {
                    Object[] objArr3 = this.mData;
                    int i4 = this.mMergedSize;
                    this.mMergedSize = i4 + INSERTION;
                    objArr3[i4] = obj2;
                    i2 += INSERTION;
                    this.mOldDataStart += INSERTION;
                    if (!this.mCallback.areContentsTheSame(obj, obj2)) {
                        this.mCallback.onChanged(this.mMergedSize + INVALID_POSITION, INSERTION);
                    }
                } else {
                    Object[] objArr4 = this.mData;
                    compare = this.mMergedSize;
                    this.mMergedSize = compare + INSERTION;
                    objArr4[compare] = obj;
                    this.mOldDataStart += INSERTION;
                }
            }
        }
    }

    private boolean remove(Object obj, boolean z) {
        int findIndexOf = findIndexOf(obj, this.mData, 0, this.mSize, DELETION);
        if (findIndexOf == INVALID_POSITION) {
            return false;
        }
        removeItemAtIndex(findIndexOf, z);
        return true;
    }

    private void removeItemAtIndex(int i, boolean z) {
        System.arraycopy(this.mData, i + INSERTION, this.mData, i, (this.mSize - i) + INVALID_POSITION);
        this.mSize += INVALID_POSITION;
        this.mData[this.mSize] = null;
        if (z) {
            this.mCallback.onRemoved(i, INSERTION);
        }
    }

    private void throwIfMerging() {
        if (this.mOldData != null) {
            throw new IllegalStateException("Cannot call this method from within addAll");
        }
    }

    public int add(Object obj) {
        throwIfMerging();
        return add(obj, true);
    }

    public void addAll(Collection collection) {
        addAll(collection.toArray((Object[]) Array.newInstance(this.mTClass, collection.size())), true);
    }

    public void addAll(Object... objArr) {
        addAll(objArr, false);
    }

    public void addAll(Object[] objArr, boolean z) {
        throwIfMerging();
        if (objArr.length != 0) {
            if (z) {
                addAllInternal(objArr);
                return;
            }
            Object[] objArr2 = (Object[]) Array.newInstance(this.mTClass, objArr.length);
            System.arraycopy(objArr, 0, objArr2, 0, objArr.length);
            addAllInternal(objArr2);
        }
    }

    public void beginBatchedUpdates() {
        throwIfMerging();
        if (!(this.mCallback instanceof BatchedCallback)) {
            if (this.mBatchedCallback == null) {
                this.mBatchedCallback = new BatchedCallback(this.mCallback);
            }
            this.mCallback = this.mBatchedCallback;
        }
    }

    public void clear() {
        throwIfMerging();
        if (this.mSize != 0) {
            int i = this.mSize;
            Arrays.fill(this.mData, 0, i, null);
            this.mSize = 0;
            this.mCallback.onRemoved(0, i);
        }
    }

    public void endBatchedUpdates() {
        throwIfMerging();
        if (this.mCallback instanceof BatchedCallback) {
            ((BatchedCallback) this.mCallback).dispatchLastEvent();
        }
        if (this.mCallback == this.mBatchedCallback) {
            this.mCallback = this.mBatchedCallback.mWrappedCallback;
        }
    }

    public Object get(int i) {
        if (i < this.mSize && i >= 0) {
            return (this.mOldData == null || i < this.mMergedSize) ? this.mData[i] : this.mOldData[(i - this.mMergedSize) + this.mOldDataStart];
        } else {
            throw new IndexOutOfBoundsException("Asked to get item at " + i + " but size is " + this.mSize);
        }
    }

    public int indexOf(Object obj) {
        if (this.mOldData != null) {
            int findIndexOf = findIndexOf(obj, this.mData, 0, this.mMergedSize, LOOKUP);
            if (findIndexOf != INVALID_POSITION) {
                return findIndexOf;
            }
            findIndexOf = findIndexOf(obj, this.mOldData, this.mOldDataStart, this.mOldDataSize, LOOKUP);
            return findIndexOf != INVALID_POSITION ? (findIndexOf - this.mOldDataStart) + this.mMergedSize : INVALID_POSITION;
        } else {
            return findIndexOf(obj, this.mData, 0, this.mSize, LOOKUP);
        }
    }

    public void recalculatePositionOfItemAt(int i) {
        throwIfMerging();
        Object obj = get(i);
        removeItemAtIndex(i, false);
        int add = add(obj, false);
        if (i != add) {
            this.mCallback.onMoved(i, add);
        }
    }

    public boolean remove(Object obj) {
        throwIfMerging();
        return remove(obj, true);
    }

    public Object removeItemAt(int i) {
        throwIfMerging();
        Object obj = get(i);
        removeItemAtIndex(i, true);
        return obj;
    }

    public int size() {
        return this.mSize;
    }

    public void updateItemAt(int i, Object obj) {
        throwIfMerging();
        Object obj2 = get(i);
        boolean z = (obj2 == obj || !this.mCallback.areContentsTheSame(obj2, obj)) ? INSERTION : false;
        if (obj2 == obj || this.mCallback.compare(obj2, obj) != 0) {
            if (z) {
                this.mCallback.onChanged(i, INSERTION);
            }
            removeItemAtIndex(i, false);
            int add = add(obj, false);
            if (i != add) {
                this.mCallback.onMoved(i, add);
                return;
            }
            return;
        }
        this.mData[i] = obj;
        if (z) {
            this.mCallback.onChanged(i, INSERTION);
        }
    }
}
