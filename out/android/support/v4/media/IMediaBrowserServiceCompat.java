package android.support.v4.media;

import android.os.Binder;
import android.os.Bundle;
import android.os.IBinder;
import android.os.IInterface;
import android.os.Parcel;
import android.support.v4.os.ResultReceiver;

public interface IMediaBrowserServiceCompat extends IInterface {

    public abstract class Stub extends Binder implements IMediaBrowserServiceCompat {
        private static final String DESCRIPTOR = "android.support.v4.media.IMediaBrowserServiceCompat";
        static final int TRANSACTION_addSubscription = 3;
        static final int TRANSACTION_connect = 1;
        static final int TRANSACTION_disconnect = 2;
        static final int TRANSACTION_getMediaItem = 5;
        static final int TRANSACTION_removeSubscription = 4;

        class Proxy implements IMediaBrowserServiceCompat {
            private IBinder mRemote;

            Proxy(IBinder iBinder) {
                this.mRemote = iBinder;
            }

            public void addSubscription(String str, IMediaBrowserServiceCompatCallbacks iMediaBrowserServiceCompatCallbacks) {
                IBinder iBinder = null;
                Parcel obtain = Parcel.obtain();
                try {
                    obtain.writeInterfaceToken(Stub.DESCRIPTOR);
                    obtain.writeString(str);
                    if (iMediaBrowserServiceCompatCallbacks != null) {
                        iBinder = iMediaBrowserServiceCompatCallbacks.asBinder();
                    }
                    obtain.writeStrongBinder(iBinder);
                    this.mRemote.transact(Stub.TRANSACTION_addSubscription, obtain, null, Stub.TRANSACTION_connect);
                } finally {
                    obtain.recycle();
                }
            }

            public IBinder asBinder() {
                return this.mRemote;
            }

            public void connect(String str, Bundle bundle, IMediaBrowserServiceCompatCallbacks iMediaBrowserServiceCompatCallbacks) {
                IBinder iBinder = null;
                Parcel obtain = Parcel.obtain();
                try {
                    obtain.writeInterfaceToken(Stub.DESCRIPTOR);
                    obtain.writeString(str);
                    if (bundle != null) {
                        obtain.writeInt(Stub.TRANSACTION_connect);
                        bundle.writeToParcel(obtain, 0);
                    } else {
                        obtain.writeInt(0);
                    }
                    if (iMediaBrowserServiceCompatCallbacks != null) {
                        iBinder = iMediaBrowserServiceCompatCallbacks.asBinder();
                    }
                    obtain.writeStrongBinder(iBinder);
                    this.mRemote.transact(Stub.TRANSACTION_connect, obtain, null, Stub.TRANSACTION_connect);
                } finally {
                    obtain.recycle();
                }
            }

            public void disconnect(IMediaBrowserServiceCompatCallbacks iMediaBrowserServiceCompatCallbacks) {
                IBinder iBinder = null;
                Parcel obtain = Parcel.obtain();
                try {
                    obtain.writeInterfaceToken(Stub.DESCRIPTOR);
                    if (iMediaBrowserServiceCompatCallbacks != null) {
                        iBinder = iMediaBrowserServiceCompatCallbacks.asBinder();
                    }
                    obtain.writeStrongBinder(iBinder);
                    this.mRemote.transact(Stub.TRANSACTION_disconnect, obtain, null, Stub.TRANSACTION_connect);
                } finally {
                    obtain.recycle();
                }
            }

            public String getInterfaceDescriptor() {
                return Stub.DESCRIPTOR;
            }

            public void getMediaItem(String str, ResultReceiver resultReceiver) {
                Parcel obtain = Parcel.obtain();
                try {
                    obtain.writeInterfaceToken(Stub.DESCRIPTOR);
                    obtain.writeString(str);
                    if (resultReceiver != null) {
                        obtain.writeInt(Stub.TRANSACTION_connect);
                        resultReceiver.writeToParcel(obtain, 0);
                    } else {
                        obtain.writeInt(0);
                    }
                    this.mRemote.transact(Stub.TRANSACTION_getMediaItem, obtain, null, Stub.TRANSACTION_connect);
                } finally {
                    obtain.recycle();
                }
            }

            public void removeSubscription(String str, IMediaBrowserServiceCompatCallbacks iMediaBrowserServiceCompatCallbacks) {
                IBinder iBinder = null;
                Parcel obtain = Parcel.obtain();
                try {
                    obtain.writeInterfaceToken(Stub.DESCRIPTOR);
                    obtain.writeString(str);
                    if (iMediaBrowserServiceCompatCallbacks != null) {
                        iBinder = iMediaBrowserServiceCompatCallbacks.asBinder();
                    }
                    obtain.writeStrongBinder(iBinder);
                    this.mRemote.transact(Stub.TRANSACTION_removeSubscription, obtain, null, Stub.TRANSACTION_connect);
                } finally {
                    obtain.recycle();
                }
            }
        }

        public Stub() {
            attachInterface(this, DESCRIPTOR);
        }

        public static IMediaBrowserServiceCompat asInterface(IBinder iBinder) {
            if (iBinder == null) {
                return null;
            }
            IInterface queryLocalInterface = iBinder.queryLocalInterface(DESCRIPTOR);
            return (queryLocalInterface == null || !(queryLocalInterface instanceof IMediaBrowserServiceCompat)) ? new Proxy(iBinder) : (IMediaBrowserServiceCompat) queryLocalInterface;
        }

        public IBinder asBinder() {
            return this;
        }

        public boolean onTransact(int i, Parcel parcel, Parcel parcel2, int i2) {
            ResultReceiver resultReceiver = null;
            String readString;
            switch (i) {
                case TRANSACTION_connect /*1*/:
                    Bundle bundle;
                    parcel.enforceInterface(DESCRIPTOR);
                    readString = parcel.readString();
                    if (parcel.readInt() != 0) {
                        bundle = (Bundle) Bundle.CREATOR.createFromParcel(parcel);
                    }
                    connect(readString, bundle, android.support.v4.media.IMediaBrowserServiceCompatCallbacks.Stub.asInterface(parcel.readStrongBinder()));
                    return true;
                case TRANSACTION_disconnect /*2*/:
                    parcel.enforceInterface(DESCRIPTOR);
                    disconnect(android.support.v4.media.IMediaBrowserServiceCompatCallbacks.Stub.asInterface(parcel.readStrongBinder()));
                    return true;
                case TRANSACTION_addSubscription /*3*/:
                    parcel.enforceInterface(DESCRIPTOR);
                    addSubscription(parcel.readString(), android.support.v4.media.IMediaBrowserServiceCompatCallbacks.Stub.asInterface(parcel.readStrongBinder()));
                    return true;
                case TRANSACTION_removeSubscription /*4*/:
                    parcel.enforceInterface(DESCRIPTOR);
                    removeSubscription(parcel.readString(), android.support.v4.media.IMediaBrowserServiceCompatCallbacks.Stub.asInterface(parcel.readStrongBinder()));
                    return true;
                case TRANSACTION_getMediaItem /*5*/:
                    parcel.enforceInterface(DESCRIPTOR);
                    readString = parcel.readString();
                    if (parcel.readInt() != 0) {
                        resultReceiver = (ResultReceiver) ResultReceiver.CREATOR.createFromParcel(parcel);
                    }
                    getMediaItem(readString, resultReceiver);
                    return true;
                case 1598968902:
                    parcel2.writeString(DESCRIPTOR);
                    return true;
                default:
                    return super.onTransact(i, parcel, parcel2, i2);
            }
        }
    }

    void addSubscription(String str, IMediaBrowserServiceCompatCallbacks iMediaBrowserServiceCompatCallbacks);

    void connect(String str, Bundle bundle, IMediaBrowserServiceCompatCallbacks iMediaBrowserServiceCompatCallbacks);

    void disconnect(IMediaBrowserServiceCompatCallbacks iMediaBrowserServiceCompatCallbacks);

    void getMediaItem(String str, ResultReceiver resultReceiver);

    void removeSubscription(String str, IMediaBrowserServiceCompatCallbacks iMediaBrowserServiceCompatCallbacks);
}
