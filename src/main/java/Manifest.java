import org.apache.commons.io.FilenameUtils;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Created by Rita on 4/12/2016.
 */
public class Manifest {
    // declares an array of integers
    Map<String,Boolean> permission;
    Map<String,Boolean> sAPICall;
    int apilevel;

    Manifest(){// allocates memory for 10 integers
        permission = new TreeMap<String,Boolean>();
        sAPICall = new TreeMap<String,Boolean>();

        BufferedReader br  = null;
//        StringBuilder result = new StringBuilder();

        try {
            String sCurrentLine;
            br = new BufferedReader(new FileReader("permission.txt"));
            while ((sCurrentLine = br.readLine())!=null){
                permission.put(sCurrentLine, false);
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            String sCurrentLine;
            br = new BufferedReader(new FileReader("suspicious_calls.txt"));
            while ((sCurrentLine = br.readLine())!=null){
                sAPICall.put(sCurrentLine, false);
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }


    }

    public void getPermission(){
        BufferedReader br  = null;
        StringBuilder result = new StringBuilder();

        try {
            String sCurrentLine;
            br = new BufferedReader(new FileReader("out/AndroidManifest.xml"));
            while ((sCurrentLine = br.readLine())!=null){
                result.append(sCurrentLine);
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println(result);

        String permissionRegex="permission\\.(.+?)\"" ;
        Pattern permissionPattern = Pattern.compile(permissionRegex);
        Matcher permissionMatcher = permissionPattern.matcher(result);

        while(permissionMatcher.find()){
            String s = permissionMatcher.group(0);
            s = s.substring(0,s.length()-1);
            s = s.replaceAll("permission.","");

            if (permission.containsKey(s)){
                permission.put(s,true);
            }

            System.out.println(s);
        }

    }

    public void openClass(String filepath){
        BufferedReader br  = null;
        StringBuilder result = new StringBuilder();

        try {
            String sCurrentLine;
            br = new BufferedReader(new FileReader(filepath));
            while ((sCurrentLine = br.readLine())!=null){
                result.append(sCurrentLine);
                if(sCurrentLine.contains("getDeviceId")){
                    System.out.println("find getDeviceId");
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
//        System.out.println(result);

    }

    public void listFilesForFolder(final File folder) {
        for (final File fileEntry : folder.listFiles()) {
            if (fileEntry.isDirectory()) {
                listFilesForFolder(fileEntry);
            } else {
//                System.out.println(fileEntry.getName());
                if(FilenameUtils.getExtension(fileEntry.getName()).equals("java")){
                    try {
                        openClass(fileEntry.getCanonicalPath().toString());
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }

    public void getSuspiciousCalls(){
        final File folder = new File("out/");
        listFilesForFolder(folder);



    }

    public void getAPILevel(){
        BufferedReader br  = null;
        StringBuilder result = new StringBuilder();

        try {
            String sCurrentLine;
            br = new BufferedReader(new FileReader("out/AndroidManifest.xml"));
            while ((sCurrentLine = br.readLine())!=null){
                result.append(sCurrentLine);
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println(result);

        String permissionRegex="platformBuildVersionCode=\"(\\d+)\"" ;
        Pattern permissionPattern = Pattern.compile(permissionRegex);
        Matcher permissionMatcher = permissionPattern.matcher(result);

        while(permissionMatcher.find()){
            String s = permissionMatcher.group(0);
            s = s.replaceAll("platformBuildVersionCode=","");
            s = s.substring(1,s.length()-1);

            apilevel = Integer.parseInt(s);

        }

    }

    public void printPermission(){
        System.out.println(permission.toString());
    }

    public void printSuspiciousCalls(){
        System.out.println(sAPICall.toString());
    }

    public void printAPILevel() {
        System.out.println(apilevel);
    }


}
