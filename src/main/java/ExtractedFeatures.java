import org.apache.commons.io.FilenameUtils;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Created by Rita on 4/12/2016.
 */
public class ExtractedFeatures {
    // declares an array of integers
    Map<String,Boolean> permission;
    Map<String,Boolean> sAPICall;
    int apilevel;
    String apkName;
    boolean malware;

    ExtractedFeatures(){// allocates memory for 10 integers
        permission = new HashMap<String,Boolean>();
        sAPICall = new HashMap<String,Boolean>();
        apkName = null;
        malware = false;

        BufferedReader br  = null;
//        StringBuilder result = new StringBuilder();

        try {
            String sCurrentLine;
            br = new BufferedReader(new FileReader("permission.txt"));
            while ((sCurrentLine = br.readLine())!=null){
                permission.put(sCurrentLine, false);
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            String sCurrentLine;
            br = new BufferedReader(new FileReader("suspicious_calls.txt"));
            while ((sCurrentLine = br.readLine())!=null){
                sAPICall.put(sCurrentLine, false);
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }


    }

    public String getApkName(){ return apkName;}

    public void setApkName(String _apkName){
        apkName = _apkName;
    }

    public void setMalware(boolean _malware){
        malware = _malware;
    }

    public void getPermission(){
        BufferedReader br  = null;
        StringBuilder result = new StringBuilder();

        try {
            String sCurrentLine;
            br = new BufferedReader(new FileReader("out/AndroidManifest.xml"));
            while ((sCurrentLine = br.readLine())!=null){
                result.append(sCurrentLine);
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
//        System.out.println(result);

        String permissionRegex="permission\\.(.+?)\"" ;
        Pattern permissionPattern = Pattern.compile(permissionRegex);
        Matcher permissionMatcher = permissionPattern.matcher(result);

        while(permissionMatcher.find()){
            String s = permissionMatcher.group(0);
            s = s.substring(0,s.length()-1);
            s = s.replaceAll("permission.","");

            if (permission.containsKey(s)){
                permission.put(s,true);
            }
//            System.out.println(s);
        }

    }

    public void openClass(String filepath){
        BufferedReader br  = null;
        StringBuilder result = new StringBuilder();

        try {
            String sCurrentLine;
            br = new BufferedReader(new FileReader(filepath));
            while ((sCurrentLine = br.readLine())!=null){
                result.append(sCurrentLine);
                for (Map.Entry<String,Boolean> entry : sAPICall.entrySet())
                {
                    if(sCurrentLine.contains(entry.getKey())){
//                        System.out.println("find " + entry.getKey());
                        sAPICall.put(entry.getKey(),true);
                    }
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
//        System.out.println(result);
    }

    public void listFilesForFolder(final File folder) {
        for (final File fileEntry : folder.listFiles()) {
            if (fileEntry.isDirectory()) {
                listFilesForFolder(fileEntry);
            } else {
//                System.out.println(fileEntry.getName());
                if(FilenameUtils.getExtension(fileEntry.getName()).equals("java")){
                    try {
                        openClass(fileEntry.getCanonicalPath().toString());
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }

    public void getSuspiciousCalls(){
        final File folder = new File("out/");
        listFilesForFolder(folder);

    }

    public void getAPILevel(){
        BufferedReader br  = null;
        StringBuilder result = new StringBuilder();

        try {
            String sCurrentLine;
            br = new BufferedReader(new FileReader("out/AndroidManifest.xml"));
            while ((sCurrentLine = br.readLine())!=null){
                result.append(sCurrentLine);
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
//        System.out.println(result);

        String permissionRegex="platformBuildVersionCode=\"(\\d+)\"" ;
        Pattern permissionPattern = Pattern.compile(permissionRegex);
        Matcher permissionMatcher = permissionPattern.matcher(result);

        while(permissionMatcher.find()){
            String s = permissionMatcher.group(0);
            s = s.replaceAll("platformBuildVersionCode=","");
            s = s.substring(1,s.length()-1);

            apilevel = Integer.parseInt(s);
        }
    }

    public void printHeaderArff(String filePath){
        PrintWriter writer;
        try {
            writer = new PrintWriter(filePath, "UTF-8");
            writer.println("@relation 'datamasukan-weka.filters.unsupervised.attribute.NominalToString-Cfirst-weka.filters.unsupervised.attribute.NumericToNominal-Rfirst-last-weka.filters.unsupervised.attribute.Remove-R8,18'\n");
            writer.println("@attribute malware {null,true,false}");
            for (Map.Entry<String,Boolean> entry : permission.entrySet())
            {
                writer.println("@attribute " + entry.getKey() + " numeric" );
            }
            for (Map.Entry<String,Boolean> entry : sAPICall.entrySet())
            {
                writer.println("@attribute " + entry.getKey() + " numeric" );
            }
            writer.println("\n" + "'@data");
            writer.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }

    public void printDatasetArff(String filePath){
        int j;
        try {
            PrintWriter writer = new PrintWriter(new FileOutputStream(new File(filePath), true));
            System.out.println("printing dataset");
            j = 0 ;
            writer.print("{");

            if (malware) {
                writer.print(j + " true,");
            }else {
                writer.print(j + " false,");
            }

            for (Map.Entry<String,Boolean> entry : permission.entrySet())
            {
                if (entry.getValue()){
                    writer.print(j + " 1,");
                }
                j++;
            }

            for (Map.Entry<String,Boolean> entry : sAPICall.entrySet())
            {
                if (j == sAPICall.size()){
                    if (entry.getValue()){
                        writer.print( j +" 1");
                    }
                }else {
                    if (entry.getValue()){
                        writer.print( j +" 1,");
                    }
                    j++;
                }
            }

            writer.println("}");
            writer.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

    }

    public boolean isMalware () {
        return malware;
    }

    public void printPermission(){
        System.out.println(permission.toString());
    }

    public void printSuspiciousCalls(){
        System.out.println(sAPICall.toString());
    }

    public void printAPILevel() {
        System.out.println(apilevel);
    }


}
